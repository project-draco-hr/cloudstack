{
  String problemName="com.example.bar<>&\"'";
  Logger logger=Logger.getLogger(problemName);
  Level level=new ProblemLevel(problemName);
  Exception ex=new IllegalArgumentException(problemName);
  String threadName=Thread.currentThread().getName();
  Thread.currentThread().setName(problemName);
  NDC.push(problemName);
  Hashtable mdcMap=MDC.getContext();
  if (mdcMap != null) {
    mdcMap.clear();
  }
  MDC.put(problemName,problemName);
  LoggingEvent event=new LoggingEvent(problemName,logger,level,problemName,ex);
  XMLLayout layout=(XMLLayout)createLayout();
  layout.setProperties(true);
  String result=layout.format(event);
  mdcMap=MDC.getContext();
  if (mdcMap != null) {
    mdcMap.clear();
  }
  Thread.currentThread().setName(threadName);
  Element parsedResult=parse(result);
  checkEventElement(parsedResult,event);
  int childElementCount=0;
  for (Node node=parsedResult.getFirstChild(); node != null; node=node.getNextSibling()) {
switch (node.getNodeType()) {
case Node.ELEMENT_NODE:
      childElementCount++;
switch (childElementCount) {
case 1:
      checkMessageElement((Element)node,problemName);
    break;
case 2:
  checkNDCElement((Element)node,problemName);
break;
case 3:
checkThrowableElement((Element)node,ex);
break;
case 4:
checkPropertiesElement((Element)node,problemName,problemName);
break;
default :
fail("Unexpected element");
break;
}
break;
case Node.COMMENT_NODE:
break;
case Node.TEXT_NODE:
break;
default :
fail("Unexpected node type");
break;
}
}
}
