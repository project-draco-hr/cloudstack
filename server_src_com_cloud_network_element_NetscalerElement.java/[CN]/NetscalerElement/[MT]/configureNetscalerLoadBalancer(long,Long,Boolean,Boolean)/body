{
  ExternalLoadBalancerDeviceVO lbDeviceVo=_lbDeviceDao.findById(lbDeviceId);
  Map<String,String> lbDetails=_detailsDao.findDetails(lbDeviceVo.getHostId());
  if ((lbDeviceVo == null) || !isNetscalerDevice(lbDeviceVo.getDeviceName())) {
    throw new InvalidParameterValueException("No netscaler device found with ID: " + lbDeviceId);
  }
  String deviceName=lbDeviceVo.getDeviceName();
  if (dedicatedUse != null || capacity != null || inline != null) {
    if (NetworkDevice.NetscalerSDXLoadBalancer.getName().equalsIgnoreCase(deviceName) || NetworkDevice.NetscalerMPXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
      if (dedicatedUse != null && dedicatedUse == true) {
        throw new InvalidParameterValueException("Netscaler MPX and SDX device should be shared and can not be dedicated to a single account.");
      }
    }
    List<NetworkExternalLoadBalancerVO> networks=_networkLBDao.listByLoadBalancerDeviceId(lbDeviceId);
    if ((networks != null) && !networks.isEmpty()) {
      if (capacity != null && capacity < networks.size()) {
        throw new CloudRuntimeException("There are more number of networks already using this netscaler device than configured capacity");
      }
      if (dedicatedUse != null && dedicatedUse == true) {
        throw new CloudRuntimeException("There are networks already using this netscaler device to make device dedicated");
      }
      if (inline != null) {
        boolean _setInline=Boolean.parseBoolean((String)lbDetails.get("inline"));
        if (inline != _setInline) {
          throw new CloudRuntimeException("There are networks already using this netscaler device to change the device inline or side-by-side configuration");
        }
      }
    }
  }
  if (!NetworkDevice.NetscalerSDXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
    if (capacity != null) {
      lbDeviceVo.setCapacity(capacity);
    }
  }
 else {
  }
  if (dedicatedUse != null) {
    lbDeviceVo.setIsDedicatedDevice(dedicatedUse);
  }
  if (inline != null && inline == true) {
    lbDeviceVo.setIsInlineMode(true);
    lbDetails.put("inline","true");
  }
 else {
    lbDeviceVo.setIsInlineMode(false);
    lbDetails.put("inline","false");
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _lbDeviceDao.update(lbDeviceId,lbDeviceVo);
  _detailsDao.persist(lbDeviceVo.getHostId(),lbDetails);
  HostVO host=_hostDao.findById(lbDeviceVo.getHostId());
  txn.commit();
  _agentMgr.reconnect(host.getId());
  return lbDeviceVo;
}
