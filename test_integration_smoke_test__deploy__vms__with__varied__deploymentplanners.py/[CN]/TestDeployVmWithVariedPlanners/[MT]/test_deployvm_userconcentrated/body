@attr(tags=['simulator', 'advanced', 'basic', 'sg'])
def test_deployvm_userconcentrated(self):
    'Test deploy VMs using user concentrated planner\n\t'
    self.service_offering_userconcentrated = ServiceOffering.create(self.apiclient, self.services['service_offering'], deploymentplanner='UserConcentratedPodPlanner')
    self.virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering_userconcentrated.id, templateid=self.template.id)
    self.virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering_userconcentrated.id, templateid=self.template.id)
    list_vm_1 = VirtualMachine.list(self.apiclient, id=self.virtual_machine_1.id)
    list_vm_2 = VirtualMachine.list(self.apiclient, id=self.virtual_machine_2.id)
    self.assertEqual(isinstance(list_vm_1, list), True, 'List VM response was not a valid list')
    self.assertEqual(isinstance(list_vm_2, list), True, 'List VM response was not a valid list')
    vm1 = list_vm_1[0]
    vm2 = list_vm_2[0]
    self.assertEqual(vm1.state, 'Running', msg='VM is not in Running state')
    self.assertEqual(vm2.state, 'Running', msg='VM is not in Running state')
    self.assertNotEqual(vm1.hostid, vm2.hostid, msg='VMs meant to be concentrated are deployed on the different hosts')
