{
  if (aclId == null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Can't find network by id");
    }
    aclId=network.getNetworkACLId();
    if (aclId == null) {
      throw new InvalidParameterValueException("Network is not associated with any ACL");
    }
  }
  NetworkACL networkACL=_networkACLDao.findById(aclId);
  Vpc vpc=_vpcMgr.getVpc(networkACL.getVpcId());
  Account aclOwner=_accountMgr.getAccount(vpc.getAccountId());
  _accountMgr.checkAccess(caller,null,false,vpc);
  _accountMgr.checkAccess(aclOwner,AccessType.ModifyEntry,false,networkACL);
  if (!protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (icmpCode != null || icmpType != null)) {
    throw new InvalidParameterValueException("Can specify icmpCode and icmpType for ICMP protocol only");
  }
  if (protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (portStart != null || portEnd != null)) {
    throw new InvalidParameterValueException("Can't specify start/end port when protocol is ICMP");
  }
  if (icmpType != null) {
    if (icmpType.longValue() != -1 && !NetUtils.validateIcmpType(icmpType.longValue())) {
      throw new InvalidParameterValueException("Invalid icmp type; should belong to [0-255] range");
    }
    if (icmpCode != null) {
      if (icmpCode.longValue() != -1 && !NetUtils.validateIcmpCode(icmpCode.longValue())) {
        throw new InvalidParameterValueException("Invalid icmp code; should belong to [0-15] range and can" + " be defined when icmpType belongs to [0-40] range");
      }
    }
  }
  validateNetworkACLItem(caller,portStart,portEnd,protocol);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkACLItemVO newRule=new NetworkACLItemVO(portStart,portEnd,protocol.toLowerCase(),aclId,sourceCidrList,icmpCode,icmpType,trafficType);
  newRule.setType(type);
  newRule=_networkACLItemDao.persist(newRule);
  if (type == NetworkACLItem.NetworkACLType.User) {
  }
  if (!_networkACLItemDao.setStateToAdd(newRule)) {
    throw new CloudRuntimeException("Unable to update the state to add for " + newRule);
  }
  UserContext.current().setEventDetails("ACL Item Id: " + newRule.getId());
  txn.commit();
  return getNetworkACLItem(newRule.getId());
}
