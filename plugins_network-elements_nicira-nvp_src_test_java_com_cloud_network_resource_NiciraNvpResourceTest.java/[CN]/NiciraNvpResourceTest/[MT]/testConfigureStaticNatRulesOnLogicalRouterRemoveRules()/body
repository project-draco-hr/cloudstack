{
  resource.configure("NiciraNvpResource",parameters);
  final ConfigureStaticNatRulesOnLogicalRouterCommand cmd=mock(ConfigureStaticNatRulesOnLogicalRouterCommand.class);
  final StaticNatRuleTO rule=new StaticNatRuleTO(1,"11.11.11.11",null,null,"10.10.10.10",null,null,null,true,false);
  final List<StaticNatRuleTO> rules=new ArrayList<StaticNatRuleTO>();
  rules.add(rule);
  when(cmd.getRules()).thenReturn(rules);
  when(cmd.getLogicalRouterUuid()).thenReturn("aaaaa");
  final NatRule[] rulepair=resource.generateStaticNatRulePair("10.10.10.10","11.11.11.11");
  final UUID rule0Uuid=UUID.randomUUID();
  final UUID rule1Uuid=UUID.randomUUID();
  rulepair[0].setUuid(rule0Uuid);
  rulepair[1].setUuid(rule1Uuid);
  when(nvpApi.createLogicalRouterNatRule(eq("aaaaa"),(NatRule)any())).thenReturn(rulepair[0]).thenReturn(rulepair[1]);
  @SuppressWarnings("unchecked") final NiciraNvpList<NatRule> storedRules=mock(NiciraNvpList.class);
  when(storedRules.getResultCount()).thenReturn(2);
  when(storedRules.getResults()).thenReturn(Arrays.asList(rulepair));
  when(nvpApi.findNatRulesByLogicalRouterUuid("aaaaa")).thenReturn(storedRules);
  final ConfigureStaticNatRulesOnLogicalRouterAnswer a=(ConfigureStaticNatRulesOnLogicalRouterAnswer)resource.executeRequest(cmd);
  assertTrue(a.getResult());
  verify(nvpApi,atLeast(2)).deleteLogicalRouterNatRule(eq("aaaaa"),argThat(new ArgumentMatcher<UUID>(){
    @Override public boolean matches(    final Object argument){
      final UUID uuid=(UUID)argument;
      if (rule0Uuid.equals(uuid) || rule1Uuid.equals(uuid)) {
        return true;
      }
      return false;
    }
  }
));
}
