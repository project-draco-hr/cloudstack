{
  resource.configure("NiciraNvpResource",parameters);
  final ConfigurePortForwardingRulesOnLogicalRouterCommand cmd=mock(ConfigurePortForwardingRulesOnLogicalRouterCommand.class);
  final PortForwardingRuleTO rule=new PortForwardingRuleTO(1,"11.11.11.11",80,80,"10.10.10.10",8080,8080,"tcp",false,false);
  final List<PortForwardingRuleTO> rules=new ArrayList<PortForwardingRuleTO>();
  rules.add(rule);
  when(cmd.getRules()).thenReturn(rules);
  when(cmd.getLogicalRouterUuid()).thenReturn("aaaaa");
  final NatRule[] rulepair=resource.generatePortForwardingRulePair("10.10.10.10",new int[]{8080,8080},"11.11.11.11",new int[]{80,80},"tcp");
  rulepair[0].setUuid(UUID.randomUUID());
  rulepair[1].setUuid(UUID.randomUUID());
  when(nvpApi.createLogicalRouterNatRule(eq("aaaaa"),(NatRule)any())).thenReturn(rulepair[0]).thenThrow(new NiciraNvpApiException());
  @SuppressWarnings("unchecked") final List<NatRule> storedRules=Collections.EMPTY_LIST;
  when(nvpApi.findNatRulesByLogicalRouterUuid("aaaaa")).thenReturn(storedRules);
  final ConfigurePortForwardingRulesOnLogicalRouterAnswer a=(ConfigurePortForwardingRulesOnLogicalRouterAnswer)resource.executeRequest(cmd);
  assertFalse(a.getResult());
  verify(nvpApi,atLeastOnce()).deleteLogicalRouterNatRule(eq("aaaaa"),eq(rulepair[0].getUuid()));
}
