@attr(tags=['advanced', 'basic', 'multihosts', 'implicitplanner'], required_hardware='false')
def test_01_deploy_vm_with_implicit_planner(self):
    'Test implicit planner is placing vms of an account on implicitly dedicated hosts.\n        '
    all_hosts = list_hosts(self.apiclient, type='Routing')
    empty_host = None
    for host in all_hosts:
        vms_on_host = list_virtual_machines(self.api_client, hostid=host.id, listall=True)
        if (vms_on_host is None):
            ssvms_on_host = list_ssvms(self.api_client, hostid=host.id, listall=True)
            if (ssvms_on_host is None):
                routers_on_host = list_routers(self.api_client, hostid=host.id, listall=True)
                if (routers_on_host is None):
                    empty_host = host
                    self.services['small']['zoneid'] = host.zoneid
                    break
    if (empty_host is None):
        self.skipTest('Did not find any empty hosts, Skipping')
    virtual_machine_1 = VirtualMachine.create(self.api_client, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.small_offering.id, mode=self.services['mode'])
    list_vm_response_1 = list_virtual_machines(self.apiclient, id=virtual_machine_1.id)
    self.assertEqual(isinstance(list_vm_response_1, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_vm_response_1, None, 'Check virtual machine is listVirtualMachines')
    vm_response_1 = list_vm_response_1[0]
    self.assertEqual(vm_response_1.id, virtual_machine_1.id, 'Check virtual machine ID of VM')
    virtual_machine_2 = VirtualMachine.create(self.api_client, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.small_offering.id, mode=self.services['mode'])
    list_vm_response_2 = list_virtual_machines(self.apiclient, id=virtual_machine_2.id)
    self.assertEqual(isinstance(list_vm_response_2, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_vm_response_2, None, 'Check virtual machine is listVirtualMachines')
    vm_response_2 = list_vm_response_2[0]
    self.assertEqual(vm_response_2.id, virtual_machine_2.id, 'Check virtual machine ID of VM')
    self.assertEqual(vm_response_1.hostid, vm_response_2.hostid, 'Check both vms have the same host id')
    return
