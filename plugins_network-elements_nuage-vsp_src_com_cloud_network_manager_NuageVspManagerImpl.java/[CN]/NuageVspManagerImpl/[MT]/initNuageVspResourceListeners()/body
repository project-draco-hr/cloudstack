{
  _agentMgr.registerForHostEvents(new Listener(){
    @Override public boolean processAnswers(    long agentId,    long seq,    Answer[] answers){
      return true;
    }
    @Override public boolean processCommands(    long agentId,    long seq,    Command[] commands){
      if (commands != null && commands.length == 1) {
        Command command=commands[0];
        if (command instanceof PingNuageVspCommand) {
          PingNuageVspCommand pingNuageVspCommand=(PingNuageVspCommand)command;
          if (pingNuageVspCommand.shouldAudit()) {
            Host host=_hostDao.findById(pingNuageVspCommand.getHostId());
            auditHost((HostVO)host);
          }
        }
      }
      return true;
    }
    @Override public AgentControlAnswer processControlCommand(    long agentId,    AgentControlCommand cmd){
      return null;
    }
    @Override public void processHostAdded(    long hostId){
    }
    @Override public void processConnect(    Host host,    StartupCommand cmd,    boolean forRebalance) throws ConnectionException {
    }
    @Override public boolean processDisconnect(    long agentId,    Status state){
      return true;
    }
    @Override public void processHostAboutToBeRemoved(    long hostId){
    }
    @Override public void processHostRemoved(    long hostId,    long clusterId){
    }
    @Override public boolean isRecurring(){
      return false;
    }
    @Override public int getTimeout(){
      return 0;
    }
    @Override public boolean processTimeout(    long agentId,    long seq){
      return true;
    }
  }
,false,true,false);
}
