{
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      NetworkOffering sharedNetworkOfferingWithSG=_networkOfferingDao.findByUniqueName(nuageVspSharedNetworkOfferingWithSGServiceName);
      if (sharedNetworkOfferingWithSG == null) {
        NetworkOfferingVO defaultNuageVspSharedSGNetworkOffering=new NetworkOfferingVO(nuageVspSharedNetworkOfferingWithSGServiceName,"Offering for NuageVsp Shared Security group enabled networks",Networks.TrafficType.Guest,false,false,null,null,true,NetworkOffering.Availability.Optional,null,Network.GuestType.Shared,true,true,false,false,false);
        defaultNuageVspSharedSGNetworkOffering.setState(NetworkOffering.State.Enabled);
        defaultNuageVspSharedSGNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultNuageVspSharedSGNetworkOffering);
        Map<Network.Service,Network.Provider> defaultNuageVspSharedSGNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
        defaultNuageVspSharedSGNetworkOfferingProviders.put(Network.Service.Dhcp,Network.Provider.NuageVsp);
        defaultNuageVspSharedSGNetworkOfferingProviders.put(Network.Service.SecurityGroup,Network.Provider.NuageVsp);
        defaultNuageVspSharedSGNetworkOfferingProviders.put(Network.Service.Connectivity,Network.Provider.NuageVsp);
        for (        Network.Service service : defaultNuageVspSharedSGNetworkOfferingProviders.keySet()) {
          NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNuageVspSharedSGNetworkOffering.getId(),service,defaultNuageVspSharedSGNetworkOfferingProviders.get(service));
          _networkOfferingServiceMapDao.persist(offService);
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Added service for the NuageVsp network offering: " + offService);
          }
        }
      }
    }
  }
);
}
