{
  Integer numOfSyncThreads=Integer.valueOf(_configDao.getValue(NuageVspManager.NuageVspSyncWorkers.key()));
  Integer syncUpIntervalInMinutes=Integer.valueOf(_configDao.getValue(NuageVspManager.NuageVspSyncInterval.key()));
  if (numOfSyncThreads != null && syncUpIntervalInMinutes != null) {
    ThreadFactory threadFactory=new ThreadFactory(){
      public Thread newThread(      Runnable runnable){
        Thread thread=new Thread(runnable,"Nuage Vsp sync task");
        if (thread.isDaemon())         thread.setDaemon(false);
        if (thread.getPriority() != Thread.NORM_PRIORITY)         thread.setPriority(Thread.NORM_PRIORITY);
        return thread;
      }
    }
;
    scheduler=Executors.newScheduledThreadPool(numOfSyncThreads,threadFactory);
    scheduler.scheduleWithFixedDelay(new NuageVspSyncTask("FLOATING_IP"),ONE_MINUTE_MULTIPLIER * 15,ONE_MINUTE_MULTIPLIER * syncUpIntervalInMinutes,TimeUnit.MILLISECONDS);
    scheduler.scheduleWithFixedDelay(new NuageVspSyncTask("ENTERPRISE_NTWK_MACRO"),ONE_MINUTE_MULTIPLIER * 15,ONE_MINUTE_MULTIPLIER * syncUpIntervalInMinutes,TimeUnit.MILLISECONDS);
    scheduler.scheduleWithFixedDelay(new NuageVspSyncTask("ENTERPRISE"),ONE_MINUTE_MULTIPLIER * 15,ONE_MINUTE_MULTIPLIER * syncUpIntervalInMinutes,TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.warn("NuageVsp configuration for syncWorkers=" + numOfSyncThreads + " syncInterval="+ syncUpIntervalInMinutes+ " could not be read properly. So, check if the properties are configured properly in global properties");
  }
}
