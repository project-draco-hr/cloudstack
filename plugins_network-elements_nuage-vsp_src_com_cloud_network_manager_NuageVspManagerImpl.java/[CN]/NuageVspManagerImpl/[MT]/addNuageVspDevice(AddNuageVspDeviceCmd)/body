{
  ServerResource resource=new NuageVspResource();
  final String deviceName=Network.Provider.NuageVsp.getName();
  ExternalNetworkDeviceManager.NetworkDevice networkDevice=ExternalNetworkDeviceManager.NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException("Could not find phyical network with ID: " + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException("Network Service Provider: " + networkDevice.getNetworkServiceProvder() + " is not added in the physical network: "+ physicalNetworkId+ "to add this device");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException("Network Service Provider: " + ntwkSvcProvider.getProviderName() + " is in shutdown state in the physical network: "+ physicalNetworkId+ "to add this device");
  }
  if (_nuageVspDao.listByPhysicalNetwork(physicalNetworkId).size() != 0) {
    throw new CloudRuntimeException("A NuageVsp device is already configured on this physical network");
  }
  Map<String,String> params=new HashMap<String,String>();
  params.put("guid",UUID.randomUUID().toString());
  params.put("zoneId",String.valueOf(physicalNetwork.getDataCenterId()));
  params.put("physicalNetworkId",String.valueOf(physicalNetwork.getId()));
  params.put("name","Nuage VSD - " + cmd.getHostName());
  params.put("hostname",cmd.getHostName());
  params.put("cmsuser",cmd.getUserName());
  String cmsUserPasswordBase64=org.apache.commons.codec.binary.StringUtils.newStringUtf8(Base64.encodeBase64(cmd.getPassword().getBytes(StringUtils.getPreferredCharset())));
  params.put("cmsuserpass",cmsUserPasswordBase64);
  int port=cmd.getPort();
  if (0 == port) {
    port=443;
  }
  params.put("port",String.valueOf(port));
  params.put("apirelativepath","/nuage/api/" + cmd.getApiVersion());
  params.put("retrycount",String.valueOf(cmd.getApiRetryCount()));
  params.put("retryinterval",String.valueOf(cmd.getApiRetryInterval()));
  Map<String,Object> hostdetails=new HashMap<String,Object>();
  hostdetails.putAll(params);
  try {
    resource.configure(cmd.getHostName(),hostdetails);
    final Host host=_resourceMgr.addHost(zoneId,resource,Host.Type.L2Networking,params);
    if (host != null) {
      return Transaction.execute(new TransactionCallback<NuageVspDeviceVO>(){
        @Override public NuageVspDeviceVO doInTransaction(        TransactionStatus status){
          NuageVspDeviceVO nuageVspDevice=new NuageVspDeviceVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),deviceName);
          _nuageVspDao.persist(nuageVspDevice);
          DetailVO detail=new DetailVO(host.getId(),"nuagevspdeviceid",String.valueOf(nuageVspDevice.getId()));
          _hostDetailsDao.persist(detail);
          return nuageVspDevice;
        }
      }
);
    }
 else {
      throw new CloudRuntimeException("Failed to add Nuage Vsp Device due to internal error.");
    }
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
}
