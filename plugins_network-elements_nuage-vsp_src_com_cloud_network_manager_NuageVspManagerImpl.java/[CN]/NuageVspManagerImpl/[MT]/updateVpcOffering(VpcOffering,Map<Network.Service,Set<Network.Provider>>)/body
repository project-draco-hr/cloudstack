{
  Transaction.execute(new TransactionCallback<VpcOffering>(){
    @Override public VpcOffering doInTransaction(    TransactionStatus status){
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(String.format("Updating vpc offering %s",offering));
      }
      List<VpcOfferingServiceMapVO> currentVpcOfferingServices=_vpcOffSvcMapDao.listByVpcOffId(offering.getId());
      Map<Network.Service,Set<Network.Provider>> currentSvcProviderMap=Maps.newHashMap();
      for (      VpcOfferingServiceMapVO vpcOfferingService : currentVpcOfferingServices) {
        Network.Service service=Network.Service.getService(vpcOfferingService.getService());
        Network.Provider provider=Network.Provider.getProvider(vpcOfferingService.getProvider());
        if (!currentSvcProviderMap.containsKey(service)) {
          currentSvcProviderMap.put(service,Sets.newHashSet(provider));
        }
 else         if (!currentSvcProviderMap.get(service).contains(provider)) {
          currentSvcProviderMap.get(service).add(provider);
        }
      }
      for (      Network.Service service : svcProviderMap.keySet()) {
        for (        Network.Provider provider : svcProviderMap.get(service)) {
          if (currentSvcProviderMap.get(service) == null || !currentSvcProviderMap.get(service).contains(provider)) {
            VpcOfferingServiceMapVO offService=new VpcOfferingServiceMapVO(offering.getId(),service,provider);
            _vpcOffSvcMapDao.persist(offService);
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(String.format("Added service for the vpc offering: %s",offService));
            }
          }
        }
      }
      return offering;
    }
  }
);
}
