{
  List<QuotaBalanceVO> quotaBalance=new ArrayList<>();
  try {
    quotaResponseBuilder.createQuotaLastBalanceResponse(null,new Date());
  }
 catch (  InvalidParameterValueException e) {
    assertTrue(e.getMessage().equals("There are no balance entries on or before the requested date."));
  }
  try {
    quotaResponseBuilder.createQuotaLastBalanceResponse(quotaBalance,new Date());
  }
 catch (  InvalidParameterValueException e) {
    assertTrue(e.getMessage().equals("There are no balance entries on or before the requested date."));
  }
  QuotaBalanceVO entry=new QuotaBalanceVO();
  entry.setAccountId(2L);
  entry.setCreditBalance(new BigDecimal(100));
  quotaBalance.add(entry);
  quotaBalance.add(entry);
  Mockito.when(quotaService.computeAdjustedTime(Mockito.any(Date.class))).thenReturn(new Date());
  QuotaBalanceResponse resp=quotaResponseBuilder.createQuotaLastBalanceResponse(quotaBalance,null);
  assertTrue(resp.getStartQuota().compareTo(new BigDecimal(200)) == 0);
}
