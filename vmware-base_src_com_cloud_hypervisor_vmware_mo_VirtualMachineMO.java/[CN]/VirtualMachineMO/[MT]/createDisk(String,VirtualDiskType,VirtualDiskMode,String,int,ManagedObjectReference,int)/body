{
  if (s_logger.isTraceEnabled())   s_logger.trace("vCenter API trace - createDisk(). target MOR: " + _mor.get_value() + ", vmdkDatastorePath: "+ vmdkDatastorePath+ ", sizeInMb: "+ sizeInMb+ ", diskType: "+ diskType+ ", diskMode: "+ diskMode+ ", rdmDeviceName: "+ rdmDeviceName+ ", datastore: "+ morDs.get_value()+ ", controllerKey: "+ controllerKey);
  assert(vmdkDatastorePath != null);
  assert(morDs != null);
  if (controllerKey < 0) {
    controllerKey=getIDEDeviceControllerKey();
  }
  VirtualDisk newDisk=new VirtualDisk();
  if (diskType == VirtualDiskType.thin || diskType == VirtualDiskType.preallocated || diskType == VirtualDiskType.eagerZeroedThick) {
    VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
    backingInfo.setDiskMode(diskMode.persistent.toString());
    if (diskType == VirtualDiskType.thin) {
      backingInfo.setThinProvisioned(true);
    }
 else {
      backingInfo.setThinProvisioned(false);
    }
    if (diskType == VirtualDiskType.eagerZeroedThick) {
      backingInfo.setEagerlyScrub(true);
    }
 else {
      backingInfo.setEagerlyScrub(false);
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
 else   if (diskType == VirtualDiskType.rdm || diskType == VirtualDiskType.rdmp) {
    VirtualDiskRawDiskMappingVer1BackingInfo backingInfo=new VirtualDiskRawDiskMappingVer1BackingInfo();
    if (diskType == VirtualDiskType.rdm) {
      backingInfo.setCompatibilityMode("virtualMode");
    }
 else {
      backingInfo.setCompatibilityMode("physicalMode");
    }
    backingInfo.setDeviceName(rdmDeviceName);
    if (diskType == VirtualDiskType.rdm) {
      backingInfo.setDiskMode(diskMode.persistent.toString());
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
  int deviceNumber=getNextDeviceNumber(controllerKey);
  newDisk.setControllerKey(controllerKey);
  newDisk.setKey(-deviceNumber);
  newDisk.setUnitNumber(deviceNumber);
  newDisk.setCapacityInKB(sizeInMb * 1024);
  VirtualMachineConfigSpec reConfigSpec=new VirtualMachineConfigSpec();
  VirtualDeviceConfigSpec[] deviceConfigSpecArray=new VirtualDeviceConfigSpec[1];
  VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
  deviceConfigSpec.setDevice(newDisk);
  deviceConfigSpec.setFileOperation(VirtualDeviceConfigSpecFileOperation.create);
  deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.add);
  deviceConfigSpecArray[0]=deviceConfigSpec;
  reConfigSpec.setDeviceChange(deviceConfigSpecArray);
  ManagedObjectReference morTask=_context.getService().reconfigVM_Task(_mor,reConfigSpec);
  String result=_context.getServiceUtil().waitForTask(morTask);
  if (!result.equals("sucess")) {
    if (s_logger.isTraceEnabled())     s_logger.trace("vCenter API trace - createDisk() done(failed)");
    throw new Exception("Unable to create disk " + vmdkDatastorePath + " due to "+ TaskMO.getTaskFailureInfo(_context,morTask));
  }
  _context.waitForTaskProgressDone(morTask);
  if (s_logger.isTraceEnabled())   s_logger.trace("vCenter API trace - createDisk() done(successfully)");
}
