def deploy_vm_lifecycle(self):
    '\n        Create Service Offerings for Both K1 and K2 cards to be used for VM life cycle tests\n        '
    if (self.k1hosts != 0):
        if (self.k140qgpuhosts != 0):
            gtype = 'GRID K140Q'
        elif (self.k120qgpuhosts != 0):
            gtype = 'GRID K120Q'
        elif (self.k100gpuhosts != 0):
            gtype = 'GRID K100'
        else:
            gtype = 'passthrough'
        self.testdata['vgpu']['service_offerings'][gtype]['serviceofferingdetails'] = [{'pciDevice': 'Group of NVIDIA Corporation GK107GL [GRID K1] GPUs', }, {'vgpuType': gtype, }]
        try:
            self.__class__.k100_vgpu_service_offering = ServiceOffering.create(self.apiclient, self.testdata['vgpu']['service_offerings'][gtype])
        except Exception as e:
            self.fail(('Failed to create the service offering, %s' % e))
    if (self.k2hosts != 0):
        if (self.k240qgpuhosts != 0):
            gtype = 'GRID K240Q'
        elif (cls.k220qgpuhosts != 0):
            gtype = 'GRID K220Q'
        elif (self.k200gpuhosts != 0):
            gtype = 'GRID K200'
        else:
            gtype = 'passthrough'
        self.testdata['vgpu']['service_offerings'][gtype]['serviceofferingdetails'] = [{'pciDevice': 'Group of NVIDIA Corporation GK104GL [GRID K2] GPUs', }, {'vgpuType': gtype, }]
        try:
            self.__class__.k200_vgpu_service_offering = ServiceOffering.create(self.apiclient, self.testdata['vgpu']['service_offerings'][gtype])
        except Exception as e:
            self.fail(('Failed to create the service offering, %s' % e))
    win8templateid = self.new_template_register('Windows 8 (64-bit)')
    win2012templateid = self.new_template_register('Windows Server 2012 (64-bit)')
    win7templateid = self.new_template_register('Windows 7 (64-bit)')
    '\n        Create Virtual Machines for Both K1 and K2 cards to be used for VM life cycle tests\n        '
    if (self.k1hosts != 0):
        self.__class__.vm_k1_card = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.k100_vgpu_service_offering.id, templateid=win8templateid)
    if (self.k2hosts != 0):
        self.__class__.vm_k2_card = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.k200_vgpu_service_offering.id, templateid=win2012templateid)
    if (self.k2hosts != 0):
        self.__class__.vm2_k2_card = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.k200_vgpu_service_offering.id, templateid=win7templateid)
    return
