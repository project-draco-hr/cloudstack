def revert_vm_snapshot(self, vmcard):
    self.debug('Check if deployed VMs are in running state?')
    if hasattr(vmcard, 'vgpu'):
        self.check_for_vGPU_resource(vmcard.hostid, vmcard.instancename, vmcard.serviceofferingid, vmcard.vgpu)
    list_snapshot_response = VmSnapshot.list(self.apiclient, virtualmachineid=vmcard.id, listall=True)
    self.assertEqual(isinstance(list_snapshot_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_snapshot_response, None, 'Check if snapshot exists in ListSnapshot')
    self.assertEqual(list_snapshot_response[0].state, 'Ready', 'Check the snapshot of vm is ready!')
    VmSnapshot.revertToSnapshot(self.apiclient, list_snapshot_response[0].id)
    time.sleep(self.testdata['vgpu']['sleep'])
    list_vm_response = list_virtual_machines(self.apiclient, id=vmcard.id)
    vm = list_vm_response[0]
    self.assertEqual(list_vm_response[0].state, 'Stopped', 'Check the state of vm is Stopped')
    cmd = startVirtualMachine.startVirtualMachineCmd()
    cmd.id = vm.id
    self.apiclient.startVirtualMachine(cmd)
    time.sleep(self.testdata['vgpu']['sleep'])
    list_vm_response = list_virtual_machines(self.apiclient, id=vm.id)
    vm = list_vm_response[0]
    if (vm is None):
        self.fail('Failed to list VM details after Vm Snapshot')
    self.assertEqual(vm.state, 'Running', 'Check the state of vm is Running')
    if hasattr(vmcard, 'vgpu'):
        self.check_for_vGPU_resource(vmcard.hostid, vmcard.instancename, vmcard.serviceofferingid, vmcard.vgpu)
