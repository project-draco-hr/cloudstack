@attr(tags=['advanced'], required_hardware='true')
def test_18_restart_network_cleanup_true(self):
    'Verfy LB rules after restarting the network with cleanup flag set to True\n\n        steps:\n        # 1. Add secondary ip for vm\n        # 2. Associate public ip for the network\n        # 3. Create load balancer rule for ip using roundrobin algorithm\n        # 4. Assign load balancer rule to secondary ip of vm\n        # 5. Try to ssh to vm using the public ip, it should succeed\n        # 6. Restart the network with cleanup flag set to True\n        # 7. List the LB rule, it should be present\n        # 8. Try to SSH to VM, it should succeed'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }, {'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress, self.virtual_machine.nic[0].ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    cmd = restartNetwork.restartNetworkCmd()
    cmd.id = self.virtual_machine.nic[0].networkid
    cmd.cleanup = True
    self.apiclient.restartNetwork(cmd)
    lbrules = LoadBalancerRule.list(self.apiclient, id=self.lb_rule.id, listll=True)
    self.assertEqual(validateList(lbrules)[0], PASS, 'lbrules list validation failed')
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    return
