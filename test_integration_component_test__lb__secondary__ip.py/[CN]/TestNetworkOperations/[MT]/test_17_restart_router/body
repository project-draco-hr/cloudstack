@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_17_restart_router(self):
    'Verify LB rules after restarting router VM\n\n        steps:\n        # 1. Add secondary ip for vm\n        # 2. Associate public ip for the network\n        # 3. Create load balancer rule for ip using roundrobin algorithm\n        # 4. Assign load balancer rule to secondary ip of vm\n        # 5. Try to ssh to vm using the public ip, it should succeed\n        # 6. List the router associated with the network and restart the router\n        # 7. List the LB rule, it should be present\n        # 8. Try to SSH to VM, it should succeed'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }, {'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress, self.virtual_machine.nic[0].ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    routers = Router.list(self.apiclient, networkid=self.virtual_machine.nic[0].networkid, listall=True)
    self.assertEqual(validateList(routers)[0], PASS, 'routers list validation failed')
    Router.reboot(self.apiclient, id=routers[0].id)
    lbrules = LoadBalancerRule.list(self.apiclient, id=self.lb_rule.id, listll=True)
    self.assertEqual(validateList(lbrules)[0], PASS, 'lbrules list validation failed')
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    return
