@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_09_lbvmips_true(self):
    'List load balancer instances by passing lbvmips flag True\n\n        steps:\n        # 1. Add secondary IP for VM\n        # 2. Associate public IP for the network\n        # 3. Create load balancer rule for IP\n        # 4. Assign load balancer rule to secondary IP\n        # 5. List loadbalancer instances by specifying lbvmips flag as True\n        # 6. List of load balancer instances should contain the secondary IP of VM\n             used to assign lb rule to'
    secondaryip = NIC.addIp(self.apiclient, id=self.virtual_machine.nic[0].id)
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.virtual_machine.nic[0].networkid)
    lb_rule = LoadBalancerRule.create(self.apiclient, self.testdata['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.name, networkid=self.virtual_machine.nic[0].networkid, domainid=self.account.domainid)
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(secondaryip.ipaddress), }]
    lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    lbruleinstances = LoadBalancerRule.listLoadBalancerRuleInstances(self.apiclient, id=lb_rule.id, lbvmips=True)
    self.assertEqual(validateList(lbruleinstances)[0], PASS, 'lbruleinstances list validation failed')
    self.assertEqual(str(lbruleinstances[0].lbvmipaddresses[0]), secondaryip.ipaddress, 'IP address in lbruleinstances list not matching                          with secondary ip assigned to lb rule')
    return
