@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_16_delete_vm_from_lb_rule(self):
    'ssh to vm after removing secondary ip from load balancer rule\n\n        steps:\n        # 1. Add secondary ip for vm\n        # 2. Associate public ip for the network\n        # 3. Create load balancer rule for ip\n        # 4. Assign load balancer rule to secondary ip of vm\n        # 5. Try to ssh to vm using the public ip, it should succeed\n        # 6. Remove the VM from load balancer rule\n        # 7. Try to list the load balancer rules for the VM, list should be empty\n        # 8. Try to SSH to VM using the public IP, the opeation should fail'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    self.lb_rule.remove(self.apiclient, vms=[self.virtual_machine])
    lbrules = LoadBalancerRule.list(self.apiclient, virtualmachineid=self.virtual_machine.id, listall=True)
    self.assertTrue((lbrules is None), 'LB rules list should be empty')
    with self.assertRaises(Exception):
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    return
