@attr(tags=['advanced'], required_hardware='true')
def test_14_remove_lb_rule_secondary_ip(self):
    'ssh to vm after removing secondary ip from load balancer rule\n\n        steps:\n        # 1. add secondary ip for vm\n        # 2. associate public ip for the network\n        # 3. create load balancer rule for ip\n        # 4. assign load balancer rule to primary and secondary ip of vm\n        # 5. try to ssh to vm using the public ip, it should succeed\n        # 6. remove the secondary ip of vm from the load balancer rule\n        # 7. try to ssh to vm using the public ip, it should succeed'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }, {'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress, self.virtual_machine.nic[0].ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }]
    self.lb_rule.remove(self.apiclient, vmidipmap=vmidipmap)
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    return
