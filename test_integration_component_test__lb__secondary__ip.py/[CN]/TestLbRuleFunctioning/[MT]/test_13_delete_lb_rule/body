@attr(tags=['advanced'], required_hardware='true')
def test_13_delete_lb_rule(self):
    'SSH to VM after deleting LB rule\n\n        steps:\n        # 1. Add secondary IP for VM\n        # 2. Associate public IP for the network\n        # 3. Create load balancer rule for IP\n        # 4. Assign load balancer rule to primary and secondary IP of VM\n        # 5. Try to SSH to VM using the public IP, it should succeed\n        # 6. Delete the LB rule\n        # 7. Try to SSH to VM using the public IP, operation should fail'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    self.lb_rule.delete(self.apiclient)
    with self.assertRaises(Exception):
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    return
