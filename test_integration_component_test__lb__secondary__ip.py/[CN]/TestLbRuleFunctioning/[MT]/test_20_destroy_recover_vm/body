@attr(tags=['advanced'], required_hardware='true')
def test_20_destroy_recover_vm(self):
    'Verify LB rules after destroying and recovering VM\n\n        steps:\n        # 1. Add secondary ip for vm\n        # 2. Associate public ip for the network\n        # 3. Create load balancer rule for ip\n        # 4. Assign load balancer rule to secondary ip of vm\n        # 5. Try to ssh to vm using the public ip, it should succeed\n        # 6. Destroy VM\n        # 7 Recover the VM\n        # 8.Try to list the LB rule, it should be present'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['lbrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    self.virtual_machine.delete(self.apiclient, expunge=False)
    self.virtual_machine.recover(self.apiclient)
    self.virtual_machine.start(self.apiclient)
    lbruleinstances = LoadBalancerRule.listLoadBalancerRuleInstances(self.apiclient, id=self.lb_rule.id, lbvmips=True)
    self.assertEqual(validateList(lbruleinstances)[0], PASS, 'lbruleinstances list validation failed')
    self.assertEqual(str(lbruleinstances[0].lbvmipaddresses[0]), self.secondaryip.ipaddress, 'IP address in lbruleinstances list not matching                          with secondary ip assigned to lb rule')
    return
