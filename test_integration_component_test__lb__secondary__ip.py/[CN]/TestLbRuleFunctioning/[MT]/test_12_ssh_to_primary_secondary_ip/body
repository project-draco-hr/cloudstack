@unittest.skip('Failing-WIP')
@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_12_ssh_to_primary_secondary_ip(self):
    'SSH to VM using LB rule assigned to primary and secondary IP of VM\n\n        steps:\n        # 1. Add secondary IP for VM\n        # 2. Associate public IP for the network\n        # 3. Create load balancer rule for IP\n        # 4. Assign load balancer rule to primary and secondary IP of VM\n        # 5. Try to SSH to VM using the public IP\n        # 6. Delete the primary IP\n        # 7. Try to list load balancer rule, the operation should fail\n        # 8. Try to SSH to VM using the public IP, the operation should fail'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    self.public_ip.delete(self.apiclient)
    with self.assertRaises(Exception):
        LoadBalancerRule.list(self.apiclient, id=self.lb_rule.id)
    with self.assertRaises(Exception):
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    return
