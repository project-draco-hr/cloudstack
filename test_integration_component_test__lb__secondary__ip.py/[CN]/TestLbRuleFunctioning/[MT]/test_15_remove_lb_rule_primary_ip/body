@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_15_remove_lb_rule_primary_ip(self):
    'ssh to vm after removing secondary ip from load balancer rule\n\n        steps:\n        # 1. Add secondary ip for vm\n        # 2. Associate public ip for the network\n        # 3. Create load balancer rule for ip\n        # 4. Assign load balancer rule to primary and secondary ip of vm\n        # 5. Try to ssh to vm using the public ip, it should succeed\n        # 6. Remove the primary ip of vm from the load balancer rule\n        # 7. Try to ssh to vm using the public ip, it should succeed'
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.secondaryip.ipaddress), }, {'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
    self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [self.secondaryip.ipaddress, self.virtual_machine.nic[0].ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, self.lb_rule, iplist)
    self.assertTrue(response[0], response[1])
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
    self.lb_rule.remove(self.apiclient, vmidipmap=vmidipmap)
    try:
        SshClient(self.public_ip.ipaddress.ipaddress, self.testdata['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception during SSH : %s' % e))
    return
