@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_08_lb_rule_remove_used_ip(self):
    'Try to remove secondary IP with load balancer rule configured for it\n\n        steps:\n        # 1. Add secondary IP for VM\n        # 2. Associate public IP for the network\n        # 3. Create load balancer rule for IP\n        # 4. Assign load balancer rule to secondary IP\n        # 5. Try to remove the secondary IP form NIC,\n             the operation should fail'
    secondaryip = NIC.addIp(self.apiclient, id=self.virtual_machine.nic[0].id)
    public_ip1 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.virtual_machine.nic[0].networkid)
    lb_rule1 = LoadBalancerRule.create(self.apiclient, self.testdata['lbrule'], ipaddressid=public_ip1.ipaddress.id, accountid=self.account.name, networkid=self.virtual_machine.nic[0].networkid, domainid=self.account.domainid)
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(secondaryip.ipaddress), }]
    lb_rule1.assign(self.apiclient, vmidipmap=vmidipmap)
    iplist = [secondaryip.ipaddress]
    response = IsIpAssignedToLoadBalancerRule(self, lb_rule1, iplist)
    self.assertTrue(response[0], response[1])
    with self.assertRaises(Exception):
        NIC.removeIp(self.apiclient, ipaddressid=secondaryip.id)
    return
