@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_02_lb_rule_for_primary_ip(self):
    'Create LB rule for secondary IP\n\n        steps:\n        # 1. Add secondary IP to the VM\n        # 2. Associate a public IP for the network\n        # 3. Create load balancer rule for this IP\n        # 4. Assign load balancer rule for secondary ip address of VM\n        # 5. List and verify that load balancer rule is successfully added'
    secondaryip = NIC.addIp(self.apiclient, id=self.virtual_machine.nic[0].id)
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.virtual_machine.nic[0].networkid)
    lb_rule = LoadBalancerRule.create(self.apiclient, self.testdata['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.name, networkid=self.virtual_machine.nic[0].networkid, domainid=self.account.domainid)
    vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(secondaryip.ipaddress), }]
    lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    response = IsIpAssignedToLoadBalancerRule(self, lb_rule, [secondaryip.ipaddress])
    self.assertTrue(response[0], response[1])
    lbrules = LoadBalancerRule.list(self.apiclient, virtualmachineid=self.virtual_machine.id, listall=True)
    self.assertEqual(validateList(lbrules)[0], PASS, 'lb rules list validation failed')
    self.assertEqual(lb_rule.id, lbrules[0].id, 'LB rules does not match')
    return
