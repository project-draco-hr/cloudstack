{
  final Connect connect=Mockito.mock(Connect.class);
  final Domain domain=Mockito.mock(Domain.class);
  final DomainInfo domainInfo=new DomainInfo();
  final MemoryStatistic[] domainMem=new MemoryStatistic[2];
  domainMem[0]=Mockito.mock(MemoryStatistic.class);
  Mockito.when(domain.getInfo()).thenReturn(domainInfo);
  Mockito.when(domain.memoryStats(2)).thenReturn(domainMem);
  Mockito.when(connect.domainLookupByName(VMNAME)).thenReturn(domain);
  final NodeInfo nodeInfo=new NodeInfo();
  nodeInfo.cpus=8;
  nodeInfo.memory=8 * 1024 * 1024;
  nodeInfo.sockets=2;
  nodeInfo.threads=2;
  nodeInfo.model="Foo processor";
  Mockito.when(connect.nodeInfo()).thenReturn(nodeInfo);
  Mockito.when(domain.interfaceStats(Matchers.anyString())).thenAnswer(new org.mockito.stubbing.Answer<DomainInterfaceStats>(){
    final static int increment=1000;
    int rxBytes=1000;
    int txBytes=1000;
    @Override public DomainInterfaceStats answer(    final InvocationOnMock invocation) throws Throwable {
      final DomainInterfaceStats domainInterfaceStats=new DomainInterfaceStats();
      domainInterfaceStats.rx_bytes=rxBytes+=increment;
      domainInterfaceStats.tx_bytes=txBytes+=increment;
      return domainInterfaceStats;
    }
  }
);
  Mockito.when(domain.blockStats(Matchers.anyString())).thenAnswer(new org.mockito.stubbing.Answer<DomainBlockStats>(){
    final static int increment=1000;
    int rdBytes=0;
    int wrBytes=1024;
    @Override public DomainBlockStats answer(    final InvocationOnMock invocation) throws Throwable {
      final DomainBlockStats domainBlockStats=new DomainBlockStats();
      domainBlockStats.rd_bytes=rdBytes+=increment;
      domainBlockStats.wr_bytes=wrBytes+=increment;
      return domainBlockStats;
    }
  }
);
  final LibvirtComputingResource libvirtComputingResource=new LibvirtComputingResource(){
    @Override public List<InterfaceDef> getInterfaces(    final Connect conn,    final String vmName){
      final InterfaceDef interfaceDef=new InterfaceDef();
      return Arrays.asList(interfaceDef);
    }
    @Override public List<DiskDef> getDisks(    final Connect conn,    final String vmName){
      final DiskDef diskDef=new DiskDef();
      return Arrays.asList(diskDef);
    }
  }
;
  libvirtComputingResource.getVmStat(connect,VMNAME);
  final VmStatsEntry vmStat=libvirtComputingResource.getVmStat(connect,VMNAME);
  Assert.assertTrue(vmStat.getNetworkReadKBs() > 0);
  Assert.assertTrue(vmStat.getNetworkWriteKBs() > 0);
  Assert.assertTrue(vmStat.getDiskReadKBs() > 0);
  Assert.assertTrue(vmStat.getDiskWriteKBs() > 0);
  Assert.assertTrue(vmStat.getIntFreeMemoryKBs() >= 0);
  Assert.assertTrue(vmStat.getMemoryKBs() >= 0);
  Assert.assertTrue(vmStat.getTargetMemoryKBs() >= vmStat.getMemoryKBs());
}
