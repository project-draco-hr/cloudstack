{
  Connect connect=Mockito.mock(Connect.class);
  Domain domain=Mockito.mock(Domain.class);
  DomainInfo domainInfo=new DomainInfo();
  Mockito.when(domain.getInfo()).thenReturn(domainInfo);
  Mockito.when(connect.domainLookupByName(VMNAME)).thenReturn(domain);
  NodeInfo nodeInfo=new NodeInfo();
  nodeInfo.cpus=8;
  nodeInfo.memory=8 * 1024 * 1024;
  nodeInfo.sockets=2;
  nodeInfo.threads=2;
  nodeInfo.model="Foo processor";
  Mockito.when(connect.nodeInfo()).thenReturn(nodeInfo);
  Mockito.when(domain.interfaceStats(Matchers.anyString())).thenAnswer(new Answer<DomainInterfaceStats>(){
    final static int increment=1000;
    int rxBytes=1000;
    int txBytes=1000;
    @Override public DomainInterfaceStats answer(    InvocationOnMock invocation) throws Throwable {
      DomainInterfaceStats domainInterfaceStats=new DomainInterfaceStats();
      domainInterfaceStats.rx_bytes=(rxBytes+=increment);
      domainInterfaceStats.tx_bytes=(txBytes+=increment);
      return domainInterfaceStats;
    }
  }
);
  Mockito.when(domain.blockStats(Matchers.anyString())).thenAnswer(new Answer<DomainBlockStats>(){
    final static int increment=1000;
    int rdBytes=0;
    int wrBytes=1024;
    @Override public DomainBlockStats answer(    InvocationOnMock invocation) throws Throwable {
      DomainBlockStats domainBlockStats=new DomainBlockStats();
      domainBlockStats.rd_bytes=(rdBytes+=increment);
      domainBlockStats.wr_bytes=(wrBytes+=increment);
      return domainBlockStats;
    }
  }
);
  LibvirtComputingResource libvirtComputingResource=new LibvirtComputingResource(){
    @Override protected List<InterfaceDef> getInterfaces(    Connect conn,    String vmName){
      InterfaceDef interfaceDef=new InterfaceDef();
      return Arrays.asList(interfaceDef);
    }
    @Override public List<DiskDef> getDisks(    Connect conn,    String vmName){
      DiskDef diskDef=new DiskDef();
      return Arrays.asList(diskDef);
    }
  }
;
  libvirtComputingResource.getVmStat(connect,VMNAME);
  VmStatsEntry vmStat=libvirtComputingResource.getVmStat(connect,VMNAME);
  Assert.assertTrue(vmStat.getNetworkReadKBs() > 0);
  Assert.assertTrue(vmStat.getNetworkWriteKBs() > 0);
  Assert.assertTrue(vmStat.getDiskReadKBs() > 0);
  Assert.assertTrue(vmStat.getDiskWriteKBs() > 0);
}
