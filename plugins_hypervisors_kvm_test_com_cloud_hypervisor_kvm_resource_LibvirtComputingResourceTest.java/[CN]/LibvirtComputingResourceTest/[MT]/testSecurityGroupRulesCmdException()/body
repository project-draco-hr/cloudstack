{
  final String guestIp="172.16.16.16";
  final String guestMac="00:00:00:00";
  final String vmName="Test";
  final Long vmId=1l;
  final String signature="signature";
  final Long seqNum=1l;
  final IpPortAndProto[] ingressRuleSet=new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};
  final IpPortAndProto[] egressRuleSet=new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};
  final SecurityGroupRulesCmd command=new SecurityGroupRulesCmd(guestIp,guestMac,vmName,vmId,signature,seqNum,ingressRuleSet,egressRuleSet);
  final LibvirtConnectionWrapper libvirtConnectionWrapper=Mockito.mock(LibvirtConnectionWrapper.class);
  final Connect conn=Mockito.mock(Connect.class);
  final List<InterfaceDef> nics=new ArrayList<InterfaceDef>();
  final InterfaceDef interfaceDef=Mockito.mock(InterfaceDef.class);
  nics.add(interfaceDef);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtConnectionWrapper);
  when(libvirtComputingResource.getInterfaces(conn,command.getVmName())).thenReturn(nics);
  try {
    when(libvirtConnectionWrapper.getConnectionByVmName(command.getVmName())).thenThrow(LibvirtException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtConnectionWrapper,times(1)).getConnectionByVmName(command.getVmName());
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
