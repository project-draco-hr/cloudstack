{
  final LibvirtConnectionWrapper libvirtConnectionWrapper=Mockito.mock(LibvirtConnectionWrapper.class);
  final boolean attach=true;
  final boolean managed=true;
  final String vmName="Test";
  final StoragePoolType poolType=StoragePoolType.ISO;
  final String volumePath="/path";
  final String volumeName="volume";
  final Long volumeSize=200l;
  final Long deviceId=1l;
  final String chainInfo="none";
  final AttachVolumeCommand command=new AttachVolumeCommand(attach,managed,vmName,poolType,volumePath,volumeName,volumeSize,deviceId,chainInfo);
  final KVMStoragePoolManager poolManager=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool primary=Mockito.mock(KVMStoragePool.class);
  final KVMPhysicalDisk disk=Mockito.mock(KVMPhysicalDisk.class);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtConnectionWrapper);
  try {
    when(libvirtConnectionWrapper.getConnectionByVmName(vmName)).thenThrow(LibvirtException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);
  when(poolManager.getStoragePool(command.getPooltype(),command.getPoolUuid())).thenReturn(primary);
  when(primary.getPhysicalDisk(command.getVolumePath())).thenReturn(disk);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtConnectionWrapper,times(1)).getConnectionByVmName(vmName);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
