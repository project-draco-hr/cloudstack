{
  final StoragePool pool=Mockito.mock(StoragePool.class);
  final List<KVMPhysicalDisk> disks=new ArrayList<KVMPhysicalDisk>();
  final String name="Test";
  final String url="http://template/";
  final ImageFormat format=ImageFormat.QCOW2;
  final long accountId=1l;
  final int wait=0;
  final PrimaryStorageDownloadCommand command=new PrimaryStorageDownloadCommand(name,url,format,accountId,pool,wait);
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool primaryPool=Mockito.mock(KVMStoragePool.class);
  final KVMStoragePool secondaryPool=Mockito.mock(KVMStoragePool.class);
  final KVMPhysicalDisk tmplVol=Mockito.mock(KVMPhysicalDisk.class);
  final KVMPhysicalDisk primaryVol=Mockito.mock(KVMPhysicalDisk.class);
  final int index=url.lastIndexOf("/");
  final String mountpoint=url.substring(0,index);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(storagePoolMgr.getStoragePoolByURI(mountpoint)).thenReturn(secondaryPool);
  when(secondaryPool.listPhysicalDisks()).thenReturn(disks);
  when(storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPoolUuid())).thenReturn(primaryPool);
  when(storagePoolMgr.copyPhysicalDisk(tmplVol,UUID.randomUUID().toString(),primaryPool,0)).thenReturn(primaryVol);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
}
