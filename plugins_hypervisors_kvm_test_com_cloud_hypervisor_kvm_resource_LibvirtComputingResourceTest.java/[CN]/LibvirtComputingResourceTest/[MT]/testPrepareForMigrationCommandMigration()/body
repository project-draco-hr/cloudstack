{
  final Connect conn=Mockito.mock(Connect.class);
  final LibvirtConnectionWrapper libvirtConnectionWrapper=Mockito.mock(LibvirtConnectionWrapper.class);
  final VirtualMachineTO vm=Mockito.mock(VirtualMachineTO.class);
  final KVMStoragePoolManager storagePoolManager=Mockito.mock(KVMStoragePoolManager.class);
  final NicTO nicTO=Mockito.mock(NicTO.class);
  final DiskTO diskTO=Mockito.mock(DiskTO.class);
  final VifDriver vifDriver=Mockito.mock(VifDriver.class);
  final PrepareForMigrationCommand command=new PrepareForMigrationCommand(vm);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtConnectionWrapper);
  try {
    when(libvirtConnectionWrapper.getConnectionByVmName(vm.getName())).thenReturn(conn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  when(vm.getNics()).thenReturn(new NicTO[]{nicTO});
  when(vm.getDisks()).thenReturn(new DiskTO[]{diskTO});
  when(nicTO.getType()).thenReturn(TrafficType.Guest);
  when(diskTO.getType()).thenReturn(Volume.Type.ISO);
  when(libvirtComputingResource.getVifDriver(nicTO.getType())).thenReturn(vifDriver);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolManager);
  when(storagePoolManager.connectPhysicalDisksViaVmSpec(vm)).thenReturn(true);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtConnectionWrapper,times(1)).getConnectionByVmName(vm.getName());
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(vm,times(1)).getNics();
  verify(vm,times(1)).getDisks();
  verify(diskTO,times(1)).getType();
}
