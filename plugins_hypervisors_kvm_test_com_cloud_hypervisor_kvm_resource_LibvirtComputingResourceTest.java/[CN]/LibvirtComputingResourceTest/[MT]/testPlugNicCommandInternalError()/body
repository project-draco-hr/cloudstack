{
  final NicTO nic=Mockito.mock(NicTO.class);
  final String instanceName="Test";
  final Type vmtype=Type.DomainRouter;
  final PlugNicCommand command=new PlugNicCommand(nic,instanceName,vmtype);
  final LibvirtConnectionWrapper libvirtConnectionWrapper=Mockito.mock(LibvirtConnectionWrapper.class);
  final Connect conn=Mockito.mock(Connect.class);
  final Domain vm=Mockito.mock(Domain.class);
  final VifDriver vifDriver=Mockito.mock(VifDriver.class);
  final List<InterfaceDef> nics=new ArrayList<InterfaceDef>();
  final InterfaceDef intDef=Mockito.mock(InterfaceDef.class);
  nics.add(intDef);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtConnectionWrapper);
  when(libvirtComputingResource.getInterfaces(conn,command.getVmName())).thenReturn(nics);
  when(intDef.getDevName()).thenReturn("eth0");
  when(intDef.getBrName()).thenReturn("br0");
  when(intDef.getMacAddress()).thenReturn("00:00:00:00");
  when(nic.getMac()).thenReturn("00:00:00:01");
  try {
    when(libvirtConnectionWrapper.getConnectionByVmName(command.getVmName())).thenReturn(conn);
    when(libvirtComputingResource.getDomain(conn,instanceName)).thenReturn(vm);
    when(libvirtComputingResource.getVifDriver(nic.getType())).thenReturn(vifDriver);
    when(vifDriver.plug(nic,"Other PV","")).thenThrow(InternalErrorException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final InternalErrorException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtConnectionWrapper,times(1)).getConnectionByVmName(command.getVmName());
    verify(libvirtComputingResource,times(1)).getDomain(conn,instanceName);
    verify(libvirtComputingResource,times(1)).getVifDriver(nic.getType());
    verify(vifDriver,times(1)).plug(nic,"Other PV","");
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final InternalErrorException e) {
    fail(e.getMessage());
  }
}
