{
  final String op="add";
  final URI uri=URI.create("http://localhost");
  final String networkTag="/105";
  final String dhcpName="dhcp";
  final String dhcpMac="00:00:00:00";
  final String dhcpIp="127.0.0.1";
  final PvlanSetupCommand command=PvlanSetupCommand.createDhcpSetup(op,uri,networkTag,dhcpName,dhcpMac,dhcpIp);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final Connect conn=Mockito.mock(Connect.class);
  final String guestBridgeName="br0";
  when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);
  final int timeout=0;
  when(libvirtComputingResource.getTimeout()).thenReturn(timeout);
  final String ovsPvlanDhcpHostPath="/pvlan";
  when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  final List<InterfaceDef> ifaces=new ArrayList<InterfaceDef>();
  final InterfaceDef nic=Mockito.mock(InterfaceDef.class);
  ifaces.add(nic);
  try {
    when(libvirtUtilitiesHelper.getConnectionByVmName(dhcpName)).thenReturn(conn);
    when(libvirtComputingResource.getInterfaces(conn,dhcpName)).thenReturn(ifaces);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByVmName(dhcpName);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
