{
  final VirtualMachineTO vmSpec=Mockito.mock(VirtualMachineTO.class);
  final com.cloud.host.Host host=Mockito.mock(com.cloud.host.Host.class);
  final boolean executeInSequence=false;
  final StartCommand command=new StartCommand(vmSpec,host,executeInSequence);
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final Connect conn=Mockito.mock(Connect.class);
  final LibvirtVMDef vmDef=Mockito.mock(LibvirtVMDef.class);
  final NicTO nic=Mockito.mock(NicTO.class);
  final NicTO[] nics=new NicTO[]{nic};
  final String vmName="Test";
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(vmSpec.getNics()).thenReturn(nics);
  when(vmSpec.getType()).thenReturn(VirtualMachine.Type.DomainRouter);
  when(vmSpec.getName()).thenReturn(vmName);
  when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn);
    doThrow(InternalErrorException.class).when(libvirtComputingResource).createVbd(conn,vmSpec,vmName,vmDef);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final InternalErrorException e) {
    fail(e.getMessage());
  }
catch (  final URISyntaxException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByType(vmDef.getHvsType());
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
