{
  final Connect conn=Mockito.mock(Connect.class);
  final LibvirtConnectionWrapper libvirtConnectionWrapper=Mockito.mock(LibvirtConnectionWrapper.class);
  final String vmName="Test";
  final String destIp="10.1.1.100";
  final boolean isWindows=false;
  final VirtualMachineTO vmTO=Mockito.mock(VirtualMachineTO.class);
  final boolean executeInSequence=false;
  final MigrateCommand command=new MigrateCommand(vmName,destIp,isWindows,vmTO,executeInSequence);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtConnectionWrapper);
  try {
    when(libvirtConnectionWrapper.getConnectionByVmName(vmName)).thenReturn(conn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final InterfaceDef interfaceDef=Mockito.mock(InterfaceDef.class);
  final List<InterfaceDef> ifaces=new ArrayList<InterfaceDef>();
  ifaces.add(interfaceDef);
  when(libvirtComputingResource.getInterfaces(conn,vmName)).thenReturn(ifaces);
  final DiskDef diskDef=Mockito.mock(DiskDef.class);
  final List<DiskDef> disks=new ArrayList<DiskDef>();
  disks.add(diskDef);
  when(libvirtComputingResource.getDisks(conn,vmName)).thenReturn(disks);
  final Domain dm=Mockito.mock(Domain.class);
  try {
    when(conn.domainLookupByName(vmName)).thenReturn(dm);
    when(libvirtComputingResource.getPrivateIp()).thenReturn("192.168.1.10");
    when(dm.getXMLDesc(0)).thenReturn("host_domain");
    when(dm.isPersistent()).thenReturn(1);
    doNothing().when(dm).undefine();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final Exception e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtConnectionWrapper,times(1)).getConnectionByVmName(vmName);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  verify(libvirtComputingResource,times(1)).getInterfaces(conn,vmName);
  verify(libvirtComputingResource,times(1)).getDisks(conn,vmName);
  try {
    verify(conn,times(1)).domainLookupByName(vmName);
    verify(dm,times(1)).getXMLDesc(0);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
