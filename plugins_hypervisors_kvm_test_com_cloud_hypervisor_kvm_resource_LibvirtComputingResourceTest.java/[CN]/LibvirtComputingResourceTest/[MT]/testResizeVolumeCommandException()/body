{
  final String path="nfs:/192.168.2.2/storage/secondary";
  final StorageFilerTO pool=Mockito.mock(StorageFilerTO.class);
  final Long currentSize=100l;
  final Long newSize=200l;
  final boolean shrinkOk=false;
  final String vmInstance="Test";
  final ResizeVolumeCommand command=new ResizeVolumeCommand(path,pool,currentSize,newSize,shrinkOk,vmInstance);
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool storagePool=Mockito.mock(KVMStoragePool.class);
  final KVMPhysicalDisk vol=Mockito.mock(KVMPhysicalDisk.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(storagePoolMgr.getStoragePool(pool.getType(),pool.getUuid())).thenReturn(storagePool);
  when(storagePool.getPhysicalDisk(path)).thenReturn(vol);
  when(vol.getPath()).thenReturn(path);
  when(libvirtComputingResource.getResizeScriptType(storagePool,vol)).thenReturn("FILE");
  when(storagePool.getType()).thenReturn(StoragePoolType.RBD);
  when(vol.getFormat()).thenReturn(PhysicalDiskFormat.FILE);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnection()).thenThrow(LibvirtException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnection();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
