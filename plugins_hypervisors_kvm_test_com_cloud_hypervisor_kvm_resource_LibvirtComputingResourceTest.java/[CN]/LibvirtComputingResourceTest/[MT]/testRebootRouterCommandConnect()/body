{
  final VirtualRoutingResource routingResource=Mockito.mock(VirtualRoutingResource.class);
  final Connect conn=Mockito.mock(Connect.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final String vmName="Test";
  final RebootRouterCommand command=new RebootRouterCommand(vmName,"192.168.0.10");
  when(libvirtComputingResource.getVirtRouterResource()).thenReturn(routingResource);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtUtilitiesHelper);
  when(routingResource.connect(command.getPrivateIpAddress())).thenReturn(true);
  try {
    when(libvirtUtilitiesHelper.getConnectionByVmName(vmName)).thenReturn(conn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getVirtRouterResource();
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByVmName(vmName);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}
