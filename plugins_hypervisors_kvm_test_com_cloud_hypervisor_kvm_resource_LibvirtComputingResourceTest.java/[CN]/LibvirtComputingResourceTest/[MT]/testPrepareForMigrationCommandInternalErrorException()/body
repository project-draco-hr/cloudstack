{
  final Connect conn=Mockito.mock(Connect.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final VirtualMachineTO vm=Mockito.mock(VirtualMachineTO.class);
  final KVMStoragePoolManager storagePoolManager=Mockito.mock(KVMStoragePoolManager.class);
  final NicTO nicTO=Mockito.mock(NicTO.class);
  final DiskTO volume=Mockito.mock(DiskTO.class);
  final PrepareForMigrationCommand command=new PrepareForMigrationCommand(vm);
  when(libvirtComputingResource.getLibvirtConnectionWrapper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnectionByVmName(vm.getName())).thenReturn(conn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  when(vm.getNics()).thenReturn(new NicTO[]{nicTO});
  when(nicTO.getType()).thenReturn(TrafficType.Guest);
  when(libvirtComputingResource.getVifDriver(nicTO.getType())).thenThrow(InternalErrorException.class);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolManager);
  try {
    when(libvirtComputingResource.getVolumePath(conn,volume)).thenReturn("/path");
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final URISyntaxException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtConnectionWrapper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByVmName(vm.getName());
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(vm,times(1)).getNics();
}
