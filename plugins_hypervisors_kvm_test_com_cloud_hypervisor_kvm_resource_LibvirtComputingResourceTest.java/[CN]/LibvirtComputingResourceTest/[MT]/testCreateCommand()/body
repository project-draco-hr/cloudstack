{
  final DiskProfile diskCharacteristics=Mockito.mock(DiskProfile.class);
  final StorageFilerTO pool=Mockito.mock(StorageFilerTO.class);
  final String templateUrl="http://template";
  final boolean executeInSequence=false;
  final CreateCommand command=new CreateCommand(diskCharacteristics,templateUrl,pool,executeInSequence);
  final KVMStoragePoolManager poolManager=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool primary=Mockito.mock(KVMStoragePool.class);
  final KVMPhysicalDisk vol=Mockito.mock(KVMPhysicalDisk.class);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);
  when(poolManager.getStoragePool(pool.getType(),pool.getUuid())).thenReturn(primary);
  when(primary.getType()).thenReturn(StoragePoolType.CLVM);
  when(libvirtComputingResource.templateToPrimaryDownload(command.getTemplateUrl(),primary,diskCharacteristics.getPath())).thenReturn(vol);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(poolManager,times(1)).getStoragePool(pool.getType(),pool.getUuid());
}
