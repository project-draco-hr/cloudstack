{
  final StoragePool storagePool=Mockito.mock(StoragePool.class);
  final String secondaryStoragePoolURL="nfs:/127.0.0.1/storage/secondary";
  final Long volumeId=1l;
  final int wait=0;
  final String volumePath="/vol/path";
  final boolean toSecondaryStorage=true;
  final boolean executeInSequence=false;
  final CopyVolumeCommand command=new CopyVolumeCommand(volumeId,volumePath,storagePool,secondaryStoragePoolURL,toSecondaryStorage,wait,executeInSequence);
  final String destVolumeName="ce97bbc1-34fe-4259-9202-74bbce2562ab";
  final String volumeDestPath="/volumes/" + command.getVolumeId() + File.separator;
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool secondary=Mockito.mock(KVMStoragePool.class);
  final KVMStoragePool primary=Mockito.mock(KVMStoragePool.class);
  final KVMPhysicalDisk disk=Mockito.mock(KVMPhysicalDisk.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final StorageFilerTO pool=command.getPool();
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(storagePoolMgr.getStoragePool(pool.getType(),pool.getUuid())).thenReturn(primary);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  when(libvirtUtilitiesHelper.generateUUIDName()).thenReturn(destVolumeName);
  when(primary.getPhysicalDisk(command.getVolumePath())).thenReturn(disk);
  when(storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolURL)).thenReturn(secondary);
  when(secondary.getType()).thenReturn(StoragePoolType.ManagedNFS);
  when(secondary.getUuid()).thenReturn("60d979d8-d132-4181-8eca-8dfde50d7df6");
  when(secondary.createFolder(volumeDestPath)).thenReturn(true);
  when(storagePoolMgr.deleteStoragePool(secondary.getType(),secondary.getUuid())).thenReturn(true);
  when(storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolURL + volumeDestPath)).thenReturn(secondary);
  when(storagePoolMgr.copyPhysicalDisk(disk,destVolumeName,secondary,0)).thenReturn(disk);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
}
