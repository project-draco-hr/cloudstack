{
  VMTemplateVO tmpl=getVMTemplate();
  assertNotNull(tmpl);
  ServiceOffering small=getServiceByName("Small Instance");
  assertNotNull(small);
  Answer<?> callback=new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation){
      Object[] args=invocation.getArguments();
      Commands cmds=(Commands)args[1];
      if (cmds == null) {
        return null;
      }
      PlugNicAnswer reply=new PlugNicAnswer(null,true,"PlugNic");
      com.cloud.agent.api.Answer[] answers={reply};
      cmds.setAnswers(answers);
      return null;
    }
  }
;
  try {
    Mockito.when(_agentMgr.send(Matchers.anyLong(),Matchers.any(Commands.class))).thenAnswer(callback);
  }
 catch (  AgentUnavailableException e) {
    e.printStackTrace();
  }
catch (  OperationTimedoutException e) {
    e.printStackTrace();
  }
  long id=_userVmDao.getNextInSequence(Long.class,"id");
  UserVmVO vm=new UserVmVO(id,name,name,tmpl.getId(),HypervisorType.XenServer,tmpl.getGuestOSId(),false,false,_zone.getDomainId(),Account.ACCOUNT_ID_SYSTEM,small.getId(),null,name,null);
  vm.setState(com.cloud.vm.VirtualMachine.State.Running);
  vm.setHostId(_host_id);
  vm.setDataCenterId(network.getDataCenterId());
  _userVmDao.persist(vm);
  NicProfile profile=new NicProfile();
  try {
    _vmMgr.addVmToNetwork(vm,network,profile);
  }
 catch (  Exception ex) {
  }
  return vm;
}
