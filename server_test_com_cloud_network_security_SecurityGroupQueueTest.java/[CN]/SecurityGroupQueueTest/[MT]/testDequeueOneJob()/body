{
  queue.clear();
  final int numProducers=2;
  final int numConsumers=5;
  final int maxVmId=200;
  Thread[] pThreads=new Thread[numProducers];
  Thread[] cThreads=new Thread[numConsumers];
  Consumer[] consumers=new Consumer[numConsumers];
  Producer[] producers=new Producer[numProducers];
  int numProduced=0;
  for (int i=0; i < numConsumers; i++) {
    consumers[i]=new Consumer(1);
    cThreads[i]=new Thread(consumers[i]);
    cThreads[i].start();
  }
  for (int i=0; i < numProducers; i++) {
    producers[i]=new Producer(maxVmId);
    pThreads[i]=new Thread(producers[i]);
    numProduced+=maxVmId;
    pThreads[i].start();
  }
  for (int i=0; i < numConsumers; i++) {
    try {
      cThreads[i].join();
    }
 catch (    InterruptedException ie) {
      ie.printStackTrace();
    }
  }
  int totalDequeued=0;
  for (int i=0; i < numConsumers; i++) {
    totalDequeued+=consumers[i].getNumJobsDequeued();
  }
  int totalQueued=0;
  for (int i=0; i < numProducers; i++) {
    totalQueued+=producers[i].getNewWork();
  }
  System.out.println("Total jobs dequeued = " + totalDequeued + ", num queued="+ totalQueued+ " queue current size="+ queue.size());
  assert(totalDequeued == numConsumers);
  assert(totalQueued - totalDequeued == queue.size());
}
