{
  Port[] ports=new Port[2];
  BridgePort bridgeUplink=null;
  RouterPort providerDownlink=null;
  for (  Port peerPort : publicBridge.getPeerPorts()) {
    if (peerPort != null && peerPort instanceof RouterPort) {
      RouterPort checkPort=(RouterPort)peerPort;
      if (checkPort.getDeviceId().compareTo(providerRouter.getId()) == 0 && checkPort.getPortAddress().equals(nic.getIPv4Gateway())) {
        providerDownlink=checkPort;
        bridgeUplink=(BridgePort)api.getPort(checkPort.getPeerId());
        break;
      }
    }
  }
  if (providerDownlink == null) {
    String cidr=NetUtils.ipAndNetMaskToCidr(nic.getIPv4Gateway(),nic.getIPv4Netmask());
    String cidrSubnet=NetUtils.getCidrSubNet(cidr);
    int cidrSize=(int)NetUtils.getCidrSize(NetUtils.cidr2Netmask(cidr));
    String gateway=nic.getIPv4Gateway();
    providerDownlink=providerRouter.addInteriorRouterPort().networkAddress(cidrSubnet).networkLength(cidrSize).portAddress(gateway).create();
    bridgeUplink=publicBridge.addInteriorPort().create();
    providerDownlink.link(bridgeUplink.getId()).update();
  }
  ports[0]=bridgeUplink;
  ports[1]=providerDownlink;
  return ports;
}
