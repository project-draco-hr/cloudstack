{
  boolean needAdd=true;
  String SNtag="/SourceNat";
  String SNkey="CS_nat";
  String snatIp=addr.getAddress().addr();
  String CsDesc=snatIp + SNtag;
  for (  Rule rule : pre.getRules()) {
    Map<String,String> props=rule.getProperties();
    if (props == null) {
      continue;
    }
    String snatTag=props.get(SNkey);
    if (snatTag == null) {
      continue;
    }
    if (!snatTag.equals(CsDesc)) {
      continue;
    }
 else {
      needAdd=false;
      break;
    }
  }
  if (needAdd == false) {
    return;
  }
  Map<String,String> ruleProps=new HashMap<String,String>();
  ruleProps.put(SNkey,CsDesc);
  DtoRule.DtoNatTarget[] targets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(snatIp,snatIp,1,65535)};
  pre.addRule().type(DtoRule.RevSNAT).flowAction(DtoRule.Accept).nwDstAddress(snatIp).nwDstLength(32).inPorts(new UUID[]{tenantUplink.getId()}).position(1).properties(ruleProps).create();
  post.addRule().type(DtoRule.SNAT).flowAction(DtoRule.Accept).outPorts(new UUID[]{tenantUplink.getId()}).natTargets(targets).position(1).properties(ruleProps).create();
  tenantRouter.addRoute().type("Normal").weight(100).srcNetworkAddr("0.0.0.0").srcNetworkLength(0).dstNetworkAddr("0.0.0.0").dstNetworkLength(0).nextHopPort(tenantUplink.getId()).create();
  providerRouter.addRoute().type("Normal").weight(100).srcNetworkAddr("0.0.0.0").srcNetworkLength(0).dstNetworkAddr(snatIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId()).create();
  post.addRule().type(DtoRule.RevDNAT).flowAction(DtoRule.Accept).create();
}
