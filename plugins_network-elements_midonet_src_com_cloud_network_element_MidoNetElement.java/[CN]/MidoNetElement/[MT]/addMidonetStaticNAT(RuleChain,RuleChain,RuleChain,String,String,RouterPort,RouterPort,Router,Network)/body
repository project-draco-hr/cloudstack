{
  DtoRule.DtoNatTarget[] preTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(fixedIp,fixedIp,0,0)};
  preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).nwDstAddress(floatingIp).nwDstLength(32).matchReturnFlow(true).position(1).create();
  preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).nwDstAddress(floatingIp).nwDstLength(32).nwProto(SimpleFirewallRule.stringToProtocolNumber("icmp")).tpSrc(new DtoRange<Integer>(0,0)).tpDst(new DtoRange<Integer>(0,0)).position(2).create();
  if (canHandle(network,Service.Firewall)) {
    preFilter.addRule().type(DtoRule.Drop).nwDstAddress(floatingIp).nwDstLength(32).position(3).create();
  }
  preNat.addRule().type(DtoRule.DNAT).flowAction(DtoRule.Accept).nwDstAddress(floatingIp).nwDstLength(32).inPorts(new UUID[]{tenantUplink.getId()}).natTargets(preTargets).position(1).create();
  DtoRule.DtoNatTarget[] postTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(floatingIp,floatingIp,0,0)};
  postNat.addRule().type(DtoRule.SNAT).flowAction(DtoRule.Accept).matchForwardFlow(true).nwSrcAddress(fixedIp).nwSrcLength(32).outPorts(new UUID[]{tenantUplink.getId()}).natTargets(postTargets).position(1).create();
  postNat.addRule().type(DtoRule.SNAT).flowAction(DtoRule.Accept).matchReturnFlow(true).nwSrcAddress(fixedIp).nwSrcLength(32).outPorts(new UUID[]{tenantUplink.getId()}).natTargets(postTargets).position(2).create();
  providerRouter.addRoute().type("Normal").weight(100).srcNetworkAddr("0.0.0.0").srcNetworkLength(0).dstNetworkAddr(floatingIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId()).create();
}
