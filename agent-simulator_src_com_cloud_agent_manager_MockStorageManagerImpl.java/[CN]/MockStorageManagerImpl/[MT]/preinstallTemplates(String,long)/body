{
  MockSecStorageVO storage=_mockSecStorageDao.findByUrl(url);
  if (storage == null) {
    storage=new MockSecStorageVO();
    URI uri;
    try {
      uri=new URI(url);
    }
 catch (    URISyntaxException e) {
      return;
    }
    String nfsHost=uri.getHost();
    String nfsPath=uri.getPath();
    String path=nfsHost + ":" + nfsPath;
    String dir="/mnt/" + UUID.nameUUIDFromBytes(path.getBytes()).toString() + File.separator;
    storage.setUrl(url);
    storage.setCapacity(DEFAULT_HOST_STORAGE_SIZE);
    storage.setMountPoint(dir);
    storage=_mockSecStorageDao.persist(storage);
    long defaultTemplateSize=2 * 1024 * 1024* 1024L;
    MockVolumeVO template=new MockVolumeVO();
    template.setName("simulator-domR");
    template.setPath(storage.getMountPoint() + "template/tmpl/1/9/" + UUID.randomUUID().toString());
    template.setPoolId(storage.getId());
    template.setSize(defaultTemplateSize);
    template.setType(MockVolumeType.TEMPLATE);
    template.setStatus(Status.DOWNLOADED);
    _mockVolumeDao.persist(template);
    template=new MockVolumeVO();
    template.setName("simulator-Centos");
    template.setPath(storage.getMountPoint() + "template/tmpl/1/10/" + UUID.randomUUID().toString());
    template.setPoolId(storage.getId());
    template.setSize(defaultTemplateSize);
    template.setType(MockVolumeType.TEMPLATE);
    template.setStatus(Status.DOWNLOADED);
    _mockVolumeDao.persist(template);
  }
}
