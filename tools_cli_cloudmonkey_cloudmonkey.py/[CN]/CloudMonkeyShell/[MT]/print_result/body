def print_result(self, result, result_filter=None):
    if ((result is None) or (len(result) == 0)):
        return

    def printer_helper(printer, toprow):
        if printer:
            self.monkeyprint(printer)
        return PrettyTable(toprow)

    def print_result_json(result, result_filter=None):
        tfilter = {}
        tresult = copy.deepcopy(result)
        if (result_filter is not None):
            for res in result_filter:
                tfilter[res] = 1
            myresults = {}
            for (okey, oval) in result.iteritems():
                if isinstance(oval, dict):
                    for tkey in x:
                        if (tkey not in tfilter):
                            try:
                                del tresult[okey][x][tkey]
                            except:
                                pass
                elif isinstance(oval, list):
                    for x in range(len(oval)):
                        if isinstance(oval[x], dict):
                            for tkey in oval[x]:
                                if (tkey not in tfilter):
                                    try:
                                        del tresult[okey][x][tkey]
                                    except:
                                        pass
                        else:
                            try:
                                del tresult[okey][x]
                            except:
                                pass
        print json.dumps(tresult, sort_keys=True, indent=2, separators=(',', ': '))

    def print_result_tabular(result, result_filter=None):
        toprow = None
        printer = None
        for node in result:
            if (toprow != node.keys()):
                if ((result_filter is not None) and (len(result_filter) != 0)):
                    commonkeys = filter((lambda x: (x in node.keys())), result_filter)
                    if (commonkeys != toprow):
                        toprow = commonkeys
                        printer = printer_helper(printer, toprow)
                else:
                    toprow = node.keys()
                    printer = printer_helper(printer, toprow)
            row = map((lambda x: node[x]), toprow)
            if (printer and row):
                printer.add_row(row)
        if printer:
            self.monkeyprint(printer)

    def print_result_as_dict(result, result_filter=None):
        if (self.display == 'json'):
            print_result_json(result, result_filter)
            return
        for key in sorted(result.keys(), key=(lambda x: ((x not in ['id', 'count', 'name']) and x))):
            if (not (isinstance(result[key], list) or isinstance(result[key], dict))):
                self.monkeyprint(('%s = %s' % (key, result[key])))
            else:
                self.monkeyprint((key + ':'))
                self.print_result(result[key], result_filter)

    def print_result_as_list(result, result_filter=None):
        for node in result:
            if (isinstance(node, dict) and (self.display == 'table')):
                print_result_tabular(result, result_filter)
                break
            self.print_result(node)
            if (len(result) > 1):
                self.monkeyprint((self.ruler * 80))
    if isinstance(result, dict):
        print_result_as_dict(result, result_filter)
    elif isinstance(result, list):
        print_result_as_list(result, result_filter)
    elif isinstance(result, str):
        print result
    elif (not (str(result) is None)):
        self.monkeyprint(result)
