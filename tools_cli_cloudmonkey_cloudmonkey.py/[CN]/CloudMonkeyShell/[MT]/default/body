def default(self, args):
    if self.pipe_runner(args):
        return
    apiname = args.partition(' ')[0]
    (verb, subject) = splitverbsubject(apiname)
    lexp = shlex.shlex(args.strip())
    lexp.whitespace = ' '
    lexp.whitespace_split = True
    lexp.posix = True
    args = []
    while True:
        next_val = lexp.next()
        if (next_val is None):
            break
        args.append(next_val.replace('\x00', ''))
    args_dict = dict((map((lambda x: [x.partition('=')[0], x.partition('=')[2]]), args[1:])[x] for x in range((len(args) - 1))))
    field_filter = None
    if ('filter' in args_dict):
        field_filter = filter((lambda x: (x is not '')), map((lambda x: x.strip()), args_dict.pop('filter').split(',')))
    missing_args = []
    if (verb in self.apicache):
        missing_args = filter((lambda x: (x not in args_dict.keys())), self.apicache[verb][subject]['requiredparams'])
    if (len(missing_args) > 0):
        self.monkeyprint('Missing arguments: ', ' '.join(missing_args))
        return
    isasync = False
    if ('asyncapis' in self.apicache):
        isasync = (apiname in self.apicache['asyncapis'])
    result = self.make_request(apiname, args_dict, isasync)
    if (result is None):
        return
    try:
        responsekeys = filter((lambda x: ('response' in x)), result.keys())
        for responsekey in responsekeys:
            self.print_result(result[responsekey], field_filter)
        print 
    except Exception as e:
        self.monkeyprint('\xf0\x9f\x99\x88  Error on parsing and printing', e)
