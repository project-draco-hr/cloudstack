def loadcache(self):
    if os.path.exists(self.cache_file):
        self.apicache = loadcache(self.cache_file)
    else:
        self.apicache = apicache
    if ('verbs' in self.apicache):
        self.verbs = self.apicache['verbs']
    for verb in self.verbs:

        def add_grammar(verb):

            def grammar_closure(self, args):
                if self.pipe_runner(('%s %s' % (verb, args))):
                    return
                if ((' --help' in args) or (' -h' in args)):
                    self.do_help(('%s %s' % (verb, args)))
                    return
                try:
                    args_partition = args.partition(' ')
                    cmd = self.apicache[verb][args_partition[0]]['name']
                    args = args_partition[2]
                except KeyError as e:
                    self.monkeyprint(('Error: invalid %s api arg' % verb), e)
                    return
                self.default(('%s %s' % (cmd, args)))
            return grammar_closure
        grammar_handler = add_grammar(verb)
        grammar_handler.__doc__ = ('%ss resources' % verb.capitalize())
        grammar_handler.__name__ = ('do_' + str(verb))
        setattr(self.__class__, grammar_handler.__name__, grammar_handler)
