def cache_verb_miss(self, verb):
    self.print_shell(('Oops: Verb %s should have been precached' % verb))
    completions_found = filter((lambda x: x.startswith(verb)), completions)
    self.cache_verbs[verb] = {}
    for api_name in completions_found:
        api_cmd_str = ('%sCmd' % api_name)
        api_mod = self.get_api_module(api_name, [api_cmd_str])
        if (api_mod is None):
            continue
        try:
            api_cmd = getattr(api_mod, api_cmd_str)()
            required = api_cmd.required
            doc = api_mod.__doc__
        except AttributeError as e:
            self.print_shell(('Error: API attribute %s not found!' % e))
        params = filter((lambda x: (('__' not in x) and ('required' not in x))), dir(api_cmd))
        if (len(required) > 0):
            doc += ('\nRequired args: %s' % ' '.join(required))
        doc += ('\nArgs: %s' % ' '.join(params))
        api_name_lower = api_name.replace(verb, '').lower()
        self.cache_verbs[verb][api_name_lower] = [api_name, params, doc, required]
