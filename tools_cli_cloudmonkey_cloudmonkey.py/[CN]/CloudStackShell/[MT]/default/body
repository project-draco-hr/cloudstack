def default(self, args):
    lexp = shlex.shlex(args.strip())
    lexp.whitespace = ' '
    lexp.whitespace_split = True
    lexp.posix = True
    args = []
    while True:
        next_val = lexp.next()
        if (next_val is None):
            break
        args.append(next_val)
    api_name = args[0]
    args_dict = dict((map((lambda x: [x.partition('=')[0], x.partition('=')[2]]), args[1:])[x] for x in range((len(args) - 1))))
    try:
        api_cmd_str = ('%sCmd' % api_name)
        api_rsp_str = ('%sResponse' % api_name)
        api_mod = self.get_api_module(api_name, [api_cmd_str, api_rsp_str])
        api_cmd = getattr(api_mod, api_cmd_str)
        api_rsp = getattr(api_mod, api_rsp_str)
    except AttributeError as e:
        self.print_shell(('Error: API %s not found!' % e))
        return
    for attribute in args_dict.keys():
        setattr(api_cmd, attribute, args_dict[attribute])
    command = api_cmd()
    response = api_rsp()
    missing_args = list(sets.Set(command.required).difference(sets.Set(args_dict.keys())))
    if (len(missing_args) > 0):
        self.print_shell('Missing arguments:', ' '.join(missing_args))
        return
    isAsync = False
    if ('isAsync' in dir(command)):
        isAsync = (command.isAsync == 'true')
    result = self.make_request(api_name, args_dict, isAsync)
    if (result is None):
        return
    try:
        self.print_result(result.values())
        print 
    except Exception as e:
        self.print_shell('\xf0\x9f\x99\x88  Error on parsing and printing', e)
