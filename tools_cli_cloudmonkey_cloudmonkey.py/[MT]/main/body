def main():
    verbs = []
    if os.path.exists(cache_file):
        verbs = loadcache(cache_file)['verbs']
    elif ('verbs' in apicache):
        verbs = apicache['verbs']
    for verb in verbs:

        def add_grammar(verb):

            def grammar_closure(self, args):
                if self.pipe_runner(('%s %s' % (verb, args))):
                    return
                try:
                    args_partition = args.partition(' ')
                    api = self.apicache[verb][args_partition[0]]
                    cmd = api['name']
                    helpdoc = api['description']
                    args = args_partition[2]
                except KeyError as e:
                    self.monkeyprint(('Error: invalid %s api arg' % verb), e)
                    return
                if ((' --help' in args) or (' -h' in args)):
                    self.monkeyprint(helpdoc)
                    return
                self.default(('%s %s' % (cmd, args)))
            return grammar_closure
        grammar_handler = add_grammar(verb)
        grammar_handler.__doc__ = ('%ss resources' % verb.capitalize())
        grammar_handler.__name__ = ('do_' + str(verb))
        setattr(CloudMonkeyShell, grammar_handler.__name__, grammar_handler)
    shell = CloudMonkeyShell(sys.argv[0])
    if (len(sys.argv) > 1):
        shell.onecmd(' '.join(sys.argv[1:]))
    else:
        shell.cmdloop()
