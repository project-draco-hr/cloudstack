def main():
    grammar = ['create', 'list', 'delete', 'update', 'enable', 'activate', 'disable', 'add', 'remove', 'attach', 'detach', 'associate', 'generate', 'ldap', 'assign', 'authorize', 'change', 'register', 'configure', 'start', 'restart', 'reboot', 'stop', 'reconnect', 'cancel', 'destroy', 'revoke', 'mark', 'reset', 'copy', 'extract', 'migrate', 'restore', 'suspend', 'get', 'query', 'prepare', 'deploy', 'upload']
    self = CloudStackShell
    for rule in grammar:

        def add_grammar(rule):

            def grammar_closure(self, args):
                if ('|' in args):
                    prog_name = sys.argv[0]
                    if ('.py' in prog_name):
                        prog_name = ('python ' + prog_name)
                    self.do_shell(('%s %s %s' % (prog_name, rule, args)))
                    return
                if (not (rule in self.cache_verbs)):
                    self.cache_verb_miss(rule)
                try:
                    args_partition = args.partition(' ')
                    res = self.cache_verbs[rule][args_partition[0]]
                except KeyError as e:
                    self.print_shell(('Error: no such command on %s' % rule))
                    return
                if ((' --help' in args) or (' -h' in args)):
                    self.print_shell(res[2])
                    return
                self.default(((res[0] + ' ') + args_partition[2]))
            return grammar_closure
        grammar_handler = add_grammar(rule)
        grammar_handler.__doc__ = ('%ss resources' % rule.capitalize())
        grammar_handler.__name__ = ('do_' + rule)
        setattr(self, grammar_handler.__name__, grammar_handler)
    shell = CloudStackShell()
    shell.set_grammar(grammar)
    if (len(sys.argv) > 1):
        shell.onecmd(' '.join(sys.argv[1:]))
    else:
        shell.cmdloop()
