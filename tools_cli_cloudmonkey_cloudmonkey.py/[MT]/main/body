def main():
    grammar = ['create', 'list', 'delete', 'update', 'enable', 'disable', 'add', 'remove', 'attach', 'detach', 'assign', 'authorize', 'change', 'register', 'start', 'restart', 'reboot', 'stop', 'reconnect', 'cancel', 'destroy', 'revoke', 'copy', 'extract', 'migrate', 'restore', 'get', 'prepare', 'deploy', 'upload']
    self = CloudStackShell
    for rule in grammar:
        setattr(self, ('completions_' + rule), map((lambda x: x.replace(rule, '')), filter((lambda x: (rule in x)), completions)))

        def add_grammar(rule):

            def grammar_closure(self, args):
                self.default((rule + args))
            return grammar_closure
        grammar_handler = add_grammar(rule)
        grammar_handler.__doc__ = ('%ss resources' % rule.capitalize())
        grammar_handler.__name__ = ('do_' + rule)
        setattr(self, grammar_handler.__name__, grammar_handler)

        def add_completer(rule):

            def completer_closure(self, text, line, begidx, endidx):
                mline = line.partition(' ')[2]
                offs = (len(mline) - len(text))
                return [s[offs:] for s in getattr(self, ('completions_' + rule)) if s.startswith(mline)]
            return completer_closure
        completion_handler = add_completer(rule)
        completion_handler.__name__ = ('complete_' + rule)
        setattr(self, completion_handler.__name__, completion_handler)
    if (len(sys.argv) > 1):
        CloudStackShell().onecmd(' '.join(sys.argv[1:]))
    else:
        CloudStackShell().cmdloop()
