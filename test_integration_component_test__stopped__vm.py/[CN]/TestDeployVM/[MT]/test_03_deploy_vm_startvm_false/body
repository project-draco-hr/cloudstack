@attr(tags=['advanced', 'eip', 'advancedns', 'basic', 'sg', 'selfservice'])
def test_03_deploy_vm_startvm_false(self):
    'Test Deploy Virtual Machine with startVM=false parameter\n        '
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, startvm=False, diskofferingid=self.disk_offering.id)
    self.debug(('Deployed instance in account: %s' % self.account.name))
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Stopped', 'VM should be in Stopped state after deployment with startvm=false')
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(routers, None, 'List routers should return empty response')
    self.debug(('Destroying instance: %s' % self.virtual_machine.name))
    self.virtual_machine.delete(self.apiclient)
    self.debug('Instance is destroyed!')
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.debug('Instance destroyed..waiting till expunge interval')
    interval = list_configurations(self.apiclient, name='expunge.interval')
    delay = list_configurations(self.apiclient, name='expunge.delay')
    time.sleep((int(interval[0].value) + int(delay[0].value)))
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(list_vm_response, None, 'Check list response returns a valid list')
    return
