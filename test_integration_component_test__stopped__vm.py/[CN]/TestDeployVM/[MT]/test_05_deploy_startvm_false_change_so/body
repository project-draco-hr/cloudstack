@attr(tags=['advanced', 'eip', 'advancedns', 'basic', 'sg'])
def test_05_deploy_startvm_false_change_so(self):
    'Test Deploy Virtual Machine with startVM=false and\n            change service offering\n        '
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, startvm=False, diskofferingid=self.disk_offering.id)
    self.debug(('Deployed instance in account: %s' % self.account.name))
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Stopped', 'VM should be in Stopped state after deployment with startvm=false')
    self.debug(('Creating a volume in account: %s' % self.account.name))
    volume = Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid, diskofferingid=self.disk_offering.id)
    self.debug(('Created volume in account: %s' % self.account.name))
    self.debug(('Attaching volume to instance: %s' % self.virtual_machine.name))
    try:
        self.virtual_machine.attach_volume(self.apiclient, volume)
    except Exception as e:
        self.fail('Attach volume failed!')
    self.debug('Fetching details of medium service offering')
    medium_service_offs = ServiceOffering.list(self.apiclient, name='Medium Instance')
    if isinstance(medium_service_offs, list):
        medium_service_off = medium_service_offs[0]
    else:
        self.debug('Service offering not found! Creating a new one..')
        medium_service_off = ServiceOffering.create(self.apiclient, self.services['service_offering'])
        self.cleanup.append(medium_service_off)
    self.debug(('Changing service offering for instance: %s' % self.virtual_machine.name))
    try:
        self.virtual_machine.change_service_offering(self.apiclient, medium_service_off.id)
    except Exception as e:
        self.fail(('Change service offering failed: %s' % e))
    self.debug(('Starting the instance: %s' % self.virtual_machine.name))
    self.virtual_machine.start(self.apiclient)
    self.debug(('Instance: %s started' % self.virtual_machine.name))
    self.debug(('Detaching the disk: %s' % volume.name))
    self.virtual_machine.detach_volume(self.apiclient, volume)
    self.debug(('Datadisk %s detached!' % volume.name))
    volumes = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', id=volume.id, listall=True)
    self.assertEqual(volumes, None, 'List Volumes should not list any volume for instance')
    return
