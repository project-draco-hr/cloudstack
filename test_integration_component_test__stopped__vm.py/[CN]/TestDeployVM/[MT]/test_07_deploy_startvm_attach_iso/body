@attr(tags=['advanced', 'eip', 'advancedns', 'basic', 'sg', 'selfservice'])
def test_07_deploy_startvm_attach_iso(self):
    'Test Deploy Virtual Machine with startVM=false and attach ISO\n        '
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, startvm=False, diskofferingid=self.disk_offering.id)
    response = self.virtual_machine.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    self.debug(('Registering a ISO in account: %s' % self.account.name))
    iso = Iso.create(self.apiclient, self.services['iso'], account=self.account.name, domainid=self.account.domainid)
    self.debug(('Successfully created ISO with ID: %s' % iso.id))
    try:
        iso.download(self.apiclient)
    except Exception as e:
        self.fail(('Exception while downloading ISO %s: %s' % (iso.id, e)))
    self.debug(('Attach ISO with ID: %s to VM ID: %s' % (iso.id, self.virtual_machine.id)))
    try:
        self.virtual_machine.attach_iso(self.apiclient, iso)
    except Exception as e:
        self.fail('Attach ISO failed!')
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.isoid, iso.id, 'The ISO status should be reflected in list Vm call')
    return
