@attr(tags=['advanced', 'eip', 'advancedns'], required_hardware='false')
def test_01_deploy_vm_no_startvm(self):
    'Test Deploy Virtual Machine with no startVM parameter\n        '
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    self.virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, diskofferingid=self.disk_offering.id, startvm=False)
    response = self.virtual_machine_1.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    self.debug('Checking the router state after VM deployment')
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(routers, None, 'List routers should return empty response')
    self.debug(('Deploying another instance (startvm=true) in the account: %s' % self.account.name))
    self.virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, diskofferingid=self.disk_offering.id, startvm=True)
    response = self.virtual_machine_2.getState(self.apiclient, VirtualMachine.RUNNING)
    self.assertEqual(response[0], PASS, response[1])
    self.debug('Checking the router state after VM deployment')
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List routers should not return empty response')
    for router in routers:
        self.debug(('Router state: %s' % router.state))
        self.assertEqual(router.state, 'Running', 'Router should be in running state when instance is running in the account')
    self.debug(('Destroying the running VM:%s' % self.virtual_machine_2.name))
    self.virtual_machine_2.delete(self.apiclient, expunge=True)
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertNotEqual(routers, None, 'Router should get deleted after expunge delay+wait')
    return
