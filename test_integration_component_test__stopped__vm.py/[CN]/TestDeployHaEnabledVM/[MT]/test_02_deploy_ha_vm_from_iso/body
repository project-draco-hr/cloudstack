@attr(tags=['advanced', 'eip', 'advancedns', 'basic', 'sg'], required_hardware='true')
def test_02_deploy_ha_vm_from_iso(self):
    'Test Deploy HA enabled Virtual Machine from ISO\n        '
    self.hypervisor = self.testClient.getHypervisorInfo()
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest(('vm deploy from ISO feature is not supported on %s' % self.hypervisor.lower()))
    if (not self.testdata['configurableData']['bootableIso'][self.hypervisor.lower()]['url']):
        self.skipTest(('Bootable Iso URL not present in test data for %s' % self.hypervisor))
    self.testdata['configurableData']['bootableIso']['url'] = self.testdata['configurableData']['bootableIso'][self.hypervisor.lower()]['url']
    self.iso = Iso.create(self.apiclient, self.testdata['configurableData']['bootableIso'], account=self.account.name, domainid=self.account.domainid)
    try:
        self.iso.download(self.apiclient)
    except Exception as e:
        raise Exception(('Exception while downloading ISO %s: %s' % (self.iso.id, e)))
    self.debug(('Registered ISO: %s' % self.iso.name))
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, templateid=self.iso.id, serviceofferingid=self.service_offering.id, diskofferingid=self.disk_offering.id, startvm=True, hypervisor=self.hypervisor)
    response = self.virtual_machine.getState(self.apiclient, VirtualMachine.RUNNING)
    self.assertEqual(response[0], PASS, response[1])
    return
