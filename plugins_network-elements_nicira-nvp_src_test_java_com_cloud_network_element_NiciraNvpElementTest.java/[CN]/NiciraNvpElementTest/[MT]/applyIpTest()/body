{
  final Network network=mock(Network.class);
  when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);
  when(network.getId()).thenReturn(NETWORK_ID);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  final NetworkOffering offering=mock(NetworkOffering.class);
  when(offering.getId()).thenReturn(NETWORK_ID);
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getGuestType()).thenReturn(GuestType.Isolated);
  final List<PublicIpAddress> ipAddresses=new ArrayList<PublicIpAddress>();
  final PublicIpAddress pipReleased=mock(PublicIpAddress.class);
  final PublicIpAddress pipAllocated=mock(PublicIpAddress.class);
  final Ip ipReleased=new Ip("42.10.10.10");
  final Ip ipAllocated=new Ip("10.10.10.10");
  when(pipAllocated.getState()).thenReturn(IpAddress.State.Allocated);
  when(pipAllocated.getAddress()).thenReturn(ipAllocated);
  when(pipAllocated.getNetmask()).thenReturn("255.255.255.0");
  when(pipReleased.getState()).thenReturn(IpAddress.State.Releasing);
  when(pipReleased.getAddress()).thenReturn(ipReleased);
  when(pipReleased.getNetmask()).thenReturn("255.255.255.0");
  ipAddresses.add(pipAllocated);
  ipAddresses.add(pipReleased);
  final Set<Service> services=new HashSet<Service>();
  services.add(Service.SourceNat);
  services.add(Service.StaticNat);
  services.add(Service.PortForwarding);
  final List<NiciraNvpDeviceVO> deviceList=new ArrayList<NiciraNvpDeviceVO>();
  final NiciraNvpDeviceVO nndVO=mock(NiciraNvpDeviceVO.class);
  final NiciraNvpRouterMappingVO nnrmVO=mock(NiciraNvpRouterMappingVO.class);
  when(niciraNvpRouterMappingDao.findByNetworkId(NETWORK_ID)).thenReturn(nnrmVO);
  when(nnrmVO.getLogicalRouterUuid()).thenReturn("abcde");
  when(nndVO.getHostId()).thenReturn(NETWORK_ID);
  final HostVO hvo=mock(HostVO.class);
  when(hvo.getId()).thenReturn(NETWORK_ID);
  when(hvo.getDetail("l3gatewayserviceuuid")).thenReturn("abcde");
  when(hostDao.findById(NETWORK_ID)).thenReturn(hvo);
  deviceList.add(nndVO);
  when(niciraNvpDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(deviceList);
  final ConfigurePublicIpsOnLogicalRouterAnswer answer=mock(ConfigurePublicIpsOnLogicalRouterAnswer.class);
  when(answer.getResult()).thenReturn(true);
  when(agentManager.easySend(eq(NETWORK_ID),any(ConfigurePublicIpsOnLogicalRouterCommand.class))).thenReturn(answer);
  assertTrue(element.applyIps(network,ipAddresses,services));
  verify(agentManager,atLeast(1)).easySend(eq(NETWORK_ID),argThat(new ArgumentMatcher<ConfigurePublicIpsOnLogicalRouterCommand>(){
    @Override public boolean matches(    final Object argument){
      final ConfigurePublicIpsOnLogicalRouterCommand command=(ConfigurePublicIpsOnLogicalRouterCommand)argument;
      if (command.getPublicCidrs().size() == 1)       return true;
      return false;
    }
  }
));
}
