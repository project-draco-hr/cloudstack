def _createuser(ctx, user, homedir, shell):
    if (Options.platform == 'win32'):
        return
    if (not hasattr(os, 'getuid')):
        return
    if (os.getuid() != 0):
        return
    if Options.options.NOUSERMGMT:
        return

    def f(ctx, user, homedir, shell):
        import pwd
        try:
            pwd.getpwnam(user).pw_uid
            user_exists = True
        except KeyError as e:
            user_exists = False
        if user_exists:
            return
        Utils.pprint('GREEN', ('* creating user %s' % user))
        cmd = [ctx.env.USERADD, '-M', '-r', '-s', shell, '-d', homedir, user]
        ret = Utils.exec_command(cmd)
        if ret:
            raise Utils.WafError(('Failed to run command %s' % cmd))

    def g(ctx, user, homedir, shell):
        import pwd
        try:
            pwd.getpwnam(user).pw_uid
            user_exists = True
        except KeyError as e:
            user_exists = False
        if (not user_exists):
            return
        Utils.pprint('GREEN', ('* removing user %s' % user))
        cmd = [ctx.env.USERDEL, user]
        ret = Utils.exec_command(cmd)
        if ret:
            raise Utils.WafError(('Failed to run command %s' % cmd))
    if (ctx.is_install > 0):
        ctx.add_pre_fun((lambda ctx: f(ctx, user, homedir, shell)))
    elif (ctx.is_install < 0):
        ctx.add_pre_fun((lambda ctx: g(ctx, user, homedir, shell)))
