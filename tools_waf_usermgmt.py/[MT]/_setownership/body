def _setownership(ctx, path, owner, group, mode=None):
    if (Options.platform == 'win32'):
        return
    if (Options.platform == 'darwin'):
        return
    if (not hasattr(os, 'getuid')):
        return
    if (os.getuid() != 0):
        return
    if Options.options.NOUSERMGMT:
        return
    import pwd
    import grp
    import stat
    from os import chown as _chown, chmod as _chmod

    def f(bld, path, owner, group, mode):
        try:
            uid = pwd.getpwnam(owner).pw_uid
        except KeyError as e:
            raise Utils.WafError('Before using setownership() you have to create the user with bld.createuser(username...)')
        try:
            gid = grp.getgrnam(group).gr_gid
        except KeyError as e:
            raise Utils.WafError('Before using setownership() you have to create the user with bld.createuser(username...)')
        path = bld.subst_add_destdir(path, bld)
        (current_uid, current_gid) = (os.stat(path).st_uid, os.stat(path).st_gid)
        if (current_uid != uid):
            Utils.pprint('GREEN', ('* setting owner of %s to UID %s' % (path, uid)))
            _chown(path, uid, current_gid)
            current_uid = uid
        if (current_gid != gid):
            Utils.pprint('GREEN', ('* setting group of %s to GID %s' % (path, gid)))
            _chown(path, current_uid, gid)
            current_gid = gid
        if (mode is not None):
            current_mode = stat.S_IMODE(os.stat(path).st_mode)
            if (current_mode != mode):
                Utils.pprint('GREEN', ('* adjusting permissions on %s to mode %o' % (path, mode)))
                _chmod(path, mode)
                current_mode = mode
    if (ctx.is_install > 0):
        ctx.add_post_fun((lambda ctx: f(ctx, path, owner, group, mode)))
