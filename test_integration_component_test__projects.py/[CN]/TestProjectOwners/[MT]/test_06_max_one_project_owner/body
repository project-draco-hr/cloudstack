@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'simulator', 'selfservice'])
def test_06_max_one_project_owner(self):
    ' Test Verify there can only be one owner of a project at a time\n        '
    project = Project.create(self.apiclient, self.services['project'], account=self.admin.name, domainid=self.admin.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    self.user = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup.append(self.user)
    self.debug(('Created account with ID: %s' % self.user.name))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    self.debug(('Adding %s user to project: %s' % (self.new_admin.name, project.name)))
    project.addAccount(self.apiclient, self.new_admin.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.new_admin.name)
    self.debug(accounts_reponse)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    self.debug(('Updating project with new Admin: %s' % self.new_admin.name))
    project.update(self.apiclient, account=self.new_admin.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.new_admin.name)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Admin', 'Newly added user is not added as a regular user')
    self.debug(('Adding %s user to project: %s' % (self.user.name, project.name)))
    project.addAccount(self.apiclient, self.user.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.user.name)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    self.debug(('Updating project with new Admin: %s' % self.user.name))
    project.update(self.apiclient, account=self.user.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.user.name)
    self.debug(accounts_reponse)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Admin', 'Newly added user is not added as a regular user')
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.new_admin.name)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    return
