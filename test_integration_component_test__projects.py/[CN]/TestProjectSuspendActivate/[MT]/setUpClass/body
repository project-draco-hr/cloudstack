@classmethod
def setUpClass(cls):
    cls.testClient = super(TestProjectSuspendActivate, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.domain = get_domain(cls.api_client)
    cls.services['mode'] = cls.zone.networktype
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    configs = Configurations.list(cls.api_client, name='project.invite.required')
    if (not isinstance(configs, list)):
        raise unittest.SkipTest('List configurations has no config: project.invite.required')
    elif (configs[0].value.lower() != 'false'):
        raise unittest.SkipTest("'project.invite.required' should be set to false")
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'], domainid=cls.domain.id)
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.user = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.project = Project.create(cls.api_client, cls.services['project'], account=cls.account.name, domainid=cls.account.domainid)
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls._cleanup = [cls.project, cls.account, cls.disk_offering, cls.service_offering]
    return
