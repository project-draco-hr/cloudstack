def test_10_project_activation(self):
    ' Test project activation after suspension \n        '
    configs = Configurations.list(self.apiclient, name='project.invite.required')
    self.assertEqual(isinstance(configs, list), True, 'Check for a valid list configurations response')
    config = configs[0]
    self.assertEqual(config.value.lower(), 'false', "'project.invite.required' should be set to false")
    self.debug(('Activating project: %s' % self.project.name))
    self.project.activate(self.apiclient)
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, serviceofferingid=self.service_offering.id, projectid=self.project.id)
    self.cleanup.append(virtual_machine)
    self.debug(('Created a VM: %s for project: %s' % (virtual_machine.id, self.project.id)))
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(vms), 0, 'Check list project response returns a valid project')
    for vm in vms:
        self.debug(('VM ID: %s state: %s' % (vm.id, vm.state)))
        self.assertEqual(vm.state, 'Running', 'VM should be in Running state after project activation')
    return
