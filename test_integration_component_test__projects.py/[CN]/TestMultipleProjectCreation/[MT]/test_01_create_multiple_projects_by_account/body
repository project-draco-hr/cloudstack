@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'simulator'])
def test_01_create_multiple_projects_by_account(self):
    ' Verify an account can own multiple projects and can belong to\n            multiple projects\n        '
    project_1 = Project.create(self.apiclient, self.services['project'], account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(project_1)
    self.debug(('Created project with domain admin with ID: %s' % project_1.id))
    list_projects_reponse = Project.list(self.apiclient, id=project_1.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project_1.name, list_project.name, 'Check project name from list response')
    project_2 = Project.create(self.apiclient, self.services['project'], account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(project_2)
    self.debug(('Created project with domain user with ID: %s' % project_2.id))
    list_projects_reponse = Project.list(self.apiclient, id=project_2.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    project_1.addAccount(self.apiclient, self.user.name, self.user.email)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project_1.id, account=self.user.name)
    self.debug(accounts_reponse)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    project_2.addAccount(self.apiclient, self.user.name, self.user.email)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project_2.id, account=self.user.name)
    self.debug(accounts_reponse)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    return
