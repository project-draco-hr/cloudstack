def test_07_project_resources_account_delete(self):
    ' Test Verify after an account is removed from the project, all his\n            resources stay with the project.\n        '
    configs = Configurations.list(self.apiclient, name='project.invite.required')
    self.assertEqual(isinstance(configs, list), True, 'Check for a valid list configurations response')
    config = configs[0]
    self.assertEqual(config.value.lower(), 'false', "'project.invite.required' should be set to false")
    project = Project.create(self.apiclient, self.services['project'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    self.debug(('Adding %s user to project: %s' % (self.user.account.name, project.name)))
    project.addAccount(self.apiclient, self.user.account.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.user.account.name)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    volume = Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id, projectid=project.id)
    self.cleanup.append(volume)
    self.user.delete(self.apiclient)
    volumes = Volume.list(self.apiclient, id=volume.id)
    self.assertEqual(isinstance(volumes, list), True, 'Check for a valid list volumes response')
    self.assertNotEqual(len(volumes), 0, 'Check list volumes API response returns a valid list')
    volume_response = volumes[0]
    self.assertEqual(volume_response.name, volume.name, 'Volume should exist after project user deletion.')
    return
