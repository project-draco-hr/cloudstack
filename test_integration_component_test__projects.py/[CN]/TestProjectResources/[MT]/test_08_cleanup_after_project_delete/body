def test_08_cleanup_after_project_delete(self):
    ' Test accounts are unassigned from project after project deletion\n        '
    configs = Configurations.list(self.apiclient, name='project.invite.required')
    self.assertEqual(isinstance(configs, list), True, 'Check for a valid list configurations response')
    config = configs[0]
    self.assertEqual(config.value.lower(), 'false', "'project.invite.required' should be set to false")
    project = Project.create(self.apiclient, self.services['project'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    self.user = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup.append(self.user)
    self.debug(('Adding %s user to project: %s' % (self.user.account.name, project.name)))
    project.addAccount(self.apiclient, self.user.account.name)
    accounts_reponse = Project.listAccounts(self.apiclient, projectid=project.id, account=self.user.account.name)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.role, 'Regular', 'Newly added user is not added as a regular user')
    volume = Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id, projectid=project.id)
    self.debug(('Created a volume: %s for project: %s' % (volume.id, project.name)))
    self.debug(('Deleting project: %s' % project.name))
    project.delete(self.apiclient)
    self.debug(('Successfully deleted project: %s' % project.name))
    volumes = Volume.list(self.apiclient, id=volume.id)
    self.assertEqual(volumes, None, 'Resources (volume) should be deleted as part of cleanup')
    accounts = Project.listAccounts(self.apiclient, projectid=project.id)
    self.assertEqual(accounts, None, 'Accounts should be un-assigned from project')
    return
