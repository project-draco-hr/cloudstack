def test_04_delete_domain_with_project(self):
    ' Test Verify delete domain with cleanup=true should delete projects\n            belonging to the domain\n        '
    configs = Configurations.list(self.apiclient, name='project.invite.required')
    self.assertEqual(isinstance(configs, list), True, 'Check for a valid list configurations response')
    config = configs[0]
    self.assertEqual(config.value.lower(), 'false', "'project.invite.required' should be set to false")
    project = Project.create(self.apiclient, self.services['project'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    self.debug(('Deleting domain: %s forcefully' % self.domain.name))
    self.domain.delete(self.apiclient, cleanup=True)
    self.debug(('Removed domain: %s' % self.domain.name))
    interval = list_configurations(self.apiclient, name='account.cleanup.interval')
    self.assertEqual(isinstance(interval, list), True, 'Check if account.cleanup.interval config present')
    self.debug(('Sleep for account cleanup interval: %s' % interval[0].value))
    time.sleep(int(interval[0].value))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(list_projects_reponse, None, 'Project should be deleted as part of domain cleanup')
    return
