{
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and("trafficType",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and("cidr",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and("broadcastType",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and("offering",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and("datacenter",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and("account",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and("related",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and("guestType",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and("physicalNetwork",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and("offering",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and("account",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join("accounts",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and("datacenter",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and("cidr",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and("offering",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and("datacenter",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and("account",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join("account",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and("networkId",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and("accountId",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join("networkSearch",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and("dataCenterId",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and("broadcastUri",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and("dataCenterId",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join1=_ntwkSvcMap.createSearchBuilder();
  join1.and("service",join1.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join("services",join1,ZoneSecurityGroupSearch.entity().getId(),join1.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountByOfferingId=createSearchBuilder(Long.class);
  CountByOfferingId.select(null,Func.COUNT,CountByOfferingId.entity().getId());
  CountByOfferingId.and("offeringId",CountByOfferingId.entity().getNetworkOfferingId(),Op.EQ);
  CountByOfferingId.and("removed",CountByOfferingId.entity().getRemoved(),Op.NULL);
  CountByOfferingId.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and("physicalNetworkId",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  securityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and("service",join3.entity().getService(),Op.EQ);
  securityGroupSearch.join("services",join3,securityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  securityGroupSearch.done();
  _tgMacAddress=_tgs.get("macAddress");
}
