@attr(tags=['basic', 'advanced'], required_hardware='true')
def test_05_storage_snapshots_limits(self):
    ' Storage and Snapshot Limit\n            1.   Create Snapshot of ROOT disk.\n            2.   Verify the Secondary Storage value                 is increased by the size of snapshot.\n            3.   Delete Snaphshot.\n            4.   Verify the Secondary                 Storage value is decreased by the size of snapshot.\n            5.   Set the Snapshot limit of Account.\n            6.   Create Snasphots till limit is reached.\n            7.   Create Snapshot of ROOT Volume.                 Creation should fail.\n            8.   Delete few Snapshots.\n            9.   Create Snapshot again.\n                 Creation should succeed.\n        '
    root_volumes_list = Volume.list(self.userapiclient, virtualmachineid=self.vm.id, type='ROOT')
    status = validateList(root_volumes_list)
    self.assertEqual(status[0], PASS, 'ROOT Volume List Validation Failed')
    root_volume = root_volumes_list[0]
    data_volume_created = Volume.create(self.userapiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id)
    self.cleanup.append(data_volume_created)
    self.vm.attach_volume(self.userapiclient, data_volume_created)
    data_volumes_list = Volume.list(self.userapiclient, id=data_volume_created.id)
    data_volume = data_volumes_list[0]
    qryresult_before_snapshot = self.dbclient.execute((" select id, account_name, secondaryStorageTotal                    from account_view where account_name = '%s';" % self.account.name))
    status = validateList(qryresult_before_snapshot)
    self.assertEqual(status[0], PASS, 'Check sql query to return SecondaryStorageTotal of account')
    secStorageBeforeSnapshot = qryresult_before_snapshot[0][2]
    snapshot = Snapshot.create(self.userapiclient, root_volume.id)
    snapshots_list = Snapshot.list(self.userapiclient, id=snapshot.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % snapshots_list[0].state))
    qryresult_after_snapshot = self.dbclient.execute((" select id, account_name, secondaryStorageTotal                        from account_view where account_name = '%s';" % self.account.name))
    status = validateList(qryresult_after_snapshot)
    self.assertEqual(status[0], PASS, 'Check sql query to return SecondaryStorageTotal of account')
    secStorageAfterSnapshotCreated = qryresult_after_snapshot[0][2]
    snapshot_size = snapshots_list[0].physicalsize
    secStorageIncreased = (secStorageBeforeSnapshot + snapshot_size)
    self.assertEqual(secStorageIncreased, secStorageAfterSnapshotCreated, 'Secondary storage Total after Snapshot                        should be incremented by size of snapshot.')
    snapshot.delete(self.apiclient)
    snapshots_list = Snapshot.list(self.userapiclient, id=snapshot.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], FAIL, 'Snapshots Not Deleted.')
    qryresult_after_snapshot_deleted = self.dbclient.execute((" select id, account_name, secondaryStorageTotal                        from account_view where account_name = '%s';" % self.account.name))
    status = validateList(qryresult_after_snapshot_deleted)
    self.assertEqual(status[0], PASS, 'Check sql query to return SecondaryStorageTotal of account')
    secStorageAfterSnapshotDeleted = qryresult_after_snapshot_deleted[0][2]
    secStorageDecreased = (secStorageAfterSnapshotCreated - snapshot_size)
    self.assertEqual(secStorageDecreased, secStorageAfterSnapshotDeleted, 'Secondary storage Total after Snapshot                        should be incremented by size of snapshot.')
    Resources.updateLimit(self.apiclient, resourcetype=3, max=1, account=self.account.name, domainid=self.account.domainid)
    snapshot = Snapshot.create(self.userapiclient, root_volume.id)
    snapshots_list = Snapshot.list(self.userapiclient, id=snapshot.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % snapshots_list[0].state))
    with self.assertRaises(Exception):
        Snapshot.create(self.userapiclient, data_volume.id)
    snapshot.delete(self.userapiclient)
    snapshots_list = Snapshot.list(self.userapiclient, id=snapshot.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], FAIL, 'Snapshots Not Deleted.')
    snapshot = Snapshot.create(self.userapiclient, root_volume.id)
    snapshots_list = Snapshot.list(self.userapiclient, id=snapshot.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % snapshots_list[0].state))
    self.vm.detach_volume(self.userapiclient, data_volumes_list[0])
    return
