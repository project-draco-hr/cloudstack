@unittest.skip('Test case is not testable as the VM is being deployed with    too high memory - above account capacity')
@attr(tags=['invalid'], required_hardware='true')
def test_vm_creation_in_fully_automated_mode(self):
    ' Test VM Creation in  automation mode = Fully automated\n            This test requires following preconditions:\n                - DRS Cluster is configured in "Fully automated" mode\n        '
    hosts = Host.list(self.apiclient, zoneid=self.zone.id, resourcestate='Enabled', type='Routing')
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return valid host response')
    self.assertGreaterEqual(len(hosts), 2, 'There must be two hosts present in a cluster')
    host_1 = hosts[0]
    self.services['service_offering_max_memory']['memory'] = int((((int(hosts[0].memorytotal) - int(hosts[0].memoryused)) / 1048576) - 1024))
    self.debug(('max memory: %s' % self.services['service_offering_max_memory']['memory']))
    service_offering_max_memory = ServiceOffering.create(self.apiclient, self.services['service_offering_max_memory'])
    VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=service_offering_max_memory.id, hostid=host_1.id)
    self.debug('Trying to deploy instance with memory requirement more than that is available on                     the first host')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Deployed VM should be in RUnning state')
    self.assertNotEqual(vm.hostid, host_1.id, 'Host Ids of two should not match as one host is full')
    self.debug(('The host ids of two virtual machines are different as expected                    they are %s and %s' % (vm.hostid, host_1.id)))
    return
