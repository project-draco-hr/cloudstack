@attr(hypervisor='xenserver')
@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_01_reset_vm_on_reboot(self):
    'Test reset virtual machine on reboot\n        '
    volumelist_before_reboot = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    self.assertNotEqual(volumelist_before_reboot, None, 'Check if volume is in listvolumes')
    volume_before_reboot = volumelist_before_reboot[0]
    self.debug(('Rebooting vm %s ' % self.virtual_machine.id))
    cmd = rebootVirtualMachine.rebootVirtualMachineCmd()
    cmd.id = self.virtual_machine.id
    self.apiclient.rebootVirtualMachine(cmd)
    volumelist_after_reboot = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    self.assertNotEqual(volumelist_after_reboot, None, 'Check if volume is in listvolumes')
    volume_after_reboot = volumelist_after_reboot[0]
    self.assertNotEqual(volume_after_reboot.id, volume_before_reboot.id, 'Check whether volumes are different before and after reboot')
    list_vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_vm_response, None, 'Check virtual machine is listVirtualMachines')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'Check the state of VM')
    return
