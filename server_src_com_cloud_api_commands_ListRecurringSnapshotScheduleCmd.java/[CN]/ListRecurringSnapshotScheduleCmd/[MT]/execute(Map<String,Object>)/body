{
  Long volumeId=(Long)params.get(BaseCmd.Properties.VOLUME_ID.getName());
  Long policyId=(Long)params.get(BaseCmd.Properties.SNAPSHOT_POLICY_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  VolumeVO volume=getManagementServer().findVolumeById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a volume with id " + volumeId);
  }
  if (account != null) {
    long volAcctId=volume.getAccountId();
    if (isAdmin(account.getType())) {
      Account userAccount=getManagementServer().findAccountById(Long.valueOf(volAcctId));
      if (!getManagementServer().isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid volume id (" + volumeId + ") given, unable to list snapshots.");
      }
    }
 else     if (account.getId().longValue() != volAcctId) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"account " + account.getAccountName() + " does not own volume id "+ volAcctId);
    }
  }
  List<SnapshotScheduleVO> recurringSnapshotSchedules=getManagementServer().findRecurringSnapshotSchedule(volumeId,policyId);
  Object[] snapshotTag=new Object[recurringSnapshotSchedules.size()];
  int i=0;
  for (  SnapshotScheduleVO recurringSnapshotSchedule : recurringSnapshotSchedules) {
    List<Pair<String,Object>> snapshotData=new ArrayList<Pair<String,Object>>();
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),recurringSnapshotSchedule.getId().toString()));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),recurringSnapshotSchedule.getVolumeId().toString()));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.SNAPSHOT_POLICY_ID.getName(),recurringSnapshotSchedule.getPolicyId().toString()));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.SCHEDULED.getName(),getDateString(recurringSnapshotSchedule.getScheduledTimestamp())));
    snapshotTag[i++]=snapshotData;
  }
  List<Pair<String,Object>> returnTags=new ArrayList<Pair<String,Object>>();
  Pair<String,Object> snapshotTags=new Pair<String,Object>("snapshot",snapshotTag);
  returnTags.add(snapshotTags);
  return returnTags;
}
