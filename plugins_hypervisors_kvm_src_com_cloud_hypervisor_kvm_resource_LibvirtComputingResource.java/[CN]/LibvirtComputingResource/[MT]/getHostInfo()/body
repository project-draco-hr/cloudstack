{
  final ArrayList<Object> info=new ArrayList<Object>();
  long speed=0;
  long cpus=0;
  long ram=0;
  int cpuSockets=0;
  String cap=null;
  try {
    final Connect conn=LibvirtConnection.getConnection();
    final NodeInfo hosts=conn.nodeInfo();
    speed=getCpuSpeed(hosts);
    cpuSockets=hosts.sockets;
    if (hosts.nodes > 0) {
      cpuSockets=hosts.sockets * hosts.nodes;
    }
    cpus=hosts.cpus;
    ram=hosts.memory * 1024L;
    final LibvirtCapXMLParser parser=new LibvirtCapXMLParser();
    parser.parseCapabilitiesXML(conn.getCapabilities());
    final ArrayList<String> oss=parser.getGuestOsType();
    for (    final String s : oss) {
      if (s.equalsIgnoreCase("hvm")) {
        cap="hvm";
      }
    }
  }
 catch (  final LibvirtException e) {
    s_logger.trace("Ignoring libvirt error.",e);
  }
  if (isSnapshotSupported()) {
    cap=cap + ",snapshot";
  }
  info.add((int)cpus);
  info.add(speed);
  ram=ram - _dom0MinMem;
  info.add(ram);
  info.add(cap);
  info.add(_dom0MinMem);
  info.add(cpuSockets);
  s_logger.debug("cpus=" + cpus + ", speed="+ speed+ ", ram="+ ram+ ", _dom0MinMem="+ _dom0MinMem+ ", cpu sockets="+ cpuSockets);
  return info;
}
