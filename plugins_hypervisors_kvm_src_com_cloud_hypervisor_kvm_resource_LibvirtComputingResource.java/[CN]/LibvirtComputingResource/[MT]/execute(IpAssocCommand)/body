{
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String[] results=new String[cmd.getIpAddresses().length];
  Connect conn;
  try {
    conn=LibvirtConnection.getConnectionByVmName(routerName);
    List<InterfaceDef> nics=getInterfaces(conn,routerName);
    Map<String,Integer> vlanAllocatedToVM=new HashMap<String,Integer>();
    Integer nicPos=0;
    for (    InterfaceDef nic : nics) {
      if (nic.getBrName().equalsIgnoreCase(_linkLocalBridgeName)) {
        vlanAllocatedToVM.put("LinkLocal",nicPos);
      }
 else {
        if (nic.getBrName().equalsIgnoreCase(_publicBridgeName) || nic.getBrName().equalsIgnoreCase(_privBridgeName) || nic.getBrName().equalsIgnoreCase(_guestBridgeName)) {
          vlanAllocatedToVM.put(Vlan.UNTAGGED,nicPos);
        }
 else {
          String vlanId=getVlanIdFromBridge(nic.getBrName());
          vlanAllocatedToVM.put(vlanId,nicPos);
        }
      }
      nicPos++;
    }
    IpAddressTO[] ips=cmd.getIpAddresses();
    int i=0;
    String result=null;
    int nicNum=0;
    boolean newNic=false;
    for (    IpAddressTO ip : ips) {
      if (!vlanAllocatedToVM.containsKey(ip.getBroadcastUri())) {
        VifHotPlug(conn,routerName,ip.getBroadcastUri(),ip.getVifMacAddress());
        vlanAllocatedToVM.put(ip.getBroadcastUri(),nicPos++);
        newNic=true;
      }
      nicNum=vlanAllocatedToVM.get(ip.getBroadcastUri());
      networkUsage(routerIp,"addVif","eth" + nicNum);
      result=_virtRouterResource.assignPublicIpAddress(routerName,routerIp,ip.getPublicIp(),ip.isAdd(),ip.isFirstIP(),ip.isSourceNat(),ip.getBroadcastUri(),ip.getVlanGateway(),ip.getVlanNetmask(),ip.getVifMacAddress(),nicNum,newNic);
      if (result != null) {
        results[i++]=IpAssocAnswer.errorResult;
      }
 else {
        results[i++]=ip.getPublicIp() + " - success";
        ;
      }
    }
    return new IpAssocAnswer(cmd,results);
  }
 catch (  LibvirtException e) {
    return new IpAssocAnswer(cmd,results);
  }
catch (  InternalErrorException e) {
    return new IpAssocAnswer(cmd,results);
  }
}
