{
  String primaryPvlan=cmd.getPrimary();
  String isolatedPvlan=cmd.getIsolated();
  String op=cmd.getOp();
  String dhcpName=cmd.getDhcpName();
  String dhcpMac=cmd.getDhcpMac();
  String dhcpIp=cmd.getDhcpIp();
  String vmMac=cmd.getVmMac();
  boolean add=true;
  String opr="-A";
  if (op.equals("delete")) {
    opr="-D";
    add=false;
  }
  String result=null;
  Connect conn;
  try {
    if (cmd.getType() == PvlanSetupCommand.Type.DHCP) {
      Script script=new Script(_ovsPvlanDhcpHostPath,_timeout,s_logger);
      if (add) {
        conn=LibvirtConnection.getConnectionByVmName(dhcpName);
        List<InterfaceDef> ifaces=getInterfaces(conn,dhcpName);
        InterfaceDef guestNic=ifaces.get(0);
        script.add(opr,"-b",_guestBridgeName,"-p",primaryPvlan,"-i",isolatedPvlan,"-n",dhcpName,"-d",dhcpIp,"-m",dhcpMac,"-I",guestNic.getDevName());
      }
 else {
        script.add(opr,"-b",_guestBridgeName,"-p",primaryPvlan,"-i",isolatedPvlan,"-n",dhcpName,"-d",dhcpIp,"-m",dhcpMac);
      }
      result=script.execute();
      if (result != null) {
        s_logger.warn("Failed to program pvlan for dhcp server with mac " + dhcpMac);
        return new Answer(cmd,false,result);
      }
 else {
        s_logger.info("Programmed pvlan for dhcp server with mac " + dhcpMac);
      }
    }
 else     if (cmd.getType() == PvlanSetupCommand.Type.VM) {
      Script script=new Script(_ovsPvlanVmPath,_timeout,s_logger);
      script.add(opr,"-b",_guestBridgeName,"-p",primaryPvlan,"-i",isolatedPvlan,"-v",vmMac);
      result=script.execute();
      if (result != null) {
        s_logger.warn("Failed to program pvlan for vm with mac " + vmMac);
        return new Answer(cmd,false,result);
      }
 else {
        s_logger.info("Programmed pvlan for vm with mac " + vmMac);
      }
    }
  }
 catch (  LibvirtException e) {
    e.printStackTrace();
  }
  return new Answer(cmd,true,result);
}
