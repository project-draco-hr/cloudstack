{
  Long dcId=cmd.getDataCenterId();
  Long accountId=cmd.getAccountId();
  Long volumeId=cmd.getVolumeId();
  String secondaryStoragePoolUrl=cmd.getSecondaryStorageUrl();
  String snapshotName=cmd.getSnapshotName();
  String snapshotPath=cmd.getVolumePath();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  String vmName=cmd.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  try {
    Connect conn=LibvirtConnection.getConnection();
    secondaryStoragePool=_storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=File.separator + "snapshots" + File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    snapshotDestPath=ssPmountPath + File.separator + "snapshots"+ File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    KVMStoragePool primaryPool=_storagePoolMgr.getStoragePool(cmd.getPrimaryStoragePoolNameLabel());
    KVMPhysicalDisk snapshotDisk=primaryPool.getPhysicalDisk(cmd.getVolumePath());
    Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
    command.add("-b",snapshotDisk.getPath());
    command.add("-n",snapshotName);
    command.add("-p",snapshotDestPath);
    command.add("-t",snapshotName);
    String result=command.execute();
    if (result != null) {
      s_logger.debug("Failed to backup snaptshot: " + result);
      return new BackupSnapshotAnswer(cmd,false,result,null,true);
    }
    DomainInfo.DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=getDomain(conn,cmd.getVmName());
        state=vm.getInfo().state;
      }
 catch (      LibvirtException e) {
      }
    }
    KVMStoragePool primaryStorage=_storagePoolMgr.getStoragePool(cmd.getPool().getUuid());
    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      String vmUuid=vm.getUUIDString();
      Object[] args=new Object[]{snapshotName,vmUuid};
      String snapshot=SnapshotXML.format(args);
      s_logger.debug(snapshot);
      DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      snap.delete(0);
      vm=getDomain(conn,cmd.getVmName());
      state=vm.getInfo().state;
      if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
      command.add("-d",snapshotDisk.getPath());
      command.add("-n",snapshotName);
      result=command.execute();
      if (result != null) {
        s_logger.debug("Failed to backup snapshot: " + result);
        return new BackupSnapshotAnswer(cmd,false,"Failed to backup snapshot: " + result,null,true);
      }
    }
  }
 catch (  LibvirtException e) {
    return new BackupSnapshotAnswer(cmd,false,e.toString(),null,true);
  }
catch (  CloudRuntimeException e) {
    return new BackupSnapshotAnswer(cmd,false,e.toString(),null,true);
  }
 finally {
    if (secondaryStoragePool != null) {
      secondaryStoragePool.delete();
    }
  }
  return new BackupSnapshotAnswer(cmd,true,null,snapshotRelPath + File.separator + snapshotName,true);
}
