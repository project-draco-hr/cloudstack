{
  final String snapshotName=cmd.getSnapshotName();
  final String snapshotPath=cmd.getSnapshotPath();
  final String vmName=cmd.getVmName();
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=getDomain(conn,cmd.getVmName());
        state=vm.getInfo().state;
      }
 catch (      final LibvirtException e) {
        s_logger.trace("Ignoring libvirt error.",e);
      }
    }
    final KVMStoragePool primaryPool=_storagePoolMgr.getStoragePool(cmd.getPool().getType(),cmd.getPool().getUuid());
    final KVMPhysicalDisk disk=primaryPool.getPhysicalDisk(cmd.getVolumePath());
    if (state == DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {
      final String vmUuid=vm.getUUIDString();
      final Object[] args=new Object[]{snapshotName,vmUuid};
      final String snapshot=SnapshotXML.format(args);
      s_logger.debug(snapshot);
      if (cmd.getCommandSwitch().equalsIgnoreCase(ManageSnapshotCommand.CREATE_SNAPSHOT)) {
        vm.snapshotCreateXML(snapshot);
      }
 else {
        final DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
        snap.delete(0);
      }
      vm=getDomain(conn,cmd.getVmName());
      state=vm.getInfo().state;
      if (state == DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      if (primaryPool.getType() == StoragePoolType.RBD) {
        try {
          final Rados r=new Rados(primaryPool.getAuthUserName());
          r.confSet("mon_host",primaryPool.getSourceHost() + ":" + primaryPool.getSourcePort());
          r.confSet("key",primaryPool.getAuthSecret());
          r.confSet("client_mount_timeout","30");
          r.connect();
          s_logger.debug("Succesfully connected to Ceph cluster at " + r.confGet("mon_host"));
          final IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
          final Rbd rbd=new Rbd(io);
          final RbdImage image=rbd.open(disk.getName());
          if (cmd.getCommandSwitch().equalsIgnoreCase(ManageSnapshotCommand.CREATE_SNAPSHOT)) {
            s_logger.debug("Attempting to create RBD snapshot " + disk.getName() + "@"+ snapshotName);
            image.snapCreate(snapshotName);
          }
 else {
            s_logger.debug("Attempting to remove RBD snapshot " + disk.getName() + "@"+ snapshotName);
            image.snapRemove(snapshotName);
          }
          rbd.close(image);
          r.ioCtxDestroy(io);
        }
 catch (        final Exception e) {
          s_logger.error("A RBD snapshot operation on " + disk.getName() + " failed. The error was: "+ e.getMessage());
        }
      }
 else {
        final Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
        if (cmd.getCommandSwitch().equalsIgnoreCase(ManageSnapshotCommand.CREATE_SNAPSHOT)) {
          command.add("-c",disk.getPath());
        }
 else {
          command.add("-d",snapshotPath);
        }
        command.add("-n",snapshotName);
        final String result=command.execute();
        if (result != null) {
          s_logger.debug("Failed to manage snapshot: " + result);
          return new ManageSnapshotAnswer(cmd,false,"Failed to manage snapshot: " + result);
        }
      }
    }
    return new ManageSnapshotAnswer(cmd,cmd.getSnapshotId(),disk.getPath() + File.separator + snapshotName,true,null);
  }
 catch (  final LibvirtException e) {
    s_logger.debug("Failed to manage snapshot: " + e.toString());
    return new ManageSnapshotAnswer(cmd,false,"Failed to manage snapshot: " + e.toString());
  }
}
