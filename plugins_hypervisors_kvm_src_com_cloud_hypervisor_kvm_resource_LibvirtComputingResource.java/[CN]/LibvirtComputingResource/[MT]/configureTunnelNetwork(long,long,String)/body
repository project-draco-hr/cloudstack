{
  try {
    final boolean findResult=findOrCreateTunnelNetwork(nwName);
    if (!findResult) {
      s_logger.warn("LibvirtComputingResource.findOrCreateTunnelNetwork() failed! Cannot proceed creating the tunnel.");
      return false;
    }
    final String configuredHosts=Script.runSimpleBashScript("ovs-vsctl get bridge " + nwName + " other_config:ovs-host-setup");
    boolean configured=false;
    if (configuredHosts != null) {
      final String hostIdsStr[]=configuredHosts.split(",");
      for (      final String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      final Script cmd=new Script(_ovsTunnelPath,_timeout,s_logger);
      cmd.add("setup_ovs_bridge");
      cmd.add("--key",nwName);
      cmd.add("--cs_host_id",((Long)hostId).toString());
      cmd.add("--bridge",nwName);
      final String result=cmd.execute();
      if (result != null) {
        throw new CloudRuntimeException("Unable to pre-configure OVS bridge " + nwName + " for network ID:"+ networkId);
      }
    }
  }
 catch (  final Exception e) {
    s_logger.warn("createandConfigureTunnelNetwork failed",e);
    return false;
  }
  return true;
}
