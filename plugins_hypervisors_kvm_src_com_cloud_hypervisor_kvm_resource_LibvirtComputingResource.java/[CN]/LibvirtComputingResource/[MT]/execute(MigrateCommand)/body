{
  String vmName=cmd.getVmName();
  State state=null;
  String result=null;
synchronized (_vms) {
    state=_vms.get(vmName);
    _vms.put(vmName,State.Stopping);
  }
  List<InterfaceDef> ifaces=null;
  Domain dm=null;
  Connect dconn=null;
  Domain destDomain=null;
  Connect conn=null;
  String xmlDesc=null;
  try {
    conn=LibvirtConnection.getConnectionByVmName(cmd.getVmName());
    ifaces=getInterfaces(conn,vmName);
    dm=conn.domainLookupByName(vmName);
    xmlDesc=dm.getXMLDesc(0).replace(_privateIp,cmd.getDestinationIp());
    dconn=new Connect("qemu+tcp://" + cmd.getDestinationIp() + "/system");
    destDomain=dm.migrate(dconn,(1 << 0) | (1 << 3),xmlDesc,vmName,"tcp:" + cmd.getDestinationIp(),_migrateSpeed);
    _storagePoolMgr.disconnectPhysicalDisksViaVmSpec(cmd.getVirtualMachine());
  }
 catch (  LibvirtException e) {
    s_logger.debug("Can't migrate domain: " + e.getMessage());
    result=e.getMessage();
  }
 finally {
    try {
      if (dm != null) {
        if (dm.isPersistent() == 1) {
          dm.undefine();
        }
        dm.free();
      }
      if (dconn != null) {
        dconn.close();
      }
      if (destDomain != null) {
        destDomain.free();
      }
    }
 catch (    final LibvirtException e) {
      s_logger.trace("Ignoring libvirt error.",e);
    }
  }
  if (result != null) {
synchronized (_vms) {
      _vms.put(vmName,state);
    }
  }
 else {
    destroy_network_rules_for_vm(conn,vmName);
    for (    InterfaceDef iface : ifaces) {
      for (      VifDriver vifDriver : getAllVifDrivers()) {
        vifDriver.unplug(iface);
      }
    }
  }
  return new MigrateAnswer(cmd,result == null,result,null);
}
