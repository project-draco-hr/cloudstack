{
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  try {
    return wrapper.execute(cmd,this);
  }
 catch (  final Exception e) {
  }
  try {
    if (cmd instanceof RebootRouterCommand) {
      return execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      return execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckStateCommand) {
      return executeRequest(cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      return execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      return execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      return execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return execute((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return execute((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      return execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      return execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecurityGroupRulesCmd) {
      return execute((SecurityGroupRulesCmd)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof FenceCommand) {
      return execute((FenceCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      return execute((StartCommand)cmd);
    }
 else     if (cmd instanceof PlugNicCommand) {
      return execute((PlugNicCommand)cmd);
    }
 else     if (cmd instanceof UnPlugNicCommand) {
      return execute((UnPlugNicCommand)cmd);
    }
 else     if (cmd instanceof NetworkElementCommand) {
      return _virtRouterResource.executeRequest((NetworkElementCommand)cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesSystemVmCommand) {
      return execute((NetworkRulesSystemVmCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return execute((CleanupNetworkRulesCmd)cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      return execute((CopyVolumeCommand)cmd);
    }
 else     if (cmd instanceof ResizeVolumeCommand) {
      return execute((ResizeVolumeCommand)cmd);
    }
 else     if (cmd instanceof CheckNetworkCommand) {
      return execute((CheckNetworkCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesVmSecondaryIpCommand) {
      return execute((NetworkRulesVmSecondaryIpCommand)cmd);
    }
 else     if (cmd instanceof StorageSubSystemCommand) {
      return storageHandler.handleStorageCommands((StorageSubSystemCommand)cmd);
    }
 else     if (cmd instanceof PvlanSetupCommand) {
      return execute((PvlanSetupCommand)cmd);
    }
 else     if (cmd instanceof CheckOnHostCommand) {
      return execute((CheckOnHostCommand)cmd);
    }
 else     if (cmd instanceof OvsFetchInterfaceCommand) {
      return execute((OvsFetchInterfaceCommand)cmd);
    }
 else     if (cmd instanceof OvsSetupBridgeCommand) {
      return execute((OvsSetupBridgeCommand)cmd);
    }
 else     if (cmd instanceof OvsDestroyBridgeCommand) {
      return execute((OvsDestroyBridgeCommand)cmd);
    }
 else     if (cmd instanceof OvsCreateTunnelCommand) {
      return execute((OvsCreateTunnelCommand)cmd);
    }
 else     if (cmd instanceof OvsDestroyTunnelCommand) {
      return execute((OvsDestroyTunnelCommand)cmd);
    }
 else     if (cmd instanceof OvsVpcPhysicalTopologyConfigCommand) {
      return execute((OvsVpcPhysicalTopologyConfigCommand)cmd);
    }
 else     if (cmd instanceof OvsVpcRoutingPolicyConfigCommand) {
      return execute((OvsVpcRoutingPolicyConfigCommand)cmd);
    }
 else {
      s_logger.warn("Unsupported command ");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  final IllegalArgumentException e) {
    return new Answer(cmd,false,e.getMessage());
  }
}
