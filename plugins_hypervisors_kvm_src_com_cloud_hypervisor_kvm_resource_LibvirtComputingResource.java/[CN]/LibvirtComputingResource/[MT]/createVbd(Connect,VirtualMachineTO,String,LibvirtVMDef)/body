{
  final List<DiskTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<DiskTO>(){
    @Override public int compare(    final DiskTO arg0,    final DiskTO arg1){
      return arg0.getDiskSeq() > arg1.getDiskSeq() ? 1 : -1;
    }
  }
);
  for (  final DiskTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    final DataTO data=volume.getData();
    if (volume.getType() == Volume.Type.ISO && data.getPath() != null) {
      final NfsTO nfsStore=(NfsTO)data.getDataStore();
      final String volPath=nfsStore.getUrl() + File.separator + data.getPath();
      final int index=volPath.lastIndexOf("/");
      final String volDir=volPath.substring(0,index);
      final String volName=volPath.substring(index + 1);
      final KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      final PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
      pool=physicalDisk.getPool();
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    if (_diskActivityCheckEnabled && physicalDisk != null && physicalDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
      s_logger.debug("Checking physical disk file at path " + volPath + " for disk activity to ensure vm is not running elsewhere");
      try {
        HypervisorUtils.checkVolumeFileForActivity(volPath,_diskActivityCheckTimeoutSeconds,_diskActivityInactiveThresholdMilliseconds,_diskActivityCheckFileSizeMin);
      }
 catch (      final IOException ex) {
        throw new CloudRuntimeException("Unable to check physical disk file for activity",ex);
      }
      s_logger.debug("Disk activity check cleared");
    }
    DiskDef.DiskBus diskBusType=null;
    final Map<String,String> params=vmSpec.getDetails();
    if (params != null && params.get("rootDiskController") != null && !params.get("rootDiskController").isEmpty()) {
      final String rootDiskController=params.get("rootDiskController");
      s_logger.debug("Passed custom disk bus " + rootDiskController);
      for (      final DiskDef.DiskBus bus : DiskDef.DiskBus.values()) {
        if (bus.toString().equalsIgnoreCase(rootDiskController)) {
          s_logger.debug("Found matching enum for disk bus " + rootDiskController);
          diskBusType=bus;
          break;
        }
      }
    }
    if (diskBusType == null) {
      diskBusType=getGuestDiskModel(vmSpec.getPlatformEmulator());
    }
    final DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      final int devId=volume.getDiskSeq().intValue();
      if (pool.getType() == StoragePoolType.RBD) {
        disk.defNetworkBasedDisk(physicalDisk.getPath().replace("rbd:",""),pool.getSourceHost(),pool.getSourcePort(),pool.getAuthUserName(),pool.getUuid(),devId,diskBusType,DiskProtocol.RBD,DiskDef.DiskFmtType.RAW);
      }
 else       if (pool.getType() == StoragePoolType.Gluster) {
        final String mountpoint=pool.getLocalPath();
        final String path=physicalDisk.getPath();
        final String glusterVolume=pool.getSourceDir().replace("/","");
        disk.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""),pool.getSourceHost(),pool.getSourcePort(),null,null,devId,diskBusType,DiskProtocol.GLUSTER,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (pool.getType() == StoragePoolType.CLVM || physicalDisk.getFormat() == PhysicalDiskFormat.RAW) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO,DiskDef.DiskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.DiskFmtType.QCOW2);
        }
      }
    }
    if (data instanceof VolumeObjectTO) {
      final VolumeObjectTO volumeObjectTO=(VolumeObjectTO)data;
      if (volumeObjectTO.getBytesReadRate() != null && volumeObjectTO.getBytesReadRate() > 0) {
        disk.setBytesReadRate(volumeObjectTO.getBytesReadRate());
      }
      if (volumeObjectTO.getBytesWriteRate() != null && volumeObjectTO.getBytesWriteRate() > 0) {
        disk.setBytesWriteRate(volumeObjectTO.getBytesWriteRate());
      }
      if (volumeObjectTO.getIopsReadRate() != null && volumeObjectTO.getIopsReadRate() > 0) {
        disk.setIopsReadRate(volumeObjectTO.getIopsReadRate());
      }
      if (volumeObjectTO.getIopsWriteRate() != null && volumeObjectTO.getIopsWriteRate() > 0) {
        disk.setIopsWriteRate(volumeObjectTO.getIopsWriteRate());
      }
      if (volumeObjectTO.getCacheMode() != null) {
        disk.setCacheMode(DiskDef.DiskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString().toUpperCase()));
      }
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      final DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
  }
  if (HypervisorType.LXC.toString().toLowerCase().equals(vm.getHvsType())) {
    for (    final DiskTO volume : disks) {
      final DataTO data=volume.getData();
      final PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      if (volume.getType() == Volume.Type.ROOT) {
        final KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        final FilesystemDef rootFs=new FilesystemDef(physicalDisk.getPath(),"/");
        vm.getDevices().addDevice(rootFs);
      }
 else       if (volume.getType() == Volume.Type.DATADISK) {
        final KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        final KVMStoragePool pool=physicalDisk.getPool();
        if (StoragePoolType.RBD.equals(pool.getType())) {
          final int devId=volume.getDiskSeq().intValue();
          final String device=mapRbdDevice(physicalDisk);
          if (device != null) {
            s_logger.debug("RBD device on host is: " + device);
            final DiskDef diskdef=new DiskDef();
            diskdef.defBlockBasedDisk(device,devId,DiskDef.DiskBus.VIRTIO);
            diskdef.setQemuDriver(false);
            vm.getDevices().addDevice(diskdef);
          }
 else {
            throw new InternalErrorException("Error while mapping RBD device on host");
          }
        }
      }
    }
  }
}
