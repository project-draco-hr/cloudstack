{
  final NicTO nic=cmd.getNic();
  final String vmName=cmd.getVmName();
  Domain vm=null;
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    vm=getDomain(conn,vmName);
    final List<InterfaceDef> pluggedNics=getInterfaces(conn,vmName);
    Integer nicnum=0;
    for (    final InterfaceDef pluggedNic : pluggedNics) {
      if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {
        s_logger.debug("found existing nic for mac " + pluggedNic.getMacAddress() + " at index "+ nicnum);
        return new PlugNicAnswer(cmd,true,"success");
      }
      nicnum++;
    }
    vm.attachDevice(getVifDriver(nic.getType()).plug(nic,"Other PV","").toString());
    return new PlugNicAnswer(cmd,true,"success");
  }
 catch (  final LibvirtException e) {
    final String msg=" Plug Nic failed due to " + e.toString();
    s_logger.warn(msg,e);
    return new PlugNicAnswer(cmd,false,msg);
  }
catch (  final InternalErrorException e) {
    final String msg=" Plug Nic failed due to " + e.toString();
    s_logger.warn(msg,e);
    return new PlugNicAnswer(cmd,false,msg);
  }
 finally {
    if (vm != null) {
      try {
        vm.free();
      }
 catch (      final LibvirtException l) {
        s_logger.trace("Ignoring libvirt error.",l);
      }
    }
  }
}
