{
  Domain dm=null;
  String msg=null;
  try {
    dm=conn.domainLookupByName(vmName);
    String vmDef=dm.getXMLDesc(0);
    LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
    parser.parseDomainXML(vmDef);
    for (    InterfaceDef nic : parser.getInterfaces()) {
      if ((nic.getNetType() == guestNetType.BRIDGE) && (nic.getBrName().startsWith("cloudVirBr"))) {
        try {
          int vnetId=Integer.parseInt(nic.getBrName().replaceFirst("cloudVirBr",""));
          String pifName=getPif(_guestBridgeName);
          String newBrName="br" + pifName + "-"+ vnetId;
          vmDef=vmDef.replaceAll("'" + nic.getBrName() + "'","'" + newBrName + "'");
          s_logger.debug("VM bridge name is changed from " + nic.getBrName() + " to "+ newBrName);
        }
 catch (        NumberFormatException e) {
          continue;
        }
      }
    }
    s_logger.debug(vmDef);
    msg=stopVM(conn,vmName);
    msg=startVM(conn,vmName,vmDef);
    return null;
  }
 catch (  LibvirtException e) {
    s_logger.warn("Failed to create vm",e);
    msg=e.getMessage();
  }
catch (  InternalErrorException e) {
    s_logger.warn("Failed to create vm",e);
    msg=e.getMessage();
  }
 finally {
    try {
      if (dm != null) {
        dm.free();
      }
    }
 catch (    LibvirtException e) {
      s_logger.trace("Ignoring libvirt error.",e);
    }
  }
  return msg;
}
