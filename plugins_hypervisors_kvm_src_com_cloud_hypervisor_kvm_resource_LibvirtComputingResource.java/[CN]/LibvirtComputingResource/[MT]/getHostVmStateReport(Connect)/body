{
  final HashMap<String,HostVmStateReportEntry> vmStates=new HashMap<String,HostVmStateReportEntry>();
  String[] vms=null;
  int[] ids=null;
  try {
    ids=conn.listDomains();
  }
 catch (  final LibvirtException e) {
    s_logger.warn("Unable to listDomains",e);
    return null;
  }
  try {
    vms=conn.listDefinedDomains();
  }
 catch (  final LibvirtException e) {
    s_logger.warn("Unable to listDomains",e);
    return null;
  }
  Domain dm=null;
  for (int i=0; i < ids.length; i++) {
    try {
      dm=conn.domainLookupByID(ids[i]);
      final DomainState ps=dm.getInfo().state;
      final PowerState state=convertToPowerState(ps);
      s_logger.trace("VM " + dm.getName() + ": powerstate = "+ ps+ "; vm state="+ state.toString());
      final String vmName=dm.getName();
      if (state == PowerState.PowerOn) {
        vmStates.put(vmName,new HostVmStateReportEntry(state,conn.getHostName()));
      }
    }
 catch (    final LibvirtException e) {
      s_logger.warn("Unable to get vms",e);
    }
 finally {
      try {
        if (dm != null) {
          dm.free();
        }
      }
 catch (      final LibvirtException e) {
        s_logger.trace("Ignoring libvirt error.",e);
      }
    }
  }
  for (int i=0; i < vms.length; i++) {
    try {
      dm=conn.domainLookupByName(vms[i]);
      final DomainState ps=dm.getInfo().state;
      final PowerState state=convertToPowerState(ps);
      final String vmName=dm.getName();
      s_logger.trace("VM " + vmName + ": powerstate = "+ ps+ "; vm state="+ state.toString());
      if (state == PowerState.PowerOn) {
        vmStates.put(vmName,new HostVmStateReportEntry(state,conn.getHostName()));
      }
    }
 catch (    final LibvirtException e) {
      s_logger.warn("Unable to get vms",e);
    }
 finally {
      try {
        if (dm != null) {
          dm.free();
        }
      }
 catch (      final LibvirtException e) {
        s_logger.trace("Ignoring libvirt error.",e);
      }
    }
  }
  return vmStates;
}
