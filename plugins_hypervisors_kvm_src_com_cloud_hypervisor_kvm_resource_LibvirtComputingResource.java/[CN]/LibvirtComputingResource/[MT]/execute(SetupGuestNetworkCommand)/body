{
  Connect conn;
  NicTO nic=cmd.getNic();
  String routerIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String routerGIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP);
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String gateway=cmd.getAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY);
  String cidr=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  String domainName=cmd.getNetworkDomain();
  String dns=cmd.getDefaultDns1();
  if (dns == null || dns.isEmpty()) {
    dns=cmd.getDefaultDns2();
  }
 else {
    String dns2=cmd.getDefaultDns2();
    if (dns2 != null && !dns2.isEmpty()) {
      dns+="," + dns2;
    }
  }
  try {
    conn=LibvirtConnection.getConnectionByVmName(routerName);
    List<InterfaceDef> pluggedNics=getInterfaces(conn,routerName);
    InterfaceDef routerNic=null;
    for (    InterfaceDef pluggedNic : pluggedNics) {
      if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {
        routerNic=pluggedNic;
        break;
      }
    }
    if (routerNic == null) {
      return new SetupGuestNetworkAnswer(cmd,false,"Can not find nic with mac " + nic.getMac() + " for VM "+ routerName);
    }
    String dev="eth" + nic.getDeviceId();
    String netmask=NetUtils.getSubNet(routerGIP,nic.getNetmask());
    String result=_virtRouterResource.assignGuestNetwork(dev,routerIP,routerGIP,gateway,cidr,netmask,dns,domainName);
    if (result != null) {
      return new SetupGuestNetworkAnswer(cmd,false,"Creating guest network failed due to " + result);
    }
    return new SetupGuestNetworkAnswer(cmd,true,"success");
  }
 catch (  LibvirtException e) {
    String msg="Creating guest network failed due to " + e.toString();
    s_logger.warn(msg,e);
    return new SetupGuestNetworkAnswer(cmd,false,msg);
  }
}
