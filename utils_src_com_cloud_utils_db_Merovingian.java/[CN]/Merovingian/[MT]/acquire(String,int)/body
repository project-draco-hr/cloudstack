{
  Pair<Lock,Integer> memLock=null;
  boolean acquiredDbLock=false;
  boolean acquiredMemLock=false;
  try {
synchronized (s_memLocks) {
      memLock=s_memLocks.get(key);
      if (memLock == null) {
        Lock l=new ReentrantLock(true);
        memLock=new Pair<Lock,Integer>(l,0);
        s_memLocks.put(key,memLock);
      }
      memLock.second(memLock.second() + 1);
    }
    if (!memLock.first().tryLock(timeInSeconds,TimeUnit.SECONDS)) {
      return false;
    }
    acquiredMemLock=true;
    Ternary<Savepoint,Integer,Long> lock=_locks.get(key);
    if (lock != null) {
      lock.second(lock.second() + 1);
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Lock: Reacquiring " + key + " Count: "+ lock.second());
      }
      acquiredDbLock=true;
      return true;
    }
    long startTime=InaccurateClock.getTime();
    while ((InaccurateClock.getTime() - startTime) < (timeInSeconds * 1000)) {
      if (isLocked(key)) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
 else {
        acquiredDbLock=doAcquire(key);
        if (acquiredDbLock) {
          return true;
        }
      }
    }
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Lock: Timed out on acquiring lock " + key);
    }
    return false;
  }
 catch (  InterruptedException e) {
    s_logger.debug("Interrupted while trying to acquire " + key);
    return false;
  }
 finally {
    if (!acquiredMemLock || !acquiredDbLock) {
synchronized (s_memLocks) {
        if (memLock.second(memLock.second() - 1) <= 0) {
          s_memLocks.remove(key);
        }
      }
    }
    if (acquiredMemLock && !acquiredDbLock) {
      memLock.first().unlock();
    }
  }
}
