{
  VMInstanceVO vmVO=_vmDao.findById(vm.getId());
  ReservationContext context=new ReservationContextImpl(null,null,_accountMgr.getActiveUser(User.UID_SYSTEM),_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM));
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmVO,null,null,null,null);
  DataCenter dc=_configMgr.getZone(network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  VirtualMachineGuru<VMInstanceVO> vmGuru=getVmGuru(vmVO);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());
  VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
  Nic nic=null;
  if (broadcastUri != null) {
    nic=_nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(),vm.getId(),broadcastUri.toString());
  }
 else {
    nic=_networkModel.getNicInNetwork(vm.getId(),network.getId());
  }
  NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),_networkModel.getNetworkRate(network.getId(),vm.getId()),_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(),network));
  NicTO nicTO=toNicTO(nicProfile,vmProfile.getVirtualMachine().getHypervisorType());
  s_logger.debug("Un-plugging nic for vm " + vm + " from network "+ network);
  boolean result=vmGuru.unplugNic(network,nicTO,vmTO,context,dest);
  if (result) {
    s_logger.debug("Nic is unplugged successfully for vm " + vm + " in network "+ network);
  }
 else {
    s_logger.warn("Failed to unplug nic for the vm " + vm + " from network "+ network);
    return false;
  }
  _networkMgr.releaseNic(vmProfile,nic);
  s_logger.debug("Successfully released nic " + nic + "for vm "+ vm);
  _networkMgr.removeNic(vmProfile,nic);
  return result;
}
