{
  VirtualMachineGuru<? extends VMInstanceVO> vmGuru=_vmGurus.get(vmType);
  VMInstanceVO vm=vmGuru.findById(vmId);
  if (vm == null) {
    s_logger.debug("Unable to find a VM for " + vmId);
    return true;
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  Long hostId=vm.getHostId();
  if (hostId == null) {
    s_logger.debug("Unable to migrate because the VM doesn't have a host id: " + vm);
    return true;
  }
  Host host=_hostDao.findById(hostId);
  DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),null,null,null);
  ExcludeList excludes=new ExcludeList();
  excludes.addHost(hostId);
  DeployDestination dest=null;
  while (true) {
    try {
      dest=_dpMgr.planDeployment(profile,plan,excludes);
    }
 catch (    AffinityConflictException e2) {
      s_logger.warn("Unable to create deployment, affinity rules associted to the VM conflict",e2);
      throw new CloudRuntimeException("Unable to create deployment, affinity rules associted to the VM conflict");
    }
    if (dest != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Found destination " + dest + " for migrating to.");
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unable to find destination for migrating the vm " + profile);
      }
      throw new InsufficientServerCapacityException("Unable to find a server to migrate to.",host.getClusterId());
    }
    excludes.addHost(dest.getHost().getId());
    VMInstanceVO vmInstance=null;
    try {
      vmInstance=migrate(vm,srcHostId,dest);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.debug("Unable to migrate to unavailable " + dest);
    }
catch (    ConcurrentOperationException e) {
      s_logger.debug("Unable to migrate VM due to: " + e.getMessage());
    }
catch (    ManagementServerException e) {
      s_logger.debug("Unable to migrate VM: " + e.getMessage());
    }
catch (    VirtualMachineMigrationException e) {
      s_logger.debug("Got VirtualMachineMigrationException, Unable to migrate: " + e.getMessage());
      if (vm.getState() == State.Starting) {
        s_logger.debug("VM seems to be still Starting, we should retry migration later");
        throw e;
      }
 else {
        s_logger.debug("Unable to migrate VM, VM is not in Running or even Starting state, current state: " + vm.getState().toString());
      }
    }
    if (vmInstance != null) {
      return true;
    }
    try {
      boolean result=advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      return result;
    }
 catch (    ResourceUnavailableException e) {
      s_logger.debug("Unable to stop VM due to " + e.getMessage());
    }
catch (    ConcurrentOperationException e) {
      s_logger.debug("Unable to stop VM due to " + e.getMessage());
    }
catch (    OperationTimedoutException e) {
      s_logger.debug("Unable to stop VM due to " + e.getMessage());
    }
    return false;
  }
}
