{
  VMInstanceVO vmVO=_vmDao.findById(vm.getId());
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  ReservationContext context=new ReservationContextImpl(null,null,_accountMgr.getActiveUser(User.UID_SYSTEM),_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM));
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmVO,null,null,null,null);
  DataCenter dc=_configMgr.getZone(network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  VirtualMachineGuru<VMInstanceVO> vmGuru=getVmGuru(vmVO);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());
  VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
  if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {
    s_logger.warn("Failed to remove nic from " + vm + " in "+ network+ ", nic is default.");
    throw new CloudRuntimeException("Failed to remove nic from " + vm + " in "+ network+ ", nic is default.");
  }
  if (rulesMgr.listAssociatedRulesForGuestNic(nic).size() > 0) {
    throw new CloudRuntimeException("Failed to remove nic from " + vm + " in "+ network+ ", nic has associated Port forwarding or Load balancer or Static NAT rules.");
  }
  NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),_networkModel.getNetworkRate(network.getId(),vm.getId()),_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(),network));
  if (vm.getState() == State.Running) {
    NicTO nicTO=toNicTO(nicProfile,vmProfile.getVirtualMachine().getHypervisorType());
    s_logger.debug("Un-plugging nic " + nic + " for vm "+ vm+ " from network "+ network);
    boolean result=vmGuru.unplugNic(network,nicTO,vmTO,context,dest);
    if (result) {
      s_logger.debug("Nic is unplugged successfully for vm " + vm + " in network "+ network);
      long isDefault=(nic.isDefaultNic()) ? 1 : 0;
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),Long.toString(nic.getId()),network.getNetworkOfferingId(),null,isDefault,VirtualMachine.class.getName(),vm.getUuid());
    }
 else {
      s_logger.warn("Failed to unplug nic for the vm " + vm + " from network "+ network);
      return false;
    }
  }
 else   if (vm.getState() != State.Stopped) {
    s_logger.warn("Unable to remove vm " + vm + " from network  "+ network);
    throw new ResourceUnavailableException("Unable to remove vm " + vm + " from network, is not in the right state",DataCenter.class,vm.getDataCenterId());
  }
  _networkMgr.releaseNic(vmProfile,nic);
  s_logger.debug("Successfully released nic " + nic + "for vm "+ vm);
  _networkMgr.removeNic(vmProfile,nic);
  _nicsDao.expunge(nic.getId());
  return true;
}
