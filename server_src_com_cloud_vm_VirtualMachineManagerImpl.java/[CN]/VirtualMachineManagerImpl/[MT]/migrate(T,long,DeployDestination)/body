{
  s_logger.info("Migrating " + vm + " to "+ dest);
  long dstHostId=dest.getHost().getId();
  Host fromHost=_hostDao.findById(srcHostId);
  if (fromHost == null) {
    s_logger.info("Unable to find the host to migrate from: " + srcHostId);
    throw new CloudRuntimeException("Unable to find the host to migrate from: " + srcHostId);
  }
  if (fromHost.getClusterId().longValue() != dest.getCluster().getId()) {
    s_logger.info("Source and destination host are not in same cluster, unable to migrate to host: " + dest.getHost().getId());
    throw new CloudRuntimeException("Source and destination host are not in same cluster, unable to migrate to host: " + dest.getHost().getId());
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  long vmId=vm.getId();
  vm=vmGuru.findById(vmId);
  if (vm == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find the vm " + vm);
    }
    throw new ManagementServerException("Unable to find a virtual machine with id " + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not Running, unable to migrate the vm " + vm);
    }
    throw new VirtualMachineMigrationException("VM is not Running, unable to migrate the vm currently " + vm);
  }
  short alertType=AlertManager.ALERT_TYPE_USERVM_MIGRATE;
  if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
    alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;
  }
 else   if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
    alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;
  }
  VirtualMachineProfile<VMInstanceVO> profile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  _networkMgr.prepareNicForMigration(profile,dest);
  _storageMgr.prepareForMigration(profile,dest);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  VirtualMachineTO to=hvGuru.implement(profile);
  PrepareForMigrationCommand pfmc=new PrepareForMigrationCommand(to);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Migrating,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(dstHostId);
  work=_workDao.persist(work);
  PrepareForMigrationAnswer pfma=null;
  try {
    pfma=(PrepareForMigrationAnswer)_agentMgr.send(dstHostId,pfmc);
    if (!pfma.getResult()) {
      String msg="Unable to prepare for migration due to " + pfma.getDetails();
      pfma=null;
      throw new AgentUnavailableException(msg,dstHostId);
    }
  }
 catch (  OperationTimedoutException e1) {
    throw new AgentUnavailableException("Operation timed out",dstHostId);
  }
 finally {
    if (pfma == null) {
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
  }
  vm.setLastHostId(srcHostId);
  try {
    if (vm == null || vm.getHostId() == null || vm.getHostId() != srcHostId || !changeState(vm,Event.MigrationRequested,dstHostId,work,Step.Migrating)) {
      s_logger.info("Migration cancelled because state has changed: " + vm);
      throw new ConcurrentOperationException("Migration cancelled because state has changed: " + vm);
    }
  }
 catch (  NoTransitionException e1) {
    s_logger.info("Migration cancelled because " + e1.getMessage());
    throw new ConcurrentOperationException("Migration cancelled because " + e1.getMessage());
  }
  boolean migrated=false;
  try {
    boolean isWindows=_guestOsCategoryDao.findById(_guestOsDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase("Windows");
    MigrateCommand mc=new MigrateCommand(vm.getInstanceName(),dest.getHost().getPrivateIpAddress(),isWindows);
    try {
      MigrateAnswer ma=(MigrateAnswer)_agentMgr.send(vm.getLastHostId(),mc);
      if (!ma.getResult()) {
        s_logger.error("Unable to migrate due to " + ma.getDetails());
        return null;
      }
    }
 catch (    OperationTimedoutException e) {
      if (e.isActive()) {
        s_logger.warn("Active migration command so scheduling a restart for " + vm);
        _haMgr.scheduleRestart(vm,true);
      }
      throw new AgentUnavailableException("Operation timed out on migrating " + vm,dstHostId);
    }
    try {
      if (!changeState(vm,VirtualMachine.Event.OperationSucceeded,dstHostId,work,Step.Started)) {
        throw new ConcurrentOperationException("Unable to change the state for " + vm);
      }
    }
 catch (    NoTransitionException e1) {
      throw new ConcurrentOperationException("Unable to change state due to " + e1.getMessage());
    }
    try {
      if (!checkVmOnHost(vm,dstHostId)) {
        s_logger.error("Unable to complete migration for " + vm);
        try {
          _agentMgr.send(srcHostId,new Commands(cleanup(vm.getInstanceName())),null);
        }
 catch (        AgentUnavailableException e) {
          s_logger.error("AgentUnavailableException while cleanup on source host: " + srcHostId);
        }
        cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.AgentReportStopped,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
        return null;
      }
    }
 catch (    OperationTimedoutException e) {
    }
    migrated=true;
    return vm;
  }
  finally {
    if (!migrated) {
      s_logger.info("Migration was unsuccessful.  Cleaning up: " + vm);
      _alertMgr.sendAlert(alertType,fromHost.getDataCenterId(),fromHost.getPodId(),"Unable to migrate vm " + vm.getInstanceName() + " from host "+ fromHost.getName()+ " in zone "+ dest.getDataCenter().getName()+ " and pod "+ dest.getPod().getName(),"Migrate Command failed.  Please check logs.");
      try {
        _agentMgr.send(dstHostId,new Commands(cleanup(vm.getInstanceName())),null);
      }
 catch (      AgentUnavailableException ae) {
        s_logger.info("Looks like the destination Host is unavailable for cleanup");
      }
      try {
        stateTransitTo(vm,Event.OperationFailed,srcHostId);
      }
 catch (      NoTransitionException e) {
        s_logger.warn(e.getMessage());
      }
    }
    work.setStep(Step.Done);
    _workDao.update(work.getId(),work);
  }
}
