{
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is already stopped: " + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Stopped called on " + vm + " but the state is "+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,forced ? Event.AgentReportStopped : Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException("VM is being operated on.");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException("We cannot stop " + vm + " when it is in state "+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn("Unable to cleanup " + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException("Unable to stop the virtual machine due to " + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn("Unable to stop vm " + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn("Unable to transition the state " + vm);
          }
          return false;
        }
 else {
          s_logger.warn("Unable to actually stop " + vm + " but continue with release because it's a force stop");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + " is stopped on the host.  Proceeding to release resource held.");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug("Successfully released network resources for the vm " + vm);
  }
 catch (  Exception e) {
    s_logger.warn("Unable to release some network resources.",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug("Successfully released storage resources for the vm " + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn("Unable to release storage resources.",e);
  }
  vm.setReservationId(null);
  try {
    if (!forced)     return stateTransitTo(vm,Event.OperationSucceeded,null);
 else     return true;
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}
