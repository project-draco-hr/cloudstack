{
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is already stopped: " + vm);
    }
    return true;
  }
  if (state == State.Creating || state == State.Destroyed || state == State.Expunging || state == State.Error) {
    s_logger.debug("Stopped called on " + vm + " but the state is "+ state);
    return true;
  }
  if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
    throw new ConcurrentOperationException("VM is being operated on by someone else.");
  }
  if (vm.getHostId() == null) {
    s_logger.debug("Host id is null so we can't stop it.  How did we get into here?");
    return false;
  }
  String reservationId=vm.getReservationId();
  StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null);
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    stopped=answer.getResult();
    if (!stopped) {
      throw new CloudRuntimeException("Unable to stop the virtual machine due to " + answer.getDetails());
    }
 else {
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_STOP,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
      _usageEventDao.persist(usageEvent);
    }
  }
  finally {
    if (!stopped) {
      if (!forced) {
        stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      }
 else {
        s_logger.warn("Unable to actually stop " + vm + " but continue with release because it's a force stop");
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + " is stopped on the host.  Proceeding to release resource held.");
  }
  boolean cleanup=false;
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug("Successfully released network resources for the vm " + vm);
  }
 catch (  Exception e) {
    s_logger.warn("Unable to release some network resources.",e);
    cleanup=true;
  }
  try {
    _storageMgr.release(profile);
    s_logger.debug("Successfully released storage resources for the vm " + vm);
  }
 catch (  Exception e) {
    s_logger.warn("Unable to release storage resources.",e);
    cleanup=true;
  }
  @SuppressWarnings("unchecked") VirtualMachineGuru<T> guru=(VirtualMachineGuru<T>)_vmGurus.get(vm.getType());
  try {
    guru.finalizeStop(profile,vm.getHostId(),vm.getReservationId(),answer);
  }
 catch (  Exception e) {
    s_logger.warn("Guru " + guru.getClass() + " has trouble processing stop ");
    cleanup=true;
  }
  vm.setReservationId(null);
  stateTransitTo(vm,Event.OperationSucceeded,null);
  if (cleanup) {
    ItWorkVO work=new ItWorkVO(reservationId,_nodeId,State.Stopping,vm.getId());
    _workDao.persist(work);
  }
  return stopped;
}
