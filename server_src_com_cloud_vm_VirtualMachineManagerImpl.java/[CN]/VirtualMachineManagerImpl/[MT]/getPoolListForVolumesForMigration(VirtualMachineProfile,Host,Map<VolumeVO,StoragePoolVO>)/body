{
  List<VolumeVO> allVolumes=_volsDao.findUsableVolumesForInstance(profile.getId());
  for (  VolumeVO volume : allVolumes) {
    StoragePoolVO pool=volumeToPool.get(volume);
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
    StoragePoolVO currentPool=_storagePoolDao.findById(volume.getPoolId());
    if (pool != null) {
      if (_poolHostDao.findByPoolHost(pool.getId(),host.getId()) == null || pool.isLocal() != diskOffering.getUseLocalStorage()) {
        throw new CloudRuntimeException("Cannot migrate volume " + volume + " to storage pool "+ pool+ " while migrating vm to host "+ host+ ". Either the pool is not accessible from the "+ "host or because of the offering with which the volume is created it cannot be placed on "+ "the given pool.");
      }
 else       if (pool.getId() == currentPool.getId()) {
        volumeToPool.remove(volume);
      }
    }
 else {
      DiskProfile diskProfile=new DiskProfile(volume,diskOffering,profile.getHypervisorType());
      DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),null,null);
      ExcludeList avoid=new ExcludeList();
      boolean currentPoolAvailable=false;
      for (      StoragePoolAllocator allocator : _storagePoolAllocators) {
        List<StoragePool> poolList=allocator.allocateToPool(diskProfile,profile,plan,avoid,StoragePoolAllocator.RETURN_UPTO_ALL);
        if (poolList != null && !poolList.isEmpty()) {
          if (poolList.contains(currentPool)) {
            currentPoolAvailable=true;
          }
 else {
            volumeToPool.put(volume,_storagePoolDao.findByUuid(poolList.get(0).getUuid()));
          }
          break;
        }
      }
      if (!currentPoolAvailable && !volumeToPool.containsKey(volume)) {
        throw new CloudRuntimeException("Cannot find a storage pool which is available for volume " + volume + " while migrating virtual machine "+ profile.getVirtualMachine()+ " to host "+ host);
      }
    }
  }
  return volumeToPool;
}
