{
  VirtualMachineProfile<VMInstanceVO> profile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  Long srcHostId=vm.getHostId();
  Long oldSvcOfferingId=vm.getServiceOfferingId();
  if (srcHostId == null) {
    throw new CloudRuntimeException("Unable to scale the vm because it doesn't have a host id");
  }
  Host host=_hostDao.findById(srcHostId);
  DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),null,null,null);
  excludes.addHost(vm.getHostId());
  vm.setServiceOfferingId(newSvcOfferingId);
  DeployDestination dest=null;
  try {
    dest=_dpMgr.planDeployment(profile,plan,excludes);
  }
 catch (  AffinityConflictException e2) {
    s_logger.warn("Unable to create deployment, affinity rules associted to the VM conflict",e2);
    throw new CloudRuntimeException("Unable to create deployment, affinity rules associted to the VM conflict");
  }
  if (dest != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(" Found " + dest + " for scaling the vm to.");
    }
  }
  if (dest == null) {
    throw new InsufficientServerCapacityException("Unable to find a server to scale the vm to.",host.getClusterId());
  }
  excludes.addHost(dest.getHost().getId());
  VMInstanceVO vmInstance=null;
  try {
    vmInstance=migrateForScale(vm,srcHostId,dest,oldSvcOfferingId);
  }
 catch (  ResourceUnavailableException e) {
    s_logger.debug("Unable to migrate to unavailable " + dest);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    s_logger.debug("Unable to migrate VM due to: " + e.getMessage());
    throw e;
  }
catch (  ManagementServerException e) {
    s_logger.debug("Unable to migrate VM: " + e.getMessage());
    throw e;
  }
catch (  VirtualMachineMigrationException e) {
    s_logger.debug("Got VirtualMachineMigrationException, Unable to migrate: " + e.getMessage());
    if (vm.getState() == State.Starting) {
      s_logger.debug("VM seems to be still Starting, we should retry migration later");
      throw e;
    }
 else {
      s_logger.debug("Unable to migrate VM, VM is not in Running or even Starting state, current state: " + vm.getState().toString());
    }
  }
  if (vmInstance != null) {
    return vmInstance;
  }
 else {
    return null;
  }
}
