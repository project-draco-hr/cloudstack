{
  try {
    GlobalLock lock=GlobalLock.getInternLock("AccountCleanup");
    if (lock == null) {
      logger.debug("Couldn't get the global lock");
      return;
    }
    if (!lock.lock(30)) {
      logger.debug("Couldn't lock the db");
      return;
    }
    try {
      List<AccountVO> removedAccounts=_accountDao.findCleanupsForRemovedAccounts(null);
      logger.info("Found " + removedAccounts.size() + " removed accounts to cleanup");
      for (      AccountVO account : removedAccounts) {
        logger.debug("Cleaning up " + account.getId());
        cleanupAccount(account,getSystemUser().getId(),getSystemAccount());
      }
      List<AccountVO> disabledAccounts=_accountDao.findCleanupsForDisabledAccounts();
      logger.info("Found " + disabledAccounts.size() + " disabled accounts to cleanup");
      for (      AccountVO account : disabledAccounts) {
        logger.debug("Disabling account " + account.getId());
        try {
          disableAccount(account.getId());
        }
 catch (        Exception e) {
          logger.error("Skipping due to error on account " + account.getId(),e);
        }
      }
      List<? extends Domain> inactiveDomains=_domainMgr.findInactiveDomains();
      logger.info("Found " + inactiveDomains.size() + " inactive domains to cleanup");
      for (      Domain inactiveDomain : inactiveDomains) {
        long domainId=inactiveDomain.getId();
        try {
          List<AccountVO> accountsForCleanupInDomain=_accountDao.findCleanupsForRemovedAccounts(domainId);
          if (accountsForCleanupInDomain.isEmpty()) {
            List<DedicatedResourceVO> dedicatedResources=_dedicatedDao.listByDomainId(domainId);
            if (dedicatedResources != null && !dedicatedResources.isEmpty()) {
              logger.debug("Releasing dedicated resources for domain" + domainId);
              for (              DedicatedResourceVO dr : dedicatedResources) {
                if (!_dedicatedDao.remove(dr.getId())) {
                  logger.warn("Fail to release dedicated resources for domain " + domainId);
                }
              }
            }
            logger.debug("Removing inactive domain id=" + domainId);
            _domainMgr.removeDomain(domainId);
          }
 else {
            logger.debug("Can't remove inactive domain id=" + domainId + " as it has accounts that need cleanup");
          }
        }
 catch (        Exception e) {
          logger.error("Skipping due to error on domain " + domainId,e);
        }
      }
      List<ProjectVO> inactiveProjects=_projectDao.listByState(Project.State.Disabled);
      logger.info("Found " + inactiveProjects.size() + " disabled projects to cleanup");
      for (      ProjectVO project : inactiveProjects) {
        try {
          Account projectAccount=getAccount(project.getProjectAccountId());
          if (projectAccount == null) {
            logger.debug("Removing inactive project id=" + project.getId());
            _projectMgr.deleteProject(CallContext.current().getCallingAccount(),CallContext.current().getCallingUserId(),project);
          }
 else {
            logger.debug("Can't remove disabled project " + project + " as it has non removed account id="+ project.getId());
          }
        }
 catch (        Exception e) {
          logger.error("Skipping due to error on project " + project,e);
        }
      }
    }
 catch (    Exception e) {
      logger.error("Exception ",e);
    }
 finally {
      lock.unlock();
    }
  }
 catch (  Exception e) {
    logger.error("Exception ",e);
  }
}
