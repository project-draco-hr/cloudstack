{
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  boolean success=false;
  Account account=_accountDao.findAccount(accountName,domainId);
  if (account == null) {
    s_logger.error("Unable to find account " + accountName + " in domain "+ domainId);
    throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException("Can not modify system account");
  }
  Account adminAccount=UserContext.current().getCaller();
  if ((adminAccount != null) && (adminAccount.getType() != Account.ACCOUNT_TYPE_ADMIN) && _domainMgr.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException("Invalid account " + accountName + " in domain "+ domainId+ " given, permission denied");
  }
  Account duplicateAcccount=_accountDao.findAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getRemoved() == null && duplicateAcccount.getId() != account.getId()) {
    throw new InvalidParameterValueException("There already exists an account with the name:" + newAccountName + " in the domain:"+ domainId+ " with existing account id:"+ duplicateAcccount.getId());
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  AccountVO acctForUpdate=_accountDao.findById(account.getId());
  acctForUpdate.setAccountName(newAccountName);
  if (networkDomain != null) {
    acctForUpdate.setNetworkDomain(networkDomain);
  }
  success=_accountDao.update(account.getId(),acctForUpdate);
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException("Unable to update account " + accountName + " in domain "+ domainId);
  }
}
