{
  if (accountName == null) {
    accountName=userName;
  }
  if (domainId == null) {
    domainId=Domain.ROOT_DOMAIN;
  }
  if (StringUtils.isEmpty(userName)) {
    throw new InvalidParameterValueException("Username is empty");
  }
  if (StringUtils.isEmpty(firstName)) {
    throw new InvalidParameterValueException("Firstname is empty");
  }
  if (StringUtils.isEmpty(lastName)) {
    throw new InvalidParameterValueException("Lastname is empty");
  }
  Domain domain=_domainMgr.getDomain(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException("The domain " + domainId + " does not exist; unable to create account");
  }
  checkAccess(CallContext.current().getCallingAccount(),domain);
  if (!_userAccountDao.validateUsernameInDomain(userName,domainId)) {
    throw new InvalidParameterValueException("The user " + userName + " already exists in domain "+ domainId);
  }
  if (networkDomain != null && networkDomain.length() > 0) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  final String accountNameFinal=accountName;
  final Long domainIdFinal=domainId;
  final String accountUUIDFinal=accountUUID;
  Pair<Long,Account> pair=Transaction.execute(new TransactionCallback<Pair<Long,Account>>(){
    @Override public Pair<Long,Account> doInTransaction(    TransactionStatus status){
      String accountUUID=accountUUIDFinal;
      if (accountUUID == null) {
        accountUUID=UUID.randomUUID().toString();
      }
      AccountVO account=createAccount(accountNameFinal,accountType,domainIdFinal,networkDomain,details,accountUUID);
      long accountId=account.getId();
      UserVO user=createUser(accountId,userName,password,firstName,lastName,email,timezone,userUUID);
      if (accountType == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
        byte[] bytes=(domainIdFinal + accountNameFinal + userName+ System.currentTimeMillis()).getBytes();
        String registrationToken=UUID.nameUUIDFromBytes(bytes).toString();
        user.setRegistrationToken(registrationToken);
      }
      return new Pair<Long,Account>(user.getId(),account);
    }
  }
);
  long userId=pair.first();
  Account account=pair.second();
  if (accountType != Account.ACCOUNT_TYPE_PROJECT) {
    Map<Long,Long> accountGroupMap=new HashMap<Long,Long>();
    accountGroupMap.put(account.getId(),new Long(accountType + 1));
    _messageBus.publish(_name,MESSAGE_ADD_ACCOUNT_EVENT,PublishScope.LOCAL,accountGroupMap);
  }
  CallContext.current().putContextParameter(Account.class,account.getUuid());
  return _userAccountDao.findById(userId);
}
