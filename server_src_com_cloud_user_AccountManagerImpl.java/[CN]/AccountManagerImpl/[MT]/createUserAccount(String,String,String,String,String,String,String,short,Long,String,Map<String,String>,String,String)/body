{
  if (accountName == null) {
    accountName=userName;
  }
  if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (userName.isEmpty()) {
    throw new InvalidParameterValueException("Username is empty");
  }
  if (firstName.isEmpty()) {
    throw new InvalidParameterValueException("Firstname is empty");
  }
  if (lastName.isEmpty()) {
    throw new InvalidParameterValueException("Lastname is empty");
  }
  Domain domain=_domainMgr.getDomain(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException("The domain " + domainId + " does not exist; unable to create account");
  }
  checkAccess(CallContext.current().getCallingAccount(),domain);
  if (!_userAccountDao.validateUsernameInDomain(userName,domainId)) {
    throw new InvalidParameterValueException("The user " + userName + " already exists in domain "+ domainId);
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (accountUUID == null) {
    accountUUID=UUID.randomUUID().toString();
  }
  AccountVO account=createAccount(accountName,accountType,domainId,networkDomain,details,accountUUID);
  long accountId=account.getId();
  UserVO user=createUser(accountId,userName,password,firstName,lastName,email,timezone,userUUID);
  if (accountType == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    byte[] bytes=(domainId + accountName + userName+ System.currentTimeMillis()).getBytes();
    String registrationToken=UUID.nameUUIDFromBytes(bytes).toString();
    user.setRegistrationToken(registrationToken);
  }
  if (accountType != Account.ACCOUNT_TYPE_PROJECT) {
    AclGroupAccountMapVO grpAcct=new AclGroupAccountMapVO(accountType + 1,accountId);
    _aclGroupAccountDao.persist(grpAcct);
  }
  txn.commit();
  CallContext.current().putContextParameter(Account.class,account.getUuid());
  return _userAccountDao.findById(user.getId());
}
