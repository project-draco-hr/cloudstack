{
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException("unable to find user by id");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException("Please provide an userApiKey/userSecretKey pair");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("unable to find user by id");
  }
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException("user id : " + id + " is system account, update is not allowed");
  }
  checkAccess(UserContext.current().getCaller(),null,true,account);
  if (firstName != null) {
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    user.setLastname(lastName);
  }
  if (userName != null) {
    List<UserVO> duplicatedUsers=_userDao.findUsersByName(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException("User with name " + userName + " already exists in domain "+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    user.setPassword(password);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("updating user with id: " + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException("The api key:" + apiKey + " exists in the system for user id:"+ id+ " ,please provide a unique key");
        }
 else {
        }
      }
    }
    _userDao.update(id,user);
  }
 catch (  Throwable th) {
    s_logger.error("error updating user",th);
    throw new CloudRuntimeException("Unable to update user " + id);
  }
  return _userAccountDao.findById(id);
}
