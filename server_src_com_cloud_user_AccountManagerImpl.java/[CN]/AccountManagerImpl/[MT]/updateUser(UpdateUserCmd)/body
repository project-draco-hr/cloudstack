{
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException("unable to find user by id");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException("Please provide an api key/secret key pair");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException("user id : " + id + " is system account, update is not allowed");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("updating user with id: " + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException("The api key:" + apiKey + " exists in the system for user id:"+ id+ " ,please provide a unique key");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error("error updating user",th);
    throw new CloudRuntimeException("Unable to update user " + id);
  }
  return _userAccountDao.findById(id);
}
