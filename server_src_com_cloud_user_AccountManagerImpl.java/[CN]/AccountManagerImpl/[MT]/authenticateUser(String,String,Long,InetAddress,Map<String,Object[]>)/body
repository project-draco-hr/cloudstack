{
  UserAccount user=null;
  if (password != null && !password.isEmpty()) {
    user=getUserAccount(username,password,domainId,requestParameters);
  }
 else {
    String key=_configDao.getValue("security.singlesignon.key");
    if (key == null) {
      return null;
    }
    String singleSignOnTolerance=_configDao.getValue("security.singlesignon.tolerance.millis");
    if (singleSignOnTolerance == null) {
      return null;
    }
    long tolerance=Long.parseLong(singleSignOnTolerance);
    String signature=null;
    long timestamp=0L;
    String unsignedRequest=null;
    StringBuffer unsignedRequestBuffer=new StringBuffer();
    List<String> parameterNames=new ArrayList<String>();
    for (    Object paramNameObj : requestParameters.keySet()) {
      parameterNames.add((String)paramNameObj);
    }
    Collections.sort(parameterNames);
    try {
      for (      String paramName : parameterNames) {
        String paramValue=((String[])requestParameters.get(paramName))[0];
        if ("signature".equalsIgnoreCase(paramName)) {
          signature=paramValue;
        }
 else {
          if ("timestamp".equalsIgnoreCase(paramName)) {
            String timestampStr=paramValue;
            try {
              timestamp=Long.parseLong(timestampStr);
              long currentTime=System.currentTimeMillis();
              if (Math.abs(currentTime - timestamp) > tolerance) {
                if (logger.isDebugEnabled()) {
                  logger.debug("Expired timestamp passed in to login, current time = " + currentTime + ", timestamp = "+ timestamp);
                }
                return null;
              }
            }
 catch (            NumberFormatException nfe) {
              if (logger.isDebugEnabled()) {
                logger.debug("Invalid timestamp passed in to login: " + timestampStr);
              }
              return null;
            }
          }
          if (unsignedRequestBuffer.length() != 0) {
            unsignedRequestBuffer.append("&");
          }
          unsignedRequestBuffer.append(paramName).append("=").append(URLEncoder.encode(paramValue,"UTF-8"));
        }
      }
      if ((signature == null) || (timestamp == 0L)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Missing parameters in login request, signature = " + signature + ", timestamp = "+ timestamp);
        }
        return null;
      }
      unsignedRequest=unsignedRequestBuffer.toString().toLowerCase().replaceAll("\\+","%20");
      Mac mac=Mac.getInstance("HmacSHA1");
      SecretKeySpec keySpec=new SecretKeySpec(key.getBytes(),"HmacSHA1");
      mac.init(keySpec);
      mac.update(unsignedRequest.getBytes());
      byte[] encryptedBytes=mac.doFinal();
      String computedSignature=new String(Base64.encodeBase64(encryptedBytes));
      boolean equalSig=ConstantTimeComparator.compareStrings(signature,computedSignature);
      if (!equalSig) {
        logger.info("User signature: " + signature + " is not equaled to computed signature: "+ computedSignature);
      }
 else {
        user=_userAccountDao.getUserAccount(username,domainId);
      }
    }
 catch (    Exception ex) {
      logger.error("Exception authenticating user",ex);
      return null;
    }
  }
  if (user != null) {
    if (user.getId() == User.UID_SYSTEM) {
      logger.error("Failed to authenticate user: " + username + " in domain "+ domainId);
      return null;
    }
    if (BaremetalUtils.BAREMETAL_SYSTEM_ACCOUNT_NAME.equals(user.getUsername())) {
      logger.error("Won't authenticate user: " + username + " in domain "+ domainId);
      return null;
    }
    if (logger.isDebugEnabled()) {
      logger.debug("User: " + username + " in domain "+ domainId+ " has successfully logged in");
    }
    ActionEventUtils.onActionEvent(user.getId(),user.getAccountId(),user.getDomainId(),EventTypes.EVENT_USER_LOGIN,"user has logged in from IP Address " + loginIpAddress);
    return user;
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug("User: " + username + " in domain "+ domainId+ " has failed to log in");
    }
    return null;
  }
}
