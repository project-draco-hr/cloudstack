{
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Unable to find domain by id " + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException("Account and projectId can't be specified together");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException("could not find account " + accountName + " in domain "+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException("Unable to find project by id " + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException("Account " + caller + " can't access project id="+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    if (id == null) {
      domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    }
    if (permittedAccounts.isEmpty() && domainId == null) {
      if (isNormalUser(caller.getId())) {
        permittedAccounts.add(caller.getId());
      }
 else       if (!listAll) {
        if (id == null) {
          permittedAccounts.add(caller.getId());
        }
 else         if (!isRootAdmin(caller.getId())) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
 else       if (domainId == null) {
        if (isDomainAdmin(caller.getId())) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
    }
 else     if (domainId != null) {
      if (isNormalUser(caller.getId())) {
        permittedAccounts.add(caller.getId());
      }
    }
  }
}
