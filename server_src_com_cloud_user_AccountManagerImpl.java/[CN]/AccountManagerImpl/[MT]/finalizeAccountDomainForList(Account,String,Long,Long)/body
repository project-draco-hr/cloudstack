{
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (isAdmin(caller.getType())) {
    if (domainId == null && accountName != null) {
      throw new InvalidParameterValueException("accountName and domainId might be specified together");
    }
 else     if (domainId != null) {
      Domain domain=_domainMgr.getDomain(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException("Unable to find the domain by id=" + domainId);
      }
      checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=getActiveAccountByName(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException("Unable to find account with name " + accountName + " in domain id="+ domainId);
        }
        permittedAccounts.add(owner.getId());
      }
    }
  }
 else   if (accountName != null && domainId != null) {
    if (!accountName.equals(caller.getAccountName()) || domainId.longValue() != caller.getDomainId()) {
      throw new PermissionDeniedException("Can't list port forwarding rules for account " + accountName + " in domain "+ domainId+ ", permission denied");
    }
    permittedAccounts.add(getActiveAccountByName(accountName,domainId).getId());
  }
 else {
    permittedAccounts.add(caller.getAccountId());
  }
  if (domainId == null && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    domainId=caller.getDomainId();
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  return new Pair<List<Long>,Long>(permittedAccounts,domainId);
}
