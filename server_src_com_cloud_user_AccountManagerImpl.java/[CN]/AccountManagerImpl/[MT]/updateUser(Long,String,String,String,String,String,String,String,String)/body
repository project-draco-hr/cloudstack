{
  UserVO user=_userDao.getUser(userId);
  if (user == null) {
    throw new InvalidParameterValueException("unable to find user by id");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException("Please provide an userApiKey/userSecretKey pair");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account == null) {
    throw new InvalidParameterValueException("unable to find user account " + user.getAccountId());
  }
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("unable to find user by id");
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new PermissionDeniedException("user id : " + userId + " is system account, update is not allowed");
  }
  checkAccess(CallContext.current().getCallingAccount(),AccessType.OperateEntry,true,account);
  if (firstName != null) {
    if (firstName.isEmpty()) {
      throw new InvalidParameterValueException("Firstname is empty");
    }
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    if (lastName.isEmpty()) {
      throw new InvalidParameterValueException("Lastname is empty");
    }
    user.setLastname(lastName);
  }
  if (userName != null) {
    if (userName.isEmpty()) {
      throw new InvalidParameterValueException("Username is empty");
    }
    List<UserVO> duplicatedUsers=_userDao.findUsersByName(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException("User with name " + userName + " already exists in domain "+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    if (password.isEmpty()) {
      throw new InvalidParameterValueException("Password cannot be empty");
    }
    String encodedPassword=null;
    for (Iterator<UserAuthenticator> en=_userPasswordEncoders.iterator(); en.hasNext(); ) {
      UserAuthenticator authenticator=en.next();
      encodedPassword=authenticator.encode(password);
      if (encodedPassword != null) {
        break;
      }
    }
    if (encodedPassword == null) {
      throw new CloudRuntimeException("Failed to encode password");
    }
    user.setPassword(encodedPassword);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("updating user with id: " + userId);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != userId) {
          throw new InvalidParameterValueException("The api key:" + apiKey + " exists in the system for user id:"+ userId+ " ,please provide a unique key");
        }
 else {
        }
      }
    }
    _userDao.update(userId,user);
  }
 catch (  Throwable th) {
    s_logger.error("error updating user",th);
    throw new CloudRuntimeException("Unable to update user " + userId);
  }
  CallContext.current().putContextParameter(User.class,user.getUuid());
  return _userAccountDao.findById(userId);
}
