{
  Long accountId=null;
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  String firstName=cmd.getFirstname();
  String lastName=cmd.getLastname();
  Long domainId=cmd.getDomainId();
  String email=cmd.getEmail();
  String timezone=cmd.getTimezone();
  String accountName=cmd.getAccountName();
  short userType=cmd.getAccountType().shortValue();
  try {
    if (accountName == null) {
      accountName=username;
    }
    if (domainId == null) {
      domainId=DomainVO.ROOT_DOMAIN;
    }
    Account account=_accountDao.findActiveAccount(accountName,domainId);
    if (account != null) {
      throw new CloudRuntimeException("The specified account: " + account.getAccountName() + " already exists");
    }
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new CloudRuntimeException("The domain " + domainId + " does not exist; unable to create account");
    }
 else {
      if (domain.getState().equals(Domain.State.Inactive)) {
        throw new CloudRuntimeException("The account cannot be created as domain " + domain.getName() + " is being deleted");
      }
    }
    if (!_userAccountDao.validateUsernameInDomain(username,domainId)) {
      throw new CloudRuntimeException("The user " + username + " already exists in domain "+ domainId);
    }
    if (accountId == null) {
      if ((userType < Account.ACCOUNT_TYPE_NORMAL) || (userType > Account.ACCOUNT_TYPE_READ_ONLY_ADMIN)) {
        throw new CloudRuntimeException("Invalid account type " + userType + " given; unable to create user");
      }
      AccountVO newAccount=new AccountVO();
      if (domainId == null) {
        domainId=DomainVO.ROOT_DOMAIN;
      }
      if ((domainId != DomainVO.ROOT_DOMAIN) && (userType == Account.ACCOUNT_TYPE_ADMIN)) {
        throw new CloudRuntimeException("Invalid account type " + userType + " given for an account in domain "+ domainId+ "; unable to create user.");
      }
      newAccount.setAccountName(accountName);
      newAccount.setDomainId(domainId);
      newAccount.setType(userType);
      newAccount.setState(State.enabled);
      newAccount=_accountDao.persist(newAccount);
      accountId=newAccount.getId();
    }
    if (accountId == null) {
      throw new CloudRuntimeException("Failed to create account for user: " + username + "; unable to create user");
    }
    UserVO user=new UserVO();
    user.setUsername(username);
    user.setPassword(password);
    user.setState(State.enabled);
    user.setFirstname(firstName);
    user.setLastname(lastName);
    user.setAccountId(accountId.longValue());
    user.setEmail(email);
    user.setTimezone(timezone);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Creating user: " + username + ", account: "+ accountName+ " (id:"+ accountId+ "), domain: "+ domainId+ " timezone:"+ timezone);
    }
    UserVO dbUser=_userDao.persist(user);
    _networkGroupMgr.createDefaultSecurityGroup(accountId);
    if (!user.getPassword().equals(dbUser.getPassword())) {
      throw new CloudRuntimeException("The user " + username + " being creating is using a password that is different than what's in the db");
    }
    return _userAccountDao.findById(dbUser.getId());
  }
 catch (  Exception e) {
    if (e instanceof CloudRuntimeException) {
      s_logger.info("unable to create user: " + e);
    }
 else {
      s_logger.warn("unknown exception creating user",e);
    }
    throw new CloudRuntimeException(e.getMessage());
  }
}
