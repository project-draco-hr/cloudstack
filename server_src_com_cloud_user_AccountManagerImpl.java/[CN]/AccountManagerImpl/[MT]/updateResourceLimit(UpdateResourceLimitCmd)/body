{
  Account account=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long max=cmd.getMax();
  Integer type=cmd.getResourceType();
  Long accountId=null;
  if (max == null) {
    max=new Long(-1);
  }
 else   if (max < -1) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify either '-1' for an infinite limit, or a limit that is at least '0'.");
  }
  ResourceType resourceType;
  try {
    resourceType=ResourceType.values()[type];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid resource type.");
  }
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to update resource limit for " + ((account.getAccountName() == null) ? "" : "account " + account.getAccountName() + " in ") + "domain "+ domainId+ ", permission denied");
      }
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      domainId=DomainVO.ROOT_DOMAIN;
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      if ((domainId != null) && (accountName == null) && domainId.equals(account.getDomainId())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to update resource limit for domain " + domainId + ", permission denied");
      }
      Criteria c=new Criteria();
      c.addCriteria(Criteria.DOMAINID,DomainVO.ROOT_DOMAIN);
      c.addCriteria(Criteria.TYPE,resourceType);
      List<ResourceLimitVO> currentRootDomainLimits=searchForLimits(c);
      ResourceLimitVO currentRootDomainLimit=(currentRootDomainLimits.size() == 0) ? null : currentRootDomainLimits.get(0);
      if (currentRootDomainLimit != null) {
        long currentRootDomainMax=currentRootDomainLimits.get(0).getMax();
        if ((max == -1 && currentRootDomainMax != -1) || max > currentRootDomainMax) {
          throw new ServerApiException(BaseCmd.PARAM_ERROR,"The current ROOT domain limit for resource type " + resourceType + " is "+ currentRootDomainMax+ " and cannot be exceeded.");
        }
      }
    }
  }
 else   if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (domainId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to update resource limit, unable to determine domain in which to update limit.");
  }
 else   if (accountName != null) {
    Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
    if (userAccount == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find account by name " + account.getAccountName() + " in domain with id "+ domainId);
    }
    accountId=userAccount.getId();
  }
  if (accountId != null)   domainId=null;
  if ((domainId == null) && (accountId == null)) {
    throw new InvalidParameterValueException("Either a domainId or domainId/accountId must be passed in.");
  }
  if (accountId != null) {
    AccountVO accountHandle=_accountDao.findById(accountId);
    if (accountHandle == null) {
      throw new InvalidParameterValueException("Please specify a valid account ID.");
    }
 else     if (accountHandle.getRemoved() != null) {
      throw new InvalidParameterValueException("Please specify an active account.");
    }
 else     if (accountHandle.getType() == Account.ACCOUNT_TYPE_ADMIN || accountHandle.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException("Please specify a non-admin account.");
    }
    DomainVO domain=_domainDao.findById(accountHandle.getDomainId());
    long parentMaximum=findCorrectResourceLimit(domain,resourceType);
    if ((parentMaximum >= 0) && ((max.longValue() == -1) || (max.longValue() > parentMaximum))) {
      throw new InvalidParameterValueException("Account " + account.getAccountName() + "(id: "+ accountId+ ") has maximum allowed resource limit "+ parentMaximum+ " for "+ type+ ", please specify a value less that or equal to "+ parentMaximum);
    }
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Please specify a valid domain ID.");
    }
 else     if (domain.getRemoved() != null) {
      throw new InvalidParameterValueException("Please specify an active domain.");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimit(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException("Domain " + domain.getName() + "(id: "+ domainId+ ") has maximum allowed resource limit "+ parentMaximum+ " for "+ type+ ", please specify a value less that or equal to "+ parentMaximum);
      }
    }
  }
  if (resourceType == null) {
    throw new InvalidParameterValueException("A valid limit type must be passed in.");
  }
  Filter searchFilter=new Filter(ResourceLimitVO.class,null,false,null,null);
  SearchCriteria<ResourceLimitVO> sc=_resourceLimitDao.createSearchCriteria();
  if (domainId != null) {
    sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
  }
  if (accountId != null) {
    sc.addAnd("accountId",SearchCriteria.Op.EQ,accountId);
  }
  if (resourceType != null) {
    sc.addAnd("type",SearchCriteria.Op.EQ,resourceType);
  }
  List<ResourceLimitVO> limits=_resourceLimitDao.search(sc,searchFilter);
  if (limits.size() == 1) {
    ResourceLimitVO limit=limits.get(0);
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(domainId,accountId,resourceType,max));
  }
}
