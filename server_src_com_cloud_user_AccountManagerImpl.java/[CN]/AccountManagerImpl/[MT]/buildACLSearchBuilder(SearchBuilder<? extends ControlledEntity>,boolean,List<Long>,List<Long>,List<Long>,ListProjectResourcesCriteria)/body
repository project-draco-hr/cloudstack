{
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and("type",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and("type",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    }
    if (sb.entity() instanceof IPAddressVO) {
      sb.join("accountSearch",accountSearch,((IPAddressVO)sb.entity()).getAllocatedToAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else {
      sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  if (permittedDomains.isEmpty() && permittedAccounts.isEmpty() && permittedResources.isEmpty())   return;
  if (!permittedAccounts.isEmpty() || !permittedResources.isEmpty()) {
    if (!permittedAccounts.isEmpty()) {
      if (sb.entity() instanceof IPAddressVO) {
        sb.and().op("accountIdIn",((IPAddressVO)sb.entity()).getAllocatedToAccountId(),SearchCriteria.Op.IN);
      }
 else {
        sb.and().op("accountIdIn",sb.entity().getAccountId(),SearchCriteria.Op.IN);
      }
      if (!permittedResources.isEmpty()) {
        sb.or("idIn",((InternalIdentity)sb.entity()).getId(),SearchCriteria.Op.IN);
      }
    }
 else {
      sb.and().op("idIn",((InternalIdentity)sb.entity()).getId(),SearchCriteria.Op.IN);
    }
    if (!permittedDomains.isEmpty()) {
      if (isRecursive) {
        SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
        for (int i=0; i < permittedDomains.size(); i++) {
          domainSearch.or("path" + i,domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
        }
        if (sb.entity() instanceof IPAddressVO) {
          sb.join("domainSearch",domainSearch,((IPAddressVO)sb.entity()).getAllocatedInDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
        }
 else {
          sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
        }
      }
 else {
        if (sb.entity() instanceof IPAddressVO) {
          sb.or("domainIdIn",((IPAddressVO)sb.entity()).getAllocatedInDomainId(),SearchCriteria.Op.IN);
        }
 else {
          sb.or("domainIdIn",sb.entity().getDomainId(),SearchCriteria.Op.IN);
        }
      }
    }
    sb.cp();
  }
 else {
    if (isRecursive) {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and().op("path0",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      for (int i=1; i < permittedDomains.size(); i++) {
        domainSearch.or("path" + i,domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      }
      domainSearch.cp();
      if (sb.entity() instanceof IPAddressVO) {
        sb.join("domainSearch",domainSearch,((IPAddressVO)sb.entity()).getAllocatedInDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      }
 else {
        sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      }
    }
 else {
      if (sb.entity() instanceof IPAddressVO) {
        sb.and().op("domainIdIn",((IPAddressVO)sb.entity()).getAllocatedInDomainId(),SearchCriteria.Op.IN);
      }
 else {
        sb.and().op("domainIdIn",sb.entity().getDomainId(),SearchCriteria.Op.IN);
      }
      sb.cp();
    }
  }
}
