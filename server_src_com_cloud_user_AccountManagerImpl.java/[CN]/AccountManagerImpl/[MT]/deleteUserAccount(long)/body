{
  UserContext ctx=UserContext.current();
  long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  AccountVO account=_accountDao.findById(accountId);
  if (account.getRemoved() != null) {
    s_logger.info("The account:" + account.getAccountName() + " is already removed");
    return true;
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("The specified account does not exist in the system");
  }
  checkAccess(caller,null,true,account);
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new PermissionDeniedException("Account id : " + accountId + " is a system account, delete is not allowed");
  }
  List<Long> managedProjectIds=_projectAccountDao.listAdministratedProjects(accountId);
  if (!managedProjectIds.isEmpty()) {
    StringBuilder projectIds=new StringBuilder();
    for (    Long projectId : managedProjectIds) {
      projectIds.append(projectId + ", ");
    }
    throw new InvalidParameterValueException("The account id=" + accountId + " manages project(s) with ids "+ projectIds+ "and can't be removed");
  }
  return deleteAccount(account,callerUserId,caller);
}
