{
  boolean success=false;
  Account adminAccount=UserContext.current().getAccount();
  Long id=cmd.getId();
  User user=_userDao.findById(id);
  if (user == null) {
    throw new InvalidParameterValueException("Unable to find user by id");
  }
 else   if (user.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find user by id");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if ((account != null) && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException("user id : " + id + " is a system user, locking is not allowed");
  }
  if ((adminAccount != null) && !_domainDao.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException("Failed to lock user " + id + ", permission denied.");
  }
  if (user.getState().equals(Account.ACCOUNT_STATE_LOCKED)) {
    return _userAccountDao.findById(id);
  }
 else   if (user.getState().equals(Account.ACCOUNT_STATE_ENABLED)) {
    success=doSetUserStatus(user.getId(),Account.ACCOUNT_STATE_LOCKED);
    boolean lockAccount=true;
    List<UserVO> allUsersByAccount=_userDao.listByAccount(user.getAccountId());
    for (    UserVO oneUser : allUsersByAccount) {
      if (oneUser.getState().equals(Account.ACCOUNT_STATE_ENABLED)) {
        lockAccount=false;
        break;
      }
    }
    if (lockAccount) {
      success=(success && lockAccountInternal(user.getAccountId()));
    }
  }
 else {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Attempting to lock a non-enabled user, current state is " + user.getState() + " (userId: "+ user.getId()+ "), locking failed.");
    }
  }
  if (success) {
    return _userAccountDao.findById(id);
  }
 else {
    throw new CloudRuntimeException("Unable to lock user " + id);
  }
}
