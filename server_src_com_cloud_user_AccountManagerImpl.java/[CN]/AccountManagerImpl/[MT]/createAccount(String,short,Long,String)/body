{
  Domain domain=_domainMgr.getDomain(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException("The domain " + domainId + " does not exist; unable to create account");
  }
  if (domain.getState().equals(Domain.State.Inactive)) {
    throw new CloudRuntimeException("The account cannot be created as domain " + domain.getName() + " is being deleted");
  }
  if ((domainId != DomainVO.ROOT_DOMAIN) && (accountType == Account.ACCOUNT_TYPE_ADMIN)) {
    throw new InvalidParameterValueException("Invalid account type " + accountType + " given for an account in domain "+ domainId+ "; unable to create user.");
  }
  if (_accountDao.findActiveAccount(accountName,domainId) != null) {
    throw new InvalidParameterValueException("The specified account: " + accountName + " already exists");
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  if ((accountType < Account.ACCOUNT_TYPE_NORMAL) || (accountType > Account.ACCOUNT_TYPE_PROJECT)) {
    throw new InvalidParameterValueException("Invalid account type " + accountType + " given; unable to create user");
  }
  if (accountType == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    List<DataCenterVO> dc=_dcDao.findZonesByDomainId(domainId);
    if (dc.isEmpty()) {
      throw new InvalidParameterValueException("The account cannot be created as domain " + domain.getName() + " is not associated with any private Zone");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Account account=_accountDao.persist(new AccountVO(accountName,domainId,networkDomain,accountType));
  if (account == null) {
    throw new CloudRuntimeException("Failed to create account name " + accountName + " in domain id="+ domainId);
  }
  Long accountId=account.getId();
  _resourceCountDao.createResourceCounts(accountId,ResourceLimit.ResourceOwnerType.Account);
  _networkGroupMgr.createDefaultSecurityGroup(accountId);
  txn.commit();
  return account;
}
