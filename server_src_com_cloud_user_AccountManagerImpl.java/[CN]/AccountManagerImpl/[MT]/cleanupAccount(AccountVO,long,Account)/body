{
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<UserVO> users=_userDao.listByAccount(accountId);
    for (    UserVO user : users) {
      if (!_userDao.remove(user.getId())) {
        s_logger.error("Unable to delete user: " + user + " as a part of account "+ account+ " cleanup");
        accountCleanupNeeded=true;
      }
    }
    List<org.apache.cloudstack.region.gslb.GlobalLoadBalancerRuleVO> gslbRules=_gslbRuleDao.listByAccount(accountId);
    if (gslbRules != null && !gslbRules.isEmpty()) {
      _gslbService.revokeAllGslbRulesForAccount(caller,accountId);
    }
    _projectAccountDao.removeAccountFromProjects(accountId);
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error("Unable to delete group: " + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug("Successfully deleted snapshots directories for all volumes under account " + accountId + " across all zones");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      if (template.getRemoved() == null) {
        try {
          allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
        }
 catch (        Exception e) {
          s_logger.warn("Failed to delete template while removing account: " + template.getName() + " due to: ",e);
          allTemplatesDeleted=false;
        }
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn("Failed to delete templates while removing account id=" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Expunging # of vms (accountId=" + accountId + "): "+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error("Unable to expunge vm: " + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        try {
          this.volumeMgr.deleteVolume(volume.getId(),caller);
        }
 catch (        Exception ex) {
          s_logger.warn("Failed to cleanup volumes as a part of account id=" + accountId + " cleanup due to Exception: ",ex);
          accountCleanupNeeded=true;
        }
      }
    }
    List<RemoteAccessVpnVO> remoteAccessVpns=_remoteAccessVpnDao.findByAccount(accountId);
    List<VpnUserVO> vpnUsers=_vpnUser.listByAccount(accountId);
    for (    VpnUserVO vpnUser : vpnUsers) {
      _remoteAccessVpnMgr.removeVpnUser(accountId,vpnUser.getUsername(),caller);
    }
    try {
      for (      RemoteAccessVpnVO vpn : remoteAccessVpns) {
        _remoteAccessVpnMgr.destroyRemoteAccessVpnForIp(vpn.getServerAddressId(),caller);
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn("Failed to cleanup remote access vpn resources as a part of account id=" + accountId + " cleanup due to Exception: ",ex);
      accountCleanupNeeded=true;
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info("deleteAccount: Deleted " + numRemoved + " network groups for account "+ accountId);
    int numAGRemoved=_affinityGroupDao.removeByAccountId(accountId);
    s_logger.info("deleteAccount: Deleted " + numAGRemoved + " affinity groups for account "+ accountId);
    boolean networksDeleted=true;
    s_logger.debug("Deleting networks for account " + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        ReservationContext context=new ReservationContextImpl(null,null,getActiveUser(callerUserId),caller);
        if (!_networkMgr.destroyNetwork(network.getId(),context)) {
          s_logger.warn("Unable to destroy network " + network + " as a part of account id="+ accountId+ " cleanup.");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug("Network " + network.getId() + " successfully deleted as a part of account id="+ accountId+ " cleanup.");
        }
      }
    }
    boolean vpcsDeleted=true;
    s_logger.debug("Deleting vpcs for account " + account.getId());
    List<? extends Vpc> vpcs=_vpcMgr.getVpcsForAccount(account.getId());
    for (    Vpc vpc : vpcs) {
      if (!_vpcMgr.destroyVpc(vpc,caller,callerUserId)) {
        s_logger.warn("Unable to destroy VPC " + vpc + " as a part of account id="+ accountId+ " cleanup.");
        accountCleanupNeeded=true;
        vpcsDeleted=false;
      }
 else {
        s_logger.debug("VPC " + vpc.getId() + " successfully deleted as a part of account id="+ accountId+ " cleanup.");
      }
    }
    if (vpcsDeleted) {
      List<? extends IpAddress> ipsToRelease=_ipAddressDao.listByAccount(accountId);
      for (      IpAddress ip : ipsToRelease) {
        s_logger.debug("Releasing ip " + ip + " as a part of account id="+ accountId+ " cleanup");
        if (!_networkMgr.disassociatePublicIpAddress(ip.getId(),callerUserId,caller)) {
          s_logger.warn("Failed to release ip address " + ip + " as a part of account id="+ accountId+ " clenaup");
          accountCleanupNeeded=true;
        }
      }
    }
    s_logger.debug("Deleting site-to-site VPN customer gateways for account " + accountId);
    if (!_vpnMgr.deleteCustomerGatewayByAccount(accountId)) {
      s_logger.warn("Fail to delete site-to-site VPN customer gateways for account " + accountId);
    }
    try {
      _autoscaleMgr.cleanUpAutoScaleResources(accountId);
    }
 catch (    CloudRuntimeException ex) {
      s_logger.warn("Failed to cleanup AutoScale resources as a part of account id=" + accountId + " cleanup due to exception:",ex);
      accountCleanupNeeded=true;
    }
    if (networksDeleted) {
      if (!_configMgr.releaseAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug("Account specific Virtual IP ranges " + " are successfully released as a part of account id=" + accountId + " cleanup.");
      }
    }
    List<AccountGuestVlanMapVO> maps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByAccount(accountId);
    for (    AccountGuestVlanMapVO map : maps) {
      _dataCenterVnetDao.releaseDedicatedGuestVlans(map.getId());
    }
    int vlansReleased=_accountGuestVlanMapDao.removeByAccountId(accountId);
    s_logger.info("deleteAccount: Released " + vlansReleased + " dedicated guest vlan ranges from account "+ accountId);
    List<ResourceCountVO> resourceCounts=_resourceCountDao.listByOwnerId(accountId,ResourceOwnerType.Account);
    for (    ResourceCountVO resourceCount : resourceCounts) {
      _resourceLimitMgr.decrementResourceCount(accountId,resourceCount.getType(),resourceCount.getCount());
    }
    _resourceCountDao.removeEntriesByOwner(accountId,ResourceOwnerType.Account);
    _resourceLimitDao.removeEntriesByOwner(accountId,ResourceOwnerType.Account);
    List<? extends IpAddress> portableIpsToRelease=_ipAddressDao.listByAccount(accountId);
    for (    IpAddress ip : portableIpsToRelease) {
      s_logger.debug("Releasing portable ip " + ip + " as a part of account id="+ accountId+ " cleanup");
      _networkMgr.releasePortableIpAddress(ip.getId());
    }
    List<DedicatedResourceVO> dedicatedResources=_dedicatedDao.listByAccountId(accountId);
    if (dedicatedResources != null && !dedicatedResources.isEmpty()) {
      s_logger.debug("Releasing dedicated resources for account " + accountId);
      for (      DedicatedResourceVO dr : dedicatedResources) {
        if (!_dedicatedDao.remove(dr.getId())) {
          s_logger.warn("Fail to release dedicated resources for account " + accountId);
        }
      }
    }
    return true;
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to cleanup account " + account + " due to ",ex);
    accountCleanupNeeded=true;
    return true;
  }
 finally {
    s_logger.info("Cleanup for account " + account.getId() + (accountCleanupNeeded ? " is needed." : " is not needed."));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
 else {
      account.setNeedsCleanup(false);
      _accountDao.update(accountId,account);
    }
  }
}
