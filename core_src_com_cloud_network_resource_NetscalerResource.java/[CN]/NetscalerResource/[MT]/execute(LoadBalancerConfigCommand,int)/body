{
  try {
    if (_isSdx) {
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
    LoadBalancerTO[] loadBalancers=cmd.getLoadBalancers();
    if (loadBalancers == null) {
      return new Answer(cmd);
    }
    for (    LoadBalancerTO loadBalancer : loadBalancers) {
      String srcIp=loadBalancer.getSrcIp();
      int srcPort=loadBalancer.getSrcPort();
      String lbProtocol=getNetScalerProtocol(loadBalancer);
      String lbAlgorithm=loadBalancer.getAlgorithm();
      String nsVirtualServerName=generateNSVirtualServerName(srcIp,srcPort);
      boolean destinationsToAdd=false;
      for (      DestinationTO destination : loadBalancer.getDestinations()) {
        if (!destination.isRevoked()) {
          destinationsToAdd=true;
          break;
        }
      }
      if (!loadBalancer.isRevoked() && destinationsToAdd) {
        addLBVirtualServer(nsVirtualServerName,srcIp,srcPort,lbAlgorithm,lbProtocol,loadBalancer.getStickinessPolicies());
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Created load balancing virtual server " + nsVirtualServerName + " on the Netscaler device");
        }
        for (        DestinationTO destination : loadBalancer.getDestinations()) {
          String nsServerName=generateNSServerName(destination.getDestIp());
          String nsServiceName=generateNSServiceName(destination.getDestIp(),destination.getDestPort());
          if (!destination.isRevoked()) {
            if (!nsServerExists(nsServerName)) {
              com.citrix.netscaler.nitro.resource.config.basic.server nsServer=new com.citrix.netscaler.nitro.resource.config.basic.server();
              nsServer.set_name(nsServerName);
              nsServer.set_ipaddress(destination.getDestIp());
              apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.add(_netscalerService,nsServer);
              if ((apiCallResult.errorcode != 0) && (apiCallResult.errorcode != NitroError.NS_RESOURCE_EXISTS)) {
                throw new ExecutionException("Failed to add server " + destination.getDestIp() + " due to"+ apiCallResult.message);
              }
            }
            if (!nsServiceExists(nsServiceName)) {
              com.citrix.netscaler.nitro.resource.config.basic.service newService=new com.citrix.netscaler.nitro.resource.config.basic.service();
              newService.set_name(nsServiceName);
              newService.set_port(destination.getDestPort());
              newService.set_servername(nsServerName);
              newService.set_state("ENABLED");
              newService.set_servicetype(lbProtocol);
              apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.service.add(_netscalerService,newService);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to create service " + nsServiceName + " using server "+ nsServerName+ " due to"+ apiCallResult.message);
              }
            }
            if (!nsServiceBindingExists(nsVirtualServerName,nsServiceName)) {
              com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding svcBinding=new com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding();
              svcBinding.set_name(nsVirtualServerName);
              svcBinding.set_servicename(nsServiceName);
              apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.add(_netscalerService,svcBinding);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to bind service: " + nsServiceName + " to the lb virtual server: "+ nsVirtualServerName+ " on Netscaler device");
              }
            }
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Successfully added LB destination: " + destination.getDestIp() + ":"+ destination.getDestPort()+ " to load balancer "+ srcIp+ ":"+ srcPort);
            }
          }
 else {
            com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding[] serviceBindings=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.get(_netscalerService,nsVirtualServerName);
            if (serviceBindings != null) {
              for (              com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding binding : serviceBindings) {
                if (nsServiceName.equalsIgnoreCase(binding.get_servicename())) {
                  apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.delete(_netscalerService,binding);
                  if (apiCallResult.errorcode != 0) {
                    throw new ExecutionException("Failed to delete the binding between the virtual server: " + nsVirtualServerName + " and service:"+ nsServiceName+ " due to"+ apiCallResult.message);
                  }
                  apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.service.delete(_netscalerService,nsServiceName);
                  if (apiCallResult.errorcode != 0) {
                    throw new ExecutionException("Failed to delete service: " + nsServiceName + " due to "+ apiCallResult.message);
                  }
                  server_service_binding[] services=server_service_binding.get(_netscalerService,nsServerName);
                  if ((services == null) || (services.length == 0)) {
                    apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.delete(_netscalerService,nsServerName);
                    if (apiCallResult.errorcode != 0) {
                      throw new ExecutionException("Failed to remove server:" + nsServerName + " due to "+ apiCallResult.message);
                    }
                  }
                }
              }
            }
          }
        }
      }
 else {
        lbvserver lbserver=getVirtualServerIfExisits(nsVirtualServerName);
        if (lbserver == null) {
          throw new ExecutionException("Failed to find virtual server with name:" + nsVirtualServerName);
        }
        com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding[] serviceBindings=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.get(_netscalerService,nsVirtualServerName);
        if (serviceBindings != null) {
          for (          com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding binding : serviceBindings) {
            String serviceName=binding.get_servicename();
            apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.delete(_netscalerService,binding);
            if (apiCallResult.errorcode != 0) {
              throw new ExecutionException("Failed to unbind service from the lb virtual server: " + nsVirtualServerName + " due to "+ apiCallResult.message);
            }
            com.citrix.netscaler.nitro.resource.config.basic.service svc=com.citrix.netscaler.nitro.resource.config.basic.service.get(_netscalerService,serviceName);
            String nsServerName=svc.get_servername();
            boolean deleteService=true;
            lbvserver[] lbservers=lbvserver.get(_netscalerService);
            for (            lbvserver vserver : lbservers) {
              filtervalue[] filter=new filtervalue[1];
              filter[0]=new filtervalue("servicename",serviceName);
              lbvserver_service_binding[] result=(lbvserver_service_binding[])lbvserver_service_binding.get_filtered(_netscalerService,vserver.get_name(),filter);
              if (result != null && result.length > 0) {
                deleteService=false;
                break;
              }
            }
            if (deleteService) {
              com.citrix.netscaler.nitro.resource.config.basic.service.delete(_netscalerService,serviceName);
            }
            server_service_binding[] services=server_service_binding.get(_netscalerService,nsServerName);
            if ((services == null) || (services.length == 0)) {
              apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.delete(_netscalerService,nsServerName);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to remove server:" + nsServerName + " due to "+ apiCallResult.message);
              }
            }
          }
        }
        removeLBVirtualServer(nsVirtualServerName);
      }
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Successfully executed resource LoadBalancerConfigCommand: " + _gson.toJson(cmd));
    }
    saveConfiguration();
    return new Answer(cmd);
  }
 catch (  ExecutionException e) {
    s_logger.error("Failed to execute LoadBalancerConfigCommand due to " + e.getMessage());
    if (shouldRetry(numRetries)) {
      return retry(cmd,numRetries);
    }
 else {
      return new Answer(cmd,e);
    }
  }
catch (  Exception e) {
    s_logger.error("Failed to execute LoadBalancerConfigCommand due to " + e.getMessage());
    if (shouldRetry(numRetries)) {
      return retry(cmd,numRetries);
    }
 else {
      return new Answer(cmd,e);
    }
  }
}
