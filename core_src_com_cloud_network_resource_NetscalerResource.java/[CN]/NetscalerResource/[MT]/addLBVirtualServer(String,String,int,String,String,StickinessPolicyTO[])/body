{
  try {
    if (lbProtocol == null) {
      lbProtocol="TCP";
    }
 else     if (NetUtils.TCP_PROTO.equalsIgnoreCase(lbProtocol)) {
      lbProtocol="TCP";
    }
 else     if (NetUtils.UDP_PROTO.equalsIgnoreCase(lbProtocol)) {
      lbProtocol="UDP";
    }
 else {
      throw new ExecutionException("Got invalid protocol: " + lbProtocol + " in the  load balancer rule");
    }
    if ("roundrobin".equalsIgnoreCase(lbMethod)) {
      lbMethod="ROUNDROBIN";
    }
 else     if ("leastconn".equalsIgnoreCase(lbMethod)) {
      lbMethod="LEASTCONNECTION";
    }
 else     if ("source".equalsIgnoreCase(lbMethod)) {
      lbMethod="SOURCEIPHASH";
    }
 else {
      throw new ExecutionException("Got invalid load balancing algorithm: " + lbMethod + " in the load balancing rule");
    }
    boolean vserverExisis=false;
    lbvserver vserver=getVirtualServerIfExisits(virtualServerName);
    if (vserver == null) {
      vserver=new lbvserver();
    }
 else {
      vserverExisis=true;
    }
    vserver.set_name(virtualServerName);
    vserver.set_ipv46(srcIp);
    vserver.set_port(srcPort);
    vserver.set_servicetype(lbProtocol);
    vserver.set_lbmethod(lbMethod);
    if ((stickyPolicies != null) && (stickyPolicies.length > 0) && (stickyPolicies[0] != null)) {
      long timeout=2;
      String cookieName=null;
      StickinessPolicyTO stickinessPolicy=stickyPolicies[0];
      List<Pair<String,String>> paramsList=stickinessPolicy.getParams();
      for (      Pair<String,String> param : paramsList) {
        if ("holdtime".equalsIgnoreCase(param.first())) {
          timeout=Long.parseLong(param.second());
        }
 else         if ("name".equalsIgnoreCase(param.first())) {
          cookieName=param.second();
        }
      }
      if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
        vserver.set_persistencetype("COOKIEINSERT");
        vserver.set_servicetype("HTTP");
      }
 else       if (StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
        vserver.set_persistencetype("SOURCEIP");
      }
 else       if (StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
        vserver.set_persistencetype("RULE");
        vserver.set_rule("HTTP.REQ.HEADER(\"COOKIE\").VALUE(0).typecast_nvlist_t('=',';').value(\"" + cookieName + "\")");
        vserver.set_resrule("HTTP.RES.HEADER(\"SET-COOKIE\").VALUE(0).typecast_nvlist_t('=',';').value(\"" + cookieName + "\")");
      }
 else {
        throw new ExecutionException("Got invalid session persistence method: " + stickinessPolicy.getMethodName() + " in the load balancing rule");
      }
      vserver.set_timeout(timeout);
    }
 else {
      if (vserver.get_persistencetype() != null) {
        vserver.set_persistencetype("NONE");
      }
    }
    if (vserverExisis) {
      apiCallResult=lbvserver.update(_netscalerService,vserver);
    }
 else {
      apiCallResult=lbvserver.add(_netscalerService,vserver);
    }
    if (apiCallResult.errorcode != 0) {
      throw new ExecutionException("Failed to create new load balancing virtual server:" + virtualServerName + " due to "+ apiCallResult.message);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Created load balancing virtual server " + virtualServerName + " on the Netscaler device");
    }
  }
 catch (  nitro_exception e) {
    throw new ExecutionException("Failed to create new virtual server:" + virtualServerName + " due to "+ e.getMessage());
  }
catch (  Exception e) {
    throw new ExecutionException("Failed to create new virtual server:" + virtualServerName + " due to "+ e.getMessage());
  }
}
