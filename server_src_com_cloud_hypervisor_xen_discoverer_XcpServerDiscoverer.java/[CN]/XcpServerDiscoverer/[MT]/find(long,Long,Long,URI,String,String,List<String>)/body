{
  Map<CitrixResourceBase,Map<String,String>> resources=new HashMap<CitrixResourceBase,Map<String,String>>();
  Connection conn=null;
  if (!url.getScheme().equals("http")) {
    String msg="urlString is not http so we're not taking care of the discovery for this: " + url;
    s_logger.debug(msg);
    return null;
  }
  if (clusterId == null) {
    String msg="must specify cluster Id when add host";
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  if (podId == null) {
    String msg="must specify pod Id when add host";
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.XenServer) {
    if (s_logger.isInfoEnabled())     s_logger.info("invalid cluster id or cluster is not for XenServer hypervisors");
    return null;
  }
  try {
    List<HostVO> eHosts=_hostDao.listByCluster(clusterId);
    if (eHosts.size() > 0) {
      HostVO eHost=eHosts.get(0);
      _hostDao.loadDetails(eHost);
    }
    String hostname=url.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String hostIp=ia.getHostAddress();
    Queue<String> pass=new LinkedList<String>();
    pass.add(password);
    String masterIp=_connPool.getMasterIp(hostIp,username,pass);
    conn=_connPool.masterConnect(masterIp,username,pass);
    if (conn == null) {
      String msg="Unable to get a connection to " + url;
      s_logger.debug(msg);
      throw new DiscoveryException(msg);
    }
    Set<Pool> pools=Pool.getAll(conn);
    Pool pool=pools.iterator().next();
    Pool.Record pr=pool.getRecord(conn);
    String poolUuid=pr.uuid;
    Map<Host,Host.Record> hosts=Host.getAllRecords(conn);
    ClusterVO clu=_clusterDao.findById(clusterId);
    if (clu.getGuid() == null) {
      clu.setGuid(poolUuid);
    }
 else {
      if (!clu.getGuid().equals(poolUuid)) {
        if (hosts.size() == 1) {
          if (!addHostsToPool(conn,hostIp,clusterId)) {
            String msg="Unable to add host(" + hostIp + ") to cluster "+ clusterId;
            s_logger.warn(msg);
            throw new DiscoveryException(msg);
          }
        }
 else {
          String msg="Host (" + hostIp + ") is already in pool("+ poolUuid+ "), can to join pool("+ clu.getGuid()+ ")";
          s_logger.warn(msg);
          throw new DiscoveryException(msg);
        }
      }
    }
    if (conn != null) {
      try {
        Session.logout(conn);
      }
 catch (      Exception e) {
      }
      conn.dispose();
      conn=null;
    }
    poolUuid=clu.getGuid();
    _clusterDao.update(clusterId,clu);
    if (_checkHvm) {
      for (      Map.Entry<Host,Host.Record> entry : hosts.entrySet()) {
        Host.Record record=entry.getValue();
        boolean support_hvm=false;
        for (        String capability : record.capabilities) {
          if (capability.contains("hvm")) {
            support_hvm=true;
            break;
          }
        }
        if (!support_hvm) {
          String msg="Unable to add host " + record.address + " because it doesn't support hvm";
          _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,msg,msg);
          s_logger.debug(msg);
          throw new RuntimeException(msg);
        }
      }
    }
    for (    Map.Entry<Host,Host.Record> entry : hosts.entrySet()) {
      Host.Record record=entry.getValue();
      String hostAddr=record.address;
      String prodVersion=record.softwareVersion.get("product_version");
      String xenVersion=record.softwareVersion.get("xen");
      String hostOS=record.softwareVersion.get("product_brand");
      String hostOSVer=prodVersion;
      String hostKernelVer=record.softwareVersion.get("linux");
      if (_hostDao.findByGuid(record.uuid) != null) {
        s_logger.debug("Skipping " + record.address + " because "+ record.uuid+ " is already in the database.");
        continue;
      }
      CitrixResourceBase resource=createServerResource(dcId,podId,record);
      s_logger.info("Found host " + record.hostname + " ip="+ record.address+ " product version="+ prodVersion);
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      details.put("url",hostAddr);
      details.put("username",username);
      params.put("username",username);
      details.put("password",password);
      params.put("password",password);
      params.put("zone",Long.toString(dcId));
      params.put("guid",record.uuid);
      params.put("pod",podId.toString());
      params.put("cluster",clusterId.toString());
      params.put("pool",poolUuid);
      params.put("ipaddress",record.address);
      details.put(HostInfo.HOST_OS,hostOS);
      details.put(HostInfo.HOST_OS_VERSION,hostOSVer);
      details.put(HostInfo.HOST_OS_KERNEL_VERSION,hostKernelVer);
      details.put(HostInfo.HYPERVISOR_VERSION,xenVersion);
      if (!params.containsKey("public.network.device") && _publicNic != null) {
        params.put("public.network.device",_publicNic);
        details.put("public.network.device",_publicNic);
      }
      if (!params.containsKey("guest.network.device") && _guestNic != null) {
        params.put("guest.network.device",_guestNic);
        details.put("guest.network.device",_guestNic);
      }
      if (!params.containsKey("private.network.device") && _privateNic != null) {
        params.put("private.network.device",_privateNic);
        details.put("private.network.device",_privateNic);
      }
      if (!params.containsKey("storage.network.device1") && _storageNic1 != null) {
        params.put("storage.network.device1",_storageNic1);
        details.put("storage.network.device1",_storageNic1);
      }
      if (!params.containsKey("storage.network.device2") && _storageNic2 != null) {
        params.put("storage.network.device2",_storageNic2);
        details.put("storage.network.device2",_storageNic2);
      }
      params.put("wait",Integer.toString(_wait));
      details.put("wait",Integer.toString(_wait));
      params.put("migratewait",_configDao.getValue(Config.MigrateWait.toString()));
      params.put(Config.InstanceName.toString().toLowerCase(),_instance);
      details.put(Config.InstanceName.toString().toLowerCase(),_instance);
      try {
        resource.configure("Xen Server",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,"Unable to add " + record.address,"Error is " + e.getMessage());
        s_logger.warn("Unable to instantiate " + record.address,e);
        continue;
      }
      resource.start();
      resources.put(resource,details);
    }
  }
 catch (  SessionAuthenticationFailed e) {
    throw new DiscoveredWithErrorException("Authetication error");
  }
catch (  XenAPIException e) {
    s_logger.warn("XenAPI exception",e);
    return null;
  }
catch (  XmlRpcException e) {
    s_logger.warn("Xml Rpc Exception",e);
    return null;
  }
catch (  UnknownHostException e) {
    s_logger.warn("Unable to resolve the host name",e);
    return null;
  }
catch (  Exception e) {
    s_logger.debug("other exceptions: " + e.toString(),e);
    return null;
  }
  return resources;
}
