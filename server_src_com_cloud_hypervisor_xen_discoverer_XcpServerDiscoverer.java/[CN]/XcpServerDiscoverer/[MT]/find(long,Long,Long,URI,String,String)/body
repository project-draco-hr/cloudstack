{
  Map<CitrixResourceBase,Map<String,String>> resources=new HashMap<CitrixResourceBase,Map<String,String>>();
  Connection conn=null;
  if (!url.getScheme().equals("http")) {
    String msg="urlString is not http so we're not taking care of the discovery for this: " + url;
    s_logger.debug(msg);
    return null;
  }
  String cluster=null;
  if (clusterId == null) {
    String msg="must specify cluster Id when add host";
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
 else {
    cluster=Long.toString(clusterId);
  }
  String pod;
  if (podId == null) {
    String msg="must specify pod Id when add host";
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
 else {
    pod=Long.toString(podId);
  }
  try {
    String poolUuid=null;
    List<HostVO> eHosts=_hostDao.listByCluster(clusterId);
    if (eHosts.size() > 0) {
      HostVO eHost=eHosts.get(0);
      _hostDao.loadDetails(eHost);
      poolUuid=eHost.getDetail("pool");
    }
    String hostname=url.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String addr=ia.getHostAddress();
    conn=_connPool.masterConnect(addr,username,password);
    if (conn == null) {
      String msg="Unable to get a connection to " + url;
      s_logger.debug(msg);
      return null;
    }
    Set<Pool> pools=Pool.getAll(conn);
    Pool pool=pools.iterator().next();
    Pool.Record pr=pool.getRecord(conn);
    poolUuid=pr.uuid;
    Host master=pr.master;
    LinkedHashMap<Host,Host.Record> hosts=new LinkedHashMap<Host,Host.Record>(20);
    hosts.put(master,master.getRecord(conn));
    Map<Host,Host.Record> thosts=Host.getAllRecords(conn);
    for (    Map.Entry<Host,Host.Record> entry : thosts.entrySet()) {
      if (!master.equals(entry.getKey())) {
        hosts.put(entry.getKey(),entry.getValue());
      }
    }
    if (_checkHvm) {
      for (      Map.Entry<Host,Host.Record> entry : hosts.entrySet()) {
        Host.Record record=entry.getValue();
        boolean support_hvm=false;
        for (        String capability : record.capabilities) {
          if (capability.contains("hvm")) {
            support_hvm=true;
            break;
          }
        }
        if (!support_hvm) {
          String msg="Unable to add host " + record.address + " because it doesn't support hvm";
          _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,msg,msg);
          s_logger.debug(msg);
          throw new RuntimeException(msg);
        }
      }
    }
    for (    Map.Entry<Host,Host.Record> entry : hosts.entrySet()) {
      Host.Record record=entry.getValue();
      String hostAddr=record.address;
      String prodVersion=record.softwareVersion.get("product_version");
      String xenVersion=record.softwareVersion.get("xen");
      String hostOS=record.softwareVersion.get("product_brand");
      String hostOSVer=prodVersion;
      String hostKernelVer=record.softwareVersion.get("linux");
      if (_hostDao.findByGuid(record.uuid) != null) {
        s_logger.debug("Skipping " + record.address + " because "+ record.uuid+ " is already in the database.");
        continue;
      }
      CitrixResourceBase resource=createServerResource(dcId,podId,record);
      s_logger.info("Found host " + record.hostname + " ip="+ record.address+ " product version="+ prodVersion);
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      details.put("url",hostAddr);
      params.put("url",hostAddr);
      details.put("pool",poolUuid);
      params.put("pool",poolUuid);
      details.put("username",username);
      params.put("username",username);
      details.put("password",password);
      params.put("password",password);
      params.put("zone",Long.toString(dcId));
      params.put("guid",record.uuid);
      params.put("pod",pod);
      params.put("cluster",cluster);
      if (_increase != null) {
        params.put(Config.XenPreallocatedLunSizeRange.name(),_increase);
      }
      details.put(HostInfo.HOST_OS,hostOS);
      details.put(HostInfo.HOST_OS_VERSION,hostOSVer);
      details.put(HostInfo.HOST_OS_KERNEL_VERSION,hostKernelVer);
      details.put(HostInfo.HYPERVISOR_VERSION,xenVersion);
      if (!params.containsKey("public.network.device") && _publicNic != null) {
        params.put("public.network.device",_publicNic);
        details.put("public.network.device",_publicNic);
      }
      if (!params.containsKey("guest.network.device") && _guestNic != null) {
        params.put("guest.network.device",_guestNic);
        details.put("guest.network.device",_guestNic);
      }
      if (!params.containsKey("private.network.device") && _privateNic != null) {
        params.put("private.network.device",_privateNic);
        details.put("private.network.device",_privateNic);
      }
      if (!params.containsKey("storage.network.device1") && _storageNic1 != null) {
        params.put("storage.network.device1",_storageNic1);
        details.put("storage.network.device1",_storageNic1);
      }
      if (!params.containsKey("storage.network.device2") && _storageNic2 != null) {
        params.put("storage.network.device2",_storageNic2);
        details.put("storage.network.device2",_storageNic2);
      }
      params.put(Config.Wait.toString().toLowerCase(),Integer.toString(_wait));
      details.put(Config.Wait.toString().toLowerCase(),Integer.toString(_wait));
      try {
        resource.configure("Xen Server",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,"Unable to add " + record.address,"Error is " + e.getMessage());
        s_logger.warn("Unable to instantiate " + record.address,e);
        continue;
      }
      resource.start();
      resources.put(resource,details);
    }
    if (!addHostsToPool(url,conn,dcId,podId,clusterId,resources)) {
      return null;
    }
    ClusterVO clu=_clusterDao.findById(clusterId);
    clu.setHypervisorType(HypervisorType.XenServer.toString());
    _clusterDao.update(clusterId,clu);
  }
 catch (  SessionAuthenticationFailed e) {
    s_logger.warn("Authentication error",e);
    return null;
  }
catch (  XenAPIException e) {
    s_logger.warn("XenAPI exception",e);
    return null;
  }
catch (  XmlRpcException e) {
    s_logger.warn("Xml Rpc Exception",e);
    return null;
  }
catch (  UnknownHostException e) {
    s_logger.warn("Unable to resolve the host name",e);
    return null;
  }
catch (  Exception e) {
    s_logger.debug("other exceptions: " + e.toString(),e);
    return null;
  }
 finally {
    if (conn != null) {
      try {
        Session.logout(conn);
      }
 catch (      Exception e) {
      }
      conn.dispose();
    }
  }
  return resources;
}
