{
  if (resources.size() == 0) {
    return false;
  }
  if (clusterId == null) {
    if (resources.size() > 1) {
      s_logger.warn("There's no cluster specified but we found a pool of xenservers " + resources.size());
      throw new DiscoveryException("There's no cluster specified but we found a pool of xenservers " + resources.size());
    }
 else     if (resources.size() == 1) {
      s_logger.debug("No cluster specified and we found only one host so no pool");
      return true;
    }
  }
  List<HostVO> hosts;
  String poolLabel;
  String poolDescription;
  if (clusterId != null) {
    hosts=_hostDao.listByCluster(clusterId);
    ClusterVO cluster=_clusterDao.findById(clusterId);
    poolLabel="cluster-" + clusterId;
    poolDescription=cluster.getName();
  }
 else   if (podId != null) {
    hosts=_hostDao.listByHostPod(podId);
    poolLabel="pod-" + podId;
    poolDescription="Auto-Created Pool from Pod";
  }
 else {
    hosts=new ArrayList<HostVO>();
    poolLabel="cluster-self-created";
    poolDescription="Auto-Created Pool";
  }
  if (hosts.size() == 0) {
    Set<Pool> pools=Pool.getAll(conn);
    Pool pool=pools.iterator().next();
    pool.setNameLabel(conn,poolLabel);
    pool.setNameDescription(conn,poolDescription);
    return true;
  }
  String poolUuid1=null;
  String poolMaster=null;
  String username=null;
  String password=null;
  String address=null;
  for (  HostVO host : hosts) {
    _hostDao.loadDetails(host);
    username=host.getDetail("username");
    password=host.getDetail("password");
    address=host.getDetail("url");
    Connection hostConn=_connPool.slaveConnect(address,username,password);
    if (hostConn == null) {
      continue;
    }
    try {
      Set<Pool> pools=Pool.getAll(hostConn);
      Pool pool=pools.iterator().next();
      poolUuid1=pool.getUuid(hostConn);
      poolMaster=pool.getMaster(hostConn).getAddress(hostConn);
      break;
    }
 catch (    Exception e) {
      s_logger.warn("Can not get master ip address from host " + address);
    }
 finally {
      try {
        Session.localLogout(hostConn);
      }
 catch (      Exception e) {
      }
      hostConn.dispose();
      hostConn=null;
      poolMaster=null;
      poolUuid1=null;
    }
  }
  if (poolMaster == null) {
    s_logger.warn("Unable to reach the pool master of the existing cluster");
    throw new DiscoveryException("Unable to reach the pool master of the existing cluster");
  }
  Set<Pool> pools=Pool.getAll(conn);
  Pool pool=pools.iterator().next();
  String poolUuid2=pool.getUuid(conn);
  if (resources.size() > 1 && !poolUuid1.equals(poolUuid2)) {
    s_logger.debug("Can't add a pool of servers into an existing pool");
    throw new DiscoveryException("Can't add a pool of servers into an existing pool");
  }
  if (poolUuid1.equals(poolUuid2)) {
    s_logger.debug("The hosts that are discovered are already in the same pool as existing hosts");
    return true;
  }
  CitrixResourceBase resource=resources.keySet().iterator().next();
  if (!resource.joinPool(poolMaster,username,password)) {
    s_logger.warn("Unable to join the pool");
    throw new DiscoveryException("Unable to join the pool");
  }
  return true;
}
