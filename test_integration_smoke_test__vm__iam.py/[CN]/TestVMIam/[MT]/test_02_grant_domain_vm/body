@attr(tags=['devcloud', 'advanced', 'advancedns', 'smoke', 'basic', 'sg'])
def test_02_grant_domain_vm(self):
    self.debug(('Granting Domain %s VM read only access to account: %s' % (self.domain_2.name, self.account_1B.name)))
    self.srv_desk_grp.addAccount(self.apiclient, [self.account_1B])
    domain_permission = {}
    domain_permission['action'] = 'listVirtualMachines'
    domain_permission['entitytype'] = 'VirtualMachine'
    domain_permission['scope'] = 'DOMAIN'
    domain_permission['scopeid'] = self.domain_2.id
    self.vm_read_policy.addPermission(self.apiclient, domain_permission)
    self.debug(('Listing VM for account: %s' % self.account_1B.name))
    self.apiclient.connection.apiKey = self.user_1B_apikey
    self.apiclient.connection.securityKey = self.user_1B_secretkey
    list_vm_response = list_virtual_machines(self.apiclient)
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    self.assertEqual(len(list_vm_response), 2, 'Check VM available in List Virtual Machines')
    list_vm_names = [list_vm_response[0].name, list_vm_response[1].name]
    self.assertEqual((self.virtual_machine_1B.name in list_vm_names), True, 'Accessible Virtual Machine names do not match')
    self.assertEqual((self.virtual_machine_2A.name in list_vm_names), True, 'Accessible Virtual Machine names do not match')
    return
