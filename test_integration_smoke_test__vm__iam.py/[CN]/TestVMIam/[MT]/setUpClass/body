@classmethod
def setUpClass(self):
    self.apiclient = super(TestVMIam, self).getClsTestClient().getApiClient()
    self.services = Services().services
    self.default_apikey = self.apiclient.connection.apiKey
    self.default_secretkey = self.apiclient.connection.securityKey
    self.domain_1 = Domain.create(self.apiclient, self.services['domain1'])
    self.domain_2 = Domain.create(self.apiclient, self.services['domain2'])
    self.account_1A = Account.create(self.apiclient, self.services['account1A'], admin=False, domainid=self.domain_1.id)
    self.account_1B = Account.create(self.apiclient, self.services['account1B'], admin=False, domainid=self.domain_1.id)
    self.account_2A = Account.create(self.apiclient, self.services['account2A'], admin=False, domainid=self.domain_2.id)
    self.user_1A = User.list(self.apiclient, account=self.account_1A.name, domainid=self.account_1A.domainid)[0]
    user_1A_key = User.registerUserKeys(self.apiclient, self.user_1A.id)
    self.user_1A_apikey = user_1A_key.apikey
    self.user_1A_secretkey = user_1A_key.secretkey
    self.user_1B = User.list(self.apiclient, account=self.account_1B.name, domainid=self.account_1B.domainid)[0]
    user_1B_key = User.registerUserKeys(self.apiclient, self.user_1B.id)
    self.user_1B_apikey = user_1B_key.apikey
    self.user_1B_secretkey = user_1B_key.secretkey
    self.user_2A = User.list(self.apiclient, account=self.account_2A.name, domainid=self.account_2A.domainid)[0]
    user_2A_key = User.registerUserKeys(self.apiclient, self.user_2A.id)
    self.user_2A_apikey = user_2A_key.apikey
    self.user_2A_secretkey = user_2A_key.secretkey
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering']['small'])
    self.zone = get_zone(self.apiclient, self.services)
    self.services['mode'] = self.zone.networktype
    self.template = get_template(self.apiclient, self.zone.id, self.services['ostype'])
    self.virtual_machine_1A = VirtualMachine.create(self.apiclient, self.services['virtual_machine1A'], accountid=self.account_1A.name, zoneid=self.zone.id, domainid=self.account_1A.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    self.virtual_machine_1B = VirtualMachine.create(self.apiclient, self.services['virtual_machine1B'], accountid=self.account_1B.name, zoneid=self.zone.id, domainid=self.account_1B.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    self.virtual_machine_2A = VirtualMachine.create(self.apiclient, self.services['virtual_machine2A'], accountid=self.account_2A.name, zoneid=self.zone.id, domainid=self.account_2A.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    self.srv_desk_grp = IAMGroup.create(self.apiclient, self.services['service_desk_iam_grp'])
    self.vm_read_policy = IAMPolicy.create(self.apiclient, self.services['vm_readonly_iam_policy'])
    vm_grant_policy_params = {}
    vm_grant_policy_params['name'] = ('policyGrantVirtualMachine' + self.virtual_machine_1A.id)
    vm_grant_policy_params['description'] = ('Policy to grant permission to VirtualMachine ' + self.virtual_machine_1A.id)
    self.vm_grant_policy = IAMPolicy.create(self.apiclient, vm_grant_policy_params)
    self._cleanup = [self.account_1A, self.account_1B, self.domain_1, self.account_2A, self.domain_2, self.service_offering, self.vm_read_policy, self.srv_desk_grp, self.vm_grant_policy]
