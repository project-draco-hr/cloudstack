def configure_ovs_bridge_for_routing_policies(bridge, json_config, sequence_no):
    vpconfig = jsonLoader(json.loads(json_config)).vpc
    if (vpconfig is None):
        logging.debug("WARNING: Can't find VPC routing policies info in json config file")
        return 'FAILURE:IMPROPER_JSON_CONFG_FILE'
    try:
        if (not os.path.exists('/var/run/cloud')):
            os.makedirs('/var/run/cloud')
        ofspec_filename = ((('/var/run/cloud/' + bridge) + sequence_no) + '.ofspec')
        ofspec = open(ofspec_filename, 'w')
        egress_rules_added = False
        ingress_rules_added = False
        tiers = vpconfig.tiers
        for tier in tiers:
            tier_cidr = tier.cidr
            acl = get_acl(vpconfig, tier.aclid)
            acl_items = acl.aclitems
            for acl_item in acl_items:
                number = acl_item.number
                action = acl_item.action
                direction = acl_item.direction
                source_port_start = acl_item.sourceportstart
                source_port_end = acl_item.sourceportend
                protocol = acl_item.protocol
                source_cidrs = acl_item.sourcecidrs
                acl_priority = (1000 + number)
                if (direction == 'ingress'):
                    matching_table = INGRESS_ACL_TABLE
                    resubmit_table = L2_LOOKUP_TABLE
                elif (direction == 'egress'):
                    matching_table = EGRESS_ACL_TABLE
                    resubmit_table = L3_LOOKUP_TABLE
                for source_cidr in source_cidrs:
                    ingress_rules_added = True
                    if ((source_port_start is None) and (source_port_end is None)):
                        if source_cidr.startswith('0.0.0.0'):
                            if (action == 'deny'):
                                ofspec.write(((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + " actions='drop'") + '\n'))
                            if (action == 'allow'):
                                ofspec.write(((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + (" actions='resubmit(,%s)'" % resubmit_table)) + '\n'))
                        else:
                            if (action == 'deny'):
                                ofspec.write((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' nw_src=%s ' % source_cidr)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + " actions='drop'") + '\n'))
                            if (action == 'allow'):
                                ofspec.write((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' nw_src=%s ' % source_cidr)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + (" actions='resubmit(,%s)'" % resubmit_table)) + '\n'))
                        continue
                    port = source_port_start
                    while (port < source_port_end):
                        if source_cidr.startswith('0.0.0.0'):
                            if (action == 'deny'):
                                ofspec.write((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' tp_dst=%s ' % port)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + " actions='drop'") + '\n'))
                            if (action == 'allow'):
                                ofspec.write((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' tp_dst=%s ' % port)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + (" actions='resubmit(,%s)'" % resubmit_table)) + '\n'))
                        else:
                            if (action == 'deny'):
                                ofspec.write(((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' tp_dst=%s ' % port)) + (' nw_src=%s ' % source_cidr)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + " actions='drop'") + '\n'))
                            if (action == 'allow'):
                                ofspec.write(((((((((' table=%s ' % matching_table) + (' priority=%s ' % acl_priority)) + (' tp_dst=%s ' % port)) + (' nw_src=%s ' % source_cidr)) + (' nw_dst=%s ' % tier_cidr)) + (' nw_proto=%s ' % protocol)) + (" actions='resubmit(,%s)'" % resubmit_table)) + '\n'))
                        port = (port + 1)
        ofspec.write((((' table=%s ' % EGRESS_ACL_TABLE) + (" priority=0 actions='resubmit(,%s)')" % L3_LOOKUP_TABLE)) + '\n'))
        ofspec.write((((' table=%s ' % INGRESS_ACL_TABLE) + " priority=0 actions='drop'") + '\n'))
        del_flows(bridge, table=EGRESS_ACL_TABLE)
        del_flows(bridge, table=INGRESS_ACL_TABLE)
        do_cmd([OFCTL_PATH, 'add-flows', bridge, ofspec_filename])
        ofspec.close()
        return 'SUCCESS: successfully configured bridge as per the latest routing policies of the VPC'
    except:
        logging.debug("An unexpected error occurred while configuring bridge as per VPC's routing policies.")
        ofspec.close()
        os.remove(ofspec_filename)
        raise
    else:
        ofspec.close()
        os.remove(ofspec_filename)
