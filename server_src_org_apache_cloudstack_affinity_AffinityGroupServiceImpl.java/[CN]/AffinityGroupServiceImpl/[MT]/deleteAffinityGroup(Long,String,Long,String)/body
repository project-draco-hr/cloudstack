{
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.finalizeOwner(caller,account,domainId,null);
  AffinityGroupVO group=null;
  if (affinityGroupId != null) {
    group=_affinityGroupDao.findById(affinityGroupId);
    if (group == null) {
      throw new InvalidParameterValueException("Unable to find affinity group: " + affinityGroupId + "; failed to delete group.");
    }
  }
 else   if (affinityGroupName != null) {
    group=_affinityGroupDao.findByAccountAndName(owner.getAccountId(),affinityGroupName);
    if (group == null) {
      throw new InvalidParameterValueException("Unable to find affinity group: " + affinityGroupName + "; failed to delete group.");
    }
  }
 else {
    throw new InvalidParameterValueException("Either the affinity group Id or group name must be specified to delete the group");
  }
  if (affinityGroupId == null) {
    affinityGroupId=group.getId();
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,group);
  final Long affinityGroupIdFinal=affinityGroupId;
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      AffinityGroupVO group=_affinityGroupDao.lockRow(affinityGroupIdFinal,true);
      if (group == null) {
        throw new InvalidParameterValueException("Unable to find affinity group by id " + affinityGroupIdFinal);
      }
      List<AffinityGroupVMMapVO> affinityGroupVmMap=_affinityGroupVMMapDao.listByAffinityGroup(affinityGroupIdFinal);
      if (!affinityGroupVmMap.isEmpty()) {
        SearchBuilder<AffinityGroupVMMapVO> listByAffinityGroup=_affinityGroupVMMapDao.createSearchBuilder();
        listByAffinityGroup.and("affinityGroupId",listByAffinityGroup.entity().getAffinityGroupId(),SearchCriteria.Op.EQ);
        listByAffinityGroup.done();
        SearchCriteria<AffinityGroupVMMapVO> sc=listByAffinityGroup.create();
        sc.setParameters("affinityGroupId",affinityGroupIdFinal);
        _affinityGroupVMMapDao.lockRows(sc,null,true);
        _affinityGroupVMMapDao.remove(sc);
      }
      AffinityGroupProcessor processor=getAffinityGroupProcessorForType(group.getType());
      if (processor != null) {
        processor.handleDeleteGroup(group);
      }
      if (_affinityGroupDao.expunge(affinityGroupIdFinal)) {
        AffinityGroupDomainMapVO groupDomain=_affinityGroupDomainMapDao.findByAffinityGroup(affinityGroupIdFinal);
        if (groupDomain != null) {
          _affinityGroupDomainMapDao.remove(groupDomain.getId());
        }
        Pair<AclEntityType,Long> params=new Pair<AclEntityType,Long>(AclEntityType.AffinityGroup,affinityGroupIdFinal);
        _messageBus.publish(_name,EntityManager.MESSAGE_REMOVE_ENTITY_EVENT,PublishScope.LOCAL,params);
      }
    }
  }
);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Deleted affinity group id=" + affinityGroupId);
  }
  return true;
}
