{
  UserVmVO vmInstance=_userVmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  if (!vmInstance.getState().equals(State.Stopped)) {
    s_logger.warn("Unable to update affinity groups of the virtual machine " + vmInstance.toString() + " in state "+ vmInstance.getState());
    throw new InvalidParameterValueException("Unable update affinity groups of the virtual machine " + vmInstance.toString() + " "+ "in state "+ vmInstance.getState()+ "; make sure the virtual machine is stopped and not in an error state before updating.");
  }
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.getAccount(vmInstance.getAccountId());
  for (  Long affinityGroupId : affinityGroupIds) {
    AffinityGroupVO ag=_affinityGroupDao.findById(affinityGroupId);
    if (ag == null) {
      throw new InvalidParameterValueException("Unable to find affinity group by id " + affinityGroupId);
    }
 else {
      _accountMgr.checkAccess(caller,null,true,owner,ag);
      if (caller.getId() == Account.ACCOUNT_ID_SYSTEM || _accountMgr.isRootAdmin(caller.getType())) {
        if (ag.getAccountId() != owner.getAccountId()) {
          throw new PermissionDeniedException("Affinity Group " + ag + " does not belong to the VM's account");
        }
      }
    }
  }
  _affinityGroupVMMapDao.updateMap(vmId,affinityGroupIds);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Updated VM :" + vmId + " affinity groups to ="+ affinityGroupIds);
  }
  return vmInstance;
}
