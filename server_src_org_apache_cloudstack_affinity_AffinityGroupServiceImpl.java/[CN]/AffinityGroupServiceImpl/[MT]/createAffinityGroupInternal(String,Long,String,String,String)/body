{
  Account caller=CallContext.current().getCallingAccount();
  Map<String,AffinityGroupProcessor> typeProcessorMap=getAffinityTypeToProcessorMap();
  if (typeProcessorMap != null && !typeProcessorMap.isEmpty()) {
    if (!typeProcessorMap.containsKey(affinityGroupType)) {
      throw new InvalidParameterValueException("Unable to create affinity group, invalid affinity group type" + affinityGroupType);
    }
  }
 else {
    throw new InvalidParameterValueException("Unable to create affinity group, no Affinity Group Types configured");
  }
  final AffinityGroupProcessor processor=typeProcessorMap.get(affinityGroupType);
  if (processor.isAdminControlledGroup() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException("Cannot create the affinity group");
  }
  ControlledEntity.ACLType aclType=null;
  Account owner=null;
  boolean domainLevel=false;
  if (account != null && domainId != null) {
    owner=_accountMgr.finalizeOwner(caller,account,domainId,null);
    aclType=ControlledEntity.ACLType.Account;
  }
 else   if (domainId != null && account == null) {
    if (!_accountMgr.isRootAdmin(caller.getId())) {
      throw new InvalidParameterValueException("Unable to create affinity group, account name must be passed with the domainId");
    }
 else     if (!processor.canBeSharedDomainWide()) {
      throw new InvalidParameterValueException("Unable to create affinity group, account name is needed");
    }
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Unable to find domain by specified id");
    }
    _accountMgr.checkAccess(caller,domain);
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
    aclType=ControlledEntity.ACLType.Domain;
    domainLevel=true;
  }
 else {
    owner=caller;
    aclType=ControlledEntity.ACLType.Account;
  }
  if (_affinityGroupDao.isNameInUse(owner.getAccountId(),owner.getDomainId(),affinityGroupName)) {
    throw new InvalidParameterValueException("Unable to create affinity group, a group with name " + affinityGroupName + " already exisits.");
  }
  if (domainLevel && _affinityGroupDao.findDomainLevelGroupByName(domainId,affinityGroupName) != null) {
    throw new InvalidParameterValueException("Unable to create affinity group, a group with name " + affinityGroupName + " already exisits under the domain.");
  }
  final Account ownerFinal=owner;
  final ControlledEntity.ACLType aclTypeFinal=aclType;
  AffinityGroupVO group=Transaction.execute(new TransactionCallback<AffinityGroupVO>(){
    @Override public AffinityGroupVO doInTransaction(    TransactionStatus status){
      AffinityGroupVO group=new AffinityGroupVO(affinityGroupName,affinityGroupType,description,ownerFinal.getDomainId(),ownerFinal.getId(),aclTypeFinal);
      _affinityGroupDao.persist(group);
      if (domainId != null && aclTypeFinal == ACLType.Domain) {
        boolean subDomainAccess=false;
        subDomainAccess=processor.subDomainAccess();
        AffinityGroupDomainMapVO domainMap=new AffinityGroupDomainMapVO(group.getId(),domainId,subDomainAccess);
        _affinityGroupDomainMapDao.persist(domainMap);
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ApiConstants.ENTITY_TYPE,AffinityGroup.class);
        params.put(ApiConstants.ENTITY_ID,group.getId());
        params.put(ApiConstants.DOMAIN_ID,domainId);
        params.put(ApiConstants.SUBDOMAIN_ACCESS,subDomainAccess);
        _messageBus.publish(_name,EntityManager.MESSAGE_ADD_DOMAIN_WIDE_ENTITY_EVENT,PublishScope.LOCAL,params);
      }
      return group;
    }
  }
);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Created affinity group =" + affinityGroupName);
  }
  return group;
}
