{
  final TreeSet<String> publicVlans=new TreeSet<String>();
  publicVlans.add(vpcRouterDeploymentDefinition.getSourceNatIP().getVlanTag());
  final LinkedHashMap<Network,List<? extends NicProfile>> networks=this.createRouterNetworks(vpcRouterDeploymentDefinition);
  final Long vpcId=vpcRouterDeploymentDefinition.getVpc().getId();
  final List<PrivateGateway> privateGateways=this.vpcMgr.getVpcPrivateGateways(vpcId);
  if (privateGateways != null && !privateGateways.isEmpty()) {
    for (    PrivateGateway privateGateway : privateGateways) {
      NicProfile privateNic=this.vpcHelper.createPrivateNicProfileForGateway(privateGateway);
      Network privateNetwork=networkModel.getNetwork(privateGateway.getNetworkId());
      networks.put(privateNetwork,new ArrayList<NicProfile>(Arrays.asList(privateNic)));
    }
  }
  List<? extends Network> guestNetworks=this.vpcMgr.getVpcNetworks(vpcId);
  for (  Network guestNetwork : guestNetworks) {
    if (networkModel.isPrivateGateway(guestNetwork.getId())) {
      continue;
    }
    if (guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup) {
      NicProfile guestNic=vpcHelper.createGuestNicProfileForVpcRouter(guestNetwork);
      networks.put(guestNetwork,new ArrayList<NicProfile>(Arrays.asList(guestNic)));
    }
  }
  final List<IPAddressVO> ips=ipAddressDao.listByAssociatedVpc(vpcId,false);
  final List<NicProfile> publicNics=new ArrayList<NicProfile>();
  Network publicNetwork=null;
  for (  IPAddressVO ip : ips) {
    PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,this.vlanDao.findById(ip.getVlanId()));
    if ((ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) && this.vpcMgr.isIpAllocatedToVpc(ip) && !publicVlans.contains(publicIp.getVlanTag())) {
      logger.debug("Allocating nic for router in vlan " + publicIp.getVlanTag());
      NicProfile publicNic=new NicProfile();
      publicNic.setDefaultNic(false);
      publicNic.setIp4Address(publicIp.getAddress().addr());
      publicNic.setGateway(publicIp.getGateway());
      publicNic.setNetmask(publicIp.getNetmask());
      publicNic.setMacAddress(publicIp.getMacAddress());
      publicNic.setBroadcastType(BroadcastDomainType.Vlan);
      publicNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag()));
      publicNic.setIsolationUri(IsolationType.Vlan.toUri(publicIp.getVlanTag()));
      NetworkOffering publicOffering=networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork).get(0);
      if (publicNetwork == null) {
        List<? extends Network> publicNetworks=networkMgr.setupNetwork(VirtualNwStatus.account,publicOffering,vpcRouterDeploymentDefinition.getPlan(),null,null,false);
        publicNetwork=publicNetworks.get(0);
      }
      publicNics.add(publicNic);
      publicVlans.add(publicIp.getVlanTag());
    }
  }
  if (publicNetwork != null) {
    if (networks.get(publicNetwork) != null) {
      List<NicProfile> publicNicProfiles=(List<NicProfile>)networks.get(publicNetwork);
      publicNicProfiles.addAll(publicNics);
      networks.put(publicNetwork,publicNicProfiles);
    }
 else {
      networks.put(publicNetwork,publicNics);
    }
  }
  return networks;
}
