{
  String xml=VnmcXml.CREATE_GENERIC_EGRESS_ACL_RULE.getXml();
  String service=VnmcXml.CREATE_GENERIC_EGRESS_ACL_RULE.getService();
  if (protocol.equalsIgnoreCase("all")) {
    xml=VnmcXml.CREATE_GENERIC_EGRESS_ACL_NO_PROTOCOL_RULE.getXml();
    service=VnmcXml.CREATE_GENERIC_EGRESS_ACL_NO_PROTOCOL_RULE.getService();
  }
 else {
    xml=replaceXmlValue(xml,"protocolvalue",protocol);
  }
  String identifier=Long.toString(ruleId);
  xml=replaceXmlValue(xml,"cookie",_cookie);
  xml=replaceXmlValue(xml,"aclruledn",getDnForAclRule(tenantName,identifier,policyIdentifier));
  xml=replaceXmlValue(xml,"aclrulename",getNameForAclRule(tenantName,identifier));
  xml=replaceXmlValue(xml,"descr","Egress ACL rule for Tenant VDC " + tenantName);
  xml=replaceXmlValue(xml,"actiontype","permit");
  xml=replaceXmlValue(xml,"sourcestartip",sourceStartIp);
  xml=replaceXmlValue(xml,"sourceendip",sourceEndIp);
  long order=100 + ruleId;
  xml=replaceXmlValue(xml,"order",Long.toString(order));
  String response=sendRequest(service,xml);
  return verifySuccess(response);
}
