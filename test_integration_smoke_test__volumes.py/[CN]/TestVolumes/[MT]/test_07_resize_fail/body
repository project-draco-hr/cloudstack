@attr(tags=['advanced', 'advancedns', 'smoke'])
def test_07_resize_fail(self):
    'Verify invalid options fail to Resize a volume'
    self.debug(('Fail Resize Volume ID: %s' % self.volume.id))
    cmd = resizeVolume.resizeVolumeCmd()
    cmd.id = 'invalid id'
    cmd.diskofferingid = self.services['resizeddiskofferingid']
    success = False
    try:
        response = self.apiClient.resizeVolume(cmd)
    except Exception as ex:
        if (str(ex) == 'HTTP Error 431: 431'):
            success = True
    self.assertEqual(success, True, 'ResizeVolume - verify invalid id is handled appropriately')
    cmd.id = self.volume.id
    cmd.diskofferingid = 'invalid id'
    success = False
    try:
        response = self.apiClient.resizeVolume(cmd)
    except Exception as ex:
        if ('need to specify a disk offering' in str(ex)):
            success = True
    self.assertEqual(success, True, 'ResizeVolume - verify disk offering is handled appropriately')
    cmd.id = self.volume.id
    cmd.diskofferingid = self.services['diskofferingid']
    cmd.size = 4
    currentSize = self.volume.size
    self.apiClient.resizeVolume(cmd)
    count = 0
    success = True
    while (count < 10):
        list_volume_response = list_volumes(self.apiClient, id=self.volume.id, type='DATADISK')
        for vol in list_volume_response:
            if ((vol.id == self.volume.id) and (vol.size != currentSize)):
                success = False
        if success:
            break
        else:
            time.sleep(1)
            count += 1
    self.assertEqual(success, True, 'Verify the volume did not resize')
