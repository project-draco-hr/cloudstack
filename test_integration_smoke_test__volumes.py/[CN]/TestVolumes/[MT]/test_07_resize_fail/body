@attr(tags=['advanced', 'advancedns', 'smoke', 'basic'])
def test_07_resize_fail(self):
    'Test resize (negative) non-existent volume'
    self.debug(('Fail Resize Volume ID: %s' % self.volume.id))
    cmd = resizeVolume.resizeVolumeCmd()
    cmd.id = 'invalid id'
    cmd.diskofferingid = self.services['resizeddiskofferingid']
    success = False
    try:
        response = self.apiClient.resizeVolume(cmd)
    except Exception as ex:
        if ('invalid' in str(ex)):
            success = True
    self.assertEqual(success, True, 'ResizeVolume - verify invalid id is handled appropriately')
    cmd.id = self.volume.id
    cmd.diskofferingid = 'invalid id'
    success = False
    try:
        response = self.apiClient.resizeVolume(cmd)
    except Exception as ex:
        if ('invalid' in str(ex)):
            success = True
    self.assertEqual(success, True, 'ResizeVolume - verify disk offering is handled appropriately')
    cmd.id = self.volume.id
    cmd.diskofferingid = self.services['diskofferingid']
    cmd.size = 4
    currentSize = self.volume.size
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume.id, self.virtual_machine.id)))
    self.virtual_machine.attach_volume(self.apiClient, self.volume)
    self.attached = True
    hosts = Host.list(self.apiClient, id=self.virtual_machine.hostid)
    self.assertTrue(isinstance(hosts, list))
    self.assertTrue((len(hosts) > 0))
    self.debug(('Found %s host' % hosts[0].hypervisor))
    if (hosts[0].hypervisor == 'XenServer'):
        self.virtual_machine.stop(self.apiClient)
    elif (hosts[0].hypervisor.lower() == 'vmware'):
        self.skipTest('Resize Volume is unsupported on VmWare')
    self.apiClient.resizeVolume(cmd)
    count = 0
    success = True
    while (count < 10):
        list_volume_response = list_volumes(self.apiClient, id=self.volume.id, type='DATADISK')
        for vol in list_volume_response:
            if ((vol.id == self.volume.id) and (vol.size != currentSize) and (vol.state != 'Resizing')):
                success = False
        if success:
            break
        else:
            time.sleep(1)
            count += 1
    self.assertEqual(success, True, 'Verify the volume did not resize')
    if (hosts[0].hypervisor == 'XenServer'):
        self.virtual_machine.start(self.apiClient)
