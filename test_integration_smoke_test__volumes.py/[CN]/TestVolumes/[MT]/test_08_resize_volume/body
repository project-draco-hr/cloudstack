@attr(tags=['advanced', 'advancedns', 'smoke', 'basic'], required_hardware='true')
def test_08_resize_volume(self):
    'Test resize a volume'
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume.id, self.virtual_machine.id)))
    self.virtual_machine.attach_volume(self.apiClient, self.volume)
    self.attached = True
    hosts = Host.list(self.apiClient, id=self.virtual_machine.hostid)
    self.assertTrue(isinstance(hosts, list))
    self.assertTrue((len(hosts) > 0))
    self.debug(('Found %s host' % hosts[0].hypervisor))
    if (hosts[0].hypervisor == 'XenServer'):
        self.virtual_machine.stop(self.apiClient)
    elif (hosts[0].hypervisor.lower() == 'vmware'):
        self.skipTest('Resize Volume is unsupported on VmWare')
    self.debug(('Resize Volume ID: %s' % self.volume.id))
    cmd = resizeVolume.resizeVolumeCmd()
    cmd.id = self.volume.id
    cmd.diskofferingid = self.services['resizeddiskofferingid']
    self.apiClient.resizeVolume(cmd)
    count = 0
    success = False
    while (count < 3):
        list_volume_response = Volume.list(self.apiClient, id=self.volume.id, type='DATADISK')
        for vol in list_volume_response:
            if ((vol.id == self.volume.id) and (vol.size == 3221225472L) and (vol.state == 'Ready')):
                success = True
        if success:
            break
        else:
            time.sleep(10)
            count += 1
    self.assertEqual(success, True, 'Check if the data volume resized appropriately')
    self.debug(('Resize Root for : %s' % self.virtual_machine.id))
    list_volume_response = Volume.list(self.apiClient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    rootvolume = list_volume_response[0]
    cmd = resizeVolume.resizeVolumeCmd()
    cmd.id = rootvolume.id
    cmd.size = 10
    cmd.shrinkok = 'true'
    self.apiClient.resizeVolume(cmd)
    count = 0
    success = False
    while (count < 3):
        list_volume_response = Volume.list(self.apiClient, id=rootvolume.id)
        for vol in list_volume_response:
            if ((vol.id == rootvolume.id) and (vol.size == 10737418240L) and (vol.state == 'Ready')):
                success = True
        if success:
            break
        else:
            time.sleep(10)
            count += 1
    self.assertEqual(success, True, 'Check if the root volume resized appropriately')
    if (hosts[0].hypervisor == 'XenServer'):
        self.virtual_machine.start(self.apiClient)
        time.sleep(30)
    return
