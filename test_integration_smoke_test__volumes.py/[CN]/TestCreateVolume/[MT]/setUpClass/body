@classmethod
def setUpClass(cls):
    testClient = super(TestCreateVolume, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.services['disk_offering'])
    cls.sparse_disk_offering = DiskOffering.create(cls.api_client, cls.services['sparse_disk_offering'])
    cls.custom_disk_offering = DiskOffering.create(cls.apiclient, cls.services['disk_offering'], custom=True)
    template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['domainid'] = cls.domain.id
    cls.services['zoneid'] = cls.zone.id
    cls.services['template'] = template.id
    cls.services['customdiskofferingid'] = cls.custom_disk_offering.id
    cls.services['diskname'] = cls.services['volume']['diskname']
    cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings'])
    cls.virtual_machine = VirtualMachine.create(cls.apiclient, cls.services, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls._cleanup = [cls.service_offering, cls.disk_offering, cls.custom_disk_offering, cls.account]
