@attr(tags=['advanced', 'advancedns', 'smoke', 'basic'], required_hardware='true')
def test_01_create_volume(self):
    'Test Volume creation for all Disk Offerings (incl. custom)\n        '
    self.volumes = []
    for (k, v) in self.services['volume_offerings'].items():
        volume = Volume.create(self.apiClient, v, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id)
        self.debug(('Created a volume with ID: %s' % volume.id))
        self.volumes.append(volume)
    if (self.virtual_machine.hypervisor == 'KVM'):
        sparse_volume = Volume.create(self.apiClient, self.services, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.sparse_disk_offering.id)
        self.debug(('Created a sparse volume: %s' % sparse_volume.id))
        self.volumes.append(sparse_volume)
    volume = Volume.create_custom_disk(self.apiClient, self.services, account=self.account.name, domainid=self.account.domainid)
    self.debug(('Created a volume with custom offering: %s' % volume.id))
    self.volumes.append(volume)
    for volume in self.volumes:
        list_volume_response = Volume.list(self.apiClient, id=volume.id)
        self.assertEqual(isinstance(list_volume_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(list_volume_response, None, 'Check if volume exists in ListVolumes')
        self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (volume.id, self.virtual_machine.id)))
        self.virtual_machine.attach_volume(self.apiClient, volume)
        try:
            ssh = self.virtual_machine.get_ssh_client()
            self.debug(('Rebooting VM %s' % self.virtual_machine.id))
            ssh.execute('reboot')
        except Exception as e:
            self.fail(('SSH access failed for VM %s - %s' % (self.virtual_machine.ipaddress, e)))
        timeout = self.services['timeout']
        while True:
            time.sleep(self.services['sleep'])
            list_vm_response = VirtualMachine.list(self.apiClient, id=self.virtual_machine.id)
            if isinstance(list_vm_response, list):
                vm = list_vm_response[0]
                if (vm.state == 'Running'):
                    self.debug(('VM state: %s' % vm.state))
                    break
            if (timeout == 0):
                raise Exception(('Failed to start VM (ID: %s) ' % vm.id))
            timeout = (timeout - 1)
        vol_sz = str(list_volume_response[0].size)
        ssh = self.virtual_machine.get_ssh_client(reconnect=True)
        list_volume_response = Volume.list(self.apiClient, id=volume.id)
        if (list_volume_response[0].hypervisor.lower() == XEN_SERVER.lower()):
            volume_name = ('/dev/xvd' + chr((ord('a') + int(list_volume_response[0].deviceid))))
            self.debug((' Using XenServer volume_name: %s' % volume_name))
            ret = checkVolumeSize(ssh_handle=ssh, volume_name=volume_name, size_to_verify=vol_sz)
        elif (list_volume_response[0].hypervisor.lower() == 'kvm'):
            volume_name = ('/dev/vd' + chr((ord('a') + int(list_volume_response[0].deviceid))))
            self.debug((' Using KVM volume_name: %s' % volume_name))
            ret = checkVolumeSize(ssh_handle=ssh, volume_name=volume_name, size_to_verify=vol_sz)
        elif (list_volume_response[0].hypervisor.lower() == 'hyperv'):
            ret = checkVolumeSize(ssh_handle=ssh, volume_name='/dev/sdb', size_to_verify=vol_sz)
        else:
            ret = checkVolumeSize(ssh_handle=ssh, size_to_verify=vol_sz)
        self.debug((' Volume Size Expected %s  Actual :%s' % (vol_sz, ret[1])))
        self.virtual_machine.detach_volume(self.apiClient, volume)
        self.assertEqual(ret[0], SUCCESS, 'Check if promised disk size actually available')
        time.sleep(self.services['sleep'])
