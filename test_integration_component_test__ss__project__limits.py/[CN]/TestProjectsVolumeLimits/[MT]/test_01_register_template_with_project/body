@attr(tags=['advanced'], required_hardware='true')
def test_01_register_template_with_project(self):
    'Test register template\n        # Validate the following:\n        1. Create a project\n        2. Register and download a template according to hypervisor type in the project\n        3. Verify that the template is listed\n        4. Verify that the secondary storage count for the project equals the size\n           of the template\n        5. Delete the template\n        6. Verify that the secondary storage resource count of the project equals 0\n       '
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.services['template_2']['url'] = builtin_info[0]
    self.services['template_2']['hypervisor'] = builtin_info[1]
    self.services['template_2']['format'] = builtin_info[2]
    try:
        template = Template.register(self.apiclient, self.services['template_2'], zoneid=self.zone.id, projectid=self.project.id)
        template.download(self.apiclient)
    except Exception as e:
        self.fail(('Failed to register template: %s' % e))
    templates = Template.list(self.apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
    self.assertEqual(validateList(templates)[0], PASS, 'templates list validation failed')
    templates = Template.list(self.apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
    self.assertEqual(validateList(templates)[0], PASS, 'templates list validation failed')
    templateSize = (templates[0].size / (1024 ** 3))
    expectedCount = templateSize
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_SECONDARY_STORAGE, projectid=self.project.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        template.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete template: %s' % e))
    expectedCount = 0
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_SECONDARY_STORAGE, projectid=self.project.id)
    self.assertEqual(response[0], PASS, response[1])
    return
