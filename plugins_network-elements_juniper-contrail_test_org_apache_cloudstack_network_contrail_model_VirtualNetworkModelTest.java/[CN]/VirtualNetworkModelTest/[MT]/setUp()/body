{
  String uuid=UUID.randomUUID().toString();
  String uuid1=UUID.randomUUID().toString();
  String uuid2=UUID.randomUUID().toString();
  String uuid3=UUID.randomUUID().toString();
  ContrailManagerImpl contrailMgr=mock(ContrailManagerImpl.class);
  controller=mock(ModelController.class);
  VlanDao vlanDao=mock(VlanDao.class);
  ApiConnector api=mock(ApiConnectorMock.class);
  when(controller.getManager()).thenReturn(contrailMgr);
  when(controller.getApiAccessor()).thenReturn(api);
  when(controller.getVlanDao()).thenReturn(vlanDao);
  List<ObjectReference<VirtualNetworkPolicyType>> policyRefs1=new ArrayList<ObjectReference<VirtualNetworkPolicyType>>();
  ObjectReference<VirtualNetworkPolicyType> objectReference1=new ObjectReference<VirtualNetworkPolicyType>();
  policyRefs1.add(objectReference1);
  List<ObjectReference<VirtualNetworkPolicyType>> policyRefs2=new ArrayList<ObjectReference<VirtualNetworkPolicyType>>();
  ObjectReference<VirtualNetworkPolicyType> objectReference2=new ObjectReference<VirtualNetworkPolicyType>();
  policyRefs2.add(objectReference2);
  List<ObjectReference<VirtualNetworkPolicyType>> policyRefs3=new ArrayList<ObjectReference<VirtualNetworkPolicyType>>();
  ObjectReference<VirtualNetworkPolicyType> objectReference3=new ObjectReference<VirtualNetworkPolicyType>();
  objectReference3.setReference(Arrays.asList(""),null,null,UUID.randomUUID().toString());
  policyRefs3.add(objectReference3);
  VirtualNetwork vn=mock(VirtualNetwork.class);
  when(api.findById(VirtualNetwork.class,uuid)).thenReturn(vn);
  VirtualNetwork vn1=mock(VirtualNetwork.class);
  when(api.findById(VirtualNetwork.class,uuid1)).thenReturn(vn1);
  when(vn1.getNetworkPolicy()).thenReturn(policyRefs1);
  VirtualNetwork vn2=mock(VirtualNetwork.class);
  when(api.findById(VirtualNetwork.class,uuid2)).thenReturn(vn2);
  when(vn2.getNetworkPolicy()).thenReturn(policyRefs2);
  VirtualNetwork vn3=mock(VirtualNetwork.class);
  when(api.findById(VirtualNetwork.class,uuid3)).thenReturn(vn3);
  when(vn3.getNetworkPolicy()).thenReturn(policyRefs3);
  NetworkVO network1=mock(NetworkVO.class);
  when(network1.getName()).thenReturn("testnetwork");
  when(network1.getState()).thenReturn(State.Allocated);
  when(network1.getGateway()).thenReturn("10.1.1.1");
  when(network1.getCidr()).thenReturn("10.1.1.0/24");
  when(network1.getPhysicalNetworkId()).thenReturn(42L);
  when(network1.getDomainId()).thenReturn(10L);
  when(network1.getAccountId()).thenReturn(42L);
  NetworkVO network2=mock(NetworkVO.class);
  when(network2.getName()).thenReturn("Testnetwork");
  when(network2.getState()).thenReturn(State.Allocated);
  when(network2.getGateway()).thenReturn("10.1.1.1");
  when(network2.getCidr()).thenReturn("10.1.1.0/24");
  when(network2.getPhysicalNetworkId()).thenReturn(42L);
  when(network2.getDomainId()).thenReturn(10L);
  when(network2.getAccountId()).thenReturn(42L);
  NetworkVO network3=mock(NetworkVO.class);
  when(network3.getName()).thenReturn("Testnetwork");
  when(network3.getState()).thenReturn(State.Allocated);
  when(network3.getGateway()).thenReturn("10.1.1.1");
  when(network3.getCidr()).thenReturn("10.1.1.0/24");
  when(network3.getPhysicalNetworkId()).thenReturn(42L);
  when(network3.getDomainId()).thenReturn(10L);
  when(network3.getAccountId()).thenReturn(42L);
  when(contrailMgr.getCanonicalName(network1)).thenReturn("testnetwork");
  when(contrailMgr.getProjectId(network1.getDomainId(),network1.getAccountId())).thenReturn("testProjectId");
  vnModel=new VirtualNetworkModel(network1,uuid,"testnetwork",TrafficType.Guest);
  vnModel1=new VirtualNetworkModel(network1,uuid1,"testnetwork",TrafficType.Guest);
  vnModel2=new VirtualNetworkModel(network2,uuid2,"testnetwork",TrafficType.Guest);
  vnModel3=new VirtualNetworkModel(network3,uuid3,"testnetwork",TrafficType.Guest);
}
