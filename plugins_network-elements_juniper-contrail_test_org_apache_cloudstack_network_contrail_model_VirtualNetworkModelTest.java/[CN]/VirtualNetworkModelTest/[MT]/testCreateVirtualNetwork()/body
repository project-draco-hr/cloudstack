{
  String uuid=UUID.randomUUID().toString();
  ContrailManagerImpl contrailMgr=mock(ContrailManagerImpl.class);
  ModelController controller=mock(ModelController.class);
  ApiConnector api=new ApiConnectorMock(null,0);
  when(controller.getManager()).thenReturn(contrailMgr);
  when(controller.getApiAccessor()).thenReturn(api);
  NetworkVO network=mock(NetworkVO.class);
  when(network.getName()).thenReturn("testnetwork");
  when(network.getState()).thenReturn(State.Allocated);
  when(network.getGateway()).thenReturn("10.1.1.1");
  when(network.getCidr()).thenReturn("10.1.1.0/24");
  when(network.getPhysicalNetworkId()).thenReturn(42L);
  when(network.getDomainId()).thenReturn(10L);
  when(network.getAccountId()).thenReturn(42L);
  when(contrailMgr.getCanonicalName(network)).thenReturn("testnetwork");
  when(contrailMgr.getProjectId(network.getDomainId(),network.getAccountId())).thenReturn("testProjectId");
  VirtualNetworkModel vnModel=new VirtualNetworkModel(network,uuid,"testnetwork",TrafficType.Guest);
  assertEquals(vnModel.getName(),"testnetwork");
  assertEquals(vnModel.getUuid(),uuid);
  vnModel.build(controller,network);
  try {
    vnModel.update(controller);
  }
 catch (  Exception ex) {
    fail("virtual-network update failed ");
  }
  assertTrue(vnModel.verify(controller));
}
