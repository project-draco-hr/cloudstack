{
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Unable to find active account by accountId: " + accountId + " OR by name: "+ accountName+ " in domain "+ domainId);
  }
  String accountUUID=account.getUuid();
  String command="disableAccount";
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new NameValuePair(ApiConstants.LOCK,lockRequested.toString()));
  params.add(new NameValuePair(ApiConstants.ID,accountUUID));
  DomainVO domain=_domainDao.findById(domainId);
  if (domain != null) {
    params.add(new NameValuePair(ApiConstants.DOMAIN_ID,domain.getUuid()));
  }
  int regionId=account.getRegionId();
  if (getId() == regionId) {
    Account retAccount=null;
    if (lockRequested) {
      retAccount=_accountMgr.lockAccount(accountName,domainId,accountId);
    }
 else {
      retAccount=_accountMgr.disableAccount(accountName,domainId,accountId);
    }
    if (retAccount != null) {
      List<RegionVO> regions=_regionDao.listAll();
      for (      Region region : regions) {
        if (region.getId() == getId()) {
          continue;
        }
        params.add(new NameValuePair(ApiConstants.IS_PROPAGATE,"true"));
        if (RegionsApiUtil.makeAPICall(region,command,params)) {
          s_logger.debug("Successfully disabled account :" + accountUUID + " in Region: "+ region.getId());
        }
 else {
          s_logger.error("Error while disabling account :" + accountUUID + " in Region: "+ region.getId());
        }
      }
    }
    return retAccount;
  }
 else {
    Region region=_regionDao.findById(regionId);
    Account retAccount=RegionsApiUtil.makeAccountAPICall(region,command,params);
    if (retAccount != null) {
      s_logger.debug("Successfully disabled account :" + accountUUID + " in source Region: "+ region.getId());
      return retAccount;
    }
 else {
      throw new CloudRuntimeException("Error while disabling account :" + accountUUID + " in source Region: "+ region.getId());
    }
  }
}
