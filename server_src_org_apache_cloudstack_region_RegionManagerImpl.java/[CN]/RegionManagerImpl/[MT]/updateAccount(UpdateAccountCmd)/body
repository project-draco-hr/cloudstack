{
  Long accountId=cmd.getId();
  Long domainId=cmd.getDomainId();
  DomainVO domain=_domainDao.findById(domainId);
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  Map<String,String> details=cmd.getDetails();
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findEnabledAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    s_logger.error("Unable to find account by accountId: " + accountId + " OR by name: "+ accountName+ " in domain "+ domainId);
    throw new InvalidParameterValueException("Unable to find account by accountId: " + accountId + " OR by name: "+ accountName+ " in domain "+ domainId);
  }
  String command="updateAccount";
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new NameValuePair(ApiConstants.ID,account.getUuid()));
  params.add(new NameValuePair(ApiConstants.ACCOUNT,accountName));
  params.add(new NameValuePair(ApiConstants.DOMAIN_ID,domain.getUuid()));
  params.add(new NameValuePair(ApiConstants.NETWORK_DOMAIN,networkDomain));
  params.add(new NameValuePair(ApiConstants.NEW_NAME,newAccountName));
  if (details != null) {
    params.add(new NameValuePair(ApiConstants.ACCOUNT_DETAILS,details.toString()));
  }
  int regionId=account.getRegionId();
  if (getId() == regionId) {
    return _accountMgr.updateAccount(cmd);
  }
 else {
    Region region=_regionDao.findById(regionId);
    if (RegionsApiUtil.makeAPICall(region,command,params)) {
      s_logger.debug("Successfully updated account :" + account.getUuid() + " in source Region: "+ region.getId());
      return account;
    }
 else {
      throw new CloudRuntimeException("Error while updating account :" + account.getUuid() + " in source Region: "+ region.getId());
    }
  }
}
