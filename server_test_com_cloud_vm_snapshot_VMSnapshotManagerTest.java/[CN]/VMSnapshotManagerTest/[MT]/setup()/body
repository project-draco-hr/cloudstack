{
  MockitoAnnotations.initMocks(this);
  doReturn(admin).when(_vmSnapshotMgr).getCaller();
  _vmSnapshotMgr._accountDao=_accountDao;
  _vmSnapshotMgr._userVMDao=_userVMDao;
  _vmSnapshotMgr._vmSnapshotDao=_vmSnapshotDao;
  _vmSnapshotMgr._volumeDao=_volumeDao;
  _vmSnapshotMgr._accountMgr=_accountMgr;
  _vmSnapshotMgr._snapshotDao=_snapshotDao;
  _vmSnapshotMgr._guestOSDao=_guestOSDao;
  _vmSnapshotMgr._hypervisorCapabilitiesDao=_hypervisorCapabilitiesDao;
  doNothing().when(_accountMgr).checkAccess(any(Account.class),any(AccessType.class),any(ControlledEntity.class));
  _vmSnapshotMgr._vmSnapshotMax=_vmSnapshotMax;
  when(_userVMDao.findById(anyLong())).thenReturn(vmMock);
  when(_vmSnapshotDao.findByName(anyLong(),anyString())).thenReturn(null);
  when(_vmSnapshotDao.findByVm(anyLong())).thenReturn(new ArrayList<VMSnapshotVO>());
  when(_hypervisorCapabilitiesDao.isVmSnapshotEnabled(Hypervisor.HypervisorType.XenServer,"default")).thenReturn(true);
  List<VolumeVO> mockVolumeList=new ArrayList<VolumeVO>();
  mockVolumeList.add(volumeMock);
  when(volumeMock.getInstanceId()).thenReturn(TEST_VM_ID);
  when(_volumeDao.findByInstance(anyLong())).thenReturn(mockVolumeList);
  when(vmMock.getInstanceName()).thenReturn("i-3-VM-TEST");
  when(vmMock.getState()).thenReturn(State.Running);
  when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.XenServer);
  when(_guestOSDao.findById(anyLong())).thenReturn(mock(GuestOSVO.class));
}
