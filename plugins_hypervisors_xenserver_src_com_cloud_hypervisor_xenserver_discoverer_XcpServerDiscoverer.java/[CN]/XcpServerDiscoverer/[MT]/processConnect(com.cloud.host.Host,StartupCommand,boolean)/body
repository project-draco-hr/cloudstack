{
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long agentId=agent.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  if (startup.getHypervisorType() != HypervisorType.XenServer) {
    logger.debug("Not XenServer so moving on.");
    return;
  }
  HostVO host=_hostDao.findById(agentId);
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  if (cluster.getGuid() == null) {
    cluster.setGuid(startup.getPool());
    _clusterDao.update(cluster.getId(),cluster);
  }
 else   if (!cluster.getGuid().equals(startup.getPool())) {
    String msg="pool uuid for cluster " + cluster.getId() + " changed from "+ cluster.getGuid()+ " to "+ startup.getPool();
    logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  Map<String,String> details=startup.getHostDetails();
  String prodBrand=details.get("product_brand").trim();
  String prodVersion=details.get("product_version").trim();
  String hotfix=details.get(XenserverConfigs.XS620HotFix);
  String prodVersionTextShort=details.get("product_version_text_short");
  String resource=createServerResource(prodBrand,prodVersion,prodVersionTextShort,hotfix).getClass().getName();
  if (!resource.equals(host.getResource())) {
    String msg="host " + host.getPrivateIpAddress() + " changed from "+ host.getResource()+ " to "+ resource;
    logger.debug(msg);
    host.setResource(resource);
    host.setSetup(false);
    _hostDao.update(agentId,host);
    throw new HypervisorVersionChangedException(msg);
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Setting up host " + agentId);
  }
  HostEnvironment env=new HostEnvironment();
  SetupCommand setup=new SetupCommand(env);
  if (_setupMultipath) {
    setup.setMultipathOn();
  }
  if (!host.isSetup()) {
    setup.setNeedSetup(true);
  }
  try {
    Answer answer=_agentMgr.send(agentId,setup);
    if (answer != null && answer.getResult() && answer instanceof SetupAnswer) {
      host.setSetup(true);
      host.setLastPinged((System.currentTimeMillis() >> 10) - 5 * 60);
      host.setHypervisorVersion(prodVersion);
      _hostDao.update(host.getId(),host);
      if (((SetupAnswer)answer).needReconnect()) {
        throw new ConnectionException(false,"Reinitialize agent after setup.");
      }
      return;
    }
 else {
      logger.warn("Unable to setup agent " + agentId + " due to "+ ((answer != null) ? answer.getDetails() : "return null"));
    }
  }
 catch (  AgentUnavailableException e) {
    logger.warn("Unable to setup agent " + agentId + " because it became unavailable.",e);
  }
catch (  OperationTimedoutException e) {
    logger.warn("Unable to setup agent " + agentId + " because it timed out",e);
  }
  throw new ConnectionException(true,"Reinitialize agent after setup.");
}
