{
  boolean result=super.configure(name,params);
  PublicSearch=createSearchBuilder();
  PublicSearch.and("public",PublicSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  routerTmpltName=(String)params.get("routing.uniquename");
  s_logger.debug("Found parameter routing unique name " + routerTmpltName);
  if (routerTmpltName == null) {
    routerTmpltName="routing";
  }
  consoleProxyTmpltName=(String)params.get("consoleproxy.uniquename");
  if (consoleProxyTmpltName == null)   consoleProxyTmpltName="routing";
  if (s_logger.isDebugEnabled())   s_logger.debug("Use console proxy template : " + consoleProxyTmpltName);
  TemplateNameSearch=createSearchBuilder();
  TemplateNameSearch.and("name",TemplateNameSearch.entity().getName(),SearchCriteria.Op.EQ);
  UniqueNameSearch=createSearchBuilder();
  UniqueNameSearch.and("uniqueName",UniqueNameSearch.entity().getUniqueName(),SearchCriteria.Op.EQ);
  NameSearch=createSearchBuilder();
  NameSearch.and("name",NameSearch.entity().getName(),SearchCriteria.Op.EQ);
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and("accountId",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.and("publicTemplate",AccountIdSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  return result;
}
