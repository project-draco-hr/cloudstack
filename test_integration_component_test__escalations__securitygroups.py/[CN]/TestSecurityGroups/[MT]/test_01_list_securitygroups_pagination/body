@attr(tags=['basic'], required_hardware='true')
def test_01_list_securitygroups_pagination(self):
    '\n        @Desc: Test to List Security Groups pagination\n        @steps:\n        Step1: Listing all the Security Groups for a user\n        Step2: Verifying that list size is 1\n        Step3: Creating (page size) number of Security Groups\n        Step4: Listing all the Security Groups again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the Security Groups in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the Security Groups in page2\n        Step9: Verifying that list size is 1\n        Step10: Deleting the Security Group present in page 2\n        Step11: Listing all the Security Groups in page2\n        Step12: Verifying that no security groups are listed\n        '
    list_securitygroups_before = SecurityGroup.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_securitygroups_before)
    self.assertEquals(PASS, status[0], 'Default Security Groups creation failed')
    self.assertEquals(1, len(list_securitygroups_before), 'Count of Security Groups list is not matching')
    for i in range(0, self.services['pagesize']):
        securitygroup_created = SecurityGroup.create(self.userapiclient, self.services['security_group'], account=self.account.name, domainid=self.domain.id, description=self.services['security_group']['name'])
        self.assertIsNotNone(securitygroup_created, 'Security Group creation failed')
        if (i < self.services['pagesize']):
            self.cleanup.append(securitygroup_created)
    list_securitygroups_after = SecurityGroup.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_securitygroups_after)
    self.assertEquals(PASS, status[0], 'Security Groups creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_securitygroups_after), 'Failed to create pagesize + 1 number of Security Groups')
    list_securitygroups_page1 = SecurityGroup.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_securitygroups_page1)
    self.assertEquals(PASS, status[0], 'Failed to list security groups in page 1')
    self.assertEquals(self.services['pagesize'], len(list_securitygroups_page1), 'Size of security groups in page 1 is not matching')
    list_securitygroups_page2 = SecurityGroup.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_securitygroups_page2)
    self.assertEquals(PASS, status[0], 'Failed to list security groups in page 2')
    self.assertEquals(1, len(list_securitygroups_page2), 'Size of security groups in page 2 is not matching')
    SecurityGroup.delete(securitygroup_created, self.userapiclient)
    self.cleanup.remove(securitygroup_created)
    list_securitygroups_page2 = SecurityGroup.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_securitygroups_page2, 'Security Groups not deleted from page 2')
    return
