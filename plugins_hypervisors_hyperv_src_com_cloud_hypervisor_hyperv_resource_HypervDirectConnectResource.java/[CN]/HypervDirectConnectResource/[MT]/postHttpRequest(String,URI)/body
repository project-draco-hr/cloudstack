{
  String logMessage=StringEscapeUtils.unescapeJava(jsonCmd);
  logMessage=cleanPassword(logMessage);
  s_logger.debug("POST request to " + agentUri.toString() + " with contents "+ logMessage);
  HttpClient httpClient=null;
  final TrustStrategy easyStrategy=new TrustStrategy(){
    @Override public boolean isTrusted(    final X509Certificate[] chain,    final String authType) throws CertificateException {
      return true;
    }
  }
;
  try {
    final SSLSocketFactory sf=new SSLSocketFactory(easyStrategy,new AllowAllHostnameVerifier());
    final SchemeRegistry registry=new SchemeRegistry();
    registry.register(new Scheme("https",DEFAULT_AGENT_PORT,sf));
    final ClientConnectionManager ccm=new BasicClientConnectionManager(registry);
    httpClient=new DefaultHttpClient(ccm);
  }
 catch (  final KeyManagementException e) {
    s_logger.error("failed to initialize http client " + e.getMessage());
  }
catch (  final UnrecoverableKeyException e) {
    s_logger.error("failed to initialize http client " + e.getMessage());
  }
catch (  final NoSuchAlgorithmException e) {
    s_logger.error("failed to initialize http client " + e.getMessage());
  }
catch (  final KeyStoreException e) {
    s_logger.error("failed to initialize http client " + e.getMessage());
  }
  String result=null;
  try {
    final HttpPost request=new HttpPost(agentUri);
    final StringEntity cmdJson=new StringEntity(jsonCmd);
    request.addHeader("content-type","application/json");
    request.setEntity(cmdJson);
    s_logger.debug("Sending cmd to " + agentUri.toString() + " cmd data:"+ logMessage);
    final HttpResponse response=httpClient.execute(request);
    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
      final String errMsg="Failed to send : HTTP error code : " + response.getStatusLine().getStatusCode();
      s_logger.error(errMsg);
      final String unsupportMsg="Unsupported command " + agentUri.getPath() + ".  Are you sure you got the right type of"+ " server?";
      final Answer ans=new UnsupportedAnswer(null,unsupportMsg);
      s_logger.error(ans);
      result=s_gson.toJson(new Answer[]{ans});
    }
 else     if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      final String errMsg="Failed send to " + agentUri.toString() + " : HTTP error code : "+ response.getStatusLine().getStatusCode();
      s_logger.error(errMsg);
      return null;
    }
 else {
      result=EntityUtils.toString(response.getEntity());
      final String logResult=cleanPassword(StringEscapeUtils.unescapeJava(result));
      s_logger.debug("POST response is " + logResult);
    }
  }
 catch (  final ClientProtocolException protocolEx) {
    s_logger.error(protocolEx);
  }
catch (  final IOException connEx) {
    s_logger.error(connEx);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
  return result;
}
