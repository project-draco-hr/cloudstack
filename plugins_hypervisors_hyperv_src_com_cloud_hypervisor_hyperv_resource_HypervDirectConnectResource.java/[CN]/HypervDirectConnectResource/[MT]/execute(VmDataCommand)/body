{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource VmDataCommand: " + s_gson.toJson(cmd));
  }
  String controlIp=getRouterSshControlIp(cmd);
  Map<String,List<String[]>> data=new HashMap<String,List<String[]>>();
  data.put(cmd.getVmIpAddress(),cmd.getVmData());
  String json=new Gson().toJson(data);
  s_logger.debug("VM data JSON IS:" + json);
  json=Base64.encodeBase64String(json.getBytes(Charset.forName("UTF-8")));
  String args="-d " + json;
  try {
    Pair<Boolean,String> result=SshHelper.sshExecute(controlIp,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,"/opt/cloud/bin/vmdata.py " + args);
    if (!result.first()) {
      s_logger.error("vm_data command on domain router " + controlIp + " failed. messge: "+ result.second());
      return new Answer(cmd,false,"VmDataCommand failed due to " + result.second());
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info("vm_data command on domain router " + controlIp + " completed");
    }
  }
 catch (  Throwable e) {
    String msg="VmDataCommand failed due to " + e.getMessage();
    s_logger.error(msg,e);
    return new Answer(cmd,false,msg);
  }
  return new Answer(cmd);
}
