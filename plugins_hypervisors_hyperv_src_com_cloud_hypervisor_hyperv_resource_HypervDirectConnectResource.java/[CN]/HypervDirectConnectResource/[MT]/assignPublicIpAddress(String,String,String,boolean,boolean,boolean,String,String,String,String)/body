{
  URI broadcastUri=BroadcastDomainType.fromString(broadcastId);
  if (BroadcastDomainType.getSchemeValue(broadcastUri) != BroadcastDomainType.Vlan) {
    throw new InternalErrorException("Unable to assign a public IP to a VIF on network " + broadcastId);
  }
  int vlanId=Integer.parseInt(BroadcastDomainType.getValue(broadcastUri));
  int publicNicInfo=-1;
  publicNicInfo=getVmNics(vmName,vlanId);
  boolean addVif=false;
  if (add && publicNicInfo == -1) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Plug new NIC to associate" + privateIpAddress + " to "+ publicIpAddress);
    }
    addVif=true;
  }
 else   if (!add && firstIP) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unplug NIC " + publicNicInfo);
    }
  }
  if (addVif) {
    Pair<Integer,String> nicdevice=findRouterFreeEthDeviceIndex(privateIpAddress);
    publicNicInfo=nicdevice.first();
    if (publicNicInfo > 0) {
      modifyNicVlan(vmName,vlanId,nicdevice.second());
      publicNicInfo=getVmNics(vmName,vlanId);
      networkUsage(privateIpAddress,"addVif","eth" + publicNicInfo);
    }
 else {
      String msg="No Nic is available on DomR VIF to associate/disassociate IP with.";
      s_logger.error(msg);
      throw new InternalErrorException(msg);
    }
  }
  String args=null;
  if (add) {
    args=" -A ";
  }
 else {
    args=" -D ";
  }
  if (sourceNat) {
    args+=" -s ";
  }
  if (firstIP) {
    args+=" -f ";
  }
  String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
  args+=" -l ";
  args+=publicIpAddress + "/" + cidrSize;
  args+=" -c ";
  args+="eth" + publicNicInfo;
  args+=" -g ";
  args+=vlanGateway;
  if (addVif) {
    args+=" -n ";
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Run command on domain router " + privateIpAddress + ", /opt/cloud/bin/ipassoc.sh "+ args);
  }
  Pair<Boolean,String> result=SshHelper.sshExecute(privateIpAddress,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,"/opt/cloud/bin/ipassoc.sh " + args);
  if (!result.first()) {
    s_logger.error("ipassoc command on domain router " + privateIpAddress + " failed. message: "+ result.second());
    throw new Exception("ipassoc failed due to " + result.second());
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("ipassoc command on domain router " + privateIpAddress + " completed");
  }
}
