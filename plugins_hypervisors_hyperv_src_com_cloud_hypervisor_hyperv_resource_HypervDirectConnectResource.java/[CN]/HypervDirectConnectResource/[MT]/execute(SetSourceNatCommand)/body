{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource SetSourceNatCommand " + s_gson.toJson(cmd));
  }
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String routerIp=getRouterSshControlIp(cmd);
  IpAddressTO pubIp=cmd.getIpAddress();
  try {
    int ethDeviceNum=findRouterEthDeviceIndex(routerName,routerIp,pubIp.getVifMacAddress());
    String args="";
    args+=" -A ";
    args+=" -l ";
    args+=pubIp.getPublicIp();
    args+=" -c ";
    args+="eth" + ethDeviceNum;
    Pair<Boolean,String> result=SshHelper.sshExecute(routerIp,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,"/opt/cloud/bin/vpc_snat.sh " + args);
    if (!result.first()) {
      String msg="SetupGuestNetworkCommand on domain router " + routerIp + " failed. message: "+ result.second();
      s_logger.error(msg);
      return new SetSourceNatAnswer(cmd,false,msg);
    }
    return new SetSourceNatAnswer(cmd,true,"success");
  }
 catch (  Exception e) {
    String msg="Ip SNAT failure due to " + e.toString();
    s_logger.error(msg,e);
    return new SetSourceNatAnswer(cmd,false,msg);
  }
}
