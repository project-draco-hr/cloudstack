{
  s_logger.info("findRouterFreeEthDeviceIndex. mac: ");
  final Pair<Boolean,String> result=SshHelper.sshExecute(routerIp,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,"ip address | grep DOWN| cut -f2 -d :");
  final long startTick=System.currentTimeMillis();
  while (System.currentTimeMillis() - startTick < 15000) {
    if (result.first() && !result.second().isEmpty()) {
      final String[] tokens=result.second().split("\\n");
      for (      final String token : tokens) {
        if (!("all".equalsIgnoreCase(token) || "default".equalsIgnoreCase(token) || "lo".equalsIgnoreCase(token))) {
          final String cmd=String.format("ip address show %s | grep link/ether | sed -e 's/^[ \t]*//' | cut -d' ' -f2",token);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Run domr script " + cmd);
          }
          final Pair<Boolean,String> result2=SshHelper.sshExecute(routerIp,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,cmd);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("result: " + result2.first() + ", output: "+ result2.second());
          }
          if (result2.first() && result2.second().trim().length() > 0) {
            return new Pair<Integer,String>(Integer.parseInt(token.trim().substring(3)),result2.second().trim());
          }
        }
      }
    }
  }
  return new Pair<Integer,String>(-1,"");
}
