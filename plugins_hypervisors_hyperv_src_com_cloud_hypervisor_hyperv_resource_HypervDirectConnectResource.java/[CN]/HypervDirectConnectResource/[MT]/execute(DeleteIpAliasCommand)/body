{
  cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  List<IpAliasTO> revokedIpAliasTOs=cmd.getDeleteIpAliasTos();
  List<IpAliasTO> activeIpAliasTOs=cmd.getCreateIpAliasTos();
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing deleteIpAlias command: " + s_gson.toJson(cmd));
  }
  String args="";
  for (  IpAliasTO ipAliasTO : revokedIpAliasTOs) {
    args=args + ipAliasTO.getAlias_count() + ":"+ ipAliasTO.getRouterip()+ ":"+ ipAliasTO.getNetmask()+ "-";
  }
  args=args + "- ";
  for (  IpAliasTO ipAliasTO : activeIpAliasTOs) {
    args=args + ipAliasTO.getAlias_count() + ":"+ ipAliasTO.getRouterip()+ ":"+ ipAliasTO.getNetmask()+ "-";
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Run command on domR " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + ", /root/deleteIpAlias "+ args);
  }
  try {
    String controlIp=getRouterSshControlIp(cmd);
    Pair<Boolean,String> result=SshHelper.sshExecute(controlIp,DEFAULT_DOMR_SSHPORT,"root",getSystemVMKeyFile(),null,"/root/deleteIpAlias.sh " + args);
    if (!result.first()) {
      s_logger.error("deleteIpAlias command on domr " + controlIp + " failed, message: "+ result.second());
      return new Answer(cmd,false,"deleteIpAlias failed due to " + result.second());
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info("deleteIpAlias command on domain router " + controlIp + " completed");
    }
  }
 catch (  Throwable e) {
    String msg="deleteIpAlias failed due to " + e.getMessage();
    s_logger.error(msg,e);
    return new Answer(cmd,false,msg);
  }
  return new Answer(cmd);
}
