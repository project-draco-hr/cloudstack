{
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  String hostTag=null;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (vm.getLastHostId() != null) {
    HostVO h=_hostDao.findById(vm.getLastHostId());
    DataCenter dc=_dcDao.findById(h.getDataCenterId());
    Pod pod=_podDao.findById(h.getPodId());
    Cluster c=_clusterDao.findById(h.getClusterId());
    s_logger.debug("Start baremetal vm " + vm.getId() + " on last stayed host "+ h.getId());
    return new DeployDestination(dc,pod,c,h);
  }
  if (offering.getTags() != null) {
    String[] tags=offering.getTags().split(",");
    if (tags.length > 0) {
      hostTag=tags[0];
    }
  }
  List<ClusterVO> clusters=_clusterDao.listByDcHyType(vm.getDataCenterIdToDeployIn(),HypervisorType.BareMetal.toString());
  int cpu_requested;
  long ram_requested;
  HostVO target=null;
  List<HostVO> hosts;
  for (  ClusterVO cluster : clusters) {
    hosts=_resourceMgr.listAllHostsInCluster(cluster.getId());
    if (hostTag != null) {
      for (      HostVO h : hosts) {
        _hostDao.loadDetails(h);
        if (h.getDetail("hostTag") != null && h.getDetail("hostTag").equalsIgnoreCase(hostTag)) {
          target=h;
          break;
        }
      }
    }
  }
  if (target == null) {
    s_logger.warn("Cannot find host with tag " + hostTag + " use capacity from service offering");
    cpu_requested=offering.getCpu() * offering.getSpeed();
    ram_requested=offering.getRamSize() * 1024 * 1024;
  }
 else {
    cpu_requested=target.getCpus() * target.getSpeed().intValue();
    ram_requested=target.getTotalMemory();
  }
  for (  HostVO h : hosts) {
    if (h.getStatus() == Status.Up) {
      if (_capacityMgr.checkIfHostHasCapacity(h.getId(),cpu_requested,ram_requested,false,cpuOverprovisioningFactor,true)) {
        s_logger.debug("Find host " + h.getId() + " has enough capacity");
        DataCenter dc=_dcDao.findById(h.getDataCenterId());
        Pod pod=_podDao.findById(h.getPodId());
        return new DeployDestination(dc,pod,cluster,h);
      }
    }
  }
  s_logger.warn(String.format("Cannot find enough capacity(requested cpu=%1$s memory=%2$s)",cpu_requested,ram_requested));
  return null;
}
