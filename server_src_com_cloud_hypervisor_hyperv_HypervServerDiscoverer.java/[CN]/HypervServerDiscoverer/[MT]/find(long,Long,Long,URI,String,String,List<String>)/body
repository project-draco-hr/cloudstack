{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Discover host. dc: " + dcId + ", pod: "+ podId+ ", cluster: "+ clusterId+ ", uri host: "+ url.getHost());
  }
  if (podId == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("No pod is assigned, skipping the discovery in Hyperv discoverer");
    }
    return null;
  }
  if (!url.getScheme().equals("http")) {
    String msg="urlString is not http so HypervServerDiscoverer taking care of the discovery for this: " + url;
    s_logger.debug(msg);
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.Hyperv) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("invalid cluster id or cluster is not for Hyperv hypervisors");
    }
    return null;
  }
  String clusterName=cluster.getName();
  try {
    String hostname=url.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + "-HypervResource";
    if (_hostDao.findByGuid(guidWithTail) != null) {
      s_logger.debug("Skipping " + agentIp + " because "+ guidWithTail+ " is already in the database.");
      return null;
    }
    NioClient _connection=new NioClient("HypervAgentClient",url.getHost(),9000,1,this);
    _connection.start();
    StartupVMMAgentCommand cmd=new StartupVMMAgentCommand(dcId,podId,clusterName,guid,InetAddress.getLocalHost().getHostAddress(),"8250",HypervServerDiscoverer.class.getPackage().getImplementationVersion());
    s_logger.info("sending bootstrap request to SCVMM agent on host " + url.getHost());
    Request request=new Request(0,0,cmd,false);
    Thread.currentThread().sleep(5000);
    _link.send(request.toBytes());
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null) {
      s_logger.info("SCVMM agent did not connect back after sending bootstrap request");
      return null;
    }
    s_logger.info("SCVMM agent connected back after sending bootstrap request");
    _connection.stop();
    Map<HypervDummyResourceBase,Map<String,String>> resources=new HashMap<HypervDummyResourceBase,Map<String,String>>();
    Map<String,String> details=new HashMap<String,String>();
    Map<String,Object> params=new HashMap<String,Object>();
    HypervDummyResourceBase resource=new HypervDummyResourceBase();
    details.put("url",url.getHost());
    details.put("username",username);
    details.put("password",password);
    resources.put(resource,details);
    params.put("zone",Long.toString(dcId));
    params.put("pod",Long.toString(podId));
    params.put("cluster",Long.toString(clusterId));
    resource.configure("Hyperv",params);
    return resources;
  }
 catch (  ConfigurationException e) {
    _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,"Unable to add " + url.getHost(),"Error is " + e.getMessage());
    s_logger.warn("Unable to instantiate " + url.getHost(),e);
  }
catch (  UnknownHostException e) {
    _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,"Unable to add " + url.getHost(),"Error is " + e.getMessage());
    s_logger.warn("Unable to instantiate " + url.getHost(),e);
  }
catch (  Exception e) {
    s_logger.info("exception " + e.toString());
  }
  return null;
}
