@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'], required_hardware='false')
def test_deployvm_multinic(self):
    'Test userdata update when non default nic is without userdata for deploy and update\n        '
    self.userdata = base64.b64encode(self.userdata)
    network1 = Network.create(self.apiclient, self.test_data['isolated_network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering_all.id, zoneid=self.zone.id)
    self.test_data['network_without_acl']['netmask'] = '255.255.255.128'
    network2 = Network.create(self.apiclient, self.test_data['network_without_acl'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering_nouserdata.id, gateway='10.2.1.1', zoneid=self.zone.id)
    deployVmResponse = VirtualMachine.create(self.apiclient, services=self.test_data['virtual_machine_userdata'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network1.id), str(network2.id)], templateid=self.template.id, zoneid=self.zone.id)
    vms = list_virtual_machines(self.apiclient, account=self.account.name, domainid=self.account.domainid, id=deployVmResponse.id)
    self.assert_((len(vms) > 0), ('There are no Vms deployed in the account %s' % self.account.name))
    vm = vms[0]
    self.assert_((vm.id == str(deployVmResponse.id)), 'Vm deployed is different from the test')
    self.assert_((vm.state == 'Running'), 'VM is not in Running state')
    try:
        updateresponse = deployVmResponse.update(self.apiclient, userdata=self.userdata)
    except Exception as e:
        self.fail(('Failed to update userdata: %s' % e))
    self.debug(('virtual machine update response is: %s' % updateresponse))
