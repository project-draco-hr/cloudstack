@classmethod
def setUpClass(cls):
    cls.testClient = super(TestDeployVmWithUserDataMultiNic, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.test_data = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.test_data['ostype'])
    if cls.zone.localstorageenabled:
        cls.storagetype = 'local'
        cls.test_data['service_offerings']['tiny']['storagetype'] = 'local'
    else:
        cls.storagetype = 'shared'
        cls.test_data['service_offerings']['tiny']['storagetype'] = 'shared'
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.test_data['service_offerings']['tiny'])
    cls.network_offering_nouserdata = NetworkOffering.create(cls.api_client, cls.test_data['network_offering'])
    cls.network_offering_nouserdata.update(cls.api_client, state='Enabled')
    cls.network_offering_all = NetworkOffering.create(cls.api_client, cls.test_data['isolated_network_offering'])
    cls.network_offering_all.update(cls.api_client, state='Enabled')
    cls._cleanup = [cls.service_offering, cls.network_offering_nouserdata, cls.network_offering_all]
    cls.userdata = ''.join((random.choice((string.ascii_uppercase + string.digits)) for x in range(2500)))
