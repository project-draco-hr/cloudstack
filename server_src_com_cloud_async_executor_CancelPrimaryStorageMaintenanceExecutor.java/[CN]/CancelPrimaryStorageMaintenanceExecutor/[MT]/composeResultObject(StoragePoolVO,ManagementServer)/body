{
  PrimaryStorageResultObject primaryStorageRO=new PrimaryStorageResultObject();
  primaryStorageRO.setId(storagePoolVO.getId());
  primaryStorageRO.setName(storagePoolVO.getName());
  primaryStorageRO.setType(storagePoolVO.getPoolType().toString());
  primaryStorageRO.setState(storagePoolVO.getStatus().toString());
  primaryStorageRO.setIpAddress(storagePoolVO.getHostAddress());
  primaryStorageRO.setZoneId(storagePoolVO.getDataCenterId());
  primaryStorageRO.setZoneName(managementServer.getDataCenterBy(storagePoolVO.getDataCenterId()).getName());
  if (storagePoolVO.getPodId() != null && managementServer.findHostPodById(storagePoolVO.getPodId()) != null) {
    primaryStorageRO.setPodId(storagePoolVO.getPodId());
    primaryStorageRO.setPodName((managementServer.findHostPodById(storagePoolVO.getPodId())).getName());
  }
  if (storagePoolVO.getCreated() != null) {
    primaryStorageRO.setCreated(storagePoolVO.getCreated());
  }
  primaryStorageRO.setDiskSizeTotal(storagePoolVO.getCapacityBytes());
  StorageStats stats=managementServer.getStoragePoolStatistics(storagePoolVO.getId());
  long capacity=storagePoolVO.getCapacityBytes();
  long available=storagePoolVO.getAvailableBytes();
  long used=capacity - available;
  if (stats != null) {
    used=stats.getByteUsed();
    available=capacity - used;
  }
  primaryStorageRO.setDiskSizeAllocated(used);
  if (storagePoolVO.getClusterId() != null) {
    ClusterVO cluster=managementServer.findClusterById(storagePoolVO.getClusterId());
    primaryStorageRO.setClusterId(storagePoolVO.getClusterId());
    primaryStorageRO.setClusterName(cluster.getName());
  }
  primaryStorageRO.setTags(managementServer.getStoragePoolTags(storagePoolVO.getId()));
  return primaryStorageRO;
}
