@classmethod
def setUpClass(cls):
    cls.logger = logging.getLogger('TestVPCRemoteAccessVPN')
    cls.stream_handler = logging.StreamHandler()
    cls.logger.setLevel(logging.DEBUG)
    cls.logger.addHandler(cls.stream_handler)
    testClient = super(TestVpcRemoteAccessVpn, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.domain = get_domain(cls.apiclient)
    cls.compute_offering = ServiceOffering.create(cls.apiclient, cls.services['compute_offering'])
    cls.account = Account.create(cls.apiclient, services=cls.services['account'])
    cls.hypervisor = cls.services['default_hypervisor']
    cls.logger.debug(('Downloading Template: %s from: %s' % (cls.services['template'][cls.hypervisor]['name'], cls.services['template'][cls.hypervisor]['url'])))
    cls.template = Template.register(cls.apiclient, cls.services['template'][cls.hypervisor], cls.zone.id, hypervisor=cls.hypervisor, account=cls.account.name, domainid=cls.domain.id)
    cls.template.download(cls.apiclient)
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['compute_offering'])
    cls.services['virtual_machine']['hypervisor'] = cls.services['default_hypervisor']
    cls.cleanup = [cls.account]
