@classmethod
def setUpClass(cls):
    cls.logger = logging.getLogger('TestVPCSite2SiteVPN')
    cls.stream_handler = logging.StreamHandler()
    cls.logger.setLevel(logging.DEBUG)
    cls.logger.addHandler(cls.stream_handler)
    testClient = super(TestVpcSite2SiteVpn, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.domain = get_domain(cls.apiclient)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['compute_offering'])
    cls.account = Account.create(cls.apiclient, services=cls.services['account'])
    if (cls.services['default_hypervisor'] == 'kvm'):
        cls.template = Template.register(cls.apiclient, cls.services['template_kvm'], cls.zone.id, hypervisor=cls.services['template_kvm']['hypervisor'], account=cls.account.name, domainid=cls.domain.id)
    else:
        cls.template = Template.register(cls.apiclient, cls.services['template_xen'], cls.zone.id, hypervisor=cls.services['template_xen']['hypervisor'], account=cls.account.name, domainid=cls.domain.id)
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['compute_offering'])
    cls.services['virtual_machine']['hypervisor'] = cls.services['default_hypervisor']
    cls.cleanup = [cls.account]
