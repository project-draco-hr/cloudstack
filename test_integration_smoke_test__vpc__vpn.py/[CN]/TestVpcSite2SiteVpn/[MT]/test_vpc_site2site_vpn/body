@attr(tags=['advanced'], required_hardware='false')
def test_vpc_site2site_vpn(self):
    'Test VPN in VPC'
    networkOffering = NetworkOffering.list(self.apiclient, name='DefaultIsolatedNetworkOfferingForVpcNetworks')
    self.assert_(((networkOffering is not None) and (len(networkOffering) > 0)), 'No VPC based network offering')
    vpcOffering = VpcOffering.list(self.apiclient, isdefault=True)
    self.assert_(((vpcOffering is not None) and (len(vpcOffering) > 0)), 'No VPC offerings found')
    try:
        try:
            vpc1 = VPC.create(apiclient=self.apiclient, services=self.services['vpc'], networkDomain='vpc1.vpn', vpcofferingid=vpcOffering[0].id, zoneid=self.zone.id, account=self.account.name, domainid=self.domain.id)
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((vpc1 is not None), 'VPC1 creation failed')
    self.logger.debug(('VPC1 %s created' % vpc1.id))
    try:
        try:
            vpc2 = VPC.create(apiclient=self.apiclient, services=self.services['vpc2'], networkDomain='vpc2.vpn', vpcofferingid=vpcOffering[0].id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((vpc2 is not None), 'VPC2 creation failed')
    self.logger.debug(('VPC2 %s created' % vpc2.id))
    default_acl = NetworkACLList.list(self.apiclient, name='default_allow')[0]
    try:
        try:
            ntwk1 = Network.create(apiclient=self.apiclient, services=self.services['network_1'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=networkOffering[0].id, zoneid=self.zone.id, vpcid=vpc1.id, aclid=default_acl.id)
        except Exception as e:
            self.fail(e)
    finally:
        self.assertIsNotNone(ntwk1, 'Network failed to create')
    self.logger.debug(('Network %s created in VPC %s' % (ntwk1.id, vpc1.id)))
    try:
        try:
            ntwk2 = Network.create(apiclient=self.apiclient, services=self.services['network_2'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=networkOffering[0].id, zoneid=self.zone.id, vpcid=vpc2.id, aclid=default_acl.id)
        except Exception as e:
            self.fail(e)
    finally:
        self.assertIsNotNone(ntwk2, 'Network failed to create')
    self.logger.debug(('Network %s created in VPC %s' % (ntwk2.id, vpc2.id)))
    try:
        try:
            vm1 = VirtualMachine.create(self.apiclient, services=self.services['virtual_machine'], templateid=self.template.id, zoneid=self.zone.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=ntwk1.id, hypervisor=self.services['virtual_machine']['hypervisor'])
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((vm1 is not None), 'VM failed to deploy')
        self.assert_((vm1.state == 'Running'), 'VM is not running')
    self.logger.debug(('VM %s deployed in VPC %s' % (vm1.id, vpc1.id)))
    try:
        try:
            vm2 = VirtualMachine.create(self.apiclient, services=self.services['virtual_machine'], templateid=self.template.id, zoneid=self.zone.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=ntwk2.id, hypervisor=self.services['virtual_machine']['hypervisor'])
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((vm2 is not None), 'VM failed to deploy')
        self.assert_((vm2.state == 'Running'), 'VM is not running')
    self.debug(('VM %s deployed in VPC %s' % (vm2.id, vpc2.id)))
    vpn1_response = Vpn.createVpnGateway(self.apiclient, vpc1.id)
    self.assert_((vpn1_response is not None), 'Failed to enable VPN Gateway 1')
    self.logger.debug(('VPN gateway for VPC %s enabled' % vpc1.id))
    vpn2_response = Vpn.createVpnGateway(self.apiclient, vpc2.id)
    self.assert_((vpn2_response is not None), 'Failed to enable VPN Gateway 2')
    self.logger.debug(('VPN gateway for VPC %s enabled' % vpc2.id))
    src_nat_list = PublicIPAddress.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True, issourcenat=True, vpcid=vpc1.id)
    ip1 = src_nat_list[0]
    src_nat_list = PublicIPAddress.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True, issourcenat=True, vpcid=vpc2.id)
    ip2 = src_nat_list[0]
    services = self.services['vpncustomergateway']
    customer1_response = VpnCustomerGateway.create(self.apiclient, services, 'Peer VPC1', ip1.ipaddress, vpc1.cidr, self.account.name, self.domain.id)
    self.debug(('VPN customer gateway added for VPC %s enabled' % vpc1.id))
    self.logger.debug(vars(customer1_response))
    customer2_response = VpnCustomerGateway.create(self.apiclient, services, 'Peer VPC2', ip2.ipaddress, vpc2.cidr, self.account.name, self.domain.id)
    self.debug(('VPN customer gateway added for VPC %s enabled' % vpc2.id))
    self.logger.debug(vars(customer2_response))
    vpnconn1_response = Vpn.createVpnConnection(self.apiclient, customer1_response.id, vpn2_response['id'], True)
    self.debug(('VPN passive connection created for VPC %s' % vpc2.id))
    vpnconn2_response = Vpn.createVpnConnection(self.apiclient, customer2_response.id, vpn1_response['id'])
    self.debug(('VPN connection created for VPC %s' % vpc1.id))
    self.assertEqual(vpnconn2_response['state'], 'Connected', 'Failed to connect between VPCs!')
    try:
        try:
            vm2.public_ip = PublicIPAddress.create(apiclient=self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, services=self.services, networkid=ntwk2.id, vpcid=vpc2.id)
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((vm2.public_ip is not None), 'Failed to aqcuire public ip for vm2')
    try:
        try:
            natrule = self.create_natrule(vpc2, vm2, 22, 22, vm2.public_ip, ntwk2)
        except Exception as e:
            self.fail(e)
    finally:
        self.assert_((natrule is not None), 'Failed to create portforward for vm2')
        time.sleep(10)
    ssh_client = self.get_ssh_client(vm2, self.services, 10)
    if ssh_client:
        packet_loss = ssh_client.execute((('/bin/ping -c 3 -t 10 ' + vm1.nic[0].ipaddress) + " |grep packet|cut -d ' ' -f 7| cut -f1 -d'%'"))[0]
        self.assert_((int(packet_loss) == 0), 'Ping did not succeed')
    else:
        self.fail(('Failed to setup ssh connection to %s' % vm2.public_ip))
