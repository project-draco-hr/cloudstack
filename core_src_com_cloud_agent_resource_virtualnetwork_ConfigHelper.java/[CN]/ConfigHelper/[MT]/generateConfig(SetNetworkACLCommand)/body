{
  final String privateGw=cmd.getAccessDetail(NetworkElementCommand.VPC_PRIVATE_GATEWAY);
  final String[][] rules=cmd.generateFwRules();
  final String[] aclRules=rules[0];
  final NicTO nic=cmd.getNic();
  final String dev="eth" + nic.getDeviceId();
  final String netmask=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  final List<AclRule> ingressRules=new ArrayList<AclRule>();
  final List<AclRule> egressRules=new ArrayList<AclRule>();
  for (int i=0; i < aclRules.length; i++) {
    AclRule aclRule;
    final String[] ruleParts=aclRules[i].split(":");
switch (ruleParts[1].toLowerCase()) {
case "icmp":
      aclRule=new IcmpAclRule(ruleParts[4],"ACCEPT".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
    break;
case "tcp":
  aclRule=new TcpAclRule(ruleParts[4],"ACCEPT".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case "udp":
aclRule=new UdpAclRule(ruleParts[4],"ACCEPT".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case "all":
aclRule=new AllAclRule(ruleParts[4],"ACCEPT".equals(ruleParts[5]));
break;
default :
aclRule=new ProtocolAclRule(ruleParts[4],"ACCEPT".equals(ruleParts[5]),Integer.parseInt(ruleParts[1]));
}
if ("Ingress".equals(ruleParts[0])) {
ingressRules.add(aclRule);
}
 else {
egressRules.add(aclRule);
}
}
final NetworkACL networkACL=new NetworkACL(dev,nic.getMac(),privateGw != null,nic.getIp(),netmask,ingressRules.toArray(new AclRule[ingressRules.size()]),egressRules.toArray(new AclRule[egressRules.size()]));
return generateConfigItems(networkACL);
}
