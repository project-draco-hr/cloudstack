{
  List<ConfigItem> cfg=new LinkedList<>();
  String destinationFile;
switch (configuration.getType()) {
case ConfigBase.FORWARDING_RULES:
    destinationFile=VRScripts.FORWARDING_RULES_CONFIG;
  break;
case ConfigBase.GUEST_NETWORK:
destinationFile=VRScripts.GUEST_NETWORK_CONFIG;
break;
case ConfigBase.IP_ASSOCIATION:
destinationFile=VRScripts.IP_ASSOCIATION_CONFIG;
break;
case ConfigBase.NETWORK_ACL:
destinationFile=VRScripts.NETWORK_ACL_CONFIG;
break;
case ConfigBase.STATICNAT_RULES:
destinationFile=VRScripts.STATICNAT_RULES_CONFIG;
break;
case ConfigBase.VM_DHCP:
destinationFile=VRScripts.VM_DHCP_CONFIG;
break;
case ConfigBase.VM_METADATA:
destinationFile=VRScripts.VM_METADATA_CONFIG;
break;
case ConfigBase.VM_PASSWORD:
destinationFile=VRScripts.VM_PASSWORD_CONFIG;
break;
case ConfigBase.VPN_USER_LIST:
destinationFile=VRScripts.VPN_USER_LIST_CONFIG;
break;
case ConfigBase.SITE2SITEVPN:
destinationFile=VRScripts.SITE_2_SITE_VPN_CONFIG;
break;
case ConfigBase.REMOTEACCESSVPN:
destinationFile=VRScripts.REMOTE_ACCESS_VPN_CONFIG;
break;
case ConfigBase.MONITORSERVICE:
destinationFile=VRScripts.MONITOR_SERVICE_CONFIG;
case ConfigBase.STATIC_ROUTES:
destinationFile=VRScripts.STATIC_ROUTES_CONFIG;
break;
case ConfigBase.DHCP_CONFIG:
destinationFile=VRScripts.DHCP_CONFIG;
break;
case ConfigBase.IP_ALIAS_CONFIG:
destinationFile=VRScripts.IP_ALIAS_CONFIG;
break;
default :
throw new CloudRuntimeException("Unable to process the configuration for " + configuration.getType());
}
ConfigItem configFile=new FileConfigItem(VRScripts.CONFIG_PERSIST_LOCATION,destinationFile,gson.toJson(configuration));
cfg.add(configFile);
ConfigItem updateCommand=new ScriptConfigItem(VRScripts.UPDATE_CONFIG,destinationFile);
cfg.add(updateCommand);
return cfg;
}
