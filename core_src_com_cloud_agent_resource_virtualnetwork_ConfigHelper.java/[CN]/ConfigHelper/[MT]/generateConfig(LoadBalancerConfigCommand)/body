{
  LinkedList<ConfigItem> cfg=new LinkedList<>();
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  LoadBalancerConfigurator cfgtr=new HAProxyConfigurator();
  String[] config=cfgtr.generateConfiguration(cmd);
  StringBuffer buff=new StringBuffer();
  for (int i=0; i < config.length; i++) {
    buff.append(config[i]);
    buff.append("\n");
  }
  String tmpCfgFilePath="/etc/haproxy/";
  String tmpCfgFileName="haproxy.cfg.new." + String.valueOf(System.currentTimeMillis());
  cfg.add(new FileConfigItem(tmpCfgFilePath,tmpCfgFileName,buff.toString()));
  String[][] rules=cfgtr.generateFwRules(cmd);
  String[] addRules=rules[LoadBalancerConfigurator.ADD];
  String[] removeRules=rules[LoadBalancerConfigurator.REMOVE];
  String[] statRules=rules[LoadBalancerConfigurator.STATS];
  String args=" -f " + tmpCfgFilePath + tmpCfgFileName;
  StringBuilder sb=new StringBuilder();
  if (addRules.length > 0) {
    for (int i=0; i < addRules.length; i++) {
      sb.append(addRules[i]).append(',');
    }
    args+=" -a " + sb.toString();
  }
  sb=new StringBuilder();
  if (removeRules.length > 0) {
    for (int i=0; i < removeRules.length; i++) {
      sb.append(removeRules[i]).append(',');
    }
    args+=" -d " + sb.toString();
  }
  sb=new StringBuilder();
  if (statRules.length > 0) {
    for (int i=0; i < statRules.length; i++) {
      sb.append(statRules[i]).append(',');
    }
    args+=" -s " + sb.toString();
  }
  if (cmd.getVpcId() == null) {
    args=" -i " + routerIp + args;
    cfg.add(new ScriptConfigItem(VRScripts.LB,args));
  }
 else {
    args=" -i " + cmd.getNic().getIp() + args;
    cfg.add(new ScriptConfigItem(VRScripts.VPC_LB,args));
  }
  return cfg;
}
