{
  InputStream stream;
  SSLContext sslContext=null;
  KeyManagerFactory kmf=KeyManagerFactory.getInstance("SunX509");
  TrustManagerFactory tmf=TrustManagerFactory.getInstance("SunX509");
  KeyStore ks=KeyStore.getInstance("JKS");
  TrustManager[] tms;
  File confFile=PropertiesUtil.findConfigFile("db.properties");
  if (null != confFile && !isClient) {
    final String pass=DbProperties.getDbProperties().getProperty("db.cloud.keyStorePassphrase");
    char[] passphrase="vmops.com".toCharArray();
    if (pass != null) {
      passphrase=pass.toCharArray();
    }
    String confPath=confFile.getParent();
    String keystorePath=confPath + keystoreFile;
    if (new File(keystorePath).exists()) {
      stream=new FileInputStream(keystorePath);
    }
 else {
      s_logger.warn("SSL: Fail to find the generated keystore. Loading fail-safe one to continue.");
      stream=NioConnection.class.getResourceAsStream("/cloud.keystore");
      passphrase="vmops.com".toCharArray();
    }
    ks.load(stream,passphrase);
    stream.close();
    kmf.init(ks,passphrase);
    tmf.init(ks);
    tms=tmf.getTrustManagers();
  }
 else {
    ks.load(null,null);
    kmf.init(ks,null);
    tms=new TrustManager[1];
    tms[0]=new TrustAllManager();
  }
  sslContext=SSLUtils.getSSLContext();
  sslContext.init(kmf.getKeyManagers(),tms,null);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("SSL: SSLcontext has been initialized");
  }
  return sslContext;
}
