{
  if (socketChannel == null || sslEngine == null || myNetData == null || peerNetData == null || myAppData == null || netBufferSize < 0) {
    return false;
  }
  myNetData.clear();
  SSLEngineResult result=null;
  try {
    result=sslEngine.wrap(myAppData,myNetData);
  }
 catch (  SSLException sslException) {
    s_logger.error("SSL error occurred while processing wrap data: " + sslException.getMessage());
    sslEngine.closeOutbound();
    return true;
  }
switch (result.getStatus()) {
case OK:
    myNetData.flip();
  while (myNetData.hasRemaining()) {
    socketChannel.write(myNetData);
  }
break;
case BUFFER_OVERFLOW:
myNetData=enlargeBuffer(myNetData,netBufferSize);
break;
case BUFFER_UNDERFLOW:
throw new SSLException("Buffer underflow occurred after a wrap. We should not reach here.");
case CLOSED:
try {
myNetData.flip();
while (myNetData.hasRemaining()) {
socketChannel.write(myNetData);
}
peerNetData.clear();
}
 catch (Exception e) {
s_logger.error("Failed to send server's CLOSE message due to socket channel's failure.");
}
break;
default :
throw new IllegalStateException("Invalid SSL status: " + result.getStatus());
}
return true;
}
