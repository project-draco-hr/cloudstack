{
  ManagementServer mgr=getManagementServer();
  long instanceId=0;
  AsyncJobVO job=null;
  boolean interruped=false;
  try {
    boolean quit=false;
    while (!quit) {
      job=mgr.findAsyncJobById(jobId);
      if (job == null) {
        s_logger.error("Async command " + this.getClass().getName() + " waitInstanceCreation error: job-"+ jobId+ " no longer exists");
        break;
      }
switch (job.getStatus()) {
case AsyncJobResult.STATUS_IN_PROGRESS:
        if (job.getProcessStatus() == BaseCmd.PROGRESS_INSTANCE_CREATED) {
          Long id=(Long)SerializerHelper.fromSerializedString(job.getResult());
          if (id != null) {
            instanceId=id.longValue();
            if (s_logger.isDebugEnabled())             s_logger.debug("Async command " + this.getClass().getName() + " succeeded in waiting for new instance to be created, instance Id: "+ instanceId);
          }
 else {
            s_logger.warn("Async command " + this.getClass().getName() + " has new instance created, but value as null?");
          }
          quit=true;
        }
      break;
case AsyncJobResult.STATUS_SUCCEEDED:
    instanceId=getInstanceIdFromJobSuccessResult(job.getResult());
  quit=true;
break;
case AsyncJobResult.STATUS_FAILED:
s_logger.error("Async command " + this.getClass().getName() + " executing job-"+ jobId+ " failed, result: "+ job.getResult());
quit=true;
break;
}
if (quit) break;
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
interruped=true;
}
}
}
  finally {
if (interruped) Thread.currentThread().interrupt();
}
return instanceId;
}
