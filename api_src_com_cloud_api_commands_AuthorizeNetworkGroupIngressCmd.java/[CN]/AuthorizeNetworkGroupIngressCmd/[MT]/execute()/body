{
  List<? extends IngressRule> ingressRules=_networkGroupMgr.authorizeNetworkGroupIngress(this);
  ListResponse<IngressRuleResponse> response=new ListResponse<IngressRuleResponse>();
  if ((ingressRules != null) && !ingressRules.isEmpty()) {
    List<IngressRuleResponse> responses=new ArrayList<IngressRuleResponse>();
    for (    IngressRule ingressRule : ingressRules) {
      IngressRuleResponse ingressData=new IngressRuleResponse();
      ingressData.setRuleId(ingressRule.getId());
      ingressData.setProtocol(ingressRule.getProtocol());
      if ("icmp".equalsIgnoreCase(ingressRule.getProtocol())) {
        ingressData.setIcmpType(ingressRule.getStartPort());
        ingressData.setIcmpCode(ingressRule.getEndPort());
      }
 else {
        ingressData.setStartPort(ingressRule.getStartPort());
        ingressData.setEndPort(ingressRule.getEndPort());
      }
      if (ingressRule.getAllowedNetworkGroup() != null) {
        ingressData.setNetworkGroupName(ingressRule.getAllowedNetworkGroup());
        ingressData.setAccountName(ingressRule.getAllowedNetGrpAcct());
      }
 else {
        ingressData.setCidr(ingressRule.getAllowedSourceIpCidr());
      }
      ingressData.setObjectName("ingressrule");
      responses.add(ingressData);
    }
    response.setResponses(responses);
    response.setResponseName("securitygroupingressrule");
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to authorize network group ingress rule");
  }
}
