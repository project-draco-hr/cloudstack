def _generate_x(self):
    q = ((self.p - 1) // 2)
    qnorm = util.deflate_long(q, 0)
    qhbyte = ord(qnorm[0])
    bytes = len(qnorm)
    qmask = 255
    while (not (qhbyte & 128)):
        qhbyte <<= 1
        qmask >>= 1
    while True:
        self.transport.randpool.stir()
        x_bytes = self.transport.randpool.get_bytes(bytes)
        x_bytes = (chr((ord(x_bytes[0]) & qmask)) + x_bytes[1:])
        x = util.inflate_long(x_bytes, 1)
        if ((x > 1) and (x < q)):
            break
    self.x = x
