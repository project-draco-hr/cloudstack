{
  UploadEntity uploadEntity=null;
  try {
    if (uploadEntityStateMap.containsKey(uuid)) {
      uploadEntity=uploadEntityStateMap.get(uuid);
      if (uploadEntity.getUploadState() == UploadEntity.Status.ERROR) {
        s_logger.debug("received data write requres for a uplod entity in error state. Ignoring.");
      }
 else       if (uploadEntity.getUploadState() == UploadEntity.Status.COMPLETED) {
        s_logger.debug("received a write request for entity which is alredy downloaded. Ignoring.");
      }
 else       if (uploadEntity.getUploadState() == UploadEntity.Status.IN_PROGRESS) {
        uploadEntity.getFilewriter().write(data);
        uploadEntity.incremetByteCount(data.length);
        if (uploadEntity.getDownloadedsize() == uploadEntity.getEntitysize()) {
          postUpload(uploadEntity);
        }
 else {
          uploadEntity.setStatus(UploadEntity.Status.IN_PROGRESS);
        }
      }
    }
 else {
      uploadEntity=new UploadEntity(uuid,entityId,entitySize,UploadEntity.Status.IN_PROGRESS,entityName,installPathPrefix);
      uploadEntity.setResourceType("volume".equalsIgnoreCase(resourceType) ? UploadEntity.ResourceType.VOLUME : UploadEntity.ResourceType.TEMPLATE);
      uploadEntity.setFormat(formatMap.get(imageFormat.toLowerCase()));
      uploadEntity.setTemplatePath(installPathPrefix);
      installPathPrefix=_resource.getRootDir(dataStoreUrl) + File.separator + installPathPrefix;
      uploadEntity.setInstallPathPrefix(installPathPrefix);
      uploadEntity.setEntitysize(entitySize);
      uploadEntity.setHvm(isHvm);
      uploadEntity.setFilename(entityName);
      if (!_storage.exists(installPathPrefix)) {
        _storage.mkdir(installPathPrefix);
      }
      File tempFile=File.createTempFile("dnld_",entityName,new File(installPathPrefix));
      uploadEntity.setFile(tempFile);
      FileOutputStream filewriter=new FileOutputStream(tempFile.getAbsolutePath());
      uploadEntity.setFilewriter(filewriter);
      filewriter.write(data);
      uploadEntity.setFile(tempFile);
      uploadEntity.incremetByteCount(data.length);
      uploadEntityStateMap.put(uuid,uploadEntity);
      if (uploadEntity.getDownloadedsize() == uploadEntity.getEntitysize()) {
        postUpload(uploadEntity);
      }
 else {
        uploadEntity.setStatus(UploadEntity.Status.IN_PROGRESS);
      }
    }
  }
 catch (  Exception e) {
    uploadEntity.setErrorMessage(e.getMessage());
    uploadEntity.setStatus(UploadEntity.Status.ERROR);
    try {
      uploadEntity.getFilewriter().close();
    }
 catch (    Exception io) {
      s_logger.debug("exception occured when closing a file object " + io.getMessage());
    }
    s_logger.debug("exception occured while writing to a file " + e);
  }
}
