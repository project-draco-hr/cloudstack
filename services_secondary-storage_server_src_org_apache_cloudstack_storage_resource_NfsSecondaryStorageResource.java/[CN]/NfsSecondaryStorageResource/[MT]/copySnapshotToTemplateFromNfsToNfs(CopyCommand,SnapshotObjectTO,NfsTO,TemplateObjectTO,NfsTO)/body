{
  if (srcData.getHypervisorType() == HypervisorType.XenServer) {
    return copySnapshotToTemplateFromNfsToNfsXenserver(cmd,srcData,srcDataStore,destData,destDataStore);
  }
 else   if (srcData.getHypervisorType() == HypervisorType.KVM) {
    File srcFile=getFile(srcData.getPath(),srcDataStore.getUrl());
    File destFile=getFile(destData.getPath(),destDataStore.getUrl());
    VolumeObjectTO volumeObjectTO=srcData.getVolume();
    ImageFormat srcFormat=null;
    if (volumeObjectTO != null) {
      srcFormat=volumeObjectTO.getFormat();
    }
 else {
      srcFormat=ImageFormat.QCOW2;
    }
    String templateName=srcFile.getName();
    String fileName=templateName + "." + srcFormat.getFileExtension();
    String destFileFullPath=destFile.getAbsolutePath() + File.separator + fileName;
    s_logger.debug("copy snapshot " + srcFile.getAbsolutePath() + " to template "+ destFileFullPath);
    Script.runSimpleBashScript("cp " + srcFile.getAbsolutePath() + " "+ destFileFullPath);
    try {
      String metaFileName=destFile.getAbsolutePath() + File.separator + "template.properties";
      _storage.create(destFile.getAbsolutePath(),"template.properties");
      File metaFile=new File(metaFileName);
      FileWriter writer=new FileWriter(metaFile);
      BufferedWriter bufferWriter=new BufferedWriter(writer);
      bufferWriter.write("uniquename=" + destData.getName());
      bufferWriter.write("\n");
      bufferWriter.write("filename=" + fileName);
      bufferWriter.write("\n");
      long size=_storage.getSize(destFileFullPath);
      bufferWriter.write("size=" + size);
      bufferWriter.close();
      writer.close();
      Processor processor=null;
      if (srcFormat == ImageFormat.QCOW2) {
        processor=new QCOW2Processor();
      }
 else       if (srcFormat == ImageFormat.RAW) {
        processor=new RawImageProcessor();
      }
 else {
        throw new ConfigurationException("Unknown image format " + srcFormat.toString());
      }
      Map<String,Object> params=new HashMap<String,Object>();
      params.put(StorageLayer.InstanceConfigKey,_storage);
      processor.configure("template processor",params);
      String destPath=destFile.getAbsolutePath();
      FormatInfo info=processor.process(destPath,null,templateName);
      TemplateLocation loc=new TemplateLocation(_storage,destPath);
      loc.create(1,true,destData.getName());
      loc.addFormat(info);
      loc.save();
      TemplateProp prop=loc.getTemplateInfo();
      TemplateObjectTO newTemplate=new TemplateObjectTO();
      newTemplate.setPath(destData.getPath() + File.separator + fileName);
      newTemplate.setFormat(srcFormat);
      newTemplate.setSize(prop.getSize());
      newTemplate.setPhysicalSize(prop.getPhysicalSize());
      return new CopyCmdAnswer(newTemplate);
    }
 catch (    ConfigurationException e) {
      s_logger.debug("Failed to create template:" + e.toString());
      return new CopyCmdAnswer(e.toString());
    }
catch (    IOException e) {
      s_logger.debug("Failed to create template:" + e.toString());
      return new CopyCmdAnswer(e.toString());
    }
catch (    InternalErrorException e) {
      s_logger.debug("Failed to create template:" + e.toString());
      return new CopyCmdAnswer(e.toString());
    }
  }
  return new CopyCmdAnswer("");
}
