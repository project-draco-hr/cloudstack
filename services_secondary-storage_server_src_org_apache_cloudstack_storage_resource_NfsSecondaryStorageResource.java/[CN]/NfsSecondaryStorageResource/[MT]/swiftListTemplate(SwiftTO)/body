{
  String[] containers=SwiftUtil.list(swift,"",null);
  if (containers == null) {
    return null;
  }
  Map<String,TemplateProp> tmpltInfos=new HashMap<String,TemplateProp>();
  for (  String container : containers) {
    if (container.startsWith("T-")) {
      String[] files=SwiftUtil.list(swift,container,"template.properties");
      if (files.length != 1) {
        continue;
      }
      try {
        File tempFile=File.createTempFile("template",".tmp");
        File tmpFile=SwiftUtil.getObject(swift,tempFile,container + File.separator + "template.properties");
        if (tmpFile == null) {
          continue;
        }
        try (FileReader fr=new FileReader(tmpFile);BufferedReader brf=new BufferedReader(fr)){
          String line=null;
          String uniqName=null;
          Long size=null;
          String name=null;
          while ((line=brf.readLine()) != null) {
            if (line.startsWith("uniquename=")) {
              uniqName=line.split("=")[1];
            }
 else             if (line.startsWith("size=")) {
              size=Long.parseLong(line.split("=")[1]);
            }
 else             if (line.startsWith("filename=")) {
              name=line.split("=")[1];
            }
          }
          tempFile.delete();
          if (uniqName != null) {
            TemplateProp prop=new TemplateProp(uniqName,container + File.separator + name,size,size,true,false);
            tmpltInfos.put(uniqName,prop);
          }
        }
 catch (        IOException ex) {
          s_logger.debug("swiftListTemplate:Exception:" + ex.getMessage());
          continue;
        }
      }
 catch (      IOException e) {
        s_logger.debug("Failed to create templ file:" + e.toString());
        continue;
      }
catch (      Exception e) {
        s_logger.debug("Failed to get properties: " + e.toString());
        continue;
      }
    }
  }
  return tmpltInfos;
}
