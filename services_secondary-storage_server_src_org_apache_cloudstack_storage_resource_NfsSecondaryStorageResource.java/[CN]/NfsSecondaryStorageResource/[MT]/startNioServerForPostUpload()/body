{
  final int port=8210;
  HttpProcessor httpproc=HttpProcessorBuilder.create().add(new ResponseDate()).add(new ResponseServer("HTTP/1.1")).add(new ResponseContent()).add(new ResponseConnControl()).build();
  UriHttpAsyncRequestHandlerMapper reqistry=new UriHttpAsyncRequestHandlerMapper();
  reqistry.register("/upload*",new PostUploadRequestHandler(_params,this,_dlMgr));
  HttpAsyncService protocolHandler=new HttpAsyncService(httpproc,reqistry){
    @Override public void connected(    final NHttpServerConnection conn){
      s_logger.info(conn + ": connection open");
      super.connected(conn);
    }
    @Override public void closed(    final NHttpServerConnection conn){
      s_logger.info(conn + ": connection closed");
      super.closed(conn);
    }
  }
;
  NHttpConnectionFactory<DefaultNHttpServerConnection> connFactory;
  connFactory=new DefaultNHttpServerConnectionFactory(ConnectionConfig.DEFAULT);
  final IOEventDispatch ioEventDispatch=new DefaultHttpServerIODispatch(protocolHandler,connFactory);
  IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(15).setSoTimeout(3000).setConnectTimeout(3000).build();
  final ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
  new Thread(){
    @Override public void run(){
      ioReactor.listen(new InetSocketAddress(port));
      try {
        ioReactor.execute(ioEventDispatch);
      }
 catch (      IOException e) {
        throw new RuntimeException("Exception while starting the post upload server on port: " + port);
      }
      s_logger.info("Nio server for post upload on port: " + port + " is shutdown.");
    }
  }
.start();
  s_logger.info("Started Nioserver for post upload on port: " + port);
}
