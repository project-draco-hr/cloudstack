{
  if (certs == null) {
    configureSSL();
  }
 else {
    String prvKey=certs.getPrivKey();
    String pubCert=certs.getPrivCert();
    String certChain=certs.getCertChain();
    String rootCACert=certs.getRootCACert();
    try {
      File prvKeyFile=File.createTempFile("prvkey",null);
      String prvkeyPath=prvKeyFile.getAbsolutePath();
      BufferedWriter out=new BufferedWriter(new FileWriter(prvKeyFile));
      out.write(prvKey);
      out.close();
      File pubCertFile=File.createTempFile("pubcert",null);
      String pubCertFilePath=pubCertFile.getAbsolutePath();
      out=new BufferedWriter(new FileWriter(pubCertFile));
      out.write(pubCert);
      out.close();
      String certChainFilePath=null, rootCACertFilePath=null;
      File certChainFile=null, rootCACertFile=null;
      if (certChain != null) {
        certChainFile=File.createTempFile("certchain",null);
        certChainFilePath=certChainFile.getAbsolutePath();
        out=new BufferedWriter(new FileWriter(certChainFile));
        out.write(certChain);
        out.close();
      }
      if (rootCACert != null) {
        rootCACertFile=File.createTempFile("rootcert",null);
        rootCACertFilePath=rootCACertFile.getAbsolutePath();
        out=new BufferedWriter(new FileWriter(rootCACertFile));
        out.write(rootCACert);
        out.close();
      }
      configureSSL(prvkeyPath,pubCertFilePath,certChainFilePath,rootCACertFilePath);
      prvKeyFile.delete();
      pubCertFile.delete();
      if (certChainFile != null) {
        certChainFile.delete();
      }
      if (rootCACertFile != null) {
        rootCACertFile.delete();
      }
    }
 catch (    IOException e) {
      s_logger.debug("Failed to config ssl: " + e.toString());
    }
  }
}
