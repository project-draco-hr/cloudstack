{
  Assume.assumeTrue(isOpenJdk() || isJCEInstalled());
  String certFile=getClass().getResource("/certs/rsa_ca_signed.crt").getFile();
  String keyFile=getClass().getResource("/certs/rsa_ca_signed.key").getFile();
  String chainFile=getClass().getResource("/certs/non_root.crt").getFile();
  String cert=readFileToString(new File(certFile));
  String key=readFileToString(new File(keyFile));
  String chain=readFileToString(new File(chainFile));
  CertServiceImpl certService=new CertServiceImpl();
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._domainDao=Mockito.mock(DomainDao.class);
  DomainVO domain=new DomainVO("networkdomain",1L,1L,"networkdomain");
  when(certService._domainDao.findByIdIncludingRemoved(anyLong())).thenReturn(domain);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.persist(any(SslCertVO.class))).thenReturn(new SslCertVO());
  UploadSslCertCmd uploadCmd=new UploadSslCertCmdExtn();
  Class<?> _class=uploadCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("cert");
  certField.setAccessible(true);
  certField.set(uploadCmd,cert);
  Field keyField=_class.getDeclaredField("key");
  keyField.setAccessible(true);
  keyField.set(uploadCmd,key);
  Field chainField=_class.getDeclaredField("chain");
  chainField.setAccessible(true);
  chainField.set(uploadCmd,chain);
  try {
    certService.uploadSslCert(uploadCmd);
    fail("Chain is given but does not link to the certificate");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("Invalid certificate chain"));
  }
}
