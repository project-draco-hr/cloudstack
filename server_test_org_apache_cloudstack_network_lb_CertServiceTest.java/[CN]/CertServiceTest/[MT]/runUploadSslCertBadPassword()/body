{
  String certFile=getClass().getResource("/certs/rsa_self_signed_with_pwd.crt").getFile();
  String keyFile=getClass().getResource("/certs/rsa_self_signed_with_pwd.key").getFile();
  String password="bad_password";
  String cert=URLEncoder.encode(readFileToString(new File(certFile)),"UTF-8");
  String key=URLEncoder.encode(readFileToString(new File(keyFile)),"UTF-8");
  CertServiceImpl certService=new CertServiceImpl();
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.persist(any(SslCertVO.class))).thenReturn(new SslCertVO());
  UploadSslCertCmd uploadCmd=new UploadSslCertCmdExtn();
  Class<?> _class=uploadCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("cert");
  certField.setAccessible(true);
  certField.set(uploadCmd,cert);
  Field keyField=_class.getDeclaredField("key");
  keyField.setAccessible(true);
  keyField.set(uploadCmd,key);
  Field passField=_class.getDeclaredField("password");
  passField.setAccessible(true);
  passField.set(uploadCmd,password);
  try {
    certService.uploadSslCert(uploadCmd);
    fail("Given an encrypted private key with a bad password. Upload should fail.");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("please check password and data"));
  }
}
