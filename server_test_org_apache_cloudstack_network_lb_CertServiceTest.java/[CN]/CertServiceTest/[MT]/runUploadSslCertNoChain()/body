{
  Assume.assumeTrue(isOpenJdk() || isJCEInstalled());
  String certFile=getClass().getResource("/certs/rsa_ca_signed.crt").getFile();
  String keyFile=getClass().getResource("/certs/rsa_ca_signed.key").getFile();
  String password="user";
  String cert=readFileToString(new File(certFile));
  String key=readFileToString(new File(keyFile));
  CertServiceImpl certService=new CertServiceImpl();
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.persist(any(SslCertVO.class))).thenReturn(new SslCertVO());
  UploadSslCertCmd uploadCmd=new UploadSslCertCmdExtn();
  Class<?> _class=uploadCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("cert");
  certField.setAccessible(true);
  certField.set(uploadCmd,cert);
  Field keyField=_class.getDeclaredField("key");
  keyField.setAccessible(true);
  keyField.set(uploadCmd,key);
  Field passField=_class.getDeclaredField("password");
  passField.setAccessible(true);
  passField.set(uploadCmd,password);
  try {
    certService.uploadSslCert(uploadCmd);
    fail("If no chain is given, the certificate should be self signed. Else, uploadShould Fail");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("No chain given and certificate not self signed"));
  }
}
