{
  TransactionLegacy txn=TransactionLegacy.open("runDeleteSslCertBoundCert");
  CertServiceImpl certService=new CertServiceImpl();
  long certId=1;
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._domainDao=Mockito.mock(DomainDao.class);
  DomainVO domain=new DomainVO("networkdomain",1L,1L,"networkdomain");
  when(certService._domainDao.findByIdIncludingRemoved(anyLong())).thenReturn(domain);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.remove(anyLong())).thenReturn(true);
  when(certService._sslCertDao.findById(anyLong())).thenReturn(new SslCertVO());
  certService._lbCertDao=Mockito.mock(LoadBalancerCertMapDao.class);
  List<LoadBalancerCertMapVO> lbMapList=new ArrayList<LoadBalancerCertMapVO>();
  lbMapList.add(new LoadBalancerCertMapVO());
  certService._lbCertDao=Mockito.mock(LoadBalancerCertMapDao.class);
  when(certService._lbCertDao.listByCertId(anyLong())).thenReturn(lbMapList);
  certService._entityMgr=Mockito.mock(EntityManager.class);
  when(certService._entityMgr.findById(eq(LoadBalancerVO.class),anyLong())).thenReturn(new LoadBalancerVO());
  DeleteSslCertCmd deleteCmd=new DeleteSslCertCmdExtn();
  Class<?> _class=deleteCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("id");
  certField.setAccessible(true);
  certField.set(deleteCmd,certId);
  try {
    certService.deleteSslCert(deleteCmd);
    fail("Delete with a cert id bound to a lb should fail");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("Certificate in use by a loadbalancer"));
  }
}
