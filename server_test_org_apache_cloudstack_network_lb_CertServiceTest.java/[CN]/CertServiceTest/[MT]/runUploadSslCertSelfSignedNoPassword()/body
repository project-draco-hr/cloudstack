{
  TransactionLegacy txn=TransactionLegacy.open("runUploadSslCertSelfSignedNoPassword");
  String certFile=getClass().getResource("/certs/rsa_self_signed.crt").getFile();
  String keyFile=getClass().getResource("/certs/rsa_self_signed.key").getFile();
  String cert=readFileToString(new File(certFile));
  String key=readFileToString(new File(keyFile));
  CertServiceImpl certService=new CertServiceImpl();
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.persist(any(SslCertVO.class))).thenReturn(new SslCertVO());
  certService._accountDao=Mockito.mock(AccountDao.class);
  when(certService._accountDao.findByIdIncludingRemoved(anyLong())).thenReturn((AccountVO)account);
  UploadSslCertCmd uploadCmd=new UploadSslCertCmdExtn();
  Class<?> _class=uploadCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("cert");
  certField.setAccessible(true);
  certField.set(uploadCmd,cert);
  Field keyField=_class.getDeclaredField("key");
  keyField.setAccessible(true);
  keyField.set(uploadCmd,key);
  certService.uploadSslCert(uploadCmd);
}
