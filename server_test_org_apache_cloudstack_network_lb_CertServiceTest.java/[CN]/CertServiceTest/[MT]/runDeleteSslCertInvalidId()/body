{
  TransactionLegacy txn=TransactionLegacy.open("runDeleteSslCertInvalidId");
  long certId=1;
  CertServiceImpl certService=new CertServiceImpl();
  certService._accountMgr=Mockito.mock(AccountManager.class);
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);
  certService._sslCertDao=Mockito.mock(SslCertDao.class);
  when(certService._sslCertDao.remove(anyLong())).thenReturn(true);
  when(certService._sslCertDao.findById(anyLong())).thenReturn(null);
  certService._lbCertDao=Mockito.mock(LoadBalancerCertMapDao.class);
  when(certService._lbCertDao.listByCertId(anyLong())).thenReturn(null);
  DeleteSslCertCmd deleteCmd=new DeleteSslCertCmdExtn();
  Class<?> _class=deleteCmd.getClass().getSuperclass();
  Field certField=_class.getDeclaredField("id");
  certField.setAccessible(true);
  certField.set(deleteCmd,certId);
  try {
    certService.deleteSslCert(deleteCmd);
    fail("Delete with an invalid ID should fail");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("Invalid certificate id"));
  }
}
