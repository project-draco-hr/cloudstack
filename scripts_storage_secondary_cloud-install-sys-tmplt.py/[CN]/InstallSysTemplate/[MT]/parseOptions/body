def parseOptions(self):
    self.parser = argparse.ArgumentParser(prog='System Template Installer')
    self.parser.add_argument('-m', '--mount-point', action='store', dest='mountpoint', help='Secondary Storage Mount Point where to install the temlate.', required='true')
    self.parser.add_argument('-H', '--hypervisor', action='store', dest='hypervisor', help='The Hypervisor name for which template need to be installed', required='true', choices=['kvm', 'xenserver', 'vmware', 'lxc', 'hyperv'])
    group = self.parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-f', '--system-vm-template', action='store', dest='systemvmtemplatepath', help='The local system vm template file path')
    group.add_argument('-u', '--system-vm-template-url', action='store', dest='systemvmtemplateurl', help='Url to download system vm template')
    self.parser.add_argument('-s', '--management-secret-key', action='store', dest='managementsecretkey', help='mgmt server secret key, if you specified any when running cloudstack-setup-database, default is password', default='password')
    self.parser.add_argument('-F', '--force-clean-up', action='store_true', dest='forcecleanup', help='clean up system templates of specified hypervisor', default='false')
    self.parser.add_argument('-d', '--database-host-name', action='store', dest='databasehostname', help='Database server hostname or ip, e.g localhost', default='localhost', required='true')
    self.parser.add_argument('-r', '--database-user-name', action='store', dest='databaseusername', help='Database user name, e.g root', default='root', required='true')
    self.parser.add_argument('-p', '--database-user-password', nargs='?', action='store', dest='databaseuserpassword', help='Database password. Followed by nothing if the password is empty', default='', required='true')
    self.parser.add_argument('-e', '--template-suffix', action='store', dest='templatesuffix', help='Template suffix, e.g vhd, ova, qcow2', default='vhd')
    self.parser.add_argument('-t', '--file-extension', action='store', dest='fileextension', help='The template file extension', default='', required='true', choices=['bz2', 'gz', 'zip'])
    self.args = self.parser.parse_args()
