{
  _name=name;
  String publicNic=(String)params.get("public.network.device");
  if (publicNic == null) {
    publicNic="xenbr1";
  }
  String privateNic=(String)params.get("private.network.device");
  if (privateNic == null) {
    privateNic="xenbr0";
  }
  final String storageNic=(String)params.get("storage.network.device");
  final String storageNic2=(String)params.get("storage.network.device.2");
  _privateNic=getNetworkInterface(privateNic);
  _publicNic=getNetworkInterface(publicNic);
  _storageNic=getNetworkInterface(storageNic);
  _storageNic2=getNetworkInterface(storageNic2);
  if (_privateNic == null) {
    s_logger.error("Nics are not configured!");
    Enumeration<NetworkInterface> nics=null;
    try {
      nics=NetworkInterface.getNetworkInterfaces();
      if (nics == null || !nics.hasMoreElements()) {
        throw new ConfigurationException("Private NIC is not configured");
      }
    }
 catch (    final SocketException e) {
      throw new ConfigurationException("Private NIC is not configured");
    }
    while (nics.hasMoreElements()) {
      final NetworkInterface nic=nics.nextElement();
      final String nicName=nic.getName();
      if (!nic.isVirtual() && !nicName.startsWith("vnif") && !nicName.startsWith("vnbr")&& !nicName.startsWith("peth")&& !nicName.startsWith("vif")&& !nicName.startsWith("virbr")&& !nicName.contains(":")) {
        final String[] info=NetUtils.getNicParams(nicName);
        if (info != null && info[0] != null) {
          _privateNic=nic;
          s_logger.info("Designating private to be nic " + nicName);
          break;
        }
      }
      s_logger.debug("Skipping nic " + nicName);
    }
    if (_privateNic == null) {
      throw new ConfigurationException("Private NIC is not configured");
    }
  }
  String infos[]=NetUtils.getNetworkParams(_privateNic);
  params.put("host.ip",infos[0]);
  params.put("host.mac.address",infos[1]);
  return true;
}
