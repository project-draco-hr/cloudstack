@attr(hypervisor='XenServer')
def test_04_create_volume_snapshot_using_sf_snapshot_and_archiving(self):
    sf_util.set_supports_resign(True, self.dbConnection)
    virtual_machine = VirtualMachine.create(self.apiClient, self.testdata[TestData.virtualMachine], accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=self.template.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_1_root_volume = list_volumes_response[0]
    vm_1_root_volume_name = vm_1_root_volume.name
    sf_account_id = sf_util.get_sf_account_id(self.cs_api, self.account.id, self.primary_storage.id, self, TestSnapshots._sf_account_id_should_be_non_zero_int_err_msg)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    sf_snapshots = self.sfe.list_snapshots(volume_id=sf_volume.volume_id).snapshots
    sf_util.check_list(sf_snapshots, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    primary_storage_db_id = self._get_cs_storage_pool_db_id(self.primary_storage)
    vol_snap_1_archive = self._create_and_test_archive_snapshot(vm_1_root_volume.id, sf_volume)
    vol_snap_2 = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 1, TestSnapshots._should_only_be_one_snapshot_in_list_err_msg)
    vol_snap_3_archive = self._create_and_test_archive_snapshot(vm_1_root_volume.id, sf_volume)
    vol_snap_4 = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 2, TestSnapshots._should_be_two_snapshots_in_list_err_msg)
    self._delete_and_test_archive_snapshot(vol_snap_3_archive)
    self._delete_and_test_snapshot(vol_snap_2)
    self._delete_and_test_snapshot(vol_snap_4)
    self._delete_and_test_archive_snapshot(vol_snap_1_archive)
    vol_snap_1_archive = self._create_and_test_archive_snapshot(vm_1_root_volume.id, sf_volume)
    vol_snap_2 = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 1, TestSnapshots._should_only_be_one_snapshot_in_list_err_msg)
    virtual_machine.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    self._delete_and_test_archive_snapshot(vol_snap_1_archive)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    self._delete_and_test_snapshot(vol_snap_2)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 0, self, TestSnapshots._should_be_zero_volumes_in_list_err_msg)
    virtual_machine = VirtualMachine.create(self.apiClient, self.testdata[TestData.virtualMachine], accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=self.template.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_1_root_volume = list_volumes_response[0]
    vm_1_root_volume_name = vm_1_root_volume.name
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    sf_snapshots = self.sfe.list_snapshots(volume_id=sf_volume.volume_id).snapshots
    sf_util.check_list(sf_snapshots, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    vol_snap_1 = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 1, TestSnapshots._should_only_be_one_snapshot_in_list_err_msg)
    vol_snap_2_archive = self._create_and_test_archive_snapshot(vm_1_root_volume.id, sf_volume)
    vol_snap_3 = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 2, TestSnapshots._should_be_two_snapshots_in_list_err_msg)
    vol_snap_4_archive = self._create_and_test_archive_snapshot(vm_1_root_volume.id, sf_volume)
    services = {'displaytext': 'Template-1', 'name': 'Template-1-name', 'ostype': 'CentOS 5.6 (64-bit)', 'ispublic': 'true', }
    template = Template.create_from_snapshot(self.apiClient, vol_snap_2_archive, services)
    self.cleanup.append(template)
    virtual_machine_dict = {'name': 'TestVM2', 'displayname': 'Test VM 2', }
    virtual_machine_2 = VirtualMachine.create(self.apiClient, virtual_machine_dict, accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=template.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine_2.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_2_root_volume = list_volumes_response[0]
    vm_2_root_volume_name = vm_2_root_volume.name
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 2, self, TestSnapshots._should_be_two_volumes_in_list_err_msg)
    sf_volume_2 = self._get_sf_volume_by_name(sf_volumes, vm_2_root_volume_name)
    sf_snapshots_2 = self.sfe.list_snapshots(volume_id=sf_volume_2.volume_id).snapshots
    sf_util.check_list(sf_snapshots_2, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    vol_snap_a_archive = self._create_and_test_archive_snapshot(vm_2_root_volume.id, sf_volume_2)
    services = {'diskname': 'Vol-1', 'zoneid': self.testdata[TestData.zoneId], 'ispublic': True, }
    volume_created_from_snapshot = Volume.create_from_snapshot(self.apiClient, vol_snap_a_archive.id, services, account=self.account.name, domainid=self.domain.id)
    volume_created_from_snapshot_name = volume_created_from_snapshot.name
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 3, self, TestSnapshots._should_be_three_volumes_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    sf_volume_2 = self._get_sf_volume_by_name(sf_volumes, vm_2_root_volume_name)
    sf_volume_3 = self._get_sf_volume_by_name(sf_volumes, volume_created_from_snapshot_name)
    sf_util.check_list(sf_volume_3.volume_access_groups, 0, self, TestSnapshots._should_be_zero_volume_access_groups_in_list_err_msg)
    volume_created_from_snapshot = virtual_machine.attach_volume(self.apiClient, volume_created_from_snapshot)
    self._delete_and_test_archive_snapshot(vol_snap_a_archive)
    virtual_machine.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 3, self, TestSnapshots._should_be_three_volumes_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    sf_volume_2 = self._get_sf_volume_by_name(sf_volumes, vm_2_root_volume_name)
    sf_volume_3 = self._get_sf_volume_by_name(sf_volumes, volume_created_from_snapshot_name)
    volume_created_from_snapshot = virtual_machine_2.attach_volume(self.apiClient, volume_created_from_snapshot)
    self._delete_and_test_archive_snapshot(vol_snap_4_archive)
    self._delete_and_test_snapshot(vol_snap_1)
    self._delete_and_test_archive_snapshot(vol_snap_2_archive)
    self._delete_and_test_snapshot(vol_snap_3)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 2, self, TestSnapshots._should_be_two_volumes_in_list_err_msg)
    sf_volume_2 = self._get_sf_volume_by_name(sf_volumes, vm_2_root_volume_name)
    sf_volume_3 = self._get_sf_volume_by_name(sf_volumes, volume_created_from_snapshot_name)
    virtual_machine_2.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume_3 = self._get_sf_volume_by_name(sf_volumes, volume_created_from_snapshot_name)
    list_volumes_response = list_volumes(self.apiClient, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    data_volume = list_volumes_response[0]
    data_volume = Volume(data_volume.__dict__)
    data_volume.delete(self.apiClient)
    sf_volumes = sf_util.get_active_sf_volumes(self.sfe, sf_account_id)
    sf_util.check_list(sf_volumes, 0, self, TestSnapshots._should_be_zero_volumes_in_list_err_msg)
