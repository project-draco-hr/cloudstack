@attr(hypervisor='XenServer')
def test_03_create_volume_snapshot_using_sf_volume_and_sf_snapshot(self):
    sf_util.set_supports_resign(False, self.dbConnection)
    virtual_machine = VirtualMachine.create(self.apiClient, self.testdata[TestData.virtualMachine], accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=self.template.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_1_root_volume = list_volumes_response[0]
    vm_1_root_volume_name = vm_1_root_volume.name
    sf_account_id = sf_util.get_sf_account_id(self.cs_api, self.account.id, self.primary_storage.id, self, TestSnapshots._sf_account_id_should_be_non_zero_int_err_msg)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    sf_volume = self._get_sf_volume_by_name(sf_volumes, vm_1_root_volume_name)
    sf_snapshots = self.sf_client.list_snapshots(volume_id=sf_volume['volumeID'])
    sf_util.check_list(sf_snapshots, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    primary_storage_db_id = self._get_cs_storage_pool_db_id(self.primary_storage)
    sf_volume_id = sf_volume['volumeID']
    sf_volume_size = sf_volume['totalSize']
    vol_snap_1 = self._create_and_test_snapshot_2(vm_1_root_volume.id, sf_volume_id, (sf_volume_id + 1), primary_storage_db_id, sf_volume_size, sf_account_id, 2, TestSnapshots._should_be_two_volumes_in_list_err_msg)
    vol_snap_2 = self._create_and_test_snapshot_2(vm_1_root_volume.id, sf_volume_id, (sf_volume_id + 2), primary_storage_db_id, sf_volume_size, sf_account_id, 3, TestSnapshots._should_be_three_volumes_in_list_err_msg)
    sf_util.set_supports_resign(True, self.dbConnection)
    vol_snap_a = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 1, TestSnapshots._should_only_be_one_snapshot_in_list_err_msg)
    vol_snap_b = self._create_and_test_snapshot(vm_1_root_volume.id, sf_volume, primary_storage_db_id, 2, TestSnapshots._should_be_two_snapshots_in_list_err_msg)
    services = {'displaytext': 'Template-1', 'name': 'Template-1-name', 'ostype': 'CentOS 5.6 (64-bit)', 'ispublic': 'true', }
    template_1 = Template.create_from_snapshot(self.apiClient, vol_snap_1, services)
    self.cleanup.append(template_1)
    virtual_machine_dict = {'name': 'TestVM2', 'displayname': 'Test VM 2', }
    virtual_machine_2 = VirtualMachine.create(self.apiClient, virtual_machine_dict, accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=template_1.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine_2.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_2_root_volume = list_volumes_response[0]
    vm_2_root_volume_name = vm_2_root_volume.name
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 4, self, TestSnapshots._should_be_four_volumes_in_list_err_msg)
    sf_volume_2 = self._get_sf_volume_by_name(sf_volumes, vm_2_root_volume_name)
    sf_snapshots = self.sf_client.list_snapshots(volume_id=sf_volume_2['volumeID'])
    sf_util.check_list(sf_snapshots, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    services = {'diskname': 'Vol-1', 'zoneid': self.testdata[TestData.zoneId], 'size': 100, 'ispublic': True, }
    volume_created_from_snapshot_1 = Volume.create_from_snapshot(self.apiClient, vol_snap_2.id, services, account=self.account.name, domainid=self.domain.id)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 5, self, TestSnapshots._should_be_five_volumes_in_list_err_msg)
    volume_created_from_snapshot_1 = virtual_machine_2.attach_volume(self.apiClient, volume_created_from_snapshot_1)
    services = {'displaytext': 'Template-A', 'name': 'Template-A-name', 'ostype': 'CentOS 5.6 (64-bit)', 'ispublic': 'true', }
    template_a = Template.create_from_snapshot(self.apiClient, vol_snap_a, services)
    self.cleanup.append(template_a)
    virtual_machine_dict = {'name': 'TestVM3', 'displayname': 'Test VM 3', }
    virtual_machine_3 = VirtualMachine.create(self.apiClient, virtual_machine_dict, accountid=self.account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=template_a.id, domainid=self.domain.id, startvm=True)
    list_volumes_response = list_volumes(self.apiClient, virtualmachineid=virtual_machine_3.id, listall=True)
    sf_util.check_list(list_volumes_response, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    vm_3_root_volume = list_volumes_response[0]
    vm_3_root_volume_name = vm_3_root_volume.name
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 6, self, TestSnapshots._should_be_six_volumes_in_list_err_msg)
    sf_volume_3 = self._get_sf_volume_by_name(sf_volumes, vm_3_root_volume_name)
    sf_snapshots = self.sf_client.list_snapshots(volume_id=sf_volume_3['volumeID'])
    sf_util.check_list(sf_snapshots, 0, self, TestSnapshots._should_be_zero_snapshots_in_list_err_msg)
    services = {'diskname': 'Vol-A', 'zoneid': self.testdata[TestData.zoneId], 'size': 100, 'ispublic': True, }
    volume_created_from_snapshot_a = Volume.create_from_snapshot(self.apiClient, vol_snap_b.id, services, account=self.account.name, domainid=self.domain.id)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 7, self, TestSnapshots._should_be_seven_volumes_in_list_err_msg)
    volume_created_from_snapshot_a = virtual_machine_3.attach_volume(self.apiClient, volume_created_from_snapshot_a)
    virtual_machine.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 7, self, TestSnapshots._should_be_seven_volumes_in_list_err_msg)
    virtual_machine_2.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 6, self, TestSnapshots._should_be_six_volumes_in_list_err_msg)
    virtual_machine_3.delete(self.apiClient, True)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 5, self, TestSnapshots._should_be_five_volumes_in_list_err_msg)
    data_volume = Volume(volume_created_from_snapshot_a.__dict__)
    data_volume.delete(self.apiClient)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 4, self, TestSnapshots._should_be_four_volumes_in_list_err_msg)
    data_volume = Volume(volume_created_from_snapshot_1.__dict__)
    data_volume.delete(self.apiClient)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 3, self, TestSnapshots._should_be_three_volumes_in_list_err_msg)
    self._delete_and_test_snapshot_2(vol_snap_1, sf_account_id, 2, TestSnapshots._should_be_two_volumes_in_list_err_msg)
    self._delete_and_test_snapshot(vol_snap_b)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 2, self, TestSnapshots._should_be_two_volumes_in_list_err_msg)
    self._delete_and_test_snapshot(vol_snap_a)
    sf_volumes = sf_util.get_active_sf_volumes(self.sf_client, sf_account_id)
    sf_util.check_list(sf_volumes, 1, self, TestSnapshots._should_only_be_one_volume_in_list_err_msg)
    self._delete_and_test_snapshot_2(vol_snap_2, sf_account_id, 0, TestSnapshots._should_be_zero_volumes_in_list_err_msg)
