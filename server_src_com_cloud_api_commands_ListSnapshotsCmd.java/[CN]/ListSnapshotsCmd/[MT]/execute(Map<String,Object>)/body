{
  Long volumeId=(Long)params.get(BaseCmd.Properties.VOLUME_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  String interval=(String)params.get(BaseCmd.Properties.INTERVAL_TYPE.getName());
  String snapshotType=(String)params.get(BaseCmd.Properties.SNAPSHOT_TYPE.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  if (volumeId != null) {
    VolumeVO volume=getManagementServer().findAnyVolumeById(volumeId);
    if (volume == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a volume with id " + volumeId);
    }
    checkAccountPermissions(params,volume.getAccountId(),volume.getDomainId(),"volume",volumeId);
  }
  Long accountId=null;
  if ((account == null) || isAdmin(account.getType())) {
    if (account != null && account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)     accountId=account.getId();
    if (domainId != null && accountName != null) {
      Account userAccount=getManagementServer().findAccountByName(accountName,domainId);
      if (userAccount != null) {
        accountId=userAccount.getId();
      }
    }
  }
 else {
    accountId=account.getId();
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("created",Boolean.FALSE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.VOLUMEID,volumeId);
  c.addCriteria(Criteria.TYPE,snapshotType);
  c.addCriteria(Criteria.NAME,name);
  c.addCriteria(Criteria.ID,id);
  c.addCriteria(Criteria.KEYWORD,keyword);
  c.addCriteria(Criteria.ACCOUNTID,accountId);
  List<SnapshotVO> snapshots=null;
  try {
    snapshots=getManagementServer().listSnapshots(c,interval);
  }
 catch (  InvalidParameterValueException e) {
    throw new ServerApiException(SNAPSHOT_INVALID_PARAM_ERROR,e.getMessage());
  }
  if (snapshots == null) {
    throw new ServerApiException(BaseCmd.SNAPSHOT_LIST_ERROR,"unable to find snapshots for volume with id " + volumeId);
  }
  Object[] snapshotTag=new Object[snapshots.size()];
  int i=0;
  for (  Snapshot snapshot : snapshots) {
    List<Pair<String,Object>> snapshotData=new ArrayList<Pair<String,Object>>();
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),snapshot.getId().toString()));
    Account acct=getManagementServer().findAccountById(Long.valueOf(snapshot.getAccountId()));
    if (acct != null) {
      snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),acct.getAccountName()));
      snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),Long.toString(acct.getDomainId())));
      snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(acct.getDomainId()).getName()));
    }
    volumeId=snapshot.getVolumeId();
    VolumeVO volume=getManagementServer().findAnyVolumeById(volumeId);
    String snapshotTypeStr=SnapshotType.values()[snapshot.getSnapshotType()].name();
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.SNAPSHOT_TYPE.getName(),snapshotTypeStr));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),volumeId));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_NAME.getName(),volume.getName()));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_TYPE.getName(),volume.getVolumeType()));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(snapshot.getCreated())));
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),snapshot.getName()));
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob("snapshot",snapshot.getId());
    if (asyncJob != null) {
      snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),asyncJob.getId().toString()));
      snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(asyncJob.getStatus())));
    }
    snapshotData.add(new Pair<String,Object>(BaseCmd.Properties.INTERVAL_TYPE.getName(),getManagementServer().getSnapshotIntervalTypes(snapshot.getId())));
    snapshotTag[i++]=snapshotData;
  }
  List<Pair<String,Object>> returnTags=new ArrayList<Pair<String,Object>>();
  Pair<String,Object> snapshotTags=new Pair<String,Object>("snapshot",snapshotTag);
  returnTags.add(snapshotTags);
  return returnTags;
}
