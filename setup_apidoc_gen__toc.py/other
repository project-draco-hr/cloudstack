import os
import os.path
import sys
from xml.dom import minidom
from xml.parsers.expat import ExpatError
REGULAR_USER = 'u'
DOMAIN_ADMIN = 'd'
ROOT_ADMIN = 'r'
user_to_func = {REGULAR_USER: 'populateForUser', DOMAIN_ADMIN: 'populateForDomainAdmin', ROOT_ADMIN: 'populateForRootAdmin', }
user_to_cns = {REGULAR_USER: 'userCommandNames', DOMAIN_ADMIN: 'domainAdminCommandNames', ROOT_ADMIN: 'rootAdminCommandNames', }
dirname_to_user = {'regular_user': REGULAR_USER, 'domain_admin': DOMAIN_ADMIN, 'root_admin': ROOT_ADMIN, }
dirname_to_dirname = {'regular_user': 'user', 'domain_admin': 'domain_admin', 'root_admin': 'root_admin', }
known_categories = {'SystemVm': 'System VM', 'VirtualMachine': 'Virtual Machine', 'VM': 'Virtual Machine', 'Domain': 'Domain', 'Template': 'Template', 'Iso': 'ISO', 'Volume': 'Volume', 'Vlan': 'VLAN', 'IpAddress': 'Address', 'PortForwarding': 'Firewall', 'Firewall': 'Firewall', 'StaticNat': 'NAT', 'IpForwarding': 'NAT', 'Host': 'Host', 'Cluster': 'Cluster', 'Account': 'Account', 'Snapshot': 'Snapshot', 'User': 'User', 'Os': 'Guest OS', 'ServiceOffering': 'Service Offering', 'DiskOffering': 'Disk Offering', 'LoadBalancer': 'Load Balancer', 'Router': 'Router', 'SystemVm': 'System VM', 'Configuration': 'Configuration', 'Capabilities': 'Configuration', 'Pod': 'Pod', 'Zone': 'Zone', 'NetworkOffering': 'Network Offering', 'Network': 'Network', 'CiscoNexus': 'Network', 'Vpn': 'VPN', 'Limit': 'Limit', 'ResourceCount': 'Limit', 'CloudIdentifier': 'Cloud Identifier', 'InstanceGroup': 'VM Group', 'StorageMaintenance': 'Storage Pool', 'StoragePool': 'Storage Pool', 'SecurityGroup': 'Security Group', 'SSH': 'SSH', 'register': 'Registration', 'AsyncJob': 'Async job', 'Certificate': 'Certificate', 'Hypervisor': 'Hypervisor', 'Alert': 'Alert', 'Event': 'Event', 'login': 'Login', 'logout': 'Logout', 'Capacity': 'System Capacity', 'NetworkDevice': 'Network Device', 'ExternalLoadBalancer': 'Ext Load Balancer', 'ExternalFirewall': 'Ext Firewall', 'Usage': 'Usage', 'TrafficMonitor': 'Usage', 'TrafficType': 'Usage', 'Product': 'Product', 'LB': 'Load Balancer', 'ldap': 'LDAP', 'Swift': 'Swift', 'SecondaryStorage': 'Host', 'Project': 'Project', 'Lun': 'Storage', 'Pool': 'Pool', }
categories = {}
for f in sys.argv:
    (dirname, fn) = os.path.split(f)
    if (not fn.endswith('.xml')):
        continue
    if fn.endswith('Summary.xml'):
        continue
    if fn.endswith('SummarySorted.xml'):
        continue
    if (fn == 'alert_types.xml'):
        continue
    if dirname.startswith('./'):
        dirname = dirname[2:]
    try:
        dom = minidom.parse(file(f))
        name = dom.getElementsByTagName('name')[0].firstChild.data
        isAsync = dom.getElementsByTagName('isAsync')[0].firstChild.data
        category = choose_category(fn)
        if (category not in categories):
            categories[category] = []
        categories[category].append({'name': name, 'dirname': dirname_to_dirname[dirname], 'async': (isAsync == 'true'), 'user': dirname_to_user[dirname], })
    except ExpatError as e:
        pass
    except IndexError as e:
        print fn
write_xml('generatetocforuser_include.xsl', REGULAR_USER)
write_xml('generatetocforadmin_include.xsl', ROOT_ADMIN)
write_xml('generatetocfordomainadmin_include.xsl', DOMAIN_ADMIN)
write_java('XmlToHtmlConverterData.java')
