{
  String[] ipRange=new String[2];
  if (pod.getDescription() != null && pod.getDescription().length() > 0) {
    ipRange=pod.getDescription().split("-");
  }
 else {
    ipRange[0]=pod.getDescription();
  }
  PodResponse podResponse=new PodResponse();
  podResponse.setId(pod.getId());
  podResponse.setName(pod.getName());
  podResponse.setZoneId(pod.getDataCenterId());
  podResponse.setZoneName(PodZoneConfig.getZoneName(pod.getDataCenterId()));
  podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));
  podResponse.setStartIp(ipRange[0]);
  podResponse.setEndIp(((ipRange.length > 1) && (ipRange[1] != null)) ? ipRange[1] : "");
  podResponse.setGateway(pod.getGateway());
  podResponse.setAllocationState(pod.getAllocationState().toString());
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,pod.getId(),null);
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      capacityResponses.add(capacityResponse);
    }
    podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  podResponse.setObjectName("pod");
  return podResponse;
}
