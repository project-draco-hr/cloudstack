{
  LoadBalancerResponse lbResponse=new LoadBalancerResponse();
  lbResponse.setId(loadBalancer.getUuid());
  lbResponse.setName(loadBalancer.getName());
  lbResponse.setDescription(loadBalancer.getDescription());
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(loadBalancer.getId());
  lbResponse.setCidrList(StringUtils.join(cidrs,","));
  IPAddressVO publicIp=ApiDBUtils.findIpAddressById(loadBalancer.getSourceIpAddressId());
  lbResponse.setPublicIpId(publicIp.getUuid());
  lbResponse.setPublicIp(publicIp.getAddress().addr());
  lbResponse.setPublicPort(Integer.toString(loadBalancer.getSourcePortStart()));
  lbResponse.setPrivatePort(Integer.toString(loadBalancer.getDefaultPortStart()));
  lbResponse.setAlgorithm(loadBalancer.getAlgorithm());
  FirewallRule.State state=loadBalancer.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet="Deleting";
  }
  lbResponse.setState(stateToSet);
  populateOwner(lbResponse,loadBalancer);
  DataCenter zone=ApiDBUtils.findZoneById(publicIp.getDataCenterId());
  if (zone != null) {
    lbResponse.setZoneId(zone.getUuid());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,loadBalancer.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  Network ntwk=ApiDBUtils.findNetworkById(loadBalancer.getNetworkId());
  lbResponse.setNetworkId(ntwk.getUuid());
  lbResponse.setObjectName("loadbalancer");
  return lbResponse;
}
