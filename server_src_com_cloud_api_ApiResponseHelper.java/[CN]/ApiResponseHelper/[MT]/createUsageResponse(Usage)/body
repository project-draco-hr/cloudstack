{
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,usageRecord.getVmInstanceId());
    usageRecResponse.setVirtualMachineId(vm.getUuid());
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findById(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(vm.getUuid());
    usageRecResponse.setType(usageRecord.getType());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals("SourceNat")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findById(IPAddressVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(ip.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals("DomainRouter")) {
      VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,usageRecord.getUsageId().toString());
      usageRecResponse.setUsageId(vm.getUuid());
    }
 else {
      HostVO host=_entityMgr.findById(HostVO.class,usageRecord.getUsageId().toString());
      usageRecResponse.setUsageId(host.getUuid());
    }
    NetworkVO network=_entityMgr.findById(NetworkVO.class,usageRecord.getNetworkId().toString());
    usageRecResponse.setNetworkId(network.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    usageRecResponse.setVirtualMachineId(vm.getUuid());
    VolumeVO volume=_entityMgr.findById(VolumeVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(volume.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findById(VolumeVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(volume.getUuid());
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findById(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findById(VMTemplateVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(tmpl.getUuid());
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findById(SnapshotVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(snap.getUuid());
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findById(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(lb.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findById(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(pf.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findById(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findById(VpnUserVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(vpnUser.getUuid());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findById(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(sg.getUuid());
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat("###########.######");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}
