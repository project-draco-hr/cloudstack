{
  Account account=UserContext.current().getCaller();
  ZoneResponse zoneResponse=new ZoneResponse();
  zoneResponse.setId(dataCenter.getId());
  zoneResponse.setName(dataCenter.getName());
  zoneResponse.setSecurityGroupsEnabled(ApiDBUtils.isSecurityGroupEnabledInZone(dataCenter.getId()));
  if ((dataCenter.getDescription() != null) && !dataCenter.getDescription().equalsIgnoreCase("null")) {
    zoneResponse.setDescription(dataCenter.getDescription());
  }
  if ((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN)) {
    zoneResponse.setDns1(dataCenter.getDns1());
    zoneResponse.setDns2(dataCenter.getDns2());
    zoneResponse.setInternalDns1(dataCenter.getInternalDns1());
    zoneResponse.setInternalDns2(dataCenter.getInternalDns2());
    zoneResponse.setVlan(dataCenter.getVnet());
    zoneResponse.setGuestCidrAddress(dataCenter.getGuestNetworkCidr());
  }
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(dataCenter.getId(),null,null);
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      capacityResponses.add(capacityResponse);
    }
    zoneResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  zoneResponse.setDomain(dataCenter.getDomain());
  zoneResponse.setDomainId(dataCenter.getDomainId());
  zoneResponse.setType(dataCenter.getNetworkType().toString());
  zoneResponse.setAllocationState(dataCenter.getAllocationState().toString());
  zoneResponse.setZoneToken(dataCenter.getZoneToken());
  zoneResponse.setDhcpProvider(dataCenter.getDhcpProvider());
  zoneResponse.setObjectName("zone");
  return zoneResponse;
}
