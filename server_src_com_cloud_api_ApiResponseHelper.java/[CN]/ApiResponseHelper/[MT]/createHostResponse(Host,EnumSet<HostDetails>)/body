{
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getId());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterId());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getDataCenterId());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodId());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
    if (guestOSCategory != null) {
      hostResponse.setOsCategoryId(guestOSCategory.getId());
      hostResponse.setOsCategoryName(guestOSCategory.getName());
    }
    hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
    if (host.getPodId() != null) {
      HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
      if (pod != null) {
        hostResponse.setPodName(pod.getName());
      }
    }
    if (host.getClusterId() != null) {
      ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
      hostResponse.setClusterName(cluster.getName());
      hostResponse.setClusterType(cluster.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat("#.##");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_MEMORY);
      Long cpu=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_CPU);
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      hostResponse.setHostTags(ApiDBUtils.getHostTags(host.getId()));
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + "%";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + "%";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events="";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+="; ";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setObjectName("host");
  return hostResponse;
}
