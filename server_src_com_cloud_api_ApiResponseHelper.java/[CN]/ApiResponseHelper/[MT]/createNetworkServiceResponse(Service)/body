{
  ServiceResponse response=new ServiceResponse();
  response.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Capability[] capabilities=service.getCapabilities();
  for (  Capability cap : capabilities) {
    CapabilityResponse capabilityResponse=new CapabilityResponse();
    capabilityResponse.setName(cap.getName());
    capabilityResponse.setObjectName("capability");
    if (cap.getName().equals(Capability.SupportedLBIsolation.getName()) || cap.getName().equals(Capability.SupportedSourceNatTypes.getName()) || cap.getName().equals(Capability.RedundantRouter.getName())) {
      capabilityResponse.setCanChoose(true);
    }
 else {
      capabilityResponse.setCanChoose(false);
    }
    capabilityResponses.add(capabilityResponse);
  }
  response.setCapabilities(capabilityResponses);
  List<? extends Network.Provider> serviceProviders=ApiDBUtils.getProvidersForService(service);
  List<ProviderResponse> serviceProvidersResponses=new ArrayList<ProviderResponse>();
  for (  Network.Provider serviceProvider : serviceProviders) {
    if (service == Service.Firewall && !(serviceProvider == Provider.VirtualRouter || serviceProvider == Provider.JuniperSRX)) {
      continue;
    }
    ProviderResponse serviceProviderResponse=createServiceProviderResponse(serviceProvider);
    serviceProvidersResponses.add(serviceProviderResponse);
  }
  response.setProviders(serviceProvidersResponses);
  response.setObjectName("networkservice");
  return response;
}
