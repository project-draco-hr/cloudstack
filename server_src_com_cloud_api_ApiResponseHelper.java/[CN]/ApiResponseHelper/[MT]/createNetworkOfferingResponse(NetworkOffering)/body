{
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getId());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setMaxconnections(offering.getConcurrentConnections());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setAvailability(offering.getAvailability().toString());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<String,Set<String>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  String service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    svcRsp.setName(service);
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    String provider : serviceProviderMap.get(service)) {
      ProviderResponse providerRsp=new ProviderResponse();
      providerRsp.setName(provider);
      providers.add(providerRsp);
    }
    svcRsp.setProviders(providers);
    if (Service.Lb.getName().equalsIgnoreCase(service)) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? "dedicated" : "shared");
      lbCapResponse.add(lbIsoaltion);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.Firewall.getName().equalsIgnoreCase(service)) {
      List<CapabilityResponse> fwCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedLBIsolation.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? "perzone" : "peraccount");
      fwCapResponse.add(sharedSourceNat);
      svcRsp.setCapabilities(fwCapResponse);
    }
 else     if (Service.Gateway.getName().equalsIgnoreCase(service)) {
      List<CapabilityResponse> gatewayCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? "true" : "false");
      gatewayCapResponse.add(redundantRouter);
      svcRsp.setCapabilities(gatewayCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName("networkoffering");
  return response;
}
