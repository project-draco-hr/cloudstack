{
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName("");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null && volume.getState() != Volume.State.Destroy) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    if (vm != null) {
      volResponse.setVirtualMachineId(vm.getId());
      volResponse.setVirtualMachineName(vm.getHostName());
      UserVm userVm=ApiDBUtils.findUserVmById(vm.getId());
      if (userVm != null) {
        volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());
        volResponse.setVirtualMachineState(vm.getState().toString());
      }
 else {
        s_logger.error("User Vm with Id: " + instanceId + " does not exist for volume "+ volume.getId());
      }
    }
 else {
      s_logger.error("Vm with Id: " + instanceId + " does not exist for volume "+ volume.getId());
    }
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  populateOwner(volResponse,volume);
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType="shared";
      }
 else {
        storageType="unknown";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ServiceOffering.StorageType.shared.toString() : ServiceOffering.StorageType.local.toString();
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Volume " + volume.getName() + " does not have a valid ID");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? "none" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  Account caller=UserContext.current().getCaller();
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  }
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && !(template.getTemplateType() == TemplateType.SYSTEM);
  volResponse.setExtractable(isExtractable);
  volResponse.setObjectName("volume");
  return volResponse;
}
