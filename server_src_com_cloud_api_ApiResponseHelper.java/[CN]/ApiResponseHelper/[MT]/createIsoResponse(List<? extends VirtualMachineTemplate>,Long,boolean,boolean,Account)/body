{
  Map<Long,List<VMTemplateHostVO>> isoHostsMap=new HashMap<Long,List<VMTemplateHostVO>>();
  for (  VirtualMachineTemplate iso : isos) {
    List<VMTemplateHostVO> isoHosts=ApiDBUtils.listTemplateHostBy(iso.getId(),zoneId);
    if (iso.getName().equals("xs-tools.iso")) {
      List<Long> xstoolsZones=new ArrayList<Long>();
      List<VMTemplateHostVO> xstoolsHosts=new ArrayList<VMTemplateHostVO>();
      for (      VMTemplateHostVO isoHost : isoHosts) {
        HostVO host=ApiDBUtils.findHostById(isoHost.getHostId());
        if (!xstoolsZones.contains(Long.valueOf(host.getDataCenterId()))) {
          xstoolsZones.add(Long.valueOf(host.getDataCenterId()));
          xstoolsHosts.add(isoHost);
        }
      }
      isoHostsMap.put(iso.getId(),xstoolsHosts);
    }
 else {
      isoHostsMap.put(iso.getId(),isoHosts);
    }
  }
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> isoResponses=new ArrayList<TemplateResponse>();
  for (  VirtualMachineTemplate iso : isos) {
    List<VMTemplateHostVO> isoHosts=isoHostsMap.get(iso.getId());
    for (    VMTemplateHostVO isoHost : isoHosts) {
      if (onlyReady && isoHost.getDownloadState() != Status.DOWNLOADED) {
        continue;
      }
      TemplateResponse isoResponse=new TemplateResponse();
      isoResponse.setId(iso.getId());
      isoResponse.setName(iso.getName());
      isoResponse.setDisplayText(iso.getDisplayText());
      isoResponse.setPublic(iso.isPublicTemplate());
      isoResponse.setCreated(isoHost.getCreated());
      isoResponse.setReady(isoHost.getDownloadState() == Status.DOWNLOADED);
      isoResponse.setBootable(iso.isBootable());
      isoResponse.setFeatured(iso.isFeatured());
      isoResponse.setCrossZones(iso.isCrossZones());
      isoResponse.setPublic(iso.isPublicTemplate());
      GuestOS os=ApiDBUtils.findGuestOSById(iso.getGuestOSId());
      if (os != null) {
        isoResponse.setOsTypeId(os.getId());
        isoResponse.setOsTypeName(os.getDisplayName());
      }
 else {
        isoResponse.setOsTypeId(-1L);
        isoResponse.setOsTypeName("");
      }
      Account owner=ApiDBUtils.findAccountById(iso.getAccountId());
      if (owner != null) {
        isoResponse.setAccount(owner.getAccountName());
        isoResponse.setDomainId(owner.getDomainId());
        isoResponse.setDomainName(ApiDBUtils.findDomainById(owner.getDomainId()).getName());
      }
      HostVO host=ApiDBUtils.findHostById(isoHost.getHostId());
      DataCenterVO datacenter=ApiDBUtils.findZoneById(host.getDataCenterId());
      isoResponse.setZoneId(host.getDataCenterId());
      isoResponse.setZoneName(datacenter.getName());
      if (isAdmin || account.getId() == iso.getAccountId()) {
        if (isoHost.getDownloadState() != Status.DOWNLOADED) {
          String isoStatus="Processing";
          if (isoHost.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {
            isoStatus="Download Complete";
          }
 else           if (isoHost.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {
            if (isoHost.getDownloadPercent() == 100) {
              isoStatus="Installing ISO";
            }
 else {
              isoStatus=isoHost.getDownloadPercent() + "% Downloaded";
            }
          }
 else {
            isoStatus=isoHost.getErrorString();
          }
          isoResponse.setStatus(isoStatus);
        }
 else {
          isoResponse.setStatus("Successfully Installed");
        }
      }
      long isoSize=isoHost.getSize();
      if (isoSize > 0) {
        isoResponse.setSize(isoSize);
      }
      AsyncJobVO asyncJob=ApiDBUtils.findInstancePendingAsyncJob("vm_template",iso.getId());
      if (asyncJob != null) {
        isoResponse.setJobId(asyncJob.getId());
        isoResponse.setJobStatus(asyncJob.getStatus());
      }
      isoResponse.setObjectName("iso");
      isoResponses.add(isoResponse);
    }
  }
  response.setResponses(isoResponses);
  return response;
}
