{
  ClusterResponse clusterResponse=new ClusterResponse();
  clusterResponse.setId(cluster.getUuid());
  clusterResponse.setName(cluster.getName());
  HostPodVO pod=ApiDBUtils.findPodById(cluster.getPodId());
  if (pod != null) {
    clusterResponse.setPodId(pod.getUuid());
    clusterResponse.setPodName(pod.getName());
  }
  DataCenter dc=ApiDBUtils.findZoneById(cluster.getDataCenterId());
  if (dc != null) {
    clusterResponse.setZoneId(dc.getUuid());
    clusterResponse.setZoneName(dc.getName());
  }
  clusterResponse.setHypervisorType(cluster.getHypervisorType().toString());
  clusterResponse.setClusterType(cluster.getClusterType().toString());
  clusterResponse.setAllocationState(cluster.getAllocationState().toString());
  clusterResponse.setManagedState(cluster.getManagedState().toString());
  String cpuOvercommitRatio=ApiDBUtils.findClusterDetails(cluster.getId(),"cpuOvercommitRatio");
  String memoryOvercommitRatio=ApiDBUtils.findClusterDetails(cluster.getId(),"memoryOvercommitRatio");
  clusterResponse.setCpuOvercommitRatio(cpuOvercommitRatio);
  clusterResponse.setMemoryOvercommitRatio(memoryOvercommitRatio);
  clusterResponse.setResourceDetails(_clusterDetailsDao.findDetails(cluster.getId()));
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,null,cluster.getId());
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());
      if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
        List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(null,null,cluster.getId());
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
        capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
      }
 else {
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      }
      if (capacityResponse.getCapacityTotal() != 0) {
        capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
      }
 else {
        capacityResponse.setPercentUsed(s_percentFormat.format(0L));
      }
      capacityResponses.add(capacityResponse);
    }
    capacityResponses.addAll(getStatsCapacityresponse(null,cluster.getId(),pod.getId(),pod.getDataCenterId()));
    clusterResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  clusterResponse.setObjectName("cluster");
  return clusterResponse;
}
