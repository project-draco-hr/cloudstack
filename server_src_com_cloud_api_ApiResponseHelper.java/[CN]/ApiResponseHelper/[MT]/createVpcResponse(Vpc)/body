{
  VpcResponse response=new VpcResponse();
  response.setId(vpc.getId());
  response.setName(vpc.getName());
  response.setDisplayText(vpc.getDisplayText());
  response.setState(vpc.getState().name());
  response.setVpcOfferingId(vpc.getVpcOfferingId());
  response.setCidr(vpc.getCidr());
  response.setZoneId(vpc.getZoneId());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  List<NetworkResponse> networkResponses=new ArrayList<NetworkResponse>();
  List<? extends Network> networks=ApiDBUtils.listVpcNetworks(vpc.getId());
  for (  Network network : networks) {
    NetworkResponse ntwkRsp=createNetworkResponse(network);
    networkResponses.add(ntwkRsp);
  }
  response.setNetworks(networkResponses);
  response.setServices(serviceResponses);
  response.setObjectName("vpcoffering");
  return response;
}
