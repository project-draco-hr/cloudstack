{
  SecurityGroupResponse response=new SecurityGroupResponse();
  Map<Long,Account> securiytGroupAccounts=new HashMap<Long,Account>();
  Map<Long,SecurityGroup> allowedSecurityGroups=new HashMap<Long,SecurityGroup>();
  Map<Long,Account> allowedSecuriytGroupAccounts=new HashMap<Long,Account>();
  if ((securityRules != null) && !securityRules.isEmpty()) {
    SecurityGroup securityGroup=ApiDBUtils.findSecurityGroupById(securityRules.get(0).getSecurityGroupId());
    response.setId(securityGroup.getId());
    response.setName(securityGroup.getName());
    response.setDescription(securityGroup.getDescription());
    Account account=securiytGroupAccounts.get(securityGroup.getAccountId());
    if (account == null) {
      account=ApiDBUtils.findAccountById(securityGroup.getAccountId());
      securiytGroupAccounts.put(securityGroup.getAccountId(),account);
    }
    populateAccount(response,account.getId());
    populateDomain(response,account.getDomainId());
    List<SecurityGroupRuleResponse> egressResponses=new ArrayList<SecurityGroupRuleResponse>();
    List<SecurityGroupRuleResponse> ingressResponses=new ArrayList<SecurityGroupRuleResponse>();
    for (    SecurityRule securityRule : securityRules) {
      SecurityGroupRuleResponse securityGroupData=new SecurityGroupRuleResponse();
      securityGroupData.setRuleId(securityRule.getId());
      securityGroupData.setProtocol(securityRule.getProtocol());
      if ("icmp".equalsIgnoreCase(securityRule.getProtocol())) {
        securityGroupData.setIcmpType(securityRule.getStartPort());
        securityGroupData.setIcmpCode(securityRule.getEndPort());
      }
 else {
        securityGroupData.setStartPort(securityRule.getStartPort());
        securityGroupData.setEndPort(securityRule.getEndPort());
      }
      Long allowedSecurityGroupId=securityRule.getAllowedNetworkId();
      if (allowedSecurityGroupId != null) {
        SecurityGroup allowedSecurityGroup=allowedSecurityGroups.get(allowedSecurityGroupId);
        if (allowedSecurityGroup == null) {
          allowedSecurityGroup=ApiDBUtils.findSecurityGroupById(allowedSecurityGroupId);
          allowedSecurityGroups.put(allowedSecurityGroupId,allowedSecurityGroup);
        }
        securityGroupData.setSecurityGroupName(allowedSecurityGroup.getName());
        Account allowedAccount=allowedSecuriytGroupAccounts.get(allowedSecurityGroup.getAccountId());
        if (allowedAccount == null) {
          allowedAccount=ApiDBUtils.findAccountById(allowedSecurityGroup.getAccountId());
          allowedSecuriytGroupAccounts.put(allowedAccount.getId(),allowedAccount);
        }
        securityGroupData.setAccountName(allowedAccount.getAccountName());
      }
 else {
        securityGroupData.setCidr(securityRule.getAllowedSourceIpCidr());
      }
      if (securityRule.getRuleType() == SecurityRuleType.IngressRule) {
        securityGroupData.setObjectName("ingressrule");
        ingressResponses.add(securityGroupData);
      }
 else {
        securityGroupData.setObjectName("egressrule");
        egressResponses.add(securityGroupData);
      }
    }
    response.setSecurityGroupIngressRules(ingressResponses);
    response.setSecurityGroupEgressRules(egressResponses);
    response.setObjectName("securitygroup");
  }
  return response;
}
