{
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error searching for user stats");
  }
  long bytesSent=0;
  long bytesReceived=0;
  for (  UserStatisticsVO stat : stats) {
    long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit);
  long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? "Unlimited" : String.valueOf(ipLimit);
  long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? "Unlimited" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit);
  long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit);
  long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit);
  long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  return accountResponse;
}
