{
  List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(zoneId,null,null);
  Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
  float cpuOverprovisioningFactor=ApiDBUtils.getCpuOverprovisioningFactor();
  for (  SummedCapacity capacity : capacities) {
    CapacityResponse capacityResponse=new CapacityResponse();
    capacityResponse.setCapacityType(capacity.getCapacityType());
    capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
    if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
      List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId,null,null);
      capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
    }
 else {
      capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
    }
    if (capacityResponse.getCapacityTotal() != 0) {
      capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
    }
 else {
      capacityResponse.setPercentUsed(s_percentFormat.format(0L));
    }
    capacityResponses.add(capacityResponse);
  }
  capacityResponses.addAll(getStatsCapacityresponse(null,null,null,zoneId));
  return new ArrayList<CapacityResponse>(capacityResponses);
}
