{
  String srcIp=loadBalancerTO.getSrcIp();
  int srcPort=loadBalancerTO.getSrcPort();
  String nsVirtualServerName=generateNSVirtualServerName(srcIp,srcPort);
  String profileName=generateAutoScaleProfileName(srcIp,srcPort);
  String timerName=generateAutoScaleTimerName(srcIp,srcPort);
  String scaleDownActionName=generateAutoScaleScaleDownActionName(srcIp,srcPort);
  String scaleUpActionName=generateAutoScaleScaleUpActionName(srcIp,srcPort);
  String mtName=generateSnmpMetricTableName(srcIp,srcPort);
  String monitorName=generateSnmpMonitorName(srcIp,srcPort);
  String serviceGroupName=generateAutoScaleServiceGroupName(srcIp,srcPort);
  AutoScaleVmGroupTO vmGroupTO=loadBalancerTO.getAutoScaleVmGroupTO();
  List<AutoScalePolicyTO> policies=vmGroupTO.getPolicies();
  String minMemberPolicyName=generateAutoScaleMinPolicyName(srcIp,srcPort);
  removeAutoScalePolicy(timerName,minMemberPolicyName);
  String maxMemberPolicyName=generateAutoScaleMaxPolicyName(srcIp,srcPort);
  removeAutoScalePolicy(timerName,maxMemberPolicyName);
  boolean isSnmp=false;
  for (  AutoScalePolicyTO autoScalePolicyTO : policies) {
    List<ConditionTO> conditions=autoScalePolicyTO.getConditions();
    for (    ConditionTO conditionTO : conditions) {
      CounterTO counterTO=conditionTO.getCounter();
      if (counterTO.getSource().equals("snmp")) {
        isSnmp=true;
        break;
      }
    }
    String policyId=Long.toString(autoScalePolicyTO.getId());
    String policyName=generateAutoScalePolicyName(srcIp,srcPort,policyId);
    removeAutoScalePolicy(timerName,policyName);
  }
  com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleDownAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
  try {
    scaleDownAction.set_name(scaleDownActionName);
    scaleDownAction.delete(_netscalerService,scaleDownAction);
  }
 catch (  Exception e) {
    throw e;
  }
  com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleUpAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
  try {
    scaleUpAction.set_name(scaleUpActionName);
    scaleUpAction.delete(_netscalerService,scaleUpAction);
  }
 catch (  Exception e) {
    throw e;
  }
  com.citrix.netscaler.nitro.resource.config.timer.timertrigger timer=new com.citrix.netscaler.nitro.resource.config.timer.timertrigger();
  try {
    timer.set_name(timerName);
    timer.delete(_netscalerService,timer);
  }
 catch (  Exception e) {
    throw e;
  }
  com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleprofile autoscaleProfile=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleprofile();
  try {
    autoscaleProfile.set_name(profileName);
    autoscaleProfile.delete(_netscalerService,autoscaleProfile);
  }
 catch (  Exception e) {
    throw e;
  }
  if (isSnmp) {
    com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_servicegroup_binding monitor_servicegroup_binding=new com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_servicegroup_binding();
    try {
      monitor_servicegroup_binding.set_monitorname(monitorName);
      monitor_servicegroup_binding.set_servicegroupname(serviceGroupName);
      monitor_servicegroup_binding.delete(_netscalerService,monitor_servicegroup_binding);
    }
 catch (    Exception e) {
      throw e;
    }
    com.citrix.netscaler.nitro.resource.config.lb.lbmonitor monitor=new com.citrix.netscaler.nitro.resource.config.lb.lbmonitor();
    try {
      monitor.set_monitorname(monitorName);
      monitor.set_type("LOAD");
      monitor.delete(_netscalerService,monitor);
    }
 catch (    Exception e) {
      throw e;
    }
    com.citrix.netscaler.nitro.resource.config.lb.lbmetrictable metricTable=new com.citrix.netscaler.nitro.resource.config.lb.lbmetrictable();
    try {
      metricTable.set_metrictable(mtName);
      metricTable.delete(_netscalerService,metricTable);
    }
 catch (    Exception e) {
      throw e;
    }
  }
  return true;
}
