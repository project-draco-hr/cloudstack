{
  try {
    if (_isSdx) {
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
    LoadBalancerTO[] loadBalancers=cmd.getLoadBalancers();
    if (loadBalancers == null) {
      return new Answer(cmd);
    }
    for (    LoadBalancerTO loadBalancer : loadBalancers) {
      String srcIp=loadBalancer.getSrcIp();
      int srcPort=loadBalancer.getSrcPort();
      String lbProtocol=getNetScalerProtocol(loadBalancer);
      String lbAlgorithm=loadBalancer.getAlgorithm();
      String nsVirtualServerName=generateNSVirtualServerName(srcIp,srcPort);
      String nsMonitorName=generateNSMonitorName(srcIp,srcPort);
      LbSslCert sslCert=loadBalancer.getSslCert();
      if (loadBalancer.isAutoScaleVmGroupTO()) {
        applyAutoScaleConfig(loadBalancer);
        continue;
      }
      boolean hasMonitor=false;
      boolean deleteMonitor=false;
      boolean destinationsToAdd=false;
      boolean deleteCert=false;
      for (      DestinationTO destination : loadBalancer.getDestinations()) {
        if (!destination.isRevoked()) {
          destinationsToAdd=true;
          break;
        }
      }
      if (!loadBalancer.isRevoked() && destinationsToAdd) {
        addLBVirtualServer(nsVirtualServerName,srcIp,srcPort,lbAlgorithm,lbProtocol,loadBalancer.getStickinessPolicies(),null);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Created load balancing virtual server " + nsVirtualServerName + " on the Netscaler device");
        }
        HealthCheckPolicyTO[] healthCheckPolicies=loadBalancer.getHealthCheckPolicies();
        if ((healthCheckPolicies != null) && (healthCheckPolicies.length > 0) && (healthCheckPolicies[0] != null)) {
          for (          HealthCheckPolicyTO healthCheckPolicyTO : healthCheckPolicies) {
            if (!healthCheckPolicyTO.isRevoked()) {
              addLBMonitor(nsMonitorName,lbProtocol,healthCheckPolicyTO);
              hasMonitor=true;
            }
 else {
              deleteMonitor=true;
              hasMonitor=false;
            }
          }
        }
        for (        DestinationTO destination : loadBalancer.getDestinations()) {
          String nsServerName=generateNSServerName(destination.getDestIp());
          String nsServiceName=generateNSServiceName(destination.getDestIp(),destination.getDestPort());
          if (!destination.isRevoked()) {
            if (!nsServerExists(nsServerName)) {
              com.citrix.netscaler.nitro.resource.config.basic.server nsServer=new com.citrix.netscaler.nitro.resource.config.basic.server();
              nsServer.set_name(nsServerName);
              nsServer.set_ipaddress(destination.getDestIp());
              apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.add(_netscalerService,nsServer);
              if ((apiCallResult.errorcode != 0) && (apiCallResult.errorcode != NitroError.NS_RESOURCE_EXISTS)) {
                throw new ExecutionException("Failed to add server " + destination.getDestIp() + " due to"+ apiCallResult.message);
              }
            }
            if (!nsServiceExists(nsServiceName)) {
              com.citrix.netscaler.nitro.resource.config.basic.service newService=new com.citrix.netscaler.nitro.resource.config.basic.service();
              newService.set_name(nsServiceName);
              newService.set_port(destination.getDestPort());
              newService.set_servername(nsServerName);
              newService.set_state("ENABLED");
              if (lbProtocol.equalsIgnoreCase(NetUtils.SSL_PROTO)) {
                newService.set_servicetype(NetUtils.HTTP_PROTO);
              }
 else {
                newService.set_servicetype(lbProtocol);
              }
              apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.service.add(_netscalerService,newService);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to create service " + nsServiceName + " using server "+ nsServerName+ " due to"+ apiCallResult.message);
              }
            }
            if (!nsServiceBindingExists(nsVirtualServerName,nsServiceName)) {
              com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding svcBinding=new com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding();
              svcBinding.set_name(nsVirtualServerName);
              svcBinding.set_servicename(nsServiceName);
              apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.add(_netscalerService,svcBinding);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to bind service: " + nsServiceName + " to the lb virtual server: "+ nsVirtualServerName+ " on Netscaler device");
              }
            }
            if (hasMonitor) {
              if (!isServiceBoundToMonitor(nsServiceName,nsMonitorName)) {
                bindServiceToMonitor(nsServiceName,nsMonitorName);
              }
            }
 else {
              if (nsMonitorExist(nsMonitorName)) {
                unBindServiceToMonitor(nsServiceName,nsMonitorName);
                deleteMonitor=true;
              }
            }
            if (sslCert != null && lbProtocol.equalsIgnoreCase(NetUtils.SSL_PROTO)) {
              if (sslCert.isRevoked()) {
                deleteCert=true;
              }
 else {
                String previousCertKeyName=null;
                if (sslCert.getChain() != null) {
                  List<Certificate> chainList=CertificateHelper.parseChain(sslCert.getChain());
                  for (                  Certificate intermediateCert : Lists.reverse(chainList)) {
                    String fingerPrint=CertificateHelper.generateFingerPrint(intermediateCert);
                    String intermediateCertKeyName=generateSslCertKeyName(fingerPrint);
                    String intermediateCertFileName=intermediateCertKeyName + ".pem";
                    if (!SSL.isSslCertKeyPresent(_netscalerService,intermediateCertKeyName)) {
                      intermediateCert.getEncoded();
                      StringWriter textWriter=new StringWriter();
                      PEMWriter pemWriter=new PEMWriter(textWriter);
                      pemWriter.writeObject(intermediateCert);
                      pemWriter.flush();
                      SSL.uploadCert(_ip,_username,_password,intermediateCertFileName,textWriter.toString().getBytes());
                      SSL.createSslCertKey(_netscalerService,intermediateCertFileName,null,intermediateCertKeyName,null);
                    }
                    if (previousCertKeyName != null && !SSL.certLinkExists(_netscalerService,intermediateCertKeyName,previousCertKeyName)) {
                      SSL.linkCerts(_netscalerService,intermediateCertKeyName,previousCertKeyName);
                    }
                    previousCertKeyName=intermediateCertKeyName;
                  }
                }
                String certFilename=generateSslCertName(sslCert.getFingerprint()) + ".pem";
                String keyFilename=generateSslKeyName(sslCert.getFingerprint()) + ".pem";
                String certKeyName=generateSslCertKeyName(sslCert.getFingerprint());
                ByteArrayOutputStream certDataStream=new ByteArrayOutputStream();
                certDataStream.write(sslCert.getCert().getBytes());
                if (!SSL.isSslCertKeyPresent(_netscalerService,certKeyName)) {
                  SSL.uploadCert(_ip,_username,_password,certFilename,certDataStream.toByteArray());
                  SSL.uploadKey(_ip,_username,_password,keyFilename,sslCert.getKey().getBytes());
                  SSL.createSslCertKey(_netscalerService,certFilename,keyFilename,certKeyName,sslCert.getPassword());
                }
                if (previousCertKeyName != null && !SSL.certLinkExists(_netscalerService,certKeyName,previousCertKeyName)) {
                  SSL.linkCerts(_netscalerService,certKeyName,previousCertKeyName);
                }
                SSL.bindCertKeyToVserver(_netscalerService,certKeyName,nsVirtualServerName);
              }
            }
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Successfully added LB destination: " + destination.getDestIp() + ":"+ destination.getDestPort()+ " to load balancer "+ srcIp+ ":"+ srcPort);
            }
          }
 else {
            com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding[] serviceBindings=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.get(_netscalerService,nsVirtualServerName);
            if (serviceBindings != null) {
              for (              com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding binding : serviceBindings) {
                if (nsServiceName.equalsIgnoreCase(binding.get_servicename())) {
                  apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.delete(_netscalerService,binding);
                  if (apiCallResult.errorcode != 0) {
                    throw new ExecutionException("Failed to delete the binding between the virtual server: " + nsVirtualServerName + " and service:"+ nsServiceName+ " due to"+ apiCallResult.message);
                  }
                  if (!isServiceBoundToVirtualServer(nsServiceName)) {
                    apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.service.delete(_netscalerService,nsServiceName);
                    if (apiCallResult.errorcode != 0) {
                      throw new ExecutionException("Failed to delete service: " + nsServiceName + " due to "+ apiCallResult.message);
                    }
                  }
                  server_service_binding[] services=server_service_binding.get(_netscalerService,nsServerName);
                  if ((services == null) || (services.length == 0)) {
                    apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.delete(_netscalerService,nsServerName);
                    if (apiCallResult.errorcode != 0) {
                      throw new ExecutionException("Failed to remove server:" + nsServerName + " due to "+ apiCallResult.message);
                    }
                  }
                }
              }
            }
          }
        }
      }
 else {
        lbvserver lbserver=getVirtualServerIfExisits(nsVirtualServerName);
        if (lbserver != null) {
          com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding[] serviceBindings=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.get(_netscalerService,nsVirtualServerName);
          if (serviceBindings != null) {
            for (            com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding binding : serviceBindings) {
              String serviceName=binding.get_servicename();
              apiCallResult=com.citrix.netscaler.nitro.resource.config.lb.lbvserver_service_binding.delete(_netscalerService,binding);
              if (apiCallResult.errorcode != 0) {
                throw new ExecutionException("Failed to unbind service from the lb virtual server: " + nsVirtualServerName + " due to "+ apiCallResult.message);
              }
              com.citrix.netscaler.nitro.resource.config.basic.service svc=com.citrix.netscaler.nitro.resource.config.basic.service.get(_netscalerService,serviceName);
              String nsServerName=svc.get_servername();
              if (!isServiceBoundToVirtualServer(serviceName)) {
                apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.service.delete(_netscalerService,serviceName);
                if (apiCallResult.errorcode != 0) {
                  throw new ExecutionException("Failed to delete service: " + serviceName + " due to "+ apiCallResult.message);
                }
              }
              server_service_binding[] services=server_service_binding.get(_netscalerService,nsServerName);
              if ((services == null) || (services.length == 0)) {
                apiCallResult=com.citrix.netscaler.nitro.resource.config.basic.server.delete(_netscalerService,nsServerName);
                if (apiCallResult.errorcode != 0) {
                  throw new ExecutionException("Failed to remove server:" + nsServerName + " due to "+ apiCallResult.message);
                }
              }
            }
          }
          removeLBVirtualServer(nsVirtualServerName);
          deleteMonitor=true;
          deleteCert=true;
        }
      }
      if (deleteMonitor) {
        removeLBMonitor(nsMonitorName);
      }
      if (sslCert != null && deleteCert) {
        String certFilename=generateSslCertName(sslCert.getFingerprint()) + ".pem";
        String keyFilename=generateSslKeyName(sslCert.getFingerprint()) + ".pem";
        String certKeyName=generateSslCertKeyName(sslCert.getFingerprint());
        if (nsVirtualServerExists(nsVirtualServerName) && SSL.isSslCertKeyPresent(_netscalerService,certKeyName) && SSL.isBoundToVserver(_netscalerService,certKeyName,nsVirtualServerName)) {
          SSL.unbindCertKeyFromVserver(_netscalerService,certKeyName,nsVirtualServerName);
        }
        if (SSL.isSslCertKeyPresent(_netscalerService,certKeyName)) {
          SSL.deleteSslCertKey(_netscalerService,certKeyName);
          SSL.deleteCertFile(_ip,_username,_password,certFilename);
          SSL.deleteKeyFile(_ip,_username,_password,keyFilename);
        }
        if (sslCert.getChain() != null) {
          List<Certificate> chainList=CertificateHelper.parseChain(sslCert.getChain());
          for (          Certificate intermediateCert : chainList) {
            String fingerPrint=CertificateHelper.generateFingerPrint(intermediateCert);
            String intermediateCertKeyName=generateSslCertKeyName(fingerPrint);
            String intermediateCertFileName=intermediateCertKeyName + ".pem";
            if (SSL.isSslCertKeyPresent(_netscalerService,intermediateCertKeyName) && !SSL.isCaforCerts(_netscalerService,intermediateCertKeyName)) {
              SSL.deleteSslCertKey(_netscalerService,intermediateCertKeyName);
              SSL.deleteCertFile(_ip,_username,_password,intermediateCertFileName);
            }
 else {
              break;
            }
          }
        }
      }
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Successfully executed resource LoadBalancerConfigCommand: " + _gson.toJson(cmd));
    }
    saveConfiguration();
    return new Answer(cmd);
  }
 catch (  ExecutionException e) {
    s_logger.error("Failed to execute LoadBalancerConfigCommand due to ",e);
    if (shouldRetry(numRetries)) {
      return retry(cmd,numRetries);
    }
 else {
      return new Answer(cmd,e);
    }
  }
catch (  Exception e) {
    s_logger.error("Failed to execute LoadBalancerConfigCommand due to ",e);
    if (shouldRetry(numRetries)) {
      return retry(cmd,numRetries);
    }
 else {
      return new Answer(cmd,e);
    }
  }
}
