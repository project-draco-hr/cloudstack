{
  try {
    VM router=getVM(conn,vmName);
    VIF correctVif=getCorrectVif(conn,router,vlanId);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException("There were no more available slots for a new VIF on router: " + router.getNameLabel(conn));
      }
      NicTO nic=new NicTO();
      nic.setMac(vifMacAddress);
      nic.setType(TrafficType.Public);
      if (vlanId == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      nic.setNetworkRateMbps(200);
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,"addVif","eth" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException("Failed to find DomR VIF to associate/disassociate IP with.");
    }
    String args=null;
    if (add) {
      args="-A";
    }
 else {
      args="-D";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=" -f";
      args+=" -l ";
      args+=publicIpAddress + "/" + cidrSize;
    }
 else     if (firstIP) {
      args+=" -f";
      args+=" -l ";
      args+=publicIpAddress + "/" + cidrSize;
    }
 else {
      args+=" -l ";
      args+=publicIpAddress;
    }
    args+=" -i ";
    args+=privateIpAddress;
    args+=" -c ";
    args+="eth" + correctVif.getDevice(conn);
    args+=" -g ";
    args+=vlanGateway;
    if (guestIp != null) {
      args+=" -G ";
      args+=guestIp;
    }
    String result=callHostPlugin(conn,"vmops","ipassoc","args",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException("Xen plugin \"ipassoc\" failed.");
    }
    if (removeVif) {
      Network network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,"deleteVif","eth" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg="Unable to assign public IP address due to " + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg="Unable to assign public IP address due to " + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}
