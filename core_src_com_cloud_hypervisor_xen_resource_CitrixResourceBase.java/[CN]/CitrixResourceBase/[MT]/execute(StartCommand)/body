{
  Connection conn=getConnection();
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  State state=State.Stopped;
  VM vm=null;
  try {
    Set<VM> vms=VM.getByNameLabel(conn,vmName);
    if (vms != null) {
      for (      VM v : vms) {
        VM.Record vRec=v.getRecord(conn);
        if (vRec.powerState == VmPowerState.HALTED) {
          v.destroy(conn);
        }
 else         if (vRec.powerState == VmPowerState.RUNNING) {
          String host=vRec.residentOn.getUuid(conn);
          String msg="VM " + vmName + " is runing on host "+ host;
          s_logger.debug(msg);
          return new StartAnswer(cmd,msg,host);
        }
 else {
          String msg="There is already a VM having the same name " + vmName + " vm record "+ vRec.toString();
          s_logger.warn(msg);
          return new StartAnswer(cmd,msg);
        }
      }
    }
    s_logger.debug("The VM " + vmName + " is in Starting state.");
    s_vms.put(_cluster,_name,vmName,State.Starting);
    Host host=Host.getByUuid(conn,_host.uuid);
    vm=createVmFromTemplate(conn,vmSpec,host);
    for (    VolumeTO disk : vmSpec.getDisks()) {
      createVbd(conn,disk,vmName,vm,vmSpec.getBootloader());
    }
    if (vmSpec.getType() != VirtualMachine.Type.User) {
      createPatchVbd(conn,vmName,vm);
    }
    for (    NicTO nic : vmSpec.getNics()) {
      createVif(conn,vmName,vm,nic);
    }
    startVM(conn,host,vm,vmName);
    if (_isOvs) {
      for (      NicTO nic : vmSpec.getNics()) {
        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {
          HashMap<String,String> args=parseDefaultOvsRuleComamnd(nic.getBroadcastUri().toString().substring(Networks.BroadcastDomainType.Vswitch.scheme().length() + "://".length()));
          OvsSetTagAndFlowCommand flowCmd=new OvsSetTagAndFlowCommand(args.get("vmName"),args.get("tag"),args.get("vlans"),args.get("seqno"),Long.parseLong(args.get("vmId")));
          OvsSetTagAndFlowAnswer r=execute(flowCmd);
          if (!r.getResult()) {
            s_logger.warn("Failed to set flow for VM " + r.getVmId());
          }
 else {
            s_logger.info("Success to set flow for VM " + r.getVmId());
          }
        }
      }
    }
    cleanUpTmpDomVif(conn);
    if (_canBridgeFirewall) {
      String result=null;
      if (vmSpec.getType() != VirtualMachine.Type.User) {
        NicTO[] nics=vmSpec.getNics();
        boolean secGrpEnabled=false;
        for (        NicTO nic : nics) {
          if (nic.getIsolationUri() != null && nic.getIsolationUri().getScheme().equalsIgnoreCase(IsolationType.Ec2.toString())) {
            secGrpEnabled=true;
            break;
          }
        }
        if (secGrpEnabled) {
          result=callHostPlugin(conn,"vmops","default_network_rules_systemvm","vmName",vmName);
          if (result == null || result.isEmpty() || !Boolean.parseBoolean(result)) {
            s_logger.warn("Failed to program default network rules for " + vmName);
          }
 else {
            s_logger.info("Programmed default network rules for " + vmName);
          }
        }
      }
 else {
        NicTO[] nics=vmSpec.getNics();
        for (        NicTO nic : nics) {
          if (nic.getIsolationUri() != null && nic.getIsolationUri().getScheme().equalsIgnoreCase(IsolationType.Ec2.toString())) {
            result=callHostPlugin(conn,"vmops","default_network_rules","vmName",vmName,"vmIP",nic.getIp(),"vmMAC",nic.getMac(),"vmID",Long.toString(vmSpec.getId()));
            if (result == null || result.isEmpty() || !Boolean.parseBoolean(result)) {
              s_logger.warn("Failed to program default network rules for " + vmName + " on nic with ip:"+ nic.getIp()+ " mac:"+ nic.getMac());
            }
 else {
              s_logger.info("Programmed default network rules for " + vmName + " on nic with ip:"+ nic.getIp()+ " mac:"+ nic.getMac());
            }
          }
        }
      }
    }
    state=State.Starting;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    s_logger.warn("Catch Exception: " + e.getClass().toString() + " due to "+ e.toString(),e);
    String msg=handleVmStartFailure(conn,vmName,vm,"",e);
    return new StartAnswer(cmd,msg);
  }
 finally {
synchronized (s_vms) {
      if (state != State.Stopped) {
        s_logger.debug("The VM " + vmName + " is in "+ state+ " state.");
        s_vms.put(_cluster,_name,vmName,state);
      }
 else {
        s_logger.debug("The VM is in stopped state, detected problem during startup : " + vmName);
        s_vms.remove(_cluster,_name,vmName);
      }
    }
  }
}
