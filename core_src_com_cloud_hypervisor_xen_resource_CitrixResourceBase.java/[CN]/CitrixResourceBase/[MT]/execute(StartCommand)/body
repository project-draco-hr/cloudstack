{
  Connection conn=getConnection();
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  State state=State.Stopped;
  VM vm=null;
  try {
    Host host=Host.getByUuid(conn,_host.uuid);
synchronized (_vms) {
      _vms.put(vmName,State.Starting);
    }
    vm=createVmFromTemplate(conn,vmSpec,host);
    for (    VolumeTO disk : vmSpec.getDisks()) {
      createVbd(conn,disk,vmName,vm,vmSpec.getBootloader());
    }
    if (vmSpec.getType() != VirtualMachine.Type.User) {
      createPatchVbd(conn,vmName,vm);
    }
    for (    NicTO nic : vmSpec.getNics()) {
      createVif(conn,vmName,vm,nic);
    }
    startVM(conn,host,vm,vmName);
    if (_canBridgeFirewall) {
      String result=null;
      if (vmSpec.getType() != VirtualMachine.Type.User) {
        result=callHostPlugin(conn,"vmops","default_network_rules_systemvm","vmName",vmName);
      }
 else {
      }
      if (result == null || result.isEmpty() || !Boolean.parseBoolean(result)) {
        s_logger.warn("Failed to program default network rules for " + vmName);
      }
 else {
        s_logger.info("Programmed default network rules for " + vmName);
      }
    }
    Monitor monitor=vmSpec.getMonitor();
    if (monitor != null && monitor instanceof SshMonitor) {
      SshMonitor sshMon=(SshMonitor)monitor;
      String privateIp=sshMon.getIp();
      int cmdPort=sshMon.getPort();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Ping command port, " + privateIp + ":"+ cmdPort);
      }
      String result=connect(conn,vmName,privateIp,cmdPort);
      if (result != null) {
        throw new CloudRuntimeException("Can not ping System vm " + vmName + "due to:"+ result);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Ping command port succeeded for vm " + vmName);
      }
    }
    state=State.Running;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    s_logger.warn("Catch Exception: " + e.getClass().toString() + " due to "+ e.toString(),e);
    String msg=handleVmStartFailure(conn,vmName,vm,"",e);
    return new StartAnswer(cmd,msg);
  }
 finally {
synchronized (_vms) {
      if (state != State.Stopped) {
        _vms.put(vmName,state);
      }
 else {
        _vms.remove(vmName);
      }
    }
  }
}
