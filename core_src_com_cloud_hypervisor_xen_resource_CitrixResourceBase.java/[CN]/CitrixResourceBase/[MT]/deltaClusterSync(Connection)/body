{
  HashMap<String,Pair<String,State>> newStates;
  HashMap<String,Pair<String,State>> oldStates=null;
  final HashMap<String,Pair<String,State>> changes=new HashMap<String,Pair<String,State>>();
  newStates=getAllVms(conn);
  if (newStates == null) {
    s_logger.warn("Unable to get the vm states so no state sync at this point.");
    return null;
  }
synchronized (s_vms) {
    oldStates=new HashMap<String,Pair<String,State>>(s_vms.size(_cluster));
    oldStates.putAll(s_vms.getClusterVmState(_cluster));
    for (    final Map.Entry<String,Pair<String,State>> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      final Pair<String,State> oldState=oldStates.remove(vm);
      if (newState == State.Stopped && oldState != null && oldState.second() != State.Stopping && oldState.second() != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + ": xen has state "+ newState+ " and we have state "+ (oldState != null ? oldState.toString() : "null"));
      }
      if (vm.startsWith("migrating")) {
        s_logger.warn("Migrating from xen detected.  Skipping");
        continue;
      }
      if (oldState == null) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        s_logger.warn("Detecting a new state but couldn't find a old state so adding it to the changes: " + vm);
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
 else       if (oldState.second() == State.Starting) {
        if (newState == State.Running) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.warn("Ignoring vm " + vm + " because of a lag in starting the vm.");
        }
      }
 else       if (oldState.second() == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug("Detected that an migrating VM is now running: " + vm);
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
      }
 else       if (oldState.second() == State.Stopping) {
        if (newState == State.Stopped) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.warn("Ignoring vm " + vm + " because of a lag in stopping the vm. ");
        }
      }
 else       if (oldState.second() != newState) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
    for (    final Map.Entry<String,Pair<String,State>> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + " is now missing from xen so reporting stopped");
      }
      if (oldState == State.Stopping) {
        s_logger.warn("Ignoring VM " + vm + " in transition state stopping.");
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.warn("Ignoring VM " + vm + " in transition state starting.");
      }
 else       if (oldState == State.Stopped) {
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.warn("Ignoring VM " + vm + " in migrating state.");
      }
 else {
        State newState=State.Stopped;
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
  }
  return changes;
}
