{
  final StringBuilder caps=new StringBuilder();
  try {
    Host host=Host.getByUuid(conn,_host.uuid);
    Host.Record hr=host.getRecord(conn);
    Map<String,String> details=cmd.getHostDetails();
    if (details == null) {
      details=new HashMap<String,String>();
    }
    if (_privateNetworkName != null) {
      details.put("private.network.device",_privateNetworkName);
    }
    if (_publicNetworkName != null) {
      details.put("public.network.device",_publicNetworkName);
    }
    if (_guestNetworkName != null) {
      details.put("guest.network.device",_guestNetworkName);
    }
    details.put("can_bridge_firewall",Boolean.toString(_canBridgeFirewall));
    cmd.setHostDetails(details);
    cmd.setName(hr.nameLabel);
    cmd.setGuid(_host.uuid);
    cmd.setDataCenter(Long.toString(_dcId));
    for (    final String cap : hr.capabilities) {
      if (cap.length() > 0) {
        caps.append(cap).append(" , ");
      }
    }
    if (caps.length() > 0) {
      caps.delete(caps.length() - 3,caps.length());
    }
    cmd.setCaps(caps.toString());
    cmd.setSpeed(_host.speed);
    cmd.setCpus(_host.cpus);
    HostMetrics hm=host.getMetrics(conn);
    long ram=0;
    long dom0Ram=0;
    ram=hm.getMemoryTotal(conn);
    Set<VM> vms=host.getResidentVMs(conn);
    for (    VM vm : vms) {
      if (vm.getIsControlDomain(conn)) {
        dom0Ram=vm.getMemoryDynamicMax(conn);
        break;
      }
    }
    ram=(ram - dom0Ram - (128 * 1024 * 1024)) * 63 / 64;
    cmd.setMemory(ram);
    cmd.setDom0MinMemory(dom0Ram);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Total Ram: " + ram + " dom0 Ram: "+ dom0Ram);
    }
    PIF pif=PIF.getByUuid(conn,_host.privatePif);
    PIF.Record pifr=pif.getRecord(conn);
    if (pifr.IP != null && pifr.IP.length() > 0) {
      cmd.setPrivateIpAddress(pifr.IP);
      cmd.setPrivateMacAddress(pifr.MAC);
      cmd.setPrivateNetmask(pifr.netmask);
    }
 else {
      String msg="Private network " + _privateNetworkName + " doesn't have IP address, please check the host network configuration";
      s_logger.error(msg);
      throw new CloudRuntimeException(msg);
    }
    pif=PIF.getByUuid(conn,_host.storagePif1);
    pifr=pif.getRecord(conn);
    if (pifr.IP != null && pifr.IP.length() > 0) {
      cmd.setStorageIpAddress(pifr.IP);
      cmd.setStorageMacAddress(pifr.MAC);
      cmd.setStorageNetmask(pifr.netmask);
    }
    if (_host.storagePif2 != null) {
      pif=PIF.getByUuid(conn,_host.storagePif2);
      pifr=pif.getRecord(conn);
      if (pifr.IP != null && pifr.IP.length() > 0) {
        cmd.setStorageIpAddressDeux(pifr.IP);
        cmd.setStorageMacAddressDeux(pifr.MAC);
        cmd.setStorageNetmaskDeux(pifr.netmask);
      }
    }
    Map<String,String> configs=hr.otherConfig;
    cmd.setIqn(configs.get("iscsi_iqn"));
    cmd.setPod(_pod);
    cmd.setVersion(CitrixResourceBase.class.getPackage().getImplementationVersion());
  }
 catch (  final XmlRpcException e) {
    throw new CloudRuntimeException("XML RPC Exception" + e.getMessage(),e);
  }
catch (  XenAPIException e) {
    throw new CloudRuntimeException("XenAPIException" + e.toString(),e);
  }
}
