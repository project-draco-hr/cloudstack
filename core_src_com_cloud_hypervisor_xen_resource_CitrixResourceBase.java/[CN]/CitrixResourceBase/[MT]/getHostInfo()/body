{
  Connection conn=getConnection();
  try {
    Host myself=Host.getByUuid(conn,_host.uuid);
    Set<HostCpu> hcs=myself.getHostCPUs(conn);
    _host.cpus=hcs.size();
    for (    final HostCpu hc : hcs) {
      _host.speed=hc.getSpeed(conn).intValue();
      break;
    }
    Set<SR> srs=SR.getByNameLabel(conn,"XenServer Tools");
    if (srs.size() != 1) {
      throw new CloudRuntimeException("There are " + srs.size() + " SRs with name XenServer Tools");
    }
    SR sr=srs.iterator().next();
    sr.scan(conn);
    SR.Record srr=sr.getRecord(conn);
    _host.systemvmisouuid=null;
    for (    VDI vdi : srr.VDIs) {
      VDI.Record vdir=vdi.getRecord(conn);
      if (vdir.nameLabel.contains("systemvm-premium")) {
        _host.systemvmisouuid=vdir.uuid;
        break;
      }
    }
    if (_host.systemvmisouuid == null) {
      for (      VDI vdi : srr.VDIs) {
        VDI.Record vdir=vdi.getRecord(conn);
        if (vdir.nameLabel.contains("systemvm")) {
          _host.systemvmisouuid=vdir.uuid;
          break;
        }
      }
    }
    if (_host.systemvmisouuid == null) {
      throw new CloudRuntimeException("can not find systemvmiso");
    }
    String name="cloud-private";
    if (_privateNetworkName != null) {
      name=_privateNetworkName;
    }
    _localGateway=callHostPlugin("vmops","getgateway","mgmtIP",myself.getAddress(conn));
    if (_localGateway == null || _localGateway.isEmpty()) {
      s_logger.warn("can not get gateway for host :" + _host.uuid);
      return false;
    }
    _canBridgeFirewall=can_bridge_firewall();
    Nic privateNic=getLocalNetwork(conn,name);
    if (privateNic == null) {
      s_logger.debug("Unable to find any private network.  Trying to determine that by route for host " + _host.ip);
      name=callHostPlugin("vmops","getnetwork","mgmtIP",myself.getAddress(conn));
      if (name == null || name.isEmpty()) {
        s_logger.warn("Unable to determine the private network for host " + _host.ip);
        return false;
      }
      _privateNetworkName=name;
      privateNic=getLocalNetwork(conn,name);
      if (privateNic == null) {
        s_logger.warn("Unable to get private network " + name);
        return false;
      }
    }
 else {
      _privateNetworkName=name;
    }
    _host.privatePif=privateNic.pr.uuid;
    _host.privateNetwork=privateNic.nr.uuid;
    Nic guestNic=null;
    if (_guestNetworkName != null && !_guestNetworkName.equals(_privateNetworkName)) {
      guestNic=getLocalNetwork(conn,_guestNetworkName);
      if (guestNic == null) {
        s_logger.warn("Unable to find guest network " + _guestNetworkName);
        throw new IllegalArgumentException("Unable to find guest network " + _guestNetworkName + " for host "+ _host.ip);
      }
    }
 else {
      guestNic=privateNic;
      _guestNetworkName=_privateNetworkName;
    }
    _host.guestNetwork=guestNic.nr.uuid;
    _host.guestPif=guestNic.pr.uuid;
    Nic publicNic=null;
    if (_publicNetworkName != null && !_publicNetworkName.equals(_guestNetworkName)) {
      publicNic=getLocalNetwork(conn,_publicNetworkName);
      if (publicNic == null) {
        s_logger.warn("Unable to find public network " + _publicNetworkName + " for host "+ _host.ip);
        throw new IllegalArgumentException("Unable to find public network " + _publicNetworkName + " for host "+ _host.ip);
      }
    }
 else {
      publicNic=guestNic;
      _publicNetworkName=_guestNetworkName;
    }
    _host.publicPif=publicNic.pr.uuid;
    _host.publicNetwork=publicNic.nr.uuid;
    Nic storageNic1=getLocalNetwork(conn,_storageNetworkName1);
    if (storageNic1 == null) {
      storageNic1=privateNic;
      _storageNetworkName1=_privateNetworkName;
    }
    _host.storageNetwork1=storageNic1.nr.uuid;
    _host.storagePif1=storageNic1.pr.uuid;
    Nic storageNic2=getLocalNetwork(conn,_storageNetworkName2);
    if (storageNic2 == null) {
      storageNic2=privateNic;
      _storageNetworkName2=_privateNetworkName;
    }
    _host.storageNetwork2=storageNic2.nr.uuid;
    _host.storagePif2=storageNic2.pr.uuid;
    s_logger.info("Private Network is " + _privateNetworkName + " for host "+ _host.ip);
    s_logger.info("Guest Network is " + _guestNetworkName + " for host "+ _host.ip);
    s_logger.info("Public Network is " + _publicNetworkName + " for host "+ _host.ip);
    s_logger.info("Storage Network 1 is " + _storageNetworkName1 + " for host "+ _host.ip);
    s_logger.info("Storage Network 2 is " + _storageNetworkName2 + " for host "+ _host.ip);
    return true;
  }
 catch (  XenAPIException e) {
    s_logger.warn("Unable to get host information for " + _host.ip,e);
    return false;
  }
catch (  XmlRpcException e) {
    s_logger.warn("Unable to get host information for " + _host.ip,e);
    return false;
  }
}
