{
  Map<String,String> args=new HashMap<String,String>();
  Task task=null;
  try {
    for (int i=0; i < params.length; i+=2) {
      args.put(params[i],params[i + 1]);
    }
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("callHostPlugin executing for command " + cmd + " with "+ getArgsString(args));
    }
    Host host=Host.getByUuid(conn,_host.uuid);
    task=host.callPluginAsync(conn,plugin,cmd,args);
    waitForTask(conn,task,1000,timeout);
    checkForSuccess(conn,task);
    String result=task.getResult(conn);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("callHostPlugin Result: " + result);
    }
    return result.replace("<value>","").replace("</value>","").replace("\n","");
  }
 catch (  Types.HandleInvalid e) {
    s_logger.warn("callHostPlugin failed for cmd: " + cmd + " with args "+ getArgsString(args)+ " due to HandleInvalid clazz:"+ e.clazz+ ", handle:"+ e.handle);
  }
catch (  XenAPIException e) {
    s_logger.warn("callHostPlugin failed for cmd: " + cmd + " with args "+ getArgsString(args)+ " due to "+ e.toString(),e);
  }
catch (  XmlRpcException e) {
    s_logger.warn("callHostPlugin failed for cmd: " + cmd + " with args "+ getArgsString(args)+ " due to "+ e.getMessage(),e);
  }
 finally {
    if (task != null) {
      try {
        task.destroy(conn);
      }
 catch (      Exception e1) {
        s_logger.warn("unable to destroy task(" + task.toString() + ") on host("+ _host.uuid+ ") due to "+ e1.toString());
      }
    }
  }
  return null;
}
