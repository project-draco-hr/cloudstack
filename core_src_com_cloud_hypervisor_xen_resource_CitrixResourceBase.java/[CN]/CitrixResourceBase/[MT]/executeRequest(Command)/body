{
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    return execute((IpAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotBackupCommand.class) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotsDirCommand.class) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityIngressRulesCmd.class) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof CheckRouterCommand) {
    return execute((CheckRouterCommand)cmd);
  }
 else   if (cmd instanceof SetFirewallRulesCommand) {
    return execute((SetFirewallRulesCommand)cmd);
  }
 else   if (cmd instanceof BumpUpPriorityCommand) {
    return execute((BumpUpPriorityCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}
