{
  HashMap<String,State> newStates;
  HashMap<String,State> oldStates=null;
  final HashMap<String,State> changes=new HashMap<String,State>();
synchronized (_vms) {
    newStates=getAllVms(conn);
    if (newStates == null) {
      s_logger.debug("Unable to get the vm states so no state sync at this point.");
      return null;
    }
    oldStates=new HashMap<String,State>(_vms.size());
    oldStates.putAll(_vms);
    for (    final Map.Entry<String,State> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue();
      final State oldState=oldStates.remove(vm);
      if (newState == State.Stopped && oldState != State.Stopping && oldState != null && oldState != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + ": xen has state "+ newState+ " and we have state "+ (oldState != null ? oldState.toString() : "null"));
      }
      if (vm.startsWith("migrating")) {
        s_logger.debug("Migrating from xen detected.  Skipping");
        continue;
      }
      if (oldState == null) {
        _vms.put(vm,newState);
        s_logger.debug("Detecting a new state but couldn't find a old state so adding it to the changes: " + vm);
        changes.put(vm,newState);
      }
 else       if (oldState == State.Starting) {
        if (newState == State.Running) {
          _vms.put(vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.debug("Ignoring vm " + vm + " because of a lag in starting the vm.");
        }
      }
 else       if (oldState == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug("Detected that an migrating VM is now running: " + vm);
          _vms.put(vm,newState);
        }
      }
 else       if (oldState == State.Stopping) {
        if (newState == State.Stopped) {
          _vms.put(vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.debug("Ignoring vm " + vm + " because of a lag in stopping the vm. ");
        }
      }
 else       if (oldState != newState) {
        _vms.put(vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,newState);
      }
    }
    for (    final Map.Entry<String,State> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + " is now missing from xen so reporting stopped");
      }
      if (oldState == State.Stopping) {
        s_logger.debug("Ignoring VM " + vm + " in transition state stopping.");
        _vms.remove(vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.debug("Ignoring VM " + vm + " in transition state starting.");
      }
 else       if (oldState == State.Stopped) {
        _vms.remove(vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.debug("Ignoring VM " + vm + " in migrating state.");
      }
 else {
        State newState=State.Stopped;
        try {
          Set<VM> missingVMs=VM.getByNameLabel(conn,vm);
          if (missingVMs != null && !missingVMs.isEmpty()) {
            String shutdownInitiator=missingVMs.iterator().next().getOtherConfig(conn).get("last_shutdown_initiator");
            if (shutdownInitiator != null && shutdownInitiator.equals("internal")) {
              newState=State.Shutdowned;
            }
          }
        }
 catch (        Exception e) {
        }
        changes.put(entry.getKey(),newState);
      }
    }
  }
  return changes;
}
