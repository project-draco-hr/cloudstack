{
  Connection conn=getConnection();
  final String vmName=cmd.getVmName();
  State state=null;
  state=s_vms.getState(_cluster,vmName);
  s_logger.debug("The VM " + vmName + " is in "+ State.Stopping+ " state");
  s_vms.put(_cluster,_name,vmName,State.Stopping);
  try {
    Set<VM> vms=VM.getByNameLabel(conn,vmName);
    String ipaddr=cmd.getDestinationIp();
    Set<Host> hosts=Host.getAll(conn);
    Host dsthost=null;
    for (    Host host : hosts) {
      if (host.getAddress(conn).equals(ipaddr)) {
        dsthost=host;
        break;
      }
    }
    if (dsthost == null) {
      String msg="Migration failed due to unable to find host " + ipaddr + " in XenServer pool "+ _host.pool;
      s_logger.warn(msg);
      return new MigrateAnswer(cmd,false,msg,null);
    }
    for (    VM vm : vms) {
      if (vm.getPVBootloader(conn).equals("pygrub") && !isPVInstalled(conn,vm)) {
        String uuid=vm.getUuid(conn);
        String result=callHostPlugin(conn,"vmops","preparemigration","uuid",uuid);
        if (result == null || result.isEmpty()) {
          return new MigrateAnswer(cmd,false,"migration failed due to preparemigration failed",null);
        }
        int i=0;
        for (; i < 20; i++) {
          try {
            Thread.sleep(1000);
          }
 catch (          final InterruptedException ex) {
          }
          if (isPVInstalled(conn,vm)) {
            break;
          }
        }
        if (i >= 20) {
          s_logger.warn("Can not fake PV driver for " + vmName);
        }
      }
      if (!isPVInstalled(conn,vm)) {
        String msg="Migration failed due to PV drivers is not installed for " + vmName;
        s_logger.warn(msg);
        return new MigrateAnswer(cmd,false,msg,null);
      }
      Set<VBD> vbds=vm.getVBDs(conn);
      for (      VBD vbd : vbds) {
        VBD.Record vbdRec=vbd.getRecord(conn);
        if (vbdRec.type.equals(Types.VbdType.CD.toString()) && !vbdRec.empty) {
          vbd.eject(conn);
          break;
        }
      }
      migrateVM(conn,dsthost,vm,vmName);
      vm.setAffinity(conn,dsthost);
      state=State.Stopping;
    }
    return new MigrateAnswer(cmd,true,"migration succeeded",null);
  }
 catch (  Exception e) {
    String msg="Catch Exception " + e.getClass().getName() + ": Migration failed due to "+ e.toString();
    s_logger.warn(msg,e);
    return new MigrateAnswer(cmd,false,msg,null);
  }
 finally {
    s_logger.debug("The VM " + vmName + " is in "+ state+ " state");
    s_vms.put(_cluster,_name,vmName,state);
  }
}
