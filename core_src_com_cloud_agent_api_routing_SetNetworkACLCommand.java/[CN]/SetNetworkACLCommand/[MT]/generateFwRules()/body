{
  List<NetworkACLTO> aclList=Arrays.asList(rules);
  Collections.sort(aclList,new Comparator<NetworkACLTO>(){
    @Override public int compare(    NetworkACLTO acl1,    NetworkACLTO acl2){
      return acl1.getNumber() < acl2.getNumber() ? 1 : -1;
    }
  }
);
  String[][] result=new String[2][aclList.size()];
  int i=0;
  for (  NetworkACLTO aclTO : aclList) {
    if (aclTO.revoked() == true) {
      StringBuilder sb=new StringBuilder();
      sb.append(aclTO.getTrafficType().toString()).append(":reverted:0:0:0:");
      String aclRuleEntry=sb.toString();
      result[0][i++]=aclRuleEntry;
      continue;
    }
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(aclTO.getTrafficType().toString()).append(":").append(aclTO.getProtocol()).append(":");
    if ("icmp".compareTo(aclTO.getProtocol()) == 0) {
      sb.append(aclTO.getIcmpType()).append(":").append(aclTO.getIcmpCode()).append(":");
    }
 else {
      sb.append(aclTO.getStringPortRange()).append(":");
    }
    cidr=aclTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append("0.0.0.0/0");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append("-");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(":").append(aclTO.getAction()).append(":");
    String aclRuleEntry=sb.toString();
    result[0][i++]=aclRuleEntry;
  }
  return result;
}
