{
  method=mock(GetMethod.class);
  when(method.getStatusCode()).thenReturn(HttpStatus.SC_OK);
  when(method.getResponseBodyAsString()).thenReturn(SEC_PROFILE_LIST_JSON_RESPONSE);
  final NameValuePair[] queryString=new NameValuePair[]{new NameValuePair("uuid",UUID),new NameValuePair("fields","*")};
  final List<NameValuePair> queryStringNvps=new ArrayList<>();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      final NameValuePair[] arguments=(NameValuePair[])invocation.getArguments()[0];
      queryStringNvps.addAll(Arrays.asList(arguments));
      return null;
    }
  }
).when(method).setQueryString(any(NameValuePair[].class));
  final NiciraNvpList<SecurityProfile> actualProfiles=api.findSecurityProfile(UUID);
  verify(method,times(1)).releaseConnection();
  assertTrue(queryStringNvps.containsAll(Arrays.asList(queryString)));
  assertEquals(queryString.length,queryStringNvps.size());
  assertEquals("Wrong Uuid in the newly created SecurityProfile",UUID,actualProfiles.getResults().get(0).getUuid());
  assertEquals("Wrong Uuid in the newly created SecurityProfile",HREF,actualProfiles.getResults().get(0).getHref());
  assertEquals("Wrong Schema in the newly created SecurityProfile",SCHEMA,actualProfiles.getResults().get(0).getSchema());
  assertEquals("Wrong Uuid in the newly created SecurityProfile",UUID2,actualProfiles.getResults().get(1).getUuid());
  assertEquals("Wrong Uuid in the newly created SecurityProfile",HREF2,actualProfiles.getResults().get(1).getHref());
  assertEquals("Wrong Schema in the newly created SecurityProfile",SCHEMA2,actualProfiles.getResults().get(1).getSchema());
  assertEquals("Wrong Schema in the newly created SecurityProfile",2,actualProfiles.getResultCount());
  assertEquals("Wrong URI for SecurityProfile creation REST service",NiciraNvpApi.SEC_PROFILE_URI_PREFIX,uri);
  assertEquals("Wrong HTTP method for SecurityProfile creation REST service",NiciraNvpApi.GET_METHOD_TYPE,type);
}
