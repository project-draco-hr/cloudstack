{
  _workerDone=false;
  int canvasWidth=1024;
  int canvasHeight=768;
  setClientParam(param);
  final String host=param.getHypervHost();
  final String password=param.getPassword();
  final String instanceId=param.getClientHostAddress();
  final int port=param.getClientHostPort();
  _screen=new ScreenDescription();
  _canvas=new RdpBufferedImageCanvas(this,canvasWidth,canvasHeight);
  onFramebufferSizeChange(canvasWidth,canvasHeight);
  _screen.addSizeChangeListener(new SizeChangeListener(){
    @Override public void sizeChanged(    int width,    int height){
      if (_canvas != null) {
        _canvas.setCanvasSize(width,height);
      }
    }
  }
);
  final SSLState sslState=new SSLState();
  final String username=param.getUsername();
  String name=null;
  String domain=null;
  if (username.contains("\\")) {
    String[] tokens=username.split("\\\\");
    name=tokens[1];
    domain=tokens[0];
  }
 else {
    name=username;
    domain="Workgroup";
  }
  _client=new RdpClient("client",host,domain,name,password,instanceId,_screen,_canvas,sslState);
  _mouseEventSource=_client.getMouseEventSource();
  _keyEventSource=_client.getKeyEventSource();
  _worker=new Thread(new Runnable(){
    @Override public void run(){
      _socket=new AprSocketWrapperImpl("socket",sslState);
      Pipeline pipeline=new PipelineImpl("Client");
      pipeline.add(_socket,_client);
      pipeline.link("socket",_client.getId(),"socket");
      pipeline.validate();
      InetSocketAddress address=new InetSocketAddress(host,port);
      ConsoleProxy.ensureRoute(host);
      try {
        _socket.connect(address);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        shutdown();
      }
      s_logger.info("Receiver thread stopped.");
      _workerDone=true;
    }
  }
);
  _worker.setDaemon(true);
  _worker.start();
}
