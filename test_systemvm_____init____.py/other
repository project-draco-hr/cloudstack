from __future__ import with_statement
try:
    from subprocess import check_output
except (NameError, ImportError):
    import subprocess

    def check_output(*popenargs, **kwargs):
        "Run command with arguments and return its output as a byte string.\n\n        Backported from Python 2.7 as it's implemented as pure python on stdlib.\n\n        >>> check_output(['/usr/bin/python', '--version'])\n        Python 2.6.2\n        "
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        (output, unused_err) = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get('args')
            if (cmd is None):
                cmd = popenargs[0]
            error = subprocess.CalledProcessError(retcode, cmd)
            error.output = output
            raise error
        return output
    subprocess.check_output = check_output
import logging
logging.getLogger('paramiko.transport').setLevel(logging.WARNING)
from vagrant import Vagrant
from unittest import TestCase
from paramiko.config import SSHConfig
from paramiko.client import SSHClient, AutoAddPolicy
from fabric.api import env
from fabric.api import run, hide
from envassert import file, detect
from StringIO import StringIO
from nose.plugins.attrib import attr
import os.path
import sys
_defaultVagrantDir = os.path.abspath(os.path.join(os.path.basename(__file__), '..', '..', '..', 'tools', 'vagrant', 'systemvm'))
