{
  _amqpHost=(String)params.get("server");
  if (_amqpHost == null || _amqpHost.isEmpty()) {
    throw new ConfigurationException("Unable to get the AMQP server details");
  }
  _username=(String)params.get("username");
  if (_username == null || _username.isEmpty()) {
    throw new ConfigurationException("Unable to get the username details");
  }
  _password=(String)params.get("password");
  if (_password == null || _password.isEmpty()) {
    throw new ConfigurationException("Unable to get the password details");
  }
  _amqpExchangeName=(String)params.get("exchangename");
  if (_amqpExchangeName == null || _amqpExchangeName.isEmpty()) {
    throw new ConfigurationException("Unable to get the _exchange details on the AMQP server");
  }
  try {
    String portStr=(String)params.get("port");
    if (portStr == null || portStr.isEmpty()) {
      throw new ConfigurationException("Unable to get the port details of AMQP server");
    }
    _port=Integer.parseInt(portStr);
    String retryIntervalStr=(String)params.get("retryinterval");
    if (retryIntervalStr == null || retryIntervalStr.isEmpty()) {
      retryIntervalStr="10000";
    }
    _retryInterval=Integer.parseInt(retryIntervalStr);
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException("Invalid port number/retry interval");
  }
  _subscribers=new ConcurrentHashMap<String,Ternary<String,Channel,EventSubscriber>>();
  executorService=Executors.newCachedThreadPool();
  disconnectHandler=new DisconnectHandler();
  _name=name;
  return true;
}
