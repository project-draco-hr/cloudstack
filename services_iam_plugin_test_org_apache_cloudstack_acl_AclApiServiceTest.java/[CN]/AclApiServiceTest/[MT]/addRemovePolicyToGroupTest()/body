{
  AclGroup group=new AclGroupVO("group1","tester group1");
  List<AclGroup> groups=new ArrayList<AclGroup>();
  groups.add(group);
  Long groupId=group.getId();
  List<Long> policyIds=new ArrayList<Long>();
  policyIds.add(100L);
  policyIds.add(200L);
  AclPolicy policy1=new AclPolicyVO("policy1","my first policy");
  AclPolicy policy2=new AclPolicyVO("policy2","my second policy");
  List<AclPolicy> policies=new ArrayList<AclPolicy>();
  policies.add(policy1);
  policies.add(policy2);
  when(_iamSrv.attachAclPoliciesToGroup(policyIds,groupId)).thenReturn(group);
  when(_iamSrv.listAclPoliciesByGroup(groupId)).thenReturn(policies);
  Pair<List<AclGroup>,Integer> grpList=new Pair<List<AclGroup>,Integer>(groups,1);
  when(_iamSrv.listAclGroups(null,"group1",callerDomainPath,0L,20L)).thenReturn(grpList);
  _aclSrv.attachAclPoliciesToGroup(policyIds,groupId);
  ListResponse<AclGroupResponse> grpResp=_aclSrv.listAclGroups(null,"group1",callerDomainId,0L,20L);
  assertTrue("No. of response items should be one",grpResp.getCount() == 1);
  AclGroupResponse resp=grpResp.getResponses().get(0);
  Set<String> policyNames=resp.getPolicyList();
  assertEquals("There should be 2 policies in the group",2,policyNames.size());
  assertTrue("policy1 should be assigned to the group",policyNames.contains("policy1"));
  assertTrue("policy2 should be assigned to the group",policyNames.contains("policy2"));
  policyIds.remove(1);
  policies.remove(policy2);
  when(_iamSrv.removeAclPoliciesFromGroup(policyIds,groupId)).thenReturn(group);
  _aclSrv.removeAclPoliciesFromGroup(policyIds,groupId);
  grpResp=_aclSrv.listAclGroups(null,"group1",callerDomainId,0L,20L);
  assertTrue("No. of response items should be one",grpResp.getCount() == 1);
  resp=grpResp.getResponses().get(0);
  policyNames=resp.getPolicyList();
  assertEquals("There should be 1 policy attached to the group",1,policyNames.size());
  assertFalse("policy2 should not belong to the group anymore",policyNames.contains("policy2"));
}
