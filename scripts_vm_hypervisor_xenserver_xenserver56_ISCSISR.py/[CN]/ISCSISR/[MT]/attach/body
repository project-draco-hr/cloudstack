def attach(self, sr_uuid):
    self._mpathHandle()
    npaths = 0
    if (not self.attached):
        if (self.dconf.has_key('multihomelist') and (not self.dconf.has_key('multiSession'))):
            targetlist = self.dconf['multihomelist'].split(',')
        else:
            targetlist = [('%s:%d' % (self.target, self.port))]
        conn = False
        for val in targetlist:
            (target, port) = val.split(':')
            try:
                util._testHost(target, long(port), 'ISCSITarget')
                self.target = target
                self.port = long(port)
                conn = True
                break
            except:
                pass
        if (not conn):
            raise xs_errors.XenError('ISCSITarget')
        iscsilib.ensure_daemon_running_ok(self.localIQN)
        if (not iscsilib._checkTGT(self.targetIQN)):
            try:
                map = iscsilib.discovery(self.target, self.port, self.chapuser, self.chappassword, targetIQN=self.targetIQN)
                iqn = ''
                if (len(map) == 0):
                    self._scan_IQNs()
                    raise xs_errors.XenError('ISCSIDiscovery', opterr='check target settings')
                for i in range(0, len(map)):
                    (portal, tpgt, iqn) = map[i]
                    try:
                        (ipaddr, port) = portal.split(',')[0].split(':')
                        if ((not self.multihomed) and (ipaddr != self.target)):
                            continue
                        util._testHost(ipaddr, long(port), 'ISCSITarget')
                        util.SMlog(('Logging in to [%s:%s]' % (ipaddr, port)))
                        iscsilib.login(portal, iqn, self.chapuser, self.chappassword)
                        npaths = (npaths + 1)
                    except:
                        pass
                if (not iscsilib._checkTGT(self.targetIQN)):
                    raise xs_errors.XenError('ISCSIDevice', opterr='during login')
                time.sleep(5)
            except util.CommandException as inst:
                raise xs_errors.XenError('ISCSILogin', opterr=('code is %d' % inst.code))
        self.attached = True
    self._initPaths()
    util._incr_iscsiSR_refcount(self.targetIQN, sr_uuid)
    IQNs = []
    if self.dconf.has_key('multiSession'):
        IQNs = ''
        for iqn in self.dconf['multiSession'].split('|'):
            if len(iqn):
                IQNs += iqn.split(',')[2]
    else:
        IQNs.append(self.targetIQN)
    sessions = 0
    paths = glob.glob('/sys/class/iscsi_host/host*/device/session*/iscsi_session*/targetname')
    for path in paths:
        try:
            if (util.get_single_entry(path) in IQNs):
                sessions += 1
                util.SMlog(('IQN match. Incrementing sessions to %d' % sessions))
        except:
            util.SMlog(('Failed to read targetname path,' + 'iscsi_sessions value may be incorrect'))
    try:
        pbdref = util.find_my_pbd(self.session, self.host_ref, self.sr_ref)
        if (pbdref != None):
            other_conf = self.session.xenapi.PBD.get_other_config(pbdref)
            other_conf['iscsi_sessions'] = str(sessions)
            self.session.xenapi.PBD.set_other_config(pbdref, other_conf)
    except:
        pass
    if ((self.mpath == 'true') and self.dconf.has_key('SCSIid')):
        self.mpathmodule.refresh(self.dconf['SCSIid'], npaths)
