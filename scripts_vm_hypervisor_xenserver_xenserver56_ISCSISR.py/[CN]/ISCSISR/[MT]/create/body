def create(self, sr_uuid, size):
    SRs = self.session.xenapi.SR.get_all_records()
    for sr in SRs:
        record = SRs[sr]
        sm_config = record['sm_config']
        if (sm_config.has_key('targetIQN') and (sm_config['targetIQN'] == self.targetIQN)):
            raise xs_errors.XenError('SRInUse')
    self.attach(sr_uuid)
    util.wait_for_path(self.path, MAX_TIMEOUT)
    if (self._loadvdis() > 0):
        scanrecord = SR.ScanRecord(self)
        scanrecord.synchronise()
    try:
        self.detach(sr_uuid)
    except:
        pass
    self.sm_config = self.session.xenapi.SR.get_sm_config(self.sr_ref)
    self.sm_config['disktype'] = 'Raw'
    self.sm_config['datatype'] = 'ISCSI'
    self.sm_config['target'] = self.target
    self.sm_config['targetIQN'] = self.targetIQN
    self.sm_config['multipathable'] = 'true'
    self.session.xenapi.SR.set_sm_config(self.sr_ref, self.sm_config)
    return
