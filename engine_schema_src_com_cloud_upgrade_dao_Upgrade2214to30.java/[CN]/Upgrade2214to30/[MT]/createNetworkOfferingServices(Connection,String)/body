{
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=conn.prepareStatement("select id, dns_service, gateway_service, firewall_service, lb_service, userdata_service," + " vpn_service, dhcp_service, unique_name from `cloud`.`network_offerings` where traffic_type='Guest'");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      boolean sharedSourceNat=false;
      boolean dedicatedLb=true;
      long id=rs.getLong(1);
      String uniqueName=rs.getString(9);
      Map<String,String> services=new HashMap<String,String>();
      if (rs.getLong(2) != 0) {
        services.put("Dns","VirtualRouter");
      }
      if (rs.getLong(3) != 0) {
        if (externalOfferingName != null && uniqueName.equalsIgnoreCase(externalOfferingName)) {
          services.put("Gateway","JuniperSRX");
        }
 else {
          services.put("Gateway","VirtualRouter");
        }
      }
      if (rs.getLong(4) != 0) {
        if (externalOfferingName != null && uniqueName.equalsIgnoreCase(externalOfferingName)) {
          services.put("Firewall","JuniperSRX");
        }
 else {
          services.put("Firewall","VirtualRouter");
        }
      }
      if (rs.getLong(5) != 0) {
        if (externalOfferingName != null && uniqueName.equalsIgnoreCase(externalOfferingName)) {
          services.put("Lb","F5BigIp");
          dedicatedLb=false;
        }
 else {
          services.put("Lb","VirtualRouter");
        }
      }
      if (rs.getLong(6) != 0) {
        services.put("UserData","VirtualRouter");
      }
      if (rs.getLong(7) != 0) {
        if (externalOfferingName == null || !uniqueName.equalsIgnoreCase(externalOfferingName)) {
          services.put("Vpn","VirtualRouter");
        }
      }
      if (rs.getLong(8) != 0) {
        services.put("Dhcp","VirtualRouter");
      }
      if (uniqueName.equalsIgnoreCase(NetworkOffering.DefaultSharedNetworkOfferingWithSGService.toString())) {
        services.put("SecurityGroup","SecurityGroupProvider");
      }
      if (uniqueName.equals(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService.toString()) || uniqueName.equals(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService.toString() + "-redundant") || uniqueName.equalsIgnoreCase(externalOfferingName)) {
        if (externalOfferingName != null && uniqueName.equalsIgnoreCase(externalOfferingName)) {
          services.put("SourceNat","JuniperSRX");
          services.put("PortForwarding","JuniperSRX");
          services.put("StaticNat","JuniperSRX");
          sharedSourceNat=true;
        }
 else {
          services.put("SourceNat","VirtualRouter");
          services.put("PortForwarding","VirtualRouter");
          services.put("StaticNat","VirtualRouter");
        }
      }
      for (      String service : services.keySet()) {
        pstmt=conn.prepareStatement("INSERT INTO `cloud`.`ntwk_offering_service_map` (`network_offering_id`," + " `service`, `provider`, `created`) values (?,?,?, now())");
        pstmt.setLong(1,id);
        pstmt.setString(2,service);
        pstmt.setString(3,services.get(service));
        pstmt.executeUpdate();
      }
      pstmt=conn.prepareStatement("UPDATE `cloud`.`network_offerings` set shared_source_nat_service=?, dedicated_lb_service=? where id=?");
      pstmt.setBoolean(1,sharedSourceNat);
      pstmt.setBoolean(2,dedicatedLb);
      pstmt.setLong(3,id);
      pstmt.executeUpdate();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to create service/provider map for network offerings",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}
