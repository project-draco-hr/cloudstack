@attr(tags=['advanced'], required_hardware='false')
def test_02_dedicate_public_ip_range_user_domain(self):
    'Dedicate public IP range to an account in user domain\n\n        # Validate the following:\n        # 1. Create a Public IP range\n        # 2. Created IP range should be present, verify with listVlanIpRanges\n        # 3. Dedicate the created IP range to user account\n        # 4. Verify IP range is dedicated, verify with listVlanIpRanges\n        # 5. Release the dedicated Public IP range back to the system\n        # 6. Verify IP range has been released, verify with listVlanIpRanges\n        # 7. Delete the Public IP range'
    user_domain = Domain.create(self.apiclient, services=self.testdata['domain'], parentdomainid=self.domain.id)
    self.cleanup.append(user_domain)
    account = Account.create(self.apiclient, self.testdata['account'], domainid=user_domain.id)
    self.cleanup.insert((-1), account)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(public_ip_ranges[0].id, public_ip_range.vlan.id, 'Check public ip range response id is in listVlanIpRanges')
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(public_ip_ranges[0].account, account.name, 'Check account name is in listVlanIpRanges               as the account public ip range is dedicated to')
    return
