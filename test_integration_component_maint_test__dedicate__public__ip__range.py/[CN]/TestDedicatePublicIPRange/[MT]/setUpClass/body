@classmethod
def setUpClass(cls):
    cls.testClient = super(TestDedicatePublicIPRange, cls).getClsTestClient()
    cls.apiclient = cls.testClient.getApiClient()
    cls.testdata = cls.testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())
    cls.testdata['isolated_network']['zoneid'] = cls.zone.id
    cls.testdata['publiciprange']['zoneid'] = cls.zone.id
    cls._cleanup = []
    try:
        cls.isolated_network_offering = NetworkOffering.create(cls.apiclient, cls.testdata['isolated_network_offering'])
        cls._cleanup.append(cls.isolated_network_offering)
        cls.isolated_network_offering.update(cls.apiclient, state='Enabled')
        cls.vpc_network_offering = NetworkOffering.create(cls.apiclient, cls.testdata['nw_offering_isolated_vpc'], conservemode=False)
        cls._cleanup.append(cls.vpc_network_offering)
        cls.vpc_network_offering.update(cls.apiclient, state='Enabled')
        cls.vpc_off = VpcOffering.create(cls.apiclient, cls.testdata['vpc_offering'])
        cls.vpc_off.update(cls.apiclient, state='Enabled')
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(e)
    return
