@attr(tags=['advanced'], required_hardware='false')
def test_05_acquire_ip_single_guest_network(self):
    'Create guest network in account with dedicated public\n           ip range and acquire IPs in network\n\n        # Validate the following:\n        # 1. Create a Public IP range with 2 IPs in it\n        # 2. Dedicate the created IP range to user account\n        # 3. Create a guest network in the account\n        # 4. Acquire a public IP for this network\n        # 5. Verify that the acquired IP is from the dedicated range\n        # 6. Repeat steps 4 and 5 so that both the IPs in the range are\n             now acquired\n        # 7. Repeat step 4\n        # 8. Now this public IP should not be from the dedicated range,\n             it should be from global pool\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], account.name, account.domainid, networkofferingid=self.isolated_network_offering.id)
    formatted_startip = IPAddress(self.testdata['publiciprange']['startip'])
    formatted_endip = IPAddress(self.testdata['publiciprange']['endip'])
    public_ip1 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip1.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    public_ip2 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip2.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    public_ip3 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip3.ipaddress.ipaddress)
    self.assertFalse((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should not be from the dedicated range')
    return
