@attr(tags=['advanced'], required_hardware='false')
def test_21_release_dedicated_range_ip_address_in_use(self):
    'Dedicate a public IP range, acquire some IPs and relese the range\n\n        # Validate the following:\n        # 1. Create an account\n        # 2. Create a guest network in the account\n        # 3. Create a Public IP range in an account\n        # 4. Dedicate the created IP range to user account\n        # 5. Acquire IP in the network and verify that it is from dedicated\n             range\n        # 6. Release the public IP range, verify that it is released\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(public_ip_ranges[0].account, account.name, 'Check account name is in listVlanIpRanges               as the account public ip range is dedicated to')
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], account.name, account.domainid, networkofferingid=self.isolated_network_offering.id)
    formatted_startip = IPAddress(self.testdata['publiciprange']['startip'])
    formatted_endip = IPAddress(self.testdata['publiciprange']['endip'])
    public_ip1 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip1.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    public_ip_range.release(self.apiclient)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(str(public_ip_ranges[0].account).lower(), 'system', 'Check account name is system')
    return
