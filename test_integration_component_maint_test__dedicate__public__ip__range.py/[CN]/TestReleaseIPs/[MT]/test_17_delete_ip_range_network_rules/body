@attr(tags=['advanced'], required_hardware='false')
def test_17_delete_ip_range_network_rules(self):
    'Delete Dedicated public IP range with network rules on IP addresses\n\n        # Validate the following:\n        # 1. Create an account\n        # 2. Create a guest network in the account\n        # 3. Create a Public IP range\n        # 4  Dedicate the created IP range to user account\n        # 5. Acquire a public IP for the network\n        # 6. Verify that it is from the dedicated range\n        # 7. Create a LB rule for the public IP address\n        # 8. Try to delete the public IP range, the operation should fail\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], account.name, account.domainid, networkofferingid=self.isolated_network_offering.id)
    PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    formatted_startip = IPAddress(self.testdata['publiciprange']['startip'])
    formatted_endip = IPAddress(self.testdata['publiciprange']['endip'])
    public_ip = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    LoadBalancerRule.create(self.apiclient, self.testdata['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=account.name, networkid=isolated_network.id, domainid=account.domainid)
    with self.assertRaises(Exception):
        public_ip_range.delete(self.apiclient)
    return
