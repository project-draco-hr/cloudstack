@attr(tags=['advanced'], required_hardware='false')
def test_15_release_dedicated_range(self):
    'Release dedicated public ip range with no IPs acquired\n\n        # Validate the following:\n        # 1. Create a Public IP range in an account\n        # 2. Dedicate the created IP range to user account\n        # 3. Verify IP range is dedicated, verify with listVlanIpRanges\n        # 4. Release the public IP range, verify that it is released\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(public_ip_ranges[0].account, account.name, 'Check account name is in listVlanIpRanges               as the account public ip range is dedicated to')
    public_ip_range.release(self.apiclient)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(str(public_ip_ranges[0].account).lower(), 'system', 'Check account name is system')
    return
