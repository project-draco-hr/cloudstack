@attr(tags=['advanced'], required_hardware='false')
def test_14_release_ip_from_dedicated_range(self):
    'Disassociate a public IP from dedicated public IP range\n\n        # Validate the following:\n        # 1. Create an account in root domain\n        # 2. Create a guest network in the account\n        # 3. Acquire a public IP from global pool in this network\n             for source nat purpose\n        # 4. Create a public IP range\n        # 5. Dedicate this range to the account\n        # 6. Acquire public IP for the guest network\n        # 7. Verify that the public IP is from the dedicate range\n        # 8. Disassociate the public IP, the operation should be successful\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], account.name, account.domainid, networkofferingid=self.isolated_network_offering.id)
    PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    formatted_startip = IPAddress(self.testdata['publiciprange']['startip'])
    formatted_endip = IPAddress(self.testdata['publiciprange']['endip'])
    public_ip1 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip1.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    public_ip1.delete(self.apiclient)
    return
