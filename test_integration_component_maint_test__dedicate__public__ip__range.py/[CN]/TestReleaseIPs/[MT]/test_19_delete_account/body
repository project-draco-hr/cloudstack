@attr(tags=['advanced'], required_hardware='false')
def test_19_delete_account(self):
    'Create guest network in account with dedicated public ip range\n\n        # Validate the following:\n        # 1. Create an account\n        # 2. Create a Public IP range\n        # 3. Dedicate the created IP range to user account\n        # 4. Delete the account\n        # 5. Verify that the public IP range is released back to the system\n        '
    account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], account.name, account.domainid, networkofferingid=self.isolated_network_offering.id)
    public_ip_range = PublicIpRange.create(self.apiclient, self.testdata['publiciprange'])
    self.cleanup.append(public_ip_range)
    PublicIpRange.dedicate(self.apiclient, public_ip_range.vlan.id, account=account.name, domainid=account.domainid)
    formatted_startip = IPAddress(self.testdata['publiciprange']['startip'])
    formatted_endip = IPAddress(self.testdata['publiciprange']['endip'])
    public_ip1 = PublicIPAddress.create(self.apiclient, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=isolated_network.id)
    formatted_publicip = IPAddress(public_ip1.ipaddress.ipaddress)
    self.assertTrue((int(formatted_startip) <= int(formatted_publicip) <= int(formatted_endip)), 'publicip should be from the dedicated range')
    account.delete(self.apiclient)
    self.cleanup.remove(account)
    public_ip_ranges = PublicIpRange.list(self.apiclient, id=public_ip_range.vlan.id)
    self.assertEqual(validateList(public_ip_ranges)[0], PASS, 'public ip ranges list validation failed')
    self.assertEqual(str(public_ip_ranges[0].account).lower(), 'system', 'Account name should be system')
    return
