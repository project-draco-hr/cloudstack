{
  final AccountVO account=emailToBeSent.getAccount();
  final BigDecimal balance=emailToBeSent.getQuotaBalance();
  final BigDecimal usage=emailToBeSent.getQuotaUsage();
  final QuotaConfig.QuotaEmailTemplateTypes emailType=emailToBeSent.getEmailTemplateType();
  final List<QuotaEmailTemplatesVO> emailTemplates=_quotaEmailTemplateDao.listAllQuotaEmailTemplates(emailType.toString());
  if (emailTemplates != null && emailTemplates.get(0) != null) {
    final QuotaEmailTemplatesVO emailTemplate=emailTemplates.get(0);
    final DomainVO accountDomain=_domainDao.findByIdIncludingRemoved(account.getDomainId());
    final List<UserVO> usersInAccount=_userDao.listByAccount(account.getId());
    String userNames="";
    final List<String> emailRecipients=new ArrayList<String>();
    for (    UserVO user : usersInAccount) {
      userNames+=String.format("%s <%s>,",user.getUsername(),user.getEmail());
      emailRecipients.add(user.getEmail());
    }
    if (userNames.endsWith(",")) {
      userNames=userNames.substring(0,userNames.length() - 1);
    }
    final Map<String,String> optionMap=new HashMap<String,String>();
    optionMap.put("accountName",account.getAccountName());
    optionMap.put("accountID",account.getUuid());
    optionMap.put("accountUsers",userNames);
    optionMap.put("domainName",accountDomain.getName());
    optionMap.put("domainID",accountDomain.getUuid());
    optionMap.put("quotaBalance",QuotaConfig.QuotaCurrencySymbol.value() + " " + balance.toString());
    if (emailType == QuotaEmailTemplateTypes.QUOTA_STATEMENT) {
      optionMap.put("quotaUsage",QuotaConfig.QuotaCurrencySymbol.value() + " " + usage.toString());
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("accountName" + account.getAccountName() + "accountID"+ account.getUuid()+ "accountUsers"+ userNames+ "domainName"+ accountDomain.getName()+ "domainID"+ accountDomain.getUuid());
    }
    final StrSubstitutor templateEngine=new StrSubstitutor(optionMap);
    final String subject=templateEngine.replace(emailTemplate.getTemplateSubject());
    final String body=templateEngine.replace(emailTemplate.getTemplateBody());
    try {
      _emailQuotaAlert.sendQuotaAlert(emailRecipients,subject,body);
      emailToBeSent.sentSuccessfully(_quotaAcc);
    }
 catch (    Exception e) {
      s_logger.error(String.format("Unable to send quota alert email (subject=%s; body=%s) to account %s (%s) recipients (%s) due to error (%s)",subject,body,account.getAccountName(),account.getUuid(),emailRecipients,e));
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Exception",e);
      }
    }
  }
 else {
    s_logger.error(String.format("No quota email template found for type %s, cannot send quota alert email to account %s(%s)",emailType,account.getAccountName(),account.getUuid()));
  }
}
