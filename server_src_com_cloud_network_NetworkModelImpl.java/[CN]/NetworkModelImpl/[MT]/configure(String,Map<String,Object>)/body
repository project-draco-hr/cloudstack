{
  _configs=_configDao.getConfiguration("Network",params);
  _networkDomain=_configs.get(Config.GuestDomainSuffix.key());
  _allowSubdomainNetworkAccess=Boolean.valueOf(_configs.get(Config.SubDomainNetworkAccess.key()));
  _executeInSequenceNtwkElmtCmd=Boolean.valueOf(_configs.get(Config.ExecuteInSequenceNetworkElementCommands.key()));
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemPublicNetwork,TrafficType.Public,true);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemPublicNetwork,publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemManagementNetwork,TrafficType.Management,false);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemManagementNetwork,managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemControlNetwork,TrafficType.Control,false);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemControlNetwork,controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemStorageNetwork,TrafficType.Storage,true);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemStorageNetwork,storageNetworkOffering);
  NetworkOfferingVO privateGatewayNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemPrivateGatewayNetworkOffering,GuestType.Isolated);
  privateGatewayNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(privateGatewayNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemPrivateGatewayNetworkOffering,privateGatewayNetworkOffering);
  _privateOfferingId=privateGatewayNetworkOffering.getId();
  IpAddressSearch=_ipAddressDao.createSearchBuilder();
  IpAddressSearch.and("accountId",IpAddressSearch.entity().getAllocatedToAccountId(),Op.EQ);
  IpAddressSearch.and("dataCenterId",IpAddressSearch.entity().getDataCenterId(),Op.EQ);
  IpAddressSearch.and("vpcId",IpAddressSearch.entity().getVpcId(),Op.EQ);
  IpAddressSearch.and("associatedWithNetworkId",IpAddressSearch.entity().getAssociatedWithNetworkId(),Op.EQ);
  SearchBuilder<VlanVO> virtualNetworkVlanSB=_vlanDao.createSearchBuilder();
  virtualNetworkVlanSB.and("vlanType",virtualNetworkVlanSB.entity().getVlanType(),Op.EQ);
  IpAddressSearch.join("virtualNetworkVlanSB",virtualNetworkVlanSB,IpAddressSearch.entity().getVlanId(),virtualNetworkVlanSB.entity().getId(),JoinBuilder.JoinType.INNER);
  IpAddressSearch.done();
  NicForTrafficTypeSearch=_nicDao.createSearchBuilder();
  SearchBuilder<NetworkVO> networkSearch=_networksDao.createSearchBuilder();
  NicForTrafficTypeSearch.join("network",networkSearch,networkSearch.entity().getId(),NicForTrafficTypeSearch.entity().getNetworkId(),JoinType.INNER);
  NicForTrafficTypeSearch.and("instance",NicForTrafficTypeSearch.entity().getInstanceId(),Op.EQ);
  networkSearch.and("traffictype",networkSearch.entity().getTrafficType(),Op.EQ);
  NicForTrafficTypeSearch.done();
  s_logger.info("Network Model is configured.");
  return true;
}
