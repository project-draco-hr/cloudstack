{
  VMTemplateVO template=(VMTemplateVO)vmProfile.getTemplate();
  Account account=null;
  if (vmProfile.getVirtualMachine() != null) {
    account=vmProfile.getOwner();
  }
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  if (!allocatorIsCorrectType(dskCh)) {
    return suitablePools;
  }
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  if (dskCh.getTags() != null && dskCh.getTags().length != 0) {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId+ " having tags:"+ Arrays.toString(dskCh.getTags()));
  }
 else {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId);
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("No storage pools available for allocation, returning");
    }
    return suitablePools;
  }
  StatsCollector sc=StatsCollector.getInstance();
  if (_allocationAlgorithm.equals("random") || _allocationAlgorithm.equals("userconcentratedpod_random") || (account == null)) {
    Collections.shuffle(pools);
  }
 else   if (_allocationAlgorithm.equals("userdispersing")) {
    pools=reorderPoolsByNumberOfVolumes(plan,pools,account);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitStoragePoolAllocator has " + pools.size() + " pools to check for allocation");
  }
  for (  StoragePoolVO pool : pools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    if (checkPool(avoid,pool,dskCh,template,null,sc,plan)) {
      suitablePools.add(pool);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitStoragePoolAllocator returning " + suitablePools.size() + " suitable storage pools");
  }
  return suitablePools;
}
