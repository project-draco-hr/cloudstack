{
  VMInstanceVO vm=(VMInstanceVO)(vmProfile.getVirtualMachine());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  if (!allocatorIsCorrectType(dskCh,vm)) {
    return suitablePools;
  }
  long dcId=plan.getDataCenterId();
  long podId=plan.getPodId();
  long clusterId=plan.getClusterId();
  if (dskCh.getTags() != null && dskCh.getTags().length != 0) {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId+ " having tags:"+ Arrays.toString(dskCh.getTags()));
  }
 else {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId);
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("No storage pools available for allocation, returning");
    }
    return suitablePools;
  }
  StatsCollector sc=StatsCollector.getInstance();
  Collections.shuffle(pools);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitStoragePoolAllocator has " + pools.size() + " pools to check for allocation");
  }
  for (  StoragePoolVO pool : pools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    if (checkPool(avoid,pool,dskCh,template,null,vm,sc)) {
      suitablePools.add(pool);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitStoragePoolAllocator returning " + suitablePools.size() + " suitable storage pools");
  }
  return suitablePools;
}
