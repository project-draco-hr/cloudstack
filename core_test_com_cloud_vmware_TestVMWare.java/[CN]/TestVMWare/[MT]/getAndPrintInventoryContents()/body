{
  TraversalSpec resourcePoolTraversalSpec=new TraversalSpec();
  resourcePoolTraversalSpec.setName("resourcePoolTraversalSpec");
  resourcePoolTraversalSpec.setType("ResourcePool");
  resourcePoolTraversalSpec.setPath("resourcePool");
  resourcePoolTraversalSpec.setSkip(new Boolean(false));
  resourcePoolTraversalSpec.setSelectSet(new SelectionSpec[]{new SelectionSpec(null,null,"resourcePoolTraversalSpec")});
  TraversalSpec computeResourceRpTraversalSpec=new TraversalSpec();
  computeResourceRpTraversalSpec.setName("computeResourceRpTraversalSpec");
  computeResourceRpTraversalSpec.setType("ComputeResource");
  computeResourceRpTraversalSpec.setPath("resourcePool");
  computeResourceRpTraversalSpec.setSkip(new Boolean(false));
  computeResourceRpTraversalSpec.setSelectSet(new SelectionSpec[]{new SelectionSpec(null,null,"resourcePoolTraversalSpec")});
  TraversalSpec computeResourceHostTraversalSpec=new TraversalSpec();
  computeResourceHostTraversalSpec.setName("computeResourceHostTraversalSpec");
  computeResourceHostTraversalSpec.setType("ComputeResource");
  computeResourceHostTraversalSpec.setPath("host");
  computeResourceHostTraversalSpec.setSkip(new Boolean(false));
  TraversalSpec datacenterHostTraversalSpec=new TraversalSpec();
  datacenterHostTraversalSpec.setName("datacenterHostTraversalSpec");
  datacenterHostTraversalSpec.setType("Datacenter");
  datacenterHostTraversalSpec.setPath("hostFolder");
  datacenterHostTraversalSpec.setSkip(new Boolean(false));
  datacenterHostTraversalSpec.setSelectSet(new SelectionSpec[]{new SelectionSpec(null,null,"folderTraversalSpec")});
  TraversalSpec datacenterVmTraversalSpec=new TraversalSpec();
  datacenterVmTraversalSpec.setName("datacenterVmTraversalSpec");
  datacenterVmTraversalSpec.setType("Datacenter");
  datacenterVmTraversalSpec.setPath("vmFolder");
  datacenterVmTraversalSpec.setSkip(new Boolean(false));
  datacenterVmTraversalSpec.setSelectSet(new SelectionSpec[]{new SelectionSpec(null,null,"folderTraversalSpec")});
  TraversalSpec folderTraversalSpec=new TraversalSpec();
  folderTraversalSpec.setName("folderTraversalSpec");
  folderTraversalSpec.setType("Folder");
  folderTraversalSpec.setPath("childEntity");
  folderTraversalSpec.setSkip(new Boolean(false));
  folderTraversalSpec.setSelectSet(new SelectionSpec[]{new SelectionSpec(null,null,"folderTraversalSpec"),datacenterHostTraversalSpec,datacenterVmTraversalSpec,computeResourceRpTraversalSpec,computeResourceHostTraversalSpec,resourcePoolTraversalSpec});
  PropertySpec[] propspecary=new PropertySpec[]{new PropertySpec()};
  propspecary[0].setAll(new Boolean(false));
  propspecary[0].setPathSet(new String[]{"name"});
  propspecary[0].setType("ManagedEntity");
  PropertyFilterSpec spec=new PropertyFilterSpec();
  spec.setPropSet(propspecary);
  spec.setObjectSet(new ObjectSpec[]{new ObjectSpec()});
  spec.getObjectSet(0).setObj(cb.getConnection().getRootFolder());
  spec.getObjectSet(0).setSkip(new Boolean(false));
  spec.getObjectSet(0).setSelectSet(new SelectionSpec[]{folderTraversalSpec});
  ObjectContent[] ocary=cb.getConnection().getService().retrieveProperties(cb.getConnection().getServiceContent().getPropertyCollector(),new PropertyFilterSpec[]{spec});
  if (ocary != null) {
    ObjectContent oc=null;
    ManagedObjectReference mor=null;
    DynamicProperty[] pcary=null;
    DynamicProperty pc=null;
    for (int oci=0; oci < ocary.length; oci++) {
      oc=ocary[oci];
      mor=oc.getObj();
      pcary=oc.getPropSet();
      System.out.println("Object Type : " + mor.getType());
      System.out.println("Reference Value : " + mor.get_value());
      if (pcary != null) {
        for (int pci=0; pci < pcary.length; pci++) {
          pc=pcary[pci];
          System.out.println("   Property Name : " + pc.getName());
          if (pc != null) {
            if (!pc.getVal().getClass().isArray()) {
              System.out.println("   Property Value : " + pc.getVal());
            }
 else {
              Object[] ipcary=(Object[])pc.getVal();
              System.out.println("Val : " + pc.getVal());
              for (int ii=0; ii < ipcary.length; ii++) {
                Object oval=ipcary[ii];
                if (oval.getClass().getName().indexOf("ManagedObjectReference") >= 0) {
                  ManagedObjectReference imor=(ManagedObjectReference)oval;
                  System.out.println("Inner Object Type : " + imor.getType());
                  System.out.println("Inner Reference Value : " + imor.get_value());
                }
 else {
                  System.out.println("Inner Property Value : " + oval);
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    System.out.println("No Managed Entities retrieved!");
  }
}
