{
  Boolean forVirtualNetwork=(Boolean)params.get(BaseCmd.Properties.FOR_VIRTUAL_NETWORK.getName());
  String vlanId=(String)params.get(BaseCmd.Properties.VLAN.getName());
  String vlanGateway=(String)params.get(BaseCmd.Properties.GATEWAY.getName());
  String vlanNetmask=(String)params.get(BaseCmd.Properties.NETMASK.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  String startIp=(String)params.get(BaseCmd.Properties.START_IP.getName());
  String endIp=(String)params.get(BaseCmd.Properties.END_IP.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (forVirtualNetwork == null) {
    forVirtualNetwork=Boolean.TRUE;
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  Long accountId=null;
  if (accountName != null && domainId != null) {
    Account account=getManagementServer().findAccountByName(accountName,domainId);
    if (account == null || account.getRemoved() != null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid account.");
    }
 else {
      accountId=account.getId();
    }
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  VlanVO vlan=null;
  try {
    vlan=getManagementServer().createVlanAndPublicIpRange(userId,vlanType,zoneId,accountId,podId,vlanId,vlanGateway,vlanNetmask,startIp,endIp);
  }
 catch (  Exception e) {
    s_logger.error("Error adding VLAN: ",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),vlan.getId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.FOR_VIRTUAL_NETWORK.getName(),forVirtualNetwork));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VLAN.getName(),vlan.getVlanId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),vlan.getDataCenterId()));
  if (accountId != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountName));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),domainId));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(domainId).getName()));
  }
  if (podId != null) {
    HostPodVO pod=getManagementServer().findHostPodById(podId);
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_ID.getName(),podId));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_NAME.getName(),pod.getName()));
  }
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.GATEWAY.getName(),vlan.getVlanGateway()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NETMASK.getName(),vlan.getVlanNetmask()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DESCRIPTION.getName(),vlan.getIpRange()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.START_IP.getName(),startIp));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.END_IP.getName(),endIp));
  return returnValues;
}
