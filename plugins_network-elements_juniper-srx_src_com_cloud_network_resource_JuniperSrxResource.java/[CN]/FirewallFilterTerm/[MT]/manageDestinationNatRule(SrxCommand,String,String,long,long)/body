{
  String ruleName=genDestinationNatRuleName(publicIp,privateIp,srcPort,destPort);
  String poolName=genDestinationNatPoolName(privateIp,destPort);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.DEST_NAT_RULE_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
return sendRequestAndCheckResponse(command,xml,"name",ruleName);
case ADD:
if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS,publicIp,privateIp,srcPort,destPort)) {
return true;
}
if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS,privateIp,destPort)) {
throw new ExecutionException("The destination NAT pool corresponding to private IP: " + privateIp + " and destination port: "+ destPort+ " does not exist.");
}
xml=SrxXml.DEST_NAT_RULE_ADD.getXml();
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
xml=replaceXmlValue(xml,"public-address",publicIp);
xml=replaceXmlValue(xml,"src-port",String.valueOf(srcPort));
xml=replaceXmlValue(xml,"pool-name",poolName);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to add destination NAT rule from public IP " + publicIp + ", public port "+ srcPort+ ", private IP "+ privateIp+ ", and private port "+ destPort);
}
 else {
return true;
}
case DELETE:
if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS,publicIp,privateIp,srcPort,destPort)) {
return true;
}
xml=SrxXml.DEST_NAT_RULE_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to delete destination NAT rule from public IP " + publicIp + ", public port "+ srcPort+ ", private IP "+ privateIp+ ", and private port "+ destPort);
}
 else {
return true;
}
default :
s_logger.debug("Unrecognized command.");
return false;
}
}
