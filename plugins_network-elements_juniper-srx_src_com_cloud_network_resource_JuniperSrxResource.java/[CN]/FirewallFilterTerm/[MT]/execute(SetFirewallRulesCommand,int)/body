{
  FirewallRuleTO[] rules=cmd.getRules();
  try {
    openConfiguration();
    if (rules[0].getTrafficType() == FirewallRule.TrafficType.Egress) {
      Map<String,ArrayList<FirewallRuleTO>> activeRules=getActiveFirewallEgressRules(rules);
      Set<String> guestVlans=activeRules.keySet();
      boolean defaultEgressPolicy=rules[0].isDefaultEgressPolicy();
      FirewallRule.FirewallRuleType type=rules[0].getType();
      String guestCidr=rules[0].getGuestCidr();
      for (      String guestVlan : guestVlans) {
        List<FirewallRuleTO> activeRulesForGuestNw=activeRules.get(guestVlan);
        removeEgressSecurityPolicyAndApplications(SecurityPolicyType.SECURITYPOLICY_EGRESS,guestVlan,extractCidrs(activeRulesForGuestNw),defaultEgressPolicy);
        if (activeRulesForGuestNw.size() > 0 && type == FirewallRule.FirewallRuleType.User) {
          addEgressSecurityPolicyAndApplications(SecurityPolicyType.SECURITYPOLICY_EGRESS,guestVlan,extractApplications(activeRulesForGuestNw),extractCidrs(activeRulesForGuestNw),defaultEgressPolicy);
        }
        List<Object[]> applications=new ArrayList<Object[]>();
        Object[] application=new Object[3];
        application[0]=Protocol.all;
        application[1]=NetUtils.PORT_RANGE_MIN;
        application[2]=NetUtils.PORT_RANGE_MAX;
        applications.add(application);
        List<String> cidrs=new ArrayList<String>();
        cidrs.add(guestCidr);
        removeEgressSecurityPolicyAndApplications(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT,guestVlan,cidrs,false);
        if (defaultEgressPolicy == true) {
          addEgressSecurityPolicyAndApplications(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT,guestVlan,applications,cidrs,false);
        }
      }
      commitConfiguration();
    }
 else {
      for (      FirewallRuleTO rule : rules) {
        int startPort=NetUtils.PORT_RANGE_MIN, endPort=NetUtils.PORT_RANGE_MAX;
        if (rule.getSrcPortRange() != null) {
          startPort=rule.getSrcPortRange()[0];
          endPort=rule.getSrcPortRange()[1];
        }
        FirewallFilterTerm term=new FirewallFilterTerm(genIpIdentifier(rule.getSrcIp()) + "-" + String.valueOf(rule.getId()),rule.getSourceCidrList(),rule.getSrcIp(),rule.getProtocol(),startPort,endPort,rule.getIcmpType(),rule.getIcmpCode(),genIpIdentifier(rule.getSrcIp()) + _usageFilterIPInput.getCounterIdentifier());
        if (!rule.revoked()) {
          manageProxyArp(SrxCommand.ADD,getVlanTag(rule.getSrcVlanTag()),rule.getSrcIp());
          manageFirewallFilter(SrxCommand.ADD,term,_publicZoneInputFilterName);
        }
 else {
          manageFirewallFilter(SrxCommand.DELETE,term,_publicZoneInputFilterName);
          manageProxyArp(SrxCommand.DELETE,getVlanTag(rule.getSrcVlanTag()),rule.getSrcIp());
        }
      }
      commitConfiguration();
    }
    return new Answer(cmd);
  }
 catch (  ExecutionException e) {
    s_logger.error(e);
    closeConfiguration();
    if (numRetries > 0 && refreshSrxConnection()) {
      int numRetriesRemaining=numRetries - 1;
      s_logger.debug("Retrying SetFirewallRulesCommand. Number of retries remaining: " + numRetriesRemaining);
      return execute(cmd,numRetriesRemaining);
    }
 else {
      return new Answer(cmd,e);
    }
  }
}
