{
  if (!manageSecurityPolicy(type,SrxCommand.CHECK_IF_EXISTS,null,null,guestVlan,null,cidrs,null,defaultEgressAction)) {
    return true;
  }
  List<String> applications;
  applications=getApplicationsForSecurityPolicy(type,guestVlan,_privateZone,_publicZone);
  manageSecurityPolicy(type,SrxCommand.DELETE,null,null,guestVlan,null,cidrs,null,defaultEgressAction);
  List<String> unusedApplications;
  unusedApplications=getUnusedApplications(applications,_privateZone,_publicZone);
  for (  String application : unusedApplications) {
    Object[] applicationComponents;
    try {
      applicationComponents=parseApplicationName(type,application);
    }
 catch (    ExecutionException e) {
      s_logger.error("Found an invalid application: " + application + ". Not attempting to clean up.");
      continue;
    }
    Protocol protocol=(Protocol)applicationComponents[0];
    Integer startPort=(Integer)applicationComponents[1];
    Integer endPort=(Integer)applicationComponents[2];
    manageApplication(type,SrxCommand.DELETE,protocol,startPort,endPort);
  }
  for (  String cidr : cidrs) {
    manageAddressBookEntry(SrxCommand.DELETE,_publicZone,cidr,null);
  }
  return true;
}
