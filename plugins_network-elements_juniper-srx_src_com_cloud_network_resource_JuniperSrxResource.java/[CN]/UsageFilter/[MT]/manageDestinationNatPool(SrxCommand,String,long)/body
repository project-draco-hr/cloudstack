{
  String poolName=genDestinationNatPoolName(privateIp,destPort);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.DEST_NAT_POOL_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,"pool-name",poolName);
return sendRequestAndCheckResponse(command,xml,"name",poolName);
case CHECK_IF_IN_USE:
xml=SrxXml.DEST_NAT_RULE_GETALL.getXml();
xml=replaceXmlValue(xml,"rule-set",_publicZone);
return sendRequestAndCheckResponse(command,xml,"pool-name",poolName);
case ADD:
if (manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS,privateIp,destPort)) {
return true;
}
xml=SrxXml.DEST_NAT_POOL_ADD.getXml();
xml=replaceXmlValue(xml,"pool-name",poolName);
xml=replaceXmlValue(xml,"private-address",privateIp + "/32");
xml=replaceXmlValue(xml,"dest-port",String.valueOf(destPort));
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to add destination NAT pool for private IP " + privateIp + " and private port "+ destPort);
}
 else {
return true;
}
case DELETE:
if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS,privateIp,destPort)) {
return true;
}
if (manageDestinationNatPool(SrxCommand.CHECK_IF_IN_USE,privateIp,destPort)) {
return true;
}
xml=SrxXml.DEST_NAT_POOL_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,"pool-name",poolName);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to delete destination NAT pool for private IP " + privateIp + " and private port "+ destPort);
}
 else {
return true;
}
default :
throw new ExecutionException("Unrecognized command.");
}
}
