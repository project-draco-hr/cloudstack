@classmethod
def setUpClass(cls):
    cls._cleanup = []
    cls.testClient = super(TestBigSwitchBcf, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.bigswitch_services = cls.services['big_switch_bcf_device']
    try:
        resp = listPhysicalNetworks.listPhysicalNetworksCmd()
        resp.zoneid = cls.zone.id
        physical_networks = cls.api_client.listPhysicalNetworks(resp)
        if isinstance(physical_networks, list):
            cls.debug(('phy net %s' % physical_networks))
            physical_network = physical_networks[1]
        resp = listNetworkServiceProviders.listNetworkServiceProvidersCmd()
        resp.name = 'BigSwitchBcf'
        resp.physicalnetworkid = physical_network.id
        nw_service_providers = cls.api_client.listNetworkServiceProviders(resp)
        if isinstance(nw_service_providers, list):
            bigswitch_provider = nw_service_providers[0]
            cls.debug(('net serv prov %s' % nw_service_providers))
        else:
            resp_add_nsp = addNetworkServiceProvider.addNetworkServiceProviderCmd()
            resp_add_nsp.name = 'BigSwitchBcf'
            resp_add_nsp.physicalnetworkid = physical_network.id
            bigswitch_provider = cls.api_client.addNetworkServiceProvider(resp_add_nsp)
            resp_add_device = addBigSwitchBcfDevice.addBigSwitchBcfDeviceCmd()
            resp_add_device.physicalnetworkid = physical_network.id
            resp_add_device.username = cls.bigswitch_services['username']
            resp_add_device.password = cls.bigswitch_services['password']
            resp_add_device.hostname = cls.bigswitch_services['hostname']
            resp_add_device.retrycount = cls.bigswitch_services['retrycount']
            resp_add_device.retryinterval = cls.bigswitch_services['retryinterval']
            cls.bigswitch = cls.api_client.addBigSwitchBcfDevice(resp_add_device)
        if (bigswitch_provider.state != 'Enabled'):
            cmd = updateNetworkServiceProvider.updateNetworkServiceProviderCmd()
            cmd.id = bigswitch_provider.id
            cmd.state = 'Enabled'
            cls.api_client.updateNetworkServiceProvider(cmd)
        cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=True)
        cls._cleanup.append(cls.network_offering)
        cls.network_offering.update(cls.api_client, state='Enabled')
        cls.vpc_network_offering = NetworkOffering.create(cls.api_client, cls.services['vpc_network_offering'], conservemode=False)
        cls._cleanup.append(cls.vpc_network_offering)
        cls.vpc_network_offering.update(cls.api_client, state='Enabled')
        cls.vpc_offering = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
        cls._cleanup.append(cls.vpc_offering)
        cls.vpc_offering.update(cls.api_client, state='Enabled')
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls._cleanup.append(cls.service_offering)
    except Exception as e:
        cls.tearDownClass()
        raise Exception(('Warning: Exception in setUpClass: %s' % e))
    return
