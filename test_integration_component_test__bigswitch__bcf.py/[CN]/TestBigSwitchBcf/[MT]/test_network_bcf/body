@attr(tags=['advancedns'])
def test_network_bcf(self):
    'Test basic workflow with BigSwitch BCF plugin\n           1. Create a non-VPC guest network\n           2. Create two VMs on the network\n           3. Add firewall rule to make virtual router pingable\n           4. Test ping to virtual router public IP\n           5. Add static NAT to vm_1, with firewall rule to allow ssh\n           6. Ssh to vm_1, ping vm_2 private address, ping google.com\n        '
    self.debug(('STEP 1: Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('STEP 2: Deploying VMs in account: %s' % self.account.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=vm_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % vm_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=vm_2.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % vm_2.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug('STEP 3: Add FW rule to allow source nat ping')
    src_nat_list = PublicIPAddress.list(self.apiclient, associatednetworkid=self.network.id, account=self.account.name, domainid=self.account.domainid, listall=True, issourcenat=True)
    self.assertEqual(isinstance(src_nat_list, list), True, 'List Public IP should return a valid source NAT')
    self.assertNotEqual(len(src_nat_list), 0, 'Length of response from listPublicIp should not be 0')
    src_nat = src_nat_list[0]
    fw_rule_icmp = FireWallRule.create(self.apiclient, ipaddressid=src_nat.id, protocol='ICMP', cidrlist=['0.0.0.0/0'])
    self.debug(('Created firewall rule: %s' % fw_rule_icmp.id))
    self.debug(('STEP 4: Trying to ping source NAT %s' % src_nat.ipaddress))
    try:
        self.debug(('Trying to ping source NAT %s' % src_nat.ipaddress))
        result = subprocess.call(['ping', '-c 1', src_nat.ipaddress])
        self.debug(('Ping result: %s' % result))
        self.assertEqual(result, 0, 'Check if ping is successful or not')
    except Exception as e:
        self.fail(('Ping failed for source NAT %s (%s)' % (src_nat.ipaddress, e)))
    self.debug('STEP 5: Add static NAT to vm_1 with FW rule to allow SSH')
    floating_ip_1 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id)
    self.debug(('Associated %s with network %s' % (floating_ip_1.ipaddress, self.network.id)))
    NATRule.create(self.apiclient, vm_1, self.services['natrule'], ipaddressid=floating_ip_1.ipaddress.id, openfirewall=False, networkid=self.network.id)
    try:
        self.debug(('STEP 6: SSH into vm_1: %s' % floating_ip_1))
        ssh = vm_1.get_ssh_client(ipaddress=floating_ip_1.ipaddress.ipaddress)
        self.debug(('Ping vm_2 at %s' % vm_2.ipaddress))
        res_1 = ssh.execute(('ping -c 1 %s' % vm_2.ipaddress))
        self.debug('Ping to google.com from VM')
        res_2 = ssh.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('SSH Access failed: %s' % e))
    self.debug(('ping result1: %s' % res_1))
    self.debug(('ping result2: %s' % res_2))
    result1 = str(res_1)
    self.assertEqual(result1.count('1 received'), 1, 'Ping vm_2 from vm_1 should be successful')
    result2 = str(res_2)
    self.assertEqual(result2.count('1 received'), 1, 'Ping Internet from vm_1 should be successful')
    VirtualMachine.delete(vm_1, self.apiclient, expunge=True)
    VirtualMachine.delete(vm_2, self.apiclient, expunge=True)
    Network.delete(self.network, self.apiclient)
    return
