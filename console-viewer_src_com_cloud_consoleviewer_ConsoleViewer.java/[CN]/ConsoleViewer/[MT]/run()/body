{
  int[] pixels=new int[16 * 16];
  Image image=Toolkit.getDefaultToolkit().createImage(new MemoryImageSource(16,16,pixels,0,16));
  Cursor transparentCursor=Toolkit.getDefaultToolkit().createCustomCursor(image,new Point(0,0),"invisibleCursor");
  vncContainer.setCursor(transparentCursor);
  gridbag=new GridBagLayout();
  vncContainer.setLayout(gridbag);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  if (showControls) {
    buttonPanel=new ButtonPanel(this);
    gridbag.setConstraints(buttonPanel,gbc);
    vncContainer.add(buttonPanel);
  }
  if (options.autoScale && inSeparateFrame) {
    Dimension screenSize;
    try {
      screenSize=vncContainer.getToolkit().getScreenSize();
    }
 catch (    Exception e) {
      screenSize=new Dimension(0,0);
    }
    createCanvas(screenSize.width - 32,screenSize.height - 32);
  }
 else {
    createCanvas(0,0);
  }
  if (!options.viewOnly)   vc.enableInput(true);
  gbc.weightx=1.0;
  gbc.weighty=1.0;
  if (inSeparateFrame) {
    Panel canvasPanel=new Panel();
    canvasPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
    canvasPanel.add(vc);
    desktopScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
    gbc.fill=GridBagConstraints.BOTH;
    gridbag.setConstraints(desktopScrollPane,gbc);
    desktopScrollPane.add(canvasPanel);
    vncFrame.add(desktopScrollPane);
    vncFrame.pack();
    vc.resizeDesktopFrame();
  }
 else {
    gridbag.setConstraints(vc,gbc);
    applet.add(vc);
    applet.validate();
  }
  if (showControls)   buttonPanel.enableButtons();
  moveFocusToDesktop();
  try {
    connectAndAuthenticate();
    doProtocolInitialisation();
    vc.rfb=rfb;
    vc.setPixelFormat();
    vc.rfb.writeFramebufferUpdateRequest(0,0,vc.rfb.framebufferWidth,vc.rfb.framebufferHeight,false);
    vc.processNormalProtocol();
    showMessage("Disconnected from server");
  }
 catch (  NoRouteToHostException e) {
    fatalError("Network error: no route to server: " + host,e);
  }
catch (  UnknownHostException e) {
    fatalError("Network error: server name unknown: " + host,e);
  }
catch (  ConnectException e) {
    fatalError("Network error: could not connect to server: " + host + ":"+ port,e);
  }
catch (  EOFException e) {
    fatalError("Network error: remote side closed connection",e);
  }
catch (  IOException e) {
    fatalError(e.getMessage(),e);
  }
catch (  Exception e) {
    fatalError(e.getMessage(),e);
  }
 finally {
    encodingsSaved=null;
    nEncodingsSaved=0;
synchronized (this) {
      if (rfb != null) {
        rfb.close();
      }
    }
  }
  s_logger.info("Client RFB thread terminated");
}
