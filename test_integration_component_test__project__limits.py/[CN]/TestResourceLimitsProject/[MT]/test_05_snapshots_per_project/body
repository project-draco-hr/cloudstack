@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'simulator', 'selfservice'])
def test_05_snapshots_per_project(self):
    'Test Snapshot limit per project\n        '
    self.debug(('Updating snapshot resource limits for project: %s' % self.project.id))
    update_resource_limit(self.apiclient, 3, max=1, projectid=self.project.id)
    self.debug(('Deploying VM for account: %s' % self.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, serviceofferingid=self.service_offering.id, projectid=self.project.id)
    self.cleanup.append(virtual_machine_1)
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_1.id, projectid=self.project.id, type='ROOT')
    self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
    volume = volumes[0]
    self.debug(('Creating snapshot from volume: %s' % volumes[0].id))
    snapshot_1 = Snapshot.create(self.apiclient, volumes[0].id, projectid=self.project.id)
    self.cleanup.append(snapshot_1)
    snapshots = list_snapshots(self.apiclient, projectid=self.project.id)
    self.debug(('snapshots list: %s' % snapshots))
    self.assertEqual(validateList(snapshots)[0], PASS, 'Snapshots list validation failed')
    self.assertEqual(len(snapshots), 1, 'Snapshots list should have exactly one entity')
    with self.assertRaises(Exception):
        Snapshot.create(self.apiclient, volumes[0].id, projectid=self.project.id)
    return
