def test_04_publicip_per_project(self):
    'Test Public IP limit per project\n        '
    self.debug(('Updating public IP resource limits for project: %s' % self.project.id))
    update_resource_limit(self.apiclient, 1, max=2, projectid=self.project.id)
    self.debug(('Deploying VM for Project: %s' % self.project.id))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, serviceofferingid=self.service_offering.id, projectid=self.project.id)
    self.cleanup.append(virtual_machine_1)
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    networks = Network.list(self.apiclient, projectid=self.project.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'Check list networks response returns a valid response')
    self.assertNotEqual(len(networks), 0, 'Check list networks response returns a valid network')
    network = networks[0]
    self.debug(('Associating public IP for project: %s' % self.project.id))
    public_ip_1 = PublicIPAddress.create(self.apiclient, zoneid=virtual_machine_1.zoneid, services=self.services['server'], networkid=network.id, projectid=self.project.id)
    self.cleanup.append(public_ip_1)
    self.assertEqual((public_ip_1.ipaddress.state in ['Allocated', 'Allocating']), True, 'Check Public IP state is allocated or not')
    with self.assertRaises(Exception):
        public_ip_2 = PublicIPAddress.create(self.apiclient, zoneid=virtual_machine_1.zoneid, services=self.services['server'], networkid=network.id, projectid=self.project.id)
    return
