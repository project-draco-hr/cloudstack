@unittest.skip('No provision for updating resource limits from account through API')
def test_02_project_limits_normal_user(self):
    ' Test project limits\n        '
    project = Project.create(self.apiclient, self.services['project'], account=self.admin.account.name, domainid=self.admin.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    resource_limits = list_resource_limits(self.apiclient)
    self.assertEqual(isinstance(resource_limits, list), True, 'List resource API should return a valid list')
    self.assertNotEqual(len(resource_limits), 0, 'List resource API response should not be empty')
    for resource in resource_limits:
        update_resource_limit(self.apiclient, resource.resourcetype, max=1, projectid=project.id)
        self.debug(('Updating resource (ID: %s) limit for project: %s' % (resource, project.id)))
    resource_limits = list_resource_limits(self.apiclient, projectid=project.id)
    self.assertEqual(isinstance(resource_limits, list), True, 'List resource API should return a valid list')
    self.assertNotEqual(len(resource_limits), 0, 'List resource API response should not be empty')
    for resource in resource_limits:
        self.assertEqual(resource.max, 1, 'Resource limit should be updated to 1')
    self.debug(('Adding %s user to project: %s' % (self.user.account.name, project.name)))
    project.addAccount(self.apiclient, self.user.account.name)
    resource_limits = list_resource_limits(self.apiclient, domainid=self.domain.id)
    self.assertEqual(isinstance(resource_limits, list), True, 'List resource API should return a valid list')
    self.assertNotEqual(len(resource_limits), 0, 'List resource API response should not be empty')
    for resource in resource_limits:
        self.debug(('Attempting to update resource limit by user: %s' % self.user.account.name))
        update_resource_limit(self.apiclient, resource.resourcetype, account=self.user.account.name, domainid=self.user.account.domainid, max=3, projectid=project.id)
    return
