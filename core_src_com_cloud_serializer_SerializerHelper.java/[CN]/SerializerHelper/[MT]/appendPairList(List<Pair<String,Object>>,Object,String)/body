{
  if (o != null) {
    Class<?> clz=o.getClass();
    if (clz.isPrimitive() || clz.getSuperclass() == Number.class || clz == String.class || clz == Date.class) {
      l.add(new Pair<String,Object>(name,o.toString()));
      return l;
    }
    for (    Field f : clz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) != 0) {
        continue;
      }
      Param param=f.getAnnotation(Param.class);
      if (param == null) {
        continue;
      }
      String propName=f.getName();
      if (!param.propName().isEmpty()) {
        propName=param.propName();
      }
      String paramName=param.name();
      if (paramName.isEmpty()) {
        paramName=propName;
      }
      Method method=getGetMethod(o,propName);
      if (method != null) {
        try {
          Object fieldValue=method.invoke(o);
          if (fieldValue != null) {
            if (f.getType() == Date.class) {
              l.add(new Pair<String,Object>(paramName,DateUtil.getOutputString((Date)fieldValue)));
            }
 else {
              l.add(new Pair<String,Object>(paramName,fieldValue.toString()));
            }
          }
        }
 catch (        IllegalArgumentException e) {
          s_logger.error("Illegal argument exception when calling POJO " + o.getClass().getName() + " get method for property: "+ propName);
        }
catch (        IllegalAccessException e) {
          s_logger.error("Illegal access exception when calling POJO " + o.getClass().getName() + " get method for property: "+ propName);
        }
catch (        InvocationTargetException e) {
          s_logger.error("Invocation target exception when calling POJO " + o.getClass().getName() + " get method for property: "+ propName);
        }
      }
    }
  }
  return l;
}
