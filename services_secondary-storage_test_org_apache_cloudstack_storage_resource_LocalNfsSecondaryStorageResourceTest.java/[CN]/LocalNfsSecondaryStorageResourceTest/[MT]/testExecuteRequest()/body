{
  TemplateObjectTO template=Mockito.mock(TemplateObjectTO.class);
  NfsTO cacheStore=Mockito.mock(NfsTO.class);
  Mockito.when(cacheStore.getUrl()).thenReturn("nfs://nfs2.lab.vmops.com/export/home/edison/");
  SwiftTO swift=Mockito.mock(SwiftTO.class);
  Mockito.when(swift.getEndPoint()).thenReturn("https://objects.dreamhost.com/auth");
  Mockito.when(swift.getAccount()).thenReturn("cloudstack");
  Mockito.when(swift.getUserName()).thenReturn("images");
  Mockito.when(template.getDataStore()).thenReturn(swift);
  Mockito.when(template.getPath()).thenReturn("template/1/1/");
  Mockito.when(template.isRequiresHvm()).thenReturn(true);
  Mockito.when(template.getId()).thenReturn(1L);
  Mockito.when(template.getFormat()).thenReturn(Storage.ImageFormat.VHD);
  Mockito.when(template.getOrigUrl()).thenReturn("http://nfs1.lab.vmops.com/templates/ttylinux_pv.vhd");
  Mockito.when(template.getObjectType()).thenReturn(DataObjectType.TEMPLATE);
  DownloadCommand cmd=new DownloadCommand(template,100000L);
  cmd.setCacheStore(cacheStore);
  DownloadAnswer answer=(DownloadAnswer)resource.executeRequest(cmd);
  Assert.assertTrue(answer.getResult());
  Mockito.when(template.getPath()).thenReturn(answer.getInstallPath());
  Mockito.when(template.getDataStore()).thenReturn(swift);
  Mockito.when(cacheStore.getRole()).thenReturn(DataStoreRole.ImageCache);
  TemplateObjectTO destTemplate=Mockito.mock(TemplateObjectTO.class);
  Mockito.when(destTemplate.getPath()).thenReturn("template/1/2");
  Mockito.when(destTemplate.getDataStore()).thenReturn(cacheStore);
  Mockito.when(destTemplate.getObjectType()).thenReturn(DataObjectType.TEMPLATE);
  CopyCommand cpyCmd=new CopyCommand(template,destTemplate,10000,true);
  CopyCmdAnswer copyCmdAnswer=(CopyCmdAnswer)resource.executeRequest(cpyCmd);
  Assert.assertTrue(copyCmdAnswer.getResult());
}
