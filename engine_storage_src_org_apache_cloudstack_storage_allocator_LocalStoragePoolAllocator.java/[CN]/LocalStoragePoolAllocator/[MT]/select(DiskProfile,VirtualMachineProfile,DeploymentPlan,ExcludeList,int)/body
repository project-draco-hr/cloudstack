{
  logger.debug("LocalStoragePoolAllocator trying to find storage pool to fit the vm");
  if (!dskCh.useLocalStorage()) {
    return null;
  }
  if (logger.isTraceEnabled()) {
    List<StoragePoolVO> disabledPools=_storagePoolDao.findDisabledPoolsByScope(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId(),ScopeType.HOST);
    if (disabledPools != null && !disabledPools.isEmpty()) {
      for (      StoragePoolVO pool : disabledPools) {
        logger.trace("Ignoring pool " + pool + " as it is in disabled state.");
      }
    }
  }
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  if (plan.getHostId() != null) {
    List<StoragePoolVO> hostTagsPools=_storagePoolDao.findLocalStoragePoolsByHostAndTags(plan.getHostId(),dskCh.getTags());
    for (    StoragePoolVO pool : hostTagsPools) {
      if (pool != null && pool.isLocal()) {
        StoragePool storagePool=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
        if (filter(avoid,storagePool,dskCh,plan)) {
          logger.debug("Found suitable local storage pool " + pool.getId() + ", adding to list");
          suitablePools.add(storagePool);
        }
 else {
          avoid.addPool(pool.getId());
        }
      }
      if (suitablePools.size() == returnUpTo) {
        break;
      }
    }
  }
 else {
    if (plan.getPodId() == null) {
      return null;
    }
    List<StoragePoolVO> availablePools=_storagePoolDao.findLocalStoragePoolsByTags(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId(),dskCh.getTags());
    for (    StoragePoolVO pool : availablePools) {
      if (suitablePools.size() == returnUpTo) {
        break;
      }
      StoragePool storagePool=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
      if (filter(avoid,storagePool,dskCh,plan)) {
        suitablePools.add(storagePool);
      }
 else {
        avoid.addPool(pool.getId());
      }
    }
    List<StoragePoolVO> allPools=_storagePoolDao.findLocalStoragePoolsByTags(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId(),null);
    allPools.removeAll(availablePools);
    for (    StoragePoolVO pool : allPools) {
      avoid.addPool(pool.getId());
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("LocalStoragePoolAllocator returning " + suitablePools.size() + " suitable storage pools");
  }
  return suitablePools;
}
