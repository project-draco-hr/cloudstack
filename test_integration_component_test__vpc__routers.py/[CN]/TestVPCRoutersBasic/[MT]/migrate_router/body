def migrate_router(self, router):
    ' Migrate the router '
    self.debug('Checking if the host is available for migration?')
    hosts = Host.list(self.api_client, zoneid=self.zone.id, type='Routing')
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return a valid list')
    if (len(hosts) < 2):
        raise unittest.SkipTest('No host available for migration. Test requires atleast 2 hosts')
    hosts[:] = [host for host in hosts if (host.id != router.hostid)]
    host = hosts[0]
    self.debug('Validating if the network rules work properly or not?')
    self.debug(('Migrating VM-ID: %s from %s to Host: %s' % (router.id, router.hostid, host.id)))
    try:
        cmd = migrateSystemVm.migrateSystemVmCmd()
        cmd.isAsync = 'false'
        cmd.hostid = host.id
        cmd.virtualmachineid = router.id
        self.api_client.migrateSystemVm(cmd)
    except Exception as e:
        self.fail(('Failed to migrate instance, %s' % e))
    self.debug('Waiting for Router mgiration ....')
    time.sleep(240)
    router_response = list_routers(self.api_client, id=router.id)
    self.assertEqual(isinstance(router_response, list), True, 'Check list response returns a valid list')
    router.hostid = router_response[0].hostid
    self.assertEqual(router.hostid, host.id, ('Migration to host %s failed. The router host is still %s' % (host.id, router.hostid)))
    return
