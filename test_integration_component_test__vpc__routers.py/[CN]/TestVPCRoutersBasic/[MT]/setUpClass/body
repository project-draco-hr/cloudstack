@classmethod
def setUpClass(cls):
    cls.apiclient = super(TestVPCRoutersBasic, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.apiclient, cls.services)
    cls.zone = get_zone(cls.apiclient, cls.services)
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offering'])
    cls.vpc_off = VpcOffering.create(cls.apiclient, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.apiclient, state='Enabled')
    cls.account = Account.create(cls.apiclient, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls._cleanup = [cls.account]
    cls._cleanup.append(cls.vpc_off)
    cls.vpc_off.update(cls.apiclient, state='Enabled')
    cls.services['vpc']['cidr'] = '10.1.1.1/16'
    cls.vpc = VPC.create(cls.apiclient, cls.services['vpc'], vpcofferingid=cls.vpc_off.id, zoneid=cls.zone.id, account=cls.account.name, domainid=cls.account.domainid)
    cls._cleanup.append(cls.service_offering)
    return
