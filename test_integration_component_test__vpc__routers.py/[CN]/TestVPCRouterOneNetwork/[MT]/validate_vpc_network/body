def validate_vpc_network(self, network, state=None):
    'Validates the VPC network'
    self.debug('Check if the VPC network is created successfully?')
    vpc_networks = VPC.list(self.apiclient, id=network.id)
    self.assertEqual(isinstance(vpc_networks, list), True, 'List VPC network should return a valid list')
    self.assertEqual(network.name, vpc_networks[0].name, 'Name of the VPC network should match with listVPC data')
    if state:
        self.assertEqual(vpc_networks[0].state, state, ("VPC state should be '%s'" % state))
    self.debug(('VPC network validated - %s' % network.name))
    return
    try:
        ssh_1 = self.vm_1.get_ssh_client(ipaddress=self.public_ip_1.ipaddress.ipaddress)
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_1.execute('ping -c 1 www.google.com')
        result = str(res)
        self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
        self.debug('We should be allowed to ping virtual gateway')
        self.debug(('VM gateway: %s' % self.vm_1.nic[0].gateway))
        res = ssh_1.execute(('ping -c 1 %s' % self.vm_1.nic[0].gateway))
        self.debug(('ping -c 1 %s: %s' % (self.vm_1.nic[0].gateway, res)))
        result = str(res)
        self.assertEqual(result.count('1 received'), 1, 'Ping to VM gateway should be successful')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (self.public_ip_1.ipaddress.ipaddress, e)))
    return
