@attr(tags=['advanced', 'intervlan', 'selfservice'])
def test_04_chg_srv_off_router_after_addition_of_one_guest_network(self):
    ' Test to change service offering of router after addition of one guest network\n\t    '
    self.validate_vpc_offering(self.vpc_off)
    self.validate_vpc_network(self.vpc)
    self.assertEqual(isinstance(self.gateways, list), True, 'List private gateways should return a valid response')
    self.assertEqual(isinstance(self.static_routes, list), True, 'List static route should return a valid response')
    routers = Router.list(self.api_client, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List Routers should return a valid list')
    router = routers[0]
    self.debug(('Stopping the router with ID: %s' % router.id))
    cmd = stopRouter.stopRouterCmd()
    cmd.id = router.id
    self.api_client.stopRouter(cmd)
    service_offering = ServiceOffering.create(self.api_client, self.services['service_offering_new'])
    self.debug(('Changing service offering for the Router %s' % router.id))
    try:
        router = Router.change_service_offering(self.api_client, router.id, service_offering.id)
    except:
        self.fail('Changing service offering failed')
    self.debug(('Router %s' % router))
    routers = Router.list(self.api_client, account=self.account.name, domainid=self.account.domainid, listall=True)
    router = routers[0]
    self.assertEqual(router.serviceofferingid, service_offering.id, ('Changing service offering failed as id is %s and expectedis %s' % (router.serviceofferingid, service_offering.id)))
    return
