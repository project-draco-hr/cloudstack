@attr(tags=['advanced', 'intervlan', 'provisioining'])
def test_01_start_stop_router_after_addition_of_one_guest_network(self):
    ' Test start/stop of router after addition of one guest network\n            '
    self.validate_vpc_offering(self.vpc_off)
    self.validate_vpc_network(self.vpc)
    self.assertEqual(isinstance(self.gateways, list), True, 'List private gateways should return a valid response')
    self.assertEqual(isinstance(self.static_routes, list), True, 'List static route should return a valid response')
    routers = Router.list(self.api_client, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List Routers should return a valid list')
    router = routers[0]
    self.debug(('Stopping the router with ID: %s' % router.id))
    cmd = stopRouter.stopRouterCmd()
    cmd.id = router.id
    self.api_client.stopRouter(cmd)
    router_response = list_routers(self.api_client, id=router.id)
    self.assertEqual(isinstance(router_response, list), True, 'Check list response returns a valid list')
    self.assertEqual(router_response[0].state, 'Stopped', 'Check list router response for router state')
    self.debug(('Stopped the router with ID: %s' % router.id))
    self.debug(('Starting the router with ID: %s' % router.id))
    cmd = startRouter.startRouterCmd()
    cmd.id = router.id
    self.api_client.startRouter(cmd)
    router_response = list_routers(self.api_client, id=router.id)
    self.assertEqual(isinstance(router_response, list), True, 'Check list response returns a valid list')
    self.assertEqual(router_response[0].state, 'Running', 'Check list router response for router state')
    self.debug(('Started the router with ID: %s' % router.id))
    return
