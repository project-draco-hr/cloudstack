{
  Long snapshotId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Snapshot snapshotCheck=getManagementServer().findSnapshotById(snapshotId.longValue());
  if (snapshotCheck == null) {
    throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a snapshot with id " + snapshotId);
  }
  Account snapshotOwner=getManagementServer().findAccountById(snapshotCheck.getAccountId());
  if (snapshotOwner == null) {
    throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"Snapshot id " + snapshotId + " does not have a valid account");
  }
  checkAccountPermissions(params,snapshotOwner.getId(),snapshotOwner.getDomainId(),"snapshot",snapshotId);
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  try {
    long jobId=getManagementServer().deleteSnapshotAsync(userId,snapshotId);
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for DeleteSnapshot comamnd");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("DeleteSnapshot command has been accepted, job id: " + jobId);
    }
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    return returnValues;
  }
 catch (  Exception ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"internal error deleting snapshot " + ex.getMessage());
  }
}
