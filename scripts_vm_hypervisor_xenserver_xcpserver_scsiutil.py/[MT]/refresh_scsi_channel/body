def refresh_scsi_channel(channel):
    DEV_WAIT = 5
    util.SMlog(('Refreshing channel %s' % channel))
    util.wait_for_path(('/dev/disk/by-scsibus/*-%s*' % channel), DEV_WAIT)
    LUNs = glob.glob(('/dev/disk/by-scsibus/*-%s*' % channel))
    try:
        rootdevs = util.dom0_disks()
    except:
        util.SMlog('Failed to query root disk, failing operation')
        return False
    li = []
    Query = False
    for lun in LUNs:
        try:
            hbtl = lun.split('-')[(-1)]
            h = hbtl.split(':')
            l = util.pread2(['/usr/bin/sg_luns', '-q', lun]).split('\n')
            li = []
            for i in l:
                if len(i):
                    li.append(int(i[0:4], 16))
            util.SMlog(('sg_luns query returned %s' % li))
            Query = True
            break
        except:
            pass
    if (not Query):
        util.SMlog(('Failed to detect or query LUN on Channel %s' % channel))
        return False
    current = glob.glob(('/dev/disk/by-scsibus/*-%s:%s:%s*' % (h[0], h[1], h[2])))
    for cur in current:
        lunID = int(cur.split(':')[(-1)])
        newhbtl = ['', h[0], h[1], h[2], str(lunID)]
        if (os.path.realpath(cur) in rootdevs):
            if (lunID in li):
                li.remove(lunID)
            continue
        if (not (lunID in li)):
            util.SMlog(('Stale LUN detected. Removing HBTL: %s' % newhbtl))
            scsi_dev_ctrl(newhbtl, 'remove')
            util.wait_for_nopath(cur, DEV_WAIT)
            continue
        else:
            li.remove(lunID)
        cur_SCSIid = os.path.basename(cur).split(('-%s:%s:%s' % (h[0], h[1], h[2])))[0]
        real_SCSIid = getSCSIid(cur)
        if (cur_SCSIid != real_SCSIid):
            util.SMlog(('HBTL %s does not match, re-probing' % newhbtl))
            scsi_dev_ctrl(newhbtl, 'remove')
            util.wait_for_nopath(cur, DEV_WAIT)
            scsi_dev_ctrl(newhbtl, 'add')
            util.wait_for_path(('/dev/disk/by-scsibus/%s-%s' % (real_SCSIid, hbtl)), DEV_WAIT)
            pass
    for l in li:
        newhbtl = ['', h[0], h[1], h[2], str(l)]
        util.SMlog(('Probing new HBTL: %s' % newhbtl))
        scsi_dev_ctrl(newhbtl, 'add')
        util.wait_for_path(('/dev/disk/by-scsibus/*-%s' % hbtl), DEV_WAIT)
    return True
