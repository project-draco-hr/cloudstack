{
  final String label="[abc]";
  final String uuid="befc4dcd-f5c6-4015-8791-3c18622b7c7f";
  final Connection conn=Mockito.mock(Connection.class);
  final XsLocalNetwork network=Mockito.mock(XsLocalNetwork.class);
  final Network network2=Mockito.mock(Network.class);
  final PIF pif=Mockito.mock(PIF.class);
  final PIF.Record pifRec=Mockito.mock(PIF.Record.class);
  final XsHost xsHost=Mockito.mock(XsHost.class);
  final OvsFetchInterfaceCommand fetchInterCommand=new OvsFetchInterfaceCommand(label);
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.isXcp()).thenReturn(true);
  when(citrixResourceBase.getLabel()).thenReturn("[abc]");
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  when(citrixResourceBase.getHost()).thenReturn(xsHost);
  try {
    when(network.getNetwork()).thenReturn(network2);
    when(network.getPif(conn)).thenReturn(pif);
    when(network.getPif(conn)).thenReturn(pif);
    when(pif.getRecord(conn)).thenReturn(pifRec);
    when(network.getNetwork().getUuid(conn)).thenReturn(uuid);
    when(citrixResourceBase.getNetworkByName(conn,label)).thenReturn(network);
  }
 catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(fetchInterCommand,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertTrue(answer.getResult());
}
