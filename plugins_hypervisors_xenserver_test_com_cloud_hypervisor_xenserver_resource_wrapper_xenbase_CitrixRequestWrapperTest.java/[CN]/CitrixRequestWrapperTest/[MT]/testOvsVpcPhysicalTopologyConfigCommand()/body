{
  final String bridge="gre";
  final Connection conn=Mockito.mock(Connection.class);
  final Network network=Mockito.mock(Network.class);
  final OvsVpcPhysicalTopologyConfigCommand.Host[] hosts=new OvsVpcPhysicalTopologyConfigCommand.Host[0];
  final OvsVpcPhysicalTopologyConfigCommand.Tier[] tiers=new OvsVpcPhysicalTopologyConfigCommand.Tier[0];
  final OvsVpcPhysicalTopologyConfigCommand.Vm[] vms=new OvsVpcPhysicalTopologyConfigCommand.Vm[0];
  final OvsVpcPhysicalTopologyConfigCommand physicalTopology=new OvsVpcPhysicalTopologyConfigCommand(hosts,tiers,vms,"10.0.0.1/24");
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  try {
    when(citrixResourceBase.findOrCreateTunnelNetwork(conn,physicalTopology.getBridgeName())).thenReturn(network);
    when(network.getBridge(conn)).thenReturn(bridge);
    when(citrixResourceBase.callHostPlugin(conn,"ovstunnel","configure_ovs_bridge_for_network_topology","bridge",bridge,"config",physicalTopology.getVpcConfigInJson(),"host-id",((Long)physicalTopology.getHostId()).toString(),"seq-no",Long.toString(1))).thenReturn("SUCCESS");
  }
 catch (  final BadServerResponse e) {
    fail(e.getMessage());
  }
catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(physicalTopology,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertFalse(answer.getResult());
}
