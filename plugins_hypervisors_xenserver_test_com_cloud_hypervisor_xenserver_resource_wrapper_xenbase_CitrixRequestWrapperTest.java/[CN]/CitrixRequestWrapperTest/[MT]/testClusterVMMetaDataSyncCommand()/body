{
  final String uuid="6172d8b7-ba10-4a70-93f9-ecaf41f51d53";
  final Connection conn=Mockito.mock(Connection.class);
  final XsHost xsHost=Mockito.mock(XsHost.class);
  final Pool pool=PowerMockito.mock(Pool.class);
  final Pool.Record poolr=Mockito.mock(Pool.Record.class);
  final Host.Record hostr=Mockito.mock(Host.Record.class);
  final Host master=Mockito.mock(Host.class);
  final ClusterVMMetaDataSyncCommand vmDataSync=new ClusterVMMetaDataSyncCommand(10,1l);
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  try {
    when(citrixResourceBase.getHost()).thenReturn(xsHost);
    when(citrixResourceBase.getHost().getUuid()).thenReturn(uuid);
    PowerMockito.mockStatic(Pool.Record.class);
    when(pool.getRecord(conn)).thenReturn(poolr);
    poolr.master=master;
    when(poolr.master.getRecord(conn)).thenReturn(hostr);
    hostr.uuid=uuid;
  }
 catch (  final BadServerResponse e) {
    fail(e.getMessage());
  }
catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(vmDataSync,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertTrue(answer.getResult());
}
