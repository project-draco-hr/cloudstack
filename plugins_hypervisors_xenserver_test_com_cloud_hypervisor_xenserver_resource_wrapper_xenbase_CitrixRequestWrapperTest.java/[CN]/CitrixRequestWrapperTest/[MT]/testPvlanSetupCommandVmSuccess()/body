{
  final String label="net";
  final Connection conn=Mockito.mock(Connection.class);
  final XsLocalNetwork network=Mockito.mock(XsLocalNetwork.class);
  final Network network2=Mockito.mock(Network.class);
  final PvlanSetupCommand lanSetup=PvlanSetupCommand.createVmSetup("add",URI.create("http://127.0.0.1"),"tag","0:0:0:0:0:0");
  final String primaryPvlan=lanSetup.getPrimary();
  final String isolatedPvlan=lanSetup.getIsolated();
  final String op=lanSetup.getOp();
  final String vmMac=lanSetup.getVmMac();
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  try {
    when(citrixResourceBase.getNativeNetworkForTraffic(conn,TrafficType.Guest,"tag")).thenReturn(network);
    when(network.getNetwork()).thenReturn(network2);
    when(network2.getNameLabel(conn)).thenReturn(label);
  }
 catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  when(citrixResourceBase.callHostPlugin(conn,"ovs-pvlan","setup-pvlan-vm","op",op,"nw-label",label,"primary-pvlan",primaryPvlan,"isolated-pvlan",isolatedPvlan,"vm-mac",vmMac)).thenReturn("true");
  final Answer answer=wrapper.execute(lanSetup,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertTrue(answer.getResult());
}
