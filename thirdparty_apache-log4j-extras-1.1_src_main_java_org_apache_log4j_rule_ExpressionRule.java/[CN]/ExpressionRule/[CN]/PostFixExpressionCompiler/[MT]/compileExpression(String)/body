{
  RuleFactory factory=RuleFactory.getInstance();
  Stack stack=new Stack();
  InFixToPostFix.CustomTokenizer tokenizer=new InFixToPostFix.CustomTokenizer(expression);
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (token.startsWith("'") || token.startsWith("\"")) {
      String quoteChar=token.substring(0,1);
      token=token.substring(1);
      while (!token.endsWith(quoteChar) && tokenizer.hasMoreTokens()) {
        token=token + " " + tokenizer.nextToken();
      }
      if (token.length() > 0) {
        token=token.substring(0,token.length() - 1);
      }
    }
 else {
      if (factory.isRule(token)) {
        Rule r=factory.getRule(token,stack);
        stack.push(r);
        token=null;
      }
    }
    if (token != null && token.length() > 0) {
      stack.push(token);
    }
  }
  if ((stack.size() == 1) && (!(stack.peek() instanceof Rule))) {
    Object o=stack.pop();
    stack.push("MSG");
    stack.push(o);
    return factory.getRule("~=",stack);
  }
  if ((stack.size() != 1) || (!(stack.peek() instanceof Rule))) {
    throw new IllegalArgumentException("invalid expression: " + expression);
  }
 else {
    return (Rule)stack.pop();
  }
}
