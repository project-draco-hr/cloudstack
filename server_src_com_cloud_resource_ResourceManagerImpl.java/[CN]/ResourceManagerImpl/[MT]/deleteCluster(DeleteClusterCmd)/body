{
  try {
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      final TransactionStatus status){
        final ClusterVO cluster=_clusterDao.lockRow(cmd.getId(),true);
        if (cluster == null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Cluster: " + cmd.getId() + " does not even exist.  Delete call is ignored.");
          }
          throw new CloudRuntimeException("Cluster: " + cmd.getId() + " does not exist");
        }
        final Hypervisor.HypervisorType hypervisorType=cluster.getHypervisorType();
        final List<HostVO> hosts=listAllHostsInCluster(cmd.getId());
        if (hosts.size() > 0) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Cluster: " + cmd.getId() + " still has hosts, can't remove");
          }
          throw new CloudRuntimeException("Cluster: " + cmd.getId() + " cannot be removed. Cluster still has hosts");
        }
        final List<StoragePoolVO> storagePools=_storagePoolDao.listPoolsByCluster(cmd.getId());
        if (storagePools.size() > 0) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Cluster: " + cmd.getId() + " still has storage pools, can't remove");
          }
          throw new CloudRuntimeException("Cluster: " + cmd.getId() + " cannot be removed. Cluster still has storage pools");
        }
        if (_clusterDao.remove(cmd.getId())) {
          _capacityDao.removeBy(null,null,null,cluster.getId(),null);
          if (hypervisorType == HypervisorType.VMware && Boolean.parseBoolean(_configDao.getValue(Config.VmwareUseNexusVSwitch.toString()))) {
            _clusterVSMMapDao.removeByClusterId(cmd.getId());
          }
          final DedicatedResourceVO dr=_dedicatedDao.findByClusterId(cluster.getId());
          if (dr != null) {
            _dedicatedDao.remove(dr.getId());
          }
        }
      }
    }
);
    return true;
  }
 catch (  final CloudRuntimeException e) {
    throw e;
  }
catch (  final Throwable t) {
    s_logger.error("Unable to delete cluster: " + cmd.getId(),t);
    return false;
  }
}
