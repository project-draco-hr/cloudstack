{
  boolean newHost=false;
  StartupCommand startup=cmds[0];
  HostVO host=getNewHost(cmds);
  if (host == null) {
    host=new HostVO(startup.getGuid());
    newHost=true;
  }
  String dataCenter=startup.getDataCenter();
  String pod=startup.getPod();
  final String cluster=startup.getCluster();
  if (pod != null && dataCenter != null && pod.equalsIgnoreCase("default") && dataCenter.equalsIgnoreCase("default")) {
    final List<HostPodVO> pods=_podDao.listAllIncludingRemoved();
    for (    final HostPodVO hpv : pods) {
      if (checkCIDR(hpv,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hpv.getName();
        dataCenter=_dcDao.findById(hpv.getDataCenterId()).getName();
        break;
      }
    }
  }
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug("Cannot parse " + dataCenter + " into Long.");
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException("Host " + startup.getPrivateIpAddress() + " sent incorrect data center: "+ dataCenter);
  }
  dcId=dc.getId();
  HostPodVO p=_podDao.findByName(pod,dcId);
  if (p == null) {
    try {
      final long podId=Long.parseLong(pod);
      p=_podDao.findById(podId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug("Cannot parse " + pod + " into Long.");
    }
  }
  final Long podId=p == null ? null : p.getId();
  Long clusterId=null;
  if (cluster != null) {
    try {
      clusterId=Long.valueOf(cluster);
    }
 catch (    final NumberFormatException e) {
      if (podId != null) {
        ClusterVO c=_clusterDao.findBy(cluster,podId.longValue());
        if (c == null) {
          c=new ClusterVO(dcId,podId.longValue(),cluster);
          c=_clusterDao.persist(c);
        }
        clusterId=c.getId();
      }
    }
  }
  if (startup instanceof StartupRoutingCommand) {
    final StartupRoutingCommand ssCmd=(StartupRoutingCommand)startup;
    final List<String> implicitHostTags=ssCmd.getHostTags();
    if (!implicitHostTags.isEmpty()) {
      if (hostTags == null) {
        hostTags=_hostTagsDao.gethostTags(host.getId());
      }
      if (hostTags != null) {
        implicitHostTags.removeAll(hostTags);
        hostTags.addAll(implicitHostTags);
      }
 else {
        hostTags=implicitHostTags;
      }
    }
  }
  host.setDataCenterId(dc.getId());
  host.setPodId(podId);
  host.setClusterId(clusterId);
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setManagementServerId(_nodeId);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setHostTags(hostTags);
  host.setDetails(details);
  if (startup.getStorageIpAddressDeux() != null) {
    host.setStorageIpAddressDeux(startup.getStorageIpAddressDeux());
    host.setStorageMacAddressDeux(startup.getStorageMacAddressDeux());
    host.setStorageNetmaskDeux(startup.getStorageNetmaskDeux());
  }
  if (resource != null) {
    host.setResource(resource.getClass().getName());
  }
  host=(HostVO)dispatchToStateAdapters(stateEvent,true,host,cmds,resource,details,hostTags);
  if (host == null) {
    throw new CloudRuntimeException("No resource state adapter response");
  }
  if (newHost) {
    host=_hostDao.persist(host);
  }
 else {
    _hostDao.update(host.getId(),host);
  }
  if (startup instanceof StartupRoutingCommand) {
    final StartupRoutingCommand ssCmd=(StartupRoutingCommand)startup;
    updateSupportsClonedVolumes(host,ssCmd.getSupportsClonedVolumes());
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.InternalCreated,_nodeId);
    _agentMgr.agentStatusTransitTo(host,Status.Event.AgentConnected,_nodeId);
  }
 catch (  final Exception e) {
    s_logger.debug("Cannot transmit host " + host.getId() + " to Creating state",e);
    _agentMgr.agentStatusTransitTo(host,Status.Event.Error,_nodeId);
    try {
      resourceStateTransitTo(host,ResourceState.Event.Error,_nodeId);
    }
 catch (    final NoTransitionException e1) {
      s_logger.debug("Cannot transmit host " + host.getId() + "to Error state",e);
    }
  }
  return host;
}
