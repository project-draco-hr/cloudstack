{
  if (host.getType() != Host.Type.Routing) {
    throw new CloudRuntimeException("Non-Routing host gets in deleteRoutingHost, id is " + host.getId());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Deleting Host: " + host.getId() + " Guid:"+ host.getGuid());
  }
  if (forceDestroyStorage) {
    StoragePoolVO storagePool=_storageMgr.findLocalStorageOnHost(host.getId());
    if (storagePool != null) {
      if (storagePool.getStatus() == StoragePoolStatus.Up || storagePool.getStatus() == StoragePoolStatus.ErrorInMaintenance) {
        try {
          StoragePool pool=_storageSvr.preparePrimaryStorageForMaintenance(storagePool.getId());
          if (pool == null) {
            s_logger.debug("Failed to set primary storage into maintenance mode");
            throw new UnableDeleteHostException("Failed to set primary storage into maintenance mode");
          }
        }
 catch (        Exception e) {
          s_logger.debug("Failed to set primary storage into maintenance mode, due to: " + e.toString());
          throw new UnableDeleteHostException("Failed to set primary storage into maintenance mode, due to: " + e.toString());
        }
      }
      List<VMInstanceVO> vmsOnLocalStorage=_storageMgr.listByStoragePool(storagePool.getId());
      for (      VMInstanceVO vm : vmsOnLocalStorage) {
        try {
          _vmMgr.destroy(vm.getUuid());
        }
 catch (        Exception e) {
          String errorMsg="There was an error Destory the vm: " + vm + " as a part of hostDelete id="+ host.getId();
          s_logger.debug(errorMsg,e);
          throw new UnableDeleteHostException(errorMsg + "," + e.getMessage());
        }
      }
    }
  }
 else {
    List<VMInstanceVO> vms=_vmDao.listByHostId(host.getId());
    if (!vms.isEmpty()) {
      if (isForced) {
        for (        VMInstanceVO vm : vms) {
          if (!vm.isHaEnabled() || vm.getState() == State.Stopping) {
            s_logger.debug("Stopping vm: " + vm + " as a part of deleteHost id="+ host.getId());
            try {
              _vmMgr.advanceStop(vm.getUuid(),false);
            }
 catch (            Exception e) {
              String errorMsg="There was an error stopping the vm: " + vm + " as a part of hostDelete id="+ host.getId();
              s_logger.debug(errorMsg,e);
              throw new UnableDeleteHostException(errorMsg + "," + e.getMessage());
            }
          }
 else           if (vm.isHaEnabled() && (vm.getState() == State.Running || vm.getState() == State.Starting)) {
            s_logger.debug("Scheduling restart for vm: " + vm + " "+ vm.getState()+ " on the host id="+ host.getId());
            _haMgr.scheduleRestart(vm,false);
          }
        }
      }
 else {
        throw new UnableDeleteHostException("Unable to delete the host as there are vms in " + vms.get(0).getState() + " state using this host and isForced=false specified");
      }
    }
  }
}
