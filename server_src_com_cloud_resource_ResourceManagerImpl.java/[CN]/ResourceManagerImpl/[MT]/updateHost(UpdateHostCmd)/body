{
  Long hostId=cmd.getId();
  Long guestOSCategoryId=cmd.getOsCategoryId();
  if (guestOSCategoryId != null) {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      throw new InvalidParameterValueException("Host with id " + hostId + " doesn't exist");
    }
    if (guestOSCategoryId > 0) {
      if (_guestOSCategoryDao.findById(guestOSCategoryId) == null) {
        throw new InvalidParameterValueException("Please specify a valid guest OS category.");
      }
    }
    GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
    Map<String,String> hostDetails=_hostDetailsDao.findDetails(hostId);
    if (guestOSCategory != null) {
      hostDetails.put("guest.os.category.id",String.valueOf(guestOSCategory.getId()));
    }
 else {
      hostDetails.remove("guest.os.category.id");
    }
    _hostDetailsDao.persist(hostId,hostDetails);
  }
  String allocationState=cmd.getAllocationState();
  if (allocationState != null) {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      throw new InvalidParameterValueException("Host with id " + hostId + " doesn't exist");
    }
    try {
      HostAllocationState newAllocationState=Host.HostAllocationState.valueOf(allocationState);
      if (newAllocationState == null) {
        s_logger.error("Unable to resolve " + allocationState + " to a valid supported allocation State");
        throw new InvalidParameterValueException("Unable to resolve " + allocationState + " to a supported state");
      }
 else {
        host.setHostAllocationState(newAllocationState);
      }
    }
 catch (    IllegalArgumentException ex) {
      s_logger.error("Unable to resolve " + allocationState + " to a valid supported allocation State");
      throw new InvalidParameterValueException("Unable to resolve " + allocationState + " to a supported state");
    }
    _hostDao.update(hostId,host);
  }
  List<String> hostTags=cmd.getHostTags();
  if (hostTags != null) {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      throw new InvalidParameterValueException("Host with id " + hostId + " doesn't exist");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Updating Host Tags to :" + hostTags);
    }
    _hostTagsDao.persist(hostId,hostTags);
  }
  HostVO updatedHost=_hostDao.findById(hostId);
  return updatedHost;
}
