{
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error("Unable to resolve " + hypervisor + " to a valid supported hypervisor type");
      throw new InvalidParameterValueException("Unable to resolve " + hypervisor + " to a supported type");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve " + clusterType + " to a supported type");
    }
    if (newClusterType == null) {
      s_logger.error("Unable to resolve " + clusterType + " to a valid supported cluster type");
      throw new InvalidParameterValueException("Unable to resolve " + clusterType + " to a supported type");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve Allocation State '" + allocationState + "' to a supported state");
    }
    if (newAllocationState == null) {
      s_logger.error("Unable to resolve " + allocationState + " to a valid supported allocation State");
      throw new InvalidParameterValueException("Unable to resolve " + allocationState + " to a supported state");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error("Unable to update cluster due to " + e.getMessage(),e);
      throw new CloudRuntimeException("Failed to update cluster. Please contact Cloud Support.");
    }
  }
  return cluster;
}
