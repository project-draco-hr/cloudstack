{
  final long dcId=cmd.getZoneId();
  final long podId=cmd.getPodId();
  final String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  final String username=cmd.getUsername();
  final String password=cmd.getPassword();
  if (url != null) {
    url=URLDecoder.decode(url);
  }
  URI uri=null;
  final DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    final InvalidParameterValueException ex=new InvalidParameterValueException("Can't find zone by the id specified");
    ex.addProxyObject(String.valueOf(dcId),"dcId");
    throw ex;
  }
  final Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {
    final PermissionDeniedException ex=new PermissionDeniedException("Cannot perform this operation, Zone with specified id is currently disabled");
    ex.addProxyObject(zone.getUuid(),"dcId");
    throw ex;
  }
  final HostPodVO pod=_podDao.findById(podId);
  if (pod == null) {
    throw new InvalidParameterValueException("Can't find pod with specified podId " + podId);
  }
  if (_podDao.findById(podId) == null) {
    throw new InvalidParameterValueException("Can't find pod by id " + podId);
  }
  if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
    final InvalidParameterValueException ex=new InvalidParameterValueException("Pod with specified id doesn't belong to the zone " + dcId);
    ex.addProxyObject(pod.getUuid(),"podId");
    ex.addProxyObject(zone.getUuid(),"dcId");
    throw ex;
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException("Please specify cluster name");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException("Please specify a hypervisor");
  }
  final Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(cmd.getHypervisor());
  if (hypervisorType == null) {
    logger.error("Unable to resolve " + cmd.getHypervisor() + " to a valid supported hypervisor type");
    throw new InvalidParameterValueException("Unable to resolve " + cmd.getHypervisor() + " to a supported ");
  }
  if (zone.isSecurityGroupEnabled() && zone.getNetworkType().equals(NetworkType.Advanced)) {
    if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.XenServer && hypervisorType != HypervisorType.LXC && hypervisorType != HypervisorType.Simulator) {
      throw new InvalidParameterValueException("Don't support hypervisor type " + hypervisorType + " in advanced security enabled zone");
    }
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Grouping.AllocationState allocationState=null;
  if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {
    try {
      allocationState=Grouping.AllocationState.valueOf(cmd.getAllocationState());
    }
 catch (    final IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve Allocation State '" + cmd.getAllocationState() + "' to a supported state");
    }
  }
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled;
  }
  final Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException("Could not find corresponding resource manager for " + cmd.getHypervisor());
  }
  if (hypervisorType == HypervisorType.VMware) {
    final Map<String,String> allParams=cmd.getFullUrlParams();
    discoverer.putParam(allParams);
  }
  final List<ClusterVO> result=new ArrayList<ClusterVO>();
  ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
  cluster.setHypervisorType(hypervisorType.toString());
  cluster.setClusterType(clusterType);
  cluster.setAllocationState(allocationState);
  try {
    cluster=_clusterDao.persist(cluster);
  }
 catch (  final Exception e) {
    final CloudRuntimeException ex=new CloudRuntimeException("Unable to create cluster " + clusterName + " in pod and data center with specified ids",e);
    ex.addProxyObject(pod.getUuid(),"podId");
    ex.addProxyObject(zone.getUuid(),"dcId");
    throw ex;
  }
  result.add(cluster);
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    final Map<String,String> details=new HashMap<String,String>();
    if (hypervisorType == HypervisorType.Ovm3) {
      final Map<String,String> allParams=cmd.getFullUrlParams();
      details.put("ovm3vip",allParams.get("ovm3vip"));
      details.put("ovm3pool",allParams.get("ovm3pool"));
      details.put("ovm3cluster",allParams.get("ovm3cluster"));
    }
    details.put("cpuOvercommitRatio",CapacityManager.CpuOverprovisioningFactor.value().toString());
    details.put("memoryOvercommitRatio",CapacityManager.MemOverprovisioningFactor.value().toString());
    _clusterDetailsDao.persist(cluster.getId(),details);
    return result;
  }
  final Map<String,String> details=new HashMap<String,String>();
  details.put("url",url);
  details.put("username",username);
  details.put("password",password);
  details.put("cpuOvercommitRatio",CapacityManager.CpuOverprovisioningFactor.value().toString());
  details.put("memoryOvercommitRatio",CapacityManager.MemOverprovisioningFactor.value().toString());
  _clusterDetailsDao.persist(cluster.getId(),details);
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException("uri.scheme is null " + url + ", add http:// as a prefix");
      }
 else       if (uri.getScheme().equalsIgnoreCase("http")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase("") || uri.getPath() == null || uri.getPath().equalsIgnoreCase("")) {
          throw new InvalidParameterValueException("Your host and/or path is wrong.  Make sure it's of the format http://hostname/path");
        }
      }
    }
 catch (    final URISyntaxException e) {
      throw new InvalidParameterValueException(url + " is not a valid uri");
    }
    final List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    resources=discoverer.find(dcId,podId,cluster.getId(),uri,username,password,null);
    if (resources != null) {
      for (      final Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        final ServerResource resource=entry.getKey();
        final HostVO host=(HostVO)createHostAndAgent(resource,entry.getValue(),true,null,false);
        if (host != null) {
          hosts.add(host);
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      logger.info("External cluster has been successfully discovered by " + discoverer.getName());
      success=true;
      return result;
    }
    logger.warn("Unable to find the server resources at " + url);
    throw new DiscoveryException("Unable to add the external cluster");
  }
  finally {
    if (!success) {
      _clusterDetailsDao.deleteDetails(cluster.getId());
      _clusterDao.remove(cluster.getId());
    }
  }
}
