def createConnection(self):
    '\n        @Name: createConnection\n        @Desc: Creates an ssh connection for\n               retries mentioned,along with sleep mentioned\n        @Output: SUCCESS on successful connection\n                 FAILED If connection through ssh failed\n        '
    ret = FAILED
    except_msg = ''
    while (self.retryCnt >= 0):
        try:
            try:
                self.logger.debug(('====Trying SSH Connection: Host:%s User:%s                                   Port:%s RetryCnt:%s===' % (self.host, self.user, str(self.port), str(self.retryCnt))))
                if (self.keyPairFiles is None):
                    self.ssh.connect(hostname=self.host, port=self.port, username=self.user, password=self.passwd, timeout=self.timeout)
                else:
                    self.ssh.connect(hostname=self.host, port=self.port, username=self.user, password=self.passwd, key_filename=self.keyPairFiles, timeout=self.timeout, look_for_keys=False)
                self.logger.debug(('===SSH to Host %s port : %s SUCCESSFUL===' % (str(self.host), str(self.port))))
                ret = SUCCESS
                break
            except BadHostKeyException as e:
                except_msg = GetDetailExceptionInfo(e)
            except AuthenticationException as e:
                except_msg = GetDetailExceptionInfo(e)
            except SSHException as e:
                except_msg = GetDetailExceptionInfo(e)
            except socket.error as e:
                except_msg = GetDetailExceptionInfo(e)
            except Exception as e:
                except_msg = GetDetailExceptionInfo(e)
        finally:
            if ((self.retryCnt == 0) or (ret == SUCCESS)):
                break
            if (except_msg != ''):
                self.logger.exception(('SshClient: Exception under createConnection: %s' % except_msg))
            self.retryCnt -= 1
            time.sleep(self.delay)
    return ret
