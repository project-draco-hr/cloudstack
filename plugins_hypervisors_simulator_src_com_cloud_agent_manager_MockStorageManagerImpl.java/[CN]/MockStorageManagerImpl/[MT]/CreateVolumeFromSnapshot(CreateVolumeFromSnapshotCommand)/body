{
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.SIMULATOR_DB);
  MockVolumeVO backSnapshot=null;
  MockStoragePoolVO primary=null;
  try {
    txn.start();
    backSnapshot=_mockVolumeDao.findByName(cmd.getSnapshotUuid());
    if (backSnapshot == null) {
      return new CreateVolumeFromSnapshotAnswer(cmd,false,"can't find the backupsnapshot: " + cmd.getSnapshotUuid(),null);
    }
    primary=_mockStoragePoolDao.findByUuid(cmd.getPrimaryStoragePoolNameLabel());
    if (primary == null) {
      return new CreateVolumeFromSnapshotAnswer(cmd,false,"can't find the primary storage: " + cmd.getPrimaryStoragePoolNameLabel(),null);
    }
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Error when creating volume from snapshot",ex);
  }
 finally {
    txn.close();
    txn=TransactionLegacy.open(TransactionLegacy.CLOUD_DB);
    txn.close();
  }
  String uuid=UUID.randomUUID().toString();
  MockVolumeVO volume=new MockVolumeVO();
  volume.setName(uuid);
  volume.setPath(primary.getMountPoint() + uuid);
  volume.setPoolId(primary.getId());
  volume.setSize(backSnapshot.getSize());
  volume.setStatus(Status.DOWNLOADED);
  volume.setType(MockVolumeType.VOLUME);
  txn=TransactionLegacy.open(TransactionLegacy.SIMULATOR_DB);
  try {
    txn.start();
    _mockVolumeDao.persist(volume);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Error when creating volume from snapshot " + volume,ex);
  }
 finally {
    txn.close();
    txn=TransactionLegacy.open(TransactionLegacy.CLOUD_DB);
    txn.close();
  }
  return new CreateVolumeFromSnapshotAnswer(cmd,true,null,volume.getPath());
}
