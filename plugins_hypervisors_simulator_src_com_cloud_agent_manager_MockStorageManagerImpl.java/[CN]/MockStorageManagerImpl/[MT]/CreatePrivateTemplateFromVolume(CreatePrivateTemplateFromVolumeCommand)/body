{
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.SIMULATOR_DB);
  MockVolumeVO volume=null;
  MockSecStorageVO sec=null;
  try {
    txn.start();
    volume=_mockVolumeDao.findByStoragePathAndType(cmd.getVolumePath());
    if (volume == null) {
      return new CreatePrivateTemplateAnswer(cmd,false,"cant' find volume" + cmd.getVolumePath());
    }
    sec=_mockSecStorageDao.findByUrl(cmd.getSecondaryStorageUrl());
    if (sec == null) {
      return new CreatePrivateTemplateAnswer(cmd,false,"can't find secondary storage");
    }
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Error when creating private template from volume");
  }
 finally {
    txn.close();
    txn=TransactionLegacy.open(TransactionLegacy.CLOUD_DB);
    txn.close();
  }
  MockVolumeVO template=new MockVolumeVO();
  String uuid=UUID.randomUUID().toString();
  template.setName(uuid);
  template.setPath(sec.getMountPoint() + uuid);
  template.setPoolId(sec.getId());
  template.setSize(volume.getSize());
  template.setStatus(Status.DOWNLOADED);
  template.setType(MockVolumeType.TEMPLATE);
  txn=TransactionLegacy.open(TransactionLegacy.SIMULATOR_DB);
  try {
    txn.start();
    template=_mockVolumeDao.persist(template);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Encountered " + ex.getMessage() + " when persisting template "+ template.getName(),ex);
  }
 finally {
    txn.close();
    txn=TransactionLegacy.open(TransactionLegacy.CLOUD_DB);
    txn.close();
  }
  return new CreatePrivateTemplateAnswer(cmd,true,"",template.getName(),template.getSize(),template.getSize(),template.getName(),ImageFormat.QCOW2);
}
