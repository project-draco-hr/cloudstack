{
  final Map<String,String> configs=_configDao.getConfiguration("AgentManager",params);
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  _mgmtHost=configs.get("host");
  _mgmtCidr=_configDao.getValue(Config.ManagementNetwork.key());
  final String offUUID=configs.get(Config.InternalLbVmServiceOfferingId.key());
  if (offUUID != null && !offUUID.isEmpty()) {
    final ServiceOfferingVO off=_serviceOfferingDao.findByUuid(offUUID);
    if (off != null) {
      _internalLbVmOfferingId=off.getId();
    }
 else {
      s_logger.warn("Invalid offering UUID is passed in " + Config.InternalLbVmServiceOfferingId.key() + "; the default offering will be used instead");
    }
  }
  if (_internalLbVmOfferingId == 0L) {
    final boolean useLocalStorage=Boolean.parseBoolean(configs.get(DataCenter.SystemVMUseLocalStorageCK));
    ServiceOfferingVO newOff=new ServiceOfferingVO("System Offering For Internal LB VM",1,InternalLoadBalancerVMManager.DEFAULT_INTERNALLB_VM_RAMSIZE,InternalLoadBalancerVMManager.DEFAULT_INTERNALLB_VM_CPU_MHZ,null,null,true,null,Storage.ProvisioningType.THIN,useLocalStorage,true,null,true,VirtualMachine.Type.InternalLoadBalancerVm,true);
    newOff.setUniqueName(ServiceOffering.internalLbVmDefaultOffUniqueName);
    newOff=_serviceOfferingDao.persistSystemServiceOffering(newOff);
    _internalLbVmOfferingId=newOff.getId();
  }
  _itMgr.registerGuru(VirtualMachine.Type.InternalLoadBalancerVm,this);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(getName() + " has been configured");
  }
  return true;
}
