{
  logger.debug("Resending load balancing rules as a part of start for " + internalLbVm);
  final List<ApplicationLoadBalancerRuleVO> lbs=_lbDao.listBySrcIpSrcNtwkId(sourceIp,guestNtwkId);
  final List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
  if (_ntwkModel.isProviderSupportServiceInNetwork(guestNtwkId,Service.Lb,provider)) {
    for (    final ApplicationLoadBalancerRuleVO lb : lbs) {
      final List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
      final List<LbStickinessPolicy> policyList=_lbMgr.getStickinessPolicies(lb.getId());
      final List<LbHealthCheckPolicy> hcPolicyList=_lbMgr.getHealthCheckPolicies(lb.getId());
      final LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList,hcPolicyList,sourceIp);
      lbRules.add(loadBalancing);
    }
  }
  logger.debug("Found " + lbRules.size() + " load balancing rule(s) to apply as a part of Intenrnal LB vm"+ internalLbVm+ " start.");
  if (!lbRules.isEmpty()) {
    createApplyLoadBalancingRulesCommands(lbRules,internalLbVm,cmds,guestNtwkId);
  }
}
