{
  assert(morRp != null);
  OvfCreateImportSpecParams importSpecParams=new OvfCreateImportSpecParams();
  importSpecParams.setHostSystem(morHost);
  importSpecParams.setLocale("US");
  importSpecParams.setEntityName(vmName);
  importSpecParams.setDeploymentOption("");
  importSpecParams.setDiskProvisioning(diskOption);
  String ovfDescriptor=HttpNfcLeaseMO.readOvfContent(ovfFilePath);
  VmwareContext context=host.getContext();
  OvfCreateImportSpecResult ovfImportResult=context.getService().createImportSpec(context.getServiceContent().getOvfManager(),ovfDescriptor,morRp,dsMo.getMor(),importSpecParams);
  if (ovfImportResult == null) {
    String msg="createImportSpec() failed. ovfFilePath: " + ovfFilePath + ", vmName: "+ vmName+ ", diskOption: "+ diskOption;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  DatacenterMO dcMo=new DatacenterMO(context,host.getHyperHostDatacenter());
  ManagedObjectReference morLease=context.getService().importVApp(morRp,ovfImportResult.getImportSpec(),dcMo.getVmFolder(),morHost);
  if (morLease == null) {
    String msg="importVApp() failed. ovfFilePath: " + ovfFilePath + ", vmName: "+ vmName+ ", diskOption: "+ diskOption;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean importSuccess=true;
  final HttpNfcLeaseMO leaseMo=new HttpNfcLeaseMO(context,morLease);
  HttpNfcLeaseState state=leaseMo.waitState(new HttpNfcLeaseState[]{HttpNfcLeaseState.READY,HttpNfcLeaseState.ERROR});
  try {
    if (state == HttpNfcLeaseState.READY) {
      final long totalBytes=HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);
      File ovfFile=new File(ovfFilePath);
      HttpNfcLeaseInfo httpNfcLeaseInfo=leaseMo.getLeaseInfo();
      List<HttpNfcLeaseDeviceUrl> deviceUrls=httpNfcLeaseInfo.getDeviceUrl();
      long bytesAlreadyWritten=0;
      final HttpNfcLeaseMO.ProgressReporter progressReporter=leaseMo.createProgressReporter();
      try {
        for (        HttpNfcLeaseDeviceUrl deviceUrl : deviceUrls) {
          String deviceKey=deviceUrl.getImportKey();
          for (          OvfFileItem ovfFileItem : ovfImportResult.getFileItem()) {
            if (deviceKey.equals(ovfFileItem.getDeviceId())) {
              String absoluteFile=ovfFile.getParent() + File.separator + ovfFileItem.getPath();
              String urlToPost=deviceUrl.getUrl();
              urlToPost=resolveHostNameInUrl(dcMo,urlToPost);
              context.uploadVmdkFile(ovfFileItem.isCreate() ? "PUT" : "POST",urlToPost,absoluteFile,bytesAlreadyWritten,new ActionDelegate<Long>(){
                @Override public void action(                Long param){
                  progressReporter.reportProgress((int)(param * 100 / totalBytes));
                }
              }
);
              bytesAlreadyWritten+=ovfFileItem.getSize();
            }
          }
        }
      }
 catch (      Exception e) {
        String erroMsg="File upload task failed to complete due to: " + e.getMessage();
        s_logger.error(erroMsg);
        importSuccess=false;
        throw new Exception(erroMsg);
      }
catch (      Throwable th) {
        String errorMsg="throwable caught during file upload task: " + th.getMessage();
        s_logger.error(errorMsg);
        importSuccess=false;
        throw new Exception(errorMsg,th);
      }
 finally {
        progressReporter.close();
      }
      if (bytesAlreadyWritten == totalBytes) {
        leaseMo.updateLeaseProgress(100);
      }
    }
 else     if (state == HttpNfcLeaseState.ERROR) {
      LocalizedMethodFault error=leaseMo.getLeaseError();
      MethodFault fault=error.getFault();
      String erroMsg="Object creation on vCenter failed due to: Exception: " + fault.getClass().getName() + ", message: "+ error.getLocalizedMessage();
      s_logger.error(erroMsg);
      throw new Exception(erroMsg);
    }
  }
  finally {
    if (!importSuccess) {
      s_logger.error("Aborting the lease on " + vmName + " after import operation failed.");
      leaseMo.abortLease();
    }
 else {
      leaseMo.completeLease();
    }
  }
}
