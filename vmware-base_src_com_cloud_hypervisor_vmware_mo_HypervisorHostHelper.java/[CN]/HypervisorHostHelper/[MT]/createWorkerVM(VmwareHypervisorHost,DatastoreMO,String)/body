{
  ManagedObjectReference morCluster=hyperHost.getHyperHostCluster();
  if (morCluster != null)   hyperHost=new ClusterMO(hyperHost.getContext(),morCluster);
  VirtualMachineMO workingVM=null;
  VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
  vmConfig.setName(vmName);
  vmConfig.setMemoryMB((long)4);
  vmConfig.setNumCPUs(1);
  vmConfig.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST.value());
  VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
  fileInfo.setVmPathName(dsMo.getDatastoreRootPath());
  vmConfig.setFiles(fileInfo);
  VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
  scsiController.setSharedBus(VirtualSCSISharing.NO_SHARING);
  scsiController.setBusNumber(0);
  scsiController.setKey(1);
  VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
  scsiControllerSpec.setDevice(scsiController);
  scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
  vmConfig.getDeviceChange().add(scsiControllerSpec);
  if (hyperHost.createVm(vmConfig)) {
    for (int i=0; i < 10 && workingVM == null; i++) {
      workingVM=hyperHost.findVmOnHyperHost(vmName);
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  if (workingVM != null) {
    workingVM.setCustomFieldValue(CustomFieldConstants.CLOUD_WORKER,"true");
    String workerTag=String.format("%d-%s",System.currentTimeMillis(),hyperHost.getContext().getStockObject("noderuninfo"));
    workingVM.setCustomFieldValue(CustomFieldConstants.CLOUD_WORKER_TAG,workerTag);
  }
  return workingVM;
}
