{
  setClientParam(param);
  client=new VncClient(this);
  worker=new Thread(new Runnable(){
    @Override public void run(){
      String tunnelUrl=getClientParam().getClientTunnelUrl();
      String tunnelSession=getClientParam().getClientTunnelSession();
      try {
        if (tunnelUrl != null && !tunnelUrl.isEmpty() && tunnelSession != null && !tunnelSession.isEmpty()) {
          URI uri=new URI(tunnelUrl);
          s_logger.info("Connect to VNC server via tunnel. url: " + tunnelUrl + ", session: "+ tunnelSession);
          ConsoleProxy.ensureRoute(uri.getHost());
          client.connectTo(uri.getHost(),uri.getPort(),uri.getPath() + "?" + uri.getQuery(),tunnelSession,"https".equalsIgnoreCase(uri.getScheme()),getClientHostPassword());
        }
 else {
          s_logger.info("Connect to VNC server directly. host: " + getClientHostAddress() + ", port: "+ getClientHostPort());
          ConsoleProxy.ensureRoute(getClientHostAddress());
          client.connectTo(getClientHostAddress(),getClientHostPort(),getClientHostPassword());
        }
      }
 catch (      UnknownHostException e) {
        s_logger.error("Unexpected exception",e);
      }
catch (      IOException e) {
        s_logger.error("Unexpected exception",e);
      }
catch (      Throwable e) {
        s_logger.error("Unexpected exception",e);
      }
      s_logger.info("Receiver thread stopped.");
      workerDone=true;
      client.getClientListener().onClientClose();
    }
  }
);
  worker.setDaemon(true);
  worker.start();
}
