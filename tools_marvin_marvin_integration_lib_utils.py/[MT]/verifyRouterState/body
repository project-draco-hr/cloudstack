def verifyRouterState(apiclient, routerid, allowedstates):
    "List the router and verify that its state is in allowed states\n    @output: List, containing [Result, Reason]\n             Ist Argument ('Result'): FAIL: If router state is not\n                                                in allowed states\n                                          PASS: If router state is in\n                                                allowed states"
    try:
        cmd = listRouters.listRoutersCmd()
        cmd.id = routerid
        cmd.listall = True
        routers = apiclient.listRouters(cmd)
    except Exception as e:
        return [FAIL, e]
    listvalidationresult = validateList(routers)
    if (listvalidationresult[0] == FAIL):
        return [FAIL, listvalidationresult[2]]
    if (routers[0].redundantstate not in allowedstates):
        return [FAIL, ('Redundant state of the router should be in %s but is %s' % (allowedstates, routers[0].redundantstate))]
    return [PASS, None]
