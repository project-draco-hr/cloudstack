{
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  txn.start();
  if (logger.isDebugEnabled()) {
    logger.debug("Resetting hosts suitable for reconnect");
  }
  resetHosts(managementServerId,lastPingSecondsAfter);
  if (logger.isDebugEnabled()) {
    logger.debug("Completed resetting hosts suitable for reconnect");
  }
  List<HostVO> assignedHosts=new ArrayList<HostVO>();
  if (logger.isDebugEnabled()) {
    logger.debug("Acquiring hosts for clusters already owned by this management server");
  }
  List<Long> clusters=findClustersOwnedByManagementServer(managementServerId);
  if (clusters.size() > 0) {
    SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
    sc.setParameters("lastPinged",lastPingSecondsAfter);
    sc.setJoinParameters("ClusterManagedSearch","managed",Managed.ManagedState.Managed);
    sc.setParameters("clusterIn",clusters.toArray());
    List<HostVO> unmanagedHosts=lockRows(sc,new Filter(HostVO.class,"clusterId",true,0L,limit),true);
    StringBuilder sb=new StringBuilder();
    for (    HostVO host : unmanagedHosts) {
      host.setManagementServerId(managementServerId);
      update(host.getId(),host);
      assignedHosts.add(host);
      sb.append(host.getId());
      sb.append(" ");
    }
    if (logger.isTraceEnabled()) {
      logger.trace("Following hosts got acquired for clusters already owned: " + sb.toString());
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Completed acquiring hosts for clusters already owned by this management server");
  }
  if (assignedHosts.size() < limit) {
    if (logger.isDebugEnabled()) {
      logger.debug("Acquiring hosts for clusters not owned by any management server");
    }
    clusters=findClustersForHostsNotOwnedByAnyManagementServer();
    List<Long> updatedClusters=clusters;
    if (clusters.size() > limit) {
      updatedClusters=clusters.subList(0,limit.intValue());
    }
    if (updatedClusters.size() > 0) {
      SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
      sc.setParameters("lastPinged",lastPingSecondsAfter);
      sc.setJoinParameters("ClusterManagedSearch","managed",Managed.ManagedState.Managed);
      sc.setParameters("clusterIn",updatedClusters.toArray());
      List<HostVO> unmanagedHosts=lockRows(sc,null,true);
      Map<Long,List<HostVO>> hostMap=new HashMap<Long,List<HostVO>>();
      for (      HostVO host : unmanagedHosts) {
        if (hostMap.get(host.getClusterId()) == null) {
          hostMap.put(host.getClusterId(),new ArrayList<HostVO>());
        }
        hostMap.get(host.getClusterId()).add(host);
      }
      StringBuilder sb=new StringBuilder();
      for (      Long clusterId : hostMap.keySet()) {
        if (canOwnCluster(clusterId)) {
          List<HostVO> hostList=hostMap.get(clusterId);
          for (          HostVO host : hostList) {
            host.setManagementServerId(managementServerId);
            update(host.getId(),host);
            assignedHosts.add(host);
            sb.append(host.getId());
            sb.append(" ");
          }
        }
        if (assignedHosts.size() > limit) {
          break;
        }
      }
      if (logger.isTraceEnabled()) {
        logger.trace("Following hosts got acquired from newly owned clusters: " + sb.toString());
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Completed acquiring hosts for clusters not owned by any management server");
    }
  }
  txn.commit();
  return assignedHosts;
}
