{
  PostMethod post=new PostMethod(String.format("http://%s:%s",agentIp,getPort()));
  try {
    SecurityGroupVmRuleSet rset=new SecurityGroupVmRuleSet();
    rset.getEgressRules().addAll(generateRules(cmd.getEgressRuleSet()));
    rset.getIngressRules().addAll(generateRules(cmd.getIngressRuleSet()));
    rset.setVmName(cmd.getVmName());
    rset.setVmIp(cmd.getGuestIp());
    rset.setVmMac(cmd.getGuestMac());
    rset.setVmId(cmd.getVmId());
    rset.setSignature(cmd.getSignature());
    rset.setSequenceNumber(cmd.getSeqNum());
    Marshaller marshaller=context.createMarshaller();
    StringWriter writer=new StringWriter();
    marshaller.marshal(rset,writer);
    String xmlContents=writer.toString();
    logger.debug(xmlContents);
    post.addRequestHeader("command","set_rules");
    StringRequestEntity entity=new StringRequestEntity(xmlContents);
    post.setRequestEntity(entity);
    if (httpClient.executeMethod(post) != 200) {
      return new SecurityGroupRuleAnswer(cmd,false,post.getResponseBodyAsString());
    }
 else {
      return new SecurityGroupRuleAnswer(cmd);
    }
  }
 catch (  Exception e) {
    return new SecurityGroupRuleAnswer(cmd,false,e.getMessage());
  }
 finally {
    if (post != null) {
      post.releaseConnection();
    }
  }
}
