{
  List<HostVO> hosts=(List<HostVO>)getResponseObject();
  List<HostResponse> response=new ArrayList<HostResponse>();
  for (  HostVO host : hosts) {
    HostResponse hostResponse=new HostResponse();
    hostResponse.setId(host.getId());
    hostResponse.setCapabilities(host.getCapabilities());
    hostResponse.setClusterId(host.getClusterId());
    hostResponse.setCpuNumber(host.getCpus());
    hostResponse.setZoneId(host.getDataCenterId());
    hostResponse.setDisconnectedOn(host.getDisconnectedOn());
    hostResponse.setHypervisor(host.getHypervisorType());
    hostResponse.setHostType(host.getType());
    hostResponse.setLastPinged(new Date(host.getLastPinged()));
    hostResponse.setManagementServerId(host.getManagementServerId());
    hostResponse.setName(host.getName());
    hostResponse.setPodId(host.getPodId());
    hostResponse.setRemoved(host.getRemoved());
    hostResponse.setCpuSpeed(host.getSpeed());
    hostResponse.setState(host.getStatus());
    hostResponse.setIpAddress(host.getPrivateIpAddress());
    hostResponse.setVersion(host.getVersion());
    if (host.getType() == Host.Type.Routing) {
      hostResponse.setMemoryTotal(host.getTotalMemory());
    }
 else     if (host.getType().toString().equals("Storage")) {
      hostResponse.setDiskSizeTotal(host.getTotalSize());
      hostResponse.setDiskSizeAllocated(0L);
    }
    Set<Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events="";
      Iterator<Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+="; ";
        }
      }
      hostResponse.setEvents(events);
    }
    response.add(hostResponse);
  }
  return SerializerHelper.toSerializedString(response);
}
