{
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long clusterId=(Long)params.get(BaseCmd.Properties.CLUSTER_ID.getName());
  String type=(String)params.get(BaseCmd.Properties.TYPE.getName());
  String state=(String)params.get(BaseCmd.Properties.STATE.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.KEYWORD,keyword);
  c.addCriteria(Criteria.ID,id);
  c.addCriteria(Criteria.NAME,name);
  c.addCriteria(Criteria.DATACENTERID,zoneId);
  c.addCriteria(Criteria.PODID,podId);
  c.addCriteria(Criteria.CLUSTERID,clusterId);
  c.addCriteria(Criteria.TYPE,type);
  c.addCriteria(Criteria.STATE,state);
  List<HostVO> servers=getManagementServer().searchForServers(c);
  if (servers == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"unable to find servers");
  }
  List<Pair<String,Object>> serverTags=new ArrayList<Pair<String,Object>>();
  Object[] sTag=new Object[servers.size()];
  int i=0;
  for (  HostVO server : servers) {
    List<Pair<String,Object>> serverData=new ArrayList<Pair<String,Object>>();
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),server.getId().toString()));
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),server.getName()));
    if (server.getStatus() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),server.getStatus().toString()));
    }
    if (server.getDisconnectedOn() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.DISCONNECTED.getName(),getDateString(server.getDisconnectedOn())));
    }
    if (server.getType() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),server.getType().toString()));
    }
    GuestOSCategoryVO guestOSCategory=getManagementServer().getHostGuestOSCategory(server.getId());
    if (guestOSCategory != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.OS_CATEGORY_ID.getName(),guestOSCategory.getId()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.OS_CATEGORY_NAME.getName(),guestOSCategory.getName()));
    }
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.IP_ADDRESS.getName(),server.getPrivateIpAddress()));
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),Long.valueOf(server.getDataCenterId()).toString()));
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().getDataCenterBy(server.getDataCenterId()).getName()));
    if (server.getPodId() != null && getManagementServer().findHostPodById(server.getPodId()) != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.POD_ID.getName(),server.getPodId().toString()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.POD_NAME.getName(),getManagementServer().findHostPodById(server.getPodId()).getName()));
    }
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.VERSION.getName(),server.getVersion().toString()));
    if (server.getHypervisorType() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.HYPERVISOR.getName(),server.getHypervisorType().toString()));
    }
    if ((server.getCpus() != null) && (server.getSpeed() != null) && !(server.getType().toString().equals("Storage"))) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_NUMBER.getName(),server.getCpus().toString()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_SPEED.getName(),server.getSpeed().toString()));
      int cpu=0;
      String cpuAlloc=null;
      DecimalFormat decimalFormat=new DecimalFormat("#.##");
      List<UserVmVO> instances=getManagementServer().listUserVMsByHostId(server.getId());
      for (      UserVmVO vm : instances) {
        ServiceOffering so=getManagementServer().findServiceOfferingById(vm.getServiceOfferingId());
        cpu+=so.getCpu() * so.getSpeed();
      }
      cpuAlloc=decimalFormat.format(((float)cpu / (float)(server.getCpus() * server.getSpeed())) * 100f) + "%";
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_ALLOCATED.getName(),cpuAlloc));
      String cpuUsed=null;
      HostStats hostStats=getManagementServer().getHostStatistics(server.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + "%";
        serverData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_USED.getName(),cpuUsed));
        long avgLoad=(long)hostStats.getAverageLoad();
        serverData.add(new Pair<String,Object>(BaseCmd.Properties.AVERAGE_LOAD.getName(),avgLoad));
        long networkKbRead=(long)hostStats.getNetworkReadKBs();
        serverData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_READ.getName(),networkKbRead));
        long networkKbWrite=(long)hostStats.getNetworkWriteKBs();
        serverData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_WRITE.getName(),networkKbWrite));
      }
    }
    if (server.getType() == Host.Type.Routing) {
      Long memory=server.getTotalMemory();
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY_TOTAL.getName(),memory.toString()));
      long mem=getManagementServer().getMemoryUsagebyHost(server.getId());
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY_ALLOCATED.getName(),Long.valueOf(mem).toString()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY_USED.getName(),mem));
    }
    if (server.getType().toString().equals("Storage")) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_TOTAL.getName(),Long.valueOf(server.getTotalSize()).toString()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_ALLOCATED.getName(),Long.valueOf(0).toString()));
    }
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.CAPABILITIES.getName(),server.getCapabilities()));
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.LASTPINGED.getName(),Long.valueOf(server.getLastPinged()).toString()));
    if (server.getManagementServerId() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.M_SERVER_ID.getName(),server.getManagementServerId().toString()));
    }
    if (server.getClusterId() != null) {
      ClusterVO cluster=getManagementServer().findClusterById(server.getClusterId());
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_ID.getName(),cluster.getId()));
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_NAME.getName(),cluster.getName()));
    }
    serverData.add(new Pair<String,Object>(BaseCmd.Properties.IS_LOCAL_STORAGE_ACTIVE.getName(),getManagementServer().isLocalStorageActiveOnHost(server)));
    if (server.getCreated() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(server.getCreated())));
    }
    if (server.getRemoved() != null) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.REMOVED.getName(),getDateString(server.getRemoved())));
    }
    Set<Event> possibleEvents=server.getStatus().getPossibleEvents();
    for (    Event event : possibleEvents) {
      serverData.add(new Pair<String,Object>(BaseCmd.Properties.EVENTS.getName(),event.toString()));
    }
    sTag[i++]=serverData;
  }
  Pair<String,Object> serverTag=new Pair<String,Object>("host",sTag);
  serverTags.add(serverTag);
  return serverTags;
}
