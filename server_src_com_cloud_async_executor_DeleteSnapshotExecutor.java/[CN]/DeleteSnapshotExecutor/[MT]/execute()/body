{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  SnapshotManager snapshotManager=asyncMgr.getExecutorContext().getSnapshotMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  if (getSyncSource() == null) {
    SnapshotOperationParam param=gson.fromJson(job.getCmdInfo(),SnapshotOperationParam.class);
    Snapshot snapshot=managementServer.findSnapshotById(param.getSnapshotId());
    if (snapshot != null) {
      asyncMgr.syncAsyncJobExecution(job.getId(),"Volume",snapshot.getVolumeId());
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"snapshot no long exists");
    }
    return true;
  }
 else {
    SnapshotOperationParam param=gson.fromJson(job.getCmdInfo(),SnapshotOperationParam.class);
    Long jobId=getJob().getId();
    int result=AsyncJobResult.STATUS_FAILED;
    int errorCode=BaseCmd.INTERNAL_ERROR;
    Object resultObject="Failed to delete snapshot.";
    try {
      if (snapshotManager.deleteSnapshot(param.getUserId(),param.getSnapshotId(),param.getPolicyId())) {
        result=AsyncJobResult.STATUS_SUCCEEDED;
        errorCode=0;
        resultObject="success";
      }
    }
 catch (    Exception e) {
      resultObject="Unable to destroy snapshot: " + e.getMessage();
      s_logger.warn(resultObject,e);
    }
    asyncMgr.completeAsyncJob(jobId,result,errorCode,resultObject);
    return true;
  }
}
