{
  String accountName="account";
  String publicKeyString="ssh-rsa very public";
  String publicKeyMaterial=spy.getPublicKeyFromKeyKeyMaterial(publicKeyString);
  Mockito.doReturn(account).when(spy).getCaller();
  Mockito.doReturn(account).when(spy).getOwner(regCmd);
  Mockito.doNothing().when(spy).checkForKeyByName(regCmd,account);
  Mockito.doReturn(accountName).when(regCmd).getAccountName();
  Mockito.doReturn(publicKeyString).when(regCmd).getPublicKey();
  Mockito.doReturn("name").when(regCmd).getName();
  spy._sshKeyPairDao=sshKeyPairDao;
  Mockito.doReturn(1L).when(account).getAccountId();
  Mockito.doReturn(1L).when(account).getDomainId();
  Mockito.doReturn(Mockito.mock(SSHKeyPairVO.class)).when(sshKeyPairDao).persist(any(SSHKeyPairVO.class));
  when(sshKeyPairDao.findByName(1L,1L,"name")).thenReturn(null).thenReturn(null);
  when(sshKeyPairDao.findByPublicKey(1L,1L,publicKeyMaterial)).thenReturn(null).thenReturn(existingPair);
  spy.registerSSHKeyPair(regCmd);
  spy.registerSSHKeyPair(regCmd);
}
