@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'])
def test_UpdateConfigParamWithScope(self):
    '\n        test update configuration setting at zone level scope\n        @return:\n        '
    updateConfigurationCmd = updateConfiguration.updateConfigurationCmd()
    updateConfigurationCmd.name = 'use.external.dns'
    updateConfigurationCmd.value = 'true'
    updateConfigurationCmd.scopename = 'zone'
    updateConfigurationCmd.scopeid = 1
    updateConfigurationResponse = self.apiClient.updateConfiguration(updateConfigurationCmd)
    self.debug(('updated the parameter %s with value %s' % (updateConfigurationResponse.name, updateConfigurationResponse.value)))
    listConfigurationsCmd = listConfigurations.listConfigurationsCmd()
    listConfigurationsCmd.cfgName = updateConfigurationResponse.name
    listConfigurationsCmd.scopename = 'zone'
    listConfigurationsCmd.scopeid = 1
    listConfigurationsResponse = self.apiClient.listConfigurations(listConfigurationsCmd)
    self.assertNotEqual(len(listConfigurationsResponse), 0, 'Check if the list API                             returns a non-empty response')
    for item in listConfigurationsResponse:
        if (item.name == updateConfigurationResponse.name):
            configParam = item
    self.assertEqual(configParam.value, updateConfigurationResponse.value, 'Check if the update API returned                          is the same as the one we got in the list API')
