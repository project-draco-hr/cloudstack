@attr(hypervisor='xenserver')
@attr(tags=['advanced', 'basic'])
def test_01_VRServiceFailureAlerting(self):
    if (self.zone.networktype == 'Basic'):
        list_router_response = list_routers(self.apiclient, listall='true')
    else:
        list_router_response = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    self.debug(('Router ID: %s, state: %s' % (router.id, router.state)))
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    alertSubject = ('Monitoring Service on VR ' + router.name)
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, 'service dnsmasq stop', hypervisor=self.hypervisor)
    else:
        try:
            hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
            self.assertEqual(isinstance(hosts, list), True, 'Check list host returns a valid list')
            host = hosts[0]
            result = get_process_status(host.ipaddress, 22, self.services['configurableData']['host']['username'], self.services['configurableData']['host']['password'], router.linklocalip, 'service apache2 stop')
        except Exception as e:
            raise Exception(('Exception raised in getting host                        credentials: %s ' % e))
    res = str(result)
    self.debug(('apache process status: %s' % res))
    configs = Configurations.list(self.apiclient, name='router.alerts.check.interval')
    waitingPeriod = (int(configs[0].value) + 60)
    time.sleep(waitingPeriod)
    qresultset = self.dbclient.execute("select id from alert where subject like                    '%{0}%' ORDER BY id DESC LIMIT 1;".format(str(alertSubject)))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    return
