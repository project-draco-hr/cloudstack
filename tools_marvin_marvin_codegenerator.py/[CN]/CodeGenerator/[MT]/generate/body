def generate(self, cmd):
    self.cmd = cmd
    self.cmdsName.append(self.cmd.name)
    self.code = self.license
    self.code += self.newline
    self.code += ('"""%s"""\n' % self.cmd.desc)
    self.code += 'from baseCmd import *\n'
    self.code += 'from baseResponse import *\n'
    self.code += ('class %sCmd (baseCmd):\n' % self.cmd.name)
    self.code += self.space
    self.code += 'typeInfo = {}\n'
    self.code += (self.space + 'def __init__(self):\n')
    self.code += (self.space + self.space)
    self.code += ('self.isAsync = "%s"\n' % str(self.cmd.async).lower())
    for req in self.cmd.request:
        if (req.desc is not None):
            self.code += ((self.space + self.space) + ('"""%s"""\n' % req.desc))
        if (req.required == 'true'):
            self.code += ((self.space + self.space) + '"""Required"""\n')
        value = 'None'
        if ((req.type == 'list') or (req.type == 'map')):
            value = '[]'
        self.code += (self.space + self.space)
        self.code += ('self.%s = %s\n' % (req.name, value))
        if (req.required == 'true'):
            self.required.append(req.name)
        self.code += (self.space + self.space)
        self.code += ("self.typeInfo['%s'] = '%s'\n" % (req.name, req.dataType))
    self.code += ((self.space + self.space) + 'self.required = [')
    for require in self.required:
        self.code += (('"' + require) + '",')
    self.code += ']\n'
    self.required = []
    'generate response code'
    subItems = {}
    self.code += self.newline
    self.code += ('class %sResponse (baseResponse):\n' % self.cmd.name)
    self.code += self.space
    self.code += 'typeInfo = {}\n'
    self.code += (self.space + 'def __init__(self):\n')
    if (len(self.cmd.response) == 0):
        self.code += ((self.space + self.space) + 'pass')
    else:
        for res in self.cmd.response:
            if (res.desc is not None):
                self.code += (self.space + self.space)
                self.code += ('"""%s"""\n' % res.desc)
            if (len(res.subProperties) > 0):
                self.code += (self.space + self.space)
                self.code += ('self.%s = []\n' % res.name)
                self.generateSubClass(res.name, res.subProperties)
            else:
                self.code += (self.space + self.space)
                self.code += ('self.%s = None\n' % res.name)
                if (res.dataType is not None):
                    self.code += (self.space + self.space)
                    self.code += ("self.typeInfo['%s'] = '%s'\n" % (res.name, res.dataType))
    self.code += self.newline
    for subclass in self.subclass:
        self.code += (subclass + '\n')
    fp = open((self.outputFolder + ('/cloudstackAPI/%s.py' % self.cmd.name)), 'w')
    fp.write(self.code)
    fp.close()
    self.code = ''
    self.subclass = []
