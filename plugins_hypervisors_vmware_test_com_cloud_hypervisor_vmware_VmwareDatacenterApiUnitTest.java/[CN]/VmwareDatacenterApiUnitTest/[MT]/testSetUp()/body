{
  Mockito.when(_configDao.isPremium()).thenReturn(true);
  ComponentContext.initComponentsLifeCycle();
  MockitoAnnotations.initMocks(this);
  DataCenterVO zone=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,NetworkType.Basic,null,null,true,true,null,null);
  zoneId=1L;
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),zoneId,"192.168.56.1","192.168.56.0/24",8,"test");
  podId=1L;
  AccountVO acct=new AccountVO(200L);
  acct.setType(Account.ACCOUNT_TYPE_ADMIN);
  acct.setAccountName("admin");
  acct.setDomainId(domainId);
  UserContext.registerContext(1,acct,null,true);
  when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);
  dc=new VmwareDatacenterVO(guid,vmwareDcName,vCenterHost,user,password);
  vmwareDcs=new ArrayList<VmwareDatacenterVO>();
  vmwareDcs.add(dc);
  vmwareDcId=dc.getId();
  cluster=new ClusterVO(zone.getId(),pod.getId(),"vmwarecluster");
  cluster.setHypervisorType(HypervisorType.VMware.toString());
  cluster.setClusterType(ClusterType.ExternalManaged);
  cluster.setManagedState(ManagedState.Managed);
  clusterId=1L;
  clusterList=new ArrayList<ClusterVO>();
  clusterList.add(cluster);
  clusterDetails=new ClusterDetailsVO(clusterId,"url",url);
  dcZoneMap=new VmwareDatacenterZoneMapVO(zoneId,vmwareDcId);
  Mockito.when(_dcDao.persist(Mockito.any(DataCenterVO.class))).thenReturn(zone);
  Mockito.when(_dcDao.findById(1L)).thenReturn(zone);
  Mockito.when(_podDao.persist(Mockito.any(HostPodVO.class))).thenReturn(pod);
  Mockito.when(_podDao.findById(1L)).thenReturn(pod);
  Mockito.when(_clusterDao.persist(Mockito.any(ClusterVO.class))).thenReturn(cluster);
  Mockito.when(_clusterDao.findById(1L)).thenReturn(cluster);
  Mockito.when(_clusterDao.listByZoneId(1L)).thenReturn(null);
  Mockito.when(_clusterDao.expunge(1L)).thenReturn(true);
  Mockito.when(_clusterDetailsDao.persist(Mockito.any(ClusterDetailsVO.class))).thenReturn(clusterDetails);
  Mockito.when(_clusterDetailsDao.expunge(1L)).thenReturn(true);
  Mockito.when(_vmwareDcDao.persist(Mockito.any(VmwareDatacenterVO.class))).thenReturn(dc);
  Mockito.when(_vmwareDcDao.findById(1L)).thenReturn(null);
  Mockito.when(_vmwareDcDao.expunge(1L)).thenReturn(true);
  Mockito.when(_vmwareDcDao.getVmwareDatacenterByNameAndVcenter(vmwareDcName,vCenterHost)).thenReturn(null);
  Mockito.when(_vmwareDcZoneMapDao.persist(Mockito.any(VmwareDatacenterZoneMapVO.class))).thenReturn(dcZoneMap);
  Mockito.when(_vmwareDcZoneMapDao.findByZoneId(1L)).thenReturn(null);
  Mockito.when(_vmwareDcZoneMapDao.expunge(1L)).thenReturn(true);
  Mockito.when(addCmd.getZoneId()).thenReturn(1L);
  Mockito.when(addCmd.getUrl()).thenReturn(url);
  Mockito.when(addCmd.getUsername()).thenReturn(user);
  Mockito.when(addCmd.getPassword()).thenReturn(password);
  Mockito.when(addCmd.getName()).thenReturn(vmwareDcName);
  Mockito.when(removeCmd.getZoneId()).thenReturn(1L);
}
