{
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(BootloaderType.HVM);
  Map<String,String> details=to.getDetails();
  if (details == null)   details=new HashMap<String,String>();
  String nicDeviceType=details.get(VmDetailConstants.NIC_ADAPTER);
  if (vm.getVirtualMachine() instanceof DomainRouterVO || vm.getVirtualMachine() instanceof ConsoleProxyVO || vm.getVirtualMachine() instanceof SecondaryStorageVmVO) {
    if (nicDeviceType == null) {
      details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.Vmxnet3.toString());
    }
 else {
      try {
        VirtualEthernetCardType.valueOf(nicDeviceType);
      }
 catch (      Exception e) {
        s_logger.warn("Invalid NIC device type " + nicDeviceType + " is specified in VM details, switch to default E1000");
        details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
      }
    }
  }
 else {
    if (nicDeviceType == null) {
      details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
    }
 else {
      try {
        VirtualEthernetCardType.valueOf(nicDeviceType);
      }
 catch (      Exception e) {
        s_logger.warn("Invalid NIC device type " + nicDeviceType + " is specified in VM details, switch to default E1000");
        details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
      }
    }
  }
  to.setDetails(details);
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}
