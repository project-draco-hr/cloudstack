{
  MidonetApi api=mock(MidonetApi.class,RETURNS_DEEP_STUBS);
  ArrayList<String> arr=new ArrayList<String>();
  arr.add("MidoNet");
  NetworkServiceMapDao mockNSMD=mock(NetworkServiceMapDao.class);
  when(mockNSMD.getDistinctProviders(anyLong())).thenReturn(arr);
  MidoNetElement elem=new MidoNetElement();
  elem.setNtwkSrvcDao(mockNSMD);
  elem.setMidonetApi(api);
  RouterPort mockRPort=mock(RouterPort.class);
  when(mockRPort.getId()).thenReturn(UUID.fromString("550e8400-e29b-41d4-a716-446655440000"));
  BridgePort mockBPort=mock(BridgePort.class);
  when(mockBPort.link(any(UUID.class))).thenReturn(mockBPort);
  Port mockPort=mock(Port.class);
  ResourceCollection<Port> peerPorts=new ResourceCollection<Port>(new ArrayList<Port>());
  peerPorts.add(mockPort);
  Bridge mockBridge=mock(Bridge.class,RETURNS_DEEP_STUBS);
  when(api.addBridge().tenantId(anyString()).name(anyString()).create()).thenReturn(mockBridge);
  when(mockBridge.addInteriorPort().create()).thenReturn(mockBPort);
  when(mockBridge.getPeerPorts()).thenReturn(peerPorts);
  Router mockRouter=mock(Router.class,RETURNS_DEEP_STUBS);
  when(api.addRouter().tenantId(anyString()).name(anyString()).create()).thenReturn(mockRouter);
  when(mockRouter.addInteriorRouterPort().create()).thenReturn(mockRPort);
  Network mockNetwork=mock(Network.class);
  when(mockNetwork.getAccountId()).thenReturn((long)1);
  when(mockNetwork.getGateway()).thenReturn("1.2.3.4");
  when(mockNetwork.getCidr()).thenReturn("1.2.3.0/24");
  when(mockNetwork.getId()).thenReturn((long)2);
  boolean result=false;
  try {
    result=elem.implement(mockNetwork,null,null,null);
  }
 catch (  ConcurrentOperationException e) {
    fail(e.getMessage());
  }
catch (  InsufficientCapacityException e) {
    fail(e.getMessage());
  }
catch (  ResourceUnavailableException e) {
    fail(e.getMessage());
  }
  assertEquals(result,true);
}
