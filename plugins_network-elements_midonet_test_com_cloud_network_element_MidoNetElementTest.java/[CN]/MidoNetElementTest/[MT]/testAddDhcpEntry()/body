{
  MidonetApi api=mock(MidonetApi.class,RETURNS_DEEP_STUBS);
  ArrayList<String> arr=new ArrayList<String>();
  arr.add("MidoNet");
  NetworkServiceMapDao mockNSMD=mock(NetworkServiceMapDao.class);
  when(mockNSMD.getDistinctProviders(anyLong())).thenReturn(arr);
  DhcpHost mockDhcpHost=mock(DhcpHost.class);
  ResourceCollection<DhcpHost> hosts=new ResourceCollection<DhcpHost>(new ArrayList<DhcpHost>());
  DhcpSubnet mockSub=mock(DhcpSubnet.class);
  when(mockSub.addDhcpHost()).thenReturn(mockDhcpHost);
  when(mockSub.getDhcpHosts()).thenReturn(hosts);
  ResourceCollection mockSubnetCollection=mock(ResourceCollection.class);
  when(mockSubnetCollection.get(anyInt())).thenReturn(mockSub);
  Bridge mockBridge=mock(Bridge.class);
  when(api.addBridge().tenantId(anyString()).name(anyString()).create()).thenReturn(mockBridge);
  when(mockBridge.getDhcpSubnets()).thenReturn(mockSubnetCollection);
  Router mockRouter=mock(Router.class);
  when(api.addRouter().tenantId(anyString()).name(anyString()).create()).thenReturn(mockRouter);
  Network mockNetwork=mock(Network.class);
  when(mockNetwork.getAccountId()).thenReturn((long)1);
  when(mockNetwork.getGateway()).thenReturn("1.2.3.4");
  when(mockNetwork.getCidr()).thenReturn("1.2.3.0/24");
  when(mockNetwork.getId()).thenReturn((long)2);
  NicProfile mockNic=mock(NicProfile.class);
  when(mockNic.getIp4Address()).thenReturn("10.10.10.170");
  when(mockNic.getMacAddress()).thenReturn("02:00:73:3e:00:01");
  when(mockNic.getName()).thenReturn("Fake Name");
  @SuppressWarnings("unchecked") VirtualMachineProfile<? extends VirtualMachine> mockVm=(VirtualMachineProfile<? extends VirtualMachine>)mock(VirtualMachineProfile.class);
  when(mockVm.getType()).thenReturn(VirtualMachine.Type.User);
  MidoNetElement elem=new MidoNetElement();
  elem.setNtwkSrvcDao(mockNSMD);
  elem.setMidonetApi(api);
  boolean result=false;
  try {
    result=elem.addDhcpEntry(mockNetwork,mockNic,mockVm,null,null);
  }
 catch (  ConcurrentOperationException e) {
    fail(e.getMessage());
  }
catch (  InsufficientCapacityException e) {
    fail(e.getMessage());
  }
catch (  ResourceUnavailableException e) {
    fail(e.getMessage());
  }
  assertEquals(result,true);
}
