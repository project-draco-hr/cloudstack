{
  try {
    PreparedStatement pstmt=conn.prepareStatement("SELECT name, ip_address, public_port, private_port, algorithm, id FROM load_balancer");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug("Found " + lbs.size() + " lb rules to upgrade");
      pstmt=conn.prepareStatement("SELECT id FROM firewall_rules order by id");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement("SELECT id, account_id, domain_id, network_id FROM user_ip_address WHERE public_ip_address=?");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn("Unable to find public IP address " + publicIp + "; skipping lb rule id="+ originalLbId+ " from update");
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace("Updating firewall_rules table as a part of LB rules upgrade...");
        pstmt=conn.prepareStatement("INSERT INTO firewall_rules (id, ip_address_id, start_port, end_port, state, protocol, purpose, account_id, domain_id, network_id, xid, is_static_nat, created) VALUES (?,    ?,      ?,      ?,      'Active',        ?,     'LoadBalancing',       ?,      ?,      ?,      ?,       0,       now())");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,"tcp");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace("firewall_rules table is updated as a part of LB rules upgrade");
        s_logger.trace("Updating load_balancing_rules table as a part of LB rules upgrade...");
        pstmt=conn.prepareStatement("INSERT INTO load_balancing_rules VALUES (?,      ?,      NULL,      ?,       ?,      ?)");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace("load_balancing_rules table is updated as a part of LB rules upgrade");
        s_logger.trace("Updating load_balancer_vm_map table as a part of LB rules upgrade...");
        pstmt=conn.prepareStatement("SELECT instance_id FROM load_balancer_vm_map WHERE load_balancer_id=?");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("UPDATE load_balancer_vm_map SET load_balancer_id=? WHERE load_balancer_id=?");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace("load_balancer_vm_map table is updated as a part of LB rules upgrade");
      }
    }
    s_logger.debug("LB rules are upgraded");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Can't update LB rules ",e);
  }
}
