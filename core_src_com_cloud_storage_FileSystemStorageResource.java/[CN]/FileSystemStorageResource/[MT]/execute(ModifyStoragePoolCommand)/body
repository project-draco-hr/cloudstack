{
  StoragePoolVO pool=cmd.getPool();
  if (pool.getPoolType() == StoragePoolType.Filesystem) {
    return setFSStoragePool(cmd);
  }
  if (cmd.getAdd()) {
    String result;
    String hostPath=pool.getPath();
    String hostPath2=pool.getPath();
    if (hostPath.endsWith("/")) {
      hostPath2=hostPath.substring(0,hostPath.length() - 1);
    }
    String localPath=cmd.getLocalPath();
    boolean alreadyMounted=false;
    List<String[]> shareInfo=getNfsMounts(null);
    if (shareInfo != null) {
      for (      String[] share : shareInfo) {
        String host=share[0];
        String path=share[1];
        String path2=path;
        if (path.endsWith("/")) {
          path2=path.substring(0,path.length() - 1);
        }
        if (!path.equals(hostPath) && !path2.equals(hostPath2)) {
          continue;
        }
        if (host.equalsIgnoreCase(pool.getHostAddress())) {
          alreadyMounted=true;
          localPath=share[2];
          result=null;
          break;
        }
 else {
          try {
            InetAddress currAddr=InetAddress.getByName(host);
            InetAddress hostAddr=InetAddress.getByName(pool.getHostAddress());
            if (currAddr.equals(hostAddr)) {
              alreadyMounted=true;
              result=null;
              localPath=share[2];
              break;
            }
          }
 catch (          UnknownHostException e) {
            continue;
          }
        }
      }
    }
    String localPath2=localPath;
    if (localPath.endsWith("/")) {
      localPath2=localPath.substring(0,localPath.length() - 1);
    }
    if (!alreadyMounted) {
      Script mkdir=new Script("/bin/bash",_timeout,s_logger);
      mkdir.add("-c");
      mkdir.add("mkdir -p " + localPath);
      final OutputInterpreter.OneLineParser parser=new OutputInterpreter.OneLineParser();
      result=mkdir.execute(parser);
      if (result != null) {
        return new Answer(cmd,false,"Failed to create local path: " + result);
      }
      result=mountNfs(pool.getHostAddress(),pool.getPath(),localPath);
      if (result != null) {
        return new Answer(cmd,false," Failed to mount: " + result);
      }
    }
    if (_instance != null) {
      localPath=localPath + File.separator + _instance;
    }
    _poolName=pool.getName();
    _poolUuid=pool.getUuid();
    long capacity=getTotalSize(localPath);
    long used=getUsedSize(localPath);
    long available=capacity - used;
    Map<String,TemplateInfo> tInfo=new HashMap<String,TemplateInfo>();
    ModifyStoragePoolAnswer answer=new ModifyStoragePoolAnswer(cmd,capacity,available,tInfo);
    return answer;
  }
 else {
    Script command=new Script("/bin/bash",_timeout,s_logger);
    command.add("-c");
    command.add("umount  " + cmd.getLocalPath());
    final OutputInterpreter.OneLineParser parser=new OutputInterpreter.OneLineParser();
    String result=command.execute(parser);
    if (result != null) {
      return new Answer(cmd,false," Failed to unmount: " + result);
    }
    return new Answer(cmd);
  }
}
