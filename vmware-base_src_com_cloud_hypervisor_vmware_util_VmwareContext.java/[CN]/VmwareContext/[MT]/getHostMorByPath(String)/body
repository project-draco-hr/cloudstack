{
  assert(inventoryPath != null);
  String[] tokens;
  if (inventoryPath.startsWith("/"))   tokens=inventoryPath.substring(1).split("/");
 else   tokens=inventoryPath.split("/");
  ManagedObjectReference mor=getRootFolder();
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i];
    List<ObjectContent> ocs;
    PropertySpec pSpec=null;
    ObjectSpec oSpec=null;
    if (mor.getType().equalsIgnoreCase("Datacenter")) {
      pSpec=new PropertySpec();
      pSpec.setAll(false);
      pSpec.setType("ManagedEntity");
      pSpec.getPathSet().add("name");
      TraversalSpec dcHostFolderTraversal=new TraversalSpec();
      dcHostFolderTraversal.setType("Datacenter");
      dcHostFolderTraversal.setPath("hostFolder");
      dcHostFolderTraversal.setName("dcHostFolderTraversal");
      oSpec=new ObjectSpec();
      oSpec.setObj(mor);
      oSpec.setSkip(Boolean.TRUE);
      oSpec.getSelectSet().add(dcHostFolderTraversal);
    }
 else     if (mor.getType().equalsIgnoreCase("Folder")) {
      pSpec=new PropertySpec();
      pSpec.setAll(false);
      pSpec.setType("ManagedEntity");
      pSpec.getPathSet().add("name");
      TraversalSpec folderChildrenTraversal=new TraversalSpec();
      folderChildrenTraversal.setType("Folder");
      folderChildrenTraversal.setPath("childEntity");
      folderChildrenTraversal.setName("folderChildrenTraversal");
      oSpec=new ObjectSpec();
      oSpec.setObj(mor);
      oSpec.setSkip(Boolean.TRUE);
      oSpec.getSelectSet().add(folderChildrenTraversal);
    }
 else     if (mor.getType().equalsIgnoreCase("ClusterComputeResource")) {
      pSpec=new PropertySpec();
      pSpec.setType("ManagedEntity");
      pSpec.getPathSet().add("name");
      TraversalSpec clusterHostTraversal=new TraversalSpec();
      clusterHostTraversal.setType("ClusterComputeResource");
      clusterHostTraversal.setPath("host");
      clusterHostTraversal.setName("folderChildrenTraversal");
      oSpec=new ObjectSpec();
      oSpec.setObj(mor);
      oSpec.setSkip(Boolean.TRUE);
      oSpec.getSelectSet().add(clusterHostTraversal);
    }
 else {
      s_logger.error("Invalid inventory path, path element can only be datacenter and folder");
      return null;
    }
    PropertyFilterSpec pfSpec=new PropertyFilterSpec();
    pfSpec.getPropSet().add(pSpec);
    pfSpec.getObjectSet().add(oSpec);
    List<PropertyFilterSpec> pfSpecArr=new ArrayList<PropertyFilterSpec>();
    pfSpecArr.add(pfSpec);
    ocs=getService().retrieveProperties(getPropertyCollector(),pfSpecArr);
    if (ocs != null && ocs.size() > 0) {
      boolean found=false;
      for (      ObjectContent oc : ocs) {
        String name=oc.getPropSet().get(0).getVal().toString();
        if (name.equalsIgnoreCase(token) || name.equalsIgnoreCase("host")) {
          mor=oc.getObj();
          found=true;
          if (name.equalsIgnoreCase("host"))           i--;
          break;
        }
      }
      if (!found) {
        s_logger.error("Path element points to an un-existing inventory entity");
        return null;
      }
    }
 else {
      s_logger.error("Path element points to an un-existing inventory entity");
      return null;
    }
  }
  return mor;
}
