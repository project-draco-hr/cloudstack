{
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.KVM) {
    if (s_logger.isInfoEnabled())     s_logger.info("invalid cluster id or cluster is not for KVM hypervisors");
    return null;
  }
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals("http")) {
    String msg="urlString is not http so we're not taking care of the discovery for this: " + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + "-LibvirtComputingResource";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug("Skipping " + agentIp + " because "+ guidWithTail+ " is already in the database.");
      return null;
    }
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug("Failed to authenticate");
      throw new DiscoveredWithErrorException("Authetication error");
    }
    if (!SSHCmdHelper.sshExecuteCmd(sshConnection,"lsmod|grep kvm",3)) {
      s_logger.debug("It's not a KVM enabled machine");
      return null;
    }
    List<PhysicalNetworkSetupInfo> networks=_networkMgr.getPhysicalNetworkInfo(dcId,HypervisorType.KVM);
    if (networks.size() < 1) {
      _kvmPublicNic="cloudbr0";
      _kvmPrivateNic="cloudbr0";
      _kvmGuestNic="cloudbr0";
      s_logger.debug("Can't find physical network devices on zone: " + dcId + ", use the default cloudbr0");
    }
 else {
      PhysicalNetworkSetupInfo network=networks.get(0);
      _kvmPublicNic=network.getPublicNetworkName();
      if (_kvmPublicNic == null) {
        _kvmPublicNic="cloudbr0";
      }
      _kvmPrivateNic=network.getPrivateNetworkName();
      if (_kvmPrivateNic == null) {
        _kvmPrivateNic=_kvmPublicNic;
      }
      _kvmGuestNic=network.getGuestNetworkName();
      if (_kvmGuestNic == null) {
        _kvmGuestNic=_kvmPrivateNic;
      }
    }
    String parameters=" -m " + _hostIp + " -z "+ dcId+ " -p "+ podId+ " -c "+ clusterId+ " -g "+ guid+ " -a";
    if (_kvmPublicNic != null) {
      parameters+=" --pubNic=" + _kvmPublicNic;
    }
    if (_kvmPrivateNic != null) {
      parameters+=" --prvNic=" + _kvmPrivateNic;
    }
    if (_kvmGuestNic != null) {
      parameters+=" --guestNic=" + _kvmGuestNic;
    }
    SSHCmdHelper.sshExecuteCmd(sshConnection,"cloud-setup-agent " + parameters,3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put("zone",Long.toString(dcId));
    params.put("pod",Long.toString(podId));
    params.put("cluster",Long.toString(clusterId));
    params.put("guid",guid);
    params.put("agentIp",agentIp);
    kvmResource.configure("kvm agent",params);
    resources.put(kvmResource,details);
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null)     return null;
    details.put("guid",guidWithTail);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    String msg=" can't setup agent, due to " + e.toString() + " - "+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}
