def __init__(self):
    self.isAsync = 'true'
    'the ID of the service offering for the virtual machine'
    'Required'
    self.serviceofferingid = None
    'the ID of the template for the virtual machine'
    'Required'
    self.templateid = None
    'availability zone for the virtual machine'
    'Required'
    self.zoneid = None
    'an optional account for the virtual machine. Must be used with domainId.'
    self.account = None
    'comma separated list of affinity groups id that are going to be applied to the virtual machine. Mutually exclusive with affinitygroupnames parameter'
    self.affinitygroupids = []
    'comma separated list of affinity groups names that are going to be applied to the virtual machine.Mutually exclusive with affinitygroupids parameter'
    self.affinitygroupnames = []
    'the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created.'
    self.diskofferingid = None
    'an optional user generated name for the virtual machine'
    self.displayname = None
    'an optional field, whether to the display the vm to the end user or not.'
    self.displayvm = None
    'an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used.'
    self.domainid = None
    'an optional group for the virtual machine'
    self.group = None
    'destination Host ID to deploy the VM to - parameter available for root admin only'
    self.hostid = None
    'the hypervisor on which to deploy the virtual machine'
    self.hypervisor = None
    "the ipv6 address for default vm's network"
    self.ip6address = None
    "the ip address for default vm's network"
    self.ipaddress = None
    "ip to network mapping. Can't be specified with networkIds parameter. Example: iptonetworklist[0].ip=10.10.10.11&iptonetworklist[0].ipv6=fc00:1234:5678::abcd&iptonetworklist[0].networkid=uuid - requests to use ip 10.10.10.11 in network id=uuid"
    self.iptonetworklist = []
    'an optional keyboard device type for the virtual machine. valid value can be one of de,de-ch,es,fi,fr,fr-be,fr-ch,is,it,jp,nl-be,no,pt,uk,us'
    self.keyboard = None
    'name of the ssh key pair used to login to the virtual machine'
    self.keypair = None
    'host name for the virtual machine'
    self.name = None
    "list of network ids used by virtual machine. Can't be specified with ipToNetworkList parameter"
    self.networkids = []
    'Deploy vm for the project'
    self.projectid = None
    'comma separated list of security groups id that going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupnames parameter'
    self.securitygroupids = []
    'comma separated list of security groups names that going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupids parameter'
    self.securitygroupnames = []
    'the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId'
    self.size = None
    'true if network offering supports specifying ip ranges; defaulted to true if not specified'
    self.startvm = None
    'an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding. Using HTTP POST(via POST body), you can send up to 32K of data after base64 encoding.'
    self.userdata = None
    self.required = ['serviceofferingid', 'templateid', 'zoneid']
