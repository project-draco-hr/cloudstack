{
  String targetIqn=(String)params.get(BaseCmd.Properties.TARGET_IQN.getName());
  String portal=(String)params.get(BaseCmd.Properties.PORTAL.getName());
  Long size=(Long)params.get(BaseCmd.Properties.DISK_SIZE.getName());
  Long dcId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Integer lun=(Integer)params.get(BaseCmd.Properties.LUN.getName());
  String t=(String)params.get(BaseCmd.Properties.TAGS.getName());
  PreallocatedLunVO registeredLun=null;
  ManagementServer ms=getManagementServer();
  try {
    registeredLun=ms.registerPreallocatedLun(targetIqn,portal,lun,size,dcId,t);
  }
 catch (  Exception e) {
    s_logger.error("Unable to register lun",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to register lun");
  }
  List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  if (registeredLun == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Failed to register LUN.");
  }
 else {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),registeredLun.getId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),registeredLun.getVolumeId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),registeredLun.getDataCenterId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.LUN.getName(),registeredLun.getLun()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PORTAL.getName(),registeredLun.getPortal()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SIZE.getName(),registeredLun.getSize()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAKEN.getName(),registeredLun.getTaken()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TARGET_IQN.getName(),registeredLun.getTargetIqn()));
    embeddedObject.add(new Pair<String,Object>("preallocatedlun",new Object[]{returnValues}));
  }
  return embeddedObject;
}
