def check_channel_subsystem_request(self, channel, name):
    "\n        Determine if a requested subsystem will be provided to the client on\n        the given channel.  If this method returns C{True}, all future I/O\n        through this channel will be assumed to be connected to the requested\n        subsystem.  An example of a subsystem is C{sftp}.\n\n        The default implementation checks for a subsystem handler assigned via\n        L{Transport.set_subsystem_handler}.\n        If one has been set, the handler is invoked and this method returns\n        C{True}.  Otherwise it returns C{False}.\n\n        @note: Because the default implementation uses the L{Transport} to\n            identify valid subsystems, you probably won't need to override this\n            method.\n\n        @param channel: the L{Channel} the pty request arrived on.\n        @type channel: L{Channel}\n        @param name: name of the requested subsystem.\n        @type name: str\n        @return: C{True} if this channel is now hooked up to the requested\n            subsystem; C{False} if that subsystem can't or won't be provided.\n        @rtype: bool\n        "
    (handler_class, larg, kwarg) = channel.get_transport()._get_subsystem_handler(name)
    if (handler_class is None):
        return False
    handler = handler_class(channel, name, self, *larg, **kwarg)
    handler.start()
    return True
