def check_channel_request(self, kind, chanid):
    '\n        Determine if a channel request of a given type will be granted, and\n        return C{OPEN_SUCCEEDED} or an error code.  This method is\n        called in server mode when the client requests a channel, after\n        authentication is complete.\n\n        If you allow channel requests (and an ssh server that didn\'t would be\n        useless), you should also override some of the channel request methods\n        below, which are used to determine which services will be allowed on\n        a given channel:\n            - L{check_channel_pty_request}\n            - L{check_channel_shell_request}\n            - L{check_channel_subsystem_request}\n            - L{check_channel_window_change_request}\n            - L{check_channel_x11_request}\n\n        The C{chanid} parameter is a small number that uniquely identifies the\n        channel within a L{Transport}.  A L{Channel} object is not created\n        unless this method returns C{OPEN_SUCCEEDED} -- once a\n        L{Channel} object is created, you can call L{Channel.get_id} to\n        retrieve the channel ID.\n\n        The return value should either be C{OPEN_SUCCEEDED} (or\n        C{0}) to allow the channel request, or one of the following error\n        codes to reject it:\n            - C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}\n            - C{OPEN_FAILED_CONNECT_FAILED}\n            - C{OPEN_FAILED_UNKNOWN_CHANNEL_TYPE}\n            - C{OPEN_FAILED_RESOURCE_SHORTAGE}\n        \n        The default implementation always returns\n        C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}.\n\n        @param kind: the kind of channel the client would like to open\n            (usually C{"session"}).\n        @type kind: str\n        @param chanid: ID of the channel\n        @type chanid: int\n        @return: a success or failure code (listed above)\n        @rtype: int\n        '
    return OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
