def check_channel_direct_tcpip_request(self, chanid, origin, destination):
    '\n        Determine if a local port forwarding channel will be granted, and\n        return C{OPEN_SUCCEEDED} or an error code.  This method is\n        called in server mode when the client requests a channel, after\n        authentication is complete.\n\n        The C{chanid} parameter is a small number that uniquely identifies the\n        channel within a L{Transport}.  A L{Channel} object is not created\n        unless this method returns C{OPEN_SUCCEEDED} -- once a\n        L{Channel} object is created, you can call L{Channel.get_id} to\n        retrieve the channel ID.\n\n        The origin and destination parameters are (ip_address, port) tuples\n        that correspond to both ends of the TCP connection in the forwarding\n        tunnel.\n\n        The return value should either be C{OPEN_SUCCEEDED} (or\n        C{0}) to allow the channel request, or one of the following error\n        codes to reject it:\n            - C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}\n            - C{OPEN_FAILED_CONNECT_FAILED}\n            - C{OPEN_FAILED_UNKNOWN_CHANNEL_TYPE}\n            - C{OPEN_FAILED_RESOURCE_SHORTAGE}\n        \n        The default implementation always returns\n        C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}.\n\n        @param chanid: ID of the channel\n        @type chanid: int\n        @param origin: 2-tuple containing the IP address and port of the\n            originator (client side)\n        @type origin: tuple\n        @param destination: 2-tuple containing the IP address and port of the\n            destination (server side)\n        @type destination: tuple\n        @return: a success or failure code (listed above)\n        @rtype: int\n        '
    return OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
