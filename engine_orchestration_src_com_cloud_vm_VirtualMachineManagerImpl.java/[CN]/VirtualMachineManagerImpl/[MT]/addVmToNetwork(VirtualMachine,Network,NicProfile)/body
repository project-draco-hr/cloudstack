{
  final AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    placeHolder=createPlaceHolderWork(vm.getId());
    try {
      return orchestrateAddVmToNetwork(vm,network,requested);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    final Outcome<VirtualMachine> outcome=addVmToNetworkThroughJobQueue(vm,network,requested);
    try {
      outcome.get();
    }
 catch (    final InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    final java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution exception",e);
    }
    final Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException) {
        throw (ResourceUnavailableException)jobException;
      }
 else       if (jobException instanceof ConcurrentOperationException) {
        throw (ConcurrentOperationException)jobException;
      }
 else       if (jobException instanceof InsufficientCapacityException) {
        throw (InsufficientCapacityException)jobException;
      }
 else       if (jobException instanceof RuntimeException) {
        throw (RuntimeException)jobException;
      }
 else       if (jobException instanceof Throwable) {
        throw new RuntimeException("Unexpected exception",(Throwable)jobException);
      }
 else       if (jobException instanceof NicProfile) {
        return (NicProfile)jobException;
      }
    }
    throw new RuntimeException("Unexpected job execution result");
  }
}
