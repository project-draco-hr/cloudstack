{
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkJobDispatcher.VM_WORK_JOB_DISPATCHER)) {
    orchestrateStop(vmUuid,cleanUpEvenIfUnableToStop);
  }
 else {
    Outcome<VirtualMachine> outcome=stopVmThroughJobQueue(vmUuid,cleanUpEvenIfUnableToStop);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Throwable jobException=retriveExecutionException(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof AgentUnavailableException)       throw (AgentUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof OperationTimedoutException)       throw (OperationTimedoutException)jobException;
    }
  }
}
