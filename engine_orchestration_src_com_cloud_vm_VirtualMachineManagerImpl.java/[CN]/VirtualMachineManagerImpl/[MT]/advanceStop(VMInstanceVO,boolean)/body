{
  final State state=vm.getState();
  if (state == State.Stopped) {
    if (logger.isDebugEnabled()) {
      logger.debug("VM is already stopped: " + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (logger.isDebugEnabled()) {
      logger.debug("Stopped called on " + vm + " but the state is "+ state);
    }
    return;
  }
  final ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Found an outstanding work item for this vm " + vm + " with state:"+ vm.getState()+ ", work id:"+ work.getId());
    }
  }
  final Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (logger.isDebugEnabled()) {
        logger.debug("HostId is null but this is not a forced stop, cannot stop vm " + vm + " with state:"+ vm.getState());
      }
      throw new CloudRuntimeException("Unable to stop " + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    final NoTransitionException e) {
      logger.warn(e.getMessage());
    }
    if (work != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Updating work item to Done, id:" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  final VirtualMachineGuru vmGuru=getVmGuru(vm);
  final VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException("VM is being operated on.");
    }
  }
 catch (  final NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException("We cannot stop " + vm + " when it is in state "+ vm.getState());
    }
    final boolean doCleanup=true;
    if (logger.isDebugEnabled()) {
      logger.debug("Unable to transition the state but we're moving on because it's forced stop");
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (logger.isDebugEnabled()) {
            logger.debug("Updating work item to Done, id:" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException("Unable to stop " + vm);
          }
        }
 catch (        final NoTransitionException e) {
          logger.warn("Unable to cleanup " + vm);
          throw new CloudRuntimeException("Unable to stop " + vm,e);
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Failed to cleanup VM: " + vm);
        }
        throw new CloudRuntimeException("Failed to cleanup " + vm + " , current state "+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException("We cannot proceed with stop VM " + vm + " since it is not in 'Stopping' state, current state: "+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),false);
  boolean stopped=false;
  Answer answer=null;
  try {
    answer=_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      if (answer instanceof StopAnswer) {
        final StopAnswer stopAns=(StopAnswer)answer;
        if (vm.getType() == VirtualMachine.Type.User) {
          final String platform=stopAns.getPlatform();
          if (platform != null) {
            final UserVmVO userVm=_userVmDao.findById(vm.getId());
            _userVmDao.loadDetails(userVm);
            userVm.setDetail("platform",platform);
            _userVmDao.saveDetails(userVm);
          }
        }
      }
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException("Unable to stop the virtual machine due to " + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
    }
 else {
      throw new CloudRuntimeException("Invalid answer received in response to a StopCommand on " + vm.instanceName);
    }
  }
 catch (  final AgentUnavailableException e) {
    logger.warn("Unable to stop vm, agent unavailable: " + e.toString());
  }
catch (  final OperationTimedoutException e) {
    logger.warn("Unable to stop vm, operation timed out: " + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        logger.warn("Unable to stop vm " + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        final NoTransitionException e) {
          logger.warn("Unable to transition the state " + vm);
        }
        throw new CloudRuntimeException("Unable to stop " + vm);
      }
 else {
        logger.warn("Unable to actually stop " + vm + " but continue with release because it's a force stop");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(vm + " is stopped on the host.  Proceeding to release resource held.");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    logger.debug("Successfully released network resources for the vm " + vm);
  }
 catch (  final Exception e) {
    logger.warn("Unable to release some network resources.",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      logger.debug("Successfully released storage resources for the vm " + vm);
    }
  }
 catch (  final Exception e) {
    logger.warn("Unable to release storage resources.",e);
  }
  try {
    if (work != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Updating the outstanding work item to Done, id:" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException("unable to stop " + vm);
    }
  }
 catch (  final NoTransitionException e) {
    logger.warn(e.getMessage());
    throw new CloudRuntimeException("Unable to stop " + vm);
  }
}
