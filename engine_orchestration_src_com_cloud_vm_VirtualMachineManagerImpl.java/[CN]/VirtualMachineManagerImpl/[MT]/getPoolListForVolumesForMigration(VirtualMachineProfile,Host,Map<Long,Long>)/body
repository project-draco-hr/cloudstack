{
  List<VolumeVO> allVolumes=_volsDao.findUsableVolumesForInstance(profile.getId());
  Map<Volume,StoragePool> volumeToPoolObjectMap=new HashMap<Volume,StoragePool>();
  for (  VolumeVO volume : allVolumes) {
    Long poolId=volumeToPool.get(Long.valueOf(volume.getId()));
    StoragePoolVO pool=_storagePoolDao.findById(poolId);
    StoragePoolVO currentPool=_storagePoolDao.findById(volume.getPoolId());
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
    if (pool != null) {
      if (_poolHostDao.findByPoolHost(pool.getId(),host.getId()) == null || pool.isLocal() != diskOffering.getUseLocalStorage()) {
        throw new CloudRuntimeException("Cannot migrate volume " + volume + " to storage pool "+ pool+ " while migrating vm to host "+ host+ ". Either the pool is not accessible from the host or because of the offering with which the volume is created it cannot be placed on "+ "the given pool.");
      }
 else       if (pool.getId() == currentPool.getId()) {
      }
 else {
        volumeToPoolObjectMap.put(volume,pool);
      }
    }
 else {
      DiskProfile diskProfile=new DiskProfile(volume,diskOffering,profile.getHypervisorType());
      DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),null,null);
      ExcludeList avoid=new ExcludeList();
      boolean currentPoolAvailable=false;
      List<StoragePool> poolList=new ArrayList<StoragePool>();
      for (      StoragePoolAllocator allocator : _storagePoolAllocators) {
        List<StoragePool> poolListFromAllocator=allocator.allocateToPool(diskProfile,profile,plan,avoid,StoragePoolAllocator.RETURN_UPTO_ALL);
        if (poolListFromAllocator != null && !poolListFromAllocator.isEmpty()) {
          poolList.addAll(poolListFromAllocator);
        }
      }
      if (poolList != null && !poolList.isEmpty()) {
        Iterator<StoragePool> iter=poolList.iterator();
        while (iter.hasNext()) {
          if (currentPool.getId() == iter.next().getId()) {
            currentPoolAvailable=true;
            break;
          }
        }
        if (!currentPoolAvailable) {
          volumeToPoolObjectMap.put(volume,_storagePoolDao.findByUuid(poolList.get(0).getUuid()));
        }
      }
      if (!currentPoolAvailable && !volumeToPoolObjectMap.containsKey(volume)) {
        throw new CloudRuntimeException("Cannot find a storage pool which is available for volume " + volume + " while migrating virtual machine "+ profile.getVirtualMachine()+ " to host "+ host);
      }
    }
  }
  return volumeToPoolObjectMap;
}
