{
  final long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=VmOpLockStateRetry.value();
  while (retry-- != 0) {
    try {
      final ItWorkVO workFinal=work;
      final Ternary<VMInstanceVO,ReservationContext,ItWorkVO> result=Transaction.execute(new TransactionCallbackWithException<Ternary<VMInstanceVO,ReservationContext,ItWorkVO>,NoTransitionException>(){
        @Override public Ternary<VMInstanceVO,ReservationContext,ItWorkVO> doInTransaction(        final TransactionStatus status) throws NoTransitionException {
          final Journal journal=new Journal.LogJournal("Creating " + vm,logger);
          final ItWorkVO work=_workDao.persist(workFinal);
          final ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
            if (logger.isDebugEnabled()) {
              logger.debug("Successfully transitioned to start state for " + vm + " reservation id = "+ work.getId());
            }
            return new Ternary<VMInstanceVO,ReservationContext,ItWorkVO>(vm,context,work);
          }
          return new Ternary<VMInstanceVO,ReservationContext,ItWorkVO>(null,null,work);
        }
      }
);
      work=result.third();
      if (result.first() != null) {
        return result;
      }
    }
 catch (    final NoTransitionException e) {
      if (logger.isDebugEnabled()) {
        logger.debug("Unable to transition into Starting state due to " + e.getMessage());
      }
    }
    final VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException("Unable to acquire lock on " + vm);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Determining why we're unable to update the state to Starting for " + instance + ".  Retry="+ retry);
    }
    final State state=instance.getState();
    if (state == State.Running) {
      if (logger.isDebugEnabled()) {
        logger.debug("VM is already started: " + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException("There are concurrent operations on " + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      logger.debug("VM " + vm + " is not in a state to be started: "+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException("Unable to change the state of " + vm);
}
