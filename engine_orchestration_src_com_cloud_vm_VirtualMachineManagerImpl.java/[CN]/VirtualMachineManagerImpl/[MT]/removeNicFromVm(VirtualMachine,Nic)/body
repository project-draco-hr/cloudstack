{
  final AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    placeHolder=createPlaceHolderWork(vm.getId());
    try {
      return orchestrateRemoveNicFromVm(vm,nic);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    final Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    final InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    final java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    final Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException) {
        throw (ResourceUnavailableException)jobResult;
      }
 else       if (jobResult instanceof ConcurrentOperationException) {
        throw (ConcurrentOperationException)jobResult;
      }
 else       if (jobResult instanceof RuntimeException) {
        throw (RuntimeException)jobResult;
      }
 else       if (jobResult instanceof Throwable) {
        throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
      }
 else       if (jobResult instanceof Boolean) {
        return (Boolean)jobResult;
      }
    }
    throw new RuntimeException("Job failed with un-handled exception");
  }
}
