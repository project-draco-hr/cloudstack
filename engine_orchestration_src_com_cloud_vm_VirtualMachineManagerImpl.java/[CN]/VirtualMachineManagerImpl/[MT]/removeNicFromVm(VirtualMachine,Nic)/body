{
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateRemoveNicFromVm(vm,nic);
  }
 else {
    Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    AsyncJobVO jobVo=_entityMgr.findById(AsyncJobVO.class,outcome.getJob().getId());
    if (jobVo.getResultCode() == JobInfo.Status.SUCCEEDED.ordinal()) {
      Boolean result=(Boolean)JobSerializerHelper.fromObjectSerializedString(jobVo.getResult());
      return result;
    }
 else {
      Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
      if (jobResult != null) {
        if (jobResult instanceof ResourceUnavailableException)         throw (ResourceUnavailableException)jobResult;
 else         if (jobResult instanceof ConcurrentOperationException)         throw (ConcurrentOperationException)jobResult;
 else         if (jobResult instanceof RuntimeException)         throw (RuntimeException)jobResult;
      }
      throw new RuntimeException("Job failed with un-handled exception");
    }
  }
}
