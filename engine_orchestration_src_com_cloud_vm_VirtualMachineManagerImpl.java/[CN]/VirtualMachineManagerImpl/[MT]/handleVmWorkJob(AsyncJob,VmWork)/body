{
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info("Unable to find vm " + work.getVmId());
  }
  assert(vm != null);
  if (work instanceof VmWorkStart) {
    VmWorkStart workStart=(VmWorkStart)work;
    orchestrateStart(vm.getUuid(),workStart.getParams(),workStart.getPlan(),null);
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkStop) {
    VmWorkStop workStop=(VmWorkStop)work;
    orchestrateStop(vm.getUuid(),workStop.isCleanup());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkMigrate) {
    VmWorkMigrate workMigrate=(VmWorkMigrate)work;
    orchestrateMigrate(vm.getUuid(),workMigrate.getSrcHostId(),workMigrate.getDeployDestination());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkMigrateWithStorage) {
    VmWorkMigrateWithStorage workMigrateWithStorage=(VmWorkMigrateWithStorage)work;
    orchestrateMigrateWithStorage(vm.getUuid(),workMigrateWithStorage.getSrcHostId(),workMigrateWithStorage.getDestHostId(),workMigrateWithStorage.getVolumeToPool());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkMigrateForScale) {
    VmWorkMigrateForScale workMigrateForScale=(VmWorkMigrateForScale)work;
    orchestrateMigrateForScale(vm.getUuid(),workMigrateForScale.getSrcHostId(),workMigrateForScale.getDeployDestination(),workMigrateForScale.getNewServiceOfferringId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkReboot) {
    VmWorkReboot workReboot=(VmWorkReboot)work;
    orchestrateReboot(vm.getUuid(),workReboot.getParams());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkAddVmToNetwork) {
    VmWorkAddVmToNetwork workAddVmToNetwork=(VmWorkAddVmToNetwork)work;
    NicProfile nic=orchestrateAddVmToNetwork(vm,workAddVmToNetwork.getNetwork(),workAddVmToNetwork.getRequestedNicProfile());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(nic));
  }
 else   if (work instanceof VmWorkRemoveNicFromVm) {
    VmWorkRemoveNicFromVm workRemoveNicFromVm=(VmWorkRemoveNicFromVm)work;
    boolean result=orchestrateRemoveNicFromVm(vm,workRemoveNicFromVm.getNic());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Boolean(result)));
  }
 else   if (work instanceof VmWorkRemoveVmFromNetwork) {
    VmWorkRemoveVmFromNetwork workRemoveVmFromNetwork=(VmWorkRemoveVmFromNetwork)work;
    boolean result=orchestrateRemoveVmFromNetwork(vm,workRemoveVmFromNetwork.getNetwork(),workRemoveVmFromNetwork.getBroadcastUri());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Boolean(result)));
  }
 else   if (work instanceof VmWorkReconfigure) {
    VmWorkReconfigure workReconfigure=(VmWorkReconfigure)work;
    reConfigureVm(vm.getUuid(),workReconfigure.getNewServiceOffering(),workReconfigure.isSameHost());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkStorageMigration) {
    VmWorkStorageMigration workStorageMigration=(VmWorkStorageMigration)work;
    orchestrateStorageMigration(vm.getUuid(),workStorageMigration.getDestStoragePool());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else {
    RuntimeException e=new RuntimeException("Unsupported VM work command: " + job.getCmd());
    String exceptionJson=JobSerializerHelper.toSerializedString(e);
    s_logger.error("Serialize exception object into json: " + exceptionJson);
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,exceptionJson);
  }
}
