{
  final CallContext context=CallContext.current();
  final User callingUser=context.getCallingUser();
  final Account callingAccount=context.getCallingAccount();
  final VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  Transaction.execute(new TransactionCallbackNoReturn(){
    public void doInTransactionWithoutResult(    TransactionStatus status){
      VmWorkJobVO workJob=null;
      _vmDao.lockRow(vm.getId(),true);
      List<VmWorkJobVO> pendingWorkJobs=_workJobDao.listPendingWorkJobs(VirtualMachine.Type.Instance,vm.getId(),VmWorkStart.class.getName());
      if (pendingWorkJobs.size() > 0) {
        assert(pendingWorkJobs.size() == 1);
        workJob=pendingWorkJobs.get(0);
      }
 else {
        workJob=new VmWorkJobVO(context.getContextId());
        workJob.setDispatcher(VmWorkJobDispatcher.VM_WORK_JOB_DISPATCHER);
        workJob.setCmd(VmWorkStart.class.getName());
        workJob.setAccountId(callingAccount.getId());
        workJob.setUserId(callingUser.getId());
        workJob.setStep(VmWorkJobVO.Step.Starting);
        workJob.setVmType(vm.getType());
        workJob.setVmInstanceId(vm.getId());
        VmWorkStart workInfo=new VmWorkStart(callingUser.getId(),callingAccount.getId(),vm.getId());
        workInfo.setPlan(planToDeploy);
        workInfo.setParams(params);
        workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
        _jobMgr.submitAsyncJob(workJob,VmWorkJobDispatcher.VM_WORK_QUEUE,vm.getId());
      }
      context.putContextParameter("workJob",workJob);
      context.putContextParameter("jobId",new Long(vm.getId()));
    }
  }
);
  final long jobId=(Long)context.getContextParameter("jobId");
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmStateSyncOutcome((VmWorkJobVO)context.getContextParameter("workJob"),VirtualMachine.PowerState.PowerOn,vm.getId(),null);
}
