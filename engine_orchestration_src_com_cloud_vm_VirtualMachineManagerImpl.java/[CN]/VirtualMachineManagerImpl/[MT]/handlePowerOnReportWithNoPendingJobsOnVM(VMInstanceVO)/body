{
switch (vm.getState()) {
case Starting:
    try {
      stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOnReport,vm.getPowerHostId());
    }
 catch (    NoTransitionException e) {
      s_logger.warn("Unexpected VM state transition exception, race-condition?",e);
    }
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_SYNC,vm.getDataCenterId(),vm.getPodIdToDeployIn(),VM_SYNC_ALERT_SUBJECT,"VM " + vm.getHostName() + "("+ vm.getInstanceName()+ ") state is sync-ed (Starting -> Running) from out-of-context transition. VM network environment may need to be reset");
break;
case Running:
try {
if (vm.getHostId() != null && vm.getHostId().longValue() != vm.getPowerHostId().longValue()) s_logger.info("Detected out of band VM migration from host " + vm.getHostId() + " to host "+ vm.getPowerHostId());
stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOnReport,vm.getPowerHostId());
}
 catch (NoTransitionException e) {
s_logger.warn("Unexpected VM state transition exception, race-condition?",e);
}
break;
case Stopping:
case Stopped:
try {
stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOnReport,vm.getPowerHostId());
}
 catch (NoTransitionException e) {
s_logger.warn("Unexpected VM state transition exception, race-condition?",e);
}
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_SYNC,vm.getDataCenterId(),vm.getPodIdToDeployIn(),VM_SYNC_ALERT_SUBJECT,"VM " + vm.getHostName() + "("+ vm.getInstanceName()+ ") state is sync-ed ("+ vm.getState()+ " -> Running) from out-of-context transition. VM network environment may need to be reset");
break;
case Destroyed:
case Expunging:
s_logger.info("Receive power on report when VM is in destroyed or expunging state. vm: " + vm.getId() + ", state: "+ vm.getState());
break;
case Migrating:
try {
stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOnReport,vm.getPowerHostId());
}
 catch (NoTransitionException e) {
s_logger.warn("Unexpected VM state transition exception, race-condition?",e);
}
break;
case Error:
default :
s_logger.info("Receive power on report when VM is in error or unexpected state. vm: " + vm.getId() + ", state: "+ vm.getState());
break;
}
}
