{
switch (vm.getState()) {
case Starting:
case Stopping:
case Running:
case Stopped:
case Migrating:
    s_logger.info("VM " + vm.getInstanceName() + " is at "+ vm.getState()+ " and we received a power-off report while there is no pending jobs on it");
  if (vm.isHaEnabled() && vm.getState() == State.Running && vm.getHypervisorType() != HypervisorType.VMware && vm.getHypervisorType() != HypervisorType.Hyperv) {
    s_logger.info("Detected out-of-band stop of a HA enabled VM " + vm.getInstanceName() + ", will schedule restart");
    if (!_haMgr.hasPendingHaWork(vm.getId()))     _haMgr.scheduleRestart(vm,true);
 else     s_logger.info("VM " + vm.getInstanceName() + " already has an pending HA task working on it");
    return;
  }
VirtualMachineGuru vmGuru=getVmGuru(vm);
VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
sendStop(vmGuru,profile,true);
try {
stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOffReport,null);
}
 catch (NoTransitionException e) {
s_logger.warn("Unexpected VM state transition exception, race-condition?",e);
}
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_SYNC,vm.getDataCenterId(),vm.getPodIdToDeployIn(),VM_SYNC_ALERT_SUBJECT,"VM " + vm.getHostName() + "("+ vm.getInstanceName()+ ") state is sync-ed ("+ vm.getState()+ " -> Stopped) from out-of-context transition.");
s_logger.info("VM " + vm.getInstanceName() + " is sync-ed to at Stopped state according to power-off report from hypervisor");
break;
case Destroyed:
case Expunging:
break;
case Error:
default :
break;
}
}
