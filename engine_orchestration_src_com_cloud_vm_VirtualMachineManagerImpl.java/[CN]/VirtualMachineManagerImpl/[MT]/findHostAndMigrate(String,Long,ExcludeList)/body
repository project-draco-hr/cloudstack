{
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  if (vm == null) {
    throw new CloudRuntimeException("Unable to find " + vmUuid);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  Long srcHostId=vm.getHostId();
  Long oldSvcOfferingId=vm.getServiceOfferingId();
  if (srcHostId == null) {
    throw new CloudRuntimeException("Unable to scale the vm because it doesn't have a host id");
  }
  Host host=_hostDao.findById(srcHostId);
  DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),null,null,null);
  excludes.addHost(vm.getHostId());
  vm.setServiceOfferingId(newSvcOfferingId);
  DeployDestination dest=null;
  try {
    dest=_dpMgr.planDeployment(profile,plan,excludes,null);
  }
 catch (  AffinityConflictException e2) {
    s_logger.warn("Unable to create deployment, affinity rules associted to the VM conflict",e2);
    throw new CloudRuntimeException("Unable to create deployment, affinity rules associted to the VM conflict");
  }
  if (dest != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(" Found " + dest + " for scaling the vm to.");
    }
  }
  if (dest == null) {
    throw new InsufficientServerCapacityException("Unable to find a server to scale the vm to.",host.getClusterId());
  }
  excludes.addHost(dest.getHost().getId());
  try {
    migrateForScale(vm.getUuid(),srcHostId,dest,oldSvcOfferingId);
  }
 catch (  ResourceUnavailableException e) {
    s_logger.debug("Unable to migrate to unavailable " + dest);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    s_logger.debug("Unable to migrate VM due to: " + e.getMessage());
    throw e;
  }
}
