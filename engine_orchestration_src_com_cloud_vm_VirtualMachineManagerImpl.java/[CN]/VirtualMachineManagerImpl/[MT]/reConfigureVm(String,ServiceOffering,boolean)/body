{
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkJobDispatcher.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateReConfigureVm(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
  }
 else {
    Outcome<VirtualMachine> outcome=reconfigureVmThroughJobQueue(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
    VirtualMachine vm=null;
    try {
      vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    AsyncJobVO jobVo=_entityMgr.findById(AsyncJobVO.class,outcome.getJob().getId());
    if (jobVo.getResultCode() == JobInfo.Status.SUCCEEDED.ordinal()) {
      return _entityMgr.findById(VMInstanceVO.class,vm.getId());
    }
 else {
      Throwable jobException=retriveExecutionException(outcome.getJob());
      if (jobException != null) {
        if (jobException instanceof ResourceUnavailableException)         throw (ResourceUnavailableException)jobException;
 else         if (jobException instanceof ConcurrentOperationException)         throw (ConcurrentOperationException)jobException;
      }
      throw new RuntimeException("Failed with un-handled exception");
    }
  }
}
