{
  final VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  if (vm == null) {
    logger.debug("Unable to find a VM for " + vmUuid);
    throw new CloudRuntimeException("Unable to find " + vmUuid);
  }
  ServiceOfferingVO offeringVO=_offeringDao.findById(vm.getId(),vm.getServiceOfferingId());
  final VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm,null,offeringVO,null,null);
  final Long hostId=vm.getHostId();
  if (hostId == null) {
    logger.debug("Unable to migrate because the VM doesn't have a host id: " + vm);
    throw new CloudRuntimeException("Unable to migrate " + vmUuid);
  }
  final Host host=_hostDao.findById(hostId);
  Long poolId=null;
  final List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
  for (  final VolumeVO rootVolumeOfVm : vols) {
    final StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    if (rootDiskPool != null) {
      poolId=rootDiskPool.getId();
    }
  }
  final DataCenterDeployment plan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),null,poolId,null);
  final ExcludeList excludes=new ExcludeList();
  excludes.addHost(hostId);
  DeployDestination dest=null;
  while (true) {
    try {
      dest=_dpMgr.planDeployment(profile,plan,excludes,planner);
    }
 catch (    final AffinityConflictException e2) {
      logger.warn("Unable to create deployment, affinity rules associted to the VM conflict",e2);
      throw new CloudRuntimeException("Unable to create deployment, affinity rules associted to the VM conflict");
    }
    if (dest != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Found destination " + dest + " for migrating to.");
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Unable to find destination for migrating the vm " + profile);
      }
      throw new InsufficientServerCapacityException("Unable to find a server to migrate to.",host.getClusterId());
    }
    excludes.addHost(dest.getHost().getId());
    try {
      migrate(vm,srcHostId,dest);
      return;
    }
 catch (    final ResourceUnavailableException e) {
      logger.debug("Unable to migrate to unavailable " + dest);
    }
catch (    final ConcurrentOperationException e) {
      logger.debug("Unable to migrate VM due to: " + e.getMessage());
    }
    try {
      advanceStop(vmUuid,true);
      throw new CloudRuntimeException("Unable to migrate " + vm);
    }
 catch (    final ResourceUnavailableException e) {
      logger.debug("Unable to stop VM due to " + e.getMessage());
      throw new CloudRuntimeException("Unable to migrate " + vm);
    }
catch (    final ConcurrentOperationException e) {
      logger.debug("Unable to stop VM due to " + e.getMessage());
      throw new CloudRuntimeException("Unable to migrate " + vm);
    }
catch (    final OperationTimedoutException e) {
      logger.debug("Unable to stop VM due to " + e.getMessage());
      throw new CloudRuntimeException("Unable to migrate " + vm);
    }
  }
}
