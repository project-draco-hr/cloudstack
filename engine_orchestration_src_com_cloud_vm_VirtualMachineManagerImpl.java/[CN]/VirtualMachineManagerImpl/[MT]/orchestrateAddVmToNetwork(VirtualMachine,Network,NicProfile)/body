{
  final CallContext cctx=CallContext.current();
  logger.debug("Adding vm " + vm + " to network "+ network+ "; requested nic profile "+ requested);
  final VMInstanceVO vmVO=_vmDao.findById(vm.getId());
  final ReservationContext context=new ReservationContextImpl(null,null,cctx.getCallingUser(),cctx.getCallingAccount());
  final VirtualMachineProfileImpl vmProfile=new VirtualMachineProfileImpl(vmVO,null,null,null,null);
  final DataCenter dc=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  final Host host=_hostDao.findById(vm.getHostId());
  final DeployDestination dest=new DeployDestination(dc,null,null,host);
  if (vm.getState() == State.Running) {
    final NicProfile nic=_networkMgr.createNicForVm(network,requested,context,vmProfile,true);
    final HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());
    final VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
    final NicTO nicTO=toNicTO(nic,vmProfile.getVirtualMachine().getHypervisorType());
    logger.debug("Plugging nic for vm " + vm + " in network "+ network);
    boolean result=false;
    try {
      result=plugNic(network,nicTO,vmTO,context,dest);
      if (result) {
        logger.debug("Nic is plugged successfully for vm " + vm + " in network "+ network+ ". Vm  is a part of network now");
        final long isDefault=nic.isDefaultNic() ? 1 : 0;
        if (VirtualMachine.Type.User.equals(vmVO.getType())) {
          UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vmVO.getAccountId(),vmVO.getDataCenterId(),vmVO.getId(),Long.toString(nic.getId()),network.getNetworkOfferingId(),null,isDefault,VirtualMachine.class.getName(),vmVO.getUuid(),vm.isDisplay());
        }
        return nic;
      }
 else {
        logger.warn("Failed to plug nic to the vm " + vm + " in network "+ network);
        return null;
      }
    }
  finally {
      if (!result) {
        logger.debug("Removing nic " + nic + " from vm "+ vmProfile.getVirtualMachine()+ " as nic plug failed on the backend");
        _networkMgr.removeNic(vmProfile,_nicsDao.findById(nic.getId()));
      }
    }
  }
 else   if (vm.getState() == State.Stopped) {
    return _networkMgr.createNicForVm(network,requested,context,vmProfile,false);
  }
 else {
    logger.warn("Unable to add vm " + vm + " to network  "+ network);
    throw new ResourceUnavailableException("Unable to add vm " + vm + " to network, is not in the right state",DataCenter.class,vm.getDataCenterId());
  }
}
