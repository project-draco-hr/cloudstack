@classmethod
def setUpClass(cls):
    testClient = super(TestSnapshotsHardning, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    cls.mgtSvrDetails = cls.config.__dict__['mgtSvr'][0].__dict__
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
        cls.userapiclient = testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.service_offering_ha = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'], offerha=True)
        cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
        cls._cleanup.append(cls.disk_offering)
        cls.vm = VirtualMachine.create(cls.apiclient, cls.testdata['small'], templateid=cls.template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, zoneid=cls.zone.id, diskofferingid=cls.disk_offering.id, mode=cls.zone.networktype)
        cls._cleanup.append(cls.vm)
        cls.root_volume = list_volumes(cls.userapiclient, virtualmachineid=cls.vm.id, type='ROOT', listall=True)
        cls.data_volume = list_volumes(cls.userapiclient, virtualmachineid=cls.vm.id, type='DATA', listall=True)
        cls.vm_ha = VirtualMachine.create(cls.apiclient, cls.testdata['small'], templateid=cls.template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering_ha.id, zoneid=cls.zone.id, diskofferingid=cls.disk_offering.id, mode=cls.zone.networktype)
        cls._cleanup.append(cls.vm_ha)
        cls._cleanup.append(cls.account)
        cls.root_volume_ha = list_volumes(cls.userapiclient, virtualmachineid=cls.vm_ha.id, type='ROOT', listall=True)
        cls.clusterList = Cluster.list(cls.apiclient)
        cls.Hosts = Host.list(cls.apiclient)
        cls.exceptionList = []
        configs = Configurations.list(cls.apiclient, name='snapshot.delta.max')
        cls.delta_max = configs[0].value
        try:
            cls.pools = StoragePool.list(cls.apiclient, zoneid=cls.zone.id)
        except Exception as e:
            raise unittest.SkipTest(e)
    except Exception as e:
        cls.tearDownClass()
        raise e
    return
