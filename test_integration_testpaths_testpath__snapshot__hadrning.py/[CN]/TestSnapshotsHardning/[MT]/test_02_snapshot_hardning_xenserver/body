@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_02_snapshot_hardning_xenserver(self):
    "snapshot hardning\n            1. Take VM snapshot then migrate the VM to another\n                host and again take\n                volume snapshot and check its intigrity\n            2. Verify that snapshot gets created successfuly\n                while VM is getting\n                Migrated to another host\n            3. Verify that snapshot should succeed after vm's are\n                HA-ed to different host\n                and also check its integrity\n            4. Take ROOT volume snapshot and when snapshot is\n                in progress bring the host down\n                then once the VM is HA-ed to different host\n                take snapshot of root volume\n                and Check the integrity of this snapshot\n            5. Stop the VM, initiate VM snapshot and\n                while snapshot is still in progress\n                start the VM and check the integrity of the snapshot\n            6. Initiate ROOT volume snapshot and while snapshot is\n                in pregress Stop the VM\n                Verify that the VM stops successfully and\n                check integrity of snapshot\n            7. Initiate ROOT volume snapshot and while snapshot is\n                in pregress Reboot the VM\n                Verify that the VM reboot successfully and\n                check integrity of snapshot\n            8. Initiate ROOT volume snapshot and while snapshot is\n                in pregress create snapshot of the same volume\n                and check integrity of both the snapshots\n            9. Initiate snapshot of DATA volume and while snapshot\n                is in progress detach the volume\n                verify that volume gets detached successfully\n                also check integrity of snapshot\n            10. Initiate snapshot of a detached volume and\n                while snapshot is in progress attach the volume\n                to A VM verify that volume gets attached\n                successfully also check integrity of snapshot\n        "
    if (self.hypervisor != 'xenserver'):
        self.skipTest('Skip test for server other than XenServer')
    root_volume = list_volumes(self.userapiclient, virtualmachineid=self.vm.id, type='ROOT', listall=True)
    checksum_root = createChecksum(service=self.testdata, virtual_machine=self.vm, disk=root_volume[0], disk_type='rootdiskdevice')
    Snapshot.create(self.apiclient, root_volume[0].id)
    snapshots = list_snapshots(self.apiclient, volumeid=root_volume[0].id, listall=True)
    destinationHost = Host.listForMigration(self.apiclient, virtualmachineid=self.vm.id)
    sameClusHosts = Host.list(self.apiclient, virtualmachineid=self.vm.id)
    current_host = self.vm.hostid
    hostToMigarte = GetDestinationHost(self, current_host, sameClusHosts, destinationHost)
    MigrateRootVolume(self, self.vm, hostToMigarte)
    self.CreateDeltaSnapshot(root_volume[0])
    Snapshot.create(self.apiclient, root_volume[0].id)
    snapshots = list_snapshots(self.apiclient, volumeid=root_volume[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root)
    self.CreateDeltaSnapshot(root_volume[0])
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.root_volume[0], False))
        destinationHost = Host.listForMigration(self.apiclient, virtualmachineid=self.vm.id)
        migrate_rootvolume_thread = Thread(target=MigrateRootVolume, args=(self, self.vm, destinationHost[0]))
        create_snapshot_thread.start()
        migrate_rootvolume_thread.start()
        create_snapshot_thread.join()
        migrate_rootvolume_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root)
    self.CreateDeltaSnapshot(root_volume[0])
    vm_host_id = self.vm_ha.hostid
    checksum_root_ha = createChecksum(service=self.testdata, virtual_machine=self.vm_ha, disk=self.root_volume_ha[0], disk_type='rootdiskdevice')
    self.CreateSnapshot(self.root_volume_ha[0], False)
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume_ha[0].id, listall=True)
    self.CreateDeltaSnapshot(self.root_volume_ha[0])
    Host.enableMaintenance(self.apiclient, id=vm_host_id)
    time.sleep(180)
    self.CreateSnapshot(self.root_volume[0], False)
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume_ha[0].id, listall=True)
    Host.cancelMaintenance(self.apiclient, id=vm_host_id)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root_ha)
    self.CreateDeltaSnapshot(self.root_volume_ha[0])
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.root_volume_ha[0], False))
        host_enable_maint_thread = Thread(target=Host.enableMaintenance, args=(self.apiclient, vm_host_id))
        create_snapshot_thread.start()
        host_enable_maint_thread.start()
        create_snapshot_thread.join()
        host_enable_maint_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    self.CreateDeltaSnapshot(self.root_volume_ha[0])
    self.CreateSnapshot(self.root_volume_ha[0], False)
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume_ha[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root_ha)
    Host.cancelMaintenance(self.apiclient, vm_host_id)
    self.vm.stop(self.apiclient)
    time.sleep(90)
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.root_volume[0], False))
        start_vm_thread = Thread(target=self.StartVM, args=[self.vm])
        create_snapshot_thread.start()
        start_vm_thread.start()
        create_snapshot_thread.join()
        start_vm_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    state = self.dbclient.execute(("select state from vm_instance where name='%s'" % self.vm.name))[0][0]
    self.assertEqual(state, 'Running', 'Check if vm has started properly')
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root)
    self.CreateDeltaSnapshot(root_volume[0])
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.root_volume[0], False))
        stop_vm_thread = Thread(target=self.StopVM, args=[self.vm])
        create_snapshot_thread.start()
        stop_vm_thread.start()
        create_snapshot_thread.join()
        stop_vm_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    state = self.dbclient.execute(("select state from vm_instance where name='%s'" % self.vm.name))[0][0]
    self.assertEqual(state, 'Stopped', 'Check if vm has started properly')
    self.vm.start(self.apiclient)
    time.sleep(180)
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root)
    self.CreateDeltaSnapshot(root_volume[0])
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.root_volume[0], False))
        reboot_vm_thread = Thread(target=self.RebootVM, args=[self.vm])
        create_snapshot_thread.start()
        reboot_vm_thread.start()
        create_snapshot_thread.join()
        reboot_vm_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    state = self.dbclient.execute(("select state from vm_instance where name='%s'" % self.vm.name))[0][0]
    self.assertEqual(state, 'Running', 'Check if vm has started properly')
    time.sleep(180)
    snapshots = list_snapshots(self.apiclient, volumeid=self.root_volume[0].id, listall=True)
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root)
    self.CreateDeltaSnapshot(root_volume[0])
    checksum_data = createChecksum(service=self.testdata, virtual_machine=self.vm, disk=self.data_volume[0], disk_type='datadiskdevice_1')
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.data_volume[0], False))
        detach_vm_thread = Thread(target=self.vm.detach_volume, args=(self.apiclient, self.data_volume[0]))
        create_snapshot_thread.start()
        detach_vm_thread.start()
        create_snapshot_thread.join()
        detach_vm_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    self.vm.reboot(self.apiclient)
    snapshots = list_snapshots(self.apiclient, volumeid=self.data_volume[0].id, listall=True)
    data_volume_list = list_volumes(self.apiclient, virtualmachineid=self.vm.id, type='DATA', listall=True)
    self.assertEqual(data_volume_list, None, 'check if volume is detached')
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_data, disk_type='data')
    self.CreateDeltaSnapshot(self.data_volume[0])
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self.data_volume[0], False))
        attach_volume_thread = Thread(target=self.vm.attach_volume, args=(self.apiclient, self.data_volume[0]))
        create_snapshot_thread.start()
        attach_volume_thread.start()
        create_snapshot_thread.join()
        attach_volume_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    self.vm.reboot(self.apiclient)
    snapshots = list_snapshots(self.apiclient, volumeid=self.data_volume[0].id, listall=True)
    data_volume_list = list_volumes(self.apiclient, virtualmachineid=self.vm.id, type='DATA', listall=True)
    self.assertNotEqual(data_volume_list, [], 'check if volume is detached')
    checkIntegrityOfSnapshot(self, snapshots[0], checksum_root, disk_type='data')
    self.CreateDeltaSnapshot(self.data_volume[0])
    return
