def test_03_snapshot_hardning_configuration(self):
    'snapshot hardning\n            1. Verify the snapshot failuar for smaller value of\n                backup.snapshot.wait then snapshot success for\n                larger value of backup.snapshot.wait\n                and check the integrity of the snapshot\n            2.\n\n        '
    if (not self.testdata['configurableData']['restartManagementServerThroughTestCase']):
        self.skipTest('Skip test if restartManagementServerThroughTestCase                        is not provided')
    configs = Configurations.list(self.apiclient, name='backup.snapshot.wait')
    orig_backup = configs[0].value
    Configurations.update(self.apiclient, name='backup.snapshot.wait', value='10')
    self.RestartServer()
    time.sleep(120)
    checksum_root = createChecksum(service=self.testdata, virtual_machine=self.vm, disk=self.root_volume, disk_type='rootdiskdevice')
    with self.assertRaises(Exception):
        Snapshot.create(self.apiclient, self.root_volume[0].id)
    Configurations.update(self.apiclient, name='backup.snapshot.wait', value=orig_backup)
    self.RestartServer()
    time.sleep(120)
    configs = Configurations.list(self.apiclient, name='backup.snapshot.wait')
    orig_backup = configs[0].value
    snapshot_2 = Snapshot.create(self.apiclient, self.root_volume[0].id)
    time.sleep(360)
    self.assertEqual(self.dbclient.execute(("select status  from snapshots where id='%s'" % snapshot_2.id))[0][0], 'BackedUp')
    checkIntegrityOfSnapshot(self, snapshot_2, checksum_root)
    return
