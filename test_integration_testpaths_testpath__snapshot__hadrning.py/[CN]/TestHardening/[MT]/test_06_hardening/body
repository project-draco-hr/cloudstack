@attr(tags=['basic', 'advanced'], required_hardware='true')
def test_06_hardening(self):
    ' Hardening\n\n            1. Attach Volume when snapshot on this volume is\n               still in progress to a VM in different cluster.\n            2. Volume Snapshot after Vms have migrated to\n               a different storage pool in same cluster.\n            3. Volume Snapshot after Vms have migrated to\n               a different cluster.\n            4. Volume Snapshot after Vm has live migrated to\n               a different storage with in the same cluster.\n            5. Volume Snapshot after Vm has live migrated to\n               a different cluster.\n            6. Volume migration when snapshot is in progress.\n            7. Storage live migration when snapshot is in progress.\n\n        '
    root_volume = self.GetUpdatedRootVolume(self)
    checksum_root = createChecksum(service=self.testdata, virtual_machine=self.vm, disk=root_volume, disk_type='rootdiskdevice')
    data_volume_created = Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering_cluster1.id)
    self.cleanup.append(data_volume_created)
    self.vm.attach_volume(self.apiclient, data_volume_created)
    self.vm.reboot(self.apiclient)
    data_volumes_list = Volume.list(self.apiclient, id=data_volume_created.id)
    data_volume = data_volumes_list[0]
    checksum_data = createChecksum(service=self.testdata, virtual_machine=self.vm, disk=data_volume, disk_type='datadiskdevice_1')
    self.vm.detach_volume(self.apiclient, data_volume)
    self.vm.reboot(self.apiclient)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    vm_in_cluster2 = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_cluster2.id, zoneid=self.zone.id, mode=self.zone.networktype)
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(data_volume, False))
        attach_volume_thread = Thread(target=vm_in_cluster2.attach_volume, args=(self.apiclient, data_volume))
        create_snapshot_thread.start()
        attach_volume_thread.start()
        create_snapshot_thread.join()
        attach_volume_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    vm_in_cluster2.reboot(self.apiclient)
    snapshots_list = list_snapshots(self.apiclient, volumeid=data_volume.id, listall=True)
    data_volume_list = list_volumes(self.apiclient, virtualmachineid=vm_in_cluster2.id, type='DATA', listall=True)
    self.assertNotEqual(data_volume_list, [], 'check if volume is detached')
    self.CreateSnapshot(self, data_volume, False)
    snapshots_list = list_snapshots(self.apiclient, volumeid=data_volume.id, listall=True)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % snapshots_list[0].state))
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_data, disk_type='data')
    self.CreateSnapshot(self, root_volume, False)
    snapshots_list = Snapshot.list(self.userapiclient, volumeid=root_volume.id)
    status = validateList(snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % snapshots_list[0].state))
    self.vm.stop(self.apiclient)
    destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, root_volume.storage, migrateToDiffCluster=False)
    MigrateRootVolume(self, self.vm, destination_storage_pool)
    self.vm.start(self.apiclient)
    self.CreateSnapshot(self, root_volume, False)
    new_snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    status = validateList(new_snapshots_list)
    self.assertEqual(status[0], PASS, 'Snapshots List Validation Failed')
    self.assertEqual((new_snapshots_list[0].state.lower() in [BACKED_UP]), True, ('Snapshot state is not as expected. It is %s' % new_snapshots_list[0].state))
    checkIntegrityOfSnapshot(self, new_snapshots_list[0], checksum_root, disk_type='root')
    self.vm.stop(self.apiclient)
    root_volume = self.GetUpdatedRootVolume(self)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, [], migrateToDiffCluster=True)
    MigrateRootVolume(self, self.vm, destination_storage_pool)
    self.vm.start(self.apiclient)
    self.CreateSnapshot(self, root_volume, False)
    snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_root, disk_type='root')
    root_volume = self.GetUpdatedRootVolume(self)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, root_volume.storage, migrateToDiffCluster=False)
    self.LiveMigrateVolume(self, root_volume, destination_storage_pool, islive=True)
    self.CreateSnapshot(self, root_volume, False)
    snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_root, disk_type='root')
    root_volume = self.GetUpdatedRootVolume(self)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, [], migrateToDiffCluster=True)
    self.LiveMigrateVolume(self, root_volume, destination_storage_pool, islive=True)
    current_storagepool_tag = self.GetStoragePoolTag(self, data_volume)
    destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, [], migrateToDiffCluster=True)
    self.LiveMigrateVolume(self, data_volume, destination_storage_pool, islive=True)
    self.CreateSnapshot(self, root_volume, False)
    snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_root, disk_type='root')
    self.vm.stop(self.apiclient)
    root_volume = self.GetUpdatedRootVolume(self)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self, root_volume, False))
        destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, root_volume.storage, migrateToDiffCluster=False)
        migrate_volume_thread = Thread(target=MigrateRootVolume, args=(self, self.vm, destination_storage_pool))
        create_snapshot_thread.start()
        migrate_volume_thread.start()
        create_snapshot_thread.join()
        migrate_volume_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshots_list[0].id), 'Snapshot is not on Secondary Storage.')
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_root)
    self.vm.start(self.apiclient)
    root_volume = self.GetUpdatedRootVolume(self)
    current_storagepool_tag = self.GetStoragePoolTag(self, root_volume)
    try:
        create_snapshot_thread = Thread(target=self.CreateSnapshot, args=(self, root_volume, False))
        destination_storage_pool = self.GetDestinationPool(self, current_storagepool_tag, root_volume.storage, migrateToDiffCluster=False)
        live_migrate_volume_thread = Thread(target=self.LiveMigrateVolume, args=(self, root_volume, destination_storage_pool, True))
        create_snapshot_thread.start()
        live_migrate_volume_thread.start()
        create_snapshot_thread.join()
        live_migrate_volume_thread.join()
    except Exception as e:
        raise Exception(('Warning: Exception unable to start thread : %s' % e))
    snapshots_list = list_snapshots(self.userapiclient, volumeid=root_volume.id)
    checkIntegrityOfSnapshot(self, snapshots_list[0], checksum_root, disk_type='root')
    return
