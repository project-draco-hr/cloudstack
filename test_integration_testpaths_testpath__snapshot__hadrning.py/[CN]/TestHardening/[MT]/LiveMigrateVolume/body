def LiveMigrateVolume(self, volume, destinationPool, islive=False, expectexception=False):
    ' Migrate given volume to type of storage pool mentioned in migrateto:\n\n            Inputs:\n                1. volume:           Volume to be migrated\n                2. migrate_to:       Scope of desired Storage pool\n                                     to which volume is\n                                     to be migrated\n                3. expectexception:  If exception is expected while migration\n        '
    if expectexception:
        with self.assertRaises(Exception):
            Volume.migrate(self.apiclient, volumeid=volume.id, storageid=destinationPool.id, livemigrate=islive)
    else:
        Volume.migrate(self.apiclient, volumeid=volume.id, storageid=destinationPool.id, livemigrate=islive)
        migrated_volume_response = list_volumes(self.apiclient, id=volume.id)
        self.assertEqual(isinstance(migrated_volume_response, list), True, 'Check list volumes response for valid list')
        self.assertNotEqual(migrated_volume_response, None, 'Check if volume exists in ListVolumes')
        migrated_volume = migrated_volume_response[0]
        self.assertEqual(str(migrated_volume.state).lower(), 'ready', 'Check migrated volume is in Ready state')
        self.assertEqual(migrated_volume.storage, destinationPool.name, 'Check volume is on migrated pool')
    return
