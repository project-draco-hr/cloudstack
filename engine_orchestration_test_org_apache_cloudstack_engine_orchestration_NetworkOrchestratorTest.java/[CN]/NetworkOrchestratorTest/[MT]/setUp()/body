{
  testOrchastrator._nicDao=mock(NicDao.class);
  testOrchastrator._networksDao=mock(NetworkDao.class);
  testOrchastrator._networkModel=mock(NetworkModel.class);
  testOrchastrator._nicSecondaryIpDao=mock(NicSecondaryIpDao.class);
  testOrchastrator._ntwkSrvcDao=mock(NetworkServiceMapDao.class);
  testOrchastrator._nicIpAliasDao=mock(NicIpAliasDao.class);
  DhcpServiceProvider provider=mock(DhcpServiceProvider.class);
  Map<Network.Capability,String> capabilities=new HashMap<Network.Capability,String>();
  Map<Network.Service,Map<Network.Capability,String>> services=new HashMap<Network.Service,Map<Network.Capability,String>>();
  services.put(Network.Service.Dhcp,capabilities);
  when(provider.getCapabilities()).thenReturn(services);
  capabilities.put(Network.Capability.DhcpAccrossMultipleSubnets,"true");
  when(testOrchastrator._ntwkSrvcDao.getProviderForServiceInNetwork(Matchers.anyLong(),Matchers.eq(Service.Dhcp))).thenReturn(dhcpProvider);
  when(testOrchastrator._networkModel.getElementImplementingProvider(dhcpProvider)).thenReturn(provider);
  when(guru.getName()).thenReturn(guruName);
  List<NetworkGuru> networkGurus=new ArrayList<NetworkGuru>();
  networkGurus.add(guru);
  testOrchastrator.networkGurus=networkGurus;
}
