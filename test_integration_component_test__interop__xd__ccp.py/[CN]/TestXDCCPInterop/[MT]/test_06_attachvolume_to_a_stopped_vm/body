@attr(tags=['devcloud', 'advanced', 'advancedns', 'basic', 'sg'], required_hardware='true')
def test_06_attachvolume_to_a_stopped_vm(self):
    '\n        Test Attach Volume To A Stopped VM\n        '
    list_vm_response = VirtualMachine.list(self.user_api_client, id=self.virtual_machine.id)
    self.assertEqual(list_vm_response[0].state, 'Stopped', msg='Check if VM is in Stopped state')
    custom_disk_offering = DiskOffering.list(self.user_api_client, name='custom')
    self.__class__.volume = Volume.create(self.user_api_client, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=custom_disk_offering[0].id, size=1)
    list_volume_response = Volume.list(self.user_api_client, id=self.volume.id)
    self.assertNotEqual(list_volume_response, None, 'Check if volume exists in ListVolumes')
    cmd = attachVolume.attachVolumeCmd()
    cmd.id = self.volume.id
    cmd.virtualmachineid = self.virtual_machine.id
    cmd.deviceid = 1
    vol1 = self.user_api_client.attachVolume(cmd)
    list_volume_response = Volume.list(self.user_api_client, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
    self.assertNotEqual(list_volume_response, None, 'Check if volume exists in ListVolumes')
    self.assertEqual(isinstance(list_volume_response, list), True, 'Check list volumes response for valid list')
    self.assertEqual(list_volume_response[0].deviceid, 1, 'Check listed volume device id is 1')
    return
