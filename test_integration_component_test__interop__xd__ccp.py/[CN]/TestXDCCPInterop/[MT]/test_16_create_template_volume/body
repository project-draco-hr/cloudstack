@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_16_create_template_volume(self):
    'Test Create template from volume\n        '
    noffering = NetworkOffering.list(self.apiclient, name='DefaultIsolatedNetworkOfferingWithSourceNatService')
    vm2network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=noffering[0].id, zoneid=self.zone.id)
    list_nw_response = Network.list(self.apiclient, id=vm2network.id)
    self.assertEqual(isinstance(list_nw_response, list), True, 'Check list response returns a valid networks list')
    templatevm = VirtualMachine.create(self.apiclient, self.services['medium'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, networkids=vm2network.id, serviceofferingid=self.service_offering.id, mode=self.services['mode'], startvm='true')
    time.sleep(600)
    vm_response = VirtualMachine.list(self.apiclient, id=templatevm.id)
    self.assertNotEqual(len(vm_response), 0, 'Check VMs available in List VMs response')
    vm = vm_response[0]
    self.assertEqual(vm.state, 'Running', 'Check the state of VM created from Template')
    templatevm.stop(self.apiclient, forced='false')
    vm_response = VirtualMachine.list(self.apiclient, id=templatevm.id)
    vm = vm_response[0]
    self.assertEqual(vm.state, 'Stopped', 'Check the state of VM is in Stopped state before creating the Template')
    list_volume_response = Volume.list(self.apiclient, virtualmachineid=vm.id, type='ROOT', listall=True)
    roottemplate = Template.create(self.apiclient, self.services['interop']['template'], volumeid=list_volume_response[0].id, account=self.account.name, domainid=self.domain.id)
    time.sleep(600)
    list_template_response = Template.list(self.apiclient, templatefilter=self.services['templatefilter'], id=roottemplate.id)
    self.assertEqual(isinstance(list_template_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_template_response), 0, 'Check template available in List Templates')
    template_response = list_template_response[0]
    self.assertEqual(template_response.displaytext, self.services['template']['displaytext'], 'Check display text of newly created template')
    name = template_response.name
    self.assertEqual(name.count(self.services['template']['name']), 1, 'Check name of newly created template')
    self.assertEqual(template_response.ostypeid, self.services['template']['ostypeid'], 'Check osTypeID of newly created template')
    templatevm.delete(self.apiclient)
    vm2network.delete(self.apiclient)
    vm3network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=noffering.id, zoneid=self.zone.id)
    list_nw_response = Network.list(self.apiclient, id=vm3network.id)
    self.assertEqual(isinstance(list_nw_response, list), True, 'Check list response returns a valid networks list')
    templatevm = VirtualMachine.create(self.apiclient, self.services['medium'], templateid=roottemplate.id, networkids=vm3network.id, serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid, mode=self.services['mode'], startvm='true')
    time.sleep(600)
    vm_response = VirtualMachine.list(self.apiclient, id=templatevm.id)
    self.assertNotEqual(len(vm_response), 0, 'Check VMs available in List VMs response')
    vm = vm_response[0]
    self.assertEqual(vm.state, 'Running', 'Check the state of VM created from Template')
    roottemplate.delete(self.apiclient)
    list_template_response = Template.list(self.apiclient, templatefilter=self.services['template']['templatefilter'], id=roottemplate.id, zoneid=self.zone.id)
    self.assertEqual(list_template_response, None, 'Check template available in List Templates')
    templatevm.delete(self.apiclient)
    vm3network.delete(self.apiclient)
    return
