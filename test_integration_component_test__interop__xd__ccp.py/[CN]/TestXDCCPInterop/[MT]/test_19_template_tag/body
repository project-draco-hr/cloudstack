@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_19_template_tag(self):
    ' Test creation, listing and deletion tag on templates\n        '
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest(('template creation from volume feature is not supported on %s' % self.hypervisor.lower()))
    try:
        noffering = NetworkOffering.list(self.user_api_client, name='DefaultIsolatedNetworkOfferingWithSourceNatService')
        vm4network = Network.create(self.user_api_client, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=noffering[0].id, zoneid=self.zone.id)
        list_nw_response = Network.list(self.user_api_client, id=vm4network.id)
        self.assertEqual(isinstance(list_nw_response, list), True, 'Check list response returns a valid networks list')
        vm_1 = VirtualMachine.create(self.user_api_client, self.services['small'], templateid=self.template.id, networkids=vm4network.id, serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid, mode=self.services['mode'], startvm='true')
        time.sleep(600)
        self.debug(('Stopping the virtual machine: %s' % vm_1.name))
        vm_1.stop(self.user_api_client)
    except Exception as e:
        self.fail(('Failed to stop VM: %s' % e))
    timeout = self.services['timeout']
    while True:
        list_volume = Volume.list(self.user_api_client, virtualmachineid=vm_1.id, type='ROOT', listall=True)
        if isinstance(list_volume, list):
            break
        elif (timeout == 0):
            raise Exception('List volumes failed.')
        time.sleep(5)
        timeout = (timeout - 1)
    self.volume = list_volume[0]
    self.debug(('Creating template from ROOT disk of virtual machine: %s' % vm_1.name))
    template = Template.create(self.user_api_client, self.services['template'], self.volume.id)
    self.cleanup.append(template)
    self.debug(('Created the template(%s). Now restarting the userVm: %s' % (template.name, vm_1.name)))
    vm_1.start(self.user_api_client)
    self.debug('Creating a tag for the template')
    tag = Tag.create(self.user_api_client, resourceIds=template.id, resourceType='Template', tags={'OS': 'windows8', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.user_api_client, listall=True, resourceType='Template', key='OS', value='windows8')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'windows8', 'The tag should have original value')
    Template.list(self.user_api_client, templatefilter=self.services['template']['templatefilter'], listall=True, key='OS', value='windows8')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.user_api_client, resourceIds=template.id, resourceType='Template', tags={'OS': 'windows8', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.user_api_client, listall=True, resourceType='Template', key='OS', value='windows8')
    self.assertEqual(tags, None, 'List tags should return empty response')
    return
