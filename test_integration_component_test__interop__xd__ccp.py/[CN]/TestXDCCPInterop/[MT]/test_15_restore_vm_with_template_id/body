@attr(tags=['devcloud', 'advanced', 'advancedns', 'basic', 'sg'], required_hardware='false')
def test_15_restore_vm_with_template_id(self):
    '\n        Test restoring Virtual Machine with template id\n        '
    noffering = NetworkOffering.list(self.user_api_client, name='DefaultIsolatedNetworkOfferingWithSourceNatService')
    vm1network = Network.create(self.user_api_client, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=noffering[0].id, zoneid=self.zone.id)
    list_nw_response = Network.list(self.user_api_client, id=vm1network.id)
    self.assertEqual(isinstance(list_nw_response, list), True, 'Check list response returns a valid networks list')
    restorevm = VirtualMachine.create(self.user_api_client, self.services['small'], networkids=vm1network.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, mode=self.services['mode'], startvm='true')
    time.sleep(600)
    list_vm_response = VirtualMachine.list(self.user_api_client, id=restorevm.id)
    self.assertEqual(list_vm_response[0].state, 'Running', 'Check virtual machine is in running state')
    custom_disk_offering = DiskOffering.list(self.user_api_client, name='custom')
    newvolume = Volume.create(self.user_api_client, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.domain.id, diskofferingid=custom_disk_offering[0].id, size=1)
    cmd = attachVolume.attachVolumeCmd()
    cmd.id = newvolume.id
    cmd.virtualmachineid = restorevm.id
    cmd.deviceid = 1
    vol1 = self.user_api_client.attachVolume(cmd)
    cmd = restoreVirtualMachine.restoreVirtualMachineCmd()
    cmd.virtualmachineid = restorevm.id
    cmd.templateid = self.xtemplate.id
    self.user_api_client.restoreVirtualMachine(cmd)
    time.sleep(600)
    list_vm_response = VirtualMachine.list(self.user_api_client, id=restorevm.id)
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_vm_response), 0, 'Check VM available in List Virtual Machines')
    self.assertEqual(list_vm_response[0].state, 'Running', 'Check virtual machine is in Stopped state')
    restorevm.delete(self.apiclient)
    vm1network.delete(self.user_api_client)
    return
