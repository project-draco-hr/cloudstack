{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.ID.getName());
  String domainName=(String)params.get(BaseCmd.Properties.NAME.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Boolean isRecursive=(Boolean)params.get(BaseCmd.Properties.IS_RECURSIVE.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  if (account != null) {
    if (domainId != null) {
      if (!getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to list domains children for domain id " + domainId + ", permission denied.");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,domainId);
    c.addCriteria(Criteria.NAME,domainName);
    c.addCriteria(Criteria.ISRECURSIVE,isRecursive);
  }
  List<DomainVO> domains=getManagementServer().searchForDomainChildren(c);
  List<Pair<String,Object>> domainTags=new ArrayList<Pair<String,Object>>();
  Object[] dTag=new Object[domains.size()];
  int i=0;
  for (  DomainVO domain : domains) {
    List<Pair<String,Object>> domainData=new ArrayList<Pair<String,Object>>();
    domainData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.valueOf(domain.getId()).toString()));
    domainData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),domain.getName()));
    domainData.add(new Pair<String,Object>(BaseCmd.Properties.LEVEL.getName(),domain.getLevel().toString()));
    domainData.add(new Pair<String,Object>(BaseCmd.Properties.HAS_CHILD.getName(),(domain.getChildCount()) > 0 ? "true" : "false"));
    if (domain.getParent() != null) {
      domainData.add(new Pair<String,Object>(BaseCmd.Properties.PARENT_DOMAIN_ID.getName(),domain.getParent().toString()));
      domainData.add(new Pair<String,Object>(BaseCmd.Properties.PARENT_DOMAIN_NAME.getName(),getManagementServer().findDomainIdById(domain.getParent()).getName()));
    }
    dTag[i++]=domainData;
  }
  Pair<String,Object> domainTag=new Pair<String,Object>("domain",dTag);
  domainTags.add(domainTag);
  return domainTags;
}
