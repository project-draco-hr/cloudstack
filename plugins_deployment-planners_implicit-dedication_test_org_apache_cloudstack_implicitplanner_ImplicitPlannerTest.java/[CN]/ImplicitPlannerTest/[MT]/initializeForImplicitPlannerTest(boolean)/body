{
  String plannerMode=new String("Strict");
  if (preferred) {
    plannerMode=new String("Preferred");
  }
  Map<String,String> details=new HashMap<String,String>();
  details.put("ImplicitDedicationMode",plannerMode);
  when(serviceOfferingDetailsDao.findDetails(offeringId)).thenReturn(details);
  HostVO host1=mock(HostVO.class);
  when(host1.getId()).thenReturn(5L);
  HostVO host2=mock(HostVO.class);
  when(host2.getId()).thenReturn(6L);
  HostVO host3=mock(HostVO.class);
  when(host3.getId()).thenReturn(7L);
  List<HostVO> hostsInCluster1=new ArrayList<HostVO>();
  List<HostVO> hostsInCluster2=new ArrayList<HostVO>();
  List<HostVO> hostsInCluster3=new ArrayList<HostVO>();
  hostsInCluster1.add(host1);
  hostsInCluster2.add(host2);
  hostsInCluster3.add(host3);
  when(resourceMgr.listAllHostsInCluster(1)).thenReturn(hostsInCluster1);
  when(resourceMgr.listAllHostsInCluster(2)).thenReturn(hostsInCluster2);
  when(resourceMgr.listAllHostsInCluster(3)).thenReturn(hostsInCluster3);
  long offeringIdForVmsOfThisAccount=15L;
  long offeringIdForVmsOfOtherAccount=16L;
  UserVmVO vm1=mock(UserVmVO.class);
  when(vm1.getAccountId()).thenReturn(accountId);
  when(vm1.getServiceOfferingId()).thenReturn(offeringIdForVmsOfThisAccount);
  UserVmVO vm2=mock(UserVmVO.class);
  when(vm2.getAccountId()).thenReturn(accountId);
  when(vm2.getServiceOfferingId()).thenReturn(offeringIdForVmsOfThisAccount);
  UserVmVO vm3=mock(UserVmVO.class);
  when(vm3.getAccountId()).thenReturn(201L);
  when(vm3.getServiceOfferingId()).thenReturn(offeringIdForVmsOfOtherAccount);
  List<VMInstanceVO> vmsForHost1=new ArrayList<VMInstanceVO>();
  List<VMInstanceVO> vmsForHost2=new ArrayList<VMInstanceVO>();
  List<VMInstanceVO> vmsForHost3=new ArrayList<VMInstanceVO>();
  List<VMInstanceVO> stoppedVmsForHost=new ArrayList<VMInstanceVO>();
  vmsForHost1.add(vm1);
  vmsForHost1.add(vm2);
  vmsForHost3.add(vm3);
  when(vmInstanceDao.listUpByHostId(5L)).thenReturn(vmsForHost1);
  when(vmInstanceDao.listUpByHostId(6L)).thenReturn(vmsForHost2);
  when(vmInstanceDao.listUpByHostId(7L)).thenReturn(vmsForHost3);
  when(vmInstanceDao.listByLastHostId(5L)).thenReturn(stoppedVmsForHost);
  when(vmInstanceDao.listByLastHostId(6L)).thenReturn(stoppedVmsForHost);
  when(vmInstanceDao.listByLastHostId(7L)).thenReturn(stoppedVmsForHost);
  ServiceOfferingVO offeringForVmOfThisAccount=mock(ServiceOfferingVO.class);
  when(serviceOfferingDao.findByIdIncludingRemoved(offeringIdForVmsOfThisAccount)).thenReturn(offeringForVmOfThisAccount);
  when(offeringForVmOfThisAccount.getDeploymentPlanner()).thenReturn(planner.getName());
  ServiceOfferingVO offeringForVMOfOtherAccount=mock(ServiceOfferingVO.class);
  when(serviceOfferingDao.findByIdIncludingRemoved(offeringIdForVmsOfOtherAccount)).thenReturn(offeringForVMOfOtherAccount);
  when(offeringForVMOfOtherAccount.getDeploymentPlanner()).thenReturn("FirstFitPlanner");
}
