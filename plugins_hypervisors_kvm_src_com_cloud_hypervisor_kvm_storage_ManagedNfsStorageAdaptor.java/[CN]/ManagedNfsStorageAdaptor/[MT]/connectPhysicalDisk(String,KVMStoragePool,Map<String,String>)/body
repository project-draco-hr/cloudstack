{
  StoragePool sp=null;
  Connect conn=null;
  String targetPath=null;
  LibvirtStoragePoolDef spd=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (conn == null) {
      throw new CloudRuntimeException("Failed to create Libvrt Connection");
    }
    targetPath="/mnt" + volumeUuid;
    spd=new LibvirtStoragePoolDef(PoolType.NETFS,volumeUuid,details.get(DiskTO.UUID),pool.getSourceHost(),details.get(DiskTO.MOUNT_POINT),targetPath);
    _storageLayer.mkdir(targetPath);
    s_logger.debug(spd.toString());
    sp=conn.storagePoolCreateXML(spd.toString(),0);
    if (sp == null) {
      throw new CloudRuntimeException("Failed to create storage pool:" + volumeUuid);
    }
    try {
      if (sp.isActive() == 0) {
        sp.create(0);
      }
      LibvirtStoragePool storagePool=(LibvirtStoragePool)getStoragePool(pool.getUuid());
      storagePool.setPool(sp);
      return true;
    }
 catch (    LibvirtException e) {
      String error=e.toString();
      if (error.contains("Storage source conflict")) {
        throw new CloudRuntimeException("A pool matching this location already exists in libvirt, " + " but has a different UUID/Name. Cannot create new pool without first " + " removing it. Check for inactive pools via 'virsh pool-list --all'. "+ error);
      }
 else {
        throw new CloudRuntimeException(error);
      }
    }
  }
 catch (  LibvirtException e) {
    s_logger.error(e.toString());
    if (e.toString().contains("already mounted")) {
      s_logger.error("Attempting to unmount old mount libvirt is unaware of at " + targetPath);
      String result=Script.runSimpleBashScript("umount -l " + targetPath);
      if (result == null) {
        s_logger.error("Succeeded in unmounting " + targetPath);
        try {
          conn.storagePoolCreateXML(spd.toString(),0);
          s_logger.error("Succeeded in redefining storage");
          return true;
        }
 catch (        LibvirtException l) {
          s_logger.error("Target was already mounted, unmounted it but failed to redefine storage:" + l);
        }
      }
 else {
        s_logger.error("Failed in unmounting and redefining storage");
      }
    }
 else {
      s_logger.error("Internal error occurred when attempting to mount:" + e.getMessage());
      e.printStackTrace();
      throw new CloudRuntimeException(e.toString());
    }
    return false;
  }
}
