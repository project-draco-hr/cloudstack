{
  String url=(String)dsInfos.get("url");
  Long zoneId=(Long)dsInfos.get("zoneId");
  String storagePoolName=(String)dsInfos.get("name");
  String providerName=(String)dsInfos.get("providerName");
  Long capacityBytes=(Long)dsInfos.get("capacityBytes");
  Long capacityIops=(Long)dsInfos.get("capacityIops");
  String tags=(String)dsInfos.get("tags");
  Map<String,String> details=(Map<String,String>)dsInfos.get("details");
  String storageVip=getStorageVip(url);
  int storagePort=getStoragePort(url);
  DataCenterVO zone=zoneDao.findById(zoneId);
  String uuid=SolidFireUtil.PROVIDER_NAME + "_" + zone.getUuid()+ "_"+ storageVip;
  if (capacityBytes == null || capacityBytes <= 0) {
    throw new IllegalArgumentException("'capacityBytes' must be present and greater than 0.");
  }
  if (capacityIops == null || capacityIops <= 0) {
    throw new IllegalArgumentException("'capacityIops' must be present and greater than 0.");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  parameters.setHost(storageVip);
  parameters.setPort(storagePort);
  parameters.setPath(getModifiedUrl(url));
  parameters.setType(StoragePoolType.Iscsi);
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setName(storagePoolName);
  parameters.setProviderName(providerName);
  parameters.setManaged(true);
  parameters.setCapacityBytes(capacityBytes);
  parameters.setUsedBytes(0);
  parameters.setCapacityIops(capacityIops);
  parameters.setHypervisorType(HypervisorType.Any);
  parameters.setTags(tags);
  parameters.setDetails(details);
  String managementVip=getManagementVip(url);
  int managementPort=getManagementPort(url);
  details.put(SolidFireUtil.MANAGEMENT_VIP,managementVip);
  details.put(SolidFireUtil.MANAGEMENT_PORT,String.valueOf(managementPort));
  String clusterAdminUsername=getValue(SolidFireUtil.CLUSTER_ADMIN_USERNAME,url);
  String clusterAdminPassword=getValue(SolidFireUtil.CLUSTER_ADMIN_PASSWORD,url);
  details.put(SolidFireUtil.CLUSTER_ADMIN_USERNAME,clusterAdminUsername);
  details.put(SolidFireUtil.CLUSTER_ADMIN_PASSWORD,clusterAdminPassword);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}
