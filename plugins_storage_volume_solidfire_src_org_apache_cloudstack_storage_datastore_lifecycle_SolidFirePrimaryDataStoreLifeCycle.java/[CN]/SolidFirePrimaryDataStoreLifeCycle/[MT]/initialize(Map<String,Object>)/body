{
  String url=(String)dsInfos.get("url");
  Long zoneId=(Long)dsInfos.get("zoneId");
  String storagePoolName=(String)dsInfos.get("name");
  String providerName=(String)dsInfos.get("providerName");
  Long capacityBytes=(Long)dsInfos.get("capacityBytes");
  Long capacityIops=(Long)dsInfos.get("capacityIops");
  String tags=(String)dsInfos.get("tags");
  @SuppressWarnings("unchecked") Map<String,String> details=(Map<String,String>)dsInfos.get("details");
  String storageVip=SolidFireUtil.getStorageVip(url);
  int storagePort=SolidFireUtil.getStoragePort(url);
  DataCenterVO zone=zoneDao.findById(zoneId);
  String uuid=SolidFireUtil.PROVIDER_NAME + "_" + zone.getUuid()+ "_"+ storageVip;
  if (capacityBytes == null || capacityBytes <= 0) {
    throw new IllegalArgumentException("'capacityBytes' must be present and greater than 0.");
  }
  if (capacityIops == null || capacityIops <= 0) {
    throw new IllegalArgumentException("'capacityIops' must be present and greater than 0.");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  parameters.setHost(storageVip);
  parameters.setPort(storagePort);
  parameters.setPath(SolidFireUtil.getModifiedUrl(url));
  parameters.setType(StoragePoolType.Iscsi);
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setName(storagePoolName);
  parameters.setProviderName(providerName);
  parameters.setManaged(true);
  parameters.setCapacityBytes(capacityBytes);
  parameters.setUsedBytes(0);
  parameters.setCapacityIops(capacityIops);
  parameters.setHypervisorType(HypervisorType.Any);
  parameters.setTags(tags);
  parameters.setDetails(details);
  String managementVip=SolidFireUtil.getManagementVip(url);
  int managementPort=SolidFireUtil.getManagementPort(url);
  details.put(SolidFireUtil.MANAGEMENT_VIP,managementVip);
  details.put(SolidFireUtil.MANAGEMENT_PORT,String.valueOf(managementPort));
  String clusterAdminUsername=SolidFireUtil.getValue(SolidFireUtil.CLUSTER_ADMIN_USERNAME,url);
  String clusterAdminPassword=SolidFireUtil.getValue(SolidFireUtil.CLUSTER_ADMIN_PASSWORD,url);
  details.put(SolidFireUtil.CLUSTER_ADMIN_USERNAME,clusterAdminUsername);
  details.put(SolidFireUtil.CLUSTER_ADMIN_PASSWORD,clusterAdminPassword);
  long lClusterDefaultMinIops=100;
  long lClusterDefaultMaxIops=15000;
  float fClusterDefaultBurstIopsPercentOfMaxIops=1.5f;
  try {
    String clusterDefaultMinIops=SolidFireUtil.getValue(SolidFireUtil.CLUSTER_DEFAULT_MIN_IOPS,url);
    if (clusterDefaultMinIops != null && clusterDefaultMinIops.trim().length() > 0) {
      lClusterDefaultMinIops=Long.parseLong(clusterDefaultMinIops);
    }
  }
 catch (  NumberFormatException ex) {
    s_logger.warn("Cannot parse the setting of " + SolidFireUtil.CLUSTER_DEFAULT_MIN_IOPS + ", using default value: "+ lClusterDefaultMinIops+ ". Exception: "+ ex);
  }
  try {
    String clusterDefaultMaxIops=SolidFireUtil.getValue(SolidFireUtil.CLUSTER_DEFAULT_MAX_IOPS,url);
    if (clusterDefaultMaxIops != null && clusterDefaultMaxIops.trim().length() > 0) {
      lClusterDefaultMaxIops=Long.parseLong(clusterDefaultMaxIops);
    }
  }
 catch (  NumberFormatException ex) {
    s_logger.warn("Cannot parse the setting of " + SolidFireUtil.CLUSTER_DEFAULT_MAX_IOPS + ", using default value: "+ lClusterDefaultMaxIops+ ". Exception: "+ ex);
  }
  try {
    String clusterDefaultBurstIopsPercentOfMaxIops=SolidFireUtil.getValue(SolidFireUtil.CLUSTER_DEFAULT_BURST_IOPS_PERCENT_OF_MAX_IOPS,url);
    if (clusterDefaultBurstIopsPercentOfMaxIops != null && clusterDefaultBurstIopsPercentOfMaxIops.trim().length() > 0) {
      fClusterDefaultBurstIopsPercentOfMaxIops=Float.parseFloat(clusterDefaultBurstIopsPercentOfMaxIops);
    }
  }
 catch (  NumberFormatException ex) {
    s_logger.warn("Cannot parse the setting of " + SolidFireUtil.CLUSTER_DEFAULT_BURST_IOPS_PERCENT_OF_MAX_IOPS + ", using default value: "+ fClusterDefaultBurstIopsPercentOfMaxIops+ ". Exception: "+ ex);
  }
  if (lClusterDefaultMinIops > lClusterDefaultMaxIops) {
    throw new CloudRuntimeException("The parameter '" + SolidFireUtil.CLUSTER_DEFAULT_MIN_IOPS + "' must be less than or equal to the parameter '"+ SolidFireUtil.CLUSTER_DEFAULT_MAX_IOPS+ "'.");
  }
  if (Float.compare(fClusterDefaultBurstIopsPercentOfMaxIops,1.0f) < 0) {
    throw new CloudRuntimeException("The parameter '" + SolidFireUtil.CLUSTER_DEFAULT_BURST_IOPS_PERCENT_OF_MAX_IOPS + "' must be greater than or equal to 1.");
  }
  details.put(SolidFireUtil.CLUSTER_DEFAULT_MIN_IOPS,String.valueOf(lClusterDefaultMinIops));
  details.put(SolidFireUtil.CLUSTER_DEFAULT_MAX_IOPS,String.valueOf(lClusterDefaultMaxIops));
  details.put(SolidFireUtil.CLUSTER_DEFAULT_BURST_IOPS_PERCENT_OF_MAX_IOPS,String.valueOf(fClusterDefaultBurstIopsPercentOfMaxIops));
  return dataStoreHelper.createPrimaryDataStore(parameters);
}
