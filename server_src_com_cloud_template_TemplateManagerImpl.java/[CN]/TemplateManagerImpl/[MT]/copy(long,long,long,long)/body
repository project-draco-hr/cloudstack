{
  HostVO srcSecHost=_storageMgr.getSecondaryStorageHost(sourceZoneId);
  HostVO dstSecHost=_storageMgr.getSecondaryStorageHost(destZoneId);
  DataCenterVO destZone=_dcDao.findById(destZoneId);
  DataCenterVO sourceZone=_dcDao.findById(sourceZoneId);
  if (sourceZone == null) {
    throw new InvalidParameterValueException("Please specify a valid source zone.");
  }
  DataCenterVO dstZone=_dcDao.findById(destZoneId);
  if (dstZone == null) {
    throw new InvalidParameterValueException("Please specify a valid destination zone.");
  }
  if (sourceZoneId == destZoneId) {
    throw new InvalidParameterValueException("Please specify different source and destination zones.");
  }
  if (srcSecHost == null) {
    throw new StorageUnavailableException("Source zone is not ready",DataCenter.class,sourceZoneId);
  }
  if (dstSecHost == null) {
    throw new StorageUnavailableException("Destination zone is not ready",DataCenter.class,destZoneId);
  }
  VMTemplateVO vmTemplate=_tmpltDao.findById(templateId);
  VMTemplateHostVO srcTmpltHost=null;
  srcTmpltHost=_tmpltHostDao.findByHostTemplate(srcSecHost.getId(),templateId);
  if (srcTmpltHost == null || srcTmpltHost.getDestroyed() || srcTmpltHost.getDownloadState() != VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    throw new InvalidParameterValueException("Please specify a template that is installed on secondary storage host: " + srcSecHost.getName());
  }
  AccountVO account=_accountDao.findById(vmTemplate.getAccountId());
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.template)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of templates and ISOs for account: " + account.getAccountName() + " has been exceeded.");
    rae.setResourceType("template");
    throw rae;
  }
  String copyEventType;
  String createEventType;
  if (vmTemplate.getFormat().equals(ImageFormat.ISO)) {
    copyEventType=EventTypes.EVENT_ISO_COPY;
    createEventType=EventTypes.EVENT_ISO_CREATE;
  }
 else {
    copyEventType=EventTypes.EVENT_TEMPLATE_COPY;
    createEventType=EventTypes.EVENT_TEMPLATE_CREATE;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VMTemplateHostVO dstTmpltHost=null;
  try {
    dstTmpltHost=_tmpltHostDao.findByHostTemplate(dstSecHost.getId(),templateId,true);
    if (dstTmpltHost != null) {
      dstTmpltHost=_tmpltHostDao.lockRow(dstTmpltHost.getId(),true);
      if (dstTmpltHost != null && dstTmpltHost.getDownloadState() == Status.DOWNLOADED) {
        if (dstTmpltHost.getDestroyed() == false) {
          return true;
        }
 else {
          dstTmpltHost.setDestroyed(false);
          _tmpltHostDao.update(dstTmpltHost.getId(),dstTmpltHost);
          return true;
        }
      }
 else       if (dstTmpltHost != null && dstTmpltHost.getDownloadState() == Status.DOWNLOAD_ERROR) {
        if (dstTmpltHost.getDestroyed() == true) {
          dstTmpltHost.setDestroyed(false);
          dstTmpltHost.setDownloadState(Status.NOT_DOWNLOADED);
          dstTmpltHost.setDownloadPercent(0);
          dstTmpltHost.setCopy(true);
          dstTmpltHost.setErrorString("");
          dstTmpltHost.setJobId(null);
          _tmpltHostDao.update(dstTmpltHost.getId(),dstTmpltHost);
        }
      }
    }
  }
  finally {
    txn.commit();
  }
  _tmpltDao.addTemplateToZone(vmTemplate,destZoneId);
  _downloadMonitor.copyTemplate(vmTemplate,srcSecHost,dstSecHost);
  if (account.getId() != Account.ACCOUNT_ID_SYSTEM) {
    UsageEventVO usageEvent=new UsageEventVO(copyEventType,account.getId(),destZoneId,templateId,null,null,null,srcTmpltHost.getSize());
    _usageEventDao.persist(usageEvent);
  }
  return true;
}
