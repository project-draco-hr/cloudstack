{
  Account account=(Account)UserContext.current().getAccountObject();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getName();
  String displayText=cmd.getDisplayText();
  Integer bits=cmd.getBits();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean requiresHVM=cmd.getRequiresHvm();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Long zoneId=cmd.getZoneId();
  if (bits == null) {
    bits=Integer.valueOf(64);
  }
  if (passwordEnabled == null) {
    passwordEnabled=false;
  }
  if (requiresHVM == null) {
    requiresHVM=true;
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  long accountId=1L;
  if (account != null) {
    accountId=account.getId().longValue();
  }
  Account accountObj;
  if (account == null) {
    accountObj=_accountDao.findById(accountId);
  }
 else {
    accountObj=account;
  }
  boolean isAdmin=(accountObj.getType() == Account.ACCOUNT_TYPE_ADMIN);
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid zone Id.");
  }
  if (url.toLowerCase().contains("file://")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"File:// type urls are currently unsupported");
  }
  if ((!url.toLowerCase().endsWith("vhd")) && (!url.toLowerCase().endsWith("vhd.zip")) && (!url.toLowerCase().endsWith("vhd.bz2"))&& (!url.toLowerCase().endsWith("vhd.gz") && (!url.toLowerCase().endsWith("qcow2")) && (!url.toLowerCase().endsWith("qcow2.zip"))&& (!url.toLowerCase().endsWith("qcow2.bz2"))&& (!url.toLowerCase().endsWith("qcow2.gz")))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid " + format.toLowerCase());
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue("allow.public.user.templates"));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Only private templates can be created.");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (name.length() > 32) {
    throw new InvalidParameterValueException("Template name should be less than 32 characters");
  }
  if (!name.matches("^[\\p{Alnum} ._-]+")) {
    throw new InvalidParameterValueException("Only alphanumeric, space, dot, dashes and underscore characters allowed");
  }
  ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
  if (imgfmt == null) {
    throw new IllegalArgumentException("Image format is incorrect " + format + ". Supported formats are "+ EnumUtils.listValues(ImageFormat.values()));
  }
  FileSystem fileSystem=FileSystem.valueOf("ext3");
  if (fileSystem == null) {
    throw new IllegalArgumentException("File system is incorrect " + "ext3" + ". Supported file systems are "+ EnumUtils.listValues(FileSystem.values()));
  }
  URI uri=new URI(url);
  if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase("http") && !uri.getScheme().equalsIgnoreCase("https") && !uri.getScheme().equalsIgnoreCase("file"))) {
    throw new IllegalArgumentException("Unsupported scheme for url: " + url);
  }
  int port=uri.getPort();
  if (!(port == 80 || port == 443 || port == -1)) {
    throw new IllegalArgumentException("Only ports 80 and 443 are allowed");
  }
  String host=uri.getHost();
  try {
    InetAddress hostAddr=InetAddress.getByName(host);
    if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
      throw new IllegalArgumentException("Illegal host specified in url");
    }
    if (hostAddr instanceof Inet6Address) {
      throw new IllegalArgumentException("IPV6 addresses not supported (" + hostAddr.getHostAddress() + ")");
    }
  }
 catch (  UnknownHostException uhe) {
    throw new IllegalArgumentException("Unable to resolve " + host);
  }
  UserVO user=_userDao.findById(userId);
  if (user == null) {
    throw new IllegalArgumentException("Unable to find user with id " + userId);
  }
  AccountVO accountVO=_accountDao.findById(user.getAccountId());
  if (_accountMgr.resourceLimitExceeded(accountVO,ResourceType.template)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of templates and ISOs for account: " + account.getAccountName() + " has been exceeded.");
    rae.setResourceType("template");
    throw rae;
  }
  if (zoneId != null) {
    if (_dcDao.findById(zoneId) == null) {
      throw new IllegalArgumentException("Please specify a valid zone.");
    }
  }
  VMTemplateVO systemvmTmplt=_tmpltDao.findRoutingTemplate();
  if (systemvmTmplt.getName().equalsIgnoreCase(name) || systemvmTmplt.getDisplayText().equalsIgnoreCase(displayText)) {
    throw new IllegalArgumentException("Cannot use reserved names for templates");
  }
  return create(userId,zoneId,name,displayText,isPublic,featured,imgfmt,fileSystem,uri,null,requiresHVM,bits,passwordEnabled,guestOSId,true);
}
