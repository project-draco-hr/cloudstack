{
  Transaction txn=Transaction.currentTxn();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<String> accountNames=cmd.getAccountNames();
  List<Long> projectIds=cmd.getProjectIds();
  Boolean isFeatured=cmd.isFeatured();
  Boolean isPublic=cmd.isPublic();
  Boolean isExtractable=cmd.isExtractable();
  String operation=cmd.getOperation();
  String mediaType="";
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null) {
    throw new InvalidParameterValueException("unable to find " + mediaType + " with id "+ id);
  }
  if (cmd instanceof UpdateTemplatePermissionsCmd) {
    mediaType="template";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException("Please provide a valid template");
    }
  }
  if (cmd instanceof UpdateIsoPermissionsCmd) {
    mediaType="iso";
    if (!template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException("Please provide a valid iso");
    }
  }
  if (projectIds != null) {
    for (    Long projectId : projectIds) {
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException("Unable to find project by id " + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
      }
      accountNames.add(_accountMgr.getAccount(project.getProjectAccountId()).getAccountName());
    }
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  if (template.getRemoved() != null) {
    s_logger.error("unable to update permissions for " + mediaType + " with id "+ id+ " as it is removed  ");
    throw new InvalidParameterValueException("unable to update permissions for " + mediaType + " with id "+ id+ " as it is removed ");
  }
  if (id == Long.valueOf(1)) {
    throw new InvalidParameterValueException("unable to update permissions for " + mediaType + " with id "+ id);
  }
  boolean isAdmin=_accountMgr.isAdmin(caller.getType());
  boolean allowPublicUserTemplates=Boolean.valueOf(_configDao.getValue("allow.public.user.templates"));
  if (!isAdmin && !allowPublicUserTemplates && isPublic != null && isPublic) {
    throw new InvalidParameterValueException("Only private " + mediaType + "s can be created.");
  }
  if (accountNames != null) {
    if ((operation == null) || (!operation.equalsIgnoreCase("add") && !operation.equalsIgnoreCase("remove") && !operation.equalsIgnoreCase("reset"))) {
      throw new InvalidParameterValueException("Invalid operation on accounts, the operation must be either 'add' or 'remove' in order to modify launch permissions." + "  Given operation is: '" + operation + "'");
    }
  }
  Long accountId=template.getAccountId();
  if (accountId == null) {
    throw new InvalidParameterValueException("Update template permissions is an invalid operation on template " + template.getName());
  }
  VMTemplateVO updatedTemplate=_tmpltDao.createForUpdate();
  if (isPublic != null) {
    updatedTemplate.setPublicTemplate(isPublic.booleanValue());
  }
  if (isFeatured != null) {
    updatedTemplate.setFeatured(isFeatured.booleanValue());
  }
  if (isExtractable != null && caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    updatedTemplate.setExtractable(isExtractable.booleanValue());
  }
 else   if (isExtractable != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    throw new InvalidParameterValueException("Only ROOT admins are allowed to modify this attribute.");
  }
  _tmpltDao.update(template.getId(),updatedTemplate);
  Long domainId=caller.getDomainId();
  if ("add".equalsIgnoreCase(operation)) {
    txn.start();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        if (permittedAccount.getId() == caller.getId()) {
          continue;
        }
        LaunchPermissionVO existingPermission=_launchPermissionDao.findByTemplateAndAccount(id,permittedAccount.getId());
        if (existingPermission == null) {
          LaunchPermissionVO launchPermission=new LaunchPermissionVO(id,permittedAccount.getId());
          _launchPermissionDao.persist(launchPermission);
        }
      }
 else {
        txn.rollback();
        throw new InvalidParameterValueException("Unable to grant a launch permission to account " + accountName + ", account not found.  "+ "No permissions updated, please verify the account names and retry.");
      }
    }
    txn.commit();
  }
 else   if ("remove".equalsIgnoreCase(operation)) {
    List<Long> accountIds=new ArrayList<Long>();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        accountIds.add(permittedAccount.getId());
      }
    }
    _launchPermissionDao.removePermissions(id,accountIds);
  }
 else   if ("reset".equalsIgnoreCase(operation)) {
    updatedTemplate=_tmpltDao.createForUpdate();
    updatedTemplate.setPublicTemplate(false);
    updatedTemplate.setFeatured(false);
    _tmpltDao.update(template.getId(),updatedTemplate);
    _launchPermissionDao.removeAllPermissions(id);
  }
  return true;
}
