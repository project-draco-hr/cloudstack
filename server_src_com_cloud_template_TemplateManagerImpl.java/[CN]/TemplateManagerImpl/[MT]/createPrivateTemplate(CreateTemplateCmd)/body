{
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  VMTemplateVO privateTemplate=null;
  Long accountId=null;
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  try {
    TemplateInfo tmplInfo=this._tmplFactory.getTemplate(templateId,DataStoreRole.Image);
    Long zoneId=null;
    if (snapshotId != null) {
      snapshot=_snapshotDao.findById(snapshotId);
      zoneId=snapshot.getDataCenterId();
    }
 else     if (volumeId != null) {
      volume=_volumeDao.findById(volumeId);
      zoneId=volume.getDataCenterId();
    }
    ZoneScope scope=new ZoneScope(zoneId);
    List<DataStore> store=this._dataStoreMgr.getImageStoresByScope(scope);
    if (store.size() > 1) {
      throw new CloudRuntimeException("muliple image data store, don't know which one to use");
    }
    AsyncCallFuture<TemplateApiResult> future=null;
    if (snapshotId != null) {
      SnapshotInfo snapInfo=this._snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Image);
      future=this._tmpltSvr.createTemplateFromSnapshotAsync(snapInfo,tmplInfo,store.get(0));
    }
 else     if (volumeId != null) {
      VolumeInfo volInfo=this._volFactory.getVolume(volumeId);
      future=this._tmpltSvr.createTemplateFromVolumeAsync(volInfo,tmplInfo,store.get(0));
    }
 else {
      throw new CloudRuntimeException("Creating private Template need to specify snapshotId or volumeId");
    }
    CommandResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        privateTemplate=null;
        s_logger.debug("Failed to create template" + result.getResult());
        throw new CloudRuntimeException("Failed to create template" + result.getResult());
      }
      VMTemplateZoneVO templateZone=new VMTemplateZoneVO(zoneId,templateId,new Date());
      this._tmpltZoneDao.persist(templateZone);
      privateTemplate=this._tmpltDao.findById(templateId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_TEMPLATE_CREATE,privateTemplate.getAccountId(),zoneId,privateTemplate.getId(),privateTemplate.getName(),null,privateTemplate.getSourceTemplateId(),privateTemplate.getSize());
      _usageEventDao.persist(usageEvent);
    }
 catch (    InterruptedException e) {
      s_logger.debug("Failed to create template",e);
      throw new CloudRuntimeException("Failed to create template",e);
    }
catch (    ExecutionException e) {
      s_logger.debug("Failed to create template",e);
      throw new CloudRuntimeException("Failed to create template",e);
    }
  }
  finally {
    if (privateTemplate == null) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      this._tmpltDao.expunge(templateId);
      if (accountId != null) {
        _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.template);
        _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(volume != null ? volume.getSize() : snapshot.getSize()));
      }
      txn.commit();
    }
  }
  if (privateTemplate != null) {
    return privateTemplate;
  }
 else {
    throw new CloudRuntimeException("Failed to create a template");
  }
}
