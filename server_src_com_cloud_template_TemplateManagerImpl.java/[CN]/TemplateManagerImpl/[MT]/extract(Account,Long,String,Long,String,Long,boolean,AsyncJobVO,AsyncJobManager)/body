{
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException("Extraction has been disabled by admin");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find " + desc + " with id "+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException("Unable to extract the " + desc + " "+ template.getName()+ " as it is a default System template");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException("Unable to extract the " + desc + " "+ template.getName()+ " as it resides on host and not on SSVM");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException("Unsupported format, could not extract the ISO");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException("Unsupported format, could not extract the template");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException("Please specify a valid zone.");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException("Unable to extract template id=" + templateId + " as it's not extractable");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null && _swiftMgr.isSwiftEnabled()) {
    SwiftTO swift=_swiftMgr.getSwiftTO(templateId);
    if (swift != null && sservers != null) {
      for (      HostVO secondaryStorageHost : sservers) {
        downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secondaryStorageHost.getName(),zoneId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
        try {
          Answer answer=_agentMgr.sendToSSVM(zoneId,cmd);
          if (answer == null || !answer.getResult()) {
            String errMsg="Failed to download template from Swift to secondary storage due to " + (answer == null ? "answer is null" : answer.getDetails());
            s_logger.warn(errMsg);
            throw new CloudRuntimeException(errMsg);
          }
          tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
          if (tmpltHostRef != null) {
            if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
              tmpltHostRef=null;
            }
 else {
              break;
            }
          }
        }
 catch (        Exception e) {
          String errMsg="Failed to download template from Swift to secondary storage due to " + e.toString();
          s_logger.warn(errMsg);
          throw new CloudRuntimeException(errMsg);
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException("The " + desc + " has not been downloaded ");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException("Please specify a valid extract Mode. Supported modes: " + Upload.Mode.FTP_UPLOAD + ", "+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase("ftp"))) {
        throw new InvalidParameterValueException("Unsupported scheme for url: " + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException("Invalid url given: " + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException("Illegal host specified in url");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException("IPV6 addresses not supported (" + hostAddr.getHostAddress() + ")");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException("Unable to resolve " + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + " upload is in progress. Please wait for some time to schedule another upload for the same");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}
