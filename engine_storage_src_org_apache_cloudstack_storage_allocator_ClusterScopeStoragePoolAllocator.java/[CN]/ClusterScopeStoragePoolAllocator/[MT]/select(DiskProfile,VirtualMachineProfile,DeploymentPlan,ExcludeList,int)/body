{
  s_logger.debug("ClusterScopeStoragePoolAllocator looking for storage pool");
  if (dskCh.useLocalStorage()) {
    return null;
  }
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  if (podId == null) {
    return null;
  }
  if (dskCh.getTags() != null && dskCh.getTags().length != 0) {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId+ " having tags:"+ Arrays.toString(dskCh.getTags()));
  }
 else {
    s_logger.debug("Looking for pools in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId);
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,dskCh.getTags());
  List<StoragePoolVO> allPools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,null);
  allPools.removeAll(pools);
  for (  StoragePoolVO pool : allPools) {
    avoid.addPool(pool.getId());
  }
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("No storage pools available for " + ServiceOffering.StorageType.shared.toString() + " volume allocation, returning");
    }
    return suitablePools;
  }
  for (  StoragePoolVO pool : pools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool storagePool=(StoragePool)dataStoreMgr.getPrimaryDataStore(pool.getId());
    if (filter(avoid,storagePool,dskCh,plan)) {
      suitablePools.add(storagePool);
    }
 else {
      avoid.addPool(pool.getId());
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("ClusterScopeStoragePoolAllocator returning " + suitablePools.size() + " suitable storage pools");
  }
  return suitablePools;
}
