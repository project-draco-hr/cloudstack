@classmethod
def setUpClass(cls):
    cls.testClient = super(TestVPC, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.mgtSvrDetails = cls.config.__dict__['mgtSvr'][0].__dict__
    cls.unsupportedHypervisor = False
    if (cls.hypervisor.lower() == 'hyperv'):
        cls._cleanup = []
        cls.unsupportedHypervisor = True
        return
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls._cleanup = [cls.service_offering]
    return
