{
  StringBuilder sb=new StringBuilder();
  final String poolName=sb.append(lbTO.getSrcIp().replace(".","_")).append('-').append(lbTO.getSrcPort()).toString();
  final String publicIP=lbTO.getSrcIp();
  final String publicPort=Integer.toString(lbTO.getSrcPort());
  final String algorithm=lbTO.getAlgorithm();
  final List<String> result=new ArrayList<String>();
  sb=new StringBuilder();
  sb.append("listen ").append(poolName).append(" ").append(publicIP).append(":").append(publicPort);
  result.add(sb.toString());
  sb=new StringBuilder();
  sb.append("\t").append("balance ").append(algorithm);
  result.add(sb.toString());
  int i=0;
  Boolean destsAvailable=false;
  final String stickinessSubRule=getLbSubRuleForStickiness(lbTO);
  final List<String> dstSubRule=new ArrayList<String>();
  final List<String> dstWithCookieSubRule=new ArrayList<String>();
  for (  final DestinationTO dest : lbTO.getDestinations()) {
    if (dest.isRevoked()) {
      continue;
    }
    sb=new StringBuilder();
    sb.append("\t").append("server ").append(poolName).append("_").append(Integer.toString(i++)).append(" ").append(dest.getDestIp()).append(":").append(dest.getDestPort()).append(" check");
    dstSubRule.add(sb.toString());
    if (stickinessSubRule != null) {
      sb.append(" cookie ").append(dest.getDestIp().replace(".","_")).append('-').append(dest.getDestPort()).toString();
      dstWithCookieSubRule.add(sb.toString());
    }
    destsAvailable=true;
  }
  Boolean httpbasedStickiness=false;
  if (stickinessSubRule != null && destsAvailable == true) {
    for (    final StickinessPolicyTO stickinessPolicy : lbTO.getStickinessPolicies()) {
      if (stickinessPolicy == null) {
        continue;
      }
      if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName()) || StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
        httpbasedStickiness=true;
      }
    }
    if (httpbasedStickiness) {
      result.addAll(dstWithCookieSubRule);
    }
 else {
      result.addAll(dstSubRule);
    }
    result.add(stickinessSubRule);
  }
 else {
    result.addAll(dstSubRule);
  }
  if (stickinessSubRule != null && !destsAvailable) {
    s_logger.warn("Haproxy stickiness policy for lb rule: " + lbTO.getSrcIp() + ":"+ lbTO.getSrcPort()+ ": Not Applied, cause:  backends are unavailable");
  }
  if (publicPort.equals(NetUtils.HTTP_PORT) && !keepAliveEnabled || httpbasedStickiness) {
    sb=new StringBuilder();
    sb.append("\t").append("mode http");
    result.add(sb.toString());
    sb=new StringBuilder();
    sb.append("\t").append("option httpclose");
    result.add(sb.toString());
  }
  result.add(blankLine);
  return result;
}
