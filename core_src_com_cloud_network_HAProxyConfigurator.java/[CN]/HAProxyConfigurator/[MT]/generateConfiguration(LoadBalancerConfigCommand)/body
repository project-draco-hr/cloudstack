{
  List<String> result=new ArrayList<String>();
  List<String> gSection=Arrays.asList(globalSection);
  gSection.set(2,"\tmaxconn " + lbCmd.maxconn);
  result.addAll(gSection);
  result.add(blankLine);
  result.addAll(Arrays.asList(defaultsSection));
  if (!lbCmd.lbStatsVisibility.equals("disabled")) {
    if (lbCmd.lbStatsVisibility.equals("global")) {
      result.add(generateStatsRule(lbCmd,"stats_on_public",lbCmd.lbStatsPublicIP));
    }
 else     if (lbCmd.lbStatsVisibility.equals("guest-network")) {
      result.add(generateStatsRule(lbCmd,"stats_on_guest",lbCmd.lbStatsGuestIP));
    }
 else     if (lbCmd.lbStatsVisibility.equals("link-local")) {
      result.add(generateStatsRule(lbCmd,"stats_on_private",lbCmd.lbStatsPrivateIP));
    }
 else     if (lbCmd.lbStatsVisibility.equals("all")) {
      result.add(generateStatsRule(lbCmd,"stats_on_public",lbCmd.lbStatsPublicIP));
      result.add(generateStatsRule(lbCmd,"stats_on_guest",lbCmd.lbStatsGuestIP));
      result.add(generateStatsRule(lbCmd,"stats_on_private",lbCmd.lbStatsPrivateIP));
    }
 else {
      StringBuilder subRule=new StringBuilder("\tstats enable\n\tstats uri     ").append(lbCmd.lbStatsUri).append("\n\tstats realm   Haproxy\\ Statistics\n\tstats auth    ").append(lbCmd.lbStatsAuth);
      result.add(subRule.toString());
    }
  }
  result.add(blankLine);
  boolean has_listener=false;
  for (  LoadBalancerTO lbTO : lbCmd.getLoadBalancers()) {
    if (lbTO.isRevoked()) {
      continue;
    }
    List<String> poolRules=getRulesForPool(lbTO);
    result.addAll(poolRules);
    has_listener=true;
  }
  result.add(blankLine);
  if (!has_listener) {
    result.addAll(Arrays.asList(defaultListen));
  }
  return result.toArray(new String[result.size()]);
}
