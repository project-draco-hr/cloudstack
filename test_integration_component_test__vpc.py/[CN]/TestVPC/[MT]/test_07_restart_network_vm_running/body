@attr(tags=['advanced', 'intervlan'])
def test_07_restart_network_vm_running(self):
    ' Test Restart VPC when there are multiple networks associated\n        '
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.account.name))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering)
    self.network_offering_no_lb = NetworkOffering.create(self.apiclient, self.services['network_offering_no_lb'], conservemode=False)
    self.network_offering_no_lb.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering_no_lb)
    self.debug(('Creating network with network offering: %s' % self.network_offering_no_lb.id))
    network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering_no_lb.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_1.id))
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network_2 = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway='10.1.2.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_2.id))
    self.debug(('deploying VMs in network: %s' % network_1.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed VM in network: %s' % network_1.id))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed VM in network: %s' % network_1.id))
    self.debug(('deploying VMs in network: %s' % network_2.name))
    vm_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_2.id)])
    self.debug(('Deployed VM in network: %s' % network_2.id))
    vm_4 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_2.id)])
    self.debug(('Deployed VM in network: %s' % network_2.id))
    self.debug(('Associating public IP for network: %s' % network_1.name))
    public_ip_1 = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network_1.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_1.ipaddress.ipaddress, network_1.id)))
    nat_rule = NATRule.create(self.apiclient, vm_1, self.services['natrule'], ipaddressid=public_ip_1.ipaddress.id, openfirewall=False, networkid=network_1.id, vpcid=vpc.id)
    self.debug('Adding NetwrokACl rules to make NAT rule accessible')
    nwacl_nat = NetworkACL.create(self.apiclient, networkid=network_1.id, services=self.services['natrule'], traffictype='Ingress')
    self.debug(('Associating public IP for network: %s' % network_1.name))
    public_ip_2 = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network_1.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_2.ipaddress.ipaddress, network_1.id)))
    self.debug(('Enabling static NAT for IP: %s' % public_ip_2.ipaddress.ipaddress))
    try:
        StaticNATRule.enable(self.apiclient, ipaddressid=public_ip_2.ipaddress.id, virtualmachineid=vm_2.id, networkid=network_1.id)
        self.debug(('Static NAT enabled for IP: %s' % public_ip_2.ipaddress.ipaddress))
    except Exception as e:
        self.fail(('Failed to enable static NAT on IP: %s - %s' % (public_ip_2.ipaddress.ipaddress, e)))
    public_ips = PublicIPAddress.list(self.apiclient, networkid=network_1.id, listall=True, isstaticnat=True, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(public_ips, list), True, 'List public Ip for network should list the Ip addr')
    self.assertEqual(public_ips[0].ipaddress, public_ip_2.ipaddress.ipaddress, 'List public Ip for network should list the Ip addr')
    self.debug(('Associating public IP for network: %s' % vpc.name))
    public_ip_3 = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network_2.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_3.ipaddress.ipaddress, network_2.id)))
    self.debug(('Creating LB rule for IP address: %s' % public_ip_3.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip_3.ipaddress.id, accountid=self.account.account.name, networkid=network_2.id, vpcid=vpc.id, domainid=self.account.account.domainid)
    self.debug(('Adding virtual machines %s and %s to LB rule' % (vm_3.name, vm_4.name)))
    lb_rule.assign(self.apiclient, [vm_3, vm_4])
    self.debug('Adding NetwrokACl rules to make PF and LB accessible')
    nwacl_lb = NetworkACL.create(self.apiclient, networkid=network_2.id, services=self.services['lbrule'], traffictype='Ingress')
    self.debug('Adding Egress rules to network %s and %s to allow access to internet')
    nwacl_internet_1 = NetworkACL.create(self.apiclient, networkid=network_1.id, services=self.services['http_rule'], traffictype='Egress')
    nwacl_internet_2 = NetworkACL.create(self.apiclient, networkid=network_2.id, services=self.services['http_rule'], traffictype='Egress')
    self.debug('Checking if we can SSH into VM_1?')
    try:
        ssh_1 = vm_1.get_ssh_client(ipaddress=public_ip_1.ipaddress.ipaddress, reconnect=True, port=self.services['natrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_1.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_1.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    self.debug('Checking if we can SSH into VM_2?')
    try:
        ssh_2 = vm_2.get_ssh_client(ipaddress=public_ip_2.ipaddress.ipaddress, reconnect=True, port=self.services['natrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_2.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_2.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    self.debug('Checking if we can SSH into VM using LB rule?')
    try:
        ssh_3 = vm_3.get_ssh_client(ipaddress=public_ip_3.ipaddress.ipaddress, reconnect=True, port=self.services['lbrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_3.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_3.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    return
