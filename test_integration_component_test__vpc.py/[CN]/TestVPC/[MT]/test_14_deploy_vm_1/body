@attr(tags=['advanced', 'intervlan'], required_hardware='false')
def test_14_deploy_vm_1(self):
    ' Test vm deploy in network by a user where VPC was created without account/domain ID\n        '
    user = Account.create(self.apiclient, self.services['account'])
    self.debug(('Created account: %s' % user.name))
    self.cleanup.append(user)
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % user.name))
    userapiclient = self.testClient.getUserApiClient(UserName=user.name, DomainName=user.domain, type=0)
    vpc = VPC.create(userapiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self.cleanup.append(self.network_offering)
    gateway = vpc.cidr.split('/')[0]
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(userapiclient, self.services['network'], networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway=gateway, vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network.id))
    virtual_machine = VirtualMachine.create(userapiclient, self.services['virtual_machine'], serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    self.assertNotEqual(virtual_machine, None, 'VM creation in the network failed')
    return
