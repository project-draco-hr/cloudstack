@attr(tags=['advanced', 'intervlan', 'selfservice'])
def test_09_vpc_create(self):
    ' Test to create vpc and verify VPC state, VR and SourceNatIP\n        '
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    self.debug('Verify if the VPC was created with enabled state')
    self.assertEqual(vpc.state, 'Enabled', ('VPC after creation should be in enabled state but the state is %s' % vpc.state))
    self.debug('Verify if the Router has started')
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List Routers should return a valid list')
    self.assertEqual(routers[0].state, 'Running', 'Router should be in running state')
    src_nat_list = PublicIPAddress.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True, issourcenat=True, vpcid=vpc.id)
    self.assertEqual(src_nat_list[0].ipaddress, routers[0].publicip, 'Source Nat IP address was not allocated to VR')
