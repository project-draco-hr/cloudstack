@attr(tags=['advanced', 'intervlan'])
def test_20_update_vpc_name_display_text(self):
    ' Test to verify updation of vpc name and display text\n        '
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering)
    gateway = vpc.cidr.split('/')[0]
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway=gateway, vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network.id))
    new_name = 'New VPC'
    new_display_text = 'New display text'
    vpc.update(self.apiclient, name=new_name, displaytext=new_display_text)
    vpc_networks = VPC.list(self.apiclient, id=network.id)
    self.assertEqual(isinstance(vpc_networks, list), True, 'List VPC network should return a valid list')
    self.assertEqual(vpc_networks[0].name, new_name, 'Updation of VPC name failed.')
    self.assertEqual(vpc_networks[0].displaytext, new_display_text, 'Updation of VPC display text failed.')
