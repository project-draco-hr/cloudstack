@attr(tags=['advanced', 'intervlan', 'selfservice'])
def test_01_list_vpc_apis(self):
    ' Test list VPC APIs\n        '
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    vpc_1 = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc_1)
    self.services['vpc']['cidr'] = '10.1.46.1/16'
    vpc_2 = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc_2)
    self.debug('Check list VPC API by Name?')
    vpcs = VPC.list(self.apiclient, name=vpc_1.name, listall=True)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC shall return a valid resposne')
    vpc = vpcs[0]
    self.assertEqual(vpc.name, vpc_1.name, 'VPC name should match with the existing one')
    self.debug('Check list VPC API by displayText?')
    vpcs = VPC.list(self.apiclient, displaytext=vpc_1.displaytext, listall=True)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC shall return a valid resposne')
    vpc = vpcs[0]
    self.assertEqual(vpc.displaytext, vpc_1.displaytext, 'VPC displaytext should match with the existing one')
    self.debug('Check list VPC API by cidr?')
    vpcs = VPC.list(self.apiclient, cidr=vpc_2.cidr, listall=True)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC shall return a valid resposne')
    vpc = vpcs[0]
    self.assertEqual(vpc.cidr, vpc_2.cidr, 'VPC cidr should match with the existing one')
    self.debug('Validating list VPC by Id')
    self.validate_vpc_network(vpc_1)
    self.debug('Validating list VPC by vpcofferingId')
    vpcs = VPC.list(self.apiclient, vpcofferingid=self.vpc_off.id, listall=True)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC by vpcofferingId should return a valid response')
    self.debug(('Length of list VPC response: %s' % len(vpcs)))
    self.assertEqual(len(vpcs), 2, 'List VPC should return 2 enabled VPCs')
    for vpc in vpcs:
        self.assertEqual(vpc.vpcofferingid, self.vpc_off.id, 'VPC offering ID should match with that of resposne')
    self.debug('Validating list VPC by supportedservices')
    vpcs = VPC.list(self.apiclient, supportedservices='Vpn,Dhcp,Dns,SourceNat,PortForwarding,Lb,UserData,StaticNat,NetworkACL', listall=True, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC by vpcofferingId should return a valid response')
    for vpc in vpcs:
        self.assertIn(vpc.id, [vpc_1.id, vpc_2.id], 'VPC offering ID should match with that of resposne')
    self.debug('Validating list VPC by restart required')
    vpcs = VPC.list(self.apiclient, restartrequired=True, listall=True, account=self.account.name, domainid=self.account.domainid)
    if (vpcs is not None):
        for vpc in vpcs:
            self.assertEqual(vpc.restartrequired, True, 'RestartRequired should be set as True')
    self.debug('Validating list VPC by restart required')
    vpcs = VPC.list(self.apiclient, restartrequired=False, listall=True, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(vpcs, list), True, 'List VPC by vpcofferingId should return a valid response')
    if (vpcs is not None):
        for vpc in vpcs:
            self.assertEqual(vpc.restartrequired, False, 'RestartRequired should be set as False')
    return
