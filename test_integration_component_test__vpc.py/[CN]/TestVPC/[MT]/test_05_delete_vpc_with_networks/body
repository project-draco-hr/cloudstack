@attr(tags=['advanced', 'intervlan', 'selfservice'])
def test_05_delete_vpc_with_networks(self):
    ' Test delete VPC having networks\n        '
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self.cleanup.append(self.network_offering)
    gateway = vpc.cidr.split('/')[0]
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway=gateway, vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_1.id))
    self.network_offering_no_lb = NetworkOffering.create(self.apiclient, self.services['network_offering_no_lb'], conservemode=False)
    self.network_offering_no_lb.update(self.apiclient, state='Enabled')
    self.cleanup.append(self.network_offering_no_lb)
    gateway = '10.1.2.1'
    self.debug(('Creating network with network offering: %s' % self.network_offering_no_lb.id))
    network_2 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering_no_lb.id, zoneid=self.zone.id, gateway=gateway, vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_2.id))
    self.debug('Deleting the VPC with no network')
    response = vpc.delete(self.apiclient)
    self.assertEqual(response.errorcode, ERROR_CODE_530, ('Job should                          have failed with error code %s, instead got response                          %s' % (ERROR_CODE_530, str(response))))
    self.debug('Delete VPC failed as there are still networks in VPC')
    self.debug('Deleting the networks in the VPC')
    try:
        network_1.delete(self.apiclient)
        network_2.delete(self.apiclient)
    except Exception as e:
        self.fail(('failed to delete the VPC networks: %s' % e))
    self.debug('Now trying to delete VPC')
    try:
        vpc.delete(self.apiclient)
    except Exception as e:
        self.fail(('Delete to restart VPC network - %s' % e))
    self.debug('Check if the VPC offering is deleted successfully?')
    vpcs = VPC.list(self.apiclient, id=vpc.id)
    self.assertEqual(vpcs, None, 'List VPC offerings should not return anything')
    self.debug('Waiting for network.gc.interval to cleanup network resources')
    interval = list_configurations(self.apiclient, name='network.gc.interval')
    wait = list_configurations(self.apiclient, name='network.gc.wait')
    time.sleep((int(interval[0].value) + int(wait[0].value)))
    self.debug('Check if VR is deleted or not?')
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(routers, None, 'List Routers for the account should not return any response')
    return
