@attr(tags=['advanced', 'intervlan'])
def test_10_nonoverlaping_cidrs(self):
    ' Test creation of multiple VPCs with non-overlapping CIDRs\n        '
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('Creating a VPC network in the account: %s' % self.account.name))
    vpc_1 = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc_1)
    self.services['vpc']['cidr'] = '10.2.1.1/16'
    self.debug(('Creating a non-overlapping VPC network in the account: %s' % self.account.name))
    vpc_2 = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc_2)
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('Creating a overlapping VPC network in the account: %s' % self.account.name))
    try:
        vpc_3 = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
        self.debug(('%s' % vpc_3))
    except Exception as e:
        self.debug(('%s' % e))
        pass
    else:
        assert 'VPC created with overlapping CIDR'
    return
