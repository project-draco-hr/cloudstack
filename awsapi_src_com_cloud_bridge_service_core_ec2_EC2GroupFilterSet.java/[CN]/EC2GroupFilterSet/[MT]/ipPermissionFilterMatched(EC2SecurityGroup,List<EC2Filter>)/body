{
  EC2IpPermission[] permissionSet=sg.getIpPermissionSet();
  for (  EC2IpPermission perm : permissionSet) {
    boolean matched=false;
    for (    EC2Filter filter : ipPermissionFilterSet) {
      String filterName=filter.getName();
      String[] valueSet=filter.getValueSet();
      if (filterName.equalsIgnoreCase("ip-permission.cidr"))       matched=containsString(perm.getCIDR(),valueSet);
 else       if (filterName.equalsIgnoreCase("ip-permission.from-port")) {
        if (perm.getProtocol().equalsIgnoreCase("icmp"))         matched=containsString(perm.getIcmpType(),valueSet);
 else         matched=containsString(perm.getFromPort().toString(),valueSet);
      }
 else       if (filterName.equalsIgnoreCase("ip-permission.to-port")) {
        if (perm.getProtocol().equalsIgnoreCase("icmp"))         matched=containsString(perm.getIcmpCode(),valueSet);
 else         matched=containsString(perm.getToPort().toString(),valueSet);
      }
 else       if (filterName.equalsIgnoreCase("ip-permission.protocol"))       matched=containsString(perm.getProtocol(),valueSet);
 else       if (filterName.equalsIgnoreCase("ip-permission.group-name")) {
        EC2SecurityGroup[] userSet=perm.getUserSet();
        for (        EC2SecurityGroup user : userSet) {
          if (containsString(user.getName(),valueSet)) {
            matched=true;
            break;
          }
        }
      }
 else       if (filterName.equalsIgnoreCase("ip-permission.user-id")) {
        EC2SecurityGroup[] userSet=perm.getUserSet();
        for (        EC2SecurityGroup user : userSet) {
          if (containsString(user.getAccountName(),valueSet)) {
            matched=true;
            break;
          }
        }
      }
      if (!matched)       break;
    }
    if (matched)     return true;
  }
  return false;
}
