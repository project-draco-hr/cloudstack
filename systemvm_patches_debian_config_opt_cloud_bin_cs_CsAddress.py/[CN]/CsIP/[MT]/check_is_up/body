def check_is_up(self):
    ' Ensure device is up '
    state_commands = {'router': 'ip addr | grep eth0 | grep inet | wc -l | xargs bash -c  \'if [ $0 == 2 ]; then echo "MASTER"; else echo "BACKUP"; fi\'', 'vpcrouter': 'ip addr | grep eth1 | grep state | awk \'{print $9;}\' | xargs bash -c \'if [ $0 == "UP" ]; then echo "MASTER"; else echo "BACKUP"; fi\'', }
    cmd = ("ip link show %s | grep 'state DOWN'" % self.getDevice())
    for i in CsHelper.execute(cmd):
        if (' DOWN ' in i):
            cmd2 = ('ip link set %s up' % self.getDevice())
            if (self.cl.is_redundant() and self.is_public()):
                state_cmd = state_commands[self.cl.get_type()]
                logging.info(('Check state command => %s' % state_cmd))
                state = CsHelper.execute(state_cmd)[0]
                logging.info(('Route state => %s' % state))
                if ((self.getDevice() not in PUBLIC_INTERFACE) and (state == 'MASTER')):
                    CsHelper.execute(cmd2)
            else:
                CsHelper.execute(cmd2)
