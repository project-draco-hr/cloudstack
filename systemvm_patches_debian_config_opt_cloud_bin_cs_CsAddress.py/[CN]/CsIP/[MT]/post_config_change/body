def post_config_change(self, method):
    route = CsRoute(self.dev)
    route.routeTable()
    route.add(self.address, method)
    if (self.get_type() in ['guest']):
        devChain = ('ACL_INBOUND_%s' % self.dev)
        CsDevice(self.dev, self.config).configure_rp()
        self.fw.append(['nat', 'front', ('-A POSTROUTING -s %s -o %s -j SNAT --to-source %s' % (self.address['network'], self.dev, self.address['public_ip']))])
        self.fw.append(['mangle', 'front', ('-A %s -j ACCEPT' % devChain)])
        self.fw.append(['', 'front', ('-A FORWARD -o %s -d %s -j %s' % (self.dev, self.address['network'], devChain))])
        self.fw.append(['', '', ('-A %s -j DROP' % devChain)])
        self.fw.append(['mangle', '', ('-A PREROUTING -m state --state NEW -i %s -s %s ! -d %s/32 -j %s' % (self.dev, self.address['network'], self.address['public_ip'], devChain))])
        dns = CsDnsmasq(self)
        dns.add_firewall_rules()
        app = CsApache(self)
        app.setup()
        pwdsvc = CsPasswdSvc(self).setup()
    elif (self.get_type() == 'public'):
        if (self.address['source_nat'] == True):
            if (self.cl.get_type() == 'vpcrouter'):
                vpccidr = self.cl.get_vpccidr()
                self.fw.append(['filter', '', ('-A FORWARD -s %s ! -d %s -j ACCEPT' % (vpccidr, vpccidr))])
                self.fw.append(['nat', '', ('-A POSTROUTING -j SNAT -o %s --to-source %s' % (self.dev, self.address['public_ip']))])
            elif (self.cl.get_type() == 'router'):
                logging.error('Not able to setup sourcenat for a regular router yet')
            else:
                logging.error(('Unable to process source nat configuration for router of type %s' % type))
    route.flush()
