{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("UpdateStoragePoolCmd Params @ " + params.toString());
  }
  Long poolId=(Long)params.get(BaseCmd.Properties.ID.getName());
  String tags=(String)params.get(BaseCmd.Properties.TAGS.getName());
  StoragePoolVO storagePool=null;
  try {
    storagePool=getManagementServer().updateStoragePool(poolId,tags);
  }
 catch (  IllegalArgumentException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
  }
  s_logger.debug("Successfully updated storagePool " + storagePool.toString());
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(storagePool.getId())));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),storagePool.getDataCenterId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().getDataCenterBy(storagePool.getDataCenterId()).getName()));
  if (storagePool.getPodId() != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_ID.getName(),storagePool.getPodId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_NAME.getName(),getManagementServer().getPodBy(storagePool.getPodId()).getName()));
  }
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),storagePool.getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.IP_ADDRESS.getName(),storagePool.getHostAddress()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PATH.getName(),storagePool.getPath()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(storagePool.getCreated())));
  if (storagePool.getPoolType() != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),storagePool.getPoolType().toString()));
  }
  if (storagePool.getClusterId() != null) {
    ClusterVO cluster=getManagementServer().findClusterById(storagePool.getClusterId());
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_ID.getName(),cluster.getId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_NAME.getName(),cluster.getName()));
  }
  StorageStats stats=getManagementServer().getStoragePoolStatistics(storagePool.getId());
  long capacity=storagePool.getCapacityBytes();
  long available=storagePool.getAvailableBytes();
  long used=capacity - available;
  if (stats != null) {
    used=stats.getByteUsed();
    available=capacity - used;
  }
  s_logger.debug("Successfully recieved the storagePool statistics. TotalDiskSize - " + capacity + " AllocatedDiskSize - "+ used);
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_TOTAL.getName(),Long.valueOf(storagePool.getCapacityBytes()).toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_ALLOCATED.getName(),Long.valueOf(used).toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),getManagementServer().getStoragePoolTags(storagePool.getId())));
  List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
  embeddedObject.add(new Pair<String,Object>("storagepool",new Object[]{returnValues}));
  return embeddedObject;
}
