{
  StoragePoolVO pool=(StoragePoolVO)getResponseObject();
  StoragePoolResponse response=new StoragePoolResponse();
  response.setId(pool.getId());
  response.setZoneId(pool.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(pool.getDataCenterId()).getName());
  if (pool.getPodId() != null) {
    response.setPodId(pool.getPodId());
    response.setPodName(ApiDBUtils.findPodById(pool.getPodId()).getName());
  }
  response.setName(pool.getName());
  response.setIpAddress(pool.getHostAddress());
  response.setPath(pool.getPath());
  response.setCreated(pool.getCreated());
  if (pool.getPoolType() != null) {
    response.setType(pool.getPoolType().toString());
  }
  if (pool.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(pool.getClusterId());
    response.setClusterId(cluster.getId());
    response.setClusterName(cluster.getName());
  }
  StorageStats stats=ApiDBUtils.getStoragePoolStatistics(pool.getId());
  long capacity=pool.getCapacityBytes();
  long available=pool.getAvailableBytes();
  long used=capacity - available;
  if (stats != null) {
    used=stats.getByteUsed();
    available=capacity - used;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Successfully recieved the storagePool statistics. TotalDiskSize - " + capacity + " AllocatedDiskSize - "+ used);
  }
  response.setDiskSizeTotal(pool.getCapacityBytes());
  response.setDiskSizeAllocated(used);
  response.setTags(ApiDBUtils.getStoragePoolTags(pool.getId()));
  response.setResponseName(getName());
  return response;
}
