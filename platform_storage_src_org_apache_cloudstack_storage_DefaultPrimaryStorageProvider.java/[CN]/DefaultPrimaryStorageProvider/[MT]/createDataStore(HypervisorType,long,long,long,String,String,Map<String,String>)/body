{
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException("invalide url" + url);
  }
  String protocol=uri.getScheme();
  if (protocol == null) {
    throw new InvalidParameterValueException("the protocol can't be null");
  }
  Map<String,DataStoreConfigurator> dscs=_supportedProtocols.get(hypervisor);
  if (dscs.isEmpty()) {
    throw new InvalidParameterValueException("Doesn't support this hypervisor");
  }
  DataStoreConfigurator dsc=dscs.get(protocol);
  if (dsc == null) {
    throw new InvalidParameterValueException("Doesn't support this protocol");
  }
  Map<String,String> configs=dsc.getConfigs(uri,extra);
  dsc.validate(configs);
  StoragePoolVO spool=(StoragePoolVO)dsc.getStoragePool(configs);
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException("unable to find zone by id " + dcId);
  }
  StoragePoolVO existingPool=_storagePoolDao.findPoolByUUID(spool.getUuid());
  if (existingPool != null) {
    throw new InvalidParameterValueException("The same storage pool was added already");
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,"id");
  spool.setId(poolId);
  spool.setDataCenterId(dcId);
  spool.setPodId(podId);
  spool.setName(name);
  spool.setClusterId(clusterId);
  spool.setStatus(StoragePoolStatus.Up);
  spool=_storagePoolDao.persist(spool,extra);
  DataStore ds=dsc.getDataStore(spool);
  return ds;
}
