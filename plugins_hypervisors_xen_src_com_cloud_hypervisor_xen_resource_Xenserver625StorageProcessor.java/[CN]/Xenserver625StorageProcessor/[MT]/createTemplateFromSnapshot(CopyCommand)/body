{
  Connection conn=hypervisorResource.getConnection();
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  int wait=cmd.getWait();
  SnapshotObjectTO srcObj=(SnapshotObjectTO)srcData;
  TemplateObjectTO destObj=(TemplateObjectTO)destData;
  NfsTO srcStore=(NfsTO)srcObj.getDataStore();
  NfsTO destStore=(NfsTO)destObj.getDataStore();
  URI srcUri=null;
  URI destUri=null;
  try {
    srcUri=new URI(srcStore.getUrl());
    destUri=new URI(destStore.getUrl());
  }
 catch (  Exception e) {
    s_logger.debug("incorrect url",e);
    return new CopyCmdAnswer("incorrect url" + e.toString());
  }
  String srcPath=srcObj.getPath();
  int index=srcPath.lastIndexOf("/");
  String srcDir=srcPath.substring(0,index);
  String destDir=destObj.getPath();
  SR srcSr=null;
  SR destSr=null;
  VDI destVdi=null;
  boolean result=false;
  try {
    srcSr=createFileSr(conn,srcUri.getHost() + ":" + srcUri.getPath(),srcDir);
    String destNfsPath=destUri.getHost() + ":" + destUri.getPath();
    String localDir="/var/cloud_mount/" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());
    mountNfs(conn,destUri.getHost() + ":" + destUri.getPath(),localDir);
    makeDirectory(conn,localDir + "/" + destDir);
    destSr=createFileSR(conn,localDir + "/" + destDir);
    String nameLabel="cloud-" + UUID.randomUUID().toString();
    String[] parents=srcObj.getParents();
    List<VDI> snapshotChains=new ArrayList<VDI>();
    if (parents != null) {
      for (int i=0; i < parents.length; i++) {
        String snChainPath=parents[i];
        String uuid=getSnapshotUuid(snChainPath);
        VDI chain=VDI.getByUuid(conn,uuid);
        snapshotChains.add(chain);
      }
    }
    String snapshotUuid=getSnapshotUuid(srcPath);
    VDI snapshotVdi=VDI.getByUuid(conn,snapshotUuid);
    snapshotChains.add(snapshotVdi);
    long templateVirtualSize=snapshotChains.get(0).getVirtualSize(conn);
    destVdi=createVdi(conn,nameLabel,destSr,templateVirtualSize);
    String destVdiUuid=destVdi.getUuid(conn);
    for (    VDI snapChain : snapshotChains) {
      Task task=snapChain.copyAsync(conn,null,null,destVdi);
      hypervisorResource.waitForTask(conn,task,1000,wait * 1000);
      hypervisorResource.checkForSuccess(conn,task);
      task.destroy(conn);
    }
    destVdi=VDI.getByUuid(conn,destVdiUuid);
    String templatePath=destDir + "/" + destVdiUuid+ ".vhd";
    templatePath=templatePath.replaceAll("//","/");
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(templatePath);
    newTemplate.setFormat(Storage.ImageFormat.VHD);
    newTemplate.setSize(destVdi.getVirtualSize(conn));
    newTemplate.setPhysicalSize(destVdi.getPhysicalUtilisation(conn));
    newTemplate.setName(destVdiUuid);
    result=true;
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Exception e) {
    s_logger.error("Failed create template from snapshot",e);
    return new CopyCmdAnswer("Failed create template from snapshot " + e.toString());
  }
 finally {
    if (!result) {
      if (destVdi != null) {
        try {
          destVdi.destroy(conn);
        }
 catch (        Exception e) {
          s_logger.debug("Clean up left over on dest storage failed: ",e);
        }
      }
    }
    if (destSr != null) {
      hypervisorResource.removeSR(conn,destSr);
    }
    if (srcSr != null) {
      hypervisorResource.removeSR(conn,srcSr);
    }
  }
}
