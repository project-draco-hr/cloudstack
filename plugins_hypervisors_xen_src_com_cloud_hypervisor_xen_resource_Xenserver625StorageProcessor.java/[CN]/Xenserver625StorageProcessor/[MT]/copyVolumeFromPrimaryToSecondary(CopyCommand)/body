{
  Connection conn=hypervisorResource.getConnection();
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  int wait=cmd.getWait();
  DataStoreTO destStore=destVolume.getDataStore();
  if (destStore instanceof NfsTO) {
    SR secondaryStorage=null;
    Task task=null;
    try {
      NfsTO nfsStore=(NfsTO)destStore;
      URI uri=new URI(nfsStore.getUrl());
      if (!hypervisorResource.createSecondaryStorageFolder(conn,uri.getHost() + ":" + uri.getPath(),destVolume.getPath())) {
        throw new InternalErrorException("Failed to create the volume folder.");
      }
      secondaryStorage=createFileSr(conn,uri.getHost() + ":" + uri.getPath(),destVolume.getPath());
      VDI srcVdi=getVDIbyUuid(conn,srcVolume.getPath());
      task=srcVdi.copyAsync(conn,secondaryStorage,null,null);
      hypervisorResource.waitForTask(conn,task,1000,wait * 1000);
      hypervisorResource.checkForSuccess(conn,task);
      VDI destVdi=Types.toVDI(task,conn);
      String destVolumeUUID=destVdi.getUuid(conn);
      VolumeObjectTO newVol=new VolumeObjectTO();
      newVol.setPath(destVolume.getPath() + File.separator + destVolumeUUID+ ".vhd");
      newVol.setSize(srcVolume.getSize());
      return new CopyCmdAnswer(newVol);
    }
 catch (    Exception e) {
      s_logger.debug("Failed to copy volume to secondary: " + e.toString());
      return new CopyCmdAnswer("Failed to copy volume to secondary: " + e.toString());
    }
 finally {
      if (task != null) {
        try {
          task.destroy(conn);
        }
 catch (        Exception e) {
          s_logger.warn("unable to destroy task(" + task.toWireString() + ") due to "+ e.toString());
        }
      }
      hypervisorResource.removeSR(conn,secondaryStorage);
    }
  }
  return new CopyCmdAnswer("unsupported protocol");
}
