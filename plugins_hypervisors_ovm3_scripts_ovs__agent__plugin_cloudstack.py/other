import logging
import time
import re
import os.path
import paramiko
import subprocess
import socket
from xen.util.xmlrpcclient import ServerProxy
from xmlrpclib import Error
from xen.xend import XendClient
from agent.api.base import Agent
from agent.lib.settings import get_api_version
from xen.xend import sxp
if (__name__ == '__main__'):
    from distutils.sysconfig import get_python_lib
    from agent.target.api import MODULES
    from shutil import copyfile
    import inspect, os, hashlib, getopt, sys
    exist = False
    agentpath = ('%s/agent' % get_python_lib(1))
    api = ('%s/target/api.py' % agentpath)
    modpath = ('%s/api' % agentpath)
    ssl = 'disable'
    port = 0
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'sp::', ['port=', 'ssl='])
    except getopt.GetoptError:
        print 'Available Options: --port=, --ssl='
        sys.exit()
    for (o, a) in opts:
        if (o in ('-s', '--ssl')):
            ssl = a
        if (o in ('-p', '--port')):
            port = int(a)
    cs = CloudStack()
    for mod in MODULES:
        if re.search(cs.getName(), ('%s' % mod)):
            exist = True
    if (not exist):
        if os.path.isfile(api):
            import fileinput
            for line in fileinput.FileInput(api, inplace=1):
                line = line.rstrip('\n')
                if re.search('import common', line):
                    line = ('%s, cloudstack' % line)
                if re.search('MODULES', line):
                    n = cs.getName()
                    line = ('%s\n\t%s.%s,' % (line, n.lower(), n))
                print line
            print ('Api inserted, %s in %s' % (cs.getName(), api))
        else:
            print ('Api missing, %s' % api)
    else:
        print ('Api present, %s in %s' % (cs.getName(), api))
    modfile = ('%s/%s.py' % (modpath, cs.getName().lower()))
    me = os.path.abspath(__file__)
    if os.path.isfile(modfile):
        if (hashlib.md5(open(me).read()).hexdigest() != hashlib.md5(open(modfile).read()).hexdigest()):
            print ('Module copy, %s' % modfile)
            copyfile(me, modfile)
        else:
            print ('Module correct, %s' % modfile)
    else:
        print ('Module copy, %s' % modfile)
        copyfile(me, modfile)
    if ssl:
        ovsAgentSetSsl(ssl)
    if (port > 1024):
        ovsAgentSetPort(port)
    ovsRestartAgent()
