@classmethod
def setUpClass(cls):
    cloudstackTestClient = super(TestISO, cls).getClsTestClient()
    cls.api_client = cloudstackTestClient.getApiClient()
    cls.services = cloudstackTestClient.getConfigParser().parsedDict
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.services['domainid'] = cls.domain.id
    cls.services['iso_1']['zoneid'] = cls.zone.id
    cls.services['iso_2']['zoneid'] = cls.zone.id
    cls.services['sourcezoneid'] = cls.zone.id
    cmd = listZones.listZonesCmd()
    cls.zones = cls.api_client.listZones(cmd)
    if (not isinstance(cls.zones, list)):
        raise Exception('Failed to find zones.')
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.services['account'] = cls.account.name
    ostypes = list_os_types(cls.api_client, description=cls.services['ostype'])
    if (not isinstance(ostypes, list)):
        raise unittest.SkipTest('OSTypeId for given description not found')
    cls.services['iso_1']['ostypeid'] = ostypes[0].id
    cls.services['iso_2']['ostypeid'] = ostypes[0].id
    cls.services['ostypeid'] = ostypes[0].id
    cls.iso_1 = Iso.create(cls.api_client, cls.services['iso_1'], account=cls.account.name, domainid=cls.account.domainid)
    try:
        cls.iso_1.download(cls.api_client)
    except Exception as e:
        raise Exception(('Exception while downloading ISO %s: %s' % (cls.iso_1.id, e)))
    cls.iso_2 = Iso.create(cls.api_client, cls.services['iso_2'], account=cls.account.name, domainid=cls.account.domainid)
    try:
        cls.iso_2.download(cls.api_client)
    except Exception as e:
        raise Exception(('Exception while downloading ISO %s: %s' % (cls.iso_2.id, e)))
    cls._cleanup = [cls.account]
    return
