{
  final String vmName="small";
  final String uuid="206b21a7-c6ec-40e2-b5e2-f861b9612f04";
  final Connection conn=Mockito.mock(Connection.class);
  final VirtualMachineTO vmSpec=Mockito.mock(VirtualMachineTO.class);
  final VolumeTO vol1=Mockito.mock(VolumeTO.class);
  final VolumeTO vol2=Mockito.mock(VolumeTO.class);
  final StorageFilerTO storage1=Mockito.mock(StorageFilerTO.class);
  final StorageFilerTO storage2=Mockito.mock(StorageFilerTO.class);
  final Map<VolumeTO,StorageFilerTO> volumeToFiler=new HashMap<VolumeTO,StorageFilerTO>();
  volumeToFiler.put(vol1,storage1);
  volumeToFiler.put(vol2,storage2);
  final NicTO nicTO1=Mockito.mock(NicTO.class);
  final NicTO nicTO2=Mockito.mock(NicTO.class);
  final NicTO nicTO3=Mockito.mock(NicTO.class);
  final NicTO[] nicTOs={nicTO1,nicTO2,nicTO3};
  final XsLocalNetwork nativeNetworkForTraffic=Mockito.mock(XsLocalNetwork.class);
  final Network network=Mockito.mock(Network.class);
  final XsHost xsHost=Mockito.mock(XsHost.class);
  final Network nw1=Mockito.mock(Network.class);
  final Network nw2=Mockito.mock(Network.class);
  final Network nw3=Mockito.mock(Network.class);
  final SR sr1=Mockito.mock(SR.class);
  final SR sr2=Mockito.mock(SR.class);
  final MigrateWithStorageReceiveCommand migrateStorageCommand=new MigrateWithStorageReceiveCommand(vmSpec,volumeToFiler);
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(xenServer610Resource.getConnection()).thenReturn(conn);
  when(vmSpec.getName()).thenReturn(vmName);
  when(vmSpec.getNics()).thenReturn(nicTOs);
  when(storage1.getUuid()).thenReturn(uuid);
  when(storage2.getUuid()).thenReturn(uuid);
  when(xenServer610Resource.getStorageRepository(conn,storage1.getUuid())).thenReturn(sr1);
  when(xenServer610Resource.getStorageRepository(conn,storage2.getUuid())).thenReturn(sr2);
  try {
    when(xenServer610Resource.getNetwork(conn,nicTO1)).thenReturn(nw1);
    when(xenServer610Resource.getNetwork(conn,nicTO2)).thenReturn(nw2);
    when(xenServer610Resource.getNetwork(conn,nicTO3)).thenReturn(nw3);
    when(xenServer610Resource.getNativeNetworkForTraffic(conn,TrafficType.Storage,null)).thenReturn(nativeNetworkForTraffic);
    when(nativeNetworkForTraffic.getNetwork()).thenReturn(network);
    when(xenServer610Resource.getHost()).thenReturn(xsHost);
    when(xsHost.getUuid()).thenReturn(uuid);
  }
 catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(migrateStorageCommand,xenServer610Resource);
  verify(xenServer610Resource,times(1)).getConnection();
  try {
    verify(xenServer610Resource,times(1)).getNetwork(conn,nicTO1);
    verify(xenServer610Resource,times(1)).getNetwork(conn,nicTO2);
    verify(xenServer610Resource,times(1)).getNetwork(conn,nicTO3);
    verify(xenServer610Resource,times(1)).getNativeNetworkForTraffic(conn,TrafficType.Storage,null);
    verify(nativeNetworkForTraffic,times(1)).getNetwork();
    verify(xenServer610Resource,times(1)).getHost();
    verify(xsHost,times(1)).getUuid();
  }
 catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  assertFalse(answer.getResult());
}
