{
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(BootloaderType.HVM);
  Map<String,String> details=to.getDetails();
  if (details == null)   details=new HashMap<String,String>();
  Type vmType=vm.getType();
  boolean userVm=!(vmType.equals(VirtualMachine.Type.DomainRouter) || vmType.equals(VirtualMachine.Type.ConsoleProxy) || vmType.equals(VirtualMachine.Type.SecondaryStorageVm));
  String nicDeviceType=details.get(VmDetailConstants.NIC_ADAPTER);
  if (!userVm) {
    if (nicDeviceType == null) {
      details.put(VmDetailConstants.NIC_ADAPTER,_vmwareMgr.getSystemVMDefaultNicAdapterType());
    }
 else {
      try {
        VirtualEthernetCardType.valueOf(nicDeviceType);
      }
 catch (      Exception e) {
        s_logger.warn("Invalid NIC device type " + nicDeviceType + " is specified in VM details, switch to default E1000");
        details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
      }
    }
  }
 else {
    if (nicDeviceType == null) {
      details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
    }
 else {
      try {
        VirtualEthernetCardType.valueOf(nicDeviceType);
      }
 catch (      Exception e) {
        s_logger.warn("Invalid NIC device type " + nicDeviceType + " is specified in VM details, switch to default E1000");
        details.put(VmDetailConstants.NIC_ADAPTER,VirtualEthernetCardType.E1000.toString());
      }
    }
  }
  String diskDeviceType=details.get(VmDetailConstants.ROOK_DISK_CONTROLLER);
  if (userVm) {
    if (diskDeviceType == null) {
      details.put(VmDetailConstants.ROOK_DISK_CONTROLLER,_vmwareMgr.getRootDiskController());
    }
  }
  List<NicProfile> nicProfiles=vm.getNics();
  for (  NicProfile nicProfile : nicProfiles) {
    if (nicProfile.getTrafficType() == TrafficType.Guest) {
      if (_networkMgr.isProviderSupportServiceInNetwork(nicProfile.getNetworkId(),Service.Firewall,Provider.CiscoVnmc)) {
        details.put("ConfigureVServiceInNexus",Boolean.TRUE.toString());
      }
      break;
    }
  }
  long clusterId=getClusterId(vm.getId());
  details.put(Config.VmwareReserveCpu.key(),VmwareReserveCpu.valueIn(clusterId).toString());
  details.put(Config.VmwareReserveMem.key(),VmwareReserveMemory.valueIn(clusterId).toString());
  to.setDetails(details);
  if (vmType.equals(VirtualMachine.Type.DomainRouter)) {
    NicProfile publicNicProfile=null;
    for (    NicProfile nicProfile : nicProfiles) {
      if (nicProfile.getTrafficType() == TrafficType.Public) {
        publicNicProfile=nicProfile;
        break;
      }
    }
    if (publicNicProfile != null) {
      NicTO[] nics=to.getNics();
      NicTO[] expandedNics=new NicTO[nics.length + _vmwareMgr.getRouterExtraPublicNics()];
      int i=0;
      int deviceId=-1;
      for (i=0; i < nics.length; i++) {
        expandedNics[i]=nics[i];
        if (nics[i].getDeviceId() > deviceId)         deviceId=nics[i].getDeviceId();
      }
      deviceId++;
      long networkId=publicNicProfile.getNetworkId();
      NetworkVO network=_networkDao.findById(networkId);
      for (; i < nics.length + _vmwareMgr.getRouterExtraPublicNics(); i++) {
        NicTO nicTo=new NicTO();
        nicTo.setDeviceId(deviceId++);
        nicTo.setBroadcastType(publicNicProfile.getBroadcastType());
        nicTo.setType(publicNicProfile.getTrafficType());
        nicTo.setIp("0.0.0.0");
        nicTo.setNetmask("255.255.255.255");
        try {
          String mac=_networkMgr.getNextAvailableMacAddressInNetwork(networkId);
          nicTo.setMac(mac);
        }
 catch (        InsufficientAddressCapacityException e) {
          throw new CloudRuntimeException("unable to allocate mac address on network: " + networkId);
        }
        nicTo.setDns1(publicNicProfile.getDns1());
        nicTo.setDns2(publicNicProfile.getDns2());
        if (publicNicProfile.getGateway() != null) {
          nicTo.setGateway(publicNicProfile.getGateway());
        }
 else {
          nicTo.setGateway(network.getGateway());
        }
        nicTo.setDefaultNic(false);
        nicTo.setBroadcastUri(publicNicProfile.getBroadCastUri());
        nicTo.setIsolationuri(publicNicProfile.getIsolationUri());
        Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
        nicTo.setNetworkRateMbps(networkRate);
        expandedNics[i]=nicTo;
      }
      to.setNics(expandedNics);
    }
    StringBuffer sbMacSequence=new StringBuffer();
    for (    NicTO nicTo : sortNicsByDeviceId(to.getNics())) {
      sbMacSequence.append(nicTo.getMac()).append("|");
    }
    if (!sbMacSequence.toString().isEmpty()) {
      sbMacSequence.deleteCharAt(sbMacSequence.length() - 1);
      String bootArgs=to.getBootArgs();
      to.setBootArgs(bootArgs + " nic_macs=" + sbMacSequence.toString());
    }
  }
  if (userVm) {
    String nestedVirt=_configDao.getValue(Config.VmwareEnableNestedVirtualization.key());
    if (nestedVirt != null) {
      s_logger.debug("Nested virtualization requested, adding flag to vm configuration");
      details.put(VmDetailConstants.NESTED_VIRTUALIZATION_FLAG,nestedVirt);
      to.setDetails(details);
    }
  }
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  to.setHostName(vm.getHostName());
  HostVO host=_hostDao.findById(vm.getVirtualMachine().getHostId());
  GuestOSHypervisorVO guestOsMapping=null;
  if (host != null) {
    guestOsMapping=_guestOsHypervisorDao.findByOsIdAndHypervisor(guestOS.getId(),getHypervisorType().toString(),host.getHypervisorVersion());
  }
  if (guestOsMapping == null || host == null) {
    to.setPlatformEmulator(null);
  }
 else {
    to.setPlatformEmulator(guestOsMapping.getGuestOsName());
  }
  return to;
}
