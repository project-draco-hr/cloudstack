{
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params="id=" + vm.getId() + "\nvmName="+ vm.getName()+ "\nsoId="+ vm.getServiceOfferingId()+ "\ntId="+ vm.getTemplateId()+ "\ndcId="+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug("Execute asynchronize destroy VM command: received stop-VM answer, " + vm.getHostId() + "-"+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getChildEventId());
      Transaction txn=Transaction.currentTxn();
      txn.start();
      asyncMgr.getExecutorContext().getAccountMgr().decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      if (!asyncMgr.getExecutorContext().getVmDao().updateIf(vm,VirtualMachine.Event.DestroyRequested,vm.getHostId())) {
        s_logger.debug("Unable to destroy the vm because it is not in the correct state: " + vm.toString());
        txn.rollback();
        managementServer.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_DESTROY,"Failed to stop VM instance : " + vm.getName(),params,param.getEventId());
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,"Unable to destroy the vm because it is not in the correct state");
        return;
      }
      asyncMgr.getExecutorContext().getVmMgr().cleanNetworkRules(param.getUserId(),vm.getId());
      List<VolumeVO> volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.ROOT);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getStorageMgr().destroyVolume(volume);
      }
      volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.DATADISK);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getVolumeDao().detachVolume(volume.getId());
      }
      managementServer.saveEvent(param.getUserId(),vm.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_DESTROY,"Successfully destroyed VM instance : " + vm.getName(),params,param.getEventId());
      txn.commit();
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,"success");
    }
 else {
      asyncMgr.getExecutorContext().getVmDao().updateIf(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"Agent failed to stop VM: " + vm.getName());
      managementServer.saveEvent(param.getUserId(),vm.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,"failed to stop VM instance : " + vm.getName(),params,param.getChildEventId());
      managementServer.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_DESTROY,"failed to stop VM instance : " + vm.getName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error("Unexpected exception " + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}
