{
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String key=cmd.getKey();
  String value=cmd.getValue();
  String resourceId=cmd.getResourceId();
  String resourceType=cmd.getResourceType();
  boolean listAll=cmd.listAll();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,listAll,false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ResourceTagVO.class,"resourceType",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<ResourceTagVO> sb=_resourceTagDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("key",sb.entity().getKey(),SearchCriteria.Op.EQ);
  sb.and("value",sb.entity().getValue(),SearchCriteria.Op.EQ);
  sb.and("resourceId",sb.entity().getResourceId(),SearchCriteria.Op.EQ);
  sb.and("resourceType",sb.entity().getResourceType(),SearchCriteria.Op.EQ);
  SearchCriteria<ResourceTagVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (key != null) {
    sc.setParameters("key",key);
  }
  if (value != null) {
    sc.setParameters("value",value);
  }
  if (resourceId != null) {
    sc.setParameters("resourceId",resourceId);
  }
  if (resourceType != null) {
    sc.setParameters("resourceType",resourceType);
  }
  return _resourceTagDao.search(sc,searchFilter);
}
