{
  Account caller=CallContext.current().getCallingAccount();
  List<ResourceTag> resourceTags=new ArrayList<ResourceTag>(tags.size());
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  String key : tags.keySet()) {
    for (    String resourceId : resourceIds) {
      Long id=getResourceId(resourceId,resourceType);
      String resourceUuid=getUuid(resourceId,resourceType);
      if (_daoMap.get(resourceType).findById(id) == null) {
        throw new InvalidParameterValueException("Unable to find resource by id " + resourceId + " and type "+ resourceType);
      }
      Pair<Long,Long> accountDomainPair=getAccountDomain(id,resourceType);
      Long domainId=accountDomainPair.second();
      Long accountId=accountDomainPair.first();
      if (accountId != null) {
        _accountMgr.checkAccess(caller,null,false,_accountMgr.getAccount(accountId));
      }
 else       if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_NORMAL) {
        _accountMgr.checkAccess(caller,_domainMgr.getDomain(domainId));
      }
 else {
        throw new PermissionDeniedException("Account " + caller + " doesn't have permissions to create tags"+ " for resource "+ key);
      }
      String value=tags.get(key);
      if (value == null || value.isEmpty()) {
        throw new InvalidParameterValueException("Value for the key " + key + " is either null or empty");
      }
      ResourceTagVO resourceTag=new ResourceTagVO(key,value,accountDomainPair.first(),accountDomainPair.second(),id,resourceType,customer,resourceUuid);
      resourceTag=_resourceTagDao.persist(resourceTag);
      resourceTags.add(resourceTag);
    }
  }
  txn.commit();
  return resourceTags;
}
