def verifyMetaData(self, metadata):
    metadata_files = ['availability_zone.txt', 'instance_id.txt', 'service_offering.txt', 'vm_id.txt']
    for mfile in metadata_files:
        if (mfile not in metadata):
            self.fail('{} file is not found in vm metadata'.format(mfile))
    self.assertEqual(str(metadata['availability_zone.txt'][0]), self.zone.name, 'Zone name inside metadata does not match with the zone')
    self.assertEqual(str(metadata['instance_id.txt'][0]), self.vm.instancename, 'vm name inside metadata does not match with the instance name')
    self.assertEqual(str(metadata['service_offering.txt'][0]), self.vm.serviceofferingname, 'Service offering inside metadata does not match with the instance offering')
    qresultset = self.dbclient.execute(("select id from vm_instance where instance_name='%s';" % self.vm.instancename))
    self.assertEqual(validateList(qresultset)[0], PASS, 'sql query returned invalid response')
    self.assertEqual(metadata['vm_id.txt'][0], unicode(qresultset[0][0]), 'vm id in metadata does not match with the vm id from cloud db')
    return
