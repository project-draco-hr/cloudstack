@attr(tags=['advanced'], required_hardware='True')
def test_31_deployVM_with_userdataByVR_TC38(self):
    '\n        1.Create shared network with userdata service and VR as the provider\n        2.Deploy vm with userdata in the above network\n        3.Verify vm deployment\n        4.Verify IP Address retrieval\n        '
    self.skipTest('this combination is not supported')
    self.services['virtual_machine']['userdata'] = self.userdata
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id])
    self.assertIsNotNone(self.vm, 'VM creation with userdata failed in a shared network with VR as the provider')
    self.cleanup.append(self.vm)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    self.list_nics(self.vm.id)
    vr_res = Router.list(self.apiclient, networkid=self.shared_network.id, listAll=True)
    self.assertEqual(validateList(vr_res)[0], PASS, 'List Routers returned invalid response')
    vr_ip = vr_res[0].guestipaddress
    ssh = self.vm.get_ssh_client(ipaddress=ip_addr)
    cmd = ('curl http://%s/latest/user-data' % vr_ip)
    res = ssh.execute(cmd)
    self.assertEqual(str(res), self.userdata, 'Failed to get the userdata from VR in shared network')
    return
