@attr(tags=['advanced'], required_hardware='True')
def test_10_RebootVMAndGetVMIpAddress_TC17(self):
    '\n        1.Create shared network without any services\n        2.Deploy vm with default cent os template and pass user data\n        3.Verify vm deployment\n        4.Verify IP address retrieval and userdata\n        5.Reboot vm and repeat step4\n        '
    self.services['virtual_machine']['userdata'] = self.userdata
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, diskofferingid=self.disk_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id])
    self.cleanup.append(self.vm)
    self.assertIsNotNone(self.vm, 'Failed to create vm in a shared network without any services')
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    self.list_nics(self.vm.id)
    configDrive_iso = self.isConfigDriveIsoAttached(ip_addr)
    self.assertNotEqual(configDrive_iso, False, 'Config drive iso is not attached to vm before reboot')
    self.assertEqual(self.verifyUserData(ip_addr, configDrive_iso), True, 'Userdata is not matching with the data passed while deploying')
    self.vm.reboot(self.apiclient)
    time.sleep(60)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address after vm reboot')
    self.list_nics(self.vm.id)
    configDrive_iso = self.isConfigDriveIsoAttached(ip_addr)
    self.assertNotEqual(configDrive_iso, False, 'Config drive iso is not attached to vm after vm reboot')
    self.assertEqual(self.verifyUserData(ip_addr, configDrive_iso), True, 'Userdata is not matching after vm reboot')
    return
