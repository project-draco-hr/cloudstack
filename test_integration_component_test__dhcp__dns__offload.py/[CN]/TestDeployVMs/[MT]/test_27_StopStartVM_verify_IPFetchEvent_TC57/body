@attr(tags=['advanced'], required_hardware='True')
def test_27_StopStartVM_verify_IPFetchEvent_TC57(self):
    '\n        1.Create shared network without any services\n        2.Deploy vm in that network\n        3.Verify vm deployment\n        4.Verify IP address retrieval\n        5.Verify EXTERNAL.DHCP.VM.IP.FETCH event after IP address retrieval\n        6.Stop/Start vm and repeat step5\n        '
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id])
    self.assertIsNotNone(self.vm, 'VM creation failed in a shared network without any services')
    self.cleanup.append(self.vm)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    self.list_nics(self.vm.id)
    self.assertEqual(self.verifyIPFetchEvent(ip_addr), True, 'EXTERNAL.DHCP.VM.IP.FETCH is not generated')
    self.vm.stop(self.apiclient)
    self.vm.start(self.apiclient)
    time.sleep(60)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address after vm stop start')
    self.assertEqual(self.verifyIPFetchEvent(ip_addr), True, 'EXTERNAL.DHCP.VM.IP.FETCH is not generated')
    return
