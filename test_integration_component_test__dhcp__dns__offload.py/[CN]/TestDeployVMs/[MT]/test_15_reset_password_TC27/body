@attr(tags=['advanced'], required_hardware='True')
def test_15_reset_password_TC27(self):
    '\n        1.Create shared network without any services\n        2.Deploy vm with password enabled template\n        3.Reset password\n        4.Verify accessing vm with the new password\n        '
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.pwd_template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, diskofferingid=self.disk_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id])
    self.assertIsNotNone(self.vm, 'Failed to create vm in a shared network without any services')
    self.cleanup.append(self.vm)
    self.vm.stop(self.apiclient)
    self.debug(('Resetting VM password for VM: %s' % self.vm.name))
    self.vm_password = self.vm.resetPassword(self.apiclient)
    self.debug(('Password reset to: %s' % self.vm_password))
    self.debug('Starting VM to verify new password..')
    self.vm.start(self.apiclient)
    self.debug(('VM - %s stated!' % self.vm.name))
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    try:
        self.debug(('SSHing into VM: %s' % ip_addr))
        self.vm.password = self.vm_password
        self.vm.get_ssh_client(ipaddress=ip_addr, reconnect=True)
    except Exception as e:
        self.fail(('SSH into VM: %s failed with new password: %s' % (self.vm.ssh_ip, e)))
    return
