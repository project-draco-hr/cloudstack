@attr(tags=['advanced'], required_hardware='True')
def test_29_deployVM_In_Two_Networks_TC49(self):
    '\n        1.Create shared network without any services\n        2.Create isolated network with VR as the service provider\n        2.Deploy vm in both the networks\n        3.Verify vm deployment\n        4.Verify IP address retrieval\n        5.Verify metadata\n        '
    self.no_isolate = NetworkOffering.create(self.apiclient, self.services['isolated_network_offering'])
    self.no_isolate.update(self.apiclient, state='Enabled')
    self.isolated_network = Network.create(self.apiclient, self.services['network'], networkofferingid=self.no_isolate.id, zoneid=self.zone.id, accountid='admin', domainid=1)
    self.cleanup.append(self.isolated_network)
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id, self.isolated_network.id])
    self.assertIsNotNone(self.vm, 'VM creation failed in a shared network without any services')
    self.cleanup.append(self.vm)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    self.list_nics(self.vm.id)
    configDrive_iso = self.isConfigDriveIsoAttached(ip_addr)
    self.assertNotEqual(configDrive_iso, False, 'Config drive iso is not attached to vm')
    metadata = self.getVMMetaData(ip_addr, configDrive_iso)
    self.verifyMetaData(metadata)
    return
