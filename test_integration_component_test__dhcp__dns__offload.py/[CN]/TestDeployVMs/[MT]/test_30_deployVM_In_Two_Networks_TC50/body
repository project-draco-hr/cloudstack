@attr(tags=['advanced'], required_hardware='True')
def test_30_deployVM_In_Two_Networks_TC50(self):
    '\n        1.Create shared network without any services\n        2.Create another shared network with VR as the service provider\n        2.Deploy vm in both the networks\n        3.Verify vm deployment\n        4.Verify IP address retrieval\n        5.Verify metadata\n        '
    self.services['shared_network_offering_all_services']['specifyVlan'] = 'True'
    self.services['shared_network_offering_all_services']['specifyIpRanges'] = 'True'
    self.no_shared_vr = NetworkOffering.create(self.apiclient, self.services['shared_network_offering_all_services'])
    self.no_shared_vr.update(self.apiclient, state='Enabled')
    self.services['shared_network']['vlan'] = self.services['vlan']
    self.services['shared_network']['gateway'] = self.services['gateway']
    self.services['shared_network']['netmask'] = self.services['netmask']
    self.services['shared_network']['startip'] = self.services['startip']
    self.services['shared_network']['endip'] = self.services['endip']
    self.shared_network2 = Network.create(self.apiclient, self.services['shared_network'], networkofferingid=self.no_shared_vr.id, zoneid=self.zone.id, accountid='admin', domainid=1)
    self.cleanup.append(self.shared_network2)
    self.vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid='admin', domainid=1, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, networkids=[self.shared_network.id, self.shared_network2.id])
    self.assertIsNotNone(self.vm, 'VM creation failed in a shared network without any services')
    self.cleanup.append(self.vm)
    (ip_status, ip_addr) = self.getVMIPAddress(self.vm.id)
    self.assertEqual(ip_status, 1, 'Failed to retrieve vm ip address')
    self.list_nics(self.vm.id)
    configDrive_iso = self.isConfigDriveIsoAttached(ip_addr)
    self.assertNotEqual(configDrive_iso, False, 'Config drive iso is not attached to vm')
    metadata = self.getVMMetaData(ip_addr, configDrive_iso)
    self.verifyMetaData(metadata)
    return
