@attr(tags=['advancedns'], required_hardware='true')
def test_add_netscaler_device(self):
    'Test add netscaler device\n        '
    self.debug(('Adding netscaler device: %s' % self.services['netscaler_VPX']['ipaddress']))
    netscaler_config = dict(self.services['netscaler_VPX'])
    netscaler_config.update({'lbdevicededicated': 'False', })
    netscaler = NetScaler.add(self.apiclient, netscaler_config, physicalnetworkid=self.physical_network.id)
    self.cleanup.append(netscaler)
    self.debug('Checking if Netscaler network service provider is enabled?')
    nw_service_providers = NetworkServiceProvider.list(self.apiclient, name='Netscaler', physicalnetworkid=self.physical_network.id)
    self.assertEqual(isinstance(nw_service_providers, list), True, 'Network service providers list should not be empty')
    netscaler_provider = nw_service_providers[0]
    if (netscaler_provider.state != 'Enabled'):
        self.debug('Netscaler provider is not enabled. Enabling it..')
        response = NetworkServiceProvider.update(self.apiclient, id=netscaler_provider.id, state='Enabled')
        self.assertEqual(response.state, 'Enabled', 'Network service provider should be in enabled state')
    else:
        self.debug('Netscaler service provider is already enabled.')
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, self.physical_network.id, 'Physical network id should match with the network in which device is configured')
