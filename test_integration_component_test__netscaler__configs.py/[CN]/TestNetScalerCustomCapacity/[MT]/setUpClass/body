@classmethod
def setUpClass(cls):
    cls.api_client = super(TestNetScalerCustomCapacity, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    physical_networks = PhysicalNetwork.list(cls.api_client, zoneid=cls.zone.id)
    if isinstance(physical_networks, list):
        physical_network = physical_networks[0]
    cls.services['netscaler']['lbdevicecapacity'] = 2
    cls.netscaler = NetScaler.add(cls.api_client, cls.services['netscaler'], physicalnetworkid=physical_network.id)
    nw_service_providers = NetworkServiceProvider.list(cls.api_client, name='Netscaler', physicalnetworkid=physical_network.id)
    if isinstance(nw_service_providers, list):
        netscaler_provider = nw_service_providers[0]
    if (netscaler_provider.state != 'Enabled'):
        response = NetworkServiceProvider.update(cls.api_client, id=netscaler_provider.id, state='Enabled')
    cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=True)
    cls.network_offering.update(cls.api_client, state='Enabled')
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls._cleanup = [cls.service_offering, cls.network_offering, cls.netscaler]
    return
