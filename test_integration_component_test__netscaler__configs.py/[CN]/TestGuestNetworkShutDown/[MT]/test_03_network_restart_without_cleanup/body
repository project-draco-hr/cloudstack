@attr(tags=['advancedns', 'test'])
def test_03_network_restart_without_cleanup(self):
    'Test LB rules on Netscaler after network restart without cleanup\n        '
    self.debug(('Restarting the network: %s' % self.network.id))
    self.network.restart(self.apiclient, cleanup=False)
    self.debug(('SSH into netscaler: %s' % self.services['configurableData']['netscaler']['ipaddress']))
    try:
        network_list = Network.list(self.apiclient, id=self.network.id, listall=True)
        nw = network_list[0]
        ssh_client = SshClient(self.services['configurableData']['netscaler']['ipaddress'], self.services['configurableData']['netscaler']['port'], self.services['configurableData']['netscaler']['username'], self.services['configurableData']['netscaler']['password'])
        cmd = ('show vlan %s' % nw.vlan)
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('ERROR: No such resource '), 1, 'Netscaler should have vlan configured for the network')
        cmd = ('show lb vserver Cloud-VirtualServer-%s-%s' % (self.public_ip.ipaddress.ipaddress, self.lb_rule.publicport))
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should have vlan configured for the network')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['configurableData']['netscaler']['ipaddress'], e)))
    return
