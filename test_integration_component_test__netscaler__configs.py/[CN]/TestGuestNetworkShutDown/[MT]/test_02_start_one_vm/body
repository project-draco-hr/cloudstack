@attr(tags=['advancedns', 'test'])
def test_02_start_one_vm(self):
    'Test LB rules on Netscaler after starting one Vm in account\n        '
    self.debug(('starting one VM instances for the account: %s' % self.account.name))
    self.vm_1.start(self.apiclient)
    vms = VirtualMachine.list(self.apiclient, id=self.vm_1.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return a valid list')
    for vm in vms:
        self.assertEqual(vm.state, 'Running', 'VM instance should be Up and running after start')
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        network_list = Network.list(self.apiclient, id=self.network.id, listall=True)
        nw = network_list[0]
        ssh_client = remoteSSHClient(self.services['netscaler']['ipaddress'], self.services['netscaler']['port'], self.services['netscaler']['username'], self.services['netscaler']['password'])
        cmd = ('show vlan %s' % nw.vlan)
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('ERROR: No such resource '), 1, 'Netscaler should have vlan configured for the network')
        cmd = ('show lb vserver Cloud-VirtualServer-%s-%s' % (self.public_ip.ipaddress.ipaddress, self.lb_rule.publicport))
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should have vlan configured for the network')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
