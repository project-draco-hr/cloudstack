@attr(tags=['advancedns', 'test'])
def test_01_stop_all_vms(self):
    'Test Stopping all the Vms for any account that has LB rules.\n        '
    network_list = Network.list(self.apiclient, id=self.network.id, listall=True)
    nw = network_list[0]
    self.debug(('Network vlan used is: %s' % nw.vlan))
    self.debug(('Stopping all the VM instances for the account: %s' % self.account.name))
    try:
        self.vm_1.stop(self.apiclient)
        self.vm_2.stop(self.apiclient)
    except Exception as e:
        self.fail(('Failed to stop instance: %s' % e))
    self.debug('Sleep for network.gc.interval + network.gc.wait')
    interval = Configurations.list(self.apiclient, name='network.gc.interval')
    wait = Configurations.list(self.apiclient, name='network.gc.wait')
    time.sleep(((int(interval[0].value) + int(wait[0].value)) * 2))
    self.debug(('SSH into netscaler: %s' % self.services['netscaler_VPX']['ipaddress']))
    try:
        ssh_client = SshClient(self.services['netscaler_VPX']['ipaddress'], self.services['netscaler_VPX']['port'], self.services['netscaler_VPX']['username'], self.services['netscaler_VPX']['password'])
        cmd = ('show vlan %s' % nw.vlan)
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should not have vlan configured for the network')
        cmd = ('show lb vserver Cloud-VirtualServer-%s-%s' % (self.public_ip.ipaddress.ipaddress, self.lb_rule.publicport))
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should not have vserver configured for the network')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler_VPX']['ipaddress'], e)))
    return
