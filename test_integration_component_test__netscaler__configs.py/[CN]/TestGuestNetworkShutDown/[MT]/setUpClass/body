@classmethod
def setUpClass(cls):
    cls._cleanup = []
    cls.testClient = super(TestGuestNetworkShutDown, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    try:
        netscaler_config = dict(cls.services['configurableData']['netscaler'])
        netscaler_config.update({'lbdevicededicated': 'False', })
        cls.netscaler = add_netscaler(cls.api_client, cls.zone.id, netscaler_config)
        cls._cleanup.append(cls.netscaler)
        cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['nw_off_isolated_netscaler'], conservemode=True)
        cls.network_offering.update(cls.api_client, state='Enabled')
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
        cls._cleanup.insert(0, cls.account)
        cls.network = Network.create(cls.api_client, cls.services['netscaler_network'], accountid=cls.account.name, domainid=cls.account.domainid, networkofferingid=cls.network_offering.id, zoneid=cls.zone.id)
        cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network.id)], templateid=cls.template.id, zoneid=cls.zone.id)
        cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network.id)], templateid=cls.template.id, zoneid=cls.zone.id)
        cls.public_ip = PublicIPAddress.create(cls.api_client, accountid=cls.account.name, zoneid=cls.zone.id, domainid=cls.account.domainid, networkid=cls.network.id)
        cls.lb_rule = LoadBalancerRule.create(cls.api_client, cls.services['lbrule'], ipaddressid=cls.public_ip.ipaddress.id, accountid=cls.account.name, networkid=cls.network.id)
        cls.lb_rule.assign(cls.api_client, [cls.vm_1, cls.vm_2])
    except Exception as e:
        cls.tearDownClass()
        raise Exception(('Warning: Exception in setUpClass: %s' % e))
