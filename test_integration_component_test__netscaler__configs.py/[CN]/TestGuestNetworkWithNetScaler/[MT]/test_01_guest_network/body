@attr(tags=['advancedns', 'test'])
def test_01_guest_network(self):
    'Implementing Guest Network when first VM gets deployed using the network having Netscaler as LB\n        '
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=self.netscaler.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account_1.name, domainid=self.account_1.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_1.id))
    self.debug(('Deploying VM in account: %s' % self.account_1.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_1.id)])
    self.debug(('Deployed VM in network: %s' % self.network_1.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    network_list = Network.list(self.apiclient, id=self.network_1.id, listall=True)
    nw = network_list[0]
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient(self.services['netscaler']['ipaddress'], self.services['netscaler']['port'], self.services['netscaler']['username'], self.services['netscaler']['password'])
        cmd = ('show vlan %s' % nw.vlan)
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('ERROR: No such resource '), 1, 'Netscaler should have vlan configured for the network')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
