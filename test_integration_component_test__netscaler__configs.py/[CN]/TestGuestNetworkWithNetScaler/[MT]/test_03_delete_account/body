@attr(tags=['advancedns', 'test'])
def test_03_delete_account(self):
    'Delete an account that has LB rules\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account_1.name, domainid=self.account_1.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying VM in account: %s' % self.account_1.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Assigning public IP for the account: %s' % self.account_1.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account_1.name, zoneid=self.zone.id, domainid=self.account_1.domainid, networkid=self.network.id)
    self.debug(('Creating LB rule for IP address: %s with round robin algo' % public_ip.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account_1.name, networkid=self.network.id)
    self.debug(('Created the load balancing rule for public IP: %s' % public_ip.ipaddress.ipaddress))
    self.debug('Assigning VMs to LB rule')
    lb_rule.assign(self.apiclient, [virtual_machine])
    network_list = Network.list(self.apiclient, id=self.network.id, listall=True)
    nw = network_list[0]
    self.debug(('Deleting account: %s' % self.account_1.name))
    self.cleanup.pop(0).delete(self.apiclient)
    self.debug(('Account: %s is deleted!' % self.account_1.name))
    self.debug('Waiting for network.gc.interval & network.gc.wait..')
    interval = list_configurations(self.apiclient, name='network.gc.interval')
    wait = list_configurations(self.apiclient, name='network.gc.wait')
    time.sleep((int(interval[0].value) + int(wait[0].value)))
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient(self.services['netscaler']['ipaddress'], self.services['netscaler']['port'], self.services['netscaler']['username'], self.services['netscaler']['password'])
        cmd = ('show vlan %s' % nw.vlan)
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should have vlan configured for the network')
        cmd = ('show lb vserver Cloud-VirtualServer-%s-%s' % (public_ip.ipaddress.ipaddress, lb_rule.publicport))
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('ERROR: No such resource'), 1, 'Netscaler should have vlan configured for the network')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
