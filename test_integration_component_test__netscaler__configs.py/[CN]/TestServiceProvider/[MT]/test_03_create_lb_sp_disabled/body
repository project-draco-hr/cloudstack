@attr(tags=['advancedns'])
def test_03_create_lb_sp_disabled(self):
    'Test create LB rules when service provider is disabled\n        '
    NetworkServiceProvider.update(self.apiclient, id=self.netscaler_provider.id, state='Enabled')
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Acquiring a public IP for Network: %s' % self.network.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=self.network.id)
    self.debug(('Creating LB rule for IP address: %s with round robin algo' % public_ip.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.account.name, networkid=self.network.id)
    self.debug(('Created the load balancing rule for public IP: %s' % public_ip.ipaddress.ipaddress))
    self.debug(('Assigning VM instance: %s to LB rule: %s' % (virtual_machine.name, lb_rule.name)))
    lb_rule.assign(self.apiclient, [virtual_machine])
    self.debug(('Assigned VM instance: %s to lb rule: %s' % (virtual_machine.name, lb_rule.name)))
    self.debug('Disabling Netscaler service provider')
    NetworkServiceProvider.update(self.apiclient, id=self.netscaler_provider.id, state='Disabled')
    with self.assertRaises(Exception):
        self.debug(('Deploying VM in the network: %s' % self.network.id))
        LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.account.name, networkid=self.network.id)
        VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    return
