@attr(tags=['advancedns'])
def test_delete_netscaler_with_lb(self):
    'Test delete Netscaler when active LB rules are present\n        '
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=self.netscaler.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account_1.account.name, domainid=self.account_1.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_1.id))
    self.debug(('Deploying VM in account: %s' % self.account_1.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_1.account.name, domainid=self.account_1.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_1.id)])
    self.debug(('Deployed VM in network: %s' % self.network_1.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug('Attempt to delete netscaler load balancer device')
    with self.assertRaises(Exception):
        self.netscaler.delete(self.apiclient)
    self.debug('Attempt to delete Netscaler device failed!')
    return
