@attr(tags=['advancedns'])
def test_invalid_public_interface(self):
    'Test add netscaler device with invalid public interface\n        '
    physical_networks = PhysicalNetwork.list(self.apiclient, zoneid=self.zone.id)
    self.assertEqual(isinstance(physical_networks, list), True, 'There should be atleast one physical network for advanced zone')
    physical_network = physical_networks[0]
    self.debug('Checking if Netscaler network service provider is enabled?')
    nw_service_providers = NetworkServiceProvider.list(self.apiclient, name='Netscaler', physicalnetworkid=physical_network.id)
    self.assertEqual(isinstance(nw_service_providers, list), True, 'Network service providers list should not be empty')
    netscaler_provider = nw_service_providers[0]
    if (netscaler_provider.state != 'Enabled'):
        self.debug('Netscaler provider is not enabled. Enabling it..')
        response = NetworkServiceProvider.update(self.apiclient, id=netscaler_provider.id, state='Enabled')
        self.assertEqual(response.state, 'Enabled', 'Network service provider should be in enabled state')
    else:
        self.debug('NetScaler service provider is already enabled.')
    self.debug('Passing invalid public interface for NetScaler')
    self.services['netscaler']['publicinterface'] = random_gen()
    self.debug(('Adding netscaler device: %s' % self.services['netscaler']['ipaddress']))
    self.debug(('Public interface: %s' % self.services['netscaler']['publicinterface']))
    with self.assertRaises(Exception):
        NetScaler.add(self.apiclient, self.services['netscaler'], physicalnetworkid=physical_network.id)
    return
