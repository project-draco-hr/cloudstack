{
  Connection conn=getConnection();
  String volumeUUID=cmd.getVolumePath();
  StorageFilerTO poolTO=cmd.getPool();
  String secondaryStorageURL=cmd.getSecondaryStorageURL();
  boolean toSecondaryStorage=cmd.toSecondaryStorage();
  try {
    URI uri=new URI(secondaryStorageURL);
    String remoteVolumesMountPath=uri.getHost() + ":" + uri.getPath()+ "/volumes/";
    String volumeFolder=String.valueOf(cmd.getVolumeId()) + "/";
    String mountpoint=remoteVolumesMountPath + volumeFolder;
    SR primaryStoragePool=getStorageRepository(conn,poolTO);
    String srUuid=primaryStoragePool.getUuid(conn);
    if (toSecondaryStorage) {
      VDI vdi=VDI.getByUuid(conn,volumeUUID);
      String vdiParent=vdi.getSmConfig(conn).get("vhd-parent");
      if (vdiParent != null && !vdiParent.isEmpty()) {
        return super.execute(cmd);
      }
      if (!createSecondaryStorageFolder(conn,remoteVolumesMountPath,volumeFolder)) {
        throw new InternalErrorException("Failed to create the volume folder.");
      }
      String uuid=copy_vhd_to_secondarystorage(conn,mountpoint,volumeUUID,srUuid);
      return new CopyVolumeAnswer(cmd,true,null,null,uuid);
    }
 else {
      String uuid=copy_vhd_from_secondarystorage(conn,mountpoint,srUuid);
      deleteSecondaryStorageFolder(conn,remoteVolumesMountPath,volumeFolder);
      return new CopyVolumeAnswer(cmd,true,null,srUuid,uuid);
    }
  }
 catch (  Exception e) {
    String msg="Catch Exception " + e.getClass().getName() + " due to "+ e.toString();
    s_logger.warn(msg,e);
    return new CopyVolumeAnswer(cmd,false,msg,null,null);
  }
}
