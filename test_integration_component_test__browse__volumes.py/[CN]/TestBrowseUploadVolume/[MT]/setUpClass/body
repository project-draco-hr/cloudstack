@classmethod
def setUpClass(cls):
    cls.testClient = super(TestBrowseUploadVolume, cls).getClsTestClient()
    cls.testdata = cls.testClient.getParsedTestDataConfig()
    cls.apiclient = cls.testClient.getApiClient()
    cls._cleanup = []
    cls.cleanup = []
    cls.uploadvolumeformat = 'VHD'
    hosts = list_hosts(cls.apiclient, type='Routing')
    if (hosts is None):
        raise unittest.SkipTest("There are no hypervisor's available.Check listhosts response")
    for hypervisorhost in hosts:
        if (hypervisorhost.hypervisor == 'XenServer'):
            cls.uploadvolumeformat = 'VHD'
            break
        elif (hypervisorhost.hypervisor == 'VMware'):
            cls.uploadvolumeformat = 'OVA'
            break
        elif (hypervisorhost.hypervisor == 'KVM'):
            cls.uploadvolumeformat = 'QCOW2'
            break
        else:
            break
    cls.uploadurl = cls.testdata['browser_upload_volume'][cls.uploadvolumeformat]['url']
    cls.volname = cls.testdata['browser_upload_volume'][cls.uploadvolumeformat]['diskname']
    cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())
    cls.domain = get_domain(cls.apiclient)
    cls.pod = get_pod(cls.apiclient, cls.zone.id)
    cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
    cls.template = get_template(cls.apiclient, cls.zone.id)
    if (cls.template == FAILED):
        raise unittest.SkipTest('Check for default cent OS template readiness ')
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['browser_upload_volume']['browser_resized_disk_offering'], custom=True)
    cls._cleanup = [cls.account, cls.service_offering, cls.disk_offering]
