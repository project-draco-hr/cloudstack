def volume_snapshost_template(self, snapshot_created):
    list_templates_before = Template.list(self.apiclient, templatefilter='self')
    if (list_templates_before is None):
        templates_before_size = 0
    else:
        templates_before_size = len(list_templates_before)
    cmd = createTemplate.createTemplateCmd()
    cmd.name = self.testdata['ostype']
    cmd.displaytext = self.testdata['ostype']
    cmd.ostypeid = self.template.ostypeid
    cmd.snapshotid = snapshot_created.id
    cmd.ispublic = False
    cmd.passwordenabled = False
    template_from_snapshot = Template(self.apiclient.createTemplate(cmd).__dict__)
    self.assertIsNotNone(template_from_snapshot, 'Template creation failed from snapshot')
    self.cleanup.append(template_from_snapshot)
    expected_dict = {'name': self.services['ostype'], 'ostypeid': self.template.ostypeid, 'type': 'USER', 'zone': self.zone.id, 'domain': self.domain.id, 'account': self.account.name, 'passwordenabled': False, 'ispublic': False, 'size': self.disk_offering.disksize, }
    actual_dict = {'name': template_from_snapshot.name, 'ostypeid': template_from_snapshot.ostypeid, 'type': template_from_snapshot.templatetype, 'zone': template_from_snapshot.zoneid, 'domain': template_from_snapshot.domainid, 'account': template_from_snapshot.account, 'passwordenabled': template_from_snapshot.passwordenabled, 'ispublic': template_from_snapshot.ispublic, 'size': (template_from_snapshot.size / ((1024 * 1024) * 1024)), }
    status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, status, 'Template created from Snapshot details are not as expected')
    list_templates_after = Template.list(self.userapiclient, templatefilter='self')
    self.assertEquals((templates_before_size + 1), len(list_templates_after), 'Template creation failed from snapshot')
    return
