@attr(tags=['advanced', 'advancedns', 'smoke', 'basic'], required_hardware='true')
def test_01_Browser_volume_Life_cycle_tpath(self):
    '\n        Test Browser_volume_Life_cycle - This includes upload volume,attach to a VM, write data ,Stop ,Start, Reboot,Reset  of a VM, detach,attach back to the VM, delete volumes  \n        '
    try:
        self.debug('========================= Test 1: Upload Browser based volume and validate ========================= ')
        browseup_vol = self.browse_upload_volume()
        self.debug('========================= Test 2: Deploy a VM , Attach Uploaded Browser based volume and validate VM Operations========================= ')
        vm1details = self.deploy_vm()
        self.attach_volume(vm1details, browseup_vol.id)
        self.vmoperations(vm1details)
        self.debug('========================= Test 3: Restore VM with Uploaded volume attached========================= ')
        self.restore_vm(vm1details)
        self.debug('========================= Test 4: Detach Uploaded volume and validation of VM operations after detach========================= ')
        self.detach_volume(vm1details, browseup_vol.id)
        self.vmoperations(vm1details)
        self.debug('========================= Test 5: Deploy New VM,Attach the detached Uploaded volume and validate VM operations after attach========================= ')
        vm2details = self.deploy_vm()
        self.attach_volume(vm2details, browseup_vol.id)
        self.vmoperations(vm2details)
        self.debug('========================= Test 6: Detach Uploaded volume and resize detached uploaded volume========================= ')
        self.detach_volume(vm2details, browseup_vol.id)
        self.resize_volume(browseup_vol.id)
        self.debug('========================= Test 7: Attach resized uploaded volume and validate VM operations========================= ')
        self.attach_volume(vm2details, browseup_vol.id)
        self.vmoperations(vm2details)
        self.debug('========================= Test 8: Try resizing uploaded state volume and validate the error scenario========================= ')
        browseup_vol2 = self.browse_upload_volume()
        self.resize_fail(browseup_vol2.id)
        self.debug('========================= Test 9: Attach multiple uploaded volumes to a VM and validate VM operations========================= ')
        browseup_vol3 = self.browse_upload_volume()
        self.attach_volume(vm2details, browseup_vol2.id)
        self.attach_volume(vm2details, browseup_vol3.id)
        self.vmoperations(vm2details)
        self.debug('========================= Test 10:  Detach and delete uploaded volume========================= ')
        self.detach_volume(vm2details, browseup_vol2.id)
        self.deletevolume(browseup_vol2.id)
        self.debug('========================= Test 11:  Detach and download uploaded volume========================= ')
        self.detach_volume(vm2details, browseup_vol3.id)
        self.download_volume(browseup_vol3.id)
        self.debug('========================= Test 12:  Delete detached uploaded volume========================= ')
        self.detach_volume(vm2details, browseup_vol3.id)
        self.deletevolume(browseup_vol3.id)
        self.debug('========================= Test 13:  Delete Uploaded State volume========================= ')
        browseup_vol4 = self.browse_upload_volume()
        self.deletevolume(browseup_vol4.id)
        self.debug('========================= Test 14:  Destroy VM which has Uploaded volumes attached========================= ')
        vm4details = self.deploy_vm()
        self.attach_volume(vm4details, browseup_vol4.id)
        self.destroy_vm(vm4details)
        self.debug('========================= Test 15:  Recover destroyed VM which has Uploaded volumes attached========================= ')
        self.recover_destroyed_vm(vm4details)
        self.debug('========================= Test 16:  Delete attached Uploaded volume which is in ready state========================= ')
        browseup_vol5 = self.browse_upload_volume()
        self.attach_volume(vm4details, browseup_vol5.id)
        self.deletevolume(browseup_vol5.id)
        self.debug('========================= Test 17:  Create Volume Backup Snapshot uploaded volume attached to the VM========================= ')
        browseup_vol6 = self.browse_upload_volume()
        self.attach_volume(vm2details, browseup_vol6.id)
        snapshotdetails = self.volume_snapshot(browseup_vol6.id)
        self.debug('========================= Test 18:  Create Volume from Backup Snapshot of attached uploaded volume========================= ')
        self.volume_snapshot_volume(snapshotdetails)
        self.debug('========================= Test 19:  Create template from Backup Snapshot of attached uploaded volume========================= ')
        self.volume_snapshot_template(snapshotdetails)
    except Exception as e:
        self.fail(('Exception occurred  : %s' % e))
    return
