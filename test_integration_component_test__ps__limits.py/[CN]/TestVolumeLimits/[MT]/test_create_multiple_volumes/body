@data(ROOT_DOMAIN_ADMIN, CHILD_DOMAIN_ADMIN)
@attr(tags=['advanced'], required_hardware='false')
def test_create_multiple_volumes(self, value):
    'Test create multiple volumes\n\n        # Validate the following\n        # 1. Create a VM with custom disk offering and check the primary storage count\n        #    of account\n        # 2. Create multiple volumes in account\n        # 3. Verify that primary storage count increases by same amount\n        # 4. Attach volumes to VM and verify resource count remains the same\n        # 5. Detach and delete both volumes one by one and verify resource count decreases\n        #    proportionately'
    response = self.setupAccount(value)
    self.assertEqual(response[0], PASS, response[1])
    apiclient = self.apiclient
    if (value == CHILD_DOMAIN_ADMIN):
        apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.assertNotEqual(apiclient, FAIL, ('Failure while getting                                api client of account %s' % self.account.name))
    try:
        self.services['disk_offering']['disksize'] = 5
        disk_offering_5_GB = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
        self.cleanup.append(disk_offering_5_GB)
        self.services['disk_offering']['disksize'] = 10
        disk_offering_10_GB = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
        self.cleanup.append(disk_offering_10_GB)
        volume_1 = Volume.create(apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=disk_offering_5_GB.id)
        volume_2 = Volume.create(apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=disk_offering_10_GB.id)
        self.debug(('Attaching volume %s to vm %s' % (volume_1.name, self.virtualMachine.name)))
        self.virtualMachine.attach_volume(apiclient, volume=volume_1)
        self.debug(('Attaching volume %s to vm %s' % (volume_2.name, self.virtualMachine.name)))
        self.virtualMachine.attach_volume(apiclient, volume=volume_2)
    except Exception as e:
        self.fail(('Failure: %s' % e))
    expectedCount = (self.initialResourceCount + 15)
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        self.virtualMachine.detach_volume(apiclient, volume=volume_1)
        volume_1.delete(apiclient)
    except Exception as e:
        self.fail(('Failure while volume operation: %s' % e))
    expectedCount -= 5
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        self.virtualMachine.detach_volume(apiclient, volume=volume_2)
        volume_2.delete(apiclient)
    except Exception as e:
        self.fail(('Failure while volume operation: %s' % e))
    expectedCount -= 10
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    return
