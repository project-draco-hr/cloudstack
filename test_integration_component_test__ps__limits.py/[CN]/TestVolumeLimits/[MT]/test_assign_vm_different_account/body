@data(ROOT_DOMAIN_ADMIN, CHILD_DOMAIN_ADMIN)
@attr(tags=['advanced', 'selfservice'])
def test_assign_vm_different_account(self, value):
    'Test assign Vm to different account\n        # Validate the following\n        # 1. Deploy VM in account and check the primary storage resource count\n        # 2. Assign VM to another account\n        # 3. Resource count for first account should now equal to 0\n        # 4. Resource count for the account to which VM is assigned should\n        #    increase to that of initial resource count of first account\n        '
    response = self.setupAccount(value)
    self.assertEqual(response[0], PASS, response[1])
    try:
        account_2 = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id, admin=True)
        self.cleanup.insert(0, account_2)
    except Exception as e:
        self.fail(('Failed to create account: %s' % e))
    expectedCount = self.initialResourceCount
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        self.virtualMachine.stop(self.apiclient)
        self.virtualMachine.assign_virtual_machine(self.apiclient, account_2.name, account_2.domainid)
    except Exception as e:
        self.fail(('Failed to assign virtual machine to account %s: %s' % (account_2.name, e)))
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=account_2.id)
    self.assertEqual(response[0], PASS, response[1])
    expectedCount = 0
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    return
