@data(ROOT_DOMAIN_ADMIN, CHILD_DOMAIN_ADMIN)
@attr(tags=['advanced'], required_hardware='true')
def test_create_template_snapshot(self, value):
    "Test create snapshot and templates from volume\n\n        # Validate the following\n        # 1. Deploy VM with custoom disk offering and check the\n        #    primary storage resource count\n        # 2. Stop the VM and create Snapshot from VM's volume\n        # 3. Create volume againt from this snapshto and attach to VM\n        # 4. Verify that primary storage count increases by the volume size\n        # 5. Detach and delete volume, verify primary storage count decreaes by volume size"
    if (self.hypervisor.lower() in ['hyperv']):
        self.skipTest('Snapshots feature is not supported on Hyper-V')
    response = self.setupAccount(value)
    self.debug(response[0])
    self.debug(response[1])
    self.assertEqual(response[0], PASS, response[1])
    apiclient = self.apiclient
    if (value == CHILD_DOMAIN_ADMIN):
        apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.assertNotEqual(apiclient, FAIL, ('Failure while getting api                    client of account: %s' % self.account.name))
    try:
        self.virtualMachine.stop(apiclient)
    except Exception as e:
        self.fail(('Failed to stop instance: %s' % e))
    expectedCount = self.initialResourceCount
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    self.debug(('Creating snapshot from ROOT volume: %s' % self.virtualMachine.name))
    snapshot = None
    response = createSnapshotFromVirtualMachineVolume(apiclient, self.account, self.virtualMachine.id)
    self.assertEqual(response[0], PASS, response[1])
    snapshot = response[1]
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        self.services['volume']['size'] = self.services['disk_offering']['disksize']
        volume = Volume.create_from_snapshot(apiclient, snapshot_id=snapshot.id, services=self.services['volume'], account=self.account.name, domainid=self.account.domainid)
        self.debug(('Attaching the volume to vm: %s' % self.virtualMachine.name))
        self.virtualMachine.attach_volume(apiclient, volume)
    except Exception as e:
        self.fail(('Failure in volume operation: %s' % e))
    expectedCount += int(self.services['volume']['size'])
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        self.virtualMachine.detach_volume(apiclient, volume)
    except Exception as e:
        self.fail(('Failure in detach volume operation: %s' % e))
    try:
        self.debug(('deleting the volume: %s' % volume.name))
        volume.delete(apiclient)
    except Exception as e:
        self.fail(('Failure while deleting volume: %s' % e))
    expectedCount -= int(self.services['volume']['size'])
    response = matchResourceCount(self.apiclient, expectedCount, RESOURCE_PRIMARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    return
