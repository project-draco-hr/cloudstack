def set_rules(self, req):
    body = req.body
    doc = xmlobject.loads(body)
    vm_name = doc.vmName.text_
    vm_id = doc.vmId.text_
    vm_ip = doc.vmIp.text_
    vm_mac = doc.vmMac.text_
    sig = doc.signature.text_
    seq = doc.sequenceNumber.text_

    def parse_rules(rules, lst):
        for i in self._self_list(rules):
            r = SGRule()
            r.protocol = i.protocol.text_
            r.start_port = i.startPort.text_
            r.end_port = i.endPort.text_
            if hasattr(i, 'ip'):
                for ip in self._self_list(i.ip):
                    r.allowed_ips.append(ip.text_)
            lst.append(r)
    i_rules = []
    if hasattr(doc, 'ingressRules'):
        parse_rules(doc.ingressRules, i_rules)
    e_rules = []
    if hasattr(doc, 'egressRules'):
        parse_rules(doc.egressRules, e_rules)

    def create_chain(name):
        try:
            sglib.ShellCmd(('iptables -F %s' % name))()
        except Exception:
            sglib.ShellCmd(('iptables -N %s' % name))()

    def apply_rules(rules, chainname, direction, action, current_set_names):
        create_chain(chainname)
        for r in i_rules:
            allow_any = False
            if ('0.0.0.0/0' in r.allowed_ips):
                allow_any = True
                r.allowed_ips.remove('0.0.0.0/0')
            if r.allowed_ips:
                setname = '_'.join([chainname, r.protocol, r.start_port, r.end_port])
                ipset = IPSet(setname, r.allowed_ips)
                ipset.create()
                current_set_names.append(setname)
                if (r.protocol == 'all'):
                    cmd = ['iptables -I', chainname, '-m state --state NEW -m set --set', setname, direction, '-j', action]
                    sglib.ShellCmd(' '.join(cmd))()
                elif (r.protocol != 'icmp'):
                    port_range = ':'.join([r.start_port, r.end_port])
                    cmd = ['iptables', '-I', chainname, '-p', r.protocol, '-m', r.protocol, '--dport', port_range, '-m state --state NEW -m set --set', setname, direction, '-j', action]
                    sglib.ShellCmd(' '.join(cmd))()
                else:
                    port_range = '/'.join([r.start_port, r.end_port])
                    if (r.start_port == '-1'):
                        port_range = 'any'
                    cmd = ['iptables', '-I', i_chain_name, '-p', 'icmp', '--icmp-type', port_range, '-m set --set', setname, direction, '-j', action]
                    sglib.ShellCmd(' '.join(cmd))()
            if (allow_any and (r.protocol != 'all')):
                if (r.protocol != 'icmp'):
                    port_range = ':'.join([r.start_port, r.end_port])
                    cmd = ['iptables', '-I', chainname, '-p', r.protocol, '-m', r.protocol, '--dport', port_range, '-m', 'state', '--state', 'NEW', '-j', action]
                    sglib.ShellCmd(' '.join(cmd))()
                else:
                    port_range = '/'.join([r.start_port, r.end_port])
                    if (r.start_port == '-1'):
                        port_range = 'any'
                    cmd = ['iptables', '-I', i_chain_name, '-p', 'icmp', '--icmp-type', port_range, '-j', action]
                    sglib.ShellCmd(' '.join(cmd))()
    current_sets = []
    i_chain_name = (vm_name + '-in')
    apply_rules(i_rules, i_chain_name, 'src', 'ACCEPT', current_sets)
    e_chain_name = (vm_name + '-eg')
    apply_rules(e_rules, e_chain_name, 'dst', 'RETURN', current_sets)
    if e_rules:
        sglib.ShellCmd(('iptables -A %s -j RETURN' % e_chain_name))
    else:
        sglib.ShellCmd(('iptables -A %s -j DROP' % e_chain_name))
    sglib.ShellCmd(('iptables -A %s -j DROP' % i_chain_name))
    IPSet.destroy_sets(current_sets)
