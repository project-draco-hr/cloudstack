{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long loadBalancerId=(Long)params.get(BaseCmd.Properties.ID.getName());
  LoadBalancerVO loadBalancer=getManagementServer().findLoadBalancerById(loadBalancerId.longValue());
  if (loadBalancer == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find load balancer rule, with id " + loadBalancerId);
  }
 else   if (account != null) {
    if (!isAdmin(account.getType())) {
      if (loadBalancer.getAccountId() != account.getId()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Account " + account.getAccountName() + " does not own load balancer rule "+ loadBalancer.getName()+ " (id:"+ loadBalancerId+ ")");
      }
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to delete load balancer rule " + loadBalancer.getName() + " (id:"+ loadBalancerId+ "), permission denied.");
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  long jobId=getManagementServer().deleteLoadBalancerAsync(userId,loadBalancerId.longValue());
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for DeleteLoadBalancerRule comamnd");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("DeleteLoadBalancerRule command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  return returnValues;
}
