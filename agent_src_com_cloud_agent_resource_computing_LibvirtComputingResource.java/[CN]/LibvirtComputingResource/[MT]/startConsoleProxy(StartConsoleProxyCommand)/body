{
  ConsoleProxyVO console=cmd.getProxy();
  List<interfaceDef> nics=null;
  try {
    nics=createSysVMNetworks(console.getGuestMacAddress(),console.getPrivateMacAddress(),console.getPublicMacAddress(),console.getVlanId());
    List<diskDef> disks=createSystemVMDisk(cmd.getVolumes());
    String dataDiskPath=null;
    for (    diskDef disk : disks) {
      if (disk.getDiskLabel().equalsIgnoreCase("vdb")) {
        dataDiskPath=disk.getDiskPath();
      }
    }
    String bootArgs=cmd.getBootArgs() + " zone=" + _dcId;
    bootArgs+=" pod=" + _pod;
    bootArgs+=" guid=Proxy." + console.getId();
    bootArgs+=" proxy_vm=" + console.getId();
    bootArgs+=" localgw=" + _localGateway;
    String vmName=cmd.getVmName();
    patchSystemVm(bootArgs,dataDiskPath,vmName);
    String uuid=UUID.nameUUIDFromBytes(vmName.getBytes()).toString();
    String domXML=defineVMXML(cmd.getVmName(),uuid,console.getRamSize(),1,_domrArch,nics,disks,console.getVncPassword(),"Fedora 12");
    s_logger.debug(domXML);
    startDomain(vmName,domXML);
  }
 catch (  LibvirtException e) {
    s_logger.debug("Failed to start domr: " + e.toString());
    return e.toString();
  }
catch (  InternalErrorException e) {
    s_logger.debug("Failed to start domr: " + e.toString());
    return e.toString();
  }
  return null;
}
