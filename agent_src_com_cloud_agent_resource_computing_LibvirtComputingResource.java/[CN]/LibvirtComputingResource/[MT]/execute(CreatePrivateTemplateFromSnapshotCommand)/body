{
  String templateFolder=cmd.getAccountId() + File.separator + cmd.getNewTemplateId();
  String templateInstallFolder="template/tmpl/" + templateFolder;
  String snapshotPath=cmd.getSnapshotUuid();
  String tmplName=UUID.randomUUID().toString();
  String tmplFileName=tmplName + ".qcow2";
  StoragePool secondaryPool;
  try {
    Connect conn=LibvirtConnection.getConnection();
    secondaryPool=_storageResource.getStoragePoolbyURI(conn,new URI(cmd.getSecondaryStoragePoolURL()));
    LibvirtStoragePoolDef spd=_storageResource.getStoragePoolDef(conn,secondaryPool);
    String templatePath=spd.getTargetPath() + File.separator + templateInstallFolder;
    _storage.mkdirs(templatePath);
    String tmplPath=templateInstallFolder + File.separator + tmplFileName;
    Script command=new Script(_createTmplPath,_timeout,s_logger);
    command.add("-t",templatePath);
    command.add("-n",tmplFileName);
    command.add("-f",snapshotPath);
    command.execute();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,_storage);
    Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure("QCOW2 Processor",params);
    FormatInfo info=qcow2Processor.process(templatePath,null,tmplName);
    TemplateLocation loc=new TemplateLocation(_storage,templatePath);
    loc.create(1,true,tmplName);
    loc.addFormat(info);
    loc.save();
    return new CreatePrivateTemplateAnswer(cmd,true,"",tmplPath,info.virtualSize,info.size,tmplName,info.format);
  }
 catch (  LibvirtException e) {
    return new CreatePrivateTemplateAnswer(cmd,false,e.getMessage());
  }
catch (  URISyntaxException e) {
    return new CreatePrivateTemplateAnswer(cmd,false,e.getMessage());
  }
catch (  ConfigurationException e) {
    return new CreatePrivateTemplateAnswer(cmd,false,e.getMessage());
  }
catch (  InternalErrorException e) {
    return new CreatePrivateTemplateAnswer(cmd,false,e.getMessage());
  }
catch (  IOException e) {
    return new CreatePrivateTemplateAnswer(cmd,false,e.getMessage());
  }
}
