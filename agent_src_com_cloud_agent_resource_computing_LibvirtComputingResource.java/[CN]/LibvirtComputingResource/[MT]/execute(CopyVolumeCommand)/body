{
  boolean copyToSecondary=cmd.toSecondaryStorage();
  String volumePath=cmd.getVolumePath();
  StorageFilerTO pool=cmd.getPool();
  String secondaryStorageUrl=cmd.getSecondaryStorageURL();
  StoragePool primaryPool=null;
  Connect conn;
  try {
    conn=LibvirtConnection.getConnection();
    primaryPool=_storageResource.getStoragePool(conn,pool.getUuid());
    LibvirtStoragePoolDef primary=_storageResource.getStoragePoolDef(conn,primaryPool);
    String primaryMountPath=primary.getTargetPath();
    StoragePool secondaryStoragePool=_storageResource.getStoragePoolbyURI(conn,new URI(secondaryStorageUrl));
    LibvirtStoragePoolDef spd=_storageResource.getStoragePoolDef(conn,secondaryStoragePool);
    String ssPmountPath=spd.getTargetPath();
    String volumeName=UUID.randomUUID().toString();
    if (copyToSecondary) {
      StorageVol volume=_storageResource.getVolume(conn,primaryPool,volumePath);
      String volumeDestPath=ssPmountPath + File.separator + "volumes/"+ cmd.getVolumeId()+ File.separator;
      _storageResource.copyVolume(volumePath,volumeDestPath,volumeName,_cmdsTimeout);
      return new CopyVolumeAnswer(cmd,true,null,null,volumeName);
    }
 else {
      volumePath=ssPmountPath + File.separator + "volumes/"+ cmd.getVolumeId()+ File.separator+ volumePath;
      _storageResource.copyVolume(volumePath,primaryMountPath,volumeName,_cmdsTimeout);
      return new CopyVolumeAnswer(cmd,true,null,null,primaryMountPath + File.separator + volumeName);
    }
  }
 catch (  LibvirtException e) {
    return new CopyVolumeAnswer(cmd,false,e.toString(),null,null);
  }
catch (  URISyntaxException e) {
    return new CopyVolumeAnswer(cmd,false,e.toString(),null,null);
  }
catch (  InternalErrorException e) {
    return new CopyVolumeAnswer(cmd,false,e.toString(),null,null);
  }
}
