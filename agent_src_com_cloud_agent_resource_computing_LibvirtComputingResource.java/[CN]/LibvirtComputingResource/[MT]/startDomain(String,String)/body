{
  boolean failed=false;
  Domain dm=null;
  try {
    dm=_conn.domainDefineXML(domainXML);
  }
 catch (  final LibvirtException e) {
    s_logger.warn("Failed to define domain " + vmName + ": "+ e.getMessage());
    failed=true;
  }
 finally {
    try {
      if (dm != null) {
        dm.free();
      }
    }
 catch (    final LibvirtException e) {
    }
  }
  Domain dmOld=null;
  Domain dmNew=null;
  try {
    if (failed) {
      dmOld=_conn.domainLookupByUUID(UUID.nameUUIDFromBytes(vmName.getBytes()));
      dmOld.undefine();
      dmNew=_conn.domainDefineXML(domainXML);
    }
  }
 catch (  final LibvirtException e) {
    s_logger.warn("Failed to define domain (second time) " + vmName + ": "+ e.getMessage());
    throw e;
  }
catch (  Exception e) {
    s_logger.warn("Failed to define domain (second time) " + vmName + ": "+ e.getMessage());
    throw new InternalErrorException(e.toString());
  }
 finally {
    try {
      if (dmOld != null) {
        dmOld.free();
      }
      if (dmNew != null) {
        dmNew.free();
      }
    }
 catch (    final LibvirtException e) {
    }
  }
  try {
    dm=_conn.domainLookupByUUID(UUID.nameUUIDFromBytes(vmName.getBytes()));
    dm.create();
  }
 catch (  LibvirtException e) {
    s_logger.warn("Failed to start domain: " + vmName + ": "+ e.getMessage());
    throw e;
  }
 finally {
    try {
      if (dm != null) {
        dm.free();
      }
    }
 catch (    final LibvirtException e) {
    }
  }
  return null;
}
