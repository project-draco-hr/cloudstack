{
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  LibvirtVMDef vm=null;
  State state=State.Stopped;
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
synchronized (_vms) {
      _vms.put(vmName,State.Starting);
    }
    vm=createVMFromSpec(vmSpec);
    createVbd(conn,vmSpec,vmName,vm);
    createVifs(conn,vmSpec,vm);
    s_logger.debug("starting " + vmName + ": "+ vm.toString());
    startDomain(conn,vmName,vm.toString());
    Script.runSimpleBashScript("virsh schedinfo " + vmName + " --set cpu_shares="+ vmSpec.getCpus() * vmSpec.getSpeed());
    NicTO[] nics=vmSpec.getNics();
    for (    NicTO nic : nics) {
      if (nic.getIsolationUri() != null && nic.getIsolationUri().getScheme().equalsIgnoreCase(IsolationType.Ec2.toString())) {
        if (vmSpec.getType() != VirtualMachine.Type.User) {
          default_network_rules_for_systemvm(conn,vmName);
          break;
        }
 else {
          default_network_rules(conn,vmName,nic,vmSpec.getId());
        }
      }
    }
    for (    DiskDef disk : vm.getDevices().getDisks()) {
      if (disk.isAttachDeferred()) {
        attachOrDetachDevice(conn,true,vmName,disk.toString());
      }
    }
    state=State.Running;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    s_logger.warn("Exception ",e);
    if (conn != null) {
      handleVmStartFailure(conn,vmName,vm);
    }
    return new StartAnswer(cmd,e.getMessage());
  }
 finally {
synchronized (_vms) {
      if (state != State.Stopped) {
        _vms.put(vmName,state);
      }
 else {
        _vms.remove(vmName);
      }
    }
  }
}
