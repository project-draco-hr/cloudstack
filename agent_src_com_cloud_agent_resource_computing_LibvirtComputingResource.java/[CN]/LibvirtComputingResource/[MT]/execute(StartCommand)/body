{
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  LibvirtVMDef vm=null;
  State state=State.Stopped;
  try {
synchronized (_vms) {
      _vms.put(vmName,State.Starting);
    }
    vm=createVMFromSpec(vmSpec);
    createVbd(vmSpec,vmName,vm);
    createVifs(vmSpec,vm);
    s_logger.debug("starting " + vmName + ": "+ vm.toString());
    startDomain(vmName,vm.toString());
    Monitor monitor=vmSpec.getMonitor();
    if (monitor != null && monitor instanceof SshMonitor) {
      SshMonitor sshMon=(SshMonitor)monitor;
      String privateIp=sshMon.getIp();
      int cmdPort=sshMon.getPort();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Ping command port, " + privateIp + ":"+ cmdPort);
      }
      String result=_virtRouterResource.connect(privateIp,cmdPort);
      if (result != null) {
        throw new CloudRuntimeException("Can not ping System vm " + vmName + "due to:"+ result);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Ping command port succeeded for vm " + vmName);
      }
    }
    for (    DiskDef disk : vm.getDevices().getDisks()) {
      if (disk.isAttachDeferred()) {
        attachOrDetachDisk(true,vmName,disk.getDiskPath());
      }
    }
    state=State.Running;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    s_logger.warn("Exception ",e);
    handleVmStartFailure(vmName,vm);
    return new StartAnswer(cmd,e.getMessage());
  }
 finally {
synchronized (_vms) {
      if (state != State.Stopped) {
        _vms.put(vmName,state);
      }
 else {
        _vms.remove(vmName);
      }
    }
  }
}
