{
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  LibvirtVMDef vm=null;
  State state=State.Stopped;
  try {
synchronized (_vms) {
      _vms.put(vmName,State.Starting);
    }
    vm=createVMFromSpec(vmSpec);
    createVbd(vmSpec,vmName,vm);
    createVifs(vmSpec,vm);
    s_logger.debug("starting " + vmName + ": "+ vm.toString());
    startDomain(vmName,vm.toString());
    if (vmSpec.getType() != VirtualMachine.Type.User) {
      default_network_rules_for_systemvm(vmName);
    }
 else {
      default_network_rules(vmName,vmSpec.getNics()[0].getIp(),vmSpec.getId(),vmSpec.getNics()[0].getMac());
    }
    for (    DiskDef disk : vm.getDevices().getDisks()) {
      if (disk.isAttachDeferred()) {
        attachOrDetachDisk(true,vmName,disk.getDiskPath());
      }
    }
    state=State.Running;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    s_logger.warn("Exception ",e);
    handleVmStartFailure(vmName,vm);
    return new StartAnswer(cmd,e.getMessage());
  }
 finally {
synchronized (_vms) {
      if (state != State.Stopped) {
        _vms.put(vmName,state);
      }
 else {
        _vms.remove(vmName);
      }
    }
  }
}
