{
  Map<String,State> changes=null;
synchronized (_vms) {
    _vms.clear();
    changes=sync();
  }
  final List<Object> info=getHostInfo();
  final StartupRoutingCommand cmd=new StartupRoutingCommand((Integer)info.get(0),(Long)info.get(1),(Long)info.get(2),(Long)info.get(4),(String)info.get(3),HypervisorType.KVM,RouterPrivateIpStrategy.HostLocal);
  cmd.setStateChanges(changes);
  fillNetworkInformation(cmd);
  cmd.getHostDetails().putAll(getVersionStrings());
  cmd.setPool(_pool);
  cmd.setCluster(_clusterId);
  cmd.setGatewayIpAddress(_localGateway);
  StartupStorageCommand sscmd=null;
  try {
    KVMStoragePool localStoragePool=_storagePoolMgr.createStoragePool(_localStorageUUID,"localhost",_localStoragePath,StoragePoolType.Filesystem);
    com.cloud.agent.api.StoragePoolInfo pi=new com.cloud.agent.api.StoragePoolInfo(localStoragePool.getUuid(),cmd.getPrivateIpAddress(),_localStoragePath,_localStoragePath,StoragePoolType.Filesystem,localStoragePool.getCapacity(),localStoragePool.getUsed());
    sscmd=new StartupStorageCommand();
    sscmd.setPoolInfo(pi);
    sscmd.setGuid(pi.getUuid());
    sscmd.setDataCenter(_dcId);
    sscmd.setResourceType(Storage.StorageResourceType.STORAGE_POOL);
  }
 catch (  CloudRuntimeException e) {
  }
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
 else {
    return new StartupCommand[]{cmd};
  }
}
