{
  SecondaryStorageVmVO secVm=cmd.getSecondaryStorageVmVO();
  List<interfaceDef> nics=null;
  try {
    nics=createSysVMNetworks(secVm.getGuestMacAddress(),secVm.getPrivateMacAddress(),secVm.getPublicMacAddress(),secVm.getVlanId());
    List<diskDef> disks=createSystemVMDisk(cmd.getVolumes());
    String dataDiskPath=null;
    for (    diskDef disk : disks) {
      if (disk.getDiskLabel().equalsIgnoreCase("vdb")) {
        dataDiskPath=disk.getDiskPath();
      }
    }
    String vmName=cmd.getVmName();
    String bootArgs=cmd.getBootArgs();
    bootArgs+=" zone=" + _dcId;
    bootArgs+=" pod=" + _pod;
    bootArgs+=" localgw=" + _localGateway;
    patchSystemVm(bootArgs,dataDiskPath,vmName);
    String uuid=UUID.nameUUIDFromBytes(vmName.getBytes()).toString();
    String domXML=defineVMXML(cmd.getVmName(),uuid,secVm.getRamSize(),1,_domrArch,nics,disks,secVm.getVncPassword(),cmd.getGuestOSDescription());
    s_logger.debug(domXML);
    startDomain(vmName,domXML);
  }
 catch (  LibvirtException e) {
    s_logger.debug("Failed to start domr: " + e.toString());
    return e.toString();
  }
catch (  InternalErrorException e) {
    s_logger.debug("Failed to start domr: " + e.toString());
    return e.toString();
  }
  return null;
}
