{
  List<diskDef> disks=new ArrayList<diskDef>();
  List<VolumeVO> rootVolumes=findVolumes(vols,VolumeType.ROOT,true);
  if (rootVolumes.size() != 1) {
    throw new InternalErrorException("Could not find UserVM root disk.");
  }
  VolumeVO rootVolume=rootVolumes.get(0);
  String isoPath=null;
  if (isoURI != null) {
    StorageVol isoVol=getVolume(_conn,isoURI);
    if (isoVol != null) {
      isoPath=isoVol.getPath();
    }
 else     throw new InternalErrorException("Can't find iso volume");
  }
  List<VolumeVO> dataVolumes=findVolumes(vols,VolumeType.DATADISK,false);
  VolumeVO dataVolume=null;
  if (dataVolumes.size() > 0)   dataVolume=dataVolumes.get(0);
  diskDef.diskBus diskBusType=getGuestDiskModel(guestOSType);
  diskDef hda=new diskDef();
  hda.defFileBasedDisk(rootVolume.getPath(),"vda",diskBusType,diskDef.diskFmtType.QCOW2);
  disks.add(hda);
  if (dataVolume != null) {
    diskDef hdb=new diskDef();
    hdb.defFileBasedDisk(dataVolume.getPath(),"vdb",diskBusType,diskDef.diskFmtType.QCOW2);
    if (!isCentosHost()) {
      hdb.setAttachDeferred(true);
    }
    disks.add(hdb);
  }
  if (isoPath != null) {
    diskDef hdc=new diskDef();
    hdc.defFileBasedDisk(isoPath,"hdc",diskDef.diskBus.IDE,diskDef.diskFmtType.RAW);
    hdc.setDeviceType(diskDef.deviceType.CDROM);
    disks.add(hdc);
  }
  return disks;
}
