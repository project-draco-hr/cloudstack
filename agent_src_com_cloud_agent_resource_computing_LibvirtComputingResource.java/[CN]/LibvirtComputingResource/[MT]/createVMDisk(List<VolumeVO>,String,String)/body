{
  List<DiskDef> disks=new ArrayList<DiskDef>();
  List<VolumeVO> rootVolumes=findVolumes(vols,VolumeType.ROOT,true);
  if (rootVolumes.size() != 1) {
    throw new InternalErrorException("Could not find UserVM root disk.");
  }
  VolumeVO rootVolume=rootVolumes.get(0);
  String isoPath=null;
  if (isoURI != null) {
    StorageVol isoVol=getVolume(_conn,isoURI);
    if (isoVol != null) {
      isoPath=isoVol.getPath();
    }
 else {
      throw new InternalErrorException("Can't find iso volume");
    }
  }
  List<VolumeVO> dataVolumes=findVolumes(vols,VolumeType.DATADISK,false);
  VolumeVO dataVolume=null;
  if (dataVolumes.size() > 0) {
    dataVolume=dataVolumes.get(0);
  }
  DiskDef.diskBus diskBusType=getGuestDiskModel(guestOSType);
  DiskDef hda=new DiskDef();
  hda.defFileBasedDisk(rootVolume.getPath(),"vda",diskBusType,DiskDef.diskFmtType.QCOW2);
  disks.add(hda);
  if (dataVolume != null) {
    DiskDef hdb=new DiskDef();
    hdb.defFileBasedDisk(dataVolume.getPath(),"vdb",diskBusType,DiskDef.diskFmtType.QCOW2);
    if (!isCentosHost()) {
      hdb.setAttachDeferred(true);
    }
    disks.add(hdb);
  }
  DiskDef hdc=new DiskDef();
  hdc.defFileBasedDisk(isoPath,"hdc",DiskDef.diskBus.IDE,DiskDef.diskFmtType.RAW);
  hdc.setDeviceType(DiskDef.deviceType.CDROM);
  disks.add(hdc);
  return disks;
}
