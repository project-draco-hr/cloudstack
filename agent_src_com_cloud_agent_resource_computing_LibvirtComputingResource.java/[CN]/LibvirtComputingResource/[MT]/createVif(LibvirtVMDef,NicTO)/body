{
  InterfaceDef intf=new InterfaceDef();
  String vlanId=null;
  if (nic.getBroadcastType() == BroadcastDomainType.Vlan) {
    URI broadcastUri=nic.getBroadcastUri();
    vlanId=broadcastUri.getHost();
    s_logger.debug("vlanId: " + vlanId);
  }
  if (nic.getType() == TrafficType.Guest) {
    if (nic.getBroadcastType() == BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase("untagged")) {
      String brName=createVlanBr(vlanId,_pifs.first());
      intf.defBridgeNet(brName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
    }
 else {
      intf.defBridgeNet(_privBridgeName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
    }
  }
 else   if (nic.getType() == TrafficType.Control) {
    intf.defPrivateNet(_privNwName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
  }
 else   if (nic.getType() == TrafficType.Public) {
    if (nic.getBroadcastType() == BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase("untagged")) {
      String brName=createVlanBr(vlanId,_pifs.second());
      intf.defBridgeNet(brName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
    }
 else {
      intf.defBridgeNet(_publicBridgeName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
    }
  }
 else   if (nic.getType() == TrafficType.Management) {
    intf.defBridgeNet(_privBridgeName,null,nic.getMac(),InterfaceDef.nicModel.VIRTIO);
  }
  vm.getDevices().addDevice(intf);
  return intf;
}
