{
  List<interfaceDef> nics=null;
  try {
    String uuid=UUID.nameUUIDFromBytes(cmd.getVmName().getBytes()).toString();
    nics=createUserVMNetworks(cmd);
    List<diskDef> disks=createVMDisk(cmd.getVolumes(),cmd.getGuestOSDescription(),cmd.getISOPath());
    String vmDomainXML=defineVMXML(cmd.getVmName(),uuid,cmd.getRamSize(),cmd.getCpu(),cmd.getArch(),nics,disks,cmd.getVncPassword(),cmd.getGuestOSDescription());
    s_logger.debug(vmDomainXML);
    startDomain(cmd.getVmName(),vmDomainXML);
    for (    diskDef disk : disks) {
      if (disk.isAttachDeferred()) {
        attachOrDetachDisk(true,cmd.getVmName(),disk.getDiskPath());
      }
    }
    return null;
  }
 catch (  LibvirtException e) {
    if (nics != null)     cleanupVMNetworks(nics);
    s_logger.error("Unable to start VM: ",e);
    return "Unable to start VM due to: " + e.getMessage();
  }
catch (  InternalErrorException e) {
    if (nics != null)     cleanupVMNetworks(nics);
    s_logger.error("Unable to start VM: ",e);
    return "Unable to start VM due to: " + e.getMessage();
  }
catch (  URISyntaxException e) {
    if (nics != null)     cleanupVMNetworks(nics);
    s_logger.error("Unable to start VM: ",e);
    return "Unable to start VM due to: " + e.getMessage();
  }
}
