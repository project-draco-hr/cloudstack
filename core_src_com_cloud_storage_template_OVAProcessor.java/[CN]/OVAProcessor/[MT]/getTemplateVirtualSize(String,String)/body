{
  long virtualSize=0;
  String templateFileFullPath=templatePath.endsWith(File.separator) ? templatePath : templatePath + File.separator;
  templateFileFullPath+=templateName.endsWith(ImageFormat.OVA.getFileExtension()) ? templateName : templateName + "." + ImageFormat.OVA.getFileExtension();
  String ovfFileName=getOVFFilePath(templateFileFullPath);
  if (ovfFileName == null) {
    String msg="Unable to locate OVF file in template package directory: " + templatePath;
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
  try {
    Document ovfDoc=null;
    ovfDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(ovfFileName));
    Element disk=(Element)ovfDoc.getElementsByTagName("Disk").item(0);
    virtualSize=Long.parseLong(disk.getAttribute("ovf:capacity"));
    String allocationUnits=disk.getAttribute("ovf:capacityAllocationUnits");
    if ((virtualSize != 0) && (allocationUnits != null)) {
      long units=1;
      if (allocationUnits.equalsIgnoreCase("KB") || allocationUnits.equalsIgnoreCase("KiloBytes") || allocationUnits.equalsIgnoreCase("byte * 2^10")) {
        units=1024;
      }
 else       if (allocationUnits.equalsIgnoreCase("MB") || allocationUnits.equalsIgnoreCase("MegaBytes") || allocationUnits.equalsIgnoreCase("byte * 2^20")) {
        units=1024 * 1024;
      }
 else       if (allocationUnits.equalsIgnoreCase("GB") || allocationUnits.equalsIgnoreCase("GigaBytes") || allocationUnits.equalsIgnoreCase("byte * 2^30")) {
        units=1024 * 1024 * 1024;
      }
      virtualSize=virtualSize * units;
    }
 else {
      throw new InternalErrorException("Failed to read capacity and capacityAllocationUnits from the OVF file: " + ovfFileName);
    }
    return virtualSize;
  }
 catch (  Exception e) {
    String msg="Unable to parse OVF XML document to get the virtual disk size due to" + e;
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
}
