{
  ComponentContext.initComponentsLifeCycle();
  AccountVO acct=new AccountVO(200L);
  acct.setType(Account.ACCOUNT_TYPE_NORMAL);
  acct.setAccountName("user");
  acct.setDomainId(domainId);
  UserVO user=new UserVO(1,"testuser","password","firstname","lastName","email","timezone",UUID.randomUUID().toString());
  CallContext.register(user,acct);
  when(_acctMgr.finalizeOwner((Account)anyObject(),anyString(),anyLong(),anyLong())).thenReturn(acct);
  when(_processor.getType()).thenReturn("mock");
  when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);
  List<AffinityGroupProcessor> affinityProcessors=new ArrayList<AffinityGroupProcessor>();
  affinityProcessors.add(_processor);
  _affinityService.setAffinityGroupProcessors(affinityProcessors);
  AffinityGroupVO group=new AffinityGroupVO("group1","mock","mock group",domainId,200L,ControlledEntity.ACLType.Account);
  Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);
  Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);
  Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(),Matchers.anyString())).thenReturn(group);
  Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(),anyBoolean())).thenReturn(group);
  Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);
  Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());
}
