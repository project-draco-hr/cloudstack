{
  CreateTemplateCmd mockCreateCmd=mock(CreateTemplateCmd.class);
  when(mockCreateCmd.getTemplateName()).thenReturn("test");
  when(mockCreateCmd.getTemplateTag()).thenReturn(null);
  when(mockCreateCmd.getBits()).thenReturn(64);
  when(mockCreateCmd.getRequiresHvm()).thenReturn(true);
  when(mockCreateCmd.isPasswordEnabled()).thenReturn(false);
  when(mockCreateCmd.isPublic()).thenReturn(false);
  when(mockCreateCmd.isFeatured()).thenReturn(false);
  when(mockCreateCmd.isDynamicallyScalable()).thenReturn(false);
  when(mockCreateCmd.getVolumeId()).thenReturn(null);
  when(mockCreateCmd.getSnapshotId()).thenReturn(1L);
  when(mockCreateCmd.getOsTypeId()).thenReturn(1L);
  when(mockCreateCmd.getEventDescription()).thenReturn("test");
  when(mockCreateCmd.getDetails()).thenReturn(null);
  Account mockTemplateOwner=mock(Account.class);
  SnapshotVO mockSnapshot=mock(SnapshotVO.class);
  when(snapshotDao.findById(anyLong())).thenReturn(mockSnapshot);
  when(mockSnapshot.getVolumeId()).thenReturn(1L);
  when(mockSnapshot.getState()).thenReturn(Snapshot.State.BackedUp);
  when(mockSnapshot.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.XenServer);
  doNothing().when(resourceLimitMgr).checkResourceLimit(any(Account.class),eq(Resource.ResourceType.template));
  doNothing().when(resourceLimitMgr).checkResourceLimit(any(Account.class),eq(Resource.ResourceType.secondary_storage),anyLong());
  GuestOSVO mockGuestOS=mock(GuestOSVO.class);
  when(guestOSDao.findById(anyLong())).thenReturn(mockGuestOS);
  when(tmpltDao.getNextInSequence(eq(Long.class),eq("id"))).thenReturn(1L);
  List<ImageStoreVO> mockRegionStores=new ArrayList<>();
  ImageStoreVO mockRegionStore=mock(ImageStoreVO.class);
  mockRegionStores.add(mockRegionStore);
  when(imgStoreDao.findRegionImageStores()).thenReturn(mockRegionStores);
  when(tmpltDao.persist(any(VMTemplateVO.class))).thenAnswer(new Answer<VMTemplateVO>(){
    @Override public VMTemplateVO answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object[] args=invocationOnMock.getArguments();
      return (VMTemplateVO)args[0];
    }
  }
);
  VMTemplateVO template=templateManager.createPrivateTemplateRecord(mockCreateCmd,mockTemplateOwner);
  assertTrue("Template in a region store should have cross zones set",template.isCrossZones());
}
