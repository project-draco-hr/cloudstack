{
  StoragePoolVO pool=null;
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  DiskProfile dskCh=null;
  if (volume.getVolumeType() == VolumeType.ROOT && Storage.ImageFormat.ISO != template.getFormat()) {
    dskCh=createDiskCharacteristics(volume,template,dc,offering);
  }
 else {
    dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  }
  dskCh.setHyperType(hyperType);
  Transaction txn=Transaction.currentTxn();
  VolumeType volType=volume.getVolumeType();
  VolumeTO created=null;
  int retry=_retry;
  while (--retry >= 0) {
    created=null;
    txn.start();
    long podId=pod.getId();
    pod=_podDao.lock(podId,true);
    if (pod == null) {
      txn.rollback();
      volume.setStatus(AsyncInstanceCreateStatus.Failed);
      volume.setDestroyed(true);
      _volsDao.persist(volume);
      throw new CloudRuntimeException("Unable to acquire lock on the pod " + podId);
    }
    pool=findStoragePool(dskCh,dc,pod,clusterId,offering,vm,template,avoidPools);
    if (pool == null) {
      txn.rollback();
      break;
    }
    avoidPools.add(pool);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Trying to create " + volume + " on "+ pool);
    }
    volume.setPoolId(pool.getId());
    _volsDao.persist(volume);
    txn.commit();
    CreateCommand cmd=null;
    VMTemplateStoragePoolVO tmpltStoredOn=null;
    if (volume.getVolumeType() == VolumeType.ROOT && Storage.ImageFormat.ISO != template.getFormat()) {
      tmpltStoredOn=_tmpltMgr.prepareTemplateForCreate(template,pool);
      if (tmpltStoredOn == null) {
        continue;
      }
      cmd=new CreateCommand(dskCh,tmpltStoredOn.getLocalDownloadPath(),new StorageFilerTO(pool));
    }
 else {
      cmd=new CreateCommand(dskCh,new StorageFilerTO(pool),size);
    }
    Answer answer=sendToPool(pool,cmd);
    if (answer != null && answer.getResult()) {
      created=((CreateAnswer)answer).getVolume();
      break;
    }
    volume.setPoolId(null);
    _volsDao.persist(volume);
    s_logger.debug("Retrying the create because it failed on pool " + pool);
  }
  if (created == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to create a volume for " + volume);
    }
    volume.setStatus(AsyncInstanceCreateStatus.Failed);
    volume.setDestroyed(true);
    _volsDao.persist(volume);
    return null;
  }
  volume.setStatus(AsyncInstanceCreateStatus.Created);
  volume.setFolder(pool.getPath());
  volume.setPath(created.getPath());
  volume.setSize(created.getSize());
  volume.setPoolType(pool.getPoolType());
  volume.setPodId(pod.getId());
  volume.setState(Volume.State.Created);
  _volsDao.persist(volume);
  return volume;
}
