{
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("DeployDestination cannot be null, cannot prepare Volumes for the vm: " + vm);
    }
    throw new CloudRuntimeException("Unable to prepare Volume for vm because DeployDestination is null");
  }
 else   if (dest.getStorageForDisks() == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("DeployDestination has no storage pools specified, cannot prepare Volumes for the vm: " + vm);
    }
    throw new CloudRuntimeException("Unable to prepare Volume for vm because DeployDestination DeployDestination has no storage pools specified");
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Preparing " + vols.size() + " volumes for "+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    if (vol.getPoolId() == null) {
      recreateVols.add(vol);
    }
 else {
      StoragePool assignedPool=dest.getStorageForDisks().get(vol);
      if (assignedPool == null) {
        throw new StorageUnavailableException("No storage pool assigned in DeployDestination, Unable to create " + vol,-1L);
      }
      if (vol.getPoolId() != assignedPool.getId()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Volume " + vol + " has to be recreated since a different storage pool "+ assignedPool+ " is assigned by deploymentPlanner");
          }
          recreateVols.add(vol);
        }
 else {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Volume " + vol + " is not recreatable! Cannot create storagepool...");
          }
          throw new StorageUnavailableException("Unable to create " + vol,assignedPool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Volume " + vol + " already has the poolId set to the assigned pool: "+ assignedPool);
        }
        StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      newVol.setRecreatable(true);
      if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
        StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
        dest.getStorageForDisks().put(newVol,poolWithOldVol);
        dest.getStorageForDisks().remove(vol);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Created new volume " + newVol + " for old volume "+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException("Unable to create " + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException("Unable to update the failure on a volume: " + newVol,e);
      }
      throw new StorageUnavailableException("Unable to create " + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException("Unable to update an CREATE operation succeeded on volume " + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Volume " + newVol + " is created on "+ created.second());
    }
    vm.addDisk(created.first());
  }
}
