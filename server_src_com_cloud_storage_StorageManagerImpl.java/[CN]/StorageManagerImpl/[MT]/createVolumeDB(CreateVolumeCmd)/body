{
  Account account=(Account)UserContext.current().getAccountObject();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Unable to create volume in domain " + domainId + ", permission denied.");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException("Unable to find account with name: " + accountName + " and domain ID: "+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded((Account)targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of volumes for account: " + targetAccount.getAccountName() + " has been exceeded.");
    rae.setResourceType("volume");
    throw rae;
  }
  if (cmd.getSnapshotId() == null) {
    Long zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException("Missing parameter, zoneid must be specified.");
    }
    Long diskOfferingId=cmd.getDiskOfferingId();
    Long size=cmd.getSize();
    if ((diskOfferingId == null) && (size == null)) {
      throw new InvalidParameterValueException("Missing parameter(s),either a positive volume size or a valid disk offering id must be specified.");
    }
 else     if ((diskOfferingId == null) && (size != null)) {
      boolean ok=validateCustomVolumeSizeRange(size);
      if (!ok) {
        throw new InvalidParameterValueException("Invalid size for custom volume creation: " + size);
      }
      List<DiskOfferingVO> privateTemplateList=_diskOfferingDao.findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
 else {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
      if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
        throw new InvalidParameterValueException("Please specify a valid disk offering.");
      }
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a snapshot with id " + snapshotId);
    }
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create volume from snapshot with id " + snapshotId + ", permission denied.");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a snapshot with id " + snapshotId + " for this account");
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException("Please add a host in the specified zone before creating a new volume.");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException("Please specify a zone that has at least one shared primary storage pool.");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setMirrorState(MirrorState.NOT_MIRRORED);
  volume.setDiskOfferingId(cmd.getDiskOfferingId());
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume=_volsDao.persist(volume);
  return volume;
}
