{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  boolean transitResult=false;
  try {
    for (    Volume volume : volumes) {
      try {
        if (!stateTransitTo(volume,Volume.Event.MigrationRequested)) {
          throw new ConcurrentOperationException("Failed to transit volume state");
        }
      }
 catch (      NoTransitionException e) {
        s_logger.debug("Failed to set state into migrate: " + e.toString());
        throw new CloudRuntimeException("Failed to set state into migrate: " + e.toString());
      }
    }
    transitResult=true;
  }
  finally {
    if (!transitResult) {
      txn.rollback();
    }
 else {
      txn.commit();
    }
  }
  List<Pair<StoragePoolVO,DestroyCommand>> destroyCmds=new ArrayList<Pair<StoragePoolVO,DestroyCommand>>();
  List<CopyVolumeAnswer> answers=new ArrayList<CopyVolumeAnswer>();
  try {
    for (    Volume volume : volumes) {
      String secondaryStorageURL=getSecondaryStorageURL(volume.getDataCenterId());
      StoragePoolVO srcPool=_storagePoolDao.findById(volume.getPoolId());
      CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true,_copyvolumewait);
      CopyVolumeAnswer cvAnswer;
      try {
        cvAnswer=(CopyVolumeAnswer)sendToPool(srcPool,cvCmd);
      }
 catch (      StorageUnavailableException e1) {
        throw new CloudRuntimeException("Failed to copy the volume from the source primary storage pool to secondary storage.",e1);
      }
      if (cvAnswer == null || !cvAnswer.getResult()) {
        throw new CloudRuntimeException("Failed to copy the volume from the source primary storage pool to secondary storage.");
      }
      String secondaryStorageVolumePath=cvAnswer.getVolumePath();
      cvCmd=new CopyVolumeCommand(volume.getId(),secondaryStorageVolumePath,destPool,secondaryStorageURL,false,_copyvolumewait);
      try {
        cvAnswer=(CopyVolumeAnswer)sendToPool(destPool,cvCmd);
      }
 catch (      StorageUnavailableException e1) {
        throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
      }
      if (cvAnswer == null || !cvAnswer.getResult()) {
        throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
      }
      answers.add(cvAnswer);
      destroyCmds.add(new Pair<StoragePoolVO,DestroyCommand>(srcPool,new DestroyCommand(srcPool,volume,null)));
    }
  }
  finally {
    if (answers.size() != volumes.size()) {
      for (      Volume volume : volumes) {
        try {
          stateTransitTo(volume,Volume.Event.OperationFailed);
        }
 catch (        NoTransitionException e) {
          s_logger.debug("Failed to change volume state: " + e.toString());
        }
      }
    }
 else {
      txn=Transaction.currentTxn();
      txn.start();
      transitResult=false;
      try {
        for (int i=0; i < volumes.size(); i++) {
          CopyVolumeAnswer answer=answers.get(i);
          VolumeVO volume=(VolumeVO)volumes.get(i);
          Long oldPoolId=volume.getPoolId();
          volume.setPath(answer.getVolumePath());
          volume.setFolder(answer.getVolumeFolder());
          volume.setPodId(destPool.getPodId());
          volume.setPoolId(destPool.getId());
          volume.setLastPoolId(oldPoolId);
          volume.setPodId(destPool.getPodId());
          try {
            stateTransitTo(volume,Volume.Event.OperationSucceeded);
          }
 catch (          NoTransitionException e) {
            s_logger.debug("Failed to change volume state: " + e.toString());
            throw new CloudRuntimeException("Failed to change volume state: " + e.toString());
          }
        }
        transitResult=true;
      }
  finally {
        if (!transitResult) {
          txn.rollback();
        }
 else {
          txn.commit();
        }
      }
    }
  }
  for (  Pair<StoragePoolVO,DestroyCommand> cmd : destroyCmds) {
    try {
      Answer cvAnswer=sendToPool(cmd.first(),cmd.second());
    }
 catch (    StorageUnavailableException e) {
      s_logger.debug("Unable to delete the old copy on storage pool: " + e.toString());
    }
  }
  return true;
}
