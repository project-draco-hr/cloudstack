{
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  DiskProfile dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  dskCh.setHyperType(vm.getHypervisorType());
  StoragePoolVO destPool=findStoragePool(dskCh,dc,pod,clusterId,vm,avoidPools);
  stateTransitTo(volume,Event.CopyRequested);
  VolumeHostVO volumeHostVO=_volumeHostDao.findByVolumeId(volume.getId());
  HostVO secStorage=_hostDao.findById(volumeHostVO.getHostId());
  String secondaryStorageURL=secStorage.getStorageUrl();
  String[] volumePath=volumeHostVO.getInstallPath().split("/");
  String volumeUUID=volumePath[volumePath.length - 1].split("\\.")[0];
  CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volumeUUID,destPool,secondaryStorageURL,false,_copyvolumewait);
  CopyVolumeAnswer cvAnswer;
  try {
    cvAnswer=(CopyVolumeAnswer)sendToPool(destPool,cvCmd);
  }
 catch (  StorageUnavailableException e1) {
    stateTransitTo(volume,Event.CopyFailed);
    throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
  }
  if (cvAnswer == null || !cvAnswer.getResult()) {
    stateTransitTo(volume,Event.CopyFailed);
    throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  volume.setPath(cvAnswer.getVolumePath());
  volume.setFolder(destPool.getPath());
  volume.setPodId(destPool.getPodId());
  volume.setPoolId(destPool.getId());
  volume.setPodId(destPool.getPodId());
  stateTransitTo(volume,Event.CopySucceeded);
  _volumeHostDao.remove(volumeHostVO.getId());
  txn.commit();
  return volume;
}
