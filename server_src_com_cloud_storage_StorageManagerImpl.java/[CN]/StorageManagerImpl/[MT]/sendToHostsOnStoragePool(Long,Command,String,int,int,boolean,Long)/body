{
  Answer answer=null;
  Long hostId=null;
  StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
  List<Long> hostsToAvoid=new ArrayList<Long>();
  int tryCount=0;
  boolean sendToVmHost=sendToVmResidesOn(cmd);
  if (chooseHostForStoragePool(storagePool,hostsToAvoid,sendToVmHost,vmId) == null) {
    try {
      Thread.sleep(3 * _pingInterval * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.error("Interrupted while waiting for any host on poolId: " + poolId + " to get connected. "+ e.getMessage());
    }
  }
  while ((hostId=chooseHostForStoragePool(storagePool,hostsToAvoid,sendToVmHost,vmId)) != null && tryCount++ < totalRetries) {
    String errMsg=basicErrMsg + " on host: " + hostId+ " try: "+ tryCount+ ", reason: ";
    try {
      HostVO hostVO=_hostDao.findById(hostId);
      if (shouldBeSnapshotCapable) {
        if (hostVO == null) {
          hostsToAvoid.add(hostId);
          continue;
        }
      }
      s_logger.debug("Trying to execute Command: " + cmd + " on host: "+ hostId+ " try: "+ tryCount);
      answer=_agentMgr.send(hostId,cmd);
      if (answer != null && answer.getResult()) {
        return answer;
      }
 else {
        s_logger.warn(errMsg + ((answer != null) ? answer.getDetails() : "null"));
        Thread.sleep(pauseBeforeRetry * 1000);
      }
    }
 catch (    AgentUnavailableException e1) {
      s_logger.warn(errMsg + e1.getMessage(),e1);
    }
catch (    OperationTimedoutException e1) {
      s_logger.warn(errMsg + e1.getMessage(),e1);
    }
catch (    InterruptedException e) {
      s_logger.warn(errMsg + e.getMessage(),e);
    }
  }
  s_logger.error(basicErrMsg + ", no hosts available to execute command: " + cmd);
  return answer;
}
