{
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Unable to create volume in domain " + domainId + ", permission denied.");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException("Unable to find account with name: " + accountName + " and domain ID: "+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  _resourceLimitMgr.checkResourceLimit(targetAccount,ResourceType.volume);
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException("Either disk Offering Id or snapshot Id must be passed whilst creating volume");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException("Missing parameter, zoneid must be specified.");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (size != null) {
      if (size > 0) {
        size=size * 1024 * 1024* 1024;
      }
 else {
        throw new InvalidParameterValueException("Disk size must be larger than 0");
      }
    }
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException("Missing parameter(s),either a positive volume size or a valid disk offering id must be specified.");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException("Please specify a valid disk offering.");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException("This disk offering requires a custom size specified");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException("This disk offering does not allow custom size");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException("Invalid size for custom volume creation: " + size + " ,max volume size is:"+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException("unable to find a snapshot with id " + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException("Snapshot id=" + snapshotId + " is not in "+ Snapshot.Status.BackedUp+ " state yet and can't be used for volume creation");
    }
    diskOfferingId=(cmd.getDiskOfferingId() != null) ? cmd.getDiskOfferingId() : snapshotCheck.getDiskOfferingId();
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new PermissionDeniedException("Unable to create volume from snapshot with id " + snapshotId + ", permission denied.");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new InvalidParameterValueException("unable to find a snapshot with id " + snapshotId + " for this account");
      }
    }
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException("Please add a host in the specified zone before creating a new volume.");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException("Please specify a zone that has at least one shared primary storage pool.");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  if (cmd.getSnapshotId() == null) {
    volume.setState(Volume.State.Allocated);
  }
 else {
    volume.setState(Volume.State.Creating);
  }
  volume=_volsDao.persist(volume);
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  UserContext.current().setEventDetails("Volume Id: " + volume.getId());
  _resourceLimitMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  return volume;
}
