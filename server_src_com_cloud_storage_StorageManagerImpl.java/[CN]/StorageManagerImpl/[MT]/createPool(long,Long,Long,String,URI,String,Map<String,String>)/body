{
  if (tags != null) {
    if (details == null) {
      details=new HashMap<String,String>();
    }
    String[] tokens=tags.split(",");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,"true");
    }
  }
  Hypervisor.Type hypervisorType=null;
  List<HostVO> hosts=null;
  if (podId != null) {
    hosts=_hostDao.listByHostPod(podId);
  }
 else {
    hosts=_hostDao.listByDataCenter(zoneId);
  }
  for (  HostVO h : hosts) {
    if (h.getType() == Type.Routing) {
      hypervisorType=h.getHypervisorType();
      break;
    }
  }
  if (hypervisorType == null) {
    if (_hypervisorType.equalsIgnoreCase("KVM")) {
      hypervisorType=Hypervisor.Type.KVM;
    }
 else {
      s_logger.debug("Couldn't find a host to serve in the server pool");
      return null;
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  s_logger.debug("createPool Params @ scheme - " + scheme + " storageHost - "+ storageHost+ " hostPath - "+ hostPath+ " port - "+ port);
  if (scheme.equalsIgnoreCase("nfs")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (hypervisorType == Hypervisor.Type.XenServer && clusterId == null) {
      throw new IllegalArgumentException("NFS need to have clusters specified for XenServers");
    }
  }
 else   if (scheme.equalsIgnoreCase("file")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,"localhost",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("iscsi")) {
    String[] tokens=hostPath.split("/");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (hypervisorType == Hypervisor.Type.XenServer && clusterId == null) {
        throw new IllegalArgumentException("IscsiLUN need to have clusters specified");
      }
      hostPath.replaceFirst("/","");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException("Not enough information for discovery " + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase("iso")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else {
    s_logger.warn("Unable to figure out the scheme for URI: " + uri);
    throw new IllegalArgumentException("Unable to figure out the scheme for URI: " + uri);
  }
  if (pool == null) {
    s_logger.warn("Unable to figure out the scheme for URI: " + uri);
    throw new IllegalArgumentException("Unable to figure out the scheme for URI: " + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty()) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException("Storage pool " + uri + " already in use by another pod (id="+ oldPodId+ ")","StoragePool",uri.toASCIIString());
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty() && !_hypervisorType.equalsIgnoreCase("KVM")) {
    throw new ResourceAllocationException("No host exists to associate a storage pool with");
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,"id");
  String uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  s_logger.debug("In createPool Setting poolId - " + poolId + " uuid - "+ uuid+ " zoneId - "+ zoneId+ " podId - "+ podId+ " poolName - "+ poolName);
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(zoneId);
  pool.setPodId(podId);
  pool.setName(poolName);
  pool.setClusterId(clusterId);
  pool.setStatus(Status.Up);
  pool=_storagePoolDao.persist(pool,details);
  if (_hypervisorType.equalsIgnoreCase("KVM") && allHosts.isEmpty()) {
    return pool;
  }
  s_logger.debug("In createPool Adding the pool to each of the hosts");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    boolean success=addPoolToHost(h.getId(),pool);
    if (success) {
      poolHosts.add(h);
    }
  }
  if (poolHosts.isEmpty()) {
    _storagePoolDao.delete(pool.getId());
    pool=null;
  }
 else {
    createCapacityEntry(pool);
  }
  return pool;
}
