{
  String providerName=cmd.getStorageProviderName();
  DataStoreProvider storeProvider=dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException("can't find storage provider: " + providerName);
    }
  }
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Long zoneId=cmd.getZoneId();
  ScopeType scopeType=ScopeType.CLUSTER;
  String scope=cmd.getScope();
  if (scope != null) {
    try {
      scopeType=Enum.valueOf(ScopeType.class,scope.toUpperCase());
    }
 catch (    Exception e) {
      throw new InvalidParameterValueException("invalid scope for pool " + scope);
    }
  }
  if (scopeType == ScopeType.CLUSTER && clusterId == null) {
    throw new InvalidParameterValueException("cluster id can't be null, if scope is cluster");
  }
 else   if (scopeType == ScopeType.ZONE && zoneId == null) {
    throw new InvalidParameterValueException("zone id can't be null, if scope is zone");
  }
  HypervisorType hypervisorType=HypervisorType.KVM;
  if (scopeType == ScopeType.ZONE) {
    clusterId=null;
    podId=null;
    String hypervisor=cmd.getHypervisor();
    if (hypervisor != null) {
      try {
        hypervisorType=HypervisorType.getType(hypervisor);
      }
 catch (      Exception e) {
        throw new InvalidParameterValueException("invalid hypervisor type " + hypervisor);
      }
    }
 else {
      throw new InvalidParameterValueException("Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.");
    }
    if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Any) {
      throw new InvalidParameterValueException("zone wide storage pool is not supported for hypervisor type " + hypervisor);
    }
  }
  Map<String,String> details=extractApiParamAsMap(cmd.getDetails());
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException("unable to find zone by id " + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put("zoneId",zone.getId());
  params.put("clusterId",clusterId);
  params.put("podId",podId);
  params.put("url",cmd.getUrl());
  params.put("tags",cmd.getTags());
  params.put("name",cmd.getStoragePoolName());
  params.put("details",details);
  params.put("providerName",storeProvider.getName());
  params.put("managed",cmd.isManaged());
  params.put("capacityBytes",cmd.getCapacityBytes());
  params.put("capacityIops",cmd.getCapacityIops());
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store;
  try {
    store=lifeCycle.initialize(params);
    if (scopeType == ScopeType.CLUSTER) {
      ClusterScope clusterScope=new ClusterScope(clusterId,podId,zoneId);
      lifeCycle.attachCluster(store,clusterScope);
    }
 else     if (scopeType == ScopeType.ZONE) {
      ZoneScope zoneScope=new ZoneScope(zoneId);
      lifeCycle.attachZone(store,zoneScope,hypervisorType);
    }
  }
 catch (  Exception e) {
    s_logger.debug("Failed to add data store",e);
    throw new CloudRuntimeException("Failed to add data store",e);
  }
  return (PrimaryDataStoreInfo)dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Primary);
}
