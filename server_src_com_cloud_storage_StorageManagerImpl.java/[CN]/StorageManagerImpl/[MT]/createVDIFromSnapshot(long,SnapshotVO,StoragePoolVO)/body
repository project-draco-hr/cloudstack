{
  String vdiUUID=null;
  Long snapshotId=snapshot.getId();
  Long volumeId=snapshot.getVolumeId();
  String primaryStoragePoolNameLabel=pool.getUuid();
  Long dcId=snapshot.getDataCenterId();
  String secondaryStoragePoolUrl=_snapMgr.getSecondaryStorageURL(snapshot);
  long accountId=snapshot.getAccountId();
  String backedUpSnapshotUuid=snapshot.getBackupSnapshotId();
  snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot.getVersion().trim().equals("2.1")) {
    VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to unable to find orignal volume:"+ volumeId+ ", try it later ");
    }
    VMTemplateVO template=_templateDao.findByIdIncludingRemoved(volume.getTemplateId());
    if (template == null) {
      throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to unalbe to find orignal template :"+ volume.getTemplateId()+ ", try it later ");
    }
    Long templateId=template.getId();
    Long tmpltAccountId=template.getAccountId();
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to this snapshot is being used, try it later ");
    }
    UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStoragePoolUrl,dcId,accountId,volumeId,templateId,tmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),"2.1");
    Answer answer=null;
    try {
      answer=sendToPool(pool,cmd);
    }
 catch (    StorageUnavailableException e) {
    }
 finally {
      _snapshotDao.unlockFromLockTable(snapshotId.toString());
    }
    if ((answer != null) && answer.getResult()) {
      _snapshotDao.updateSnapshotVersion(volumeId,"2.1","2.2");
    }
 else {
      return new Pair<String,String>(null,"Unable to upgrade snapshot from 2.1 to 2.2 for " + snapshot.getId());
    }
  }
  String basicErrMsg="Failed to create volume from " + snapshot.getName() + " on pool "+ pool;
  try {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.downloadSnapshotsFromSwift(snapshot);
    }
    CreateVolumeFromSnapshotCommand createVolumeFromSnapshotCommand=new CreateVolumeFromSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backedUpSnapshotUuid,snapshot.getName(),_createVolumeFromSnapshotWait);
    CreateVolumeFromSnapshotAnswer answer;
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException("failed to create volume from " + snapshotId + " due to this snapshot is being used, try it later ");
    }
    answer=(CreateVolumeFromSnapshotAnswer)sendToPool(pool,createVolumeFromSnapshotCommand);
    if (answer != null && answer.getResult()) {
      vdiUUID=answer.getVdi();
    }
 else {
      s_logger.error(basicErrMsg + " due to " + ((answer == null) ? "null" : answer.getDetails()));
      throw new CloudRuntimeException(basicErrMsg);
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg);
  }
 finally {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.deleteSnapshotsForVolume(secondaryStoragePoolUrl,dcId,accountId,volumeId);
    }
    _snapshotDao.unlockFromLockTable(snapshotId.toString());
  }
  return new Pair<String,String>(vdiUUID,basicErrMsg);
}
