{
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  boolean isRecursive=cmd.isRecursive();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  ListProjectResourcesCriteria listProjectResourcesCriteria=_accountMgr.buildACLSearchParameters(caller,domainId,isRecursive,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,cmd.listAll(),id);
  Filter searchFilter=new Filter(VolumeVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("volumeType",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and("instanceId",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and("systemUse",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join("diskOfferingSearch",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and("type",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or("nulltype",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join("vmSearch",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("volumeType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  sc.setJoinParameters("diskOfferingSearch","systemUse",1);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (type != null) {
    sc.setParameters("volumeType","%" + type + "%");
  }
  if (vmInstanceId != null) {
    sc.setParameters("instanceId",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (podId != null) {
    sc.setParameters("podId",podId);
  }
  sc.setJoinParameters("vmSearch","type",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters("state",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}
