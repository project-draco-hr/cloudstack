{
  Long id=cmd.getId();
  boolean forced=cmd.isForced();
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn("Unable to find pool:" + id);
    throw new InvalidParameterValueException("Unable to find pool by id " + id);
  }
  if (sPool.getStatus() != StoragePoolStatus.Maintenance) {
    s_logger.warn("Unable to delete storage id: " + id + " due to it is not in Maintenance state");
    throw new InvalidParameterValueException("Unable to delete storage due to it is not in Maintenance state, id: " + id);
  }
  if (sPool.isLocal()) {
    s_logger.warn("Unable to delete local storage id:" + id);
    throw new InvalidParameterValueException("Unable to delete local storage id: " + id);
  }
  Pair<Long,Long> vlms=_volsDao.getCountAndTotalByPool(id);
  if (forced) {
    if (vlms.first() > 0) {
      Pair<Long,Long> nonDstrdVlms=_volsDao.getNonDestroyedCountAndTotalByPool(id);
      if (nonDstrdVlms.first() > 0) {
        throw new CloudRuntimeException("Cannot delete pool " + sPool.getName() + " as there are associated "+ "non-destroyed vols for this pool");
      }
      List<VolumeVO> vols=_volsDao.listVolumesToBeDestroyed();
      for (      VolumeVO vol : vols) {
        AsyncCallFuture<VolumeApiResult> future=this.volService.expungeVolumeAsync(this.volFactory.getVolume(vol.getId()));
        try {
          future.get();
        }
 catch (        InterruptedException e) {
          s_logger.debug("expunge volume failed" + vol.getId(),e);
        }
catch (        ExecutionException e) {
          s_logger.debug("expunge volume failed" + vol.getId(),e);
        }
      }
    }
  }
 else {
    if (vlms.first() > 0) {
      throw new CloudRuntimeException("Cannot delete pool " + sPool.getName() + " as there are associated vols"+ " for this pool");
    }
  }
  StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
  if (lock == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Failed to acquire lock when deleting PrimaryDataStoreVO with ID: " + sPool.getId());
    }
    return false;
  }
  _storagePoolDao.releaseFromLockTable(lock.getId());
  s_logger.trace("Released lock for storage pool " + id);
  DataStoreProvider storeProvider=dataStoreProviderMgr.getDataStoreProvider(sPool.getStorageProviderName());
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=dataStoreMgr.getDataStore(sPool.getId(),DataStoreRole.Primary);
  return lifeCycle.deleteDataStore(store);
}
