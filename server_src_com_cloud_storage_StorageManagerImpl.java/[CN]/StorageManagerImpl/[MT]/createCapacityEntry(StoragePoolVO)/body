{
  SearchCriteria<CapacityVO> capacitySC=_capacityDao.createSearchCriteria();
  capacitySC.addAnd("hostOrPoolId",SearchCriteria.Op.EQ,storagePool.getId());
  capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,storagePool.getDataCenterId());
  capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,CapacityVO.CAPACITY_TYPE_STORAGE);
  List<CapacityVO> capacities=_capacityDao.search(capacitySC,null);
  if (capacities.size() == 0) {
    CapacityVO capacity=new CapacityVO(storagePool.getId(),storagePool.getDataCenterId(),storagePool.getPodId(),0L,storagePool.getCapacityBytes(),CapacityVO.CAPACITY_TYPE_STORAGE);
    _capacityDao.persist(capacity);
  }
 else {
    CapacityVO capacity=capacities.get(0);
    if (capacity.getTotalCapacity() != storagePool.getCapacityBytes()) {
      capacity.setTotalCapacity(storagePool.getCapacityBytes());
      _capacityDao.update(capacity.getId(),capacity);
    }
  }
  s_logger.debug("Successfully set Capacity - " + storagePool.getCapacityBytes() + " for CAPACITY_TYPE_STORAGE, DataCenterId - "+ storagePool.getDataCenterId()+ ", HostOrPoolId - "+ storagePool.getId()+ ", PodId "+ storagePool.getPodId());
  capacitySC=_capacityDao.createSearchCriteria();
  capacitySC.addAnd("hostOrPoolId",SearchCriteria.Op.EQ,storagePool.getId());
  capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,storagePool.getDataCenterId());
  capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED);
  capacities=_capacityDao.search(capacitySC,null);
  if (capacities.size() == 0) {
    int provFactor=1;
    if (storagePool.getPoolType() == StoragePoolType.NetworkFilesystem) {
      provFactor=_overProvisioningFactor;
    }
    CapacityVO capacity=new CapacityVO(storagePool.getId(),storagePool.getDataCenterId(),storagePool.getPodId(),0L,storagePool.getCapacityBytes() * provFactor,CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED);
    _capacityDao.persist(capacity);
  }
 else {
    CapacityVO capacity=capacities.get(0);
    long currCapacity=_overProvisioningFactor * storagePool.getCapacityBytes();
    if (capacity.getTotalCapacity() != currCapacity) {
      capacity.setTotalCapacity(currCapacity);
      _capacityDao.update(capacity.getId(),capacity);
    }
  }
  s_logger.debug("Successfully set Capacity - " + storagePool.getCapacityBytes() * _overProvisioningFactor + " for CAPACITY_TYPE_STORAGE_ALLOCATED, DataCenterId - " + storagePool.getDataCenterId() + ", HostOrPoolId - " + storagePool.getId() + ", PodId " + storagePool.getPodId());
}
