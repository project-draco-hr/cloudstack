{
  Long id=cmd.getId();
  List<String> tags=cmd.getTags();
  StoragePoolVO pool=_storagePoolDao.findById(id);
  if (pool == null) {
    throw new IllegalArgumentException("Unable to find storage pool with ID: " + id);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  if (tags != null) {
    Map<String,String> existingDetails=_storagePoolDetailsDao.listDetailsKeyPairs(id);
    Set<String> existingKeys=existingDetails.keySet();
    Map<String,String> existingDetailsToKeep=new HashMap<String,String>();
    for (    String existingKey : existingKeys) {
      String existingValue=existingDetails.get(existingKey);
      if (!Boolean.TRUE.toString().equalsIgnoreCase(existingValue)) {
        existingDetailsToKeep.put(existingKey,existingValue);
      }
    }
    Map<String,String> details=new HashMap<String,String>();
    for (    String tag : tags) {
      tag=tag.trim();
      if (tag.length() > 0 && !details.containsKey(tag)) {
        details.put(tag,"true");
      }
    }
    Set<String> existingKeysToKeep=existingDetailsToKeep.keySet();
    for (    String existingKeyToKeep : existingKeysToKeep) {
      String existingValueToKeep=existingDetailsToKeep.get(existingKeyToKeep);
      if (details.containsKey(existingKeyToKeep)) {
        throw new CloudRuntimeException("Storage tag '" + existingKeyToKeep + "' conflicts with a stored property of this primary storage. No changes were made.");
      }
      details.put(existingKeyToKeep,existingValueToKeep);
    }
    updatedDetails.putAll(details);
  }
  Long updatedCapacityBytes=null;
  Long capacityBytes=cmd.getCapacityBytes();
  if (capacityBytes != null) {
    if (capacityBytes != pool.getCapacityBytes()) {
      updatedCapacityBytes=capacityBytes;
    }
  }
  Long updatedCapacityIops=null;
  Long capacityIops=cmd.getCapacityIops();
  if (capacityIops != null) {
    if (!capacityIops.equals(pool.getCapacityIops())) {
      updatedCapacityIops=capacityIops;
    }
  }
  if (updatedCapacityBytes != null || updatedCapacityIops != null) {
    StoragePoolVO storagePool=_storagePoolDao.findById(id);
    DataStoreProvider dataStoreProvider=_dataStoreProviderMgr.getDataStoreProvider(storagePool.getStorageProviderName());
    DataStoreLifeCycle dataStoreLifeCycle=dataStoreProvider.getDataStoreLifeCycle();
    if (dataStoreLifeCycle instanceof PrimaryDataStoreLifeCycle) {
      Map<String,String> details=new HashMap<String,String>();
      details.put(PrimaryDataStoreLifeCycle.CAPACITY_BYTES,updatedCapacityBytes != null ? String.valueOf(updatedCapacityBytes) : null);
      details.put(PrimaryDataStoreLifeCycle.CAPACITY_IOPS,updatedCapacityIops != null ? String.valueOf(updatedCapacityIops) : null);
      ((PrimaryDataStoreLifeCycle)dataStoreLifeCycle).updateStoragePool(storagePool,details);
    }
  }
  Boolean enabled=cmd.getEnabled();
  if (enabled != null) {
    if (enabled) {
      enablePrimaryStoragePool(pool);
    }
 else {
      disablePrimaryStoragePool(pool);
    }
  }
 else   if (updatedDetails.size() >= 0) {
    _storagePoolDao.updateDetails(id,updatedDetails);
  }
  if (updatedCapacityBytes != null) {
    _storagePoolDao.updateCapacityBytes(id,capacityBytes);
  }
  if (updatedCapacityIops != null) {
    _storagePoolDao.updateCapacityIops(id,capacityIops);
  }
  return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
}
