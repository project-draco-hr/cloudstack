{
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error("Unable to get the configuration dao.");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  String overProvisioningFactorStr=configs.get("storage.overprovisioning.factor");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get("ping.interval"),60);
  _hostRetry=NumbersUtil.parseInt(configs.get("host.retry"),2);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get("pool.acquisition.wait.seconds"),1800);
  s_logger.info("pool.acquisition.wait.seconds is configured as " + _storagePoolAcquisitionWaitSeconds + " seconds");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get("storage.cleanup.enabled");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String value=configDao.getValue(Config.CreateVolumeFromSnapshotWait.toString());
  _createVolumeFromSnapshotWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreateVolumeFromSnapshotWait.getDefaultValue()));
  value=configDao.getValue(Config.CopyVolumeWait.toString());
  _copyvolumewait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));
  value=configDao.getValue(Config.StorageTemplateCleanupEnabled.key());
  _templateCleanupEnabled=(value == null ? true : Boolean.parseBoolean(value));
  String time=configs.get("storage.cleanup.interval");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  s_logger.info("Storage cleanup enabled: " + _storageCleanupEnabled + ", interval: "+ _storageCleanupInterval+ ", template cleanup enabled: "+ _templateCleanupEnabled);
  String workers=configs.get("expunge.workers");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory("StorageManager-Scavenger"));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue("storage.max.volume.size");
  _maxVolumeSizeInGb=NumbersUtil.parseLong(maxVolumeSizeInGbString,2000);
  String _customDiskOfferingMinSizeStr=configDao.getValue(Config.CustomDiskOfferingMinSize.toString());
  _customDiskOfferingMinSize=NumbersUtil.parseInt(_customDiskOfferingMinSizeStr,Integer.parseInt(Config.CustomDiskOfferingMinSize.getDefaultValue()));
  String _customDiskOfferingMaxSizeStr=configDao.getValue(Config.CustomDiskOfferingMaxSize.toString());
  _customDiskOfferingMaxSize=NumbersUtil.parseInt(_customDiskOfferingMaxSizeStr,Integer.parseInt(Config.CustomDiskOfferingMaxSize.getDefaultValue()));
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and("id",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and("state",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and("dcId",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join("host",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and("status",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join("hosts",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and("pool",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  StoragePoolSearch=_vmInstanceDao.createSearchBuilder();
  SearchBuilder<VolumeVO> volumeSearch=_volumeDao.createSearchBuilder();
  volumeSearch.and("volumeType",volumeSearch.entity().getVolumeType(),SearchCriteria.Op.EQ);
  volumeSearch.and("poolId",volumeSearch.entity().getPoolId(),SearchCriteria.Op.EQ);
  StoragePoolSearch.join("vmVolume",volumeSearch,volumeSearch.entity().getInstanceId(),StoragePoolSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  StoragePoolSearch.done();
  LocalStorageSearch=_storagePoolDao.createSearchBuilder();
  SearchBuilder<StoragePoolHostVO> storageHostSearch=_storagePoolHostDao.createSearchBuilder();
  storageHostSearch.and("hostId",storageHostSearch.entity().getHostId(),SearchCriteria.Op.EQ);
  LocalStorageSearch.join("poolHost",storageHostSearch,storageHostSearch.entity().getPoolId(),LocalStorageSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  LocalStorageSearch.and("type",LocalStorageSearch.entity().getPoolType(),SearchCriteria.Op.IN);
  LocalStorageSearch.done();
  return true;
}
