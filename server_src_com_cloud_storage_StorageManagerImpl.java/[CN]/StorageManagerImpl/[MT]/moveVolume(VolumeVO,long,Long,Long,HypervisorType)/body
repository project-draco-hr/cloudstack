{
  List<SnapshotVO> snapshots=_snapshotDao.listByVolumeId(volume.getId());
  if (snapshots != null && snapshots.size() > 0) {
    throw new CloudRuntimeException("Unable to move volume " + volume.getId() + " due to there are snapshots for this volume");
  }
  List<SnapshotPolicyVO> snapshotPolicys=_snapshotPolicyDao.listByVolumeId(volume.getId());
  if (snapshotPolicys != null && snapshotPolicys.size() > 0) {
    throw new CloudRuntimeException("Unable to move volume " + volume.getId() + " due to there are snapshot policyes for this volume");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  DiskProfile dskCh=new DiskProfile(volume.getId(),volume.getVolumeType(),volume.getName(),diskOffering.getId(),diskOffering.getDiskSizeInBytes(),diskOffering.getTagsArray(),diskOffering.getUseLocalStorage(),diskOffering.isRecreatable(),null);
  dskCh.setHyperType(dataDiskHyperType);
  DataCenterVO destPoolDataCenter=_dcDao.findById(destPoolDcId);
  HostPodVO destPoolPod=_podDao.findById(destPoolPodId);
  StoragePoolVO destPool=findStoragePool(dskCh,destPoolDataCenter,destPoolPod,destPoolClusterId,null,new HashSet<StoragePool>());
  String secondaryStorageURL=getSecondaryStorageURL(volume.getDataCenterId());
  String secondaryStorageVolumePath=null;
  if (destPool == null) {
    throw new CloudRuntimeException("Failed to find a storage pool with enough capacity to move the volume to.");
  }
  if (secondaryStorageURL == null) {
    throw new CloudRuntimeException("Failed to find secondary storage.");
  }
  StoragePoolVO srcPool=_storagePoolDao.findById(volume.getPoolId());
  CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true);
  CopyVolumeAnswer cvAnswer;
  try {
    cvAnswer=(CopyVolumeAnswer)sendToPool(srcPool,cvCmd);
  }
 catch (  StorageUnavailableException e1) {
    throw new CloudRuntimeException("Failed to copy the volume from the source primary storage pool to secondary storage.",e1);
  }
  if (cvAnswer == null || !cvAnswer.getResult()) {
    throw new CloudRuntimeException("Failed to copy the volume from the source primary storage pool to secondary storage.");
  }
  secondaryStorageVolumePath=cvAnswer.getVolumePath();
  cvCmd=new CopyVolumeCommand(volume.getId(),secondaryStorageVolumePath,destPool,secondaryStorageURL,false);
  try {
    cvAnswer=(CopyVolumeAnswer)sendToPool(destPool,cvCmd);
  }
 catch (  StorageUnavailableException e1) {
    throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
  }
  if (cvAnswer == null || !cvAnswer.getResult()) {
    throw new CloudRuntimeException("Failed to copy the volume from secondary storage to the destination primary storage pool.");
  }
  String destPrimaryStorageVolumePath=cvAnswer.getVolumePath();
  String destPrimaryStorageVolumeFolder=cvAnswer.getVolumeFolder();
  final DestroyCommand cmd=new DestroyCommand(srcPool,volume,null);
  volume.setPath(destPrimaryStorageVolumePath);
  volume.setFolder(destPrimaryStorageVolumeFolder);
  volume.setPodId(destPool.getPodId());
  volume.setPoolId(destPool.getId());
  _volsDao.update(volume.getId(),volume);
  Answer destroyAnswer=null;
  try {
    destroyAnswer=sendToPool(srcPool,cmd);
  }
 catch (  StorageUnavailableException e1) {
    throw new CloudRuntimeException("Failed to destroy the volume from the source primary storage pool to secondary storage.");
  }
  if (destroyAnswer == null || !destroyAnswer.getResult()) {
    throw new CloudRuntimeException("Failed to destroy the volume from the source primary storage pool to secondary storage.");
  }
  return _volsDao.findById(volume.getId());
}
