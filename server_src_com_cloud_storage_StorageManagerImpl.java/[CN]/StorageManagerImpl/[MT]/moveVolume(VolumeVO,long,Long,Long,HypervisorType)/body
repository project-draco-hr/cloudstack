{
  List<SnapshotVO> snapshots=_snapshotDao.listByVolumeId(volume.getId());
  if (snapshots != null && snapshots.size() > 0) {
    throw new CloudRuntimeException("Unable to move volume " + volume.getId() + " due to there are snapshots for this volume");
  }
  List<SnapshotPolicyVO> snapshotPolicys=_snapshotPolicyDao.listByVolumeId(volume.getId());
  if (snapshotPolicys != null && snapshotPolicys.size() > 0) {
    throw new CloudRuntimeException("Unable to move volume " + volume.getId() + " due to there are snapshot policyes for this volume");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  DiskProfile dskCh=new DiskProfile(volume.getId(),volume.getVolumeType(),volume.getName(),diskOffering.getId(),diskOffering.getDiskSize(),diskOffering.getTagsArray(),diskOffering.getUseLocalStorage(),diskOffering.isRecreatable(),null);
  dskCh.setHyperType(dataDiskHyperType);
  DataCenterVO destPoolDataCenter=_dcDao.findById(destPoolDcId);
  HostPodVO destPoolPod=_podDao.findById(destPoolPodId);
  StoragePoolVO destPool=findStoragePool(dskCh,destPoolDataCenter,destPoolPod,destPoolClusterId,null,new HashSet<StoragePool>());
  String secondaryStorageURL=getSecondaryStorageURL(volume.getDataCenterId());
  if (destPool == null) {
    throw new CloudRuntimeException("Failed to find a storage pool with enough capacity to move the volume to.");
  }
  if (secondaryStorageURL == null) {
    throw new CloudRuntimeException("Failed to find secondary storage.");
  }
  List<Volume> vols=new ArrayList<Volume>();
  vols.add(volume);
  migrateVolumes(vols,destPool);
  return _volsDao.findById(volume.getId());
}
