{
  try {
    List<DataStore> imageStores=this.dataStoreMgr.getImageStoresByScope(new ZoneScope(null));
    for (    DataStore store : imageStores) {
      try {
        long storeId=store.getId();
        List<TemplateDataStoreVO> destroyedTemplateStoreVOs=this._templateStoreDao.listDestroyed(storeId);
        s_logger.debug("Secondary storage garbage collector found " + destroyedTemplateStoreVOs.size() + " templates to cleanup on secondary storage host: "+ store.getName());
        for (        TemplateDataStoreVO destroyedTemplateStoreVO : destroyedTemplateStoreVOs) {
          if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateStoreVO)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Not deleting template at: " + destroyedTemplateStoreVO);
            }
            continue;
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Deleting template store: " + destroyedTemplateStoreVO);
          }
          VMTemplateVO destroyedTemplate=this._vmTemplateDao.findById(destroyedTemplateStoreVO.getTemplateId());
          if (destroyedTemplate == null) {
            s_logger.error("Cannot find template : " + destroyedTemplateStoreVO.getTemplateId() + " from template table");
            throw new CloudRuntimeException("Template " + destroyedTemplateStoreVO.getTemplateId() + " is found in secondary storage, but not found in template table");
          }
          String installPath=destroyedTemplateStoreVO.getInstallPath();
          if (installPath != null) {
            EndPoint ep=_epSelector.select(store);
            Command cmd=new DeleteTemplateCommand(store.getTO(),store.getUri(),destroyedTemplateStoreVO.getInstallPath(),destroyedTemplate.getId(),destroyedTemplate.getAccountId());
            Answer answer=ep.sendMessage(cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.debug("Failed to delete " + destroyedTemplateStoreVO + " due to "+ ((answer == null) ? "answer is null" : answer.getDetails()));
            }
 else {
              _templateStoreDao.remove(destroyedTemplateStoreVO.getId());
              s_logger.debug("Deleted template at: " + destroyedTemplateStoreVO.getInstallPath());
            }
          }
 else {
            _templateStoreDao.remove(destroyedTemplateStoreVO.getId());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn("problem cleaning up templates in secondary storage store " + store.getName(),e);
      }
    }
    for (    DataStore store : imageStores) {
      try {
        List<Long> vIDs=findAllVolumeIdInSnapshotTable(store.getId());
        if (vIDs == null) {
          continue;
        }
        for (        Long volumeId : vIDs) {
          boolean lock=false;
          try {
            VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
            if (volume.getRemoved() == null) {
              volume=_volsDao.acquireInLockTable(volumeId,10);
              if (volume == null) {
                continue;
              }
              lock=true;
            }
            List<String> snapshots=findAllSnapshotForVolume(volumeId);
            if (snapshots == null) {
              continue;
            }
            EndPoint ep=_epSelector.select(store);
            CleanupSnapshotBackupCommand cmd=new CleanupSnapshotBackupCommand(store.getUri(),store.getScope().getScopeId(),volume.getAccountId(),volumeId,snapshots);
            Answer answer=ep.sendMessage(cmd);
            if ((answer == null) || !answer.getResult()) {
              String details="Failed to cleanup snapshots for volume " + volumeId + " due to "+ (answer == null ? "null" : answer.getDetails());
              s_logger.warn(details);
            }
          }
 catch (          Exception e1) {
            s_logger.warn("problem cleaning up snapshots in secondary storage store " + store.getName(),e1);
          }
 finally {
            if (lock) {
              _volsDao.releaseFromLockTable(volumeId);
            }
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn("problem cleaning up snapshots in secondary storage store " + store.getName(),e2);
      }
    }
    for (    DataStore store : imageStores) {
      try {
        List<VolumeDataStoreVO> destroyedStoreVOs=_volumeStoreDao.listDestroyed(store.getId());
        s_logger.debug("Secondary storage garbage collector found " + destroyedStoreVOs.size() + " volumes to cleanup on secondary storage host: "+ store.getName());
        for (        VolumeDataStoreVO destroyedStoreVO : destroyedStoreVOs) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Deleting volume on store: " + destroyedStoreVO);
          }
          String installPath=destroyedStoreVO.getInstallPath();
          if (installPath != null) {
            EndPoint ep=_epSelector.select(store);
            DeleteVolumeCommand cmd=new DeleteVolumeCommand(store.getUri(),destroyedStoreVO.getInstallPath());
            Answer answer=ep.sendMessage(cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.debug("Failed to delete " + destroyedStoreVO + " due to "+ ((answer == null) ? "answer is null" : answer.getDetails()));
            }
 else {
              _volumeStoreDao.remove(destroyedStoreVO.getId());
              s_logger.debug("Deleted volume at: " + destroyedStoreVO.getInstallPath());
            }
          }
 else {
            _volumeStoreDao.remove(destroyedStoreVO.getId());
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn("problem cleaning up volumes in secondary storage store " + store.getName(),e2);
      }
    }
  }
 catch (  Exception e3) {
    s_logger.warn("problem cleaning up secondary storage ",e3);
  }
}
