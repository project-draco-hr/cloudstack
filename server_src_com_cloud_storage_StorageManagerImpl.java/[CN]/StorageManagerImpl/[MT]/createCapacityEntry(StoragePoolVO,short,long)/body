{
  SearchCriteria<CapacityVO> capacitySC=_capacityDao.createSearchCriteria();
  List<CapacityVO> capacities=_capacityDao.search(capacitySC,null);
  capacitySC=_capacityDao.createSearchCriteria();
  capacitySC.addAnd("hostOrPoolId",SearchCriteria.Op.EQ,storagePool.getId());
  capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,storagePool.getDataCenterId());
  capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,capacityType);
  capacities=_capacityDao.search(capacitySC,null);
  float provFactor=1;
  if (storagePool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    provFactor=_overProvisioningFactor;
  }
  if (capacities.size() == 0) {
    CapacityVO capacity=new CapacityVO(storagePool.getId(),storagePool.getDataCenterId(),storagePool.getPodId(),storagePool.getClusterId(),allocated,(long)(storagePool.getCapacityBytes() * provFactor),capacityType);
    _capacityDao.persist(capacity);
  }
 else {
    CapacityVO capacity=capacities.get(0);
    long currCapacity=(long)(provFactor * storagePool.getCapacityBytes());
    boolean update=false;
    if (capacity.getTotalCapacity() != currCapacity) {
      capacity.setTotalCapacity(currCapacity);
      update=true;
    }
    if (allocated != 0) {
      capacity.setUsedCapacity(allocated);
      update=true;
    }
    if (update) {
      _capacityDao.update(capacity.getId(),capacity);
    }
  }
  s_logger.debug("Successfully set Capacity - " + storagePool.getCapacityBytes() * _overProvisioningFactor + " for capacity type - " + capacityType + " , DataCenterId - " + storagePool.getDataCenterId() + ", HostOrPoolId - " + storagePool.getId() + ", PodId " + storagePool.getPodId());
}
