{
  SearchCriteria<CapacityVO> capacitySC=_capacityDao.createSearchCriteria();
  List<CapacityVO> capacities=_capacityDao.search(capacitySC,null);
  capacitySC=_capacityDao.createSearchCriteria();
  capacitySC.addAnd("hostOrPoolId",SearchCriteria.Op.EQ,storagePool.getId());
  capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,storagePool.getDataCenterId());
  capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,capacityType);
  capacities=_capacityDao.search(capacitySC,null);
  long totalOverProvCapacity;
  if (storagePool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    totalOverProvCapacity=_overProvisioningFactor.multiply(new BigDecimal(storagePool.getCapacityBytes())).longValue();
  }
 else {
    totalOverProvCapacity=storagePool.getCapacityBytes();
  }
  if (capacities.size() == 0) {
    CapacityVO capacity=new CapacityVO(storagePool.getId(),storagePool.getDataCenterId(),storagePool.getPodId(),storagePool.getClusterId(),allocated,totalOverProvCapacity,capacityType);
    CapacityState capacityState=_configMgr.findClusterAllocationState(ApiDBUtils.findClusterById(storagePool.getClusterId())) == AllocationState.Disabled ? CapacityState.Disabled : CapacityState.Enabled;
    capacity.setCapacityState(capacityState);
    _capacityDao.persist(capacity);
  }
 else {
    CapacityVO capacity=capacities.get(0);
    boolean update=false;
    if (capacity.getTotalCapacity() != totalOverProvCapacity) {
      capacity.setTotalCapacity(totalOverProvCapacity);
      update=true;
    }
    if (allocated != 0) {
      capacity.setUsedCapacity(allocated);
      update=true;
    }
    if (update) {
      _capacityDao.update(capacity.getId(),capacity);
    }
  }
  s_logger.debug("Successfully set Capacity - " + totalOverProvCapacity + " for capacity type - "+ capacityType+ " , DataCenterId - "+ storagePool.getDataCenterId()+ ", HostOrPoolId - "+ storagePool.getId()+ ", PodId "+ storagePool.getPodId());
}
