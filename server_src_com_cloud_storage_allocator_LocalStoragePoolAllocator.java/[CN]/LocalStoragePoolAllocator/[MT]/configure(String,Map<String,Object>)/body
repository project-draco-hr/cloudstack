{
  super.configure(name,params);
  _storageOverprovisioningFactor=new BigDecimal(1);
  _extraBytesPerVolume=NumbersUtil.parseLong((String)params.get("extra.bytes.per.volume"),50 * 1024L * 1024L);
  Map<String,String> configs=_configDao.getConfiguration("management-server",params);
  String value=configs.get("vm.resource.release.interval");
  _secondsToSkipStoppedVMs=NumbersUtil.parseInt(value,86400);
  _secStorageVmRamSize=NumbersUtil.parseInt(configs.get("secstorage.vm.ram.size"),256);
  _routerRamSize=NumbersUtil.parseInt(configs.get("router.ram.size"),128);
  _proxyRamSize=NumbersUtil.parseInt(configs.get("consoleproxy.ram.size"),1024);
  VmsOnPoolSearch=_vmInstanceDao.createSearchBuilder(Long.class);
  VmsOnPoolSearch.select(null,Func.DISTINCT,VmsOnPoolSearch.entity().getId());
  VmsOnPoolSearch.and("removed",VmsOnPoolSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  VmsOnPoolSearch.and("state",VmsOnPoolSearch.entity().getState(),SearchCriteria.Op.NIN);
  SearchBuilder<VolumeVO> sbVolume=_volumeDao.createSearchBuilder();
  sbVolume.and("poolId",sbVolume.entity().getPoolId(),SearchCriteria.Op.EQ);
  VmsOnPoolSearch.join("volumeJoin",sbVolume,VmsOnPoolSearch.entity().getId(),sbVolume.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  sbVolume.done();
  VmsOnPoolSearch.done();
  return true;
}
