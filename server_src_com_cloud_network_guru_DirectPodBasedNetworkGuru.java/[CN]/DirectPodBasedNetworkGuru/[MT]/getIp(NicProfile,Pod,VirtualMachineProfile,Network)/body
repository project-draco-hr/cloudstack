{
  final DataCenter dc=_dcDao.findById(pod.getDataCenterId());
  if (nic.getIPv4Address() == null) {
    Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientAddressCapacityException>(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status) throws InsufficientAddressCapacityException {
        PublicIp ip=null;
        List<PodVlanMapVO> podRefs=_podVlanDao.listPodVlanMapsByPod(pod.getId());
        String podRangeGateway=null;
        if (!podRefs.isEmpty()) {
          podRangeGateway=_vlanDao.findById(podRefs.get(0).getVlanDbId()).getVlanGateway();
        }
        if (vm.getType() == VirtualMachine.Type.DomainRouter) {
          Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,pod.getId());
          if (placeholderNic != null) {
            IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),placeholderNic.getIPv4Address());
            ip=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
            logger.debug("Nic got an ip address " + placeholderNic.getIPv4Address() + " stored in placeholder nic for the network "+ network+ " and gateway "+ podRangeGateway);
          }
        }
        if (ip == null) {
          ip=_ipAddrMgr.assignPublicIpAddress(dc.getId(),pod.getId(),vm.getOwner(),VlanType.DirectAttached,network.getId(),null,false);
        }
        nic.setIPv4Address(ip.getAddress().toString());
        nic.setFormat(AddressFormat.Ip4);
        nic.setIPv4Gateway(ip.getGateway());
        nic.setIPv4Netmask(ip.getNetmask());
        if (ip.getVlanTag() != null && ip.getVlanTag().equalsIgnoreCase(Vlan.UNTAGGED)) {
          nic.setIsolationUri(IsolationType.Ec2.toUri(Vlan.UNTAGGED));
          nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED));
          nic.setBroadcastType(BroadcastDomainType.Native);
        }
        nic.setReservationId(String.valueOf(ip.getVlanTag()));
        nic.setMacAddress(ip.getMacAddress());
        if (vm.getType() == VirtualMachine.Type.DomainRouter) {
          Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,pod.getId());
          if (placeholderNic == null) {
            logger.debug("Saving placeholder nic with ip4 address " + nic.getIPv4Address() + " for the network "+ network);
            _networkMgr.savePlaceholderNic(network,nic.getIPv4Address(),null,VirtualMachine.Type.DomainRouter);
          }
        }
      }
    }
);
  }
  nic.setIPv4Dns1(dc.getDns1());
  nic.setIPv4Dns2(dc.getDns2());
}
