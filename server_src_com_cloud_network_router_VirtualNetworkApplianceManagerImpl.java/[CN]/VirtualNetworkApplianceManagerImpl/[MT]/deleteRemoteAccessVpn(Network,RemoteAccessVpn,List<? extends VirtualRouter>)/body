{
  if (routers == null || routers.isEmpty()) {
    s_logger.warn("Failed to delete remote access VPN: no router found for account and zone");
    throw new ResourceUnavailableException("Failed to delete remote access VPN",DataCenter.class,network.getDataCenterId());
  }
  boolean result=true;
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      Commands cmds=new Commands(OnError.Continue);
      IpAddress ip=_networkMgr.getIp(vpn.getServerAddressId());
      RemoteAccessVpnCfgCommand removeVpnCmd=new RemoteAccessVpnCfgCommand(false,ip.getAddress().addr(),vpn.getLocalIp(),vpn.getIpRange(),vpn.getIpsecPresharedKey());
      removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
      removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
      removeVpnCmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
      cmds.addCommand(removeVpnCmd);
      result=result && sendCommandsToRouter(router,cmds);
    }
 else     if (router.getState() == State.Stopped) {
      s_logger.debug("Router " + router + " is in Stopped state, not sending deleteRemoteAccessVpn command to it");
      continue;
    }
 else {
      s_logger.warn("Failed to delete remote access VPN: domR " + router + " is not in right state "+ router.getState());
      throw new ResourceUnavailableException("Failed to delete remote access VPN: domR is not in right state " + router.getState(),DataCenter.class,network.getDataCenterId());
    }
  }
  return result;
}
