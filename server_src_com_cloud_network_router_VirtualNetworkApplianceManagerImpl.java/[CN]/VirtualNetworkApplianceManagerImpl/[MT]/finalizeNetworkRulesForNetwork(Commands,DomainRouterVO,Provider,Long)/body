{
  s_logger.debug("Resending ipAssoc, port forwarding, load balancing rules as a part of Virtual router start");
  final ArrayList<? extends PublicIpAddress> publicIps=getPublicIpsToApply(router,provider,guestNetworkId);
  final List<FirewallRule> firewallRulesEgress=new ArrayList<FirewallRule>();
  if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.Firewall,provider)) {
    firewallRulesEgress.addAll(_rulesDao.listByNetworkPurposeTrafficType(guestNetworkId,Purpose.Firewall,FirewallRule.TrafficType.Egress));
  }
  s_logger.debug("Found " + firewallRulesEgress.size() + " firewall Egress rule(s) to apply as a part of domR "+ router+ " start.");
  if (!firewallRulesEgress.isEmpty()) {
    _commandSetupHelper.createFirewallRulesCommands(firewallRulesEgress,router,cmds,guestNetworkId);
  }
  if (publicIps != null && !publicIps.isEmpty()) {
    final List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
    final List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
    final List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
    final List<StaticNat> staticNats=new ArrayList<StaticNat>();
    final List<FirewallRule> firewallRulesIngress=new ArrayList<FirewallRule>();
    for (    final PublicIpAddress ip : publicIps) {
      if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.PortForwarding,provider)) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
      }
      if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.StaticNat,provider)) {
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
      }
      if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.Firewall,provider)) {
        firewallRulesIngress.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.Firewall));
      }
      if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.Vpn,provider)) {
        final RemoteAccessVpn vpn=_vpnDao.findByPublicIpAddress(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.StaticNat,provider)) {
        if (ip.isOneToOneNat()) {
          final StaticNatImpl staticNat=new StaticNatImpl(ip.getAccountId(),ip.getDomainId(),guestNetworkId,ip.getId(),ip.getVmIp(),false);
          staticNats.add(staticNat);
        }
      }
    }
    s_logger.debug("Found " + staticNats.size() + " static nat(s) to apply as a part of domR "+ router+ " start.");
    if (!staticNats.isEmpty()) {
      _commandSetupHelper.createApplyStaticNatCommands(staticNats,router,cmds,guestNetworkId);
    }
    s_logger.debug("Found " + firewallRulesIngress.size() + " firewall Ingress rule(s) to apply as a part of domR "+ router+ " start.");
    if (!firewallRulesIngress.isEmpty()) {
      _commandSetupHelper.createFirewallRulesCommands(firewallRulesIngress,router,cmds,guestNetworkId);
    }
    s_logger.debug("Found " + pfRules.size() + " port forwarding rule(s) to apply as a part of domR "+ router+ " start.");
    if (!pfRules.isEmpty()) {
      _commandSetupHelper.createApplyPortForwardingRulesCommands(pfRules,router,cmds,guestNetworkId);
    }
    s_logger.debug("Found " + staticNatFirewallRules.size() + " static nat rule(s) to apply as a part of domR "+ router+ " start.");
    if (!staticNatFirewallRules.isEmpty()) {
      final List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
      for (      final FirewallRule rule : staticNatFirewallRules) {
        staticNatRules.add(_rulesMgr.buildStaticNatRule(rule,false));
      }
      _commandSetupHelper.createApplyStaticNatRulesCommands(staticNatRules,router,cmds,guestNetworkId);
    }
    s_logger.debug("Found " + vpns.size() + " vpn(s) to apply as a part of domR "+ router+ " start.");
    if (!vpns.isEmpty()) {
      for (      final RemoteAccessVpn vpn : vpns) {
        _commandSetupHelper.createApplyVpnCommands(true,vpn,router,cmds);
      }
    }
    final List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkIdAndScheme(guestNetworkId,Scheme.Public);
    final List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
    if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.Lb,provider)) {
      for (      final LoadBalancerVO lb : lbs) {
        final List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        final List<LbStickinessPolicy> policyList=_lbMgr.getStickinessPolicies(lb.getId());
        final List<LbHealthCheckPolicy> hcPolicyList=_lbMgr.getHealthCheckPolicies(lb.getId());
        final Ip sourceIp=_networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();
        final LbSslCert sslCert=_lbMgr.getLbSslCert(lb.getId());
        final LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList,hcPolicyList,sourceIp,sslCert,lb.getLbProtocol());
        lbRules.add(loadBalancing);
      }
    }
    s_logger.debug("Found " + lbRules.size() + " load balancing rule(s) to apply as a part of domR "+ router+ " start.");
    if (!lbRules.isEmpty()) {
      _commandSetupHelper.createApplyLoadBalancingRulesCommands(lbRules,router,cmds,guestNetworkId);
    }
  }
  final Network guestNetwork=_networkDao.findById(guestNetworkId);
  if (guestNetwork.getGuestType() == GuestType.Shared && _networkModel.isProviderSupportServiceInNetwork(guestNetworkId,Service.Dhcp,provider)) {
    final Map<Network.Capability,String> dhcpCapabilities=_networkSvc.getNetworkOfferingServiceCapabilities(_networkOfferingDao.findById(_networkDao.findById(guestNetworkId).getNetworkOfferingId()),Service.Dhcp);
    final String supportsMultipleSubnets=dhcpCapabilities.get(Network.Capability.DhcpAccrossMultipleSubnets);
    if (supportsMultipleSubnets != null && Boolean.valueOf(supportsMultipleSubnets)) {
      final List<NicIpAliasVO> revokedIpAliasVOs=_nicIpAliasDao.listByNetworkIdAndState(guestNetworkId,NicIpAlias.state.revoked);
      s_logger.debug("Found" + revokedIpAliasVOs.size() + "ip Aliases to revoke on the router as a part of dhcp configuration");
      removeRevokedIpAliasFromDb(revokedIpAliasVOs);
      final List<NicIpAliasVO> aliasVOs=_nicIpAliasDao.listByNetworkIdAndState(guestNetworkId,NicIpAlias.state.active);
      s_logger.debug("Found" + aliasVOs.size() + "ip Aliases to apply on the router as a part of dhcp configuration");
      final List<IpAliasTO> activeIpAliasTOs=new ArrayList<IpAliasTO>();
      for (      final NicIpAliasVO aliasVO : aliasVOs) {
        activeIpAliasTOs.add(new IpAliasTO(aliasVO.getIp4Address(),aliasVO.getNetmask(),aliasVO.getAliasCount().toString()));
      }
      if (activeIpAliasTOs.size() != 0) {
        _commandSetupHelper.createIpAlias(router,activeIpAliasTOs,guestNetworkId,cmds);
        _commandSetupHelper.configDnsMasq(router,_networkDao.findById(guestNetworkId),cmds);
      }
    }
  }
}
