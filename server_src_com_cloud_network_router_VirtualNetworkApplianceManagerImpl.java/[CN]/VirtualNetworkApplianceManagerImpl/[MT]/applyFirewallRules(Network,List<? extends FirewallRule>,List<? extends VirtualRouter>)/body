{
  return applyRules(network,rules,routers,"firewall rules",new RuleApplier(){
    @Override public boolean execute(    Network network,    VirtualRouter router) throws ResourceUnavailableException {
      if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
        List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
        List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : lbs) {
          List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
          List<LbStickinessPolicy> policyList=_lbMgr.getStickinessPolicies(lb.getId());
          LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList);
          lbRules.add(loadBalancing);
        }
        return applyLBRules(router,lbRules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
        return applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.StaticNat) {
        return applyStaticNatRules(router,(List<StaticNatRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.Firewall) {
        return applyFirewallRules(router,(List<FirewallRule>)rules);
      }
 else {
        s_logger.warn("Unable to apply rules of purpose: " + rules.get(0).getPurpose());
        return false;
      }
    }
  }
);
}
