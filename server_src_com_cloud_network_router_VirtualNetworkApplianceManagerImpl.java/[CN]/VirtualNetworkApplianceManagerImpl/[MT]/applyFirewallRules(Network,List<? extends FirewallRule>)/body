{
  List<DomainRouterVO> routers=_routerDao.findByNetwork(network.getId());
  if (routers == null || routers.isEmpty()) {
    s_logger.warn("Unable to apply firewall rules, virtual router doesn't exist in the network " + network.getId());
    throw new ResourceUnavailableException("Unable to apply firewall rules",DataCenter.class,network.getDataCenterId());
  }
  boolean result=true;
  for (  DomainRouterVO router : routers) {
    if (router.getState() == State.Running) {
      if (rules != null && !rules.isEmpty()) {
        if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
          List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
          List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
          for (          LoadBalancerVO lb : lbs) {
            List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
            LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
            lbRules.add(loadBalancing);
          }
          result=result && applyLBRules(router,lbRules);
        }
 else         if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
          result=result && applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
        }
 else         if (rules.get(0).getPurpose() == Purpose.StaticNat) {
          result=result && applyStaticNatRules(router,(List<StaticNatRule>)rules);
        }
 else         if (rules.get(0).getPurpose() == Purpose.Firewall) {
          result=result && applyFirewallRules(router,(List<FirewallRule>)rules);
        }
 else {
          s_logger.warn("Unable to apply rules of purpose: " + rules.get(0).getPurpose());
          result=false;
        }
      }
      if (!result) {
        throw new ResourceUnavailableException("Unable to apply firewall rules on router ",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug("Router is in " + router.getState() + ", so not sending apply firewall rules commands to the backend");
    }
 else {
      s_logger.warn("Unable to apply firewall rules, virtual router is not in the right state " + router.getState());
      throw new ResourceUnavailableException("Unable to apply firewall rules, virtual router is not in the right state",VirtualRouter.class,router.getId());
    }
  }
  return result;
}
