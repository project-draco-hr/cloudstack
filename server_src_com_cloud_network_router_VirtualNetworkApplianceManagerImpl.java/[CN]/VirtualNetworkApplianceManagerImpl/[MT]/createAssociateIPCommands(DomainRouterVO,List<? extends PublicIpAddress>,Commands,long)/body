{
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Network network=_networkMgr.getNetwork(ipAddr.getNetworkId());
      NetworkOffering no=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      Integer networkRate=_configMgr.getNetworkRate(no.getId(),null);
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    cmds.addCommand("IPAssocCommand",cmd);
  }
}
