{
  DomainRouterVO router=_routerDao.findById(profile.getId());
  for (  Answer answer : cmds.getAnswers()) {
    if (!answer.getResult()) {
      String cmdClassName=answer.getClass().getCanonicalName().replace("Answer","Command");
      String errorMessage="Command: " + cmdClassName + " failed while starting virtual router";
      String errorDetails="Details: " + answer.getDetails() + " "+ answer.toString();
      _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),errorMessage,errorDetails);
      s_logger.warn(errorMessage);
      return false;
    }
  }
  boolean result=true;
  final List<Network> guestNetworks=new ArrayList<Network>();
  final List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  final Nic nic : routerNics) {
    final Network network=_networkModel.getNetwork(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      guestNetworks.add(network);
      if (nic.getBroadcastUri().getScheme().equals("pvlan")) {
        final NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),0,false,"pvlan-nic");
        result=setupDhcpForPvlan(true,router,router.getHostId(),nicProfile);
      }
    }
  }
  if (result) {
    GetDomRVersionAnswer versionAnswer=(GetDomRVersionAnswer)cmds.getAnswer("getDomRVersion");
    router.setTemplateVersion(versionAnswer.getTemplateVersion());
    router.setScriptsVersion(versionAnswer.getScriptsVersion());
    router=_routerDao.persist(router,guestNetworks);
  }
  return result;
}
