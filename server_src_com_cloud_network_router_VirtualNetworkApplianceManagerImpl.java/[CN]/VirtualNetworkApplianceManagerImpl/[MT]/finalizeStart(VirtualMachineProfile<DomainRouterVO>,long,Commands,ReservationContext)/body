{
  DomainRouterVO router=profile.getVirtualMachine();
  boolean result=true;
  Answer answer=cmds.getAnswer("checkSsh");
  if (answer != null && answer instanceof CheckSshAnswer) {
    CheckSshAnswer sshAnswer=(CheckSshAnswer)answer;
    if (sshAnswer == null || !sshAnswer.getResult()) {
      s_logger.warn("Unable to ssh to the VM: " + sshAnswer.getDetails());
      result=false;
    }
  }
 else {
    result=false;
  }
  if (result == false) {
    return result;
  }
  Map<Nic,Network> guestNics=new HashMap<Nic,Network>();
  Map<Nic,Network> publicNics=new HashMap<Nic,Network>();
  List<Network> guestNetworks=new ArrayList<Network>();
  List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  Nic routerNic : routerNics) {
    Network network=_networkMgr.getNetwork(routerNic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      guestNics.put(routerNic,network);
      guestNetworks.add(network);
    }
 else     if (network.getTrafficType() == TrafficType.Public) {
      publicNics.put(routerNic,network);
    }
  }
  answer=cmds.getAnswer("getDomRVersion");
  if (answer != null && answer instanceof GetDomRVersionAnswer) {
    GetDomRVersionAnswer versionAnswer=(GetDomRVersionAnswer)answer;
    if (answer == null || !answer.getResult()) {
      s_logger.warn("Unable to get the template/scripts version of router " + router.getInstanceName() + " due to: "+ versionAnswer.getDetails());
      result=false;
    }
 else {
      router.setTemplateVersion(versionAnswer.getTemplateVersion());
      router.setScriptsVersion(versionAnswer.getScriptsVersion());
      router=_routerDao.persist(router,guestNetworks);
    }
  }
 else {
    result=false;
  }
  try {
    for (    Nic publicNic : publicNics.keySet()) {
      Network publicNtwk=publicNics.get(publicNic);
      IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(publicNtwk.getId(),publicNic.getIp4Address());
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      if (!addRouterToPublicNetwork(router,publicNtwk,publicIp)) {
        s_logger.warn("Failed to plug nic " + publicNic + " to router "+ router);
        return false;
      }
    }
    for (    Nic guestNic : guestNics.keySet()) {
      Network guestNtwk=guestNics.get(guestNic);
      boolean setupDnsRouter=_networkMgr.setupDns(guestNtwk,Provider.VirtualRouter);
      boolean setupDnsVpc=_networkMgr.setupDns(guestNtwk,Provider.VPCVirtualRouter);
      boolean setupDns=setupDnsRouter ? setupDnsRouter : setupDnsVpc;
      if (!addRouterToGuestNetwork(router,guestNtwk,false,setupDns)) {
        s_logger.warn("Failed to plug nic " + guestNic + " to router "+ router);
        return false;
      }
    }
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to plug nic for router " + router + " due to exception ",ex);
    return false;
  }
  return result;
}
