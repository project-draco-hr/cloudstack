{
  if (ruleList == null || ruleList.isEmpty()) {
    s_logger.debug("No " + typeString + " to be applied for network "+ network.getId());
    return true;
  }
  if (routers == null || routers.isEmpty()) {
    s_logger.warn("Unable to apply " + typeString + ", virtual router doesn't exist in the network "+ network.getId());
    throw new ResourceUnavailableException("Unable to apply " + typeString,DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg="Unable to apply " + typeString + " on disconnected router ";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug("Applying " + ruleList.size() + " "+ typeString+ " in network "+ network);
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException("Unable to process due to the stop pending router " + router.getInstanceName() + " haven't been stopped after it's host coming back!",DataCenter.class,router.getDataCenterIdToDeployIn());
        }
        s_logger.debug("Router " + router.getInstanceName() + " is stop pending, so not sending apply "+ typeString+ " commands to the backend");
        continue;
      }
      try {
        result=applier.execute(network,router);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException("Unable to apply " + typeString + " on router ",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug("Router " + router.getInstanceName() + " is in "+ router.getState()+ ", so not sending apply "+ typeString+ " commands to the backend");
    }
 else {
      s_logger.warn("Unable to apply " + typeString + ", virtual router is not in the right state "+ router.getState());
      throw new ResourceUnavailableException("Unable to apply " + typeString + ", virtual router is not in the right state",DataCenter.class,router.getDataCenterIdToDeployIn());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + "("+ router.getId()+ ")");
      }
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,disconnectedRouters.get(0).getDataCenterIdToDeployIn());
  }
  return true;
}
