{
  _useExternalDnsServers=_configDepot.get(UseExternalDnsServers);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("RouterMonitor"));
  _checkExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("RouterStatusMonitor"));
  _networkStatsUpdateExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("NetworkStatsUpdater"));
  final Map<String,String> configs=_configDao.getConfiguration("AgentManager",params);
  _mgmt_host=configs.get("host");
  _routerRamSize=NumbersUtil.parseInt(configs.get("router.ram.size"),DEFAULT_ROUTER_VM_RAMSIZE);
  _routerCpuMHz=NumbersUtil.parseInt(configs.get("router.cpu.mhz"),DEFAULT_ROUTER_CPU_MHZ);
  _routerExtraPublicNics=NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()),2);
  String guestOSString=configs.get("network.dhcp.nondefaultnetwork.setgateway.guestos");
  if (guestOSString != null) {
    String[] guestOSList=guestOSString.split(",");
    for (    String os : guestOSList) {
      _guestOSNeedGatewayOnNonDefaultNetwork.add(os);
    }
  }
  String value=configs.get("start.retry");
  _retry=NumbersUtil.parseInt(value,2);
  value=configs.get("router.stats.interval");
  _routerStatsInterval=NumbersUtil.parseInt(value,300);
  value=configs.get("router.check.interval");
  _routerCheckInterval=NumbersUtil.parseInt(value,30);
  value=configs.get("router.check.poolsize");
  _rvrStatusUpdatePoolSize=NumbersUtil.parseInt(value,10);
  _vrUpdateQueue=new LinkedBlockingQueue<Long>(_rvrStatusUpdatePoolSize * 1000);
  _rvrStatusUpdateExecutor=Executors.newFixedThreadPool(_rvrStatusUpdatePoolSize,new NamedThreadFactory("RedundantRouterStatusMonitor"));
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  String rpValue=configs.get("network.disable.rpfilter");
  if (rpValue != null && rpValue.equalsIgnoreCase("true")) {
    _disable_rp_filter=true;
  }
  _dnsBasicZoneUpdates=String.valueOf(_configDao.getValue(Config.DnsBasicZoneUpdates.key()));
  s_logger.info("Router configurations: " + "ramsize=" + _routerRamSize);
  _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(_agentMgr,_hostDao,_configDao),true,false,false);
  _itMgr.registerGuru(VirtualMachine.Type.DomainRouter,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _offering=new ServiceOfferingVO("System Offering For Software Router",1,_routerRamSize,_routerCpuMHz,null,null,true,null,useLocalStorage,true,null,true,VirtualMachine.Type.DomainRouter,true);
  _offering.setUniqueName(ServiceOffering.routerDefaultOffUniqueName);
  _offering=_serviceOfferingDao.persistSystemServiceOffering(_offering);
  if (_offering == null) {
    String msg="Data integrity problem : System Offering For Software router VM has been removed?";
    s_logger.error(msg);
    throw new ConfigurationException(msg);
  }
  _systemAcct=_accountMgr.getSystemAccount();
  String aggregationRange=configs.get("usage.stats.job.aggregation.range");
  _usageAggregationRange=NumbersUtil.parseInt(aggregationRange,1440);
  _usageTimeZone=configs.get("usage.aggregation.timezone");
  if (_usageTimeZone == null) {
    _usageTimeZone="GMT";
  }
  _agentMgr.registerForHostEvents(this,true,false,false);
  s_logger.info("DomainRouterManager is configured.");
  return true;
}
