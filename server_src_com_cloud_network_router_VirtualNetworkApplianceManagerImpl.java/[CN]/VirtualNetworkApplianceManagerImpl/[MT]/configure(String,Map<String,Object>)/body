{
  _name=name;
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("RouterMonitor"));
  _checkExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("RouterStatusMonitor"));
  final ComponentLocator locator=ComponentLocator.getCurrentLocator();
  final Map<String,String> configs=_configDao.getConfiguration("AgentManager",params);
  _mgmt_host=configs.get("host");
  _routerRamSize=NumbersUtil.parseInt(configs.get("router.ram.size"),DEFAULT_ROUTER_VM_RAMSIZE);
  _routerCpuMHz=NumbersUtil.parseInt(configs.get("router.cpu.mhz"),DEFAULT_ROUTER_CPU_MHZ);
  String value=configs.get("start.retry");
  _retry=NumbersUtil.parseInt(value,2);
  value=configs.get("router.stats.interval");
  _routerStatsInterval=NumbersUtil.parseInt(value,300);
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  s_logger.info("Router configurations: " + "ramsize=" + _routerRamSize);
  final UserStatisticsDao statsDao=locator.getDao(UserStatisticsDao.class);
  if (statsDao == null) {
    throw new ConfigurationException("Unable to get " + UserStatisticsDao.class.getName());
  }
  _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(this,_hostDao,_configDao),true,false,false);
  _itMgr.registerGuru(VirtualMachine.Type.DomainRouter,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _offering=new ServiceOfferingVO("System Offering For Software Router",1,_routerRamSize,_routerCpuMHz,null,null,true,null,useLocalStorage,true,null,true,VirtualMachine.Type.DomainRouter,true);
  _offering.setUniqueName("Cloud.Com-SoftwareRouter");
  _offering=_serviceOfferingDao.persistSystemServiceOffering(_offering);
  if (_offering == null) {
    String msg="Data integrity problem : System Offering For Software router VM has been removed?";
    s_logger.error(msg);
    throw new ConfigurationException(msg);
  }
  _systemAcct=_accountService.getSystemAccount();
  trafficSentinelHostname=configs.get("traffic.sentinel.hostname");
  s_logger.info("DomainRouterManager is configured.");
  return true;
}
