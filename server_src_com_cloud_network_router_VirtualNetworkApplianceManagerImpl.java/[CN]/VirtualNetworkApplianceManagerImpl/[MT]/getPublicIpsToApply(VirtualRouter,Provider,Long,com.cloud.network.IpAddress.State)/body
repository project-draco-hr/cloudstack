{
  long ownerId=router.getAccountId();
  final List<? extends IpAddress> userIps=_networkModel.listPublicIpsAssignedToGuestNtwk(ownerId,guestNetworkId,null);
  List<PublicIp> allPublicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    boolean addIp=true;
    for (    IpAddress userIp : userIps) {
      if (skipInStates != null) {
        for (        IpAddress.State stateToSkip : skipInStates) {
          if (userIp.getState() == stateToSkip) {
            s_logger.debug("Skipping ip address " + userIp + " in state "+ userIp.getState());
            addIp=false;
            break;
          }
        }
      }
      if (addIp) {
        IPAddressVO ipVO=_ipAddressDao.findById(userIp.getId());
        PublicIp publicIp=new PublicIp(ipVO,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(ipVO.getMacAddress()));
        allPublicIps.add(publicIp);
      }
    }
  }
  Network network=_networkDao.findById(guestNetworkId);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(allPublicIps,false,true);
  Map<Provider,ArrayList<PublicIpAddress>> providerToIpList=_networkModel.getProviderToIpList(network,ipToServices);
  ArrayList<PublicIpAddress> publicIps=providerToIpList.get(provider);
  return publicIps;
}
