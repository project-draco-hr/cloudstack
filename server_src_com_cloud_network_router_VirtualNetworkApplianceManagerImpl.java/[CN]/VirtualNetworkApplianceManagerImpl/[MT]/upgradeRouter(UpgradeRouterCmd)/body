{
  Long routerId=cmd.getId();
  Long serviceOfferingId=cmd.getServiceOfferingId();
  Account account=UserContext.current().getCaller();
  DomainRouterVO router=_routerDao.findById(routerId);
  if (router == null) {
    throw new InvalidParameterValueException("Unable to find router with id " + routerId);
  }
  if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),router.getDomainId())) {
    throw new PermissionDeniedException("Invalid domain router id (" + routerId + ") given, unable to stop router.");
  }
  if (router.getServiceOfferingId() == serviceOfferingId) {
    s_logger.debug("Router: " + routerId + "already has service offering: "+ serviceOfferingId);
    return _routerDao.findById(routerId);
  }
  ServiceOfferingVO newServiceOffering=_serviceOfferingDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException("Unable to find service offering with id " + serviceOfferingId);
  }
  if (!newServiceOffering.getSystemUse()) {
    throw new InvalidParameterValueException("Cannot upgrade router vm to a non system service offering " + serviceOfferingId);
  }
  if (!router.getState().equals(State.Stopped)) {
    s_logger.warn("Unable to upgrade router " + router.toString() + " in state "+ router.getState());
    throw new InvalidParameterValueException("Unable to upgrade router " + router.toString() + " in state "+ router.getState()+ "; make sure the router is stopped and not in an error state before upgrading.");
  }
  ServiceOfferingVO currentServiceOffering=_serviceOfferingDao.findById(router.getServiceOfferingId());
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException("Can't upgrade, due to new local storage status : " + newServiceOffering.getUseLocalStorage() + " is different from "+ "curruent local storage status: "+ currentServiceOffering.getUseLocalStorage());
  }
  router.setServiceOfferingId(serviceOfferingId);
  if (_routerDao.update(routerId,router)) {
    return _routerDao.findById(routerId);
  }
 else {
    throw new CloudRuntimeException("Unable to upgrade router " + routerId);
  }
}
