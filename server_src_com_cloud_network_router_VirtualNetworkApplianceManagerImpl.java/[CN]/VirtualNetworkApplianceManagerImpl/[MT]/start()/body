{
  if (_routerStatsInterval > 0) {
    _executor.scheduleAtFixedRate(new NetworkUsageTask(),_routerStatsInterval,_routerStatsInterval,TimeUnit.SECONDS);
  }
 else {
    s_logger.debug("router.stats.interval - " + _routerStatsInterval + " so not scheduling the router stats thread");
  }
  final TimeZone usageTimezone=TimeZone.getTimeZone(_usageTimeZone);
  final Calendar cal=Calendar.getInstance(usageTimezone);
  cal.setTime(new Date());
  long aggDate=0;
  final int HOURLY_TIME=60;
  final int DAILY_TIME=60 * 24;
  if (_usageAggregationRange == DAILY_TIME) {
    cal.set(Calendar.HOUR_OF_DAY,0);
    cal.set(Calendar.MINUTE,0);
    cal.set(Calendar.SECOND,0);
    cal.set(Calendar.MILLISECOND,0);
    cal.roll(Calendar.DAY_OF_YEAR,true);
    cal.add(Calendar.MILLISECOND,-1);
    aggDate=cal.getTime().getTime();
    _dailyOrHourly=true;
  }
 else   if (_usageAggregationRange == HOURLY_TIME) {
    cal.set(Calendar.MINUTE,0);
    cal.set(Calendar.SECOND,0);
    cal.set(Calendar.MILLISECOND,0);
    cal.roll(Calendar.HOUR_OF_DAY,true);
    cal.add(Calendar.MILLISECOND,-1);
    aggDate=cal.getTime().getTime();
    _dailyOrHourly=true;
  }
 else {
    aggDate=cal.getTime().getTime();
    _dailyOrHourly=false;
  }
  if (_usageAggregationRange < UsageUtils.USAGE_AGGREGATION_RANGE_MIN) {
    s_logger.warn("Usage stats job aggregation range is to small, using the minimum value of " + UsageUtils.USAGE_AGGREGATION_RANGE_MIN);
    _usageAggregationRange=UsageUtils.USAGE_AGGREGATION_RANGE_MIN;
  }
  long initialDelay=aggDate - System.currentTimeMillis();
  if (initialDelay < 0) {
    s_logger.warn("Initial delay for network usage stats update task is incorrect. Stats update task will run immediately");
  }
  _networkStatsUpdateExecutor.scheduleAtFixedRate(new NetworkStatsUpdateTask(),initialDelay,(_usageAggregationRange * 60 * 1000),TimeUnit.MILLISECONDS);
  if (_routerCheckInterval > 0) {
    _checkExecutor.scheduleAtFixedRate(new CheckRouterTask(),_routerCheckInterval,_routerCheckInterval,TimeUnit.SECONDS);
    for (int i=0; i < _rvrStatusUpdatePoolSize; i++) {
      _rvrStatusUpdateExecutor.execute(new RvRStatusUpdateTask());
    }
  }
 else {
    s_logger.debug("router.check.interval - " + _routerCheckInterval + " so not scheduling the redundant router checking thread");
  }
  final int routerAlertsCheckInterval=RouterAlertsCheckInterval.value();
  if (routerAlertsCheckInterval > 0) {
    _checkExecutor.scheduleAtFixedRate(new CheckRouterAlertsTask(),routerAlertsCheckInterval,routerAlertsCheckInterval,TimeUnit.SECONDS);
  }
 else {
    s_logger.debug("router.alerts.check.interval - " + routerAlertsCheckInterval + " so not scheduling the router alerts checking thread");
  }
  return true;
}
