{
  if (_routerStatsInterval > 0) {
    _executor.scheduleAtFixedRate(new NetworkUsageTask(),_routerStatsInterval,_routerStatsInterval,TimeUnit.SECONDS);
    TimeZone usageTimezone=TimeZone.getTimeZone(_usageTimeZone);
    Calendar cal=Calendar.getInstance(usageTimezone);
    cal.setTime(new Date());
    long endDate=0;
    int HOURLY_TIME=60;
    final int DAILY_TIME=60 * 24;
    if (_usageAggregationRange == DAILY_TIME) {
      cal.roll(Calendar.DAY_OF_YEAR,false);
      cal.set(Calendar.HOUR_OF_DAY,0);
      cal.set(Calendar.MINUTE,0);
      cal.set(Calendar.SECOND,0);
      cal.set(Calendar.MILLISECOND,0);
      cal.roll(Calendar.DAY_OF_YEAR,true);
      cal.add(Calendar.MILLISECOND,-1);
      endDate=cal.getTime().getTime();
    }
 else     if (_usageAggregationRange == HOURLY_TIME) {
      cal.roll(Calendar.HOUR_OF_DAY,false);
      cal.set(Calendar.MINUTE,0);
      cal.set(Calendar.SECOND,0);
      cal.set(Calendar.MILLISECOND,0);
      cal.roll(Calendar.HOUR_OF_DAY,true);
      cal.add(Calendar.MILLISECOND,-1);
      endDate=cal.getTime().getTime();
    }
 else {
      endDate=cal.getTime().getTime();
    }
    _networkStatsUpdateExecutor.scheduleAtFixedRate(new NetworkStatsUpdateTask(),(endDate - System.currentTimeMillis()),(_usageAggregationRange * 60 * 1000),TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.debug("router.stats.interval - " + _routerStatsInterval + " so not scheduling the router stats thread");
  }
  if (_routerCheckInterval > 0) {
    _checkExecutor.scheduleAtFixedRate(new CheckRouterTask(),_routerCheckInterval,_routerCheckInterval,TimeUnit.SECONDS);
  }
 else {
    s_logger.debug("router.check.interval - " + _routerCheckInterval + " so not scheduling the redundant router checking thread");
  }
  return true;
}
