{
  final StringBuilder buf=new StringBuilder();
  final long networkId=nic.getNetworkId();
  final NetworkVO network=_networkDao.findById(networkId);
  final boolean isRedundant=router.getIsRedundantRouter();
  if (isRedundant) {
    buf.append(" redundant_router=1");
    final Long vpcId=router.getVpcId();
    final List<DomainRouterVO> routers;
    if (vpcId != null) {
      routers=_routerDao.listByVpcId(vpcId);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(nic.getNetworkId(),Role.VIRTUAL_ROUTER);
    }
    String redundantState=RedundantState.BACKUP.toString();
    router.setRedundantState(RedundantState.BACKUP);
    if (routers.size() == 0) {
      redundantState=RedundantState.MASTER.toString();
      router.setRedundantState(RedundantState.MASTER);
      buf.append(" router_id=").append(router.getId());
    }
 else {
      final DomainRouterVO router0=routers.get(0);
      buf.append(" router_id=").append(router0.getId());
      if (router.getId() == router0.getId()) {
        redundantState=RedundantState.MASTER.toString();
        router.setRedundantState(RedundantState.MASTER);
      }
    }
    buf.append(" redundant_state=").append(redundantState);
    try {
      final int priority=getUpdatedPriority(network,routers,router);
      router.setPriority(priority);
      router=_routerDao.persist(router);
      buf.append(" router_pr=").append(router.getPriority());
    }
 catch (    final InsufficientVirtualNetworkCapacityException e) {
      s_logger.error("Failed to get update priority!",e);
      throw new CloudRuntimeException("Failed to get update priority!");
    }
  }
  return buf;
}
