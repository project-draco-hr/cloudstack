{
  boolean setupPublicNetwork=false;
  if (publicNetwork != null) {
    setupPublicNetwork=publicNetwork.first();
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  boolean hasGuestNetwork=false;
  if (guestNetwork != null) {
    s_logger.debug("Adding nic for Virtual Router in Guest network " + guestNetwork);
    String defaultNetworkStartIp=null, defaultNetworkStartIpv6=null;
    if (!setupPublicNetwork) {
      if (guestNetwork.getCidr() != null) {
        String requestedGateway=null;
        if (guestNetwork.getGateway() != null) {
          requestedGateway=guestNetwork.getGateway();
        }
 else         if (plan != null && plan.getPodId() != null) {
          Pod pod=_configMgr.getPod(plan.getPodId());
          requestedGateway=pod.getGateway();
        }
        Nic placeholder=_networkModel.getPlaceholderNic(guestNetwork,null);
        if (placeholder != null) {
          s_logger.debug("Requesting ip address " + placeholder.getIp4Address() + " stored in placeholder nic for the network "+ guestNetwork);
          defaultNetworkStartIp=placeholder.getIp4Address();
        }
 else {
          String startIp=_networkModel.getStartIpAddress(guestNetwork.getId());
          if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
            defaultNetworkStartIp=startIp;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug("First ip " + startIp + " in network id="+ guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ip address from the range");
          }
        }
      }
      if (guestNetwork.getIp6Cidr() != null) {
        String startIpv6=_networkModel.getStartIpv6Address(guestNetwork.getId());
        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(),startIpv6) == null) {
          defaultNetworkStartIpv6=startIpv6;
        }
 else         if (s_logger.isDebugEnabled()) {
          s_logger.debug("First ipv6 " + startIpv6 + " in network id="+ guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ipv6 address from the range");
        }
      }
    }
    NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp,defaultNetworkStartIpv6);
    if (setupPublicNetwork) {
      if (isRedundant) {
        gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
      }
 else {
        gatewayNic.setIp4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    }
 else {
      gatewayNic.setDefaultNic(true);
    }
    networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
    hasGuestNetwork=true;
  }
  s_logger.debug("Adding nic for Virtual Router in Control network ");
  List<? extends NetworkOffering> offerings=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork);
  NetworkOffering controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  if (setupPublicNetwork) {
    PublicIp sourceNatIp=publicNetwork.second();
    s_logger.debug("Adding nic for Virtual Router in Public network ");
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    if (hasGuestNetwork) {
      defaultNic.setDeviceId(2);
    }
    NetworkOffering publicOffering=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork).get(0);
    List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
    String publicIp=defaultNic.getIp4Address();
    NicVO peerNic=_nicDao.findByIp4AddressAndNetworkId(publicIp,publicNetworks.get(0).getId());
    if (peerNic != null) {
      s_logger.info("Use same MAC as previous RvR, the MAC is " + peerNic.getMacAddress());
      defaultNic.setMacAddress(peerNic.getMacAddress());
    }
    networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
  }
  return networks;
}
