{
  DomainRouterVO router=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(router.getId());
  router.setDetails(details);
  NetworkVO network=_networkDao.findById(router.getNetworkId());
  String type=null;
  String dhcpRange=null;
  String rpFilter=" ";
  DataCenter dc=dest.getDataCenter();
  DataCenterVO dcVO=_dcDao.findById(dc.getId());
  _dcDao.loadDetails(dcVO);
  if (dc.getNetworkType() == NetworkType.Advanced) {
    String cidr=network.getCidr();
    if (cidr != null) {
      dhcpRange=NetUtils.getDhcpRange(cidr);
    }
  }
  String rpValue=_configDao.getValue(Config.NetworkRouterRpFilter.key());
  if (rpValue != null && rpValue.equalsIgnoreCase("true")) {
    _disable_rp_filter=true;
  }
 else {
    _disable_rp_filter=false;
  }
  boolean publicNetwork=false;
  if (_networkMgr.isProviderSupportServiceInNetwork(network.getId(),Service.SourceNat,Provider.VirtualRouter)) {
    publicNetwork=true;
  }
  if (!publicNetwork) {
    type="dhcpsrvr";
  }
 else {
    type="router";
    if (_disable_rp_filter) {
      rpFilter=" disable_rp_filter=true";
    }
  }
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(" template=domP type=" + type + rpFilter);
  buf.append(" name=").append(profile.getHostName());
  boolean isRedundant=router.getIsRedundantRouter();
  if (isRedundant) {
    buf.append(" redundant_router=1");
    List<DomainRouterVO> routers=_routerDao.listByNetworkAndRole(network.getId(),Role.VIRTUAL_ROUTER);
    try {
      int priority=getUpdatedPriority(network,routers,router);
      router.setPriority(priority);
    }
 catch (    InsufficientVirtualNetworkCapcityException e) {
      s_logger.error("Failed to get update priority!",e);
      throw new CloudRuntimeException("Failed to get update priority!");
    }
  }
  NicProfile controlNic=null;
  String defaultDns1=null;
  String defaultDns2=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    buf.append(" eth").append(deviceId).append("ip=").append(nic.getIp4Address());
    buf.append(" eth").append(deviceId).append("mask=").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(" gateway=").append(nic.getGateway());
      defaultDns1=nic.getDns1();
      defaultDns2=nic.getDns2();
      if (dc.getNetworkType() == NetworkType.Basic) {
        long cidrSize=NetUtils.getCidrSize(nic.getNetmask());
        String cidr=NetUtils.getCidrSubNet(nic.getGateway(),cidrSize);
        if (cidr != null) {
          dhcpRange=NetUtils.getIpRangeStartIpFromCidr(cidr,cidrSize);
        }
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(" localgw=").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info("Check if we need to add management server explicit route to DomR. pod cidr: " + dest.getPod().getCidrAddress() + "/"+ dest.getPod().getCidrSize()+ ", pod gateway: "+ dest.getPod().getGateway()+ ", management host: "+ _mgmt_host);
        }
        if (s_logger.isInfoEnabled()) {
          s_logger.info("Add management server explicit route to DomR.");
        }
        _mgmt_cidr=_configDao.getValue(Config.ManagementNetwork.key());
        if (NetUtils.isValidCIDR(_mgmt_cidr)) {
          buf.append(" mgmtcidr=").append(_mgmt_cidr);
          buf.append(" localgw=").append(dest.getPod().getGateway());
        }
        if (dc.getNetworkType() == NetworkType.Basic) {
          buf.append(" sshonguest=true");
        }
      }
      controlNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Guest && isRedundant) {
      Network net=_networkMgr.getNetwork(nic.getNetworkId());
      buf.append(" guestgw=").append(net.getGateway());
      String brd=NetUtils.long2Ip(NetUtils.ip2Long(nic.getIp4Address()) | ~NetUtils.ip2Long(nic.getNetmask()));
      buf.append(" guestbrd=").append(brd);
      buf.append(" guestcidrsize=").append(NetUtils.getCidrSize(nic.getNetmask()));
      buf.append(" router_pr=").append(router.getPriority());
    }
  }
  if (dhcpRange != null) {
    buf.append(" dhcprange=" + dhcpRange);
  }
  String domain=network.getNetworkDomain();
  if (domain != null) {
    buf.append(" domain=" + domain);
  }
  String domain_suffix=dcVO.getDetail(ZoneConfig.DnsSearchOrder.getName());
  if (domain_suffix != null) {
    buf.append(" dnssearchorder=").append(domain_suffix);
  }
  if (!network.isDefault() && network.getGuestType() == Network.GuestType.Shared) {
    buf.append(" defaultroute=false");
    String virtualNetworkElementNicIP=_networkMgr.getIpOfNetworkElementInVirtualNetwork(network.getAccountId(),network.getDataCenterId());
    if (network.getGuestType() != Network.GuestType.Shared && virtualNetworkElementNicIP != null) {
      defaultDns1=virtualNetworkElementNicIP;
    }
 else {
      s_logger.debug("No Virtual network found for account id=" + network.getAccountId() + " so setting dns to the dns of the network id="+ network.getId());
    }
  }
 else {
    buf.append(" defaultroute=true");
  }
  boolean dnsProvided=_networkMgr.isProviderSupportServiceInNetwork(network.getId(),Service.Dns,Provider.VirtualRouter);
  boolean dhcpProvided=_networkMgr.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,Provider.VirtualRouter);
  if (dnsProvided || dhcpProvided) {
    buf.append(" dns1=").append(defaultDns1);
    if (defaultDns2 != null) {
      buf.append(" dns2=").append(defaultDns2);
    }
    boolean useExtDns=!dnsProvided;
    String use_external_dns=_configDao.getValue(Config.UseExternalDnsServers.key());
    if (use_external_dns != null && use_external_dns.equals("true")) {
      useExtDns=true;
    }
    if (useExtDns) {
      buf.append(" useextdns=true");
    }
  }
  if (profile.getHypervisorType() == HypervisorType.VMware) {
    buf.append(" extra_pubnics=" + _routerExtraPublicNics);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Boot Args for " + profile + ": "+ buf.toString());
  }
  if (controlNic == null) {
    throw new CloudRuntimeException("Didn't start a control port");
  }
  return true;
}
