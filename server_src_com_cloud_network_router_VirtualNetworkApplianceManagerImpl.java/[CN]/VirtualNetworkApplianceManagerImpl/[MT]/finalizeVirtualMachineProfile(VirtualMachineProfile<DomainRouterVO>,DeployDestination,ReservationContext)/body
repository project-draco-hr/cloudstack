{
  DataCenterVO dc=_dcDao.findById(dest.getDataCenter().getId());
  _dcDao.loadDetails(dc);
  DomainRouterVO router=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(router.getId());
  router.setDetails(details);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(" template=domP");
  buf.append(" name=").append(profile.getHostName());
  if (Boolean.valueOf(_configDao.getValue("system.vm.random.password"))) {
    buf.append(" vmpassword=").append(_configDao.getValue("system.vm.password"));
  }
  NicProfile controlNic=null;
  String defaultDns1=null;
  String defaultDns2=null;
  Iterator<NicProfile> it=profile.getNics().iterator();
  while (it.hasNext()) {
    NicProfile nic=it.next();
    int deviceId=nic.getDeviceId();
    buf.append(" eth").append(deviceId).append("ip=").append(nic.getIp4Address());
    buf.append(" eth").append(deviceId).append("mask=").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(" gateway=").append(nic.getGateway());
      defaultDns1=nic.getDns1();
      defaultDns2=nic.getDns2();
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(" localgw=").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      controlNic=nic;
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info("Check if we need to add management server explicit route to DomR. pod cidr: " + dest.getPod().getCidrAddress() + "/"+ dest.getPod().getCidrSize()+ ", pod gateway: "+ dest.getPod().getGateway()+ ", management host: "+ _mgmt_host);
        }
        if (s_logger.isInfoEnabled()) {
          s_logger.info("Add management server explicit route to DomR.");
        }
        _mgmt_cidr=_configDao.getValue(Config.ManagementNetwork.key());
        if (NetUtils.isValidCIDR(_mgmt_cidr)) {
          buf.append(" mgmtcidr=").append(_mgmt_cidr);
          buf.append(" localgw=").append(dest.getPod().getGateway());
        }
      }
    }
 else {
      s_logger.debug("Removing nic of type " + nic.getTrafficType() + " from virtual machine profile "+ profile.getVirtualMachine());
      it.remove();
    }
  }
  if (controlNic == null) {
    throw new CloudRuntimeException("Didn't start a control port");
  }
  String rpValue=_configDao.getValue(Config.NetworkRouterRpFilter.key());
  if (rpValue != null && rpValue.equalsIgnoreCase("true")) {
    _disable_rp_filter=true;
  }
 else {
    _disable_rp_filter=false;
  }
  String rpFilter=" ";
  String type=null;
  if (router.getVpcId() != null) {
    type="vpcrouter";
  }
 else {
    type="router";
  }
  if (_disable_rp_filter) {
    rpFilter=" disable_rp_filter=true";
  }
  buf.append(" type=" + type + rpFilter);
  String domain_suffix=dc.getDetail(ZoneConfig.DnsSearchOrder.getName());
  if (domain_suffix != null) {
    buf.append(" dnssearchorder=").append(domain_suffix);
  }
  if (profile.getHypervisorType() == HypervisorType.VMware) {
    buf.append(" extra_pubnics=" + _routerExtraPublicNics);
  }
  if (defaultDns1 != null) {
    buf.append(" dns1=").append(defaultDns1);
  }
  if (defaultDns2 != null) {
    buf.append(" dns2=").append(defaultDns2);
  }
  boolean useExtDns=false;
  String use_external_dns=_configDao.getValue(Config.UseExternalDnsServers.key());
  if (use_external_dns != null && use_external_dns.equals("true")) {
    useExtDns=true;
  }
  if (useExtDns) {
    buf.append(" useextdns=true");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Boot Args for " + profile + ": "+ buf.toString());
  }
  return true;
}
