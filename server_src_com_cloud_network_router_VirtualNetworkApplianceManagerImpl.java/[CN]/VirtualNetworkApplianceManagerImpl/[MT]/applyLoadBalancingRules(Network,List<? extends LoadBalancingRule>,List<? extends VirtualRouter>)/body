{
  if (rules == null || rules.isEmpty()) {
    s_logger.debug("No lb rules to be applied for network " + network.getId());
    return true;
  }
  return applyRules(network,routers,"loadbalancing rules",false,null,false,new RuleApplier(){
    @Override public boolean execute(    Network network,    VirtualRouter router) throws ResourceUnavailableException {
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkIdAndScheme(network.getId(),Scheme.Public);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        List<LbStickinessPolicy> policyList=_lbMgr.getStickinessPolicies(lb.getId());
        List<LbHealthCheckPolicy> hcPolicyList=_lbMgr.getHealthCheckPolicies(lb.getId());
        LbSslCert sslCert=_lbMgr.getLbSslCert(lb.getId());
        Ip sourceIp=_networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList,hcPolicyList,sourceIp,sslCert,lb.getLbProtocol());
        lbRules.add(loadBalancing);
      }
      return sendLBRules(router,lbRules,network.getId());
    }
  }
);
}
