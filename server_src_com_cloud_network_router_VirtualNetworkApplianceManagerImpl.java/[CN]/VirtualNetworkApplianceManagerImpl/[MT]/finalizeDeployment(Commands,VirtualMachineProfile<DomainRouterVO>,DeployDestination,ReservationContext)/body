{
  NicProfile controlNic=(NicProfile)profile.getParameter("control.nic");
  _ovsNetworkMgr.RouterCheckAndCreateTunnel(cmds,profile,dest);
  _ovsNetworkMgr.applyDefaultFlowToRouter(cmds,profile,dest);
  cmds.addCommand("checkSsh",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  DomainRouterVO router=profile.getVirtualMachine();
  List<NicVO> nics=_nicDao.listBy(router.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Public) {
      router.setPublicIpAddress(nic.getIp4Address());
      router.setPublicNetmask(nic.getNetmask());
      router.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Guest) {
      router.setGuestIpAddress(nic.getIp4Address());
      router.setGuestMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Control) {
      router.setPrivateIpAddress(nic.getIp4Address());
      router.setPrivateNetmask(nic.getNetmask());
      router.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  _routerDao.update(router.getId(),router);
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA) {
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug("Found " + publicIps.size() + " ip(s) to apply as a part of domR "+ router.getId()+ " start.");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<PortForwardingRuleVO> rulesToReapply=new ArrayList<PortForwardingRuleVO>();
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      for (      PublicIpAddress ip : publicIps) {
        List<PortForwardingRuleVO> rules=_pfRulesDao.listForApplication(ip.getAddress());
        rulesToReapply.addAll(rules);
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getAddress());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug("Found " + rulesToReapply.size() + " port forwarding rule(s) to apply as a part of domR "+ router+ " start.");
      if (!rulesToReapply.isEmpty()) {
        createApplyPortForwardingRulesCommands(rulesToReapply,router,cmds);
      }
      s_logger.debug("Found " + vpns.size() + " vpn(s) to apply as a part of domR "+ router+ " start.");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug("Found " + lbRules.size() + " load balancing rule(s) to apply as a part of domR "+ router+ " start.");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug("Reapplying dhcp entries as a part of domR " + router + " start...");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug("Reapplying user data entries as a part of domR " + router + " start...");
  createUserDataCommands(router,cmds);
  return true;
}
