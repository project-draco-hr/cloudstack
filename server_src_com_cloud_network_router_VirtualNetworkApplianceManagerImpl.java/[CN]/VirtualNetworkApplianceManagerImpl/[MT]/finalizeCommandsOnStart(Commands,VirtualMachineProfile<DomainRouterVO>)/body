{
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand("checkSsh",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug("Resending ipAssoc, port forwarding, load balancing rules as a part of Virtual router start");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug("Found " + publicIps.size() + " ip(s) to apply as a part of domR "+ router.getId()+ " start.");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<? extends PortForwardingRule> rules=null;
      for (      PublicIpAddress ip : publicIps) {
        rules=_pfRulesDao.listForApplication(ip.getId());
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug("Found " + rules.size() + " port forwarding rule(s) to apply as a part of domR "+ router+ " start.");
      if (!rules.isEmpty()) {
        createApplyPortForwardingRulesCommands(rules,router,cmds);
      }
      s_logger.debug("Found " + vpns.size() + " vpn(s) to apply as a part of domR "+ router+ " start.");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug("Found " + lbRules.size() + " load balancing rule(s) to apply as a part of domR "+ router+ " start.");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug("Reapplying dhcp entries as a part of domR " + router + " start...");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug("Reapplying user data entries as a part of domR " + router + " start...");
  createUserDataCommands(router,cmds);
  cmds.addCommand("networkUsage",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),"create"));
  return true;
}
