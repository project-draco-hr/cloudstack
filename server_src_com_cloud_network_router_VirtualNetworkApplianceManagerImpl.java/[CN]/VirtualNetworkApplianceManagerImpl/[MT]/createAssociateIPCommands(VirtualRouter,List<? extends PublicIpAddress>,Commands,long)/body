{
  final Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    final String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {
      ipAddress.setState(IpAddress.State.Allocated);
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  final List<NicVO> nics=_nicDao.listByVmId(router.getId());
  String baseMac=null;
  for (  final NicVO nic : nics) {
    final NetworkVO nw=_networkDao.findById(nic.getNetworkId());
    if (nw.getTrafficType() == TrafficType.Public) {
      baseMac=nic.getMacAddress();
      break;
    }
  }
  for (  final Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    final List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      final PublicIpAddress o1,      final PublicIpAddress o2){
        final boolean s1=o1.isSourceNat();
        final boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    final Integer networkRate=_networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(),router.getId());
    final Network network=_networkModel.getNetwork(ipAddrList.get(0).getNetworkId());
    final IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      final boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      if (firstIP) {
        sourceNat=true;
      }
      final String vlanId=ipAddr.getVlanTag();
      final String vlanGateway=ipAddr.getGateway();
      final String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=null;
      if (!ipAddr.isSourceNat() && ipAddr.getVlanId() != 0) {
        vifMacAddress=NetUtils.generateMacOnIncrease(baseMac,ipAddr.getVlanId());
      }
 else {
        vifMacAddress=ipAddr.getMacAddress();
      }
      final IpAddressTO ip=new IpAddressTO(ipAddr.getAccountId(),ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,networkRate,ipAddr.isOneToOneNat());
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
      if (!firstIP || add) {
        firstIP=false;
      }
    }
    final IpAssocCommand cmd=new IpAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(ipAddrList.get(0).getAssociatedWithNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand("IPAssocCommand",cmd);
  }
}
