{
  boolean updated;
  for (  final DomainRouterVO router : routers) {
    updated=false;
    if (!router.getIsRedundantRouter()) {
      continue;
    }
    final RedundantState prevState=router.getRedundantState();
    if (router.getState() != State.Running) {
      router.setRedundantState(RedundantState.UNKNOWN);
      updated=true;
    }
 else {
      final String privateIP=router.getPrivateIpAddress();
      final HostVO host=_hostDao.findById(router.getHostId());
      if (host == null || host.getState() != Status.Up) {
        router.setRedundantState(RedundantState.UNKNOWN);
        updated=true;
      }
 else       if (privateIP != null) {
        final CheckRouterCommand command=new CheckRouterCommand();
        command.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
        command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        command.setWait(30);
        final Answer origAnswer=_agentMgr.easySend(router.getHostId(),command);
        CheckRouterAnswer answer=null;
        if (origAnswer instanceof CheckRouterAnswer) {
          answer=(CheckRouterAnswer)origAnswer;
        }
 else {
          logger.warn("Unable to update router " + router.getHostName() + "'s status");
        }
        RedundantState state=RedundantState.UNKNOWN;
        if (answer != null && answer.getResult()) {
          state=answer.getState();
        }
 else {
          logger.info("Agent response doesn't seem to be correct ==> " + answer.getResult());
        }
        router.setRedundantState(state);
        updated=true;
      }
    }
    if (updated) {
      _routerDao.update(router.getId(),router);
    }
    final RedundantState currState=router.getRedundantState();
    if (prevState != currState) {
      final String title="Redundant virtual router " + router.getInstanceName() + " just switch from "+ prevState+ " to "+ currState;
      final String context="Redundant virtual router (name: " + router.getHostName() + ", id: "+ router.getId()+ ") "+ " just switch from "+ prevState+ " to "+ currState;
      logger.info(context);
      if (currState == RedundantState.MASTER) {
        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),title,context);
      }
    }
  }
}
