{
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException("Unable to lock network " + guestNetwork.getId());
  }
  DataCenterDeployment plan=null;
  DataCenter dc=dest.getDataCenter();
  long dcId=dc.getId();
  boolean isPodBased=(dc.getNetworkType() == NetworkType.Basic || _networkMgr.isServiceSupportedByNetworkOffering(guestNetwork.getNetworkOfferingId(),Service.SecurityGroup)) && guestNetwork.getTrafficType() == TrafficType.Guest;
  DomainRouterVO router=null;
  List<DomainRouterVO> routers=null;
  try {
    Long podId=dest.getPod().getId();
    if (isPodBased) {
      routers=_routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(),podId,Role.DHCP_USERDATA);
      plan=new DataCenterDeployment(dcId,podId,null,null,null,null);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.DHCP_USERDATA);
      plan=new DataCenterDeployment(dcId);
    }
    if (!routers.isEmpty()) {
      return routers;
    }
    long id=_routerDao.getNextInSequence(Long.class,"id");
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Creating the dhcp server " + id);
    }
    List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
    NetworkOfferingVO controlOffering=offerings.get(0);
    NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
    List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
    String defaultNetworkStartIp=null;
    if (guestNetwork.getCidr() != null) {
      String startIp=_networkMgr.getStartIpAddress(guestNetwork.getId());
      if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
        defaultNetworkStartIp=startIp;
      }
 else       if (s_logger.isDebugEnabled()) {
        s_logger.debug("First ip " + startIp + " in network id="+ guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ip address from the range");
      }
    }
    NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp);
    gatewayNic.setDefaultNic(true);
    networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
    networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
    List<HypervisorType> supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId());
    Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
    if (offering_id == null) {
      offering_id=_offering.getId();
    }
    ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
    int retry=0;
    for (    HypervisorType hType : supportedHypervisors) {
      try {
        s_logger.debug("Allocating the domR with the hypervisor type " + hType);
        VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
        router=new DomainRouterVO(id,routerOffering.getId(),0,VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),false,0,false,RedundantState.UNKNOWN,routerOffering.getOfferHA(),false);
        router.setRole(Role.DHCP_USERDATA);
        router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
        break;
      }
 catch (      InsufficientCapacityException ex) {
        if (retry < 2) {
          s_logger.debug("Failed to allocate the domR with hypervisor type " + hType + ", retrying one more time");
        }
 else {
          throw ex;
        }
      }
 finally {
        retry++;
      }
    }
    routers.add(router);
    UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
    if (stats == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Creating user statistics for the account: " + owner.getId() + " Router Id: "+ router.getId());
      }
      stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
      _userStatsDao.persist(stats);
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}
