{
  if (routers == null || routers.isEmpty()) {
    s_logger.warn("Unable to create static nat, virtual router doesn't exist in the network " + network.getId());
    throw new ResourceUnavailableException("Unable to create static nat",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg="Unable to apply static nat on disconnected router ";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug("Applying " + rules.size() + " static nat in network "+ network);
      try {
        result=applyStaticNat(router,rules);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException("Unable to apply static nat on router ",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug("Router " + router.getInstanceName() + " is in "+ router.getState()+ ", so not sending apply static nat commands to the backend");
    }
 else {
      s_logger.warn("Unable to apply static nat, virtual router is not in the right state " + router.getState());
      throw new ResourceUnavailableException("Unable to apply static nat, virtual router is not in the right state",VirtualRouter.class,router.getId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    stopDisconnectedRouters(disconnectedRouters,true,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + "("+ router.getId()+ ")");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return true;
}
