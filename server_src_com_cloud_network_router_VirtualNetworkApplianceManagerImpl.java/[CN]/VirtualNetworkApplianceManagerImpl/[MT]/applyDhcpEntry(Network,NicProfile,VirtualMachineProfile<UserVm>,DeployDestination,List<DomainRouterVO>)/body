{
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  final VirtualMachineProfile<UserVm> updatedProfile=profile;
  final boolean isZoneBasic=(dest.getDataCenter().getNetworkType() == NetworkType.Basic);
  final Long podId=isZoneBasic ? dest.getPod().getId() : null;
  boolean podLevelException=false;
  if (isZoneBasic && podId != null && updatedProfile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
    podLevelException=true;
  }
  return applyRules(network,routers,"dhcp entry",podLevelException,podId,true,new RuleApplier(){
    @Override public boolean execute(    Network network,    VirtualRouter router) throws ResourceUnavailableException {
      Commands cmds=new Commands(OnError.Stop);
      if (!(isZoneBasic && router.getPodIdToDeployIn().longValue() != podId.longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase("pod"))) {
        NicVO nicVo=_nicDao.findById(nic.getId());
        createDhcpEntryCommand(router,updatedProfile.getVirtualMachine(),nicVo,cmds);
        return sendCommandsToRouter(router,cmds);
      }
      return true;
    }
  }
);
}
