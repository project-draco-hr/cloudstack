{
  long id=_routerDao.getNextInSequence(Long.class,"id");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creating the router " + id + " in datacenter "+ dest.getDataCenter());
  }
  ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(svcOffId);
  List<HypervisorType> hypervisors=getHypervisors(dest,plan,supportedHypervisors);
  int allocateRetry=0;
  int startRetry=0;
  DomainRouterVO router=null;
  for (Iterator<HypervisorType> iter=hypervisors.iterator(); iter.hasNext(); ) {
    HypervisorType hType=iter.next();
    try {
      s_logger.debug("Allocating the domR with the hypervisor type " + hType);
      VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
      if (template == null) {
        s_logger.debug(hType + " won't support system vm, skip it");
        continue;
      }
      boolean offerHA=routerOffering.getOfferHA();
      if (isRedundant) {
        offerHA=false;
      }
      router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),isRedundant,0,false,RedundantState.UNKNOWN,offerHA,false,vpcId);
      router.setRole(Role.VIRTUAL_ROUTER);
      router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
    }
 catch (    InsufficientCapacityException ex) {
      if (allocateRetry < 2 && iter.hasNext()) {
        s_logger.debug("Failed to allocate the VR with hypervisor type " + hType + ", retrying one more time");
        continue;
      }
 else {
        throw ex;
      }
    }
 finally {
      allocateRetry++;
    }
    if (startRouter) {
      try {
        router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
        break;
      }
 catch (      InsufficientCapacityException ex) {
        if (startRetry < 2 && iter.hasNext()) {
          s_logger.debug("Failed to start the VR  " + router + " with hypervisor type "+ hType+ ", "+ "destroying it and recreating one more time");
          destroyRouter(router.getId());
          continue;
        }
 else {
          throw ex;
        }
      }
 finally {
        startRetry++;
      }
    }
 else {
      return router;
    }
  }
  return router;
}
