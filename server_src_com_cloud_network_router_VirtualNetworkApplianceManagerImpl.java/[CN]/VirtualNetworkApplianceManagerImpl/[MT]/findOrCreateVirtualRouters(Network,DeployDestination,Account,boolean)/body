{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Network network=_networkDao.lockRow(guestNetwork.getId(),true);
  if (network == null) {
    throw new ConcurrentOperationException("Unable to lock network " + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(guestNetwork.getId());
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    if (routers.size() == routerCount) {
      return routers;
    }
    PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setDeviceId(2);
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,"id");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Creating the router " + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
      List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
      networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      NicProfile gatewayNic=new NicProfile();
      if (isRedundant) {
        gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
        gatewayNic.setMacAddress(_networkMgr.getNextAvailableMacAddressInNetwork(guestNetwork.getId()));
      }
 else {
        gatewayNic.setIp4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      VMTemplateVO template=_templateDao.findRoutingTemplate(dest.getCluster().getHypervisorType());
      if (routers.size() >= 5) {
        s_logger.error("Too much redundant routers!");
      }
      int priority=0;
      if (isRedundant) {
        priority=100 - routers.size() * 20;
      }
      router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,priority,RedundantState.UNKNOWN,_offering.getOfferHA());
      router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Creating user statistics for the account: " + owner.getId() + " Router Id: "+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
      routers.add(router);
    }
    txn.commit();
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.error("Fail to create the virtual router!",ex);
    throw ex;
  }
catch (  Exception ex) {
    s_logger.error("Fail to create the virtual router due to error: " + ex.getMessage());
  }
 finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}
