{
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException("Unable to lock network " + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  List<DomainRouterVO> routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.DHCP_FIREWALL_LB_PASSWD_USERDATA);
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    for (    DomainRouterVO router : routers) {
      if (!router.getIsRedundantRouter()) {
        routerCount=1;
      }
    }
    if (routers.size() >= routerCount) {
      return routers;
    }
    if (routers.size() >= 5) {
      s_logger.error("Too much redundant routers!");
    }
    NicProfile defaultNic=new NicProfile();
    if (_networkMgr.isServiceSupportedByNetworkOffering(guestNetwork.getNetworkOfferingId(),Service.SourceNat)) {
      PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
      defaultNic.setDefaultNic(true);
      defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
      defaultNic.setGateway(sourceNatIp.getGateway());
      defaultNic.setNetmask(sourceNatIp.getNetmask());
      defaultNic.setMacAddress(sourceNatIp.getMacAddress());
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setDeviceId(2);
    }
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,"id");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Creating the router " + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
      List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
      networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      NicProfile gatewayNic=new NicProfile();
      if (isRedundant) {
        gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
      }
 else {
        gatewayNic.setIp4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      List<HypervisorType> supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId());
      Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
      if (offering_id == null) {
        offering_id=_offering.getId();
      }
      VirtualRouterProviderType type=VirtualRouterProviderType.VirtualRouterElement;
      String typeString="VirtualRouter";
      if (isRedundant) {
        type=VirtualRouterProviderType.RedundantVirtualRouterElement;
        typeString="RedundantVirtualRouter";
      }
      PhysicalNetworkServiceProvider provider=_physicalProviderDao.findByServiceProvider(network.getPhysicalNetworkId(),typeString);
      VirtualRouterProvider vrProvider=_vrProviderDao.findByNspIdAndType(provider.getId(),type);
      ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
      int retry=0;
      for (      HypervisorType hType : supportedHypervisors) {
        try {
          s_logger.debug("Allocating the domR with the hypervisor type " + hType);
          VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
          router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,0,false,RedundantState.UNKNOWN,routerOffering.getOfferHA(),false);
          router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
          break;
        }
 catch (        InsufficientCapacityException ex) {
          if (retry < 2) {
            s_logger.debug("Failed to allocate the domR with hypervisor type " + hType + ", retrying one more time");
          }
 else {
            throw ex;
          }
        }
 finally {
          retry++;
        }
      }
      routers.add(router);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Creating user statistics for the account: " + owner.getId() + " Router Id: "+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}
