{
  if (routers == null || routers.isEmpty()) {
    s_logger.warn("Failed to add/remove VPN users: no router found for account and zone");
    throw new ResourceUnavailableException("Unable to assign ip addresses, domR doesn't exist for network " + network.getId(),DataCenter.class,network.getDataCenterId());
  }
  for (  final DomainRouterVO router : routers) {
    if (router.getState() != VirtualMachine.State.Running) {
      s_logger.warn("Failed to add/remove VPN users: router not in running state");
      throw new ResourceUnavailableException("Unable to assign ip addresses, domR is not in right state " + router.getState(),DataCenter.class,network.getDataCenterId());
    }
    final Commands cmds=new Commands(Command.OnError.Continue);
    final List<NicIpAliasVO> revokedIpAliasVOs=_nicIpAliasDao.listByNetworkIdAndState(network.getId(),NicIpAlias.state.revoked);
    s_logger.debug("Found" + revokedIpAliasVOs.size() + "ip Aliases to revoke on the router as a part of dhcp configuration");
    final List<IpAliasTO> revokedIpAliasTOs=new ArrayList<IpAliasTO>();
    for (    final NicIpAliasVO revokedAliasVO : revokedIpAliasVOs) {
      revokedIpAliasTOs.add(new IpAliasTO(revokedAliasVO.getIp4Address(),revokedAliasVO.getNetmask(),revokedAliasVO.getAliasCount().toString()));
    }
    final List<NicIpAliasVO> aliasVOs=_nicIpAliasDao.listByNetworkIdAndState(network.getId(),NicIpAlias.state.active);
    s_logger.debug("Found" + aliasVOs.size() + "ip Aliases to apply on the router as a part of dhcp configuration");
    final List<IpAliasTO> activeIpAliasTOs=new ArrayList<IpAliasTO>();
    for (    final NicIpAliasVO aliasVO : aliasVOs) {
      activeIpAliasTOs.add(new IpAliasTO(aliasVO.getIp4Address(),aliasVO.getNetmask(),aliasVO.getAliasCount().toString()));
    }
    _commandSetupHelper.createDeleteIpAliasCommand(router,revokedIpAliasTOs,activeIpAliasTOs,network.getId(),cmds);
    _commandSetupHelper.configDnsMasq(router,network,cmds);
    final boolean result=_nwHelper.sendCommandsToRouter(router,cmds);
    if (result) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        final TransactionStatus status){
          for (          final NicIpAliasVO revokedAliasVO : revokedIpAliasVOs) {
            _nicIpAliasDao.expunge(revokedAliasVO.getId());
          }
        }
      }
);
      return true;
    }
  }
  return false;
}
