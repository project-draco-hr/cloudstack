{
  final DomainRouterVO router=_routerDao.findById(profile.getId());
  final NicProfile controlNic=getControlNic(profile);
  if (controlNic == null) {
    s_logger.error("Control network doesn't exist for the router " + router);
    return false;
  }
  finalizeSshAndVersionAndNetworkUsageOnStart(cmds,profile,router,controlNic);
  boolean reprogramGuestNtwks=true;
  if (profile.getParameter(Param.ReProgramGuestNetworks) != null && (Boolean)profile.getParameter(Param.ReProgramGuestNetworks) == false) {
    reprogramGuestNtwks=false;
  }
  final VirtualRouterProvider vrProvider=_vrProviderDao.findById(router.getElementId());
  if (vrProvider == null) {
    throw new CloudRuntimeException("Cannot find related virtual router provider of router: " + router.getHostName());
  }
  final Provider provider=Network.Provider.getProvider(vrProvider.getType().toString());
  if (provider == null) {
    throw new CloudRuntimeException("Cannot find related provider of virtual router provider: " + vrProvider.getType().toString());
  }
  final List<Long> routerGuestNtwkIds=_routerDao.getRouterNetworks(router.getId());
  for (  final Long guestNetworkId : routerGuestNtwkIds) {
    if (reprogramGuestNtwks) {
      finalizeIpAssocForNetwork(cmds,router,provider,guestNetworkId,null);
      finalizeNetworkRulesForNetwork(cmds,router,provider,guestNetworkId);
    }
    finalizeUserDataAndDhcpOnStart(cmds,router,provider,guestNetworkId);
  }
  finalizeMonitorServiceOnStrat(cmds,profile,router,provider,routerGuestNtwkIds.get(0));
  return true;
}
