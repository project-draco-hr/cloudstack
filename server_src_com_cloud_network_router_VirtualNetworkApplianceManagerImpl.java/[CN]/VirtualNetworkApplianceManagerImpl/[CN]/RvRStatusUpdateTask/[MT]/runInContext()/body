{
  while (true) {
    try {
      final Long networkId=_vrUpdateQueue.take();
      final NetworkVO network=_networkDao.findById(networkId);
      final Long vpcId=network.getVpcId();
      final List<DomainRouterVO> routers;
      if (vpcId != null) {
        routers=_routerDao.listByVpcId(vpcId);
      }
 else {
        routers=_routerDao.listByNetworkAndRole(networkId,Role.VIRTUAL_ROUTER);
      }
      if (routers.size() != 2) {
        continue;
      }
      final DomainRouterVO router0=routers.get(0);
      final DomainRouterVO router1=routers.get(1);
      DomainRouterVO router=router0;
      if (router0.getId() < router1.getId()) {
        router=router0;
      }
 else {
        router=router1;
      }
      if (router.getHostId() == null) {
        s_logger.debug("Skip router pair (" + router0.getInstanceName() + ","+ router1.getInstanceName()+ ") due to can't find host");
        continue;
      }
      final HostVO host=_hostDao.findById(router.getHostId());
      if (host == null || host.getManagementServerId() == null || host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {
        s_logger.debug("Skip router pair (" + router0.getInstanceName() + ","+ router1.getInstanceName()+ ") due to not belong to this mgmt server");
        continue;
      }
      updateRoutersRedundantState(routers);
      checkDuplicateMaster(routers);
      checkSanity(routers);
    }
 catch (    final Exception ex) {
      s_logger.error("Fail to complete the RvRStatusUpdateTask! ",ex);
    }
  }
}
