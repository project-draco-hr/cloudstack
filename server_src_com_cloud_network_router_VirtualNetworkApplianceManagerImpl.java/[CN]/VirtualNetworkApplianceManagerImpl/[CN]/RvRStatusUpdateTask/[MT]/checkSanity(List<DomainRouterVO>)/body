{
  final Set<Long> checkedNetwork=new HashSet<Long>();
  for (  final DomainRouterVO router : routers) {
    if (!router.getIsRedundantRouter()) {
      continue;
    }
    final List<Long> routerGuestNtwkIds=_routerDao.getRouterNetworks(router.getId());
    for (    final Long routerGuestNtwkId : routerGuestNtwkIds) {
      if (checkedNetwork.contains(routerGuestNtwkId)) {
        continue;
      }
      checkedNetwork.add(routerGuestNtwkId);
      final List<DomainRouterVO> checkingRouters=_routerDao.listByNetworkAndRole(routerGuestNtwkId,Role.VIRTUAL_ROUTER);
      if (checkingRouters.size() != 2) {
        continue;
      }
      DomainRouterVO masterRouter=null;
      DomainRouterVO backupRouter=null;
      for (      final DomainRouterVO r : checkingRouters) {
        if (r.getRedundantState() == RedundantState.MASTER) {
          if (masterRouter == null) {
            masterRouter=r;
          }
 else {
            break;
          }
        }
 else         if (r.getRedundantState() == RedundantState.BACKUP) {
          if (backupRouter == null) {
            backupRouter=r;
          }
 else {
            break;
          }
        }
      }
      if (masterRouter != null && backupRouter != null) {
        if (getRealPriority(masterRouter) - DEFAULT_DELTA + 1 != getRealPriority(backupRouter) || backupRouter.getIsPriorityBumpUp()) {
          recoverRedundantNetwork(masterRouter,backupRouter);
        }
      }
    }
  }
}
