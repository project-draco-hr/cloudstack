{
  URL trafficSentinel;
  try {
    if (trafficSentinelHostname != null) {
      trafficSentinel=new URL(trafficSentinelHostname + "/inmsf/Query?script=var+q+%3D+Query.topN(%22historytrmx%22,%0D%0A+++++++++++++++++%22ipsource,bytes%22,%0D%0A+++++++++++++++++%22sourcezone+!%3D+EXTERNAL" + "+%26+destinationzone+%3D+EXTERNAL%22,%0D%0A+++++++++++++++++%22end+-+5+minutes,+end%22,%0D%0A+++++++++++++++++%22bytes%22,%0D%0A+++++++++++++++++100000);%0D%0A%0D%0Avar+totalsSent+%3D+"+ "{};%0D%0A%0D%0Avar+t+%3D+q.run(%0D%0A++function(row,table)+{%0D%0A++++if(row[0])+{++++%0D%0A++++++totalsSent[row[0]]+%3D+row[1];%0D%0A++++}%0D%0A++});%0D%0A%0D%0Avar+totalsRcvd+%3D+{};"+ "%0D%0A%0D%0Avar+q+%3D+Query.topN(%22historytrmx%22,%0D%0A+++++++++++++++++%22ipdestination,bytes%22,%0D%0A+++++++++++++++++%22destinationzone+!%3D+EXTERNAL+%26+sourcezone+%3D+EXTERNAL%22,"+ "%0D%0A+++++++++++++++++%22end+-+5minutes,+end%22,%0D%0A+++++++++++++++++%22bytes%22,%0D%0A+++++++++++++++++100000);%0D%0A%0D%0Avar+t+%3D+q.run(%0D%0A++function(row,table)+{%0D%0A++++"+ "if(row[0])+{%0D%0A++++++totalsRcvd[row[0]]+%3D+row[1];%0D%0A++++}%0D%0A++});%0D%0A%0D%0Afor+(var+addr+in+totalsSent)+{%0D%0A++++var+TS+%3D+0;%0D%0A++++var+TR+%3D+0;%0D%0A++++if(totalsSent[addr])"+ "+TS+%3D+totalsSent[addr];%0D%0A++++if(totalsRcvd[addr])+TR+%3D+totalsRcvd[addr];%0D%0A++++println(addr+%2B+%22,%22+%2B+TS+%2B+%22,%22+%2B+TR);%0D%0A}&authenticate=basic&resultFormat=txt");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,",");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          IPAddressVO ipaddress=_ipAddressDao.findByIpAddress(publicIp);
          if (ipaddress == null || ipaddress.getAccountId() == Account.ACCOUNT_ID_SYSTEM) {
            continue;
          }
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          if (bytesSent == null || bytesRcvd == null) {
            s_logger.debug("Incorrect bytes for IP: " + publicIp);
          }
          Transaction txn=Transaction.open(Transaction.CLOUD_DB);
          txn.start();
          UserStatisticsVO stats=_statsDao.lock(ipaddress.getAccountId(),ipaddress.getDataCenterId(),null,0L,"DirectNetwork");
          if (stats == null) {
            stats=new UserStatisticsVO(ipaddress.getAccountId(),ipaddress.getDataCenterId(),null,0L,"DirectNetwork",null);
            stats.setCurrentBytesSent(bytesSent);
            stats.setCurrentBytesReceived(bytesRcvd);
            _statsDao.persist(stats);
          }
 else {
            stats.setCurrentBytesSent(stats.getCurrentBytesSent() + bytesSent);
            stats.setCurrentBytesReceived(stats.getCurrentBytesReceived() + bytesRcvd);
            _statsDao.update(stats.getId(),stats);
          }
          txn.commit();
          txn.close();
        }
      }
      in.close();
    }
  }
 catch (  MalformedURLException e1) {
    s_logger.info("Invalid T raffic Sentinel URL",e1);
  }
catch (  IOException e) {
    s_logger.debug("Error in direct network usage accounting",e);
  }
  final List<DomainRouterVO> routers=_routerDao.listUpByHostId(null);
  s_logger.debug("Found " + routers.size() + " running routers. ");
  for (  DomainRouterVO router : routers) {
    String privateIP=router.getPrivateIpAddress();
    if (privateIP != null) {
      final NetworkUsageCommand usageCmd=new NetworkUsageCommand(privateIP,router.getName());
      final NetworkUsageAnswer answer=(NetworkUsageAnswer)_agentMgr.easySend(router.getHostId(),usageCmd);
      if (answer != null) {
        Transaction txn=Transaction.open(Transaction.CLOUD_DB);
        try {
          if ((answer.getBytesReceived() == 0) && (answer.getBytesSent() == 0)) {
            s_logger.debug("Recieved and Sent bytes are both 0. Not updating user_statistics");
            continue;
          }
          txn.start();
          UserStatisticsVO stats=_statsDao.lock(router.getAccountId(),router.getDataCenterId(),null,router.getId(),router.getType().toString());
          if (stats == null) {
            s_logger.warn("unable to find stats for account: " + router.getAccountId());
            continue;
          }
          if (stats.getCurrentBytesReceived() > answer.getBytesReceived()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Received # of bytes that's less than the last one.  Assuming something went wrong and persisting it.  Reported: " + answer.getBytesReceived() + " Stored: "+ stats.getCurrentBytesReceived());
            }
            stats.setNetBytesReceived(stats.getNetBytesReceived() + stats.getCurrentBytesReceived());
          }
          stats.setCurrentBytesReceived(answer.getBytesReceived());
          if (stats.getCurrentBytesSent() > answer.getBytesSent()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Received # of bytes that's less than the last one.  Assuming something went wrong and persisting it.  Reported: " + answer.getBytesSent() + " Stored: "+ stats.getCurrentBytesSent());
            }
            stats.setNetBytesSent(stats.getNetBytesSent() + stats.getCurrentBytesSent());
          }
          stats.setCurrentBytesSent(answer.getBytesSent());
          _statsDao.update(stats.getId(),stats);
          txn.commit();
        }
 catch (        Exception e) {
          txn.rollback();
          s_logger.warn("Unable to update user statistics for account: " + router.getAccountId() + " Rx: "+ answer.getBytesReceived()+ "; Tx: "+ answer.getBytesSent());
        }
 finally {
          txn.close();
        }
      }
    }
  }
}
