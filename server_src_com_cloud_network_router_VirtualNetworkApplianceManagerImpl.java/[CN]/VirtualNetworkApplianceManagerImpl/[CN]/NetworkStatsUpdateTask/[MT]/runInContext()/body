{
  final GlobalLock scanLock=GlobalLock.getInternLock("network.stats");
  try {
    if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
      final ManagementServerHostVO msHost=_msHostDao.findOneInUpState(new Filter(ManagementServerHostVO.class,"id",false,0L,1L));
      if (msHost == null || msHost.getMsid() != mgmtSrvrId) {
        logger.debug("Skipping aggregate network stats update");
        scanLock.unlock();
        return;
      }
      try {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          final TransactionStatus status){
            final List<UserStatisticsVO> updatedStats=_userStatsDao.listUpdatedStats();
            final Date updatedTime=new Date();
            for (            final UserStatisticsVO stat : updatedStats) {
              stat.setAggBytesReceived(stat.getCurrentBytesReceived() + stat.getNetBytesReceived());
              stat.setAggBytesSent(stat.getCurrentBytesSent() + stat.getNetBytesSent());
              _userStatsDao.update(stat.getId(),stat);
              final UserStatsLogVO statsLog=new UserStatsLogVO(stat.getId(),stat.getNetBytesReceived(),stat.getNetBytesSent(),stat.getCurrentBytesReceived(),stat.getCurrentBytesSent(),stat.getAggBytesReceived(),stat.getAggBytesSent(),updatedTime);
              _userStatsLogDao.persist(statsLog);
            }
            logger.debug("Successfully updated aggregate network stats");
          }
        }
);
      }
 catch (      final Exception e) {
        logger.debug("Failed to update aggregate network stats",e);
      }
 finally {
        scanLock.unlock();
      }
    }
  }
 catch (  final Exception e) {
    logger.debug("Exception while trying to acquire network stats lock",e);
  }
 finally {
    scanLock.releaseRef();
  }
}
