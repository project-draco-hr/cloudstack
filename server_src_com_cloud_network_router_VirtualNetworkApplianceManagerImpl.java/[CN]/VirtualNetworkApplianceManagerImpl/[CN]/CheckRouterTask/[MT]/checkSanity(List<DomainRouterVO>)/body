{
  Set<Long> checkedNetwork=new HashSet<Long>();
  for (  DomainRouterVO router : routers) {
    if (!router.getIsRedundantRouter()) {
      continue;
    }
    long networkId=router.getNetworkId();
    if (checkedNetwork.contains(networkId)) {
      continue;
    }
    checkedNetwork.add(networkId);
    List<DomainRouterVO> checkingRouters=_routerDao.listByNetworkAndRole(networkId,Role.VIRTUAL_ROUTER);
    if (checkingRouters.size() != 2) {
      continue;
    }
    DomainRouterVO masterRouter=null;
    DomainRouterVO backupRouter=null;
    for (    DomainRouterVO r : checkingRouters) {
      if (r.getRedundantState() == RedundantState.MASTER) {
        if (masterRouter == null) {
          masterRouter=r;
        }
 else {
          break;
        }
      }
 else       if (r.getRedundantState() == RedundantState.BACKUP) {
        if (backupRouter == null) {
          backupRouter=r;
        }
 else {
          break;
        }
      }
    }
    if (masterRouter != null && backupRouter != null) {
      if (getRealPriority(masterRouter) - DEFAULT_DELTA + 1 != getRealPriority(backupRouter) || backupRouter.getIsPriorityBumpUp()) {
        recoverRedundantNetwork(masterRouter,backupRouter);
      }
    }
  }
}
