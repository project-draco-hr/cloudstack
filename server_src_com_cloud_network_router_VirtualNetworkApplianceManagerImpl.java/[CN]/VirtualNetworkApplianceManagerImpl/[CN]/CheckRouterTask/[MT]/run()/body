{
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug("Found " + routers.size() + " running routers. ");
  for (  DomainRouterVO router : routers) {
    if (!router.getIsRedundantRouter()) {
      continue;
    }
    String privateIP=router.getPrivateIpAddress();
    HostVO host=_hostDao.findById(router.getHostId());
    if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {
      continue;
    }
    if (privateIP != null) {
      final CheckRouterCommand command=new CheckRouterCommand();
      command.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
      command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      final CheckRouterAnswer answer=(CheckRouterAnswer)_agentMgr.easySend(router.getHostId(),command);
      if (answer != null) {
        if (answer.getResult()) {
          if (answer.getIsMaster()) {
            router.setRedundantState(RedundantState.MASTER);
          }
 else {
            router.setRedundantState(RedundantState.BACKUP);
          }
        }
 else {
          router.setRedundantState(RedundantState.UNKNOWN);
        }
      }
 else {
        router.setRedundantState(RedundantState.UNKNOWN);
      }
      Transaction txn=Transaction.open(Transaction.CLOUD_DB);
      try {
        txn.start();
        _routerDao.update(router.getId(),router);
        txn.commit();
      }
 catch (      Exception e) {
        txn.rollback();
        s_logger.warn("Unable to update router status for account: " + router.getAccountId());
      }
 finally {
        txn.close();
      }
    }
  }
}
