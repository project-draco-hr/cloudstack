@attr(tags=['advanced', 'selfservice'])
def test_03_deploy_vm_project_limit_reached(self):
    'Test TTry to deploy VM with admin account where account has not used\n        the resources but @ project they are not available\n\n        # Validate the following\n        # 1. Try to deploy VM with admin account where account has not used the\n        #    resources but @ project they are not available\n        # 2. Deploy VM should error out saying  ResourceAllocationException\n        #    with "resource limit exceeds'
    self.virtualMachine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], projectid=self.project.id, diskofferingid=self.disk_offering.id, serviceofferingid=self.service_offering.id)
    try:
        projects = Project.list(self.apiclient, id=self.project.id, listall=True)
    except Exception as e:
        self.fail(('failed to get projects list: %s' % e))
    self.assertEqual(validateList(projects)[0], PASS, 'projects list validation failed')
    self.initialResourceCount = int(projects[0].primarystoragetotal)
    projectLimit = (self.initialResourceCount + 3)
    self.debug('Setting up account and domain hierarchy')
    response = self.updatePrimaryStorageLimits(projectLimit=projectLimit)
    self.assertEqual(response[0], PASS, response[1])
    self.services['volume']['size'] = self.services['disk_offering']['disksize'] = 2
    try:
        disk_offering = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
        self.cleanup.append(disk_offering)
        Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, projectid=self.project.id, diskofferingid=disk_offering.id)
    except Exception as e:
        self.fail(('Exception occured: %s' % e))
    with self.assertRaises(Exception):
        Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, projectid=self.project.id, diskofferingid=disk_offering.id)
    return
