@attr(tags=['advanced', 'selfservice'])
def test_02_deploy_vm_account_limit_reached(self):
    'Test Try to deploy VM with admin account where account has used\n            the resources but @ domain they are available'
    self.virtualMachine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.child_do_admin.name, domainid=self.child_do_admin.domainid, diskofferingid=self.disk_offering.id, serviceofferingid=self.service_offering.id)
    accounts = Account.list(self.apiclient, id=self.child_do_admin.id)
    self.assertEqual(validateList(accounts)[0], PASS, 'accounts list validation failed')
    self.initialResourceCount = int(accounts[0].primarystoragetotal)
    accountLimit = (self.initialResourceCount + 3)
    self.debug('Setting up account and domain hierarchy')
    response = self.updatePrimaryStorageLimits(accountLimit=accountLimit)
    self.assertEqual(response[0], PASS, response[1])
    self.services['volume']['size'] = self.services['disk_offering']['disksize'] = 2
    try:
        disk_offering = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
        self.cleanup.append(disk_offering)
        Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, account=self.child_do_admin.name, domainid=self.child_do_admin.domainid, diskofferingid=disk_offering.id)
    except Exception as e:
        self.fail(('failed to create volume: %s' % e))
    with self.assertRaises(Exception):
        Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, account=self.child_do_admin.name, domainid=self.child_do_admin.domainid, diskofferingid=disk_offering.id)
    return
