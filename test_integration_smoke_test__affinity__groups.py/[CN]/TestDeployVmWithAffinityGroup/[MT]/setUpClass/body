@classmethod
def setUpClass(cls):
    cls.testClient = super(TestDeployVmWithAffinityGroup, cls).getClsTestClient()
    zone_name = cls.testClient.getZoneForTests()
    cls.domain = get_domain(cls.apiclient)
    cls.apiclient = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        cls.fail(('get_template() failed to return template with description %s' % cls.services['ostype']))
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['template'] = cls.template.id
    cls.services['zoneid'] = cls.zone.id
    cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
    cls.services['account'] = cls.account.name
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings'])
    cls.ag = AffinityGroup.create(cls.apiclient, cls.services['virtual_machine']['affinity'], account=cls.services['account'], domainid=cls.domain.id)
    cls._cleanup = [cls.service_offering, cls.ag, cls.account]
    return
