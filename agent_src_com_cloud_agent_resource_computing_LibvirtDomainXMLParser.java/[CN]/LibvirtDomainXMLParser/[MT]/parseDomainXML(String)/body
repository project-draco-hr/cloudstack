{
  DocumentBuilder builder;
  try {
    builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(domXML));
    Document doc=builder.parse(is);
    Element rootElement=doc.getDocumentElement();
    desc=getTagValue("description",rootElement);
    Element devices=(Element)rootElement.getElementsByTagName("devices").item(0);
    NodeList disks=devices.getElementsByTagName("disk");
    for (int i=0; i < disks.getLength(); i++) {
      Element disk=(Element)disks.item(i);
      String diskFmtType=getAttrValue("driver","type",disk);
      String diskFile=getAttrValue("source","file",disk);
      String diskDev=getAttrValue("source","dev",disk);
      String diskLabel=getAttrValue("target","dev",disk);
      String bus=getAttrValue("target","bus",disk);
      String type=disk.getAttribute("type");
      String device=disk.getAttribute("device");
      DiskDef def=new DiskDef();
      if (type.equalsIgnoreCase("file")) {
        if (device.equalsIgnoreCase("disk")) {
          DiskDef.diskFmtType fmt=null;
          if (diskFmtType != null) {
            fmt=DiskDef.diskFmtType.valueOf(diskFmtType.toUpperCase());
          }
          def.defFileBasedDisk(diskFile,diskLabel,DiskDef.diskBus.valueOf(bus.toUpperCase()),fmt);
        }
 else         if (device.equalsIgnoreCase("cdrom")) {
          def.defISODisk(diskFile);
        }
      }
 else       if (type.equalsIgnoreCase("block")) {
        def.defBlockBasedDisk(diskDev,diskLabel,DiskDef.diskBus.valueOf(bus.toUpperCase()));
      }
      diskDefs.add(def);
    }
    NodeList nics=devices.getElementsByTagName("interface");
    for (int i=0; i < nics.getLength(); i++) {
      Element nic=(Element)nics.item(i);
      String type=nic.getAttribute("type");
      String mac=getAttrValue("mac","address",nic);
      String dev=getAttrValue("target","dev",nic);
      String model=getAttrValue("model","type",nic);
      InterfaceDef def=new InterfaceDef();
      if (type.equalsIgnoreCase("network")) {
        String network=getAttrValue("source","network",nic);
        def.defPrivateNet(network,dev,mac,nicModel.valueOf(model.toUpperCase()));
      }
 else       if (type.equalsIgnoreCase("bridge")) {
        String bridge=getAttrValue("source","bridge",nic);
        def.defBridgeNet(bridge,dev,mac,nicModel.valueOf(model.toUpperCase()));
      }
      interfaces.add(def);
    }
    Element graphic=(Element)devices.getElementsByTagName("graphics").item(0);
    String port=graphic.getAttribute("port");
    if (port != null) {
      try {
        vncPort=Integer.parseInt(port);
        if (vncPort != -1) {
          vncPort=vncPort - 5900;
        }
 else {
          vncPort=null;
        }
      }
 catch (      NumberFormatException nfe) {
        vncPort=null;
      }
    }
    return true;
  }
 catch (  ParserConfigurationException e) {
    s_logger.debug(e.toString());
  }
catch (  SAXException e) {
    s_logger.debug(e.toString());
  }
catch (  IOException e) {
    s_logger.debug(e.toString());
  }
  return false;
}
