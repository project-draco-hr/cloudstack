{
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  boolean isVolumeOnSharedPool=!volumeDiskOffering.getUseLocalStorage();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> matchingVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,isVolumeOnSharedPool);
  boolean moveVolumeNeeded=true;
  if (matchingVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType="cluster";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType="pod";
    }
 else {
      poolType="zone";
    }
    throw new CloudRuntimeException("There are no storage pools in the VM's " + poolType + " with all of the volume's tags ("+ volumeDiskOffering.getTags()+ ").");
  }
 else {
    long sourcePoolId=sourcePool.getId();
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : matchingVMPools) {
      long vmPoolId=vmPool.getId();
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId && (isVolumeOnSharedPool || sourcePoolId == vmPoolId)) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  return moveVolumeNeeded;
}
