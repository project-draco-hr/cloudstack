{
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException("Unable to aquire volume with ID: " + volumeId);
  }
  if (!_snapshotMgr.canOperateOnVolume(volume)) {
    throw new InvalidParameterValueException("There are snapshot creating on it, Unable to delete the volume");
  }
  _accountMgr.checkAccess(caller,null,true,volume);
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException("Please specify a volume that is not attached to any VM.");
  }
  if (volume.getState() == Volume.State.UploadOp) {
    VolumeHostVO volumeHost=_volumeHostDao.findByVolumeId(volume.getId());
    if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS) {
      throw new InvalidParameterValueException("Please specify a volume that is not uploading");
    }
  }
  try {
    if (volume.getState() != Volume.State.Destroy && volume.getState() != Volume.State.Expunging && volume.getState() != Volume.State.Expunging) {
      Long instanceId=volume.getInstanceId();
      if (!this.volService.destroyVolume(volume.getId())) {
        return false;
      }
      VMInstanceVO vmInstance=this._vmInstanceDao.findById(instanceId);
      if (instanceId == null || (vmInstance.getType().equals(VirtualMachine.Type.User))) {
        _resourceLimitMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
        _usageEventDao.persist(usageEvent);
      }
    }
    AsyncCallFuture<VolumeApiResult> future=this.volService.expungeVolumeAsync(this.volFactory.getVolume(volume.getId()));
    future.get();
  }
 catch (  Exception e) {
    s_logger.warn("Failed to expunge volume:",e);
    return false;
  }
  return true;
}
