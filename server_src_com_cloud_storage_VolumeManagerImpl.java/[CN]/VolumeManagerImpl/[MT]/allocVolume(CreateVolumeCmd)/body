{
  Account caller=UserContext.current().getCaller();
  long ownerId=cmd.getEntityOwnerId();
  _accountMgr.checkAccess(caller,null,true,_accountMgr.getActiveAccountById(ownerId));
  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.volume);
  Long zoneId=cmd.getZoneId();
  Long diskOfferingId=null;
  DiskOfferingVO diskOffering=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException("Either disk Offering Id or snapshot Id must be passed whilst creating volume");
  }
  if (cmd.getSnapshotId() == null) {
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    Long sizeInGB=size;
    if (size != null) {
      if (size > 0) {
        size=size * 1024 * 1024* 1024;
      }
 else {
        throw new InvalidParameterValueException("Disk size must be larger than 0");
      }
    }
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException("Please specify a valid disk offering.");
    }
    if (diskOffering.isCustomized()) {
      if (size == null) {
        throw new InvalidParameterValueException("This disk offering requires a custom size specified");
      }
      if ((sizeInGB < _customDiskOfferingMinSize) || (sizeInGB > _customDiskOfferingMaxSize)) {
        throw new InvalidParameterValueException("Volume size: " + sizeInGB + "GB is out of allowed range. Max: "+ _customDiskOfferingMaxSize+ " Min:"+ _customDiskOfferingMinSize);
      }
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException("This disk offering does not allow custom size");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(caller,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException("Invalid size for custom volume creation: " + size + " ,max volume size is:"+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException("unable to find a snapshot with id " + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException("Snapshot id=" + snapshotId + " is not in "+ Snapshot.Status.BackedUp+ " state yet and can't be used for volume creation");
    }
    diskOfferingId=snapshotCheck.getDiskOfferingId();
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    _accountMgr.checkAccess(caller,null,true,snapshotCheck);
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (!zone.isLocalStorageEnabled() && diskOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException("Zone is not configured to use local storage but volume's disk offering " + diskOffering.getName() + " uses it");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(ownerId);
  volume.setDomainId(((caller == null) ? Domain.ROOT_DOMAIN : caller.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((caller == null) ? Domain.ROOT_DOMAIN : caller.getDomainId());
  volume=_volsDao.persist(volume);
  if (cmd.getSnapshotId() == null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
    _usageEventDao.persist(usageEvent);
  }
  UserContext.current().setEventDetails("Volume Id: " + volume.getId());
  _resourceLimitMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  txn.commit();
  return volume;
}
