{
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  DiskProfile dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  dskCh.setHyperType(vm.getHypervisorType());
  dskCh.setBytesReadRate(storageMgr.getDiskBytesReadRate(null,diskOffering));
  dskCh.setBytesWriteRate(storageMgr.getDiskBytesWriteRate(null,diskOffering));
  dskCh.setIopsReadRate(storageMgr.getDiskIopsReadRate(null,diskOffering));
  dskCh.setIopsWriteRate(storageMgr.getDiskIopsWriteRate(null,diskOffering));
  StoragePool destPool=storageMgr.findStoragePool(dskCh,dc,pod,clusterId,null,vm,avoidPools);
  DataStore destStore=this.dataStoreMgr.getDataStore(destPool.getId(),DataStoreRole.Primary);
  AsyncCallFuture<VolumeApiResult> future=this.volService.copyVolume(volume,destStore);
  try {
    VolumeApiResult result=future.get();
    if (result.isFailed()) {
      s_logger.debug("copy volume failed: " + result.getResult());
      throw new CloudRuntimeException("copy volume failed: " + result.getResult());
    }
    return result.getVolume();
  }
 catch (  InterruptedException e) {
    s_logger.debug("Failed to copy volume: " + volume.getId(),e);
    throw new CloudRuntimeException("Failed to copy volume",e);
  }
catch (  ExecutionException e) {
    s_logger.debug("Failed to copy volume: " + volume.getId(),e);
    throw new CloudRuntimeException("Failed to copy volume",e);
  }
}
