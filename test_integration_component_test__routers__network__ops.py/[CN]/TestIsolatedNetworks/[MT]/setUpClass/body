@classmethod
def setUpClass(cls):
    cls.logger = logging.getLogger('TestIsolatedNetworks')
    cls.stream_handler = logging.StreamHandler()
    cls.logger.setLevel(logging.DEBUG)
    cls.logger.addHandler(cls.stream_handler)
    cls.testClient = super(TestIsolatedNetworks, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.services['network_offering_egress_true'] = cls.services['network_offering'].copy()
    cls.services['network_offering_egress_true']['egress_policy'] = 'true'
    cls.services['network_offering_egress_false'] = cls.services['network_offering'].copy()
    cls.services['network_offering_egress_false']['egress_policy'] = 'false'
    cls.services['egress_80'] = {'startport': 80, 'endport': 80, 'protocol': 'TCP', 'cidrlist': ['0.0.0.0/0'], }
    cls._cleanup = [cls.service_offering, cls.account]
    return
