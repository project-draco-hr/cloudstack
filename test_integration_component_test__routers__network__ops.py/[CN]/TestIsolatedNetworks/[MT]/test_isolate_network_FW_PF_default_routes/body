@attr(tags=['advanced', 'advancedns', 'ssh'], required_hardware='true')
def test_isolate_network_FW_PF_default_routes(self):
    'Stop existing router, add a PF rule and check we can access the VM '
    self.logger.debug('Starting test_isolate_network_FW_PF_default_routes...')
    routers = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    public_ips = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IPs response return valid data')
    public_ip = public_ips[0]
    self.logger.debug(('Creating Firewall rule for VM ID: %s' % self.vm_1.id))
    FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    self.logger.debug(('Creating NAT rule for VM ID: %s' % self.vm_1.id))
    nat_rule = NATRule.create(self.apiclient, self.vm_1, self.services['natrule'], public_ip.id)
    nat_rules = list_nat_rules(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'Check for list NAT rules response return valid data')
    self.assertEqual(nat_rules[0].state, 'Active', 'Check list port forwarding rules')
    result = 'failed'
    try:
        ssh_command = 'ping -c 3 8.8.8.8'
        self.logger.debug(('SSH into VM with ID: %s' % nat_rule.ipaddress))
        ssh = self.vm_1.get_ssh_client(ipaddress=nat_rule.ipaddress, port=self.services['natrule']['publicport'], retries=5)
        result = str(ssh.execute(ssh_command))
        self.logger.debug(('SSH result: %s; COUNT is ==> %s' % (result, result.count('3 packets received'))))
    except:
        self.fail(('Failed to SSH into VM - %s' % public_ip.ipaddress.ipaddress))
    self.assertEqual(result.count('3 packets received'), 1, 'Ping to outside world from VM should be successful')
    return
