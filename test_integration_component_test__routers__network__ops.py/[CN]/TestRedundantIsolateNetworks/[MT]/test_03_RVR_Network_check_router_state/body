@attr(tags=['advanced', 'advancedns', 'ssh'], required_hardware='true')
def test_03_RVR_Network_check_router_state(self):
    ' Test redundant router internals '
    self.logger.debug('Starting test_03_RVR_Network_check_router_state...')
    hypervisor = self.testClient.getHypervisorInfo()
    self.logger.debug('Creating Network Offering with default egress FALSE')
    network_offering_egress_false = NetworkOffering.create(self.apiclient, self.services['nw_off_persistent_RVR_egress_false'], conservemode=True)
    network_offering_egress_false.update(self.apiclient, state='Enabled')
    self.logger.debug(('Creating network with network offering: %s' % network_offering_egress_false.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=network_offering_egress_false.id, zoneid=self.zone.id)
    self.logger.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.logger.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.logger.debug(('Deployed VM in network: %s' % network.id))
    self.cleanup.insert(0, network_offering_egress_false)
    self.cleanup.insert(0, network)
    self.cleanup.insert(0, virtual_machine)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM should be in running state after deployment')
    self.logger.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    vals = ['MASTER', 'BACKUP', 'UNKNOWN']
    cnts = [0, 0, 0]
    result = 'UNKNOWN'
    for router in routers:
        if (router.state == 'Running'):
            hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
            self.assertEqual(isinstance(hosts, list), True, 'Check list host returns a valid list')
            host = hosts[0]
            if (hypervisor.lower() in ('vmware', 'hyperv')):
                result = str(get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, 'sh /opt/cloud/bin/checkrouter.sh ', hypervisor=hypervisor))
            else:
                try:
                    (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
                    result = str(get_process_status(host.ipaddress, 22, host.user, host.passwd, router.linklocalip, 'sh /opt/cloud/bin/checkrouter.sh '))
                except KeyError:
                    self.skipTest('Marvin configuration has no host credentials to                                    check router services')
            if (result.count(vals[0]) == 1):
                cnts[vals.index(vals[0])] += 1
    if (cnts[vals.index('MASTER')] != 1):
        self.fail(('No Master or too many master routers found %s' % cnts[vals.index('MASTER')]))
    return
