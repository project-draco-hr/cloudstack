{
  VirtualMachineTO to=toVirtualMachineTO(vm);
  List<NicProfile> nicProfiles=vm.getNics();
  if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {
    NicProfile publicNicProfile=null;
    for (    NicProfile nicProfile : nicProfiles) {
      if (nicProfile.getTrafficType() == TrafficType.Public) {
        publicNicProfile=nicProfile;
        break;
      }
    }
    if (publicNicProfile != null) {
      NicTO[] nics=to.getNics();
      NicTO[] expandedNics=new NicTO[nics.length + _hypervMgr.getRouterExtraPublicNics()];
      int i=0;
      int deviceId=-1;
      for (i=0; i < nics.length; i++) {
        expandedNics[i]=nics[i];
        if (nics[i].getDeviceId() > deviceId)         deviceId=nics[i].getDeviceId();
      }
      deviceId++;
      long networkId=publicNicProfile.getNetworkId();
      NetworkVO network=_networkDao.findById(networkId);
      for (; i < nics.length + _hypervMgr.getRouterExtraPublicNics(); i++) {
        NicTO nicTo=new NicTO();
        nicTo.setDeviceId(deviceId++);
        nicTo.setBroadcastType(publicNicProfile.getBroadcastType());
        nicTo.setType(publicNicProfile.getTrafficType());
        nicTo.setIp("0.0.0.0");
        nicTo.setNetmask("255.255.255.255");
        nicTo.setName(publicNicProfile.getName());
        try {
          String mac=_networkMgr.getNextAvailableMacAddressInNetwork(networkId);
          nicTo.setMac(mac);
        }
 catch (        InsufficientAddressCapacityException e) {
          throw new CloudRuntimeException("unable to allocate mac address on network: " + networkId);
        }
        nicTo.setDns1(publicNicProfile.getDns1());
        nicTo.setDns2(publicNicProfile.getDns2());
        if (publicNicProfile.getGateway() != null) {
          nicTo.setGateway(publicNicProfile.getGateway());
        }
 else {
          nicTo.setGateway(network.getGateway());
        }
        nicTo.setDefaultNic(false);
        nicTo.setBroadcastUri(publicNicProfile.getBroadCastUri());
        nicTo.setIsolationuri(publicNicProfile.getIsolationUri());
        Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
        nicTo.setNetworkRateMbps(networkRate);
        expandedNics[i]=nicTo;
      }
      to.setNics(expandedNics);
    }
    StringBuffer sbMacSequence=new StringBuffer();
    for (    NicTO nicTo : sortNicsByDeviceId(to.getNics())) {
      sbMacSequence.append(nicTo.getMac()).append("|");
    }
    sbMacSequence.deleteCharAt(sbMacSequence.length() - 1);
    String bootArgs=to.getBootArgs();
    to.setBootArgs(bootArgs + " nic_macs=" + sbMacSequence.toString());
  }
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}
