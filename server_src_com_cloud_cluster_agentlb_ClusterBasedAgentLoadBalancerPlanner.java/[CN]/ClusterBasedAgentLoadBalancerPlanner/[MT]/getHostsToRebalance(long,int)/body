{
  List<HostVO> allHosts=_hostDao.listRoutingHostsByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug("Agent load = " + allHosts.size() + " for management server "+ msId+ " doesn't exceed average system agent load = "+ avLoad+ "; so it doesn't participate in agent rebalancing process");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug("No direct agents in status " + Status.Up + " exist for the management server "+ msId+ "; so it doesn't participate in agent rebalancing process");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  s_logger.debug("Management server " + msId + " can give away "+ hostsToGive+ " as it currently owns "+ allHosts.size()+ " and the average agent load in the system is "+ avLoad+ "; finalyzing list of hosts to give away...");
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug("Trying cluster id=" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug("Skipping cluster id=" + cluster + " as it has more hosts that we need: "+ hostsInCluster.size()+ " vs "+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug("Taking " + hostsLeftToGive + " from cluster "+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            s_logger.trace("Taking host id=" + hostsInCluster.get(i) + " from cluster "+ cluster);
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug("Taking all " + hostsInCluster.size() + " hosts: "+ hostsInCluster+ " from cluster id="+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  s_logger.debug("Management server " + msId + " is ready to give away "+ hostsToReturn.size()+ " hosts");
  return hostsToReturn;
}
