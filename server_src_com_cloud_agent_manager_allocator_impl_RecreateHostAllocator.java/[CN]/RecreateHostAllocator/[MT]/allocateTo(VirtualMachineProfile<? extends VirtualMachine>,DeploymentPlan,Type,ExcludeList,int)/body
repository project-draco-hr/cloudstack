{
  List<Host> hosts=super.allocateTo(vm,plan,type,avoid,returnUpTo);
  if (hosts != null && !hosts.isEmpty()) {
    return hosts;
  }
  s_logger.debug("First fit was unable to find a host");
  VirtualMachine.Type vmType=vm.getType();
  if (vmType == VirtualMachine.Type.User) {
    s_logger.debug("vm is not a system vm so let's just return empty list");
    return new ArrayList<Host>();
  }
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  List<PodCluster> pcs=_agentMgr.listByDataCenter(dc.getId());
  if (dc.getNetworkType().equals(NetworkType.Basic)) {
    s_logger.debug("Direct Networking mode so we can only allow the host to be allocated in the same pod due to public ip address cannot change");
    List<VolumeVO> vols=_volsDao.findByInstance(vm.getId());
    VolumeVO vol=vols.get(0);
    long podId=vol.getPodId();
    s_logger.debug("Pod id determined from volume " + vol.getId() + " is "+ podId);
    Iterator<PodCluster> it=pcs.iterator();
    while (it.hasNext()) {
      PodCluster pc=it.next();
      if (pc.getPod().getId() != podId) {
        it.remove();
      }
    }
  }
  Set<Pair<Long,Long>> avoidPcs=new HashSet<Pair<Long,Long>>();
  Set<Long> hostIdsToAvoid=avoid.getHostsToAvoid();
  if (hostIdsToAvoid != null) {
    for (    Long hostId : hostIdsToAvoid) {
      Host h=_hostDao.findById(hostId);
      if (h != null) {
        avoidPcs.add(new Pair<Long,Long>(h.getPodId(),h.getClusterId()));
      }
    }
  }
  for (  Pair<Long,Long> pcId : avoidPcs) {
    s_logger.debug("Removing " + pcId + " from the list of available pods");
    pcs.remove(new PodCluster(new HostPodVO(pcId.first()),pcId.second() != null ? new ClusterVO(pcId.second()) : null));
  }
  for (  PodCluster p : pcs) {
    if (p.getPod().getAllocationState() != Grouping.AllocationState.Enabled) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Pod name: " + p.getPod().getName() + ", podId: "+ p.getPod().getId()+ " is in "+ p.getPod().getAllocationState().name()+ " state, skipping this and trying other pods");
      }
      continue;
    }
    Long clusterId=p.getCluster() == null ? null : p.getCluster().getId();
    if (p.getCluster() != null && p.getCluster().getAllocationState() != Grouping.AllocationState.Enabled) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Cluster name: " + p.getCluster().getName() + ", clusterId: "+ clusterId+ " is in "+ p.getCluster().getAllocationState().name()+ " state, skipping this and trying other pod-clusters");
      }
      continue;
    }
    DataCenterDeployment newPlan=new DataCenterDeployment(plan.getDataCenterId(),p.getPod().getId(),clusterId,null,null,null);
    hosts=super.allocateTo(vm,newPlan,type,avoid,returnUpTo);
    if (hosts != null && !hosts.isEmpty()) {
      return hosts;
    }
  }
  s_logger.debug("Unable to find any available pods at all!");
  return new ArrayList<Host>();
}
