{
  URI uri=URI.create("vlan://123");
  Network network=mock(Network.class);
  when(network.getId()).thenReturn(1L);
  when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);
  when(network.getDataCenterId()).thenReturn(1L);
  when(network.getGateway()).thenReturn("1.1.1.1");
  when(network.getBroadcastUri()).thenReturn(uri);
  when(network.getCidr()).thenReturn("1.1.1.0/24");
  NetworkOffering offering=mock(NetworkOffering.class);
  when(offering.getId()).thenReturn(1L);
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getGuestType()).thenReturn(GuestType.Isolated);
  DeployDestination dest=mock(DeployDestination.class);
  Domain dom=mock(Domain.class);
  when(dom.getName()).thenReturn("d1");
  Account acc=mock(Account.class);
  when(acc.getAccountName()).thenReturn("a1");
  ReservationContext context=mock(ReservationContext.class);
  when(context.getDomain()).thenReturn(dom);
  when(context.getAccount()).thenReturn(acc);
  DataCenter dc=mock(DataCenter.class);
  when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);
  when(_entityMgr.findById(DataCenter.class,network.getDataCenterId())).thenReturn(dc);
  List<CiscoVnmcControllerVO> devices=new ArrayList<CiscoVnmcControllerVO>();
  devices.add(mock(CiscoVnmcControllerVO.class));
  when(_ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId())).thenReturn(devices);
  CiscoAsa1000vDeviceVO asaVO=mock(CiscoAsa1000vDeviceVO.class);
  when(asaVO.getInPortProfile()).thenReturn("foo");
  when(asaVO.getManagementIp()).thenReturn("1.2.3.4");
  List<CiscoAsa1000vDeviceVO> asaList=new ArrayList<CiscoAsa1000vDeviceVO>();
  asaList.add(asaVO);
  when(_ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId())).thenReturn(asaList);
  when(_networkAsa1000vMapDao.findByNetworkId(network.getId())).thenReturn(mock(NetworkAsa1000vMapVO.class));
  when(_networkAsa1000vMapDao.findByAsa1000vId(anyLong())).thenReturn(null);
  when(_networkAsa1000vMapDao.persist(any(NetworkAsa1000vMapVO.class))).thenReturn(mock(NetworkAsa1000vMapVO.class));
  when(_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.SourceNat,Provider.CiscoVnmc)).thenReturn(true);
  ClusterVSMMapVO clusterVsmMap=mock(ClusterVSMMapVO.class);
  when(_clusterVsmMapDao.findByClusterId(anyLong())).thenReturn(clusterVsmMap);
  CiscoNexusVSMDeviceVO vsmDevice=mock(CiscoNexusVSMDeviceVO.class);
  when(vsmDevice.getUserName()).thenReturn("foo");
  when(vsmDevice.getPassword()).thenReturn("bar");
  when(vsmDevice.getipaddr()).thenReturn("1.2.3.4");
  when(_vsmDeviceDao.findById(anyLong())).thenReturn(vsmDevice);
  HostVO hostVO=mock(HostVO.class);
  when(hostVO.getId()).thenReturn(1L);
  when(_hostDao.findById(anyLong())).thenReturn(hostVO);
  Ip ip=mock(Ip.class);
  when(ip.addr()).thenReturn("1.2.3.4");
  PublicIp publicIp=mock(PublicIp.class);
  when(publicIp.getAddress()).thenReturn(ip);
  when(publicIp.getState()).thenReturn(IpAddress.State.Releasing);
  when(publicIp.getAccountId()).thenReturn(1L);
  when(publicIp.isSourceNat()).thenReturn(true);
  when(publicIp.getVlanTag()).thenReturn("123");
  when(publicIp.getGateway()).thenReturn("1.1.1.1");
  when(publicIp.getNetmask()).thenReturn("1.1.1.1");
  when(publicIp.getMacAddress()).thenReturn(null);
  when(publicIp.isOneToOneNat()).thenReturn(true);
  when(_ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(acc,network)).thenReturn(publicIp);
  VlanVO vlanVO=mock(VlanVO.class);
  when(vlanVO.getVlanGateway()).thenReturn("1.1.1.1");
  List<VlanVO> vlanVOList=new ArrayList<VlanVO>();
  when(_vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId())).thenReturn(vlanVOList);
  Answer answer=mock(Answer.class);
  when(answer.getResult()).thenReturn(true);
  when(_agentMgr.easySend(anyLong(),any(CreateLogicalEdgeFirewallCommand.class))).thenReturn(answer);
  when(_agentMgr.easySend(anyLong(),any(ConfigureNexusVsmForAsaCommand.class))).thenReturn(answer);
  when(_agentMgr.easySend(anyLong(),any(SetSourceNatCommand.class))).thenReturn(answer);
  when(_agentMgr.easySend(anyLong(),any(AssociateAsaWithLogicalEdgeFirewallCommand.class))).thenReturn(answer);
  assertTrue(_element.implement(network,offering,dest,context));
}
