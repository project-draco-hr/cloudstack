{
  HostVO host=(HostVO)getResponseObject();
  HostResponse response=new HostResponse();
  response.setId(host.getId());
  response.setName(host.getName());
  response.setState(host.getStatus());
  if (host.getDisconnectedOn() != null) {
    response.setDisconnectedOn(host.getDisconnectedOn());
  }
  if (host.getType() != null) {
    response.setHostType(host.getType());
  }
  GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
  if (guestOSCategory != null) {
    response.setOsCategoryId(guestOSCategory.getId());
    response.setOsCategoryName(guestOSCategory.getName());
  }
  response.setIpAddress(host.getPrivateIpAddress());
  response.setZoneId(host.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
  if (host.getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
    response.setPodId(host.getPodId());
    response.setPodName(pod.getName());
  }
  response.setVersion(host.getVersion().toString());
  if (host.getHypervisorType() != null) {
    response.setHypervisor(host.getHypervisorType());
  }
  if ((host.getCpus() != null) && (host.getSpeed() != null) && !(host.getType().toString().equals("Storage"))) {
    response.setCpuNumber(host.getCpus());
    response.setCpuSpeed(host.getSpeed());
    int cpu=0;
    String cpuAlloc=null;
    DecimalFormat decimalFormat=new DecimalFormat("#.##");
    List<UserVmVO> instances=ApiDBUtils.listUserVMsByHostId(host.getId());
    for (    UserVmVO vm : instances) {
      ServiceOffering so=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
      cpu+=so.getCpu() * so.getSpeed();
    }
    cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + "%";
    response.setCpuAllocated(cpuAlloc);
    String cpuUsed=null;
    HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
    if (hostStats != null) {
      float cpuUtil=(float)hostStats.getCpuUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + "%";
      response.setCpuUsed(cpuUsed);
      long avgLoad=(long)hostStats.getAverageLoad();
      response.setAverageLoad(avgLoad);
      long networkKbsRead=(long)hostStats.getNetworkReadKBs();
      response.setNetworkKbsRead(networkKbsRead);
      long networkKbsWrite=(long)hostStats.getNetworkWriteKBs();
      response.setNetworkKbsWrite(networkKbsWrite);
    }
  }
  if (host.getType() == Host.Type.Routing) {
    Long memory=host.getTotalMemory();
    response.setMemoryTotal(memory);
    long mem=ApiDBUtils.getMemoryUsagebyHost(host.getId());
    response.setMemoryAllocated(mem);
    response.setMemoryUsed(mem);
  }
  if (host.getType().toString().equals("Storage")) {
    response.setDiskSizeTotal(host.getTotalSize());
    response.setDiskSizeAllocated(0L);
  }
  response.setCapabilities(host.getCapabilities());
  response.setLastPinged(new Date(host.getLastPinged()));
  if (host.getManagementServerId() != null) {
    response.setManagementServerId(host.getManagementServerId());
  }
  if (host.getCreated() != null) {
    response.setCreated(host.getCreated());
  }
  if (host.getRemoved() != null) {
    response.setRemoved(host.getRemoved());
  }
  Set<Event> possibleEvents=host.getStatus().getPossibleEvents();
  if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
    String events="";
    Iterator<Event> iter=possibleEvents.iterator();
    while (iter.hasNext()) {
      Event event=iter.next();
      events+=event.toString();
      if (iter.hasNext()) {
        events+="; ";
      }
    }
    response.setEvents(events);
  }
  response.setResponseName(getName());
  return response;
}
