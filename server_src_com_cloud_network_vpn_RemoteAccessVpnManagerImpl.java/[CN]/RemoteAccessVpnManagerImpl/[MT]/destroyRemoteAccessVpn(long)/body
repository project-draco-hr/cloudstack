{
  Account caller=UserContext.current().getCaller();
  RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findById(ipId);
  if (vpn == null) {
    s_logger.debug("vpn id=" + ipId + " does not exists ");
    return;
  }
  _accountMgr.checkAccess(caller,null,vpn);
  Network network=_networkMgr.getNetwork(vpn.getNetworkId());
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getServerAddressId(),vpn);
  List<? extends RemoteAccessVpnElement> elements=_networkMgr.getRemoteAccessVpnElements();
  boolean success=false;
  try {
    for (    RemoteAccessVpnElement element : elements) {
      if (element.stopVpn(network,vpn)) {
        success=true;
        break;
      }
    }
  }
  finally {
    if (success) {
      List<? extends FirewallRule> vpnFwRules=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
      Transaction txn=Transaction.currentTxn();
      boolean applyFirewall=false;
      List<FirewallRuleVO> fwRules=new ArrayList<FirewallRuleVO>();
      if (_rulesDao.findByRelatedId(vpnFwRules.get(0).getId()) != null) {
        applyFirewall=true;
      }
      if (applyFirewall) {
        txn.start();
        for (        FirewallRule vpnFwRule : vpnFwRules) {
          _firewallMgr.revokeRelatedFirewallRule(vpnFwRule.getId(),false);
          fwRules.add(_rulesDao.findByRelatedId(vpnFwRule.getId()));
        }
        s_logger.debug("Marked " + fwRules.size() + " firewall rules as Revoked as a part of disable remote access vpn");
        txn.commit();
        s_logger.debug("Reapplying firewall rules for ip id=" + ipId + " as a part of disable remote access vpn");
        success=_firewallMgr.applyFirewallRules(ipId,caller);
      }
      if (success) {
        try {
          txn.start();
          _remoteAccessVpnDao.remove(ipId);
          if (vpnFwRules != null) {
            for (            FirewallRule vpnFwRule : vpnFwRules) {
              _rulesDao.remove(vpnFwRule.getId());
              s_logger.debug("Successfully removed firewall rule with ip id=" + vpnFwRule.getSourceIpAddressId() + " and port "+ vpnFwRule.getSourcePortStart()+ " as a part of vpn cleanup");
            }
          }
          txn.commit();
        }
 catch (        Exception ex) {
          txn.rollback();
          s_logger.warn("Unable to release the three vpn ports from the firewall rules",ex);
        }
      }
    }
  }
}
