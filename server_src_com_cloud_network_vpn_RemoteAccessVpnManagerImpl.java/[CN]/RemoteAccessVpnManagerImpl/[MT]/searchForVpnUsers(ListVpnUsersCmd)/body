{
  String username=cmd.getUsername();
  Long id=cmd.getId();
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listVpnUsers");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VpnUserVO.class,"username",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VpnUserVO> sb=_vpnUsersDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("username",sb.entity().getUsername(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),Op.IN);
  SearchCriteria<VpnUserVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  sc.setParameters("state",State.Active,State.Add);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (username != null) {
    sc.setParameters("username",username);
  }
  Pair<List<VpnUserVO>,Integer> result=_vpnUsersDao.searchAndCount(sc,searchFilter);
  return new Pair<List<? extends VpnUser>,Integer>(result.first(),result.second());
}
