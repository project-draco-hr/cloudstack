{
  Account caller=UserContext.current().getCaller();
  RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findById(ipId);
  if (vpn == null) {
    s_logger.debug("vpn id=" + ipId + " does not exists ");
    return;
  }
  _accountMgr.checkAccess(caller,vpn);
  Network network=_networkMgr.getNetwork(vpn.getNetworkId());
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getServerAddressId(),vpn);
  List<? extends RemoteAccessVpnElement> elements=_networkMgr.getRemoteAccessVpnElements();
  boolean success=false;
  try {
    for (    RemoteAccessVpnElement element : elements) {
      if (element.stop(network,vpn)) {
        success=true;
        break;
      }
    }
  }
  finally {
    if (success) {
      Transaction txn=Transaction.currentTxn();
      try {
        txn.start();
        _remoteAccessVpnDao.remove(ipId);
        List<? extends FirewallRule> ports=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
        if (ports != null) {
          for (          FirewallRule port : ports) {
            _rulesDao.remove(port.getId());
            s_logger.debug("Successfully removed firewall rule with ip id=" + port.getSourceIpAddressId() + " and port "+ port.getSourcePortStart()+ " as a part of vpn cleanup");
          }
        }
        txn.commit();
      }
 catch (      Exception ex) {
        txn.rollback();
        s_logger.warn("Unable to release the three vpn ports from the firewall rules",ex);
      }
    }
  }
}
