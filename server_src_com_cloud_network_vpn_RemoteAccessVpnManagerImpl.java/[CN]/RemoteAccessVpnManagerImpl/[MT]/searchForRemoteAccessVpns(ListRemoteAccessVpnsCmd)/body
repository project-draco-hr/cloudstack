{
  Account caller=UserContext.current().getCaller();
  Long ipAddressId=cmd.getPublicIpId();
  Long domainId=cmd.getDomainId();
  boolean isRecursive=cmd.isRecursive();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException("Unable to list remote access vpns, IP address " + ipAddressId + " not found.");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException("Unable to list remote access vpns, IP address " + ipAddressId + " is not associated with an account.");
      }
    }
    _accountMgr.checkAccess(caller,null,publicIp);
  }
  ListProjectResourcesCriteria listProjectResourcesCriteria=_accountMgr.buildACLSearchParameters(caller,domainId,isRecursive,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,cmd.listAll(),null);
  Filter filter=new Filter(RemoteAccessVpnVO.class,"serverAddressId",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("serverAddressId",sb.entity().getServerAddressId(),Op.EQ);
  sb.and("state",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters("state",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters("serverAddressId",ipAddressId);
  }
  return _remoteAccessVpnDao.search(sc,filter);
}
