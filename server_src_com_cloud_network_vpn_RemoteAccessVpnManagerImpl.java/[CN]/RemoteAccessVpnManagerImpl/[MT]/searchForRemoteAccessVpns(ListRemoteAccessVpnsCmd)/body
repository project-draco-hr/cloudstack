{
  Account caller=CallContext.current().getCallingAccount();
  Long ipAddressId=cmd.getPublicIpId();
  Long vpnId=cmd.getId();
  Long networkId=cmd.getNetworkId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException("Unable to list remote access vpns, IP address " + ipAddressId + " not found.");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException("Unable to list remote access vpns, IP address " + ipAddressId + " is not associated with an account.");
      }
    }
    _accountMgr.checkAccess(caller,null,true,publicIp);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(RemoteAccessVpnVO.class,"serverAddressId",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("serverAddressId",sb.entity().getServerAddressId(),Op.EQ);
  sb.and("id",sb.entity().getId(),Op.EQ);
  sb.and("networkId",sb.entity().getNetworkId(),Op.EQ);
  sb.and("state",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters("state",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters("serverAddressId",ipAddressId);
  }
  if (vpnId != null) {
    sc.setParameters("id",vpnId);
  }
  if (networkId != null) {
    sc.setParameters("networkId",networkId);
  }
  Pair<List<RemoteAccessVpnVO>,Integer> result=_remoteAccessVpnDao.searchAndCount(sc,filter);
  return new Pair<List<? extends RemoteAccessVpn>,Integer>(result.first(),result.second());
}
