def _parse_userauth_request(self, m):
    if (not self.transport.server_mode):
        m = Message()
        m.add_byte(chr(MSG_USERAUTH_FAILURE))
        m.add_string('none')
        m.add_boolean(0)
        self.transport._send_message(m)
        return
    if self.authenticated:
        return
    username = m.get_string()
    service = m.get_string()
    method = m.get_string()
    self.transport._log(DEBUG, ('Auth request (type=%s) service=%s, username=%s' % (method, service, username)))
    if (service != 'ssh-connection'):
        self._disconnect_service_not_available()
        return
    if ((self.auth_username is not None) and (self.auth_username != username)):
        self.transport._log(WARNING, 'Auth rejected because the client attempted to change username in mid-flight')
        self._disconnect_no_more_auth()
        return
    self.auth_username = username
    if (method == 'none'):
        result = self.transport.server_object.check_auth_none(username)
    elif (method == 'password'):
        changereq = m.get_boolean()
        password = m.get_string()
        try:
            password = password.decode('UTF-8')
        except UnicodeError:
            pass
        if changereq:
            self.transport._log(DEBUG, 'Auth request to change passwords (rejected)')
            newpassword = m.get_string()
            try:
                newpassword = newpassword.decode('UTF-8', 'replace')
            except UnicodeError:
                pass
            result = AUTH_FAILED
        else:
            result = self.transport.server_object.check_auth_password(username, password)
    elif (method == 'publickey'):
        sig_attached = m.get_boolean()
        keytype = m.get_string()
        keyblob = m.get_string()
        try:
            key = self.transport._key_info[keytype](Message(keyblob))
        except SSHException as e:
            self.transport._log(INFO, ('Auth rejected: public key: %s' % str(e)))
            key = None
        except:
            self.transport._log(INFO, 'Auth rejected: unsupported or mangled public key')
            key = None
        if (key is None):
            self._disconnect_no_more_auth()
            return
        result = self.transport.server_object.check_auth_publickey(username, key)
        if (result != AUTH_FAILED):
            if (not sig_attached):
                m = Message()
                m.add_byte(chr(MSG_USERAUTH_PK_OK))
                m.add_string(keytype)
                m.add_string(keyblob)
                self.transport._send_message(m)
                return
            sig = Message(m.get_string())
            blob = self._get_session_blob(key, service, username)
            if (not key.verify_ssh_sig(blob, sig)):
                self.transport._log(INFO, 'Auth rejected: invalid signature')
                result = AUTH_FAILED
    elif (method == 'keyboard-interactive'):
        lang = m.get_string()
        submethods = m.get_string()
        result = self.transport.server_object.check_auth_interactive(username, submethods)
        if isinstance(result, InteractiveQuery):
            self._interactive_query(result)
            return
    else:
        result = self.transport.server_object.check_auth_none(username)
    self._send_auth_result(username, method, result)
