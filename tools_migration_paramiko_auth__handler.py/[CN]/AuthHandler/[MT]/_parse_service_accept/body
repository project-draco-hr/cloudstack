def _parse_service_accept(self, m):
    service = m.get_string()
    if (service == 'ssh-userauth'):
        self.transport._log(DEBUG, 'userauth is OK')
        m = Message()
        m.add_byte(chr(MSG_USERAUTH_REQUEST))
        m.add_string(self.username)
        m.add_string('ssh-connection')
        m.add_string(self.auth_method)
        if (self.auth_method == 'password'):
            m.add_boolean(False)
            password = self.password
            if isinstance(password, unicode):
                password = password.encode('UTF-8')
            m.add_string(password)
        elif (self.auth_method == 'publickey'):
            m.add_boolean(True)
            m.add_string(self.private_key.get_name())
            m.add_string(str(self.private_key))
            blob = self._get_session_blob(self.private_key, 'ssh-connection', self.username)
            sig = self.private_key.sign_ssh_data(self.transport.randpool, blob)
            m.add_string(str(sig))
        elif (self.auth_method == 'keyboard-interactive'):
            m.add_string('')
            m.add_string(self.submethods)
        elif (self.auth_method == 'none'):
            pass
        else:
            raise SSHException(('Unknown auth method "%s"' % self.auth_method))
        self.transport._send_message(m)
    else:
        self.transport._log(DEBUG, ('Service request "%s" accepted (?)' % service))
