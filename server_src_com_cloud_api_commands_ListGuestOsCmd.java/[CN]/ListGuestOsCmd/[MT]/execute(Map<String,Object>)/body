{
  List<GuestOSVO> guestOSList=null;
  try {
    Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
    Long osCategoryId=(Long)params.get(BaseCmd.Properties.OS_CATEGORY_ID.getName());
    Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
    Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
    Long startIndex=Long.valueOf(0);
    int pageSizeNum=150;
    if (pageSize != null) {
      pageSizeNum=pageSize.intValue();
    }
    if (page != null) {
      int pageNum=page.intValue();
      if (pageNum > 0) {
        startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
      }
    }
    Criteria c=new Criteria("displayName",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
    if (id != null) {
      c.addCriteria(Criteria.ID,id);
    }
    if (osCategoryId != null) {
      c.addCriteria(Criteria.OSCATEGORYID,osCategoryId);
    }
    guestOSList=getManagementServer().listGuestOSByCriteria(c);
  }
 catch (  Exception ex) {
    s_logger.error("Exception listing guest OS",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to list guest OS due to exception: " + ex.getMessage());
  }
  Object[] tag=null;
  List<Pair<String,Object>> guestOSTags=new ArrayList<Pair<String,Object>>();
  if (guestOSList != null) {
    tag=new Object[guestOSList.size()];
    int i=0;
    for (    GuestOSVO guestOS : guestOSList) {
      List<Pair<String,Object>> guestOSData=new ArrayList<Pair<String,Object>>();
      guestOSData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),guestOS.getId().toString()));
      guestOSData.add(new Pair<String,Object>(BaseCmd.Properties.OS_CATEGORY_ID.getName(),guestOS.getCategoryId()));
      guestOSData.add(new Pair<String,Object>(BaseCmd.Properties.DESCRIPTION.getName(),guestOS.getDisplayName()));
      tag[i++]=guestOSData;
    }
  }
 else {
    tag=new Object[0];
  }
  Pair<String,Object> guestOSTag=new Pair<String,Object>("ostype",tag);
  guestOSTags.add(guestOSTag);
  return guestOSTags;
}
