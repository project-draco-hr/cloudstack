@classmethod
def setUpClass(cls):
    cloudstackTestClient = super(TestResizeVolume, cls).getClsTestClient()
    cls.api_client = cloudstackTestClient.getApiClient()
    cls.hypervisor = cloudstackTestClient.getHypervisorInfo()
    cls.services = cloudstackTestClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cloudstackTestClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls._cleanup = []
    cls.unsupportedStorageType = False
    if (cls.hypervisor.lower() == 'lxc'):
        if (not find_storage_pool_type(cls.api_client, storagetype='rbd')):
            cls.unsupportedStorageType = True
            return
    cls.resourcetypemapping = {RESOURCE_PRIMARY_STORAGE: 10, RESOURCE_SECONDARY_STORAGE: 11, }
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.services['volume']['zoneid'] = cls.zone.id
    try:
        cls.hypervisor = str(get_hypervisor_type(cls.api_client)).lower()
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['                                                          service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.services['disk_offering']['disksize'] = 5
        cls.disk_offering_5_GB = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
        cls._cleanup.append(cls.disk_offering_5_GB)
        cls.services['disk_offering']['disksize'] = 20
        cls.disk_offering_20_GB = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
        cls._cleanup.append(cls.disk_offering_20_GB)
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Failure while creating disk offering: %s' % e))
    return
