{
  final String insertSystemAccount="INSERT INTO `cloud`.`account` (id, account_name, type, domain_id) VALUES (1, 'system', '1', '1')";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSystemAccount);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error("error creating system account",ex);
  }
  final String insertSystemUser="INSERT INTO `cloud`.`user` (id, username, password, account_id, firstname, lastname, created)" + " VALUES (1, 'system', RAND(), 1, 'system', 'cloud', now())";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSystemUser);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error("error creating system user",ex);
  }
  long id=Long.parseLong(_currentObjectParams.get("id"));
  String username=_currentObjectParams.get("username");
  String firstname=_currentObjectParams.get("firstname");
  String lastname=_currentObjectParams.get("lastname");
  String password=_currentObjectParams.get("password");
  String email=_currentObjectParams.get("email");
  if (email == null || email.equals("")) {
    printError("An email address for each user is required.");
  }
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance("MD5");
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error("error saving user",e);
    return;
  }
  md5.reset();
  BigInteger pwInt=new BigInteger(1,md5.digest(password.getBytes()));
  String pwStr=pwInt.toString(16);
  int padding=32 - pwStr.length();
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding; i++) {
    sb.append('0');
  }
  sb.append(pwStr);
  final String insertAdminAccount="INSERT INTO `cloud`.`account` (id, account_name, type, domain_id) VALUES (?, ?, '1', '1')";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertAdminAccount);
    stmt.setLong(1,id);
    stmt.setString(2,username);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error("error creating account",ex);
  }
  final String insertUser="INSERT INTO `cloud`.`user` (id, username, password, account_id, firstname, lastname, email, created) " + "VALUES (?,?,?, 2, ?,?,?,now())";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertUser);
    stmt.setLong(1,id);
    stmt.setString(2,username);
    stmt.setString(3,sb.toString());
    stmt.setString(4,firstname);
    stmt.setString(5,lastname);
    stmt.setString(6,email);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error("error creating user",ex);
  }
}
