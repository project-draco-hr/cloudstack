{
  long id=Long.parseLong(_currentObjectParams.get("id"));
  long domainId=Long.parseLong(_currentObjectParams.get("domainId"));
  String name=_currentObjectParams.get("name");
  String displayText=_currentObjectParams.get("displayText");
  long diskSpace=Long.parseLong(_currentObjectParams.get("diskSpace"));
  diskSpace=diskSpace * 1024 * 1024;
  String tags=_currentObjectParams.get("tags");
  String useLocal=_currentObjectParams.get("useLocal");
  boolean local=false;
  if (useLocal != null) {
    local=Boolean.parseBoolean(useLocal);
  }
  if (tags != null && tags.length() > 0) {
    String[] tokens=tags.split(",");
    StringBuilder newTags=new StringBuilder();
    for (    String token : tokens) {
      newTags.append(token.trim()).append(",");
    }
    newTags.delete(newTags.length() - 1,newTags.length());
    tags=newTags.toString();
  }
  DiskOfferingVO diskOffering=new DiskOfferingVO(domainId,name,displayText,diskSpace,tags,false);
  diskOffering.setUseLocalStorage(local);
  DiskOfferingDaoImpl offering=ComponentLocator.inject(DiskOfferingDaoImpl.class);
  try {
    offering.persist(diskOffering);
  }
 catch (  Exception e) {
    s_logger.error("error creating disk offering",e);
  }
}
