{
  long id=Long.parseLong(_currentObjectParams.get("id"));
  String name=_currentObjectParams.get("name");
  String displayText=_currentObjectParams.get("displayText");
  int cpu=Integer.parseInt(_currentObjectParams.get("cpu"));
  int ramSize=Integer.parseInt(_currentObjectParams.get("ramSize"));
  int speed=Integer.parseInt(_currentObjectParams.get("speed"));
  String useLocalStorageValue=_currentObjectParams.get("useLocalStorage");
  int nwRate=200;
  int mcRate=10;
  boolean ha=Boolean.parseBoolean(_currentObjectParams.get("enableHA"));
  boolean mirroring=Boolean.parseBoolean(_currentObjectParams.get("mirrored"));
  String guestIpType=_currentObjectParams.get("guestIpType");
  NetworkOffering.GuestIpType type=null;
  if (guestIpType == null) {
    type=NetworkOffering.GuestIpType.Virtual;
  }
 else {
    type=NetworkOffering.GuestIpType.valueOf(guestIpType);
  }
  boolean useLocalStorage;
  if (useLocalStorageValue != null) {
    if (Boolean.parseBoolean(useLocalStorageValue)) {
      useLocalStorage=true;
    }
 else {
      useLocalStorage=false;
    }
  }
 else {
    useLocalStorage=false;
  }
  ServiceOfferingVO serviceOffering=new ServiceOfferingVO(name,cpu,ramSize,speed,nwRate,mcRate,ha,displayText,type,useLocalStorage,false,null,false);
  ServiceOfferingDaoImpl dao=ComponentLocator.inject(ServiceOfferingDaoImpl.class);
  try {
    dao.persist(serviceOffering);
  }
 catch (  Exception e) {
    s_logger.error("error creating service offering",e);
  }
}
