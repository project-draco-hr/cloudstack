{
  String name=_currentObjectParams.get("name");
  long id=Long.parseLong(_currentObjectParams.get("id"));
  long dataCenterId=Long.parseLong(_currentObjectParams.get("zoneId"));
  long podId=Long.parseLong(_currentObjectParams.get("podId"));
  long clusterId=Long.parseLong(_currentObjectParams.get("clusterId"));
  String hostAddress=_currentObjectParams.get("hostAddress");
  String hostPath=_currentObjectParams.get("hostPath");
  String storageType=_currentObjectParams.get("storageType");
  String uuid=UUID.nameUUIDFromBytes(new String(hostAddress + hostPath).getBytes()).toString();
  String insertSql1="INSERT INTO `storage_pool` (`id`, `name`, `uuid` , `pool_type` , `port`, `data_center_id` ,`available_bytes` , `capacity_bytes` ,`host_address`, `path`, `created`, `pod_id`,`status` , `cluster_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
  Transaction txn=Transaction.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql1);
    stmt.setLong(1,id);
    stmt.setString(2,name);
    stmt.setString(3,uuid);
    if (storageType == null) {
      stmt.setString(4,"NetworkFileSystem");
    }
 else {
      stmt.setString(4,storageType);
    }
    stmt.setLong(5,111);
    stmt.setLong(6,dataCenterId);
    stmt.setLong(7,0);
    stmt.setLong(8,0);
    stmt.setString(9,hostAddress);
    stmt.setString(10,hostPath);
    stmt.setDate(11,new Date(new java.util.Date().getTime()));
    stmt.setLong(12,podId);
    stmt.setString(13,Status.Up.toString());
    stmt.setLong(14,clusterId);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    System.out.println("Error creating storage pool: " + ex.getMessage());
    s_logger.error("error creating storage pool ",ex);
    return;
  }
}
