@attr(tags=['advanced'], required_hardware='true')
def test_05_create_delete_lbrule_forvpc(self):
    '\n        @summary: Test to list, create and delete Load Balancer Rule for IP\n        Address associated to VPC\n        @Steps:\n        Step1: Creating a VPC for the user\n        Step2: Creating Network inside VPC\n        Step3: Associating an IP Addresses for VPC\n        Step4: Listing Load Balancer Rules for the IP Address associated in\n               Step2\n        Step5: Verifying that no Load Balancer Rules are listed\n        Step6: Creating a Load Balancer Rule for IP Address associated in\n               Step2\n        Step7: Listing Load Balancer Rules for the IP Address associated in\n               Step2\n        Step8: Verifying 1 Load Balancer Rule is listed\n        Step9: Deleting the Load Balancer Rule created in Step5\n        Step10: Listing Load Balancer Rules for the IP Address associated in\n               Step2\n        Step11: Verifying that no Load Balancer Rules are listed\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        self.skipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, "VPC's Listed for newly Created User")
    vpc_created = VPC.create(self.userapiclient, self.services['vpc'], self.vpc_offering.id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    network_offering_vpc_true_list = NetworkOffering.list(self.userapiclient, forvpc='true', zoneid=self.zone.id, supportedServices='Lb', state='Enabled')
    status = validateList(network_offering_vpc_true_list)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = true with Lb')
    network_created = Network.create(self.userapiclient, self.services['ntwk'], networkofferingid=network_offering_vpc_true_list[0].id, vpcid=vpc_created.id, zoneid=self.zone.id, gateway=self.services['ntwk']['gateway'], netmask=self.services['ntwk']['netmask'])
    self.cleanup.append(network_created)
    self.assertIsNotNone(network_created, 'Network is not created')
    self.cleanup.append(vpc_created)
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_before)
    self.assertEquals(PASS, status[0], 'list IP Addresses not as expected')
    self.assertEquals(1, len(list_ipaddresses_before), 'list IP Addresses not equal as expected')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], vpcid=vpc_created.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual((len(list_ipaddresses_before) + 1), len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_lbrules_before = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_lbrules_before, 'Load Balancer Rules listed for newly Acquired Ip Address')
    self.services['lbrule']['openfirewall'] = 'false'
    lb_rule = LoadBalancerRule.create(self.userapiclient, self.services['lbrule'], ipaddressid=associated_ipaddress.ipaddress.id, networkid=network_created.id)
    self.assertIsNotNone(lb_rule, 'Failed to create Load Balancer Rule')
    expected_dict = {'algorithm': self.services['lbrule']['alg'], 'privateport': str(self.services['lbrule']['privateport']), 'publicport': str(self.services['lbrule']['publicport']), 'name': self.services['lbrule']['name'], }
    actual_dict = {'algorithm': str(lb_rule.algorithm), 'privateport': str(lb_rule.privateport), 'publicport': str(lb_rule.publicport), 'name': str(lb_rule.name), }
    lbrule_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, lbrule_status, 'Created Load Balancer Rule details are not as expected')
    list_lbrules_after = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    status = validateList(list_lbrules_after)
    self.assertEquals(PASS, status[0], 'Load Balancer Rule creation Failed')
    self.assertEqual(1, len(list_lbrules_after), 'Load Balancer Rule creation Failed')
    lb_rule.delete(self.userapiclient)
    list_lbrules_after = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_lbrules_after, 'Failed to delete Load Balancer Rule')
    self.cleanup.append(self.account)
    return
