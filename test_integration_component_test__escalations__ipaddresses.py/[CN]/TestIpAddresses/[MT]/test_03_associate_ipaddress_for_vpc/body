@attr(tags=['advanced'], required_hardware='true')
def test_03_associate_ipaddress_for_vpc(self):
    '\n        @summary: Test to Associate IP Address for VPC\n        @Steps:\n        Step1: Creating a VPC for the user\n        Step2: Listing all the IP Addresses for a user\n        Step3: Verifying that 1 IP Addresses is listed\n        Step4: Associating an IP Addresses for VPC\n        Step5: Listing all the IP Addresses again\n        Step6: Verifying the length of the IP Addresses list is 2\n        Step7: Listing  the IP Addresses by Id\n        Step8: Verifying that the length of the IP Addresses list is 1\n        Step9: Verifying the details of the Listed IP Address\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        self.skipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, "VPC's Listed for newly Created User")
    vpc_created = VPC.create(self.userapiclient, self.services['vpc'], self.vpc_offering.id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    self.cleanup.append(vpc_created)
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_before)
    self.assertEquals(PASS, status[0], 'Failed to List VPC IP Address')
    self.assertEquals(1, len(list_ipaddresses_before), 'Failed to List VPC IP Address')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], vpcid=vpc_created.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual((len(list_ipaddresses_before) + 1), len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_ipaddress_byid = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], id=associated_ipaddress.ipaddress.id)
    status = validateList(list_ipaddress_byid)
    self.assertEquals(PASS, status[0], 'Failed to list IP Addresses by ID')
    self.assertEquals(1, len(list_ipaddress_byid), 'Failed to list IP Addresses by ID')
    expected_dict = {'id': associated_ipaddress.ipaddress.id, 'associatednetworkid': associated_ipaddress.ipaddress.associatednetworkid, 'associatednetworkname': associated_ipaddress.ipaddress.associatednetworkname, 'ipaddress': associated_ipaddress.ipaddress.ipaddress, 'issourcenat': associated_ipaddress.ipaddress.issourcenat, 'isstaticnat': associated_ipaddress.ipaddress.isstaticnat, 'networkid': associated_ipaddress.ipaddress.networkid, 'vpcid': associated_ipaddress.ipaddress.vpcid, }
    actual_dict = {'id': list_ipaddress_byid[0].id, 'associatednetworkid': list_ipaddress_byid[0].associatednetworkid, 'associatednetworkname': list_ipaddress_byid[0].associatednetworkname, 'ipaddress': list_ipaddress_byid[0].ipaddress, 'issourcenat': list_ipaddress_byid[0].issourcenat, 'isstaticnat': list_ipaddress_byid[0].isstaticnat, 'networkid': list_ipaddress_byid[0].networkid, 'vpcid': list_ipaddress_byid[0].vpcid, }
    ipaddress_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, ipaddress_status, 'Listed IP Address details are not as expected')
    self.cleanup.append(self.account)
    return
