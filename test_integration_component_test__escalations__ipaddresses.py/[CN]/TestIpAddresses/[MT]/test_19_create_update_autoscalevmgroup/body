@attr(tags=['advanced'], required_hardware='true')
def test_19_create_update_autoscalevmgroup(self):
    '\n        @summary: Test to list, create, update, enable,                disable Autoscale VM Profiles\n        @Steps:\n        Step1: Creating a Network Offering for Supported Service LB with\n               Netscaler\n        Step2: Create a Network using Network Offering created in Step1\n        Step3: Launching a VM using Network created in Step2\n        Step4: Associating IP Address for Network created in Step2\n        Step5: Creating Scaleup condition and scaleup policy\n        Step6: Creating Scaledown condition and scaledown policy\n        Step7: Creating Autoscale VM profile\n        Step8: Creating Load Balancer Rule\n        Step9: Listing Autoscale Vm groups and verifying no Autoscale VM groups\n               are listed\n        Step10: Creating Autoscale VM Group and verifying it was created\n        Step11: Listing Autoscale Vm groups and verifying 1 Autoscale VM groups\n                is listed\n        Step12: Disabling Autoscale VM group and verifying it was disabled\n        Step13: Updating Autoscale VM group and verifying it was updated\n        Step14: Enabling Autoscale VM group and verifying it was enabled\n        '
    if (self.hypervisor.lower() == 'kvm'):
        raise unittest.SkipTest('ScaleVM is not supported on KVM. Hence, skipping the test')
    list_physical_networks = PhysicalNetwork.list(self.apiClient, zoneid=self.zone.id)
    run_flag = False
    for i in range(0, len(list_physical_networks)):
        list_network_serviceprovider = NetworkServiceProvider.list(self.apiClient, physicalnetworkid=list_physical_networks[i].id)
        for j in range(0, len(list_network_serviceprovider)):
            if ((list_network_serviceprovider[j].name == 'Netscaler') and (list_network_serviceprovider[j].state == 'Enabled')):
                run_flag = True
                break
    if (not run_flag):
        self.debug('Netscaler is not enabled and auto scale VM is                        applicable only for Netscaler')
    else:
        list_nwoff_before = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        nwoff_created = NetworkOffering.create(self.apiClient, self.services['nw_off_isolated_netscaler'])
        self.assertIsNotNone(nwoff_created, 'Failed to Create Network Offering with                        LB sercvice for Netscaler')
        nwoff_created.update(self.apiClient, state='Enabled')
        list_nwoff_after = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        self.assertEquals((len(list_nwoff_before) + 1), len(list_nwoff_after), 'Failed to create Network Offering')
        network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=nwoff_created.id, zoneid=self.zone.id)
        self.assertIsNotNone(network, 'Network creation failed')
        self.cleanup.append(network)
        vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
        list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_before)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed while launching a VM')
        self.assertEqual(1, len(list_ipaddresses_before), 'IP Addresses Association Failed while launching a VM')
        associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
        self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
        list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_after)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
        self.assertEqual(2, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
        list_users = User.list(self.apiClient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
        status = validateList(list_users)
        self.assertEquals(PASS, status[0], 'Failed to list Users')
        list_counters = Autoscale.listCounters(self.userapiclient)
        status = validateList(list_counters)
        self.assertEquals(PASS, status[0], 'Failed to list Counters')
        condition_scaleup = Autoscale.createCondition(self.userapiclient, counterid=list_counters[0].id, relationaloperator='GT', threshold='40')
        self.assertIsNotNone(condition_scaleup, 'Failed to create Scaleup Condition')
        scaleup_policy = Autoscale.createAutoscalePolicy(self.userapiclient, action='scaleup', conditionids=condition_scaleup.id, duration='40', quiettime='300')
        self.assertIsNotNone(scaleup_policy, 'Failed to create Scaleup VM Policy')
        condition_scaledown = Autoscale.createCondition(self.userapiclient, counterid=list_counters[0].id, relationaloperator='GT', threshold='10')
        self.assertIsNotNone(condition_scaledown, 'Failed to create Scaledown Condition')
        scaledown_policy = Autoscale.createAutoscalePolicy(self.userapiclient, action='scaledown', conditionids=condition_scaledown.id, duration='40', quiettime='300')
        self.assertIsNotNone(scaledown_policy, 'Failed to create Scaledown VM Policy')
        counterparam = {'snmpcommunity': 'public', 'snmpport': '161', }
        vmprofile = Autoscale.createAutoscaleVmProfile(self.userapiclient, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, templateid=self.template.id, autoscaleuserid=list_users[0].id, destroyvmgraceperiod='30', counterparam=counterparam)
        self.assertIsNotNone(vmprofile, 'Failed to create Autoscale Vm Profile')
        self.services['lbrule']['openfirewall'] = False
        lbrule = LoadBalancerRule.create(self.userapiclient, self.services['lbrule'], ipaddressid=associated_ipaddress.ipaddress.id, accountid=self.account.name, networkid=network.id, domainid=self.domain.id)
        self.assertIsNotNone(lbrule, 'Failed to create Load Balancer Rule')
        list_vmgroup_before = Autoscale.listAutoscaleVmGroup(self.userapiclient, listall=self.services['listall'], lbruleid=lbrule.id)
        self.assertIsNone(list_vmgroup_before, 'Listed Autoscale VM Groups for newly created LB Rule')
        vmgroup = Autoscale.createAutoscaleVmGroup(self.userapiclient, lbruleid=lbrule.id, minmembers='3', maxmembers='10', scaledownpolicyids=scaledown_policy.id, scaleuppolicyids=scaleup_policy.id, vmprofileid=vmprofile.id, interval='30')
        self.assertIsNotNone(vmgroup, 'Failed to create Autoscale VM Group')
        list_vmgroup_after = Autoscale.listAutoscaleVmGroup(self.userapiclient, listall=self.services['listall'], lbruleid=lbrule.id)
        status = validateList(list_vmgroup_after)
        self.assertEquals(PASS, status[0], 'Failed to list Autoscale VM group after creation')
        self.assertEquals(1, len(list_vmgroup_after), 'Autoscale VM group list count is not matching')
        vmgroup_disabled = Autoscale.disableAutoscaleVmGroup(self.userapiclient, id=vmgroup.id)
        self.assertIsNotNone(vmgroup_disabled, 'Failed to disable Autoscale VM group')
        self.assertEquals('disabled', vmgroup_disabled.state, 'Disabled VM Group state is not matching')
        vmgroup_updated = Autoscale.updateAutoscaleVMGroup(self.userapiclient, id=vmgroup.id, minmembers='3', maxmembers='10', scaledownpolicyids=scaledown_policy.id, scaleuppolicyids=scaleup_policy.id, interval='40')
        self.assertIsNotNone(vmgroup_updated, 'Failed to update Autoscale VM group')
        self.assertEquals(40, vmgroup_updated.interval, 'Updated Autoscale VM group interval value is not matching')
        vmgroup_enabled = Autoscale.enableAutoscaleVmGroup(self.userapiclient, id=vmgroup.id)
        self.assertIsNotNone(vmgroup_enabled, 'Failed to enable Autoscale VM group')
        self.assertEquals('enabled', vmgroup_enabled.state, 'Enabled VM Group state is not matching')
        vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
