@attr(tags=['advanced'], required_hardware='true')
def test_09_create_delete_portforwarding_fornonvpc(self):
    '\n        @summary: Test to list, create and delete Port Forwarding for IP Address associated to Non VPC network\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Launching Virtual Machine in network created in step 2\n        Step4: Listing Port Forwarding Rules for the IP Address associated in Step2\n        Step5: Verifying that no Port Forwarding Rules are listed\n        Step6: Creating a Port Forwarding Rule for IP Address associated in Step2\n        Step7: Listing Port Forwarding Rules for the IP Address associated in Step2\n        Step8: Verifying 1 Port Forwarding Rule is listed\n        Step9: Deleting the Port Forwarding Rule created in Step6\n        Step10: Listing Port Forwarding Rules for the IP Address associated in Step2\n        Step11: Verifying that no Port Forwarding Rules are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,PortForwarding', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, PortForwarding enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    self.cleanup.append(network)
    list_vms_running = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], state='Running', networkid=network.id)
    status = validateList(list_vms_running)
    self.assertEquals(PASS, status[0], 'VM Created is not in Running state')
    self.assertEqual(1, len(list_ipaddresses_after), 'VM Created is not in Runnning state')
    self.assertEquals(vm_created.id, list_vms_running[0].id, 'VM Created is not in Runnning state')
    list_vms_stopped = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], state='Stopped', networkid=network.id)
    self.assertIsNone(list_vms_stopped, 'VM Created is in stopped state')
    list_prtfwdrule_before = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_prtfwdrule_before, 'Port Forwarding Rules listed for newly associated IP Address')
    portfwd_rule = NATRule.create(self.userapiclient, virtual_machine=vm_created, services=self.services['natrule'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNotNone(portfwd_rule, 'Failed to create Port Forwarding Rule')
    expected_dict = {'ipaddressid': associated_ipaddress.ipaddress.id, 'privateport': str(self.services['natrule']['privateport']), 'publicport': str(self.services['natrule']['publicport']), 'protocol': str(self.services['natrule']['protocol']).lower(), }
    actual_dict = {'ipaddressid': portfwd_rule.ipaddressid, 'privateport': str(portfwd_rule.privateport), 'publicport': str(portfwd_rule.publicport), 'protocol': portfwd_rule.protocol, }
    portfwd_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, portfwd_status, 'Created Port Forward Rule details are not as expected')
    list_prtfwdrule_after = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    status = validateList(list_prtfwdrule_after)
    self.assertEquals(PASS, status[0], 'Failed to create Port Forwarding Rule')
    self.assertEqual(1, len(list_prtfwdrule_after), 'Failed to create Port Forwarding Rule')
    portfwd_rule.delete(self.userapiclient)
    list_prtfwdrule_after = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_prtfwdrule_after, 'Port Forwarding Rules listed after deletion')
    vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
