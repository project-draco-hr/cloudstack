@attr(tags=['advanced', 'provisioning'])
def test_08_list_create_delete_lbsticky_policy(self):
    '\n        @summary: Test to List, Create, Delete Load Balancer Stickyness Policy\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Creating a Load Balancer Rule for IP Address associated in Step2\n        Step4: Listing Load Balancer Sticky Policies for LB Rule created in Step3\n        Step5: Verifying that no Load Balancer Sticky Policies are listed\n        Step6: Creating a Load Balancer Sticky Policies for LB Rule created in Step3\n        Step7: Listing Load Balancer Sticky Policies for LB Rule created in Step3\n        Step8: Verifying 1 Load Balancer Sticky Policy is listed\n        Step9: Deleting the Load Balancer Sticky Policies\n        Step10: Listing Load Balancer Sticky Policies for LB Rule created in Step3\n        Step11: Verifying that no Load Balancer Sticky Policies are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, Lb enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_networks_after = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    status = validateList(list_networks_after)
    self.assertEquals(PASS, status[0], 'Network Creation Failed')
    self.assertEquals(1, len(list_networks_after), 'Network Creation Failed')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_lbrules_before = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_lbrules_before, 'Load Balancer Rules listed for newly Acquired Ip Address')
    self.services['lbrule']['openfirewall'] = 'false'
    lb_rule = LoadBalancerRule.create(self.userapiclient, self.services['lbrule'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNotNone(lb_rule, 'Failed to create Load Balancer Rule')
    list_lbrules_after = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    status = validateList(list_lbrules_after)
    self.assertEquals(PASS, status[0], 'Load Balancer Rule creation Failed')
    self.assertEqual(1, len(list_lbrules_after), 'Load Balancer Rule creation Failed')
    list_lbstickypolicy_before = LoadBalancerRule.listStickyPolicies(self.userapiclient, lbruleid=lb_rule.id, listall=self.services['listall'])
    self.assertEquals(0, len(list_lbstickypolicy_before[0].stickinesspolicy), 'Sticky Policy listed for newly created Load Balancer Rule')
    sticky_policy = LoadBalancerRule.createSticky(lb_rule, self.userapiclient, methodname='LbCookie', name='LbCookieSticky')
    self.assertIsNotNone(sticky_policy, 'Failed to create Sticky Policy for Load Balancer Rule')
    expected_dict = {'account': self.account.name, 'domainid': self.domain.id, 'lbruleid': lb_rule.id, 'methodname': 'LbCookie', 'name': 'LbCookieSticky', }
    actual_dict = {'account': sticky_policy.account, 'domainid': sticky_policy.domainid, 'lbruleid': sticky_policy.lbruleid, 'methodname': sticky_policy.stickinesspolicy[0].methodname, 'name': sticky_policy.stickinesspolicy[0].name, }
    lbstickypolicy_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, lbstickypolicy_status, 'Created Load Balancer Sticky Policy details are not as expected')
    list_lbstickypolicy_after = LoadBalancerRule.listStickyPolicies(self.userapiclient, lbruleid=lb_rule.id, listall=self.services['listall'])
    status = validateList(list_lbstickypolicy_after[0].stickinesspolicy)
    self.assertEquals(PASS, status[0], 'Load Balancer Sticky Policy creation Failed')
    self.assertEqual(1, len(list_lbstickypolicy_after[0].stickinesspolicy), 'Load Balancer Sticky Policy creation Failed')
    LoadBalancerRule.deleteSticky(lb_rule, self.userapiclient, id=sticky_policy.stickinesspolicy[0].id)
    list_lbstickypolicy_after = LoadBalancerRule.listStickyPolicies(self.userapiclient, lbruleid=lb_rule.id, listall=self.services['listall'])
    self.assertEquals(0, len(list_lbstickypolicy_after[0].stickinesspolicy), 'Sticky Policy listed for newly created Load Balancer Rule')
    self.cleanup.append(self.account)
    return
