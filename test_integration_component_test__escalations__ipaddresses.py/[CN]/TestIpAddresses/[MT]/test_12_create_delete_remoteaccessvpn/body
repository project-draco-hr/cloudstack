@attr(tags=['advanced', 'provisioning'])
def test_12_create_delete_remoteaccessvpn(self):
    '\n        @summary: Test to list, create and delete Remote Access VPNs\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Listing Remore Access VPNs for the IP Address associated in Step2\n        Step4: Verifying that no Remore Access VPNs are listed\n        Step5: Creating a Remore Access VPN for IP Address associated in Step2\n        Step6: Listing Remore Access VPNs for the IP Address associated in Step2\n        Step7: Verifying 1 Remore Access VPN is listed\n        Step8: Deleting the Remore Access VPNs created in Step5\n        Step9: Listing Remore Access VPNs for the IP Address associated in Step2\n        Step10: Verifying that no Remore Access VPNs are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Vpn', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, Vpn enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_vpns_before = Vpn.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_vpns_before, 'Remote Access VPNs listed for newly associated IP Address')
    vpn_created = Vpn.create(self.userapiclient, publicipid=associated_ipaddress.ipaddress.id, account=self.account.name, domainid=self.domain.id, openfirewall='false')
    self.assertIsNotNone(vpn_created, 'Failed to create Remote Access VPN')
    expected_dict = {'ipaddressid': associated_ipaddress.ipaddress.id, 'account': self.account.name, 'domainid': self.domain.id, 'state': 'Running', }
    actual_dict = {'ipaddressid': vpn_created.publicipid, 'account': vpn_created.account, 'domainid': vpn_created.domainid, 'state': vpn_created.state, }
    vpn_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, vpn_status, 'Created Remote Access VPN details are not as expected')
    list_vpns_after = Vpn.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    status = validateList(list_vpns_after)
    self.assertEquals(PASS, status[0], 'Failed to create Remote Access VPN')
    self.assertEqual(1, len(list_vpns_after), 'Failed to create Remote Access VPN')
    vpn_created.delete(self.userapiclient)
    list_vpns_after = Vpn.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_vpns_after, 'Failed to create Remote Access VPN')
    self.cleanup.append(self.account)
    return
