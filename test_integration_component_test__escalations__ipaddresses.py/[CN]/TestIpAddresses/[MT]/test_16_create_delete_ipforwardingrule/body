@attr(tags=['advanced', 'provisioning'])
def test_16_create_delete_ipforwardingrule(self):
    '  \n        @summary: Test to list, create and delete IP Forwarding Rules for IP Address\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network created in step1\n        Step3: Associating one more Ip Address to Network created in step1\n        Step4: Launching the VM in network created in step1\n        Step5: Enabling the staticNat to IP Associated in Step3\n        Step6: Listing IP Forwarding rules\n        Step7: Verifying no IP Forwarding rules are listed\n        Step8: Creating a IP Forwarding Rule\n        Step9: Listing IP Forwarding rules\n        Step10: Verifying 1 IP Forwarding rule is listed\n        Step11: Deleting the IP Forwarding rule\n        Step12: Listing IP Forwarding rules\n        Step13: Verifying no IP Forwarding rules are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Vpn', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, Vpn enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress1 = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress1, 'Failed to Associate IP Address')
    associated_ipaddress2 = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress2, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(2, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    StaticNATRule.enable(self.userapiclient, ipaddressid=associated_ipaddress2.ipaddress.id, virtualmachineid=vm_created.id)
    list_ipaddress = PublicIPAddress.list(self.userapiclient, id=associated_ipaddress2.ipaddress.id, listall=self.services['listall'])
    status = validateList(list_ipaddress)
    self.assertEquals(PASS, status[0], 'Failed to List IP Address')
    self.assertEqual(1, len(list_ipaddress), 'Failed to List IP Address')
    self.assertEquals(True, list_ipaddress[0].isstaticnat, 'Failed to Enable Static Nat')
    list_ipfwdrule_before = StaticNATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress2.ipaddress.id)
    self.assertIsNone(list_ipfwdrule_before, 'IP Forwardign Rule listed for newly enabled StaticNat IP')
    ipfwd_rule = StaticNATRule.createIpForwardingRule(self.userapiclient, startport='80', endport='89', protocol='tcp', ipaddressid=associated_ipaddress2.ipaddress.id, openfirewall=False)
    self.assertIsNotNone(ipfwd_rule, 'Failed to create IP Forwarding Rule')
    list_ipfwdrule_after = StaticNATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress2.ipaddress.id)
    status = validateList(list_ipfwdrule_after)
    self.assertEquals(PASS, status[0], 'Failed to List IP Forwarding Rule after Creation')
    self.assertEqual(1, len(list_ipfwdrule_after), 'Failed to List IP Forwarding Rule after Creation')
    ipfwd_rule.delete(self.userapiclient)
    list_ipfwdrule_after = StaticNATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress2.ipaddress.id)
    self.assertIsNone(list_ipfwdrule_after, 'IP Forwardign Rule listed after deletion')
    vm_created.delete(self.userapiclient)
    vm_created.expung(self.apiClient)
    return
