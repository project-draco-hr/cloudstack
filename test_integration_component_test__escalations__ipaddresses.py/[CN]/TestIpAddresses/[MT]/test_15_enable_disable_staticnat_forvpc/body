@attr(tags=['advanced'], required_hardware='true')
def test_15_enable_disable_staticnat_forvpc(self):
    '\n        @summary: Test to Enable and Disable StaticNat for IP Address associated to VPC Network\n        @Steps:\n        Step1: Creating a VPC\n        Step2: Creating a Network under VPC for the user\n        Step3: Associating an IP Addresses for Network created in step1\n        Step4: Launching the VM in network created in step2\n        Step5: Enabling the staticNat to IP Associated in Step3\n        Step6: Verifying that StaticNat is enabled\n        Step7: Disabling the staticNat to IP Associated in Step3\n        Step8: Verifying that StaticNat is disabled\n        '
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, "VPC's Listed for newly Created User")
    list_vpc_offering = VpcOffering.list(self.userapiclient)
    status = validateList(list_vpc_offering)
    self.assertEquals(PASS, status[0], 'list vpc offering is none')
    vpc_created = VPC.create(self.userapiclient, self.services['vpc'], list_vpc_offering[0].id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    network_offering_vpc_true_list = NetworkOffering.list(self.userapiclient, forvpc='true', zoneid=self.zone.id, supportedServices='SourceNat,PortForwarding,StaticNat', state='Enabled')
    status = validateList(network_offering_vpc_true_list)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = true with PortForwarding')
    network_created = Network.create(self.userapiclient, self.services['ntwk'], networkofferingid=network_offering_vpc_true_list[0].id, vpcid=vpc_created.id, zoneid=self.zone.id, gateway=self.services['ntwk']['gateway'], netmask=self.services['ntwk']['netmask'])
    self.assertIsNotNone(network_created, 'Network is not created')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_before)
    self.assertEquals(PASS, status[0], 'list IP Addresses not as expected')
    self.assertEquals(1, len(list_ipaddresses_before), 'list IP Addresses not equal as expected')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], vpcid=vpc_created.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual((len(list_ipaddresses_before) + 1), len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network_created.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    self.cleanup.append(network_created)
    self.cleanup.append(vpc_created)
    StaticNATRule.enable(self.userapiclient, ipaddressid=associated_ipaddress.ipaddress.id, virtualmachineid=vm_created.id, networkid=network_created.id)
    list_ipaddress = PublicIPAddress.list(self.userapiclient, id=associated_ipaddress.ipaddress.id, listall=self.services['listall'])
    status = validateList(list_ipaddress)
    self.assertEquals(PASS, status[0], 'Failed to List IP Address')
    self.assertEqual(1, len(list_ipaddress), 'Failed to List IP Address')
    self.assertEquals(True, list_ipaddress[0].isstaticnat, 'Failed to Enable Static Nat')
    StaticNATRule.disable(self.userapiclient, ipaddressid=associated_ipaddress.ipaddress.id)
    list_ipaddress = PublicIPAddress.list(self.userapiclient, id=associated_ipaddress.ipaddress.id, listall=self.services['listall'])
    status = validateList(list_ipaddress)
    self.assertEquals(PASS, status[0], 'Failed to List IP Address')
    self.assertEqual(1, len(list_ipaddress), 'Failed to List IP Address')
    self.assertEquals(False, list_ipaddress[0].isstaticnat, 'Failed to Disable Static Nat')
    vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
