@attr(tags=['advanced'], required_hardware='true')
def test_10_create_delete_portforwarding_forvpc(self):
    '\n        @summary: Test to list, create and delete Port Forwarding Rule for IP Address associated to VPC\n        @Steps:\n        Step1: Creating a VPC for the user\n        Step2: Creating Network inside VPC\n        Step3: Associating an IP Addresses for VPC\n        Step4: Launching a VM in the Network created in Step 2\n        Step5: Listing Port Forwarding Rules for the IP Address associated in Step3\n        Step6: Verifying that no Port Forwarding Rules are listed\n        Step7: Creating a Port Forwarding Rule for IP Address associated in Step3\n        Step8: Listing Port Forwarding Rules for the IP Address associated in Step3\n        Step9: Verifying 1 Port Forwarding Rule is listed\n        Step10: Deleting the Port Forwarding Rule created in Step7\n        Step11: Listing Port Forwarding Rules for the IP Address associated in Step3\n        Step12: Verifying that no Port Forwarding Rules are listed\n        '
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, "VPC's Listed for newly Created User")
    list_vpc_offering = VpcOffering.list(self.userapiclient)
    status = validateList(list_vpc_offering)
    self.assertEquals(PASS, status[0], 'list vpc offering is none')
    vpc_created = VPC.create(self.userapiclient, self.services['vpc'], list_vpc_offering[0].id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    network_offering_vpc_true_list = NetworkOffering.list(self.userapiclient, forvpc='true', zoneid=self.zone.id, supportedServices='SourceNat,PortForwarding', state='Enabled')
    status = validateList(network_offering_vpc_true_list)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = true with PortForwarding')
    network_created = Network.create(self.userapiclient, self.services['ntwk'], networkofferingid=network_offering_vpc_true_list[0].id, vpcid=vpc_created.id, zoneid=self.zone.id, gateway=self.services['ntwk']['gateway'], netmask=self.services['ntwk']['netmask'])
    self.assertIsNotNone(network_created, 'Network is not created')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_before)
    self.assertEquals(PASS, status[0], 'list IP Addresses not as expected')
    self.assertEquals(1, len(list_ipaddresses_before), 'list IP Addresses not equal as expected')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], vpcid=vpc_created.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual((len(list_ipaddresses_before) + 1), len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network_created.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    self.cleanup.append(network_created)
    self.cleanup.append(vpc_created)
    list_prtfwdrule_before = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_prtfwdrule_before, 'Port Forwarding Rules listed for newly associated IP Address')
    portfwd_rule = NATRule.create(self.userapiclient, virtual_machine=vm_created, services=self.services['natrule'], ipaddressid=associated_ipaddress.ipaddress.id, networkid=network_created.id)
    self.assertIsNotNone(portfwd_rule, 'Failed to create Port Forwarding Rule')
    expected_dict = {'ipaddressid': associated_ipaddress.ipaddress.id, 'privateport': str(self.services['natrule']['privateport']), 'publicport': str(self.services['natrule']['publicport']), 'protocol': str(self.services['natrule']['protocol']).lower(), }
    actual_dict = {'ipaddressid': portfwd_rule.ipaddressid, 'privateport': str(portfwd_rule.privateport), 'publicport': str(portfwd_rule.publicport), 'protocol': portfwd_rule.protocol, }
    portfwd_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, portfwd_status, 'Created Port Forward Rule details are not as expected')
    list_prtfwdrule_after = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    status = validateList(list_prtfwdrule_after)
    self.assertEquals(PASS, status[0], 'Failed to create Port Forwarding Rule')
    self.assertEqual(1, len(list_prtfwdrule_after), 'Failed to create Port Forwarding Rule')
    portfwd_rule.delete(self.userapiclient)
    list_prtfwdrule_after = NATRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_prtfwdrule_after, 'Port Forwarding Rules listed after deletion')
    vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
