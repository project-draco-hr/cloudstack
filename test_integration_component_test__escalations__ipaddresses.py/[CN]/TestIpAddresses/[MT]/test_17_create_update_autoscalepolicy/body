@attr(tags=['advanced', 'provisioning'])
def test_17_create_update_autoscalepolicy(self):
    '\n        @summary: Test to list, create and update Autoscale Policy\n        @Steps:\n        Step1: Creating a Network Offering for Supported Service LB with Netscaler\n        Step2: Create a Network using Network Offering created in Step1\n        Step3: Launching a VM using Network created in Step2\n        Step4: Associating IP Address for Network created in Step2\n        Step5: Listing Counters\n        Step6: Listing Conditions for the user\n        Step7: Verifying no Conditions are listed\n        Step8: Creating a 2 conditions\n        Step9: Listing conditions again\n        Step10: Verifying 2 conditions are listed\n        Step11: Listing Autoscale Policies for User\n        Step12: Verifying No Autoscale policy is listed\n        Step13: Creating Autoscale Policy using Condition1\n        Step14: Verifying that Autoscale Policy is created with Condition1\n        Step15: Listing Autoscale Policies\n        Step16: Verifying 1 Autoscale Policy is listed\n        Step17: Updating Autoscale Policy created in step13 with condition2\n        Step18: Verifying Autoscale policy is updated with condition2\n        '
    if (self.hypervisor.lower() == 'kvm'):
        raise unittest.SkipTest('ScaleVM is not supported on KVM. Hence, skipping the test')
    list_physical_networks = PhysicalNetwork.list(self.apiClient, zoneid=self.zone.id)
    physical_networks_size = 0
    if (list_physical_networks is not None):
        physical_networks_size = len(list_physical_networks)
    run_flag = False
    for i in range(0, len(list_physical_networks)):
        list_network_serviceprovider = NetworkServiceProvider.list(self.apiClient, physicalnetworkid=list_physical_networks[i].id)
        for j in range(0, len(list_network_serviceprovider)):
            if ((list_network_serviceprovider[j].name == 'Netscaler') and (list_network_serviceprovider[j].state == 'Enabled')):
                run_flag = True
                break
    if (run_flag == False):
        self.debug('Netscaler is not enabled and auto scale VM is applicable only for Netscaler')
    else:
        list_nwoff_before = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        nwoff_created = NetworkOffering.create(self.apiClient, self.services['nw_off_isolated_netscaler'])
        self.assertIsNotNone(nwoff_created, 'Failed to Create Network Offering with LB sercvice for Netscaler')
        nwoff_created.update(self.apiClient, state='Enabled')
        list_nwoff_after = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        self.assertEquals((len(list_nwoff_before) + 1), len(list_nwoff_after), 'Failed to create Network Offering')
        network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=nwoff_created.id, zoneid=self.zone.id)
        self.assertIsNotNone(network, 'Network creation failed')
        self.cleanup.append(network)
        self.cleanup.append(nwoff_created)
        vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
        list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_before)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed while launching a VM')
        self.assertEqual(1, len(list_ipaddresses_before), 'IP Addresses Association Failed while launching a VM')
        associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
        self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
        list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_after)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
        self.assertEqual(2, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
        list_counters = Autoscale.listCounters(self.userapiclient)
        status = validateList(list_counters)
        self.assertEquals(PASS, status[0], 'Failed to list counters')
        list_conditions_before = Autoscale.listConditions(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
        self.assertIsNone(list_conditions_before, 'Listed Conditions for newly created user')
        condition_created1 = Autoscale.createCondition(self.userapiclient, counterid=list_counters[0].id, relationaloperator='GT', threshold='1000')
        self.assertIsNotNone(condition_created1, 'Failed to create Condition')
        condition_created2 = Autoscale.createCondition(self.userapiclient, counterid=list_counters[0].id, relationaloperator='GT', threshold='1500')
        self.assertIsNotNone(condition_created2, 'Failed to create Condition')
        list_conditions_after = Autoscale.listConditions(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
        status = validateList(list_conditions_after)
        self.assertEquals(PASS, status[0], 'Failed to list Conditions after creation')
        list_autoscalepolicies_before = Autoscale.listAutoscalePolicies(self.userapiclient, listall=self.services['listall'])
        self.assertIsNone(list_autoscalepolicies_before, 'Autoscale policies listed')
        autoscalepolicy_created = Autoscale.createAutoscalePolicy(self.userapiclient, action='scaleup', conditionids=condition_created1.id, duration='100', quiettime='100')
        self.assertIsNotNone(autoscalepolicy_created, 'Failed to create Autoscale VM Policy')
        self.assertEquals(condition_created1.id, autoscalepolicy_created.conditions[0].id, 'Autoscale Policy not created by given condition')
        list_autoscalepolicies_after = Autoscale.listAutoscalePolicies(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_autoscalepolicies_after)
        self.assertEquals(PASS, status[0], 'Failed to list Autoscale Policy after creation')
        self.assertEquals(1, len(list_autoscalepolicies_after), 'Autoscale Policies count is not matching')
        autoscalepolicy_updated = Autoscale.updateAutoscalePolicy(self.userapiclient, id=autoscalepolicy_created.id, conditionids=condition_created2.id, duration='100', quiettime='100')
        self.assertIsNotNone(autoscalepolicy_updated, 'Failed to update Autoscale Policy')
        self.assertEquals(condition_created2.id, autoscalepolicy_updated.conditions[0].id, 'Autoscale Policy not updated to given condition')
        vm_created.delete(self.userapiclient)
        vm_created.expung(self.apiClient)
    self.cleanup.append(self.account)
    return
