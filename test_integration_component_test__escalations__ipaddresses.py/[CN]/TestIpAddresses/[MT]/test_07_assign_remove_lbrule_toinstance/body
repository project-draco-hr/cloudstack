@attr(tags=['advanced', 'provisioning'])
def test_07_assign_remove_lbrule_toinstance(self):
    '\n        @summary: Test to Assign and Remove Load Balancer Rule to an Instance\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Launching a VM using the network created in Step 1\n        Step4: Creating a Load Balancer Rule for IP Address associated in Step2\n        Step5: Listing Load Balancer Rule Instances for applied as true\n        Step6: Verifying no Load balancer rule instances are listed\n        Step7: Listing Load Balancer Rule Instances for applied as false\n        Step8: Verifying that list size is 1\n        Step9: Assigning the Instance to Load Balancer Rule\n        Step10: Listing Load Balancer Rule Instances for applied as true\n        Step11: Verifying list size is 1\n        Step12: Listing Load Balancer Rule Instances for applied as false\n        Step13: Verifying no Load balancer rule instances are listed\n        Step14: Removing the Load Balancer Rule assigned form Instance\n        Step15: Listing Load Balancer Rule Instances for applied as true\n        Step16: Verifying no Load balancer rule instances are listed\n        Step17: Listing Load Balancer Rule Instances for applied as false\n        Step18: Verifying that list size is 1\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, Lb enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    self.cleanup.append(network)
    list_vms_running = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id, state='Running', networkid=network.id)
    status = validateList(list_vms_running)
    self.assertEquals(PASS, status[0], 'VM Created is not in Running state')
    self.assertEqual(1, len(list_vms_running), 'VM Created is not in Running state')
    self.assertEquals(vm_created.id, list_vms_running[0].id, 'VM Created is not in Running state')
    list_vms_stopped = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id, state='Stopped', networkid=network.id)
    self.assertIsNone(list_vms_stopped, 'Created VM is in Stopped state')
    list_lbrules_before = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_lbrules_before, 'Load Balancer Rules listed for newly Acquired Ip Address')
    self.services['lbrule']['openfirewall'] = 'false'
    lb_rule = LoadBalancerRule.create(self.userapiclient, self.services['lbrule'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNotNone(lb_rule, 'Failed to create Load Balancer Rule')
    list_lbrules_after = LoadBalancerRule.list(self.userapiclient, listall=self.services['listall'], publicipid=associated_ipaddress.ipaddress.id)
    status = validateList(list_lbrules_after)
    self.assertEquals(PASS, status[0], 'Load Balancer Rule creation Failed')
    self.assertEqual(1, len(list_lbrules_after), 'Load Balancer Rule creation Failed')
    list_lbruleinstance_applied_true = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='true')
    self.assertIsNone(list_lbruleinstance_applied_true, 'Instances are assigned to Newly created Load Balancer Rule')
    list_lbruleinstance_applied_false = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='false')
    status = validateList(list_lbruleinstance_applied_false)
    self.assertEquals(PASS, status[0], 'No Instances are available to assign to Load Balancer Rule')
    self.assertEqual(1, len(list_lbruleinstance_applied_false), 'No Instances are available to assign to Load Balancer Rule')
    self.assertEquals(vm_created.id, list_lbruleinstance_applied_false[0].id, 'Failed to list Instance available to asign a Load Balancer Rule')
    LoadBalancerRule.assign(lb_rule, self.userapiclient, vms=[vm_created])
    list_lbruleinstance_applied_true = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='true')
    status = validateList(list_lbruleinstance_applied_false)
    self.assertEquals(PASS, status[0], 'No Instances are available to assign to Load Balancer Rule')
    self.assertEqual(1, len(list_lbruleinstance_applied_false), 'No Instances are available to assign to Load Balancer Rule')
    self.assertEquals(vm_created.id, list_lbruleinstance_applied_true[0].id, 'Failed to assign Load Balancer Rule to given Instance')
    list_lbruleinstance_applied_false = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='false')
    self.assertIsNone(list_lbruleinstance_applied_false, 'Instances are available for assigning a Load Balancer Rule')
    LoadBalancerRule.remove(lb_rule, self.userapiclient, vms=[vm_created])
    list_lbruleinstance_applied_true = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='true')
    self.assertIsNone(list_lbruleinstance_applied_true, 'Instances is assigned to Load balancer Rule')
    list_lbruleinstance_applied_false = LoadBalancerRule.listLoadBalancerRuleInstances(self.userapiclient, id=lb_rule.id, applied='false')
    status = validateList(list_lbruleinstance_applied_false)
    self.assertEquals(PASS, status[0], 'No Instances are available to assign to Load Balancer Rule')
    self.assertEqual(1, len(list_lbruleinstance_applied_false), 'No Instances are available to assign to Load Balancer Rule')
    self.assertEquals(vm_created.id, list_lbruleinstance_applied_false[0].id, 'Failed to list Instance available to asign a Load Balancer Rule')
    vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
