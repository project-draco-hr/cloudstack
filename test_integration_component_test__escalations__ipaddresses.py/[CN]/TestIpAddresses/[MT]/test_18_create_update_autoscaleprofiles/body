@attr(tags=['advanced'], required_hardware='true')
def test_18_create_update_autoscaleprofiles(self):
    '\n        @summary: Test to list, create and update Autoscale VM Profiles\n        @Steps:\n        Step1: Creating a Network Offering for Supported Service LB with\n               Netscaler\n        Step2: Create a Network using Network Offering created in Step1\n        Step3: Launching a VM using Network created in Step2\n        Step4: Associating IP Address for Network created in Step2\n        Step5: Listing Available Service Offerings\n        Step6: Listing all types of templates\n        Step7: Verifying only featured templates are listed for\n               newly created user\n        Step8: Listing autoscale vm profiles\n        Step9: Verifying no Autoscale VM Profiles are listed\n        Step10: Creating a Autoscale VM Profile\n        Step11: Listing Autoscale VM Profile\n        Step12: Verifying 1 Autoscale VM Profile is listed\n        Step13: Listing Autoscale VM Profile by id\n        Step14: Verifying details of the created autoscale\n                vm profile are matching with listed autoscal vm profile\n        Step15: Updating Autoscale VM profile with destroy vm grace period\n        Step16: Verifying that Autoscale VM is updated\n        '
    if (self.hypervisor.lower() == 'kvm'):
        raise unittest.SkipTest('ScaleVM is not supported on KVM. Hence, skipping the test')
    list_physical_networks = PhysicalNetwork.list(self.apiClient, zoneid=self.zone.id)
    run_flag = False
    for i in range(0, len(list_physical_networks)):
        list_network_serviceprovider = NetworkServiceProvider.list(self.apiClient, physicalnetworkid=list_physical_networks[i].id)
        for j in range(0, len(list_network_serviceprovider)):
            if ((list_network_serviceprovider[j].name == 'Netscaler') and (list_network_serviceprovider[j].state == 'Enabled')):
                run_flag = True
                break
    if (not run_flag):
        self.debug('Netscaler is not enabled and auto scale VM                        is applicable only for Netscaler')
    else:
        list_nwoff_before = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        nwoff_created = NetworkOffering.create(self.apiClient, self.services['nw_off_isolated_netscaler'])
        self.assertIsNotNone(nwoff_created, 'Failed to Create Network Offering with                        LB sercvice for Netscaler')
        nwoff_created.update(self.apiClient, state='Enabled')
        list_nwoff_after = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Lb', zoneid=self.zone.id)
        self.assertEquals((len(list_nwoff_before) + 1), len(list_nwoff_after), 'Failed to create Network Offering')
        network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=nwoff_created.id, zoneid=self.zone.id)
        self.assertIsNotNone(network, 'Network creation failed')
        self.cleanup.append(network)
        self.cleanup.append(nwoff_created)
        vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
        list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_before)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed while launching a VM')
        self.assertEqual(1, len(list_ipaddresses_before), 'IP Addresses Association Failed while launching a VM')
        associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
        self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
        list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_ipaddresses_after)
        self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
        self.assertEqual(2, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
        list_service_offerings = ServiceOffering.list(self.userapiclient, listall=self.services['listall'], issystem='false')
        status = validateList(list_service_offerings)
        self.assertEquals(PASS, status[0], 'Failed to list Service Offerings')
        list_users = User.list(self.apiClient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
        status = validateList(list_users)
        self.assertEquals(PASS, status[0], 'Failed to list Users')
        list_templates_featured = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter='featured', zoneid=self.zone.id)
        status = validateList(list_templates_featured)
        self.assertEquals(PASS, status[0], 'Failed to list Featured Templates')
        list_templates_community = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter='community', zoneid=self.zone.id)
        self.assertIsNone(list_templates_community, 'Community Templates listed for newly created User')
        list_templates_selfexecutable = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter='selfexecutable', zoneid=self.zone.id)
        self.assertIsNone(list_templates_selfexecutable, 'Self Executable Templates listed for newly created User')
        list_autoscalevm_profiles_before = Autoscale.listAutoscaleVmPofiles(self.userapiclient, listall=self.services['listall'])
        self.assertIsNone(list_autoscalevm_profiles_before, 'Autoscale VM Profiles listed')
        counterparam = {'snmpcommunity': 'public', 'snmpport': '161', }
        autoscalevm_profile = Autoscale.createAutoscaleVmProfile(self.userapiclient, serviceofferingid=list_service_offerings[0].id, zoneid=self.zone.id, templateid=list_templates_featured[0].id, autoscaleuserid=list_users[0].id, destroyvmgraceperiod='100', counterparam=counterparam)
        self.assertIsNotNone(autoscalevm_profile, 'Failed to create Autoscale VM Profile')
        list_autoscalevm_profiles_after = Autoscale.listAutoscaleVmPofiles(self.userapiclient, listall=self.services['listall'])
        status = validateList(list_autoscalevm_profiles_after)
        self.assertEquals(PASS, status[0], 'Failed to list Autoscale VM Profile after creation')
        self.assertEquals(1, len(list_autoscalevm_profiles_after), 'Count of Autoscale VM profiles listed is not matching')
        list_autoscalvmprofile = Autoscale.listAutoscaleVmPofiles(self.userapiclient, listall=self.services['listall'], id=autoscalevm_profile.id)
        status = validateList(list_autoscalvmprofile)
        self.assertEquals(PASS, status[0], 'Failed to list Autoscale VM Profile by Id after creation')
        expected_dict = {'id': autoscalevm_profile.id, 'account': self.account.name, 'domainid': self.domain.id, 'autoscaleuserid': list_users[0].id, 'serviceofferingid': list_service_offerings[0].id, 'zoneid': self.zone.id, 'templateid': list_templates_featured[0].id, 'destroyvmgraceperiod': autoscalevm_profile.destroyvmgraceperiod, }
        actual_dict = {'id': list_autoscalvmprofile[0].id, 'account': list_autoscalvmprofile[0].account, 'domainid': list_autoscalvmprofile[0].domainid, 'autoscaleuserid': list_autoscalvmprofile[0].autoscaleuserid, 'serviceofferingid': list_autoscalvmprofile[0].serviceofferingid, 'zoneid': list_autoscalvmprofile[0].zoneid, 'templateid': list_autoscalvmprofile[0].templateid, 'destroyvmgraceperiod': list_autoscalvmprofile[0].destroyvmgraceperiod, }
        autoscalevm_profile_status = self.__verify_values(expected_dict, actual_dict)
        self.assertEqual(True, autoscalevm_profile_status, 'Created Autoscale VM Profile details are not as expected')
        autoscalevm_profile_updated = Autoscale.updateAutoscaleVMProfile(self.userapiclient, id=autoscalevm_profile.id, autoscaleuserid=list_users[0].id, destroyvmgraceperiod='200', templateid=list_templates_featured[0].id)
        self.assertIsNotNone(autoscalevm_profile_updated, 'Failed to update Autoscale VM Profile')
        self.assertEquals(200, autoscalevm_profile_updated.destroyvmgraceperiod, 'Failed to update destroy vm grace period')
        vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
