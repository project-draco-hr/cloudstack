@attr(tags=['advanced'], required_hardware='true')
def test_13_add_remove_vpnusers(self):
    '\n        @summary: Test to list, add and remove VPN Users\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Launching a VM under network created in Step1\n        Step4: Creating Remote Access VPN\n        Step5: Listing VPN Users\n        Step6: Verifying that no VPN Users are listed\n        Step7: Adding a VPN user\n        Step8: Listing VPN Users\n        Step9: Verifying 1 VPN is listed\n        Step10: Deleting VPN user\n        Step11: Listing VPN Users\n        Step12: Verifying that no VPN Users are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Vpn', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat,                    Vpn enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'Failed to launch a VM under network created')
    list_vpns_before = Vpn.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_vpns_before, 'Remote Access VPNs listed for newly associated IP Address')
    vpn_created = Vpn.create(self.userapiclient, publicipid=associated_ipaddress.ipaddress.id, account=self.account.name, domainid=self.domain.id, openfirewall='false')
    self.assertIsNotNone(vpn_created, 'Failed to create Remote Access VPN')
    list_vpns_after = Vpn.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    status = validateList(list_vpns_after)
    self.assertEquals(PASS, status[0], 'Failed to create Remote Access VPN')
    self.assertEqual(1, len(list_vpns_after), 'Failed to create Remote Access VPN')
    list_vpnusers_beore = VpnUser.list(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
    self.assertIsNone(list_vpnusers_beore, 'VPN Users listed for newly created VPN')
    vpnuser_created = VpnUser.create(self.userapiclient, username=self.services['vpn_user']['username'], password=self.services['vpn_user']['password'], account=self.account.name, domainid=self.domain.id)
    self.assertIsNotNone(vpnuser_created, 'Failed to create VPN User')
    list_vpnusers_after = VpnUser.list(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
    status = validateList(list_vpnusers_after)
    self.assertEquals(PASS, status[0], 'Failed to list VPN user after creation')
    self.assertEqual(1, len(list_vpnusers_after), 'Failed to list VPN user after creation')
    vpnuser_created.delete(self.userapiclient)
    list_vpnusers_after = VpnUser.list(self.userapiclient, listall=self.services['listall'], account=self.account.name, domainid=self.domain.id)
    self.assertIsNone(list_vpnusers_after, 'VPN User listed after deletion')
    vm_created.delete(self.apiClient)
    self.cleanup.append(self.account)
    return
