@attr(tags=['advanced'], required_hardware='true')
def test_11_create_delete_firewallrule(self):
    '\n        @summary: Test to list, create and delete Firewall Rule for IP Address associated to Non VPC network\n        @Steps:\n        Step1: Creating a Network for the user\n        Step2: Associating an IP Addresses for Network\n        Step3: Listing Firewall Rules for the IP Address associated in Step2\n        Step4: Verifying that no Rules are listed\n        Step5: Creating a Firewall Rule for IP Address associated in Step2\n        Step6: Listing Firewall Rules for the IP Address associated in Step2\n        Step7: Verifying 1 Firewall Rule is listed\n        Step8: Deleting the Firewall Rule created in Step5\n        Step9: Listing Firewall Rules for the IP Address associated in Step2\n        Step10: Verifying that no Firewall Rules are listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.services['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat,Firewall', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat, Firewall enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created User')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network.id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_firewalls_before = FireWallRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_firewalls_before, 'Firewall Rules listed for newly associated IP Address')
    firewall_rule = FireWallRule.create(self.userapiclient, ipaddressid=associated_ipaddress.ipaddress.id, protocol='tcp', cidrlist='10.1.1.1/16', startport='22', endport='2222')
    self.assertIsNotNone(firewall_rule, 'Failed to create Firewall Rule')
    expected_dict = {'ipaddressid': associated_ipaddress.ipaddress.id, 'startport': '22', 'endport': '2222', 'protocol': 'tcp', 'cidrlist': '10.1.1.1/16', }
    actual_dict = {'ipaddressid': firewall_rule.ipaddressid, 'startport': firewall_rule.startport, 'endport': firewall_rule.endport, 'protocol': firewall_rule.protocol, 'cidrlist': firewall_rule.cidrlist, }
    firewall_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, firewall_status, 'Created Firewall Rule details are not as expected')
    list_firewalls_after = FireWallRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    status = validateList(list_firewalls_after)
    self.assertEquals(PASS, status[0], 'Failed to create Firewall Rule')
    self.assertEqual(1, len(list_firewalls_after), 'Failed to create Firewall Rule')
    firewall_rule.delete(self.userapiclient)
    list_firewalls_after = FireWallRule.list(self.userapiclient, listall=self.services['listall'], ipaddressid=associated_ipaddress.ipaddress.id)
    self.assertIsNone(list_firewalls_after, 'Failed to create Firewall Rule')
    self.cleanup.append(self.account)
    return
