@attr(tags=['advanced', 'provisioning'])
def test_02_list_ipaddresses_byid(self):
    '  \n        @summary: Test List IP Addresses details by ID\n        @Steps:\n        Step1: Creating a network for the user\n        Step2: Listing all the IP Addresses for a user\n        Step3: Verifying that no IP Addresses are listed\n        Step4: Associating an IP Addresses for Network\n        Step5: Listing all the IP Addresses again\n        Step6: Verifying the length of the IP Addresses is 1\n        Step7: Listing  the IP Addresses by Id\n        Step8: Verifying that the length of the IP Addresses list is 1\n        Step9: Verifying the details of the Listed IP Address\n        '
    networks_list_before = Network.list(self.userapiclient, forvpc='false', domainid=self.domain.id, account=self.account.name)
    self.assertIsNone(networks_list_before, 'Networks listed for newly created user')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat enabled are not found')
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    networks_list_after = Network.list(self.userapiclient, forvpc='false', domainid=self.domain.id, account=self.account.name)
    status = validateList(networks_list_after)
    self.assertEquals(PASS, status[0], 'Network Creation Failed')
    self.assertEquals(1, len(networks_list_after), 'Network creation failed')
    network_list_byid = Network.list(self.userapiclient, listall=self.services['listall'], id=network.id)
    status = validateList(network_list_byid)
    self.assertEquals(PASS, status[0], 'Failed to list Network by Id')
    self.assertEquals(1, len(network_list_byid), 'Failed to list Network by Id')
    list_ipaddresses_before = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_ipaddresses_before, 'IP Addresses listed for newly created user')
    associated_ipaddress = PublicIPAddress.create(self.userapiclient, services=self.services['network'], networkid=network_list_byid[0].id)
    self.assertIsNotNone(associated_ipaddress, 'Failed to Associate IP Address')
    list_ipaddresses_after = PublicIPAddress.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_ipaddresses_after)
    self.assertEquals(PASS, status[0], 'IP Addresses Association Failed')
    self.assertEqual(1, len(list_ipaddresses_after), 'Number of IP Addresses associated are not matching expected')
    list_ipaddress_byid = PublicIPAddress.list(self.userapiclient, id=associated_ipaddress.ipaddress.id)
    status = validateList(list_ipaddress_byid)
    self.assertEquals(PASS, status[0], 'Failed to list IP Addresses by ID')
    self.assertEquals(1, len(list_ipaddress_byid), 'Failed to list IP Addresses by ID')
    expected_dict = {'id': associated_ipaddress.ipaddress.id, 'associatednetworkid': associated_ipaddress.ipaddress.associatednetworkid, 'associatednetworkname': associated_ipaddress.ipaddress.associatednetworkname, 'ipaddress': associated_ipaddress.ipaddress.ipaddress, 'issourcenat': associated_ipaddress.ipaddress.issourcenat, 'isstaticnat': associated_ipaddress.ipaddress.isstaticnat, 'networkid': associated_ipaddress.ipaddress.networkid, }
    actual_dict = {'id': list_ipaddress_byid[0].id, 'associatednetworkid': list_ipaddress_byid[0].associatednetworkid, 'associatednetworkname': list_ipaddress_byid[0].associatednetworkname, 'ipaddress': list_ipaddress_byid[0].ipaddress, 'issourcenat': list_ipaddress_byid[0].issourcenat, 'isstaticnat': list_ipaddress_byid[0].isstaticnat, 'networkid': list_ipaddress_byid[0].networkid, }
    ipaddress_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, ipaddress_status, 'Listed IP Address details are not as expected')
    return
