{
  List<DomainRouterJoinVO> vrList=new ArrayList<DomainRouterJoinVO>();
  DomainRouterJoinVO vr=new DomainRouterJoinVO();
  String uuid=UUID.randomUUID().toString();
  vr.setUuid(uuid);
  vrList.add(vr);
  List<DomainRouterResponse> respList=new ArrayList<DomainRouterResponse>();
  DomainRouterResponse resp=new DomainRouterResponse();
  resp.setId(uuid);
  respList.add(resp);
  Mockito.when(mgrService.searchForRouters(listVrCmd)).thenReturn(new Pair<List<DomainRouterJoinVO>,Integer>(vrList,1));
  Mockito.when(responseGenerator.createDomainRouterResponse(vr)).thenReturn(respList);
  try {
    listVrCmd.execute();
    ListResponse<DomainRouterResponse> listResp=(ListResponse<DomainRouterResponse>)listVrCmd.getResponseObject();
    assertNotNull(listResp);
    assertEquals(1,listResp.getCount().intValue());
    List<DomainRouterResponse> vrResp=listResp.getResponses();
    assertTrue(vrResp != null && vrResp.size() == 1);
    DomainRouterResponse v=vrResp.get(0);
    assertEquals(uuid,v.getId());
  }
 catch (  ServerApiException exception) {
    assertEquals("Failed to list domain routers",exception.getDescription());
  }
}
