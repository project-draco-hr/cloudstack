{
  List<DomainRouterJoinVO> vrList=new ArrayList<DomainRouterJoinVO>();
  DomainRouterJoinVO vr1=new DomainRouterJoinVO();
  String uuid1=UUID.randomUUID().toString();
  vr1.setUuid(uuid1);
  vrList.add(vr1);
  DomainRouterJoinVO vr2=new DomainRouterJoinVO();
  String uuid2=UUID.randomUUID().toString();
  vrList.add(vr2);
  List<DomainRouterResponse> respList=new ArrayList<DomainRouterResponse>();
  DomainRouterResponse resp1=new DomainRouterResponse();
  resp1.setId(uuid1);
  respList.add(resp1);
  DomainRouterResponse resp2=new DomainRouterResponse();
  resp2.setId(uuid2);
  respList.add(resp2);
  Mockito.when(mgrService.searchForRouters(listVrCmd)).thenReturn(new Pair<List<DomainRouterJoinVO>,Integer>(vrList,2));
  Mockito.when(responseGenerator.createDomainRouterResponse(vr1,vr2)).thenReturn(respList);
  try {
    listVrCmd.execute();
    ListResponse<DomainRouterResponse> listResp=(ListResponse<DomainRouterResponse>)listVrCmd.getResponseObject();
    assertNotNull(listResp);
    assertEquals(2,listResp.getCount().intValue());
    List<DomainRouterResponse> vrResp=listResp.getResponses();
    assertTrue(vrResp != null && vrResp.size() == 2);
  }
 catch (  ServerApiException exception) {
    assertEquals("Failed to list domain routers without pagination",exception.getDescription());
  }
  List<DomainRouterJoinVO> pVrList=new ArrayList<DomainRouterJoinVO>();
  pVrList.add(vr1);
  List<DomainRouterResponse> pRespList=new ArrayList<DomainRouterResponse>();
  pRespList.add(resp1);
  listVrCmd=new ListRoutersCmd(){
    public Integer getPage(){
      return 1;
    }
    public Integer getPageSize(){
      return 1;
    }
  }
;
  Mockito.when(mgrService.searchForRouters(listVrCmd)).thenReturn(new Pair<List<DomainRouterJoinVO>,Integer>(pVrList,2));
  Mockito.when(responseGenerator.createDomainRouterResponse(vr1)).thenReturn(pRespList);
  try {
    listVrCmd.execute();
    ListResponse<DomainRouterResponse> listResp=(ListResponse<DomainRouterResponse>)listVrCmd.getResponseObject();
    assertNotNull(listResp);
    assertEquals(2,listResp.getCount().intValue());
    List<DomainRouterResponse> vmResp=listResp.getResponses();
    assertTrue(vmResp != null && vmResp.size() == 1);
    DomainRouterResponse v=vmResp.get(0);
    assertEquals(uuid1,v.getId());
  }
 catch (  ServerApiException exception) {
    assertEquals("Failed to list domain routers with pagination",exception.getDescription());
  }
}
