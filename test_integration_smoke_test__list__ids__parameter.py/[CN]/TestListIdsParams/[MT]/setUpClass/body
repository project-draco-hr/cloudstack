@classmethod
def setUpClass(cls):
    testClient = super(TestListIdsParams, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = testClient.getParsedTestDataConfig()
    cls.hypervisor = testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.services['disk_offering'])
    cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings']['tiny'])
    template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['template']['ostypeid'] = template.ostypeid
    cls.services['template_2']['ostypeid'] = template.ostypeid
    cls.services['ostypeid'] = template.ostypeid
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['mode'] = cls.zone.networktype
    cls.virtual_machine_1 = VirtualMachine.create(cls.apiclient, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls.virtual_machine_2 = VirtualMachine.create(cls.apiclient, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls.virtual_machine_3 = VirtualMachine.create(cls.apiclient, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    'cls.vmsnapshot_1 = VmSnapshot.create(\n                                cls.apiclient,\n                                cls.virtual_machine_1.id\n                            )\n        cls.vmsnapshot_2 = VmSnapshot.create(\n                                cls.apiclient,\n                                cls.virtual_machine_1.id\n                            )\n        cls.vmsnapshot_3 = VmSnapshot.create(\n                                cls.apiclient,\n                                cls.virtual_machine_1.id\n                            )'
    cls.virtual_machine_1.stop(cls.apiclient)
    cls.virtual_machine_2.stop(cls.apiclient)
    cls.virtual_machine_3.stop(cls.apiclient)
    vm1RootVolumeResponse = Volume.list(cls.apiclient, virtualmachineid=cls.virtual_machine_1.id, type='ROOT', listall=True)
    vm2RootVolumeResponse = Volume.list(cls.apiclient, virtualmachineid=cls.virtual_machine_2.id, type='ROOT', listall=True)
    vm3RootVolumeResponse = Volume.list(cls.apiclient, virtualmachineid=cls.virtual_machine_3.id, type='ROOT', listall=True)
    cls.vm1_root_volume = vm1RootVolumeResponse[0]
    cls.vm2_root_volume = vm2RootVolumeResponse[0]
    cls.vm3_root_volume = vm3RootVolumeResponse[0]
    cls.snapshot_1 = Snapshot.create(cls.apiclient, cls.vm2_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls.snapshot_2 = Snapshot.create(cls.apiclient, cls.vm2_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls.snapshot_3 = Snapshot.create(cls.apiclient, cls.vm2_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls.template_1 = Template.create(cls.apiclient, cls.services['template'], cls.vm3_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls.template_2 = Template.create(cls.apiclient, cls.services['template_2'], cls.vm3_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls.template_3 = Template.create(cls.apiclient, cls.services['template_2'], cls.vm3_root_volume.id, account=cls.account.name, domainid=cls.account.domainid)
    cls._cleanup = [cls.disk_offering, cls.account, cls.service_offering, cls.snapshot_1, cls.snapshot_2, cls.snapshot_3]
