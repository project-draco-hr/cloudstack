{
  _name=name;
  _scriptsDir=(String)params.get("domr.scripts.dir");
  if (_scriptsDir == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("VirtualRoutingResource _scriptDir can't be initialized from domr.scripts.dir param, use default");
    }
    _scriptsDir=getDefaultScriptsDir();
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("VirtualRoutingResource _scriptDir to use: " + _scriptsDir);
  }
  String value=(String)params.get("scripts.timeout");
  _timeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get("start.script.timeout");
  _startTimeout=NumbersUtil.parseInt(value,360) * 1000;
  value=(String)params.get("ssh.sleep");
  _sleep=NumbersUtil.parseInt(value,10) * 1000;
  value=(String)params.get("ssh.retry");
  _retry=NumbersUtil.parseInt(value,36);
  value=(String)params.get("ssh.port");
  _port=NumbersUtil.parseInt(value,3922);
  _publicIpAddress=(String)params.get("public.ip.address");
  if (_publicIpAddress != null) {
    s_logger.warn("Incoming public ip address is overriden.  Will always be using the same ip address: " + _publicIpAddress);
  }
  _loadbPath=findScript("call_loadbalancer.sh");
  if (_loadbPath == null) {
    throw new ConfigurationException("Unable to find the call_loadbalancer.sh");
  }
  _publicEthIf=(String)params.get("public.network.device");
  if (_publicEthIf == null) {
    _publicEthIf="xenbr1";
  }
  _publicEthIf=_publicEthIf.toLowerCase();
  _privateEthIf=(String)params.get("private.network.device");
  if (_privateEthIf == null) {
    _privateEthIf="xenbr0";
  }
  _privateEthIf=_privateEthIf.toLowerCase();
  _routerProxyPath=findScript("router_proxy.sh");
  if (_routerProxyPath == null) {
    throw new ConfigurationException("Unable to find router_proxy.sh");
  }
  return true;
}
