{
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  if (routerIp == null) {
    return new Answer(cmd);
  }
  LoadBalancerConfigurator cfgtr=new HAProxyConfigurator();
  String[] config=cfgtr.generateConfiguration(cmd);
  String tmpCfgFileContents="";
  for (int i=0; i < config.length; i++) {
    tmpCfgFileContents+=config[i];
    tmpCfgFileContents+="\n";
  }
  if (!createFileInVR(routerIp,"/etc/haproxy/","haproxy.cfg.new",tmpCfgFileContents)) {
    return new Answer(cmd,false,"Fail to copy LB config file to VR");
  }
  try {
    String[][] rules=cfgtr.generateFwRules(cmd);
    String[] addRules=rules[LoadBalancerConfigurator.ADD];
    String[] removeRules=rules[LoadBalancerConfigurator.REMOVE];
    String[] statRules=rules[LoadBalancerConfigurator.STATS];
    String args="";
    StringBuilder sb=new StringBuilder();
    if (addRules.length > 0) {
      for (int i=0; i < addRules.length; i++) {
        sb.append(addRules[i]).append(',');
      }
      args+=" -a " + sb.toString();
    }
    sb=new StringBuilder();
    if (removeRules.length > 0) {
      for (int i=0; i < removeRules.length; i++) {
        sb.append(removeRules[i]).append(',');
      }
      args+=" -d " + sb.toString();
    }
    sb=new StringBuilder();
    if (statRules.length > 0) {
      for (int i=0; i < statRules.length; i++) {
        sb.append(statRules[i]).append(',');
      }
      args+=" -s " + sb.toString();
    }
    String result;
    if (cmd.getVpcId() == null) {
      args=" -i " + routerIp + args;
      result=executeInVR(routerIp,"loadbalancer.sh",args);
    }
 else {
      args=" -i " + cmd.getNic().getIp() + args;
      result=executeInVR(routerIp,"vpc_loadbalancer.sh",args);
    }
    if (result != null) {
      return new Answer(cmd,false,"LoadBalancerConfigCommand failed");
    }
    return new Answer(cmd);
  }
 catch (  Exception e) {
    return new Answer(cmd,e);
  }
}
