{
  String[] results=new String[cmd.getRules().length];
  String privateGw=cmd.getAccessDetail(NetworkElementCommand.VPC_PRIVATE_GATEWAY);
  try {
    String[][] rules=cmd.generateFwRules();
    String[] aclRules=rules[0];
    NicTO nic=cmd.getNic();
    String dev="eth" + nic.getDeviceId();
    String netmask=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < aclRules.length; i++) {
      sb.append(aclRules[i]).append(',');
    }
    String rule=sb.toString();
    ExecutionResult result;
    String args=" -d " + dev;
    args+=" -M " + nic.getMac();
    if (privateGw != null) {
      args+=" -a " + rule;
      result=_vrDeployer.executeInVR(cmd.getRouterAccessIp(),VRScripts.VPC_PRIVATEGW_ACL,args);
    }
 else {
      args+=" -i " + nic.getIp();
      args+=" -m " + netmask;
      args+=" -a " + rule;
      result=_vrDeployer.executeInVR(cmd.getRouterAccessIp(),VRScripts.VPC_ACL,args);
    }
    if (!result.isSuccess()) {
      for (int i=0; i < results.length; i++) {
        results[i]="Failed";
      }
      return new SetNetworkACLAnswer(cmd,false,results);
    }
    return new SetNetworkACLAnswer(cmd,true,results);
  }
 catch (  Exception e) {
    String msg="SetNetworkACL failed due to " + e.toString();
    s_logger.error(msg,e);
    return new SetNetworkACLAnswer(cmd,false,results);
  }
}
