{
  LinkedList<ConfigItem> cfg=new LinkedList<>();
  ConfigItem c;
  if (cmd instanceof IpAssocVpcCommand) {
    for (    IpAddressTO ip : cmd.getIpAddresses()) {
      String args="";
      String snatArgs="";
      if (ip.isAdd()) {
        args+=" -A ";
        snatArgs+=" -A ";
      }
 else {
        args+=" -D ";
        snatArgs+=" -D ";
      }
      args+=" -l ";
      args+=ip.getPublicIp();
      String nicName="eth" + ip.getNicDevId();
      args+=" -c ";
      args+=nicName;
      args+=" -g ";
      args+=ip.getVlanGateway();
      args+=" -m ";
      args+=Long.toString(NetUtils.getCidrSize(ip.getVlanNetmask()));
      args+=" -n ";
      args+=NetUtils.getSubNet(ip.getPublicIp(),ip.getVlanNetmask());
      c=new ConfigItem(VRScripts.VPC_IPASSOC,args);
      c.setInfo(ip.getPublicIp() + " - vpc_ipassoc");
      cfg.add(c);
      if (ip.isSourceNat()) {
        snatArgs+=" -l " + ip.getPublicIp();
        snatArgs+=" -c " + nicName;
        c=new ConfigItem(VRScripts.VPC_PRIVATEGW,snatArgs);
        c.setInfo(ip.getPublicIp() + " - vpc_privategateway");
        cfg.add(c);
      }
    }
  }
 else {
    for (    IpAddressTO ip : cmd.getIpAddresses()) {
      String args="";
      if (ip.isAdd()) {
        args+="-A";
      }
 else {
        args+="-D";
      }
      String cidrSize=Long.toString(NetUtils.getCidrSize(ip.getVlanNetmask()));
      if (ip.isSourceNat()) {
        args+=" -s";
      }
      if (ip.isFirstIP()) {
        args+=" -f";
      }
      args+=" -l ";
      args+=ip.getPublicIp() + "/" + cidrSize;
      String publicNic="eth" + ip.getNicDevId();
      args+=" -c ";
      args+=publicNic;
      args+=" -g ";
      args+=ip.getVlanGateway();
      if (ip.isNewNic()) {
        args+=" -n";
      }
      c=new ConfigItem(VRScripts.IPASSOC,args);
      c.setInfo(ip.getPublicIp());
      cfg.add(c);
    }
  }
  return cfg;
}
