@attr(configuration='vm.instancename.flag')
@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'simulator'], required_hardware='false')
def test_04_edit_display_name(self):
    ' Test Edit the Display name Through the UI.\n        '
    if (not is_config_suitable(apiclient=self.apiclient, name='vm.instancename.flag', value='true')):
        self.skipTest('vm.instancename.flag should be true. skipping')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug('Checking if the virtual machine is created properly or not?')
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List vms should retuen a valid name')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm state should be running after deployment')
    self.assertEqual(vm.displayname, self.services['virtual_machine']['displayname'], 'Vm display name should match the given name')
    old_internal_name = vm.instancename
    self.debug(('Stopping the instance: %s' % vm.name))
    try:
        virtual_machine.stop(self.apiclient)
    except Exception as e:
        self.fail(('Failed to stop instance: %s, %s' % (vm.name, e)))
    self.debug('Update the display name of the instance')
    try:
        virtual_machine.update(self.apiclient, displayname=random_gen(chars=string.ascii_uppercase))
    except Exception as e:
        self.fail(('Failed to update the virtual machine name: %s, %s' % (virtual_machine.name, e)))
    self.debug(('Start the instance: %s' % virtual_machine.name))
    virtual_machine.start(self.apiclient)
    self.debug('Checking if the instance is working properly after update')
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List vms should retuen a valid name')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm state should be running after deployment')
    self.assertEqual(vm.instancename, old_internal_name, 'Vm internal name should not be changed after update')
    return
