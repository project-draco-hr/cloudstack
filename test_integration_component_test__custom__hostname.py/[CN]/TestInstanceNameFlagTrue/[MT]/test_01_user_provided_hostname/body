@attr(configuration='vm.instancename.flag')
@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'simulator'], required_hardware='false')
def test_01_user_provided_hostname(self):
    ' Verify user provided hostname to an instance\n        '
    if (not is_config_suitable(apiclient=self.apiclient, name='vm.instancename.flag', value='true')):
        self.skipTest('vm.instancename.flag should be true. skipping')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    self.services['virtual_machine']['displayname'] = random_gen(chars=string.ascii_uppercase)
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug('Checking if the virtual machine is created properly or not?')
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List vms should return a valid name')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm state should be running after deployment')
    self.debug(('vm.displayname: %s, original: %s' % (vm.displayname, self.services['virtual_machine']['displayname'])))
    self.assertEqual(vm.displayname, self.services['virtual_machine']['displayname'], 'Vm display name should match the given name')
    self.debug(("select id from account where uuid = '%s';" % self.account.id))
    qresultset = self.dbclient.execute(("select id from account where uuid = '%s';" % self.account.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select id from vm_instance where uuid = '%s';" % vm.id))
    qresultset = self.dbclient.execute(("select id from vm_instance where uuid = '%s';" % vm.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.debug(('Query result: %s' % qresult))
    vmid = qresult[0]
    self.debug('Fetching the global config value for instance.name')
    configs = Configurations.list(self.apiclient, name='instance.name', listall=True)
    config = configs[0]
    instance_name = config.value
    internal_name = ((((('i-' + str(account_id)) + '-') + str(vmid)) + '-') + instance_name)
    self.assertEqual(vm.instancename, internal_name, 'VM internal name should match with that of the format')
    return
