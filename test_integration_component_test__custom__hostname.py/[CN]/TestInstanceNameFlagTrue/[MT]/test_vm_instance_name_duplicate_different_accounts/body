@attr(tags=['advanced', 'basic', 'test'])
@attr(required_hardware='false')
@attr(configuration='vm.instancename.flag')
def test_vm_instance_name_duplicate_different_accounts(self):
    '\n        @Desc: Test whether cloudstack allows duplicate vm instance\n               names in the diff networks\n        @Steps:\n        Step1: Set the vm.instancename.flag to true.\n        Step2: Deploy a VM with name say webserver01 from account1\n               Internal name should be i-<userid>-<vmid>-webserver01\n        Step3: Now deploy VM with the same name "webserver01" from account2.\n        Step4: Deployment of VM with same name should fail\n        '
    if (not is_config_suitable(apiclient=self.apiclient, name='vm.instancename.flag', value='true')):
        self.skipTest('vm.instancename.flag should be true. skipping')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    self.services['virtual_machine2']['displayname'] = random_gen(chars=string.ascii_uppercase)
    self.services['virtual_machine2']['zoneid'] = self.zone.id
    self.services['virtual_machine2']['template'] = self.template.id
    vm1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine2'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(vm1)
    self.debug(('Deploying VM in account: %s' % self.account_2.name))
    with self.assertRaises(Exception):
        vm2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine2'], accountid=self.account_2.name, domainid=self.account_2.domainid, serviceofferingid=self.service_offering.id)
        self.cleanup.append(vm2)
    return
