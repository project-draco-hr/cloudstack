{
  List<? extends NetworkOffering> offerList=_configService.listNetworkOfferings(TrafficType.Guest,false);
  for (  NetworkOffering offer : offerList) {
    if (offer.getName().equals(offeringName)) {
      if (offer.getState() != NetworkOffering.State.Enabled) {
        return EnableNetworkOffering(offer.getId());
      }
      return offer;
    }
  }
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  Set<Provider> providerSet=new HashSet<Provider>();
  providerSet.add(provider);
  final Service[] services={Service.Connectivity,Service.Dhcp,Service.NetworkACL,Service.StaticNat,Service.SourceNat,Service.Lb};
  for (  Service svc : services) {
    if (svc == Service.Lb) {
      if (offeringName.equals(vpcRouterOfferingName)) {
        Set<Provider> lbProviderSet=new HashSet<Provider>();
        lbProviderSet.add(Provider.InternalLbVm);
        serviceProviderMap.put(svc,lbProviderSet);
      }
      continue;
    }
    serviceProviderMap.put(svc,providerSet);
  }
  ConfigurationManager configMgr=(ConfigurationManager)_configService;
  NetworkOfferingVO voffer=configMgr.createNetworkOffering(offeringName,offeringDisplayText,TrafficType.Guest,null,false,Availability.Optional,null,serviceProviderMap,true,Network.GuestType.Isolated,false,null,false,null,false,true,null,true,null,false);
  voffer.setState(NetworkOffering.State.Enabled);
  if (offeringName.equals(vpcRouterOfferingName)) {
    voffer.setInternalLb(true);
  }
  long id=voffer.getId();
  _networkOfferingDao.update(id,voffer);
  return _networkOfferingDao.findById(id);
}
