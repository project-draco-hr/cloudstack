{
  File configFile=PropertiesUtil.findConfigFile(configuration);
  final Properties configProps=new Properties();
  try {
    configProps.load(new FileInputStream(configFile));
    String value=configProps.getProperty("management.db_sync_interval");
    if (value != null) {
      _dbSyncInterval=Integer.valueOf(value);
    }
    String hostname=configProps.getProperty("api.hostname");
    String portStr=configProps.getProperty("api.port");
    int port=0;
    if (portStr != null && portStr.length() > 0) {
      port=Integer.parseInt(portStr);
    }
    _api=ApiConnectorFactory.build(hostname,port);
  }
 catch (  IOException ex) {
    s_logger.warn("Unable to read " + configuration,ex);
    throw new ConfigurationException();
  }
  _controller=new ModelController(this,_api,_vmDao,_networksDao,_nicDao,_vlanDao,_ipAddressDao);
  _offering=LocateOffering();
  _eventHandler.subscribe();
  initializeDefaultVirtualNetworkModels();
  return true;
}
