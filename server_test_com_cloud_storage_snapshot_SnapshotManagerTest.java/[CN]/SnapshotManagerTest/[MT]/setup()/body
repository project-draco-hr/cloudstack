{
  MockitoAnnotations.initMocks(this);
  _snapshotMgr._snapshotDao=_snapshotDao;
  _snapshotMgr._volsDao=_volumeDao;
  _snapshotMgr._vmDao=_vmDao;
  _snapshotMgr.volFactory=volumeFactory;
  _snapshotMgr.snapshotFactory=snapshotFactory;
  _snapshotMgr._storageStrategyFactory=_storageStrategyFactory;
  _snapshotMgr._accountMgr=_accountMgr;
  _snapshotMgr._resourceLimitMgr=_resourceLimitMgr;
  _snapshotMgr._storagePoolDao=_storagePoolDao;
  _snapshotMgr._resourceMgr=_resourceMgr;
  _snapshotMgr._vmSnapshotDao=_vmSnapshotDao;
  when(_snapshotDao.findById(anyLong())).thenReturn(snapshotMock);
  when(snapshotMock.getVolumeId()).thenReturn(TEST_VOLUME_ID);
  when(snapshotMock.isRecursive()).thenReturn(false);
  when(_volumeDao.findById(anyLong())).thenReturn(volumeMock);
  when(volumeMock.getState()).thenReturn(Volume.State.Ready);
  when(volumeFactory.getVolume(anyLong())).thenReturn(volumeInfoMock);
  when(volumeInfoMock.getDataStore()).thenReturn(storeMock);
  when(storeMock.getId()).thenReturn(TEST_STORAGE_POOL_ID);
  when(snapshotFactory.getSnapshot(anyLong(),Mockito.any(DataStoreRole.class))).thenReturn(snapshotInfoMock);
  when(_storageStrategyFactory.getSnapshotStrategy(Mockito.any(SnapshotVO.class),Mockito.eq(SnapshotOperation.REVERT))).thenReturn(snapshotStrategy);
  when(_storageStrategyFactory.getSnapshotStrategy(Mockito.any(SnapshotVO.class),Mockito.eq(SnapshotOperation.DELETE))).thenReturn(snapshotStrategy);
  doNothing().when(_accountMgr).checkAccess(any(Account.class),any(AccessType.class),any(Boolean.class),any(ControlledEntity.class));
  doNothing().when(_snapshotMgr._resourceLimitMgr).checkResourceLimit(any(Account.class),any(ResourceType.class));
  doNothing().when(_snapshotMgr._resourceLimitMgr).checkResourceLimit(any(Account.class),any(ResourceType.class),anyLong());
  doNothing().when(_snapshotMgr._resourceLimitMgr).decrementResourceCount(anyLong(),any(ResourceType.class),anyLong());
  doNothing().when(_snapshotMgr._resourceLimitMgr).incrementResourceCount(anyLong(),any(ResourceType.class));
  doNothing().when(_snapshotMgr._resourceLimitMgr).incrementResourceCount(anyLong(),any(ResourceType.class),anyLong());
  Account account=new AccountVO("testaccount",1L,"networkdomain",(short)0,"uuid");
  UserVO user=new UserVO(1,"testuser","password","firstname","lastName","email","timezone",UUID.randomUUID().toString(),User.Source.UNKNOWN);
  CallContext.register(user,account);
  when(_accountMgr.getAccount(anyLong())).thenReturn(account);
  when(_storagePoolDao.findById(anyLong())).thenReturn(poolMock);
  when(poolMock.getScope()).thenReturn(ScopeType.ZONE);
  when(poolMock.getHypervisor()).thenReturn(HypervisorType.KVM);
  when(_resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(any(HypervisorType.class),anyLong())).thenReturn(null);
}
