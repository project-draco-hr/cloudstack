{
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,"roundrobin,leastconn");
  lbCapabilities.put(Capability.SupportedLBIsolation,"dedicated, shared");
  lbCapabilities.put(Capability.SupportedProtocols,"tcp,udp");
  lbCapabilities.put(Capability.TrafficStatistics,"per public ip");
  lbCapabilities.put(Capability.LoadBalancingSupportedIps,"additional");
  LbStickinessMethod method;
  List<LbStickinessMethod> methodList=new ArrayList<LbStickinessMethod>();
  method=new LbStickinessMethod(StickinessMethodType.LBCookieBased,"This is cookie based sticky method, can be used only for http");
  methodList.add(method);
  method.addParam("holdtime",false,"time period in minutes for which persistence is in effect.",false);
  method=new LbStickinessMethod(StickinessMethodType.AppCookieBased,"This is app session based sticky method, can be used only for http");
  methodList.add(method);
  method.addParam("name",true,"cookie name passed in http header by apllication to the client",false);
  method=new LbStickinessMethod(StickinessMethodType.SourceBased,"This is source based sticky method, can be used for any type of protocol.");
  methodList.add(method);
  method.addParam("holdtime",false,"time period for which persistence is in effect.",false);
  Gson gson=new Gson();
  String stickyMethodList=gson.toJson(methodList);
  lbCapabilities.put(Capability.SupportedStickinessMethods,stickyMethodList);
  capabilities.put(Service.Lb,lbCapabilities);
  return capabilities;
}
