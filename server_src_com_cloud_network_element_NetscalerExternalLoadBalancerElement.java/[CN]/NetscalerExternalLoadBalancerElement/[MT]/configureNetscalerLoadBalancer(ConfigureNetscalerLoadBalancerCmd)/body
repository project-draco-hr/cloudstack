{
  Long lbDeviceId=cmd.getLoadBalancerDeviceId();
  Boolean dedicatedUse=cmd.getLoadBalancerDedicated();
  Long capacity=cmd.getLoadBalancerCapacity();
  ExternalLoadBalancerDeviceVO lbDeviceVo=_lbDeviceDao.findById(lbDeviceId);
  if ((lbDeviceVo == null) || !isNetscalerDevice(lbDeviceVo.getDeviceName())) {
    throw new InvalidParameterValueException("No netscaler device found with ID: " + lbDeviceId);
  }
  if (dedicatedUse != null || capacity != null) {
    String deviceName=lbDeviceVo.getDeviceName();
    if (NetworkDevice.NetscalerSDXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
    }
 else     if (NetworkDevice.NetscalerMPXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
      if (dedicatedUse != null && dedicatedUse == true) {
        throw new InvalidParameterValueException("Netscaler MPX device should be shared and can not be dedicated to a single accoutnt.");
      }
    }
    List<NetworkExternalLoadBalancerVO> networks=_networkLBDao.listByLoadBalancerDeviceId(lbDeviceId);
    if ((networks != null) && !networks.isEmpty()) {
      if (capacity < networks.size()) {
        throw new CloudRuntimeException("There are more number of networks already using this netscalr device than configured capacity");
      }
      if (dedicatedUse != null && dedicatedUse == true) {
        throw new CloudRuntimeException("There are networks already using this netscalr device to make device dedicated");
      }
    }
    if (capacity != null) {
      lbDeviceVo.setCapacity(capacity);
    }
    if (dedicatedUse != null) {
      lbDeviceVo.setIsDedicatedDevice(dedicatedUse);
    }
  }
  lbDeviceVo.setState(LBDeviceState.Enabled);
  _lbDeviceDao.update(lbDeviceId,lbDeviceVo);
  return lbDeviceVo;
}
