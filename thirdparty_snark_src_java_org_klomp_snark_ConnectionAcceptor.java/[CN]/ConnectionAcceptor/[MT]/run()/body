{
  while (!stop) {
    try {
      final Socket socket=serverSocket.accept();
      Thread t=new Thread("Connection-" + socket){
        @Override public void run(){
          try {
            InputStream in=socket.getInputStream();
            OutputStream out=socket.getOutputStream();
            BufferedInputStream bis=new BufferedInputStream(in);
            BufferedOutputStream bos=new BufferedOutputStream(out);
            if (httpacceptor != null) {
              byte[] scratch=new byte[4];
              bis.mark(4);
              for (int len=0; len < 4; len++) {
                scratch[len++]=(byte)bis.read();
              }
              bis.reset();
              if (scratch[0] == 19 && scratch[1] == 'B' && scratch[2] == 'i' && scratch[3] == 't') {
                peeracceptor.connection(socket,bis,bos);
              }
 else               if (scratch[0] == 'G' && scratch[1] == 'E' && scratch[2] == 'T' && scratch[3] == ' ') {
                httpacceptor.connection(socket,bis,bos);
              }
            }
 else {
              peeracceptor.connection(socket,bis,bos);
            }
          }
 catch (          IOException ioe) {
            try {
              socket.close();
            }
 catch (            IOException ignored) {
            }
          }
        }
      }
;
      t.start();
    }
 catch (    IOException ioe) {
      log.log(Level.SEVERE,"Error while accepting",ioe);
      stop=true;
    }
  }
  try {
    serverSocket.close();
  }
 catch (  IOException ignored) {
  }
}
