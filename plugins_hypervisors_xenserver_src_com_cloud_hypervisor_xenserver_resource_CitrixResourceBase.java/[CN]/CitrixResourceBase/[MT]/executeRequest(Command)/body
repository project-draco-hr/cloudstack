{
  final Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof NetworkElementCommand) {
    return _vrResource.executeRequest((NetworkElementCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == GetVmDiskStatsCommand.class) {
    return execute((GetVmDiskStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == ResizeVolumeCommand.class) {
    return execute((ResizeVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityGroupRulesCmd.class) {
    return execute((SecurityGroupRulesCmd)cmd);
  }
 else   if (clazz == OvsFetchInterfaceCommand.class) {
    return execute((OvsFetchInterfaceCommand)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == OvsVpcPhysicalTopologyConfigCommand.class) {
    return execute((OvsVpcPhysicalTopologyConfigCommand)cmd);
  }
 else   if (clazz == OvsVpcRoutingPolicyConfigCommand.class) {
    return execute((OvsVpcRoutingPolicyConfigCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetupBridgeCommand.class) {
    return execute((OvsSetupBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyBridgeCommand.class) {
    return execute((OvsDestroyBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof ClusterVMMetaDataSyncCommand) {
    return execute((ClusterVMMetaDataSyncCommand)cmd);
  }
 else   if (clazz == CheckNetworkCommand.class) {
    return execute((CheckNetworkCommand)cmd);
  }
 else   if (clazz == PlugNicCommand.class) {
    return execute((PlugNicCommand)cmd);
  }
 else   if (clazz == UnPlugNicCommand.class) {
    return execute((UnPlugNicCommand)cmd);
  }
 else   if (cmd instanceof StorageSubSystemCommand) {
    return storageHandler.handleStorageCommands((StorageSubSystemCommand)cmd);
  }
 else   if (clazz == CreateVMSnapshotCommand.class) {
    return execute((CreateVMSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteVMSnapshotCommand.class) {
    return execute((DeleteVMSnapshotCommand)cmd);
  }
 else   if (clazz == RevertToVMSnapshotCommand.class) {
    return execute((RevertToVMSnapshotCommand)cmd);
  }
 else   if (clazz == NetworkRulesVmSecondaryIpCommand.class) {
    return execute((NetworkRulesVmSecondaryIpCommand)cmd);
  }
 else   if (clazz == ScaleVmCommand.class) {
    return execute((ScaleVmCommand)cmd);
  }
 else   if (clazz == PvlanSetupCommand.class) {
    return execute((PvlanSetupCommand)cmd);
  }
 else   if (clazz == PerformanceMonitorCommand.class) {
    return execute((PerformanceMonitorCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}
