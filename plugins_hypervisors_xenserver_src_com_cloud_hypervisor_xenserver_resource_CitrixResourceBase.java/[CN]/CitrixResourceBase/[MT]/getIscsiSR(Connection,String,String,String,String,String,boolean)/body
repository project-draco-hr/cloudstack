{
synchronized (srNameLabel.intern()) {
    final Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      if (path.endsWith("/")) {
        path=path.substring(0,path.length() - 1);
      }
      final String tmp[]=path.split("/");
      if (tmp.length != 3) {
        final String msg="Wrong iscsi path " + path + " it should be /targetIQN/LUN";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      final String targetiqn=tmp[1].trim();
      final String lunid=tmp[2].trim();
      String scsiid="";
      final Set<SR> srs=SR.getByNameLabel(conn,srNameLabel);
      for (      final SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        final Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        final PBD pbd=pbds.iterator().next();
        final Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get("target") == null) {
          continue;
        }
        if (dc.get("targetIQN") == null) {
          continue;
        }
        if (dc.get("lunid") == null) {
          continue;
        }
        if (target.equals(dc.get("target")) && targetiqn.equals(dc.get("targetIQN")) && lunid.equals(dc.get("lunid"))) {
          throw new CloudRuntimeException("There is a SR using the same configuration target:" + dc.get("target") + ",  targetIQN:"+ dc.get("targetIQN")+ ", lunid:"+ dc.get("lunid")+ " for pool "+ srNameLabel+ "on host:"+ _host.uuid);
        }
      }
      deviceConfig.put("target",target);
      deviceConfig.put("targetIQN",targetiqn);
      if (StringUtils.isNotBlank(chapInitiatorUsername) && StringUtils.isNotBlank(chapInitiatorPassword)) {
        deviceConfig.put("chapuser",chapInitiatorUsername);
        deviceConfig.put("chappassword",chapInitiatorPassword);
      }
      final Host host=Host.getByUuid(conn,_host.uuid);
      final Map<String,String> smConfig=new HashMap<String,String>();
      final String type=SRType.LVMOISCSI.toString();
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,"user",true,smConfig);
      }
 catch (      final XenAPIException e) {
        final String errmsg=e.toString();
        if (errmsg.contains("SR_BACKEND_FAILURE_107")) {
          final String lun[]=errmsg.split("<LUN>");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            final int blunindex=lun[i].indexOf("<LUNid>") + 7;
            final int elunindex=lun[i].indexOf("</LUNid>");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              final int bscsiindex=lun[i].indexOf("<SCSIid>") + 8;
              final int escsiindex=lun[i].indexOf("</SCSIid>");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            final String msg="can not find LUN " + lunid + " in "+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          final String msg="Unable to create Iscsi SR  " + deviceConfig + " due to  "+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put("SCSIid",scsiid);
      final String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf("<UUID>") != -1) {
        pooluuid=result.substring(result.indexOf("<UUID>") + 6,result.indexOf("</UUID>")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,"user",true,smConfig);
      }
 else {
        try {
          sr=SR.introduce(conn,pooluuid,srNameLabel,srNameLabel,type,"user",true,smConfig);
        }
 catch (        final XenAPIException ex) {
          if (ignoreIntroduceException) {
            return sr;
          }
          throw ex;
        }
        final Set<Host> setHosts=Host.getAll(conn);
        if (setHosts == null) {
          final String msg="Unable to create Iscsi SR  " + deviceConfig + " due to hosts not available.";
          s_logger.warn(msg);
          throw new CloudRuntimeException(msg);
        }
        for (        final Host currentHost : setHosts) {
          final PBD.Record rec=new PBD.Record();
          rec.deviceConfig=deviceConfig;
          rec.host=currentHost;
          rec.SR=sr;
          final PBD pbd=PBD.create(conn,rec);
          pbd.plug(conn);
        }
      }
      sr.scan(conn);
      return sr;
    }
 catch (    final XenAPIException e) {
      final String msg="Unable to create Iscsi SR  " + deviceConfig + " due to  "+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    final Exception e) {
      final String msg="Unable to create Iscsi SR  " + deviceConfig + " due to  "+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}
