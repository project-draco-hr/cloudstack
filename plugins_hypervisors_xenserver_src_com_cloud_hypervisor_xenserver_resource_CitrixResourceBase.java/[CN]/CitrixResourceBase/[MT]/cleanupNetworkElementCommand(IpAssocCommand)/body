{
  final Connection conn=getConnection();
  final String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  final String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  try {
    final IpAddressTO[] ips=cmd.getIpAddresses();
    final int ipsCount=ips.length;
    for (    final IpAddressTO ip : ips) {
      final VM router=getVM(conn,routerName);
      final NicTO nic=new NicTO();
      nic.setMac(ip.getVifMacAddress());
      nic.setType(ip.getTrafficType());
      if (ip.getBroadcastUri() == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        final URI uri=BroadcastDomainType.fromString(ip.getBroadcastUri());
        nic.setBroadcastType(BroadcastDomainType.getSchemeValue(uri));
        nic.setBroadcastUri(uri);
      }
      nic.setDeviceId(0);
      nic.setNetworkRateMbps(ip.getNetworkRate());
      nic.setName(ip.getNetworkName());
      Network network=getNetwork(conn,nic);
      boolean removeVif=false;
      if (ipsCount == 1 && !ip.isAdd()) {
        removeVif=true;
      }
      if (removeVif) {
        final VIF correctVif=getCorrectVif(conn,router,network);
        if (correctVif != null) {
          network=correctVif.getNetwork(conn);
          networkUsage(conn,routerIp,"deleteVif","eth" + correctVif.getDevice(conn));
          correctVif.unplug(conn);
          correctVif.destroy(conn);
          disableVlanNetwork(conn,network);
        }
      }
    }
  }
 catch (  final Exception e) {
    s_logger.debug("Ip Assoc failure on applying one ip due to exception:  ",e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}
