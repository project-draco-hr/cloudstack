{
  final String vmName=cmd.getVmName();
  final String vmSnapshotName=cmd.getTarget().getSnapshotName();
  final List<VolumeObjectTO> listVolumeTo=cmd.getVolumeTOs();
  VmPowerState vmState=VmPowerState.HALTED;
  final String guestOSType=cmd.getGuestOSType();
  final String platformEmulator=cmd.getPlatformEmulator();
  final boolean snapshotMemory=cmd.getTarget().getType() == VMSnapshot.Type.DiskAndMemory;
  final long timeout=cmd.getWait();
  final Connection conn=getConnection();
  VM vm=null;
  VM vmSnapshot=null;
  boolean success=false;
  try {
    final Set<VM> vmSnapshots=VM.getByNameLabel(conn,cmd.getTarget().getSnapshotName());
    if (vmSnapshots.size() > 0) {
      return new CreateVMSnapshotAnswer(cmd,cmd.getTarget(),cmd.getVolumeTOs());
    }
    Task task=null;
    Set<Task> tasks=Task.getByNameLabel(conn,"Async.VM.snapshot");
    if (tasks == null) {
      tasks=new LinkedHashSet<>();
    }
    final Set<Task> tasksByName=Task.getByNameLabel(conn,"Async.VM.checkpoint");
    if (tasksByName != null) {
      tasks.addAll(tasksByName);
    }
    for (    final Task taskItem : tasks) {
      if (taskItem.getOtherConfig(conn).containsKey("CS_VM_SNAPSHOT_KEY")) {
        final String vmSnapshotTaskName=taskItem.getOtherConfig(conn).get("CS_VM_SNAPSHOT_KEY");
        if (vmSnapshotTaskName != null && vmSnapshotTaskName.equals(cmd.getTarget().getSnapshotName())) {
          task=taskItem;
        }
      }
    }
    if (task == null) {
      try {
        vm=getVM(conn,vmName);
        vmState=vm.getPowerState(conn);
      }
 catch (      final Exception e) {
        if (!snapshotMemory) {
          vm=createWorkingVM(conn,vmName,guestOSType,platformEmulator,listVolumeTo);
        }
      }
      if (vm == null) {
        return new CreateVMSnapshotAnswer(cmd,false,"Creating VM Snapshot Failed due to can not find vm: " + vmName);
      }
      if (!snapshotMemory) {
        task=vm.snapshotAsync(conn,vmSnapshotName);
      }
 else {
        final Set<VBD> vbds=vm.getVBDs(conn);
        final Pool pool=Pool.getByUuid(conn,_host.pool);
        for (        final VBD vbd : vbds) {
          final VBD.Record vbdr=vbd.getRecord(conn);
          if (vbdr.userdevice.equals("0")) {
            final VDI vdi=vbdr.VDI;
            final SR sr=vdi.getSR(conn);
            pool.setSuspendImageSR(conn,sr);
          }
        }
        task=vm.checkpointAsync(conn,vmSnapshotName);
      }
      task.addToOtherConfig(conn,"CS_VM_SNAPSHOT_KEY",vmSnapshotName);
    }
    waitForTask(conn,task,1000,timeout * 1000);
    checkForSuccess(conn,task);
    final String result=task.getResult(conn);
    final String ref=result.substring("<value>".length(),result.length() - "</value>".length());
    vmSnapshot=Types.toVM(ref);
    try {
      Thread.sleep(5000);
    }
 catch (    final InterruptedException ex) {
    }
    for (    final VolumeObjectTO volumeTo : cmd.getVolumeTOs()) {
      final long size=getVMSnapshotChainSize(conn,volumeTo,cmd.getVmName());
      volumeTo.setSize(size);
    }
    success=true;
    return new CreateVMSnapshotAnswer(cmd,cmd.getTarget(),cmd.getVolumeTOs());
  }
 catch (  final Exception e) {
    String msg="";
    if (e instanceof Types.BadAsyncResult) {
      final String licenseKeyWord="LICENCE_RESTRICTION";
      final Types.BadAsyncResult errorResult=(Types.BadAsyncResult)e;
      if (errorResult.shortDescription != null && errorResult.shortDescription.contains(licenseKeyWord)) {
        msg=licenseKeyWord;
      }
    }
 else {
      msg=e.toString();
    }
    s_logger.warn("Creating VM Snapshot " + cmd.getTarget().getSnapshotName() + " failed due to: "+ msg,e);
    return new CreateVMSnapshotAnswer(cmd,false,msg);
  }
 finally {
    try {
      if (!success) {
        if (vmSnapshot != null) {
          s_logger.debug("Delete exsisting VM Snapshot " + vmSnapshotName + " after making VolumeTO failed");
          final Set<VBD> vbds=vmSnapshot.getVBDs(conn);
          for (          final VBD vbd : vbds) {
            final VBD.Record vbdr=vbd.getRecord(conn);
            if (vbdr.type == Types.VbdType.DISK) {
              final VDI vdi=vbdr.VDI;
              vdi.destroy(conn);
            }
          }
          vmSnapshot.destroy(conn);
        }
      }
      if (vmState == VmPowerState.HALTED) {
        if (vm != null) {
          vm.destroy(conn);
        }
      }
    }
 catch (    final Exception e2) {
      s_logger.error("delete snapshot error due to " + e2.getMessage());
    }
  }
}
