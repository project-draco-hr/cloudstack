{
  final String tmplturl=cmd.getUrl();
  final String poolName=cmd.getPoolUuid();
  final int wait=cmd.getWait();
  try {
    final URI uri=new URI(tmplturl);
    final String tmplpath=uri.getHost() + ":" + uri.getPath();
    final Connection conn=getConnection();
    SR poolsr=null;
    final Set<SR> srs=SR.getByNameLabel(conn,poolName);
    if (srs.size() != 1) {
      final String msg="There are " + srs.size() + " SRs with same name: "+ poolName;
      s_logger.warn(msg);
      return new PrimaryStorageDownloadAnswer(msg);
    }
 else {
      poolsr=srs.iterator().next();
    }
    final String pUuid=poolsr.getUuid(conn);
    final boolean isISCSI=IsISCSI(poolsr.getType(conn));
    final String uuid=copy_vhd_from_secondarystorage(conn,tmplpath,pUuid,wait);
    final VDI tmpl=getVDIbyUuid(conn,uuid);
    final VDI snapshotvdi=tmpl.snapshot(conn,new HashMap<String,String>());
    final String snapshotUuid=snapshotvdi.getUuid(conn);
    snapshotvdi.setNameLabel(conn,"Template " + cmd.getName());
    final String parentuuid=getVhdParent(conn,pUuid,snapshotUuid,isISCSI);
    final VDI parent=getVDIbyUuid(conn,parentuuid);
    final Long phySize=parent.getPhysicalUtilisation(conn);
    tmpl.destroy(conn);
    poolsr.scan(conn);
    try {
      Thread.sleep(5000);
    }
 catch (    final Exception e) {
    }
    return new PrimaryStorageDownloadAnswer(snapshotvdi.getUuid(conn),phySize);
  }
 catch (  final Exception e) {
    final String msg="Catch Exception " + e.getClass().getName() + " on host:"+ _host.uuid+ " for template: "+ tmplturl+ " due to "+ e.toString();
    s_logger.warn(msg,e);
    return new PrimaryStorageDownloadAnswer(msg);
  }
}
