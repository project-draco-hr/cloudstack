{
  double value=0;
  final double dummy=0;
  int numRowsUsed=0;
  for (int row=0; row < numRows; row++) {
    final Node data=dataNode.getChildNodes().item(numRows - 1 - row).getChildNodes().item(col + 1);
    final Double currentDataAsDouble=Double.valueOf(getXMLNodeValue(data));
    if (!currentDataAsDouble.equals(Double.NaN)) {
      numRowsUsed+=1;
      value+=currentDataAsDouble;
    }
  }
  if (numRowsUsed == 0) {
    if (!Double.isInfinite(value) && !Double.isNaN(value)) {
      return value;
    }
 else {
      s_logger.warn("Found an invalid value (infinity/NaN) in getDataAverage(), numRows=0");
      return dummy;
    }
  }
 else {
    if (!Double.isInfinite(value / numRowsUsed) && !Double.isNaN(value / numRowsUsed)) {
      return value / numRowsUsed;
    }
 else {
      s_logger.warn("Found an invalid value (infinity/NaN) in getDataAverage(), numRows>0");
      return dummy;
    }
  }
}
