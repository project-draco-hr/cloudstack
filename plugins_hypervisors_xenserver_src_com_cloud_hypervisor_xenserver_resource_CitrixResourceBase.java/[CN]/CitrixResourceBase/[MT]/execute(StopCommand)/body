{
  final String vmName=cmd.getVmName();
  String platformstring=null;
  try {
    final Connection conn=getConnection();
    final Set<VM> vms=VM.getByNameLabel(conn,vmName);
    final Iterator<VM> iter=vms.iterator();
    while (iter.hasNext()) {
      final VM vm=iter.next();
      final VM.Record vmr=vm.getRecord(conn);
      if (vmr.powerState != VmPowerState.RUNNING) {
        continue;
      }
      if (isRefNull(vmr.residentOn)) {
        continue;
      }
      if (vmr.residentOn.getUuid(conn).equals(_host.getUuid())) {
        continue;
      }
      iter.remove();
    }
    if (vms.size() == 0) {
      return new StopAnswer(cmd,"VM does not exist",true);
    }
    for (    final VM vm : vms) {
      final VM.Record vmr=vm.getRecord(conn);
      platformstring=StringUtils.mapToString(vmr.platform);
      if (vmr.isControlDomain) {
        final String msg="Tring to Shutdown control domain";
        s_logger.warn(msg);
        return new StopAnswer(cmd,msg,false);
      }
      if (vmr.powerState == VmPowerState.RUNNING && !isRefNull(vmr.residentOn) && !vmr.residentOn.getUuid(conn).equals(_host.getUuid())) {
        final String msg="Stop Vm " + vmName + " failed due to this vm is not running on this host: "+ _host.getUuid()+ " but host:"+ vmr.residentOn.getUuid(conn);
        s_logger.warn(msg);
        return new StopAnswer(cmd,msg,platformstring,false);
      }
      if (cmd.checkBeforeCleanup() && vmr.powerState == VmPowerState.RUNNING) {
        final String msg="Vm " + vmName + " is running on host and checkBeforeCleanup flag is set, so bailing out";
        s_logger.debug(msg);
        return new StopAnswer(cmd,msg,false);
      }
      s_logger.debug("9. The VM " + vmName + " is in Stopping state");
      try {
        if (vmr.powerState == VmPowerState.RUNNING) {
          vm.setAffinity(conn,vm.getResidentOn(conn));
          if (_canBridgeFirewall) {
            final String result=callHostPlugin(conn,"vmops","destroy_network_rules_for_vm","vmName",cmd.getVmName());
            if (result == null || result.isEmpty() || !Boolean.parseBoolean(result)) {
              s_logger.warn("Failed to remove  network rules for vm " + cmd.getVmName());
            }
 else {
              s_logger.info("Removed  network rules for vm " + cmd.getVmName());
            }
          }
          shutdownVM(conn,vm,vmName);
        }
      }
 catch (      final Exception e) {
        final String msg="Catch exception " + e.getClass().getName() + " when stop VM:"+ cmd.getVmName()+ " due to "+ e.toString();
        s_logger.debug(msg);
        return new StopAnswer(cmd,msg,platformstring,false);
      }
 finally {
        try {
          if (vm.getPowerState(conn) == VmPowerState.HALTED) {
            Set<VGPU> vGPUs=null;
            try {
              vGPUs=vm.getVGPUs(conn);
            }
 catch (            final XenAPIException e2) {
              s_logger.debug("VM " + vmName + " does not have GPU support.");
            }
            if (vGPUs != null && !vGPUs.isEmpty()) {
              final HashMap<String,HashMap<String,VgpuTypesInfo>> groupDetails=getGPUGroupDetails(conn);
              cmd.setGpuDevice(new GPUDeviceTO(null,null,groupDetails));
            }
            final Set<VIF> vifs=vm.getVIFs(conn);
            final List<Network> networks=new ArrayList<Network>();
            for (            final VIF vif : vifs) {
              networks.add(vif.getNetwork(conn));
            }
            vm.destroy(conn);
            final SR sr=getISOSRbyVmName(conn,cmd.getVmName());
            removeSR(conn,sr);
            for (            final Network network : networks) {
              try {
                if (network.getNameLabel(conn).startsWith("VLAN")) {
                  disableVlanNetwork(conn,network);
                }
              }
 catch (              final Exception e) {
              }
            }
            return new StopAnswer(cmd,"Stop VM " + vmName + " Succeed",platformstring,true);
          }
        }
 catch (        final Exception e) {
          final String msg="VM destroy failed in Stop " + vmName + " Command due to "+ e.getMessage();
          s_logger.warn(msg,e);
        }
 finally {
          s_logger.debug("10. The VM " + vmName + " is in Stopped state");
        }
      }
    }
  }
 catch (  final Exception e) {
    final String msg="Stop Vm " + vmName + " fail due to "+ e.toString();
    s_logger.warn(msg,e);
    return new StopAnswer(cmd,msg,platformstring,false);
  }
  return new StopAnswer(cmd,"Stop VM failed",platformstring,false);
}
