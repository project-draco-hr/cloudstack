{
  final HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  final String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,0,0,0,"vm"));
  }
  final Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  final Integer numRows=(Integer)rrdData[0];
  final Integer numColumns=(Integer)rrdData[1];
  final Node legend=(Node)rrdData[2];
  final Node dataNode=(Node)rrdData[3];
  final NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    final String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    final String[] columnMetadataList=columnMetadata.split(":");
    if (columnMetadataList.length != 4) {
      continue;
    }
    final String type=columnMetadataList[1];
    final String uuid=columnMetadataList[2];
    final String param=columnMetadataList[3];
    if (type.equals("vm") && vmResponseMap.keySet().contains(uuid)) {
      final VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType("vm");
      if (param.contains("cpu")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows));
      }
 else       if (param.matches("vif_\\d*_rx")) {
        vmStatsAnswer.setNetworkReadKBs(vmStatsAnswer.getNetworkReadKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches("vif_\\d*_tx")) {
        vmStatsAnswer.setNetworkWriteKBs(vmStatsAnswer.getNetworkWriteKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches("vbd_.*_read")) {
        vmStatsAnswer.setDiskReadKBs(vmStatsAnswer.getDiskReadKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches("vbd_.*_write")) {
        vmStatsAnswer.setDiskWriteKBs(vmStatsAnswer.getDiskWriteKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains("memory_internal_free")) {
        vmStatsAnswer.setIntFreeMemoryKBs(vmStatsAnswer.getIntFreeMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains("memory_target")) {
        vmStatsAnswer.setTargetMemoryKBs(vmStatsAnswer.getTargetMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains("memory")) {
        vmStatsAnswer.setMemoryKBs(vmStatsAnswer.getMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
    }
  }
  for (  final Map.Entry<String,VmStatsEntry> entry : vmResponseMap.entrySet()) {
    final VmStatsEntry vmStatsAnswer=entry.getValue();
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Vm cpu utilization " + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}
