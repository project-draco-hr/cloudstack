{
  final VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  final String vmName=vmSpec.getName();
  try {
    final Connection conn=getConnection();
    final Set<VM> vms=VM.getByNameLabel(conn,vmName);
    final Host host=Host.getByUuid(conn,_host.uuid);
    if (!isDmcEnabled(conn,host)) {
      throw new CloudRuntimeException("Unable to scale the vm: " + vmName + " as DMC - Dynamic memory control is not enabled for the XenServer:"+ _host.uuid+ " ,check your license and hypervisor version.");
    }
    final Iterator<VM> iter=vms.iterator();
    while (iter.hasNext()) {
      final VM vm=iter.next();
      final VM.Record vmr=vm.getRecord(conn);
      if (vmr.powerState == VmPowerState.HALTED || vmr.powerState == VmPowerState.RUNNING && !isRefNull(vmr.residentOn) && !vmr.residentOn.getUuid(conn).equals(_host.uuid)) {
        iter.remove();
      }
    }
    if (vms.size() == 0) {
      s_logger.info("No running VM " + vmName + " exists on XenServer"+ _host.uuid);
      return new ScaleVmAnswer(cmd,false,"VM does not exist");
    }
    for (    final VM vm : vms) {
      vm.getRecord(conn);
      try {
        scaleVM(conn,vm,vmSpec,host);
      }
 catch (      final Exception e) {
        final String msg="Catch exception " + e.getClass().getName() + " when scaling VM:"+ vmName+ " due to "+ e.toString();
        s_logger.debug(msg);
        return new ScaleVmAnswer(cmd,false,msg);
      }
    }
    final String msg="scaling VM " + vmName + " is successful on host "+ host;
    s_logger.debug(msg);
    return new ScaleVmAnswer(cmd,true,msg);
  }
 catch (  final XenAPIException e) {
    final String msg="Upgrade Vm " + vmName + " fail due to "+ e.toString();
    s_logger.warn(msg,e);
    return new ScaleVmAnswer(cmd,false,msg);
  }
catch (  final XmlRpcException e) {
    final String msg="Upgrade Vm " + vmName + " fail due to "+ e.getMessage();
    s_logger.warn(msg,e);
    return new ScaleVmAnswer(cmd,false,msg);
  }
catch (  final Exception e) {
    final String msg="Unable to upgrade " + vmName + " due to "+ e.getMessage();
    s_logger.warn(msg,e);
    return new ScaleVmAnswer(cmd,false,msg);
  }
}
