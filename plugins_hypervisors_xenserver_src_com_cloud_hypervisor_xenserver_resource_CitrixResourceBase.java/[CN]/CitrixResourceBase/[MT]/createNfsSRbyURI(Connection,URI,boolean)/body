{
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Creating a " + (shared ? "shared SR for " : "not shared SR for ") + uri);
    }
    final Map<String,String> deviceConfig=new HashMap<String,String>();
    String path=uri.getPath();
    path=path.replace("//","/");
    deviceConfig.put("server",uri.getHost());
    deviceConfig.put("serverpath",path);
    final String name=UUID.nameUUIDFromBytes(new String(uri.getHost() + path).getBytes()).toString();
    if (!shared) {
      final Set<SR> srs=SR.getByNameLabel(conn,name);
      for (      final SR sr : srs) {
        final SR.Record record=sr.getRecord(conn);
        if (SRType.NFS.equals(record.type) && record.contentType.equals("user") && !record.shared) {
          removeSRSync(conn,sr);
        }
      }
    }
    final Host host=Host.getByUuid(conn,_host.getUuid());
    final Map<String,String> smConfig=new HashMap<String,String>();
    smConfig.put("nosubdir","true");
    final SR sr=SR.create(conn,host,deviceConfig,new Long(0),name,uri.getHost() + uri.getPath(),SRType.NFS.toString(),"user",shared,smConfig);
    if (!checkSR(conn,sr)) {
      throw new Exception("no attached PBD");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(logX(sr,"Created a SR; UUID is " + sr.getUuid(conn) + " device config is "+ deviceConfig));
    }
    sr.scan(conn);
    return sr;
  }
 catch (  final XenAPIException e) {
    final String msg="Can not create second storage SR mountpoint: " + uri.getHost() + uri.getPath()+ " due to "+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
catch (  final Exception e) {
    final String msg="Can not create second storage SR mountpoint: " + uri.getHost() + uri.getPath()+ " due to "+ e.getMessage();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
}
