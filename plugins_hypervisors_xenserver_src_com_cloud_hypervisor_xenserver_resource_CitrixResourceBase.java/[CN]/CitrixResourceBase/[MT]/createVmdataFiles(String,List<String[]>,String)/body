{
  String isoPath="/tmp/" + vmName + "/configDrive/";
  String configDriveName="cloudstack/";
  try {
    deleteLocalFolder("/tmp/" + isoPath);
  }
 catch (  IOException e) {
    s_logger.debug("Failed to delete the exiting config drive for vm " + vmName + " "+ e.getMessage());
  }
catch (  Exception e) {
    s_logger.debug("Failed to delete the exiting config drive for vm " + vmName + " "+ e.getMessage());
  }
  if (vmDataList != null) {
    for (    String[] item : vmDataList) {
      String dataType=item[0];
      String fileName=item[1];
      String content=item[2];
      if (dataType != null && !dataType.isEmpty()) {
        String folder=isoPath + configDriveName + dataType;
        if (folder != null && !folder.isEmpty()) {
          File dir=new File(folder);
          boolean result=true;
          try {
            if (!dir.exists()) {
              dir.mkdirs();
            }
          }
 catch (          SecurityException ex) {
            s_logger.debug("Failed to create dir " + ex.getMessage());
            return false;
          }
          if (result && content != null && !content.isEmpty()) {
            try {
              File file=new File(folder + "/" + fileName+ ".txt");
              OutputStreamWriter fw=new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),"UTF-8");
              BufferedWriter bw=new BufferedWriter(fw);
              bw.write(content);
              bw.close();
              s_logger.debug("created file: " + file + " in folder:"+ folder);
            }
 catch (            IOException ex) {
              s_logger.debug("Failed to create file " + ex.getMessage());
              return false;
            }
          }
        }
      }
    }
    s_logger.debug("Created the vm data in " + isoPath);
  }
  String s=null;
  try {
    String cmd="mkisofs -iso-level 3 -V " + configDriveLabel + " -o "+ isoPath+ vmName+ ".iso "+ isoPath;
    Process p=Runtime.getRuntime().exec(cmd);
    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream(),Charset.defaultCharset()));
    BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream(),Charset.defaultCharset()));
    while ((s=stdInput.readLine()) != null) {
      s_logger.debug(s);
    }
    while ((s=stdError.readLine()) != null) {
      s_logger.debug(s);
    }
    s_logger.debug(" Created config drive ISO using the command " + cmd + " in the host "+ _host.getIp());
  }
 catch (  IOException e) {
    s_logger.debug(e.getMessage());
    return false;
  }
  return true;
}
