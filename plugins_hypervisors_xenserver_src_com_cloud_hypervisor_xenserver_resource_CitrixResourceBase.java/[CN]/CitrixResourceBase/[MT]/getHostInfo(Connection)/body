{
  try {
    final Host myself=Host.getByUuid(conn,_host.getUuid());
    Set<HostCpu> hcs=null;
    for (int i=0; i < 10; i++) {
      hcs=myself.getHostCPUs(conn);
      if (hcs != null) {
        _host.setCpus(hcs.size());
        if (_host.getCpus() > 0) {
          break;
        }
      }
      Thread.sleep(5000);
    }
    if (_host.getCpus() <= 0) {
      throw new CloudRuntimeException("Cannot get the numbers of cpu from XenServer host " + _host.getIp());
    }
    final Map<String,String> cpuInfo=myself.getCpuInfo(conn);
    if (cpuInfo.get("socket_count") != null) {
      _host.setCpuSockets(Integer.parseInt(cpuInfo.get("socket_count")));
    }
    for (    final HostCpu hc : hcs) {
      _host.setSpeed(hc.getSpeed(conn).intValue());
      break;
    }
    final Host.Record hr=myself.getRecord(conn);
    _host.setProductVersion(CitrixHelper.getProductVersion(hr));
    final XsLocalNetwork privateNic=getManagementNetwork(conn);
    _privateNetworkName=privateNic.getNetworkRecord(conn).nameLabel;
    _host.setPrivatePif(privateNic.getPifRecord(conn).uuid);
    _host.setPrivateNetwork(privateNic.getNetworkRecord(conn).uuid);
    _host.setSystemvmisouuid(null);
    XsLocalNetwork guestNic=null;
    if (_guestNetworkName != null && !_guestNetworkName.equals(_privateNetworkName)) {
      guestNic=getNetworkByName(conn,_guestNetworkName);
      if (guestNic == null) {
        s_logger.warn("Unable to find guest network " + _guestNetworkName);
        throw new IllegalArgumentException("Unable to find guest network " + _guestNetworkName + " for host "+ _host.getIp());
      }
    }
 else {
      guestNic=privateNic;
      _guestNetworkName=_privateNetworkName;
    }
    _host.setGuestNetwork(guestNic.getNetworkRecord(conn).uuid);
    _host.setGuestPif(guestNic.getPifRecord(conn).uuid);
    XsLocalNetwork publicNic=null;
    if (_publicNetworkName != null && !_publicNetworkName.equals(_guestNetworkName)) {
      publicNic=getNetworkByName(conn,_publicNetworkName);
      if (publicNic == null) {
        s_logger.warn("Unable to find public network " + _publicNetworkName + " for host "+ _host.getIp());
        throw new IllegalArgumentException("Unable to find public network " + _publicNetworkName + " for host "+ _host.getIp());
      }
    }
 else {
      publicNic=guestNic;
      _publicNetworkName=_guestNetworkName;
    }
    _host.setPublicPif(publicNic.getPifRecord(conn).uuid);
    _host.setPublicNetwork(publicNic.getNetworkRecord(conn).uuid);
    if (_storageNetworkName1 == null) {
      _storageNetworkName1=_guestNetworkName;
    }
    XsLocalNetwork storageNic1=null;
    storageNic1=getNetworkByName(conn,_storageNetworkName1);
    if (storageNic1 == null) {
      s_logger.warn("Unable to find storage network " + _storageNetworkName1 + " for host "+ _host.getIp());
      throw new IllegalArgumentException("Unable to find storage network " + _storageNetworkName1 + " for host "+ _host.getIp());
    }
 else {
      _host.setStorageNetwork1(storageNic1.getNetworkRecord(conn).uuid);
      _host.setStoragePif1(storageNic1.getPifRecord(conn).uuid);
    }
    XsLocalNetwork storageNic2=null;
    if (_storageNetworkName2 != null) {
      storageNic2=getNetworkByName(conn,_storageNetworkName2);
      if (storageNic2 != null) {
        _host.setStoragePif2(storageNic2.getPifRecord(conn).uuid);
      }
    }
    s_logger.info("XenServer Version is " + _host.getProductVersion() + " for host "+ _host.getIp());
    s_logger.info("Private Network is " + _privateNetworkName + " for host "+ _host.getIp());
    s_logger.info("Guest Network is " + _guestNetworkName + " for host "+ _host.getIp());
    s_logger.info("Public Network is " + _publicNetworkName + " for host "+ _host.getIp());
    return true;
  }
 catch (  final XenAPIException e) {
    s_logger.warn("Unable to get host information for " + _host.getIp(),e);
    return false;
  }
catch (  final Exception e) {
    s_logger.warn("Unable to get host information for " + _host.getIp(),e);
    return false;
  }
}
