{
  final Connection conn=getConnection();
  try {
    final Map<Pool,Pool.Record> poolRecs=Pool.getAllRecords(conn);
    if (poolRecs.size() != 1) {
      throw new CloudRuntimeException("There are " + poolRecs.size() + " pool for host :"+ _host.getUuid());
    }
    final Host master=poolRecs.values().iterator().next().master;
    setupServer(conn,master);
    final Host host=Host.getByUuid(conn,_host.getUuid());
    setupServer(conn,host);
    if (!setIptables(conn)) {
      s_logger.warn("set xenserver Iptable failed");
      return null;
    }
    if (_securityGroupEnabled) {
      _canBridgeFirewall=can_bridge_firewall(conn);
      if (!_canBridgeFirewall) {
        final String msg="Failed to configure brige firewall";
        s_logger.warn(msg);
        s_logger.warn("Check host " + _host.getIp() + " for CSP is installed or not and check network mode for bridge");
        return new SetupAnswer(cmd,msg);
      }
    }
    final boolean r=launchHeartBeat(conn);
    if (!r) {
      return null;
    }
    cleanupTemplateSR(conn);
    try {
      if (cmd.useMultipath()) {
        host.addToOtherConfig(conn,"multipathing","true");
        host.addToOtherConfig(conn,"multipathhandle","dmp");
      }
    }
 catch (    final Types.MapDuplicateKey e) {
      s_logger.debug("multipath is already set");
    }
    if (cmd.needSetup()) {
      final String result=callHostPlugin(conn,"vmops","setup_iscsi","uuid",_host.getUuid());
      if (!result.contains("> DONE <")) {
        s_logger.warn("Unable to setup iscsi: " + result);
        return new SetupAnswer(cmd,result);
      }
      Pair<PIF,PIF.Record> mgmtPif=null;
      final Set<PIF> hostPifs=host.getPIFs(conn);
      for (      final PIF pif : hostPifs) {
        final PIF.Record rec=pif.getRecord(conn);
        if (rec.management) {
          if (rec.VLAN != null && rec.VLAN != -1) {
            final String msg=new StringBuilder("Unsupported configuration.  Management network is on a VLAN.  host=").append(_host.getUuid()).append("; pif=").append(rec.uuid).append("; vlan=").append(rec.VLAN).toString();
            s_logger.warn(msg);
            return new SetupAnswer(cmd,msg);
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Management network is on pif=" + rec.uuid);
          }
          mgmtPif=new Pair<PIF,PIF.Record>(pif,rec);
          break;
        }
      }
      if (mgmtPif == null) {
        final String msg="Unable to find management network for " + _host.getUuid();
        s_logger.warn(msg);
        return new SetupAnswer(cmd,msg);
      }
      final Map<Network,Network.Record> networks=Network.getAllRecords(conn);
      if (networks == null) {
        final String msg="Unable to setup as there are no networks in the host: " + _host.getUuid();
        s_logger.warn(msg);
        return new SetupAnswer(cmd,msg);
      }
      for (      final Network.Record network : networks.values()) {
        if (network.nameLabel.equals("cloud-private")) {
          for (          final PIF pif : network.PIFs) {
            final PIF.Record pr=pif.getRecord(conn);
            if (_host.getUuid().equals(pr.host.getUuid(conn))) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug("Found a network called cloud-private. host=" + _host.getUuid() + ";  Network="+ network.uuid+ "; pif="+ pr.uuid);
              }
              if (pr.VLAN != null && pr.VLAN != -1) {
                final String msg=new StringBuilder("Unsupported configuration.  Network cloud-private is on a VLAN.  Network=").append(network.uuid).append(" ; pif=").append(pr.uuid).toString();
                s_logger.warn(msg);
                return new SetupAnswer(cmd,msg);
              }
              if (!pr.management && pr.bondMasterOf != null && pr.bondMasterOf.size() > 0) {
                if (pr.bondMasterOf.size() > 1) {
                  final String msg=new StringBuilder("Unsupported configuration.  Network cloud-private has more than one bond.  Network=").append(network.uuid).append("; pif=").append(pr.uuid).toString();
                  s_logger.warn(msg);
                  return new SetupAnswer(cmd,msg);
                }
                final Bond bond=pr.bondMasterOf.iterator().next();
                final Set<PIF> slaves=bond.getSlaves(conn);
                for (                final PIF slave : slaves) {
                  final PIF.Record spr=slave.getRecord(conn);
                  if (spr.management) {
                    if (!transferManagementNetwork(conn,host,slave,spr,pif)) {
                      final String msg=new StringBuilder("Unable to transfer management network.  slave=" + spr.uuid + "; master="+ pr.uuid+ "; host="+ _host.getUuid()).toString();
                      s_logger.warn(msg);
                      return new SetupAnswer(cmd,msg);
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    return new SetupAnswer(cmd,false);
  }
 catch (  final XmlRpcException e) {
    s_logger.warn("Unable to setup",e);
    return new SetupAnswer(cmd,e.getMessage());
  }
catch (  final XenAPIException e) {
    s_logger.warn("Unable to setup",e);
    return new SetupAnswer(cmd,e.getMessage());
  }
catch (  final Exception e) {
    s_logger.warn("Unable to setup",e);
    return new SetupAnswer(cmd,e.getMessage());
  }
}
