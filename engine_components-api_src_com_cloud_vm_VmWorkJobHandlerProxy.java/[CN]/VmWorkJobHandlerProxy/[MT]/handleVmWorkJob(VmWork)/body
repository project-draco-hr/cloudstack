{
  Method method=getHandlerMethod(work.getClass());
  if (method != null) {
    try {
      if (s_logger.isDebugEnabled())       s_logger.debug("Execute VM work job: " + work.getClass().getName() + _gsonLogger.toJson(work));
      Object obj=method.invoke(_target,work);
      if (s_logger.isDebugEnabled())       s_logger.debug("Done executing VM work job: " + work.getClass().getName() + _gsonLogger.toJson(work));
      assert(obj instanceof Pair);
      return (Pair<JobInfo.Status,String>)obj;
    }
 catch (    InvocationTargetException e) {
      s_logger.error("Invocation exception, caused by: " + e.getCause());
      if (e.getCause() != null && e.getCause() instanceof Exception)       throw (Exception)e.getCause();
      throw e;
    }
  }
 else {
    s_logger.error("Unable to find handler for VM work job: " + work.getClass().getName() + _gsonLogger.toJson(work));
    RuntimeException ex=new RuntimeException("Unable to find handler for VM work job: " + work.getClass().getName());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,JobSerializerHelper.toObjectSerializedString(ex));
  }
}
