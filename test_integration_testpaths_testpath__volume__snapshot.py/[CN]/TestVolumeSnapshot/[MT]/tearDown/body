def tearDown(self):
    try:
        root_volume = list_volumes(self.apiclient, virtualmachineid=self.vm_1.id, type='ROOT', listall=True)
        self.vm_1.stop(self.apiclient)
        snaps = []
        for i in range(2):
            root_vol_snap = Snapshot.create(self.apiclient, root_volume[0].id)
            self.assertEqual(root_vol_snap.state, 'BackedUp', 'Check if the data vol snapshot state is correct ')
            snaps.append(root_vol_snap)
        for snap in snaps:
            self.assertNotEqual(self.dbclient.execute(("select status from snapshots where name='%s'" % snap.name)), 'Destroyed')
        for snap in snaps:
            self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snap.id))
        self.account.delete(self.apiclient)
        for snap in snaps:
            self.assertEqual(self.dbclient.execute(("select status from snapshots where name='%s'" % snap.name))[0][0], 'Destroyed')
        for snap in snaps:
            self.assertFalse(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snap.id))
        cleanup_resources(self.apiclient, self.cleanup)
    except Exception as e:
        raise Exception(('Warning: Exception during cleanup : %s' % e))
    return
