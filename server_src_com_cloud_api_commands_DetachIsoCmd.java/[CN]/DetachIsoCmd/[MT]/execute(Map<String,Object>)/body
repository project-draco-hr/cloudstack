{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  UserVmVO vmInstanceCheck=getManagementServer().findUserVMInstanceById(vmId.longValue());
  if (vmInstanceCheck == null) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"Unable to find a virtual machine with id " + vmId);
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId().longValue() != vmInstanceCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to detach ISO from virtual machine " + vmInstanceCheck.getName() + " for this account");
      }
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),vmInstanceCheck.getDomainId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to detach ISO from virtual machine " + vmInstanceCheck.getName() + ", permission denied.");
    }
  }
  if (userId == null)   userId=new Long(1);
  try {
    long jobId=getManagementServer().detachISOFromVMAsync(vmId.longValue(),userId);
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for AttachIsoCmd");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("AttachIsoCmd has been accepted, job id: " + jobId);
    }
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    return returnValues;
  }
 catch (  ServerApiException apiEx) {
    s_logger.error("Exception detaching ISO",apiEx);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to detach ISO: " + apiEx.getDescription());
  }
catch (  Exception ex) {
    s_logger.error("Exception detaching ISO",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to detach ISO: " + ex.getMessage());
  }
}
