{
synchronized (_peers) {
    final SocketChannel ch=_peers.get(peerName);
    SSLEngine sslEngine=null;
    if (prevCh != null) {
      try {
        prevCh.close();
      }
 catch (      final Exception e) {
        s_logger.info("[ignored]" + "failed to get close resource for previous channel Socket: " + e.getLocalizedMessage());
      }
    }
    if (ch == null || ch == prevCh) {
      final ManagementServerHost ms=_clusterMgr.getPeer(peerName);
      if (ms == null) {
        s_logger.info("Unable to find peer: " + peerName);
        return null;
      }
      final String ip=ms.getServiceIP();
      InetAddress addr;
      try {
        addr=InetAddress.getByName(ip);
      }
 catch (      final UnknownHostException e) {
        throw new CloudRuntimeException("Unable to resolve " + ip);
      }
      SocketChannel ch1=null;
      try {
        ch1=SocketChannel.open(new InetSocketAddress(addr,Port.value()));
        ch1.configureBlocking(false);
        ch1.socket().setKeepAlive(true);
        ch1.socket().setSoTimeout(60 * 1000);
        try {
          final SSLContext sslContext=Link.initSSLContext(true);
          sslEngine=sslContext.createSSLEngine(ip,Port.value());
          sslEngine.setUseClientMode(true);
          sslEngine.setEnabledProtocols(SSLUtils.getSupportedProtocols(sslEngine.getEnabledProtocols()));
          sslEngine.beginHandshake();
          if (!Link.doHandshake(ch1,sslEngine,true)) {
            ch1.close();
            throw new IOException("SSL handshake failed!");
          }
          s_logger.info("SSL: Handshake done");
        }
 catch (        final Exception e) {
          ch1.close();
          throw new IOException("SSL: Fail to init SSL! " + e);
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Connection to peer opened: " + peerName + ", ip: "+ ip);
        }
        _peers.put(peerName,ch1);
        _sslEngines.put(peerName,sslEngine);
        return ch1;
      }
 catch (      final IOException e) {
        try {
          ch1.close();
        }
 catch (        final IOException ex) {
          s_logger.error("failed to close failed peer socket: " + ex);
        }
        s_logger.warn("Unable to connect to peer management server: " + peerName + ", ip: "+ ip+ " due to "+ e.getMessage(),e);
        return null;
      }
    }
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Found open channel for peer: " + peerName);
    }
    return ch;
  }
}
