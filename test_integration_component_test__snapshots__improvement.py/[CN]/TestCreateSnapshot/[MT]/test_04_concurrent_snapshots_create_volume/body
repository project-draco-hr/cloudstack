@attr(speed='slow')
@attr(tags=['advanced', 'advancedns'])
@attr(configuration='concurrent.snapshots.threshold.perhost')
def test_04_concurrent_snapshots_create_volume(self):
    'Test while parent concurrent snapshot job in progress,create volume\n            from completed snapshot\n\n            1.Configure the concurrent.snapshots.threshold.perhost=3\n            2.Deploy a Linux VM using default CentOS template, use small\n            service offering, disk offering.\n            3.Perform snapshot on root disk of this newly created VM\n            4.while parent concurrent snapshot job in progress,create volume\n            from completed snapshot'
    self.debug('Create virtual machine and snapshot on ROOT disk thread')
    self.create_Snapshot_VM()
    self.debug('Verify whether snapshots were created properly or not?')
    self.verify_Snapshots()
    self.debug(('Fetch the list of snapshots belong to account: %s' % self.account.name))
    snapshots = self.get_Snapshots_For_Account(self.account.name, self.account.domainid)
    jobs = []
    for snapshot in snapshots:
        self.debug(('Create a volume from snapshot: %s' % snapshot.name))
        jobs.append(self.create_Volume_from_Snapshot(snapshot))
    self.testClient.submitCmdsAndWait(jobs)
    self.debug('Verifying if volume created properly or not?')
    volumes = Volume.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True, type='ROOT')
    self.assertNotEqual(volumes, None, 'Check if result exists in list item call')
    for volume in volumes:
        self.debug(('Volume: %s, state: %s' % (volume.name, volume.state)))
        self.assertEqual(volume.state, 'Ready', 'Check new volume state in list volumes call')
    self.debug('Test completed successfully.')
    return
