{
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug("Snapshot scheduler.poll is being called at " + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug("Got " + snapshotsToBeExecuted.size() + " snapshots to be executed at "+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume.getPoolId() == null) {
      continue;
    }
    if (_snapshotPolicyDao.findById(policyId) == null) {
      _snapshotScheduleDao.remove(snapshotToBeExecuted.getId());
    }
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug("Scheduling 1 snapshot for volume " + volumeId + " for schedule id: "+ snapshotToBeExecuted.getId()+ " at "+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      Long eventId=EventUtils.saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SNAPSHOT_CREATE,"creating snapshot for volume Id:" + volumeId,0);
      Map<String,String> params=new HashMap<String,String>();
      params.put("volumeid","" + volumeId);
      params.put("policyid","" + policyId);
      params.put("ctxUserId","1");
      params.put("ctxAccountId","1");
      params.put("ctxStartEventId",String.valueOf(eventId));
      CreateSnapshotCmd cmd=new CreateSnapshotCmd();
      ApiDispatcher.getInstance().dispatchCreateCmd(cmd,params);
      params.put("id","" + cmd.getEntityId());
      params.put("ctxStartEventId","1");
      AsyncJobVO job=new AsyncJobVO();
      job.setUserId(userId);
      job.setAccountId(1L);
      job.setCmd(CreateSnapshotCmd.class.getName());
      job.setInstanceId(cmd.getEntityId());
      job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
      long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
 catch (    Exception e) {
      s_logger.debug("Scheduling snapshot failed due to " + e.toString(),e);
    }
 finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}
