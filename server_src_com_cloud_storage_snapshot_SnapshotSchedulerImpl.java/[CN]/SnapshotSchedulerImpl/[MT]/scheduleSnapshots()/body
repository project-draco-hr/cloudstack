{
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug("Snapshot scheduler.poll is being called at " + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug("Got " + snapshotsToBeExecuted.size() + " snapshots to be executed at "+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug("Scheduling 1 snapshot for volume " + volumeId + " for schedule id: "+ snapshotToBeExecuted.getId()+ " at "+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquire(snapshotScheId);
      long jobId=_snapshotManager.createSnapshotAsync(userId,volumeId,policyId);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
  finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.release(snapshotScheId);
      }
    }
  }
}
