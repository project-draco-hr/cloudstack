{
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug("Snapshot scheduler.poll is being called at " + displayTime);
  final List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug("Got " + snapshotsToBeExecuted.size() + " snapshots to be executed at "+ displayTime);
  for (  final SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    final long snapshotScheId=snapshotToBeExecuted.getId();
    final long policyId=snapshotToBeExecuted.getPolicyId();
    final long volumeId=snapshotToBeExecuted.getVolumeId();
    try {
      final VolumeVO volume=_volsDao.findById(volumeId);
      if (volume.getPoolId() == null) {
        continue;
      }
      Account volAcct=_acctDao.findById(volume.getAccountId());
      if (volAcct == null || volAcct.getState() == Account.State.disabled) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Skip snapshot for volume " + volume.getUuid() + " since its account has been removed or disabled");
        }
        continue;
      }
      if (_snapshotPolicyDao.findById(policyId) == null) {
        _snapshotScheduleDao.remove(snapshotToBeExecuted.getId());
      }
      if (s_logger.isDebugEnabled()) {
        final Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
        displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
        s_logger.debug("Scheduling 1 snapshot for volume " + volumeId + " for schedule id: "+ snapshotToBeExecuted.getId()+ " at "+ displayTime);
      }
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      final Long eventId=ActionEventUtils.onScheduledActionEvent(User.UID_SYSTEM,volume.getAccountId(),EventTypes.EVENT_SNAPSHOT_CREATE,"creating snapshot for volume Id:" + volumeId,true,0);
      final Map<String,String> params=new HashMap<String,String>();
      params.put(ApiConstants.VOLUME_ID,"" + volumeId);
      params.put(ApiConstants.POLICY_ID,"" + policyId);
      params.put("ctxUserId","1");
      params.put("ctxAccountId","" + volume.getAccountId());
      params.put("ctxStartEventId",String.valueOf(eventId));
      final CreateSnapshotCmd cmd=new CreateSnapshotCmd();
      ComponentContext.inject(cmd);
      _dispatcher.dispatchCreateCmd(cmd,params);
      params.put("id","" + cmd.getEntityId());
      params.put("ctxStartEventId","1");
      AsyncJobVO job=new AsyncJobVO("",User.UID_SYSTEM,volume.getAccountId(),CreateSnapshotCmd.class.getName(),ApiGsonHelper.getBuilder().create().toJson(params),cmd.getEntityId(),cmd.getInstanceType() != null ? cmd.getInstanceType().toString() : null,null);
      job.setDispatcher(_asyncDispatcher.getName());
      final long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
 catch (    final Exception e) {
      s_logger.warn("Scheduling snapshot failed due to " + e.toString());
    }
 finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}
