{
  List<? extends VirtualMachineTemplate> templates=_mgr.listTemplates(this);
  TemplateFilter templateFilterObj;
  try {
    templateFilterObj=TemplateFilter.valueOf(templateFilter);
  }
 catch (  IllegalArgumentException e) {
    templateFilterObj=TemplateFilter.selfexecutable;
  }
  boolean isAdmin=false;
  boolean isAccountSpecific=true;
  Account account=UserContext.current().getAccount();
  if ((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    isAdmin=true;
    if ((accountName == null) || (domainId == null)) {
      isAccountSpecific=false;
    }
  }
  boolean onlyReady=(templateFilterObj == TemplateFilter.featured) || (templateFilterObj == TemplateFilter.selfexecutable) || (templateFilterObj == TemplateFilter.sharedexecutable)|| (templateFilterObj == TemplateFilter.executable && isAccountSpecific)|| (templateFilterObj == TemplateFilter.community);
  boolean showDomr=(templateFilterObj != TemplateFilter.selfexecutable);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  VirtualMachineTemplate template : templates) {
    if (!showDomr && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      continue;
    }
    _responseGenerator.createTemplateResponse(templateResponses,template,onlyReady,zoneId,isAdmin,account);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getName());
  this.setResponseObject(response);
}
