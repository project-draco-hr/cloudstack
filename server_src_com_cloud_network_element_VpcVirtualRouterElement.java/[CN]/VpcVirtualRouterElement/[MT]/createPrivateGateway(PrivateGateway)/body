{
  if (gateway.getType() != VpcGateway.Type.Private) {
    logger.warn("Type of vpc gateway is not " + VpcGateway.Type.Private);
    return false;
  }
  final List<DomainRouterVO> routers=_vpcRouterMgr.getVpcRouters(gateway.getVpcId());
  if (routers == null || routers.isEmpty()) {
    logger.debug(getName() + " element doesn't need to create Private gateway on the backend; VPC virtual " + "router doesn't exist in the vpc id="+ gateway.getVpcId());
    return true;
  }
  logger.info("Adding VPC routers to Guest Network: " + routers.size() + " to be added!");
  final DataCenterVO dcVO=_dcDao.findById(gateway.getZoneId());
  final NetworkTopology networkTopology=networkTopologyContext.retrieveNetworkTopology(dcVO);
  for (  final DomainRouterVO domainRouterVO : routers) {
    if (networkTopology.setupPrivateGateway(gateway,domainRouterVO)) {
      try {
        final List<NetworkACLItemVO> rules=_networkACLItemDao.listByACL(gateway.getNetworkACLId());
        if (!applyACLItemsToPrivateGw(gateway,rules)) {
          logger.debug("Failed to apply network acl id  " + gateway.getNetworkACLId() + "  on gateway ");
          return false;
        }
      }
 catch (      final Exception ex) {
        logger.debug("Failed to apply network acl id  " + gateway.getNetworkACLId() + "  on gateway ");
        return false;
      }
    }
 else {
      logger.debug("Failed to setup private gateway  " + gateway);
      return false;
    }
  }
  return true;
}
