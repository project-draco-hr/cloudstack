{
  Long accountId=null;
  List<HostVO> hosts=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null) {
    throw new InvalidParameterValueException("Unable to find cluster by id " + clusterId);
  }
 else {
    DedicatedResourceVO dedicatedCluster=_dedicatedDao.findByClusterId(clusterId);
    DedicatedResourceVO dedicatedPodOfCluster=_dedicatedDao.findByPodId(cluster.getPodId());
    DedicatedResourceVO dedicatedZoneOfCluster=_dedicatedDao.findByZoneId(cluster.getDataCenterId());
    if (dedicatedCluster != null) {
      s_logger.error("Cluster " + cluster.getName() + " is already dedicated");
      throw new CloudRuntimeException("Cluster " + cluster.getName() + " is already dedicated");
    }
    if (dedicatedPodOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedPodOfCluster.getDomainId()).contains(domainId);
      if (dedicatedPodOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedPodOfCluster.getDomainId() == domainId || domainIdInChildreanList))) {
        s_logger.error("Cannot dedicate Cluster. Its Pod is already dedicated");
        HostPodVO pod=_podDao.findById(cluster.getPodId());
        throw new CloudRuntimeException("Cluster's Pod " + pod.getName() + " is already dedicated");
      }
    }
    if (dedicatedZoneOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfCluster.getDomainId()).contains(domainId);
      if (dedicatedZoneOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfCluster.getDomainId() == domainId || domainIdInChildreanList))) {
        s_logger.error("Cannot dedicate Cluster. Its zone is already dedicated");
        DataCenterVO zone=_zoneDao.findById(cluster.getDataCenterId());
        throw new CloudRuntimeException("Cluster's Zone " + zone.getName() + " is already dedicated");
      }
    }
    hosts=_hostDao.findByClusterId(cluster.getId());
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(childDomainIds.contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException("Host " + host.getName() + " under this Cluster "+ cluster.getName()+ " is dedicated to different account/domain");
        }
        if (accountId != null) {
          if (dHost.getAccountId() == accountId) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error("Cannot dedicate Cluster " + cluster.getName() + " to account"+ accountName);
            throw new CloudRuntimeException("Cannot dedicate Cluster " + cluster.getName() + " to account"+ accountName);
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId() == domainId) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,null,clusterId,null,null,null);
  try {
    dedicatedResource.setDomainId(domainId);
    if (accountId != null) {
      dedicatedResource.setAccountId(accountId);
    }
    dedicatedResource=_dedicatedDao.persist(dedicatedResource);
  }
 catch (  Exception e) {
    s_logger.error("Unable to dedicate host due to " + e.getMessage(),e);
    throw new CloudRuntimeException("Failed to dedicate cluster. Please contact Cloud Support.");
  }
  txn.commit();
  List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
  result.add(dedicatedResource);
  return result;
}
