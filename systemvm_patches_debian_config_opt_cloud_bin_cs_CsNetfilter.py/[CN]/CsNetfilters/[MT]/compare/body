def compare(self, list):
    ' Compare reality with what is needed '
    for fw in list:
        new_rule = CsNetfilter()
        new_rule.parse(fw[2])
        new_rule.set_table(fw[0])
        self.add_chain(new_rule)
    ruleSet = set()
    for fw in list:
        tupledFw = tuple(fw)
        if (tupledFw in ruleSet):
            logging.debug('Already processed : %s', tupledFw)
            continue
        new_rule = CsNetfilter()
        new_rule.parse(fw[2])
        new_rule.set_table(fw[0])
        if isinstance(fw[1], int):
            new_rule.set_count(fw[1])
        rule_chain = new_rule.get_chain()
        logging.debug('Checking if the rule already exists: rule=%s table=%s chain=%s', new_rule.get_rule(), new_rule.get_table(), new_rule.get_chain())
        if self.has_rule(new_rule):
            logging.debug('Exists: rule=%s table=%s', fw[2], new_rule.get_table())
        else:
            logging.info('Add: rule=%s table=%s', fw[2], new_rule.get_table())
            cpy = fw[2]
            if (fw[1] == 'front'):
                cpy = cpy.replace('-A', '-I')
            if isinstance(fw[1], int):
                if rule_chain.startswith('ACL_INBOUND'):
                    rule_count = self.chain.get_count(rule_chain)
                    cpy = cpy.replace(('-A %s' % new_rule.get_chain()), ('-I %s %s' % (new_rule.get_chain(), rule_count)))
                else:
                    cpy = cpy.replace(('-A %s' % new_rule.get_chain()), ('-I %s %s' % (new_rule.get_chain(), fw[1])))
            CsHelper.execute(('iptables -t %s %s' % (new_rule.get_table(), cpy)))
            ruleSet.add(tupledFw)
            self.chain.add_rule(rule_chain)
    self.del_standard()
    self.get_unseen()
