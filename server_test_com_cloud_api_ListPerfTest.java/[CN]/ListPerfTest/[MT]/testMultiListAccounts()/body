{
  login("demo","password");
  final HashMap<String,String> params=new HashMap<String,String>();
  params.put("response","json");
  params.put("listAll","true");
  params.put("sessionkey",sessionKey);
  int clientCount=26;
  Runnable[] clients=new Runnable[clientCount];
  final boolean[] isUsable=new boolean[clientCount];
  final CountDownLatch startGate=new CountDownLatch(1);
  final CountDownLatch endGate=new CountDownLatch(clientCount);
  for (int i=0; i < isUsable.length; ++i) {
    final int j=i;
    clients[j]=new Runnable(){
      /** 
 * {@inheritDoc}
 */
      @Override public void run(){
        try {
          startGate.await();
          sendRequest("listAccounts",params);
          isUsable[j]=true;
        }
 catch (        CloudRuntimeException e) {
          isUsable[j]=false;
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
 finally {
          endGate.countDown();
        }
      }
    }
;
  }
  ExecutorService executor=Executors.newFixedThreadPool(clientCount);
  for (  Runnable runnable : clients) {
    executor.execute(runnable);
  }
  startGate.countDown();
  endGate.await();
  int rejectCount=0;
  for (int i=0; i < isUsable.length; ++i) {
    if (!isUsable[i])     rejectCount++;
  }
  assertEquals("Only one request should be rejected!",1,rejectCount);
}
