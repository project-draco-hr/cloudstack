{
  boolean filesrcreated=false;
  if (prevBackupUuid == null) {
    prevBackupUuid="";
  }
  SR ssSR=null;
  String remoteDir=secondaryStorageMountPath;
  try {
    ssSR=createFileSr(conn,remoteDir,path);
    filesrcreated=true;
    VDI snapshotvdi=VDI.getByUuid(conn,snapshotUuid);
    if (wait == 0) {
      wait=2 * 60 * 60;
    }
    VDI dvdi=null;
    Task task=null;
    try {
      VDI previousSnapshotVdi=null;
      if (prevSnapshotUuid != null) {
        previousSnapshotVdi=VDI.getByUuid(conn,prevSnapshotUuid);
      }
      task=snapshotvdi.copyAsync(conn,ssSR,previousSnapshotVdi,null);
      hypervisorResource.waitForTask(conn,task,1000,wait * 1000);
      hypervisorResource.checkForSuccess(conn,task);
      dvdi=Types.toVDI(task,conn);
    }
  finally {
      if (task != null) {
        try {
          task.destroy(conn);
        }
 catch (        Exception e) {
          s_logger.warn("unable to destroy task(" + task.toWireString() + ") due to "+ e.toString());
        }
      }
    }
    String result=dvdi.getUuid(conn).concat("#").concat(dvdi.getPhysicalUtilisation(conn).toString());
    return result;
  }
 catch (  Exception e) {
    String msg="Exception in backupsnapshot stage due to " + e.toString();
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg,e);
  }
 finally {
    try {
      if (filesrcreated && ssSR != null) {
        hypervisorResource.removeSR(conn,ssSR);
      }
    }
 catch (    Exception e) {
      s_logger.debug("Exception in backupsnapshot cleanup stage due to " + e.toString());
    }
  }
}
