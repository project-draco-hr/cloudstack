{
  Connection conn=hypervisorResource.getConnection();
  SnapshotObjectTO snapshotObjTO=(SnapshotObjectTO)cmd.getSrcTO();
  TemplateObjectTO templateObjTO=(TemplateObjectTO)cmd.getDestTO();
  if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {
    return null;
  }
  NfsTO destStore=null;
  URI destUri=null;
  try {
    destStore=(NfsTO)templateObjTO.getDataStore();
    destUri=new URI(destStore.getUrl());
  }
 catch (  Exception ex) {
    s_logger.debug("Invalid URI",ex);
    return new CopyCmdAnswer("Invalid URI: " + ex.toString());
  }
  SR srcSr=null;
  SR destSr=null;
  String destDir=templateObjTO.getPath();
  VDI destVdi=null;
  boolean result=false;
  try {
    Map<String,String> srcDetails=cmd.getOptions();
    String iScsiName=srcDetails.get(DiskTO.IQN);
    String storageHost=srcDetails.get(DiskTO.STORAGE_HOST);
    String chapInitiatorUsername=srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);
    String chapInitiatorSecret=srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);
    srcSr=hypervisorResource.getIscsiSR(conn,iScsiName,storageHost,iScsiName,chapInitiatorUsername,chapInitiatorSecret,true);
    String destNfsPath=destUri.getHost() + ":" + destUri.getPath();
    String localDir="/var/cloud_mount/" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());
    mountNfs(conn,destNfsPath,localDir);
    makeDirectory(conn,localDir + "/" + destDir);
    destSr=createFileSR(conn,localDir + "/" + destDir);
    VDI srcVdi=srcSr.getVDIs(conn).iterator().next();
    destVdi=srcVdi.copy(conn,destSr);
    String nameLabel="cloud-" + UUID.randomUUID().toString();
    destVdi.setNameLabel(conn,nameLabel);
    destSr.scan(conn);
    String templateUuid=destVdi.getUuid(conn);
    String templateFilename=templateUuid + ".vhd";
    long virtualSize=destVdi.getVirtualSize(conn);
    long physicalSize=destVdi.getPhysicalUtilisation(conn);
    String templatePath=destNfsPath + "/" + destDir;
    templatePath=templatePath.replaceAll("//","/");
    result=hypervisorResource.postCreatePrivateTemplate(conn,templatePath,templateFilename,templateUuid,nameLabel,null,physicalSize,virtualSize,templateObjTO.getId());
    if (!result) {
      throw new CloudRuntimeException("Could not create the template.properties file on secondary storage dir");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(destDir + "/" + templateFilename);
    newTemplate.setFormat(Storage.ImageFormat.VHD);
    newTemplate.setHypervisorType(HypervisorType.XenServer);
    newTemplate.setSize(virtualSize);
    newTemplate.setPhysicalSize(physicalSize);
    newTemplate.setName(templateUuid);
    result=true;
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  BadServerResponse e) {
    s_logger.error("Failed to create a template from a snapshot due to incomprehensible server response",e);
    return new CopyCmdAnswer("Failed to create a template from a snapshot: " + e.toString());
  }
catch (  XenAPIException e) {
    s_logger.error("Failed to create a template from a snapshot due to xenapi error",e);
    return new CopyCmdAnswer("Failed to create a template from a snapshot: " + e.toString());
  }
catch (  XmlRpcException e) {
    s_logger.error("Failed to create a template from a snapshot due to rpc error",e);
    return new CopyCmdAnswer("Failed to create a template from a snapshot: " + e.toString());
  }
 finally {
    if (!result) {
      if (destVdi != null) {
        try {
          destVdi.destroy(conn);
        }
 catch (        Exception e) {
          s_logger.debug("Cleaned up leftover VDI on destination storage due to failure: ",e);
        }
      }
    }
    if (srcSr != null) {
      hypervisorResource.removeSR(conn,srcSr);
    }
    if (destSr != null) {
      hypervisorResource.removeSR(conn,destSr);
    }
  }
}
