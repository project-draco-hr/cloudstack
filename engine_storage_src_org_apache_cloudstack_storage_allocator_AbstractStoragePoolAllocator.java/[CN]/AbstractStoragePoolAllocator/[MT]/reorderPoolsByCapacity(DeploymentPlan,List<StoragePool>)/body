{
  Long clusterId=plan.getClusterId();
  short capacityType;
  if (pools != null && pools.size() != 0) {
    capacityType=pools.get(0).getPoolType().isShared() == true ? Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED : Capacity.CAPACITY_TYPE_LOCAL_STORAGE;
  }
 else {
    return null;
  }
  List<Long> poolIdsByCapacity=_capacityDao.orderHostsByFreeCapacity(clusterId,capacityType);
  if (logger.isDebugEnabled()) {
    logger.debug("List of pools in descending order of free capacity: " + poolIdsByCapacity);
  }
  Map<Long,StoragePool> poolMap=new HashMap<Long,StoragePool>();
  for (  StoragePool pool : pools) {
    poolMap.put(pool.getId(),pool);
  }
  List<Long> matchingPoolIds=new ArrayList<Long>(poolMap.keySet());
  poolIdsByCapacity.retainAll(matchingPoolIds);
  List<StoragePool> reorderedPools=new ArrayList<StoragePool>();
  for (  Long id : poolIdsByCapacity) {
    reorderedPools.add(poolMap.get(id));
  }
  return reorderedPools;
}
