def addBridge(self, brName, dev):
    bash(('ifdown %s' % dev.name))
    if (not os.path.exists(self.brCfgFile)):
        shutil.copy(self.devCfgFile, self.brCfgFile)
    cfo = configFileOps(self.devCfgFile, self)
    cfo.addEntry('NM_CONTROLLED', 'no')
    cfo.addEntry('ONBOOT', 'yes')
    if (self.syscfg.env.bridgeType == 'openvswitch'):
        if cfo.getEntry('IPADDR'):
            cfo.rmEntry('IPADDR', cfo.getEntry('IPADDR'))
        cfo.addEntry('DEVICETYPE', 'ovs')
        cfo.addEntry('TYPE', 'OVSPort')
        cfo.addEntry('OVS_BRIDGE', brName)
    elif (self.syscfg.env.bridgeType == 'native'):
        cfo.addEntry('BRIDGE', brName)
    else:
        raise CloudInternalException(('Unknown network.bridge.type %s' % self.syscfg.env.bridgeType))
    cfo.save()
    cfo = configFileOps(self.brCfgFile, self)
    cfo.addEntry('NM_CONTROLLED', 'no')
    cfo.addEntry('ONBOOT', 'yes')
    cfo.addEntry('DEVICE', brName)
    if (self.syscfg.env.bridgeType == 'openvswitch'):
        if cfo.getEntry('HWADDR'):
            cfo.rmEntry('HWADDR', cfo.getEntry('HWADDR'))
        if cfo.getEntry('UUID'):
            cfo.rmEntry('UUID', cfo.getEntry('UUID'))
        cfo.addEntry('STP', 'yes')
        cfo.addEntry('DEVICETYPE', 'ovs')
        cfo.addEntry('TYPE', 'OVSBridge')
    elif (self.syscfg.env.bridgeType == 'native'):
        cfo.addEntry('TYPE', 'Bridge')
    else:
        raise CloudInternalException(('Unknown network.bridge.type %s' % self.syscfg.env.bridgeType))
    cfo.save()
