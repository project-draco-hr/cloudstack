@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_07_extend_vlan_range(self):
    'Dedicate vlan range to an account when some vlan in range are already acquired by same account\n\n        # Validate the following:\n        # 1. Create account under root domain\n        # 2. Add a new vlan range to the physical network\n        # 3. Create a guest network in account using the vlan id from the newly added range\n        # 4. Try to dedicate the vlan range to account\n        # 5. Operation should succeed\n        '
    self.account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    vlans = str(self.free_vlan['partial_range'][0]).split('-')
    startid = int(vlans[0])
    endid = int(vlans[1])
    vlan_range1 = ((str(startid) + '-') + str(endid))
    vlan_range2 = ((str((endid + 1)) + '-') + str((endid + 2)))
    full_range = ((str(startid) + '-') + str((endid + 2)))
    new_vlan = ((self.physical_network.vlan + ',') + full_range)
    self.physical_network.update(self.apiclient, id=self.physical_network.id, vlan=new_vlan)
    PhysicalNetwork.dedicate(self.apiclient, vlan_range1, physicalnetworkid=self.physical_network.id, account=self.account.name, domainid=self.account.domainid)
    PhysicalNetwork.dedicate(self.apiclient, vlan_range2, physicalnetworkid=self.physical_network.id, account=self.account.name, domainid=self.account.domainid)
    dedicated_ranges = PhysicalNetwork.listDedicated(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(str(dedicated_ranges[0].guestvlanrange), full_range, 'Dedicated vlan                         range not matching with expcted extended range')
    return
