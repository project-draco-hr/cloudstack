@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_03_multiple_guest_netwoks(self):
    'Dedicate multiple guest networks in account with dedicated vlan range\n\n        # Validate the following:\n        # 1. Create account under user domain\n        # 2. Dedicate a new vlan range of range 2 to account\n        # 3. Verify that the new vlan range is dedicated to account\n             by listing the dedicated range and checking the account name\n        # 4. Create a guest network in the account\n        # 5. Verify that the vlan of the network is from dedicated range\n        # 6. Repeat steps 4 and 5 for network 2\n        # 7. Now create 3rd guest network in the account\n        # 8. Verify that the vlan of the network is not from the dedicated range, as\n             all the vlans in dedicated range are now exhausted\n        '
    self.user_domain = Domain.create(self.apiclient, services=self.testdata['domain'], parentdomainid=self.domain.id)
    self.cleanup.append(self.user_domain)
    self.account = Account.create(self.apiclient, self.testdata['account'], domainid=self.user_domain.id)
    self.cleanup.insert((-1), self.account)
    self.free_vlan['partial_range'][0] = LimitVlanRange(self, self.free_vlan['partial_range'][0], range=2)
    vlan_startid = int(str(self.free_vlan['partial_range'][0]).split('-')[0])
    vlan_endid = (vlan_startid + 1)
    new_vlan = ((self.physical_network.vlan + ',') + self.free_vlan['partial_range'][0])
    self.physical_network.update(self.apiclient, id=self.physical_network.id, vlan=new_vlan)
    dedicate_guest_vlan_range_response = PhysicalNetwork.dedicate(self.apiclient, self.free_vlan['partial_range'][0], physicalnetworkid=self.physical_network.id, account=self.account.name, domainid=self.account.domainid)
    list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient, id=dedicate_guest_vlan_range_response.id)
    dedicated_guest_vlan_response = list_dedicated_guest_vlan_range_response[0]
    self.assertEqual(dedicated_guest_vlan_response.account, self.account.name, 'Check account name is in listDedicatedGuestVlanRanges as the account the range is dedicated to')
    isolated_network1 = Network.create(self.apiclient, self.testdata['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    networks = Network.list(self.apiclient, id=isolated_network1.id, listall=True)
    self.assertEqual(validateList(networks)[0], PASS, 'networks list validation failed')
    self.assertTrue((vlan_startid <= int(networks[0].vlan) <= vlan_endid), 'Vlan of the network should be from the dedicated range')
    isolated_network2 = Network.create(self.apiclient, self.testdata['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    networks = Network.list(self.apiclient, id=isolated_network2.id, listall=True)
    self.assertEqual(validateList(networks)[0], PASS, 'networks list validation failed')
    self.assertTrue((vlan_startid <= int(networks[0].vlan) <= vlan_endid), 'Vlan of the network should be from the dedicated range')
    isolated_network3 = Network.create(self.apiclient, self.testdata['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    networks = Network.list(self.apiclient, id=isolated_network3.id, listall=True)
    self.assertEqual(validateList(networks)[0], PASS, 'networks list validation failed')
    self.assertFalse((vlan_startid <= int(networks[0].vlan) <= vlan_endid), 'Vlan of the network should not be from the dedicated range')
    return
