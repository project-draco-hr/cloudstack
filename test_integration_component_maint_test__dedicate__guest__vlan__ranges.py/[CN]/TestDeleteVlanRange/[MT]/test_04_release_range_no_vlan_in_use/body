@attr(tags=['advanced', 'selfservice'], required_hardware='false')
def test_04_release_range_no_vlan_in_use(self):
    'Release a dedicated vlan range when no vlan id is in use\n\n        # Validate the following:\n        # 1. Create account in root domain\n        # 2. Dedicate a new vlan range to account\n        # 3. Verify that the new vlan range is dedicated to account\n             by listing the dedicated range and checking the account name\n        # 4. Release the range\n        # 5. Verify the range is released back to system by listing dedicated ranges (list should be empty)\n        '
    self.account1 = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.cleanup.append(self.account1)
    new_vlan = ((self.physical_network.vlan + ',') + self.free_vlan['partial_range'][0])
    self.physical_network.update(self.apiclient, id=self.physical_network.id, vlan=new_vlan)
    dedicate_guest_vlan_range_response = PhysicalNetwork.dedicate(self.apiclient, self.free_vlan['partial_range'][0], physicalnetworkid=self.physical_network.id, account=self.account1.name, domainid=self.account1.domainid)
    list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient, id=dedicate_guest_vlan_range_response.id)
    dedicated_guest_vlan_response = list_dedicated_guest_vlan_range_response[0]
    self.assertEqual(dedicated_guest_vlan_response.account, self.account1.name, 'Check account name is in listDedicatedGuestVlanRanges as the account the range is dedicated to')
    self.debug('Releasing guest vlan range')
    dedicate_guest_vlan_range_response.release(self.apiclient)
    list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient)
    self.assertEqual(list_dedicated_guest_vlan_range_response, None, 'Check vlan range is not available in listDedicatedGuestVlanRanges')
    return
