@attr(tags=['advanced', 'advancedns', 'simulator'], required_hardware='false')
def test_01_project_vmlifecycle_start_stop_instance(self):
    self.debug(('Checking memory resource count for project: %s' % self.project.name))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.debug(project_list)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count = project_list[0].memorytotal
    self.debug(resource_count)
    self.debug(('Stopping instance: %s' % self.vm.name))
    try:
        self.vm.stop(self.apiclient)
    except Exception as e:
        self.fail(('Failed to stop instance: %s' % e))
    self.debug(('Checking memory resource count for project: %s' % self.project.name))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count_after_stop = project_list[0].memorytotal
    self.assertEqual(resource_count, resource_count_after_stop, 'Resource count should be same after stopping the instance')
    self.debug(('Starting instance: %s' % self.vm.name))
    try:
        self.vm.start(self.apiclient)
    except Exception as e:
        self.fail(('Failed to start instance: %s' % e))
    self.debug(('Checking memory resource count for project: %s' % self.project.name))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count_after_start = project_list[0].memorytotal
    self.assertEqual(resource_count, resource_count_after_start, 'Resource count should be same after starting the instance')
    return
