{
  Properties preProcessedCommands=new Properties();
  Enumeration command=null;
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-f")) {
      fileNames=iter.next().split(",");
    }
    if (arg.equals("-d")) {
      dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    s_logger.error("Please specify input file(s) separated by coma using -f option");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try {
      FileInputStream in=new FileInputStream(fileName);
      preProcessedCommands.load(in);
    }
 catch (    FileNotFoundException ex) {
      s_logger.error("Can't find file " + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      s_logger.error("Error reading from file " + ex1);
      System.exit(2);
    }
  }
  for (  Object key : preProcessedCommands.keySet()) {
    String preProcessedCommand=preProcessedCommands.getProperty((String)key);
    String[] commandParts=preProcessedCommand.split(";");
    api_commands.put(key,commandParts[0]);
  }
  command=api_commands.propertyNames();
  try {
    XStream xs=new XStream();
    xs.alias("command",Command.class);
    xs.alias("arg",Argument.class);
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + "commands.xml"),"commands");
    while (command.hasMoreElements()) {
      String key=(String)command.nextElement();
      Class clas=Class.forName(api_commands.getProperty(key));
      ArrayList<Argument> request=new ArrayList<Argument>();
      ArrayList<Argument> response=new ArrayList<Argument>();
      Command apiCommand=new Command();
      apiCommand.setName(key);
      Implementation impl=(Implementation)clas.getAnnotation(Implementation.class);
      if (impl == null)       impl=(Implementation)clas.getSuperclass().getAnnotation(Implementation.class);
      String commandDescription=impl.description();
      if (commandDescription != null)       apiCommand.setDescription(commandDescription);
      Field[] fields=clas.getDeclaredFields();
      Class<?> superClass=clas.getSuperclass();
      while (BaseCmd.class.isAssignableFrom(superClass) && !superClass.getName().equals(BaseCmd.class.getName())) {
        Field[] superClassFields=superClass.getDeclaredFields();
        if (superClassFields != null) {
          Field[] tmpFields=new Field[fields.length + superClassFields.length];
          System.arraycopy(fields,0,tmpFields,0,fields.length);
          System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
          fields=tmpFields;
        }
        superClass=superClass.getSuperclass();
      }
      for (      Field f : fields) {
        Parameter parameterAnnotation=f.getAnnotation(Parameter.class);
        if (parameterAnnotation != null) {
          Argument reqArg=new Argument(parameterAnnotation.name());
          reqArg.setRequired(parameterAnnotation.required());
          if (!parameterAnnotation.description().isEmpty())           reqArg.setDescription(parameterAnnotation.description());
          request.add(reqArg);
        }
      }
      Method getResponseMethod=clas.getMethod("getResponse");
      Class responseClas=(Class)getResponseMethod.getReturnType();
      Type returnType=getResponseMethod.getGenericReturnType();
      if (returnType != null && returnType instanceof ParameterizedType) {
        ParameterizedType type=(ParameterizedType)returnType;
        Type[] typeArguments=type.getActualTypeArguments();
        responseClas=(Class)typeArguments[0];
      }
      Field[] responseFields=responseClas.getDeclaredFields();
      for (      Field responseField : responseFields) {
        SerializedName nameAnnotation=responseField.getAnnotation(SerializedName.class);
        Param descAnnotation=responseField.getAnnotation(Param.class);
        Argument respArg=new Argument(nameAnnotation.value());
        if (descAnnotation != null)         respArg.setDescription(descAnnotation.description());
        response.add(respArg);
      }
      apiCommand.setRequest(request);
      apiCommand.setResponse(response);
      out.writeObject(apiCommand);
    }
    out.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}
