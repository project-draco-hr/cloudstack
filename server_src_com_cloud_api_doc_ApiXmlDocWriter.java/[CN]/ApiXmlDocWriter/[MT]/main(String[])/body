{
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{"org.apache.cloudstack.api","com.cloud.api","com.cloud.api.commands","com.globo.globodns.cloudstack.api","org.apache.cloudstack.network.opendaylight.api","com.cloud.api.commands.netapp","org.apache.cloudstack.api.command.admin.zone","org.apache.cloudstack.network.contrail.api.command"});
  for (  Class<?> cmdClass : cmdClasses) {
    if (cmdClass.getAnnotation(APICommand.class) == null) {
      System.out.println("Warning, API Cmd class " + cmdClass.getName() + " has no APICommand annotation ");
      continue;
    }
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      Class<?> curCmd=s_apiNameCmdClassMap.get(apiName);
      if (curCmd.isAssignableFrom(cmdClass)) {
        s_apiNameCmdClassMap.put(apiName,cmdClass);
      }
 else       if (cmdClass.isAssignableFrom(curCmd)) {
        continue;
      }
 else {
        System.out.println("Warning, API Cmd class " + cmdClass.getName() + " has non-unique apiname "+ apiName);
        continue;
      }
    }
 else {
      s_apiNameCmdClassMap.put(apiName,cmdClass);
    }
  }
  System.out.printf("Scanned and found %d APIs\n",s_apiNameCmdClassMap.size());
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-d")) {
      s_dirName=iter.next();
    }
  }
  for (  Map.Entry<String,Class<?>> entry : s_apiNameCmdClassMap.entrySet()) {
    Class<?> cls=entry.getValue();
    s_allApiCommands.put(entry.getKey(),cls.getName());
  }
  s_allApiCommandsSorted.putAll(s_allApiCommands);
  try {
    XStream xs=new XStream();
    xs.alias("command",Command.class);
    xs.alias("arg",Argument.class);
    String xmlDocDir=s_dirName + "/xmldoc";
    String rootAdminDirName=xmlDocDir + "/apis";
    (new File(rootAdminDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(s_dirName + "/commands.xml"),"commands");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "apiSummary.xml"),"commands");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "apiSummarySorted.xml"),"commands");
    Iterator<?> it=s_allApiCommands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(out,key);
      writeCommand(rootAdmin,key);
      ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + key+ ".xml"),"command");
      writeCommand(singleRootAdminCommandOs,key);
      singleRootAdminCommandOs.close();
    }
    it=s_allApiCommandsSorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(rootAdminSorted,key);
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}
