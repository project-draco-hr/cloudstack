{
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-f")) {
      fileNames=iter.next().split(",");
    }
    if (arg.equals("-d")) {
      dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println("Please specify input file(s) separated by coma using -f option");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try {
      FileInputStream in=new FileInputStream(fileName);
      preProcessedCommands.load(in);
    }
 catch (    FileNotFoundException ex) {
      System.out.println("Can't find file " + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println("Error reading from file " + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    String[] commandParts=preProcessedCommand.split(";");
    String commandName=commandParts[0];
    all_api_commands.put(key,commandName);
    short cmdPermissions=1;
    if (commandParts.length > 1 && commandParts[1] != null) {
      cmdPermissions=Short.parseShort(commandParts[1]);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      domain_admin_api_commands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      regular_user_api_commands.put(key,commandName);
    }
  }
  all_api_commands_sorted.putAll(all_api_commands);
  domain_admin_api_commands_sorted.putAll(domain_admin_api_commands);
  regular_user_api_commands_sorted.putAll(regular_user_api_commands);
  try {
    XStream xs=new XStream();
    xs.alias("command",Command.class);
    xs.alias("arg",Argument.class);
    String xmlDocDir=dirName + "/xmldoc";
    String rootAdminDirName=xmlDocDir + "/root_admin";
    String domainAdminDirName=xmlDocDir + "/domain_admin";
    String regularUserDirName=xmlDocDir + "/regular_user";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + "/commands.xml"),"commands");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "rootAdminSummary.xml"),"commands");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "rootAdminSummarySorted.xml"),"commands");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + "domainAdminSummary.xml"),"commands");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + "domainAdminSummarySorted.xml"),"commands");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/regularUserSummary.xml"),"commands");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/regularUserSummarySorted.xml"),"commands");
    Iterator<?> it=all_api_commands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(out,key);
      writeCommand(rootAdmin,key);
      ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + key+ ".xml"),"command");
      writeCommand(singleRootAdminCommandOs,key);
      singleRootAdminCommandOs.close();
      if (domain_admin_api_commands.containsKey(key)) {
        writeCommand(domainAdmin,key);
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + key+ ".xml"),"command");
        writeCommand(singleDomainAdminCommandOs,key);
        singleDomainAdminCommandOs.close();
      }
      if (regular_user_api_commands.containsKey(key)) {
        writeCommand(regularUser,key);
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/" + key+ ".xml"),"command");
        writeCommand(singleRegularUserCommandOs,key);
        singleRegularUserCommandOs.close();
      }
    }
    it=all_api_commands_sorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(rootAdminSorted,key);
      if (domain_admin_api_commands.containsKey(key)) {
        writeCommand(outDomainAdminSorted,key);
      }
      if (regular_user_api_commands.containsKey(key)) {
        writeCommand(regularUserSorted,key);
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}
