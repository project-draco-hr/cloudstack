{
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{"org.apache.cloudstack.api","com.cloud.api","com.cloud.api.commands","com.globo.globodns.cloudstack.api","org.apache.cloudstack.network.opendaylight.api","com.cloud.api.commands.netapp","org.apache.cloudstack.api.command.admin.zone","org.apache.cloudstack.network.contrail.api.command"});
  for (  Class<?> cmdClass : cmdClasses) {
    if (cmdClass.getAnnotation(APICommand.class) == null) {
      System.out.println("Warning, API Cmd class " + cmdClass.getName() + " has no APICommand annotation ");
      continue;
    }
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      Class<?> curCmd=s_apiNameCmdClassMap.get(apiName);
      if (curCmd.isAssignableFrom(cmdClass)) {
        s_apiNameCmdClassMap.put(apiName,cmdClass);
      }
 else       if (cmdClass.isAssignableFrom(curCmd)) {
        continue;
      }
 else {
        System.out.println("Warning, API Cmd class " + cmdClass.getName() + " has non-unique apiname "+ apiName);
        continue;
      }
    }
 else {
      s_apiNameCmdClassMap.put(apiName,cmdClass);
    }
  }
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-f")) {
      fileNames=iter.next().split(",");
    }
    if (arg.equals("-d")) {
      s_dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println("Please specify input file(s) separated by coma using -f option");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try (FileInputStream in=new FileInputStream(fileName)){
      preProcessedCommands.load(in);
    }
 catch (    FileNotFoundException ex) {
      System.out.println("Can't find file " + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println("Error reading from file " + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    int splitIndex=preProcessedCommand.lastIndexOf(";");
    String commandRoleMask=preProcessedCommand.substring(splitIndex + 1);
    Class<?> cmdClass=s_apiNameCmdClassMap.get(key);
    if (cmdClass == null) {
      System.out.println("Check, is this api part of another build profile? Null value for key: " + key + " preProcessedCommand="+ preProcessedCommand);
      continue;
    }
    String commandName=cmdClass.getName();
    s_allApiCommands.put(key,commandName);
    short cmdPermissions=1;
    if (commandRoleMask != null) {
      cmdPermissions=Short.parseShort(commandRoleMask);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      s_domainAdminApiCommands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      s_regularUserApiCommands.put(key,commandName);
    }
  }
  s_allApiCommandsSorted.putAll(s_allApiCommands);
  s_domainAdminApiCommandsSorted.putAll(s_domainAdminApiCommands);
  s_regularUserApiCommandsSorted.putAll(s_regularUserApiCommands);
  try {
    XStream xs=new XStream();
    xs.alias("command",Command.class);
    xs.alias("arg",Argument.class);
    String xmlDocDir=s_dirName + "/xmldoc";
    String rootAdminDirName=xmlDocDir + "/root_admin";
    String domainAdminDirName=xmlDocDir + "/domain_admin";
    String regularUserDirName=xmlDocDir + "/regular_user";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(s_dirName + "/commands.xml"),"commands");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "rootAdminSummary.xml"),"commands");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + "rootAdminSummarySorted.xml"),"commands");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + "domainAdminSummary.xml"),"commands");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + "domainAdminSummarySorted.xml"),"commands");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/regularUserSummary.xml"),"commands");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/regularUserSummarySorted.xml"),"commands");
    Iterator<?> it=s_allApiCommands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(out,key);
      writeCommand(rootAdmin,key);
      ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + "/" + key+ ".xml"),"command");
      writeCommand(singleRootAdminCommandOs,key);
      singleRootAdminCommandOs.close();
      if (s_domainAdminApiCommands.containsKey(key)) {
        writeCommand(domainAdmin,key);
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + "/" + key+ ".xml"),"command");
        writeCommand(singleDomainAdminCommandOs,key);
        singleDomainAdminCommandOs.close();
      }
      if (s_regularUserApiCommands.containsKey(key)) {
        writeCommand(regularUser,key);
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + "/" + key+ ".xml"),"command");
        writeCommand(singleRegularUserCommandOs,key);
        singleRegularUserCommandOs.close();
      }
    }
    it=s_allApiCommandsSorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      writeCommand(rootAdminSorted,key);
      if (s_domainAdminApiCommands.containsKey(key)) {
        writeCommand(outDomainAdminSorted,key);
      }
      if (s_regularUserApiCommands.containsKey(key)) {
        writeCommand(regularUserSorted,key);
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}
