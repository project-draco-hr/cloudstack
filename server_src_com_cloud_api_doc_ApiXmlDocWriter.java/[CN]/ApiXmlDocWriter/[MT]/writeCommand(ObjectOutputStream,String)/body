{
  Class<?> clas=Class.forName(all_api_commands.get(command));
  ArrayList<Argument> request=new ArrayList<Argument>();
  ArrayList<Argument> response=new ArrayList<Argument>();
  Command apiCommand=new Command();
  apiCommand.setName(command);
  Implementation impl=(Implementation)clas.getAnnotation(Implementation.class);
  if (impl == null)   impl=(Implementation)clas.getSuperclass().getAnnotation(Implementation.class);
  String commandDescription=impl.description();
  if (commandDescription != null)   apiCommand.setDescription(commandDescription);
 else   System.out.println("Command " + apiCommand.getName() + " misses description");
  Field[] fields=clas.getDeclaredFields();
  Class<?> superClass=clas.getSuperclass();
  String superName=superClass.getName();
  if (!superName.equals(BaseCmd.class.getName()) && !superName.equals(BaseAsyncCmd.class.getName()) && !superName.equals(BaseAsyncCreateCmd.class.getName())) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null && !superClass.getName().equals(BaseListCmd.class.getName())) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  request=setRequestFields(fields);
  if (superName.equals(BaseAsyncCmd.class.getName()) || superName.equals(BaseAsyncCreateCmd.class.getName())) {
    apiCommand.setAsync(true);
  }
 else {
    apiCommand.setAsync(false);
  }
  Class<?> responseClas=impl.responseObject();
  Field[] responseFields=responseClas.getDeclaredFields();
  response=setResponseFields(responseFields);
  apiCommand.setRequest(request);
  apiCommand.setResponse(response);
  out.writeObject(apiCommand);
}
