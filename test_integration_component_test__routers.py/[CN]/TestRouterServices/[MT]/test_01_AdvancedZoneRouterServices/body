def test_01_AdvancedZoneRouterServices(self):
    'Test advanced zone router services\n        '
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    for router in routers:
        self.assertEqual(router.state, 'Running', 'Check list router response for router state')
        self.debug(('Router ID: %s & Router state: %s' % (router.id, router.state)))
    networks = list_networks(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(networks, list), True, 'Check for list networks response return valid data')
    self.assertNotEqual(len(networks), 0, 'Check list networks response')
    for network in networks:
        self.assertIn(network.state, ['Implemented', 'Allocated'], 'Check list network response for network state')
        self.debug(('Network ID: %s & Network state: %s' % (network.id, network.state)))
    virtual_machines = list_virtual_machines(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check for list virtual machines response return valid data')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
        self.debug(('VM ID: %s & VM state: %s' % (virtual_machine.id, virtual_machine.state)))
    networks = list_networks(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(networks, list), True, 'Check for list networks response return valid data')
    self.assertNotEqual(len(networks), 0, 'Check list networks response')
    for network in networks:
        self.assertEqual(('Lb' in str(network.service)), True, 'Check Load balancing process in list networks')
        self.assertEqual(('UserData' in str(network.service)), True, 'Check UserData service in list networks')
        self.assertEqual(('Vpn' in str(network.service)), True, 'Check Vpn service in list networks')
        self.assertEqual(('Firewall' in str(network.service)), True, 'Check Firewall service in list networks')
        self.assertEqual(('Dns' in str(network.service)), True, 'Check Dns service in list networks')
    return
