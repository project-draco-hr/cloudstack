def test_02_NetworkGarbageCollection(self):
    'Test network garbage collection\n        '
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    for router in routers:
        self.assertEqual(router.state, 'Running', 'Check list router response for router state')
        self.debug(('Router ID: %s & Router state: %s' % (router.id, router.state)))
    networks = list_networks(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(networks, list), True, 'Check for list networks response return valid data')
    self.assertNotEqual(len(networks), 0, 'Check list networks response')
    for network in networks:
        self.assertIn(network.state, ['Implemented', 'Allocated'], 'Check list network response for network state')
        self.debug(('Network ID: %s & Network state: %s' % (network.id, network.state)))
    virtual_machines = list_virtual_machines(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check for list virtual machines response return valid data')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
        self.debug(('VM ID: %s & VM state: %s' % (virtual_machine.id, virtual_machine.state)))
        cmd = stopVirtualMachine.stopVirtualMachineCmd()
        cmd.id = virtual_machine.id
        self.apiclient.stopVirtualMachine(cmd)
    gcinterval = list_configurations(self.apiclient, name='network.gc.interval')
    self.assertEqual(isinstance(gcinterval, list), True, 'Check for list intervals response return valid data')
    self.debug(('network.gc.interval: %s' % gcinterval[0].value))
    gcwait = list_configurations(self.apiclient, name='network.gc.wait')
    self.assertEqual(isinstance(gcwait, list), True, 'Check for list intervals response return valid data')
    self.debug(('network.gc.wait: %s' % gcwait[0].value))
    total_wait = (int(gcinterval[0].value) + int(gcwait[0].value))
    time.sleep((total_wait * 2))
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    for router in routers:
        self.assertEqual(router.state, 'Stopped', 'Check list router response for router state')
        self.debug(('Router ID: %s & Router state: %s' % (router.id, router.state)))
    self._cleanup.append(self.vm_2)
    return
