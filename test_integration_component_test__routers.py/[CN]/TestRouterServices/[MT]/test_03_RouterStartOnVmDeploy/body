def test_03_RouterStartOnVmDeploy(self):
    'Test router start on VM deploy\n        '
    vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed a VM with ID: %s' % vm.id))
    virtual_machines = list_virtual_machines(self.apiclient, id=vm.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check for list virtual machines response return valid data')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    for router in routers:
        self.assertEqual(router.state, 'Running', 'Check list router response for router state')
        self.debug(('Router ID: %s & Router state: %s' % (router.id, router.state)))
    virtual_machines = list_virtual_machines(self.apiclient, id=self.vm_1.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check for list VMs response return valid data')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.assertEqual(virtual_machine.state, 'Stopped', 'Check list VM response for Stopped state')
        self.debug(('VM ID: %s & VM state: %s' % (virtual_machine.id, virtual_machine.state)))
    return
