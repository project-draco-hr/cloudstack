def test_01_RouterStopCreateFW(self):
    'Test router stop create Firewall rule\n        '
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    router = routers[0]
    self.debug(('Stopping the router: %s' % router.id))
    cmd = stopRouter.stopRouterCmd()
    cmd.id = router.id
    self.apiclient.stopRouter(cmd)
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    router = routers[0]
    self.assertEqual(router.state, 'Stopped', 'Check list router response for router state')
    public_ips = list_publicIP(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IP response return valid data')
    public_ip = public_ips[0]
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug(('Created firewall rule: %s' % fw_rule.id))
    self.debug(('Starting the router: %s' % router.id))
    cmd = startRouter.startRouterCmd()
    cmd.id = router.id
    self.apiclient.startRouter(cmd)
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    fw_rules = list_firewall_rules(self.apiclient, id=fw_rule.id)
    self.assertEqual(isinstance(fw_rules, list), True, 'Check for list FW rules response return valid data')
    self.assertEqual(fw_rules[0].state, 'Active', 'Check list load balancing rules')
    self.assertEqual(fw_rules[0].startport, str(self.services['fw_rule']['startport']), 'Check start port of firewall rule')
    self.assertEqual(fw_rules[0].endport, str(self.services['fw_rule']['endport']), 'Check end port of firewall rule')
    hosts = list_hosts(self.apiclient, id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check for list hosts response return valid data')
    host = hosts[0]
    result = get_process_status(host.ipaddress, self.services['host']['publicport'], self.services['host']['username'], self.services['host']['password'], router.linklocalip, 'iptables -t nat -L')
    self.debug(('iptables -t nat -L: %s' % result))
    self.debug(('Public IP: %s' % public_ip.ipaddress))
    res = str(result)
    self.assertEqual(res.count(str(public_ip.ipaddress)), 1, 'Check public IP address')
    return
