def test_01_RouterStopCreateLB(self):
    'Test router stop create Load balancing\n        '
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    router = routers[0]
    self.debug(('Stopping router with ID: %s' % router.id))
    cmd = stopRouter.stopRouterCmd()
    cmd.id = router.id
    self.apiclient.stopRouter(cmd)
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    router = routers[0]
    self.assertEqual(router.state, 'Stopped', 'Check list router response for router state')
    public_ips = list_publicIP(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IPs response return valid data')
    public_ip = public_ips[0]
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['lbrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['lbrule']['publicport'], endport=self.services['lbrule']['publicport'])
    self.debug(('Creating LB rule for public IP: %s' % public_ip.id))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], public_ip.id, accountid=self.account.account.name)
    self.debug(('Assigning VM %s to LB rule: %s' % (self.vm_1.id, lb_rule.id)))
    lb_rule.assign(self.apiclient, [self.vm_1])
    cmd = startRouter.startRouterCmd()
    cmd.id = router.id
    self.apiclient.startRouter(cmd)
    routers = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    lb_rules = list_lb_rules(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'Check for list LB rules response return valid data')
    self.assertEqual(lb_rules[0].state, 'Active', 'Check list load balancing rules')
    self.assertEqual(lb_rules[0].publicport, str(self.services['lbrule']['publicport']), 'Check list load balancing rules')
    try:
        self.debug(('SSH into VM with IP: %s' % public_ip.ipaddress))
        self.vm_1.ssh_port = self.services['lbrule']['publicport']
        self.vm_1.get_ssh_client(public_ip.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.vm_1.ipaddress, e)))
    return
