{
  long dataCenterId=pool.longValue();
  Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _maxExecutionTimeMs);
  _cmdExecLogDao.expungeExpiredRecords(cutTime);
  boolean suspendAutoLoading=!reserveStandbyCapacity();
  if (!suspendAutoLoading) {
    String restart=_configDao.getValue("consoleproxy.restart");
    if (restart != null && restart.equalsIgnoreCase("false")) {
      s_logger.debug("Capacity scan disabled purposefully, consoleproxy.restart = false. This happens when the primarystorage is in maintenance mode");
      suspendAutoLoading=true;
    }
  }
  List<SecondaryStorageVmVO> alreadyRunning=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,dataCenterId,State.Running,State.Migrating,State.Starting);
  if (alreadyRunning.size() == 0) {
    s_logger.info("No running secondary storage vms found in datacenter id=" + dataCenterId + ", starting one");
    List<SecondaryStorageVmVO> stopped=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,dataCenterId,State.Stopped,State.Stopping);
    if (stopped.size() == 0 || !suspendAutoLoading) {
      List<SecondaryStorageVmVO> stopping=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,State.Stopping);
      if (stopping.size() > 0) {
        s_logger.info("Found SSVMs that are currently at stopping state, wait until they are settled");
        return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
      }
      expandPool(pool,SecondaryStorageVm.Role.templateProcessor);
    }
  }
  if (!suspendAutoLoading) {
    if (alreadyRunning.size() == 0) {
      s_logger.info("Primary secondary storage is not even started, wait until next turn");
      return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
    }
    alreadyRunning=_secStorageVmDao.getSecStorageVmListInStates(null,dataCenterId,State.Running,State.Migrating,State.Starting);
    List<CommandExecLogVO> activeCmds=listActiveCommands(dataCenterId,cutTime);
    if (alreadyRunning.size() * _capacityPerSSVM - activeCmds.size() < _standbyCapacity) {
      s_logger.info("secondary storage command execution standby capactiy low (running VMs: " + alreadyRunning.size() + ", active cmds: "+ activeCmds.size()+ "), starting a new one");
      return new Pair<AfterScanAction,Object>(AfterScanAction.expand,SecondaryStorageVm.Role.commandExecutor);
    }
  }
  return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
}
