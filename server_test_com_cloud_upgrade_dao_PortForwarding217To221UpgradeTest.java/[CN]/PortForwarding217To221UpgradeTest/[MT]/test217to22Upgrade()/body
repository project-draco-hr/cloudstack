{
  s_logger.debug("Finding sample data from 2.1.7");
  DbTestUtils.executeScript("VersionDaoImplTest/2.1.7/2.1.7_sample_portForwarding.sql",false,true);
  Connection conn=Transaction.getStandaloneConnection();
  PreparedStatement pstmt;
  VersionDaoImpl dao=ComponentLocator.inject(VersionDaoImpl.class);
  DatabaseUpgradeChecker checker=ComponentLocator.inject(DatabaseUpgradeChecker.class);
  String version=dao.getCurrentVersion();
  if (!version.equals("2.1.7")) {
    s_logger.error("Version returned is not 2.1.7 but " + version);
  }
 else {
    s_logger.debug("Port forwarding test version is " + version);
  }
  checker.upgrade("2.1.7","2.2.3");
  conn=Transaction.getStandaloneConnection();
  try {
    s_logger.debug("Starting tesing upgrade from 2.1.7 to 2.2.3 for Port forwarding rules...");
    pstmt=conn.prepareStatement("SELECT version FROM version");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      s_logger.error("ERROR: No version selected");
    }
 else     if (!rs.getString(1).equals("2.2.3")) {
      s_logger.error("ERROR: VERSION stored is not 2.2.3: " + rs.getString(1));
    }
    rs.close();
    pstmt.close();
    Long count21=0L;
    pstmt=conn.prepareStatement("SELECT COUNT(*) FROM ip_forwarding WHERE forwarding=1");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      count21=rs.getLong(1);
    }
    rs.close();
    pstmt.close();
    Long count22=0L;
    pstmt=conn.prepareStatement("SELECT COUNT(*) FROM port_forwarding_rules");
    rs=pstmt.executeQuery();
    if (rs.next()) {
      count22=rs.getLong(1);
    }
    rs.close();
    pstmt.close();
    if (count21.longValue() != count22.longValue()) {
      s_logger.error("ERROR: port forwarding rules were updated incorrectly. Have " + count21 + " rulrs in ip_forwarding table branch 21, and "+ count22+ " in port_forwarding_rules table branch 22. Stopping the test");
      System.exit(2);
    }
    s_logger.debug("Port forwarding rules test is passed");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Problem testing port forwarding rules update",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}
