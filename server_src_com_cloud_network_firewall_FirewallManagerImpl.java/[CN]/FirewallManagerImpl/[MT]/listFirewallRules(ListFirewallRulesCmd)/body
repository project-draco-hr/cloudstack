{
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Long networkId=cmd.getNetworkId();
  Map<String,String> tags=cmd.getTags();
  FirewallRule.TrafficType trafficType=cmd.getTrafficType();
  Boolean display=cmd.getDisplay();
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException("Ip address id=" + ipId + " not ready for firewall rules yet");
    }
    _accountMgr.checkAccess(caller,null,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listFirewallRules");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(FirewallRuleVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  sb.and("id",sb.entity().getId(),Op.EQ);
  sb.and("trafficType",sb.entity().getTrafficType(),Op.EQ);
  sb.and("networkId",sb.entity().getNetworkId(),Op.EQ);
  sb.and("ip",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and("purpose",sb.entity().getPurpose(),Op.EQ);
  sb.and("display",sb.entity().isDisplay(),Op.EQ);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op("key" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and("value" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and("resourceType",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join("tagSearch",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    sc.setJoinParameters("tagSearch","resourceType",ResourceObjectType.FirewallRule.toString());
    for (    String key : tags.keySet()) {
      sc.setJoinParameters("tagSearch","key" + String.valueOf(count),key);
      sc.setJoinParameters("tagSearch","value" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  if (display != null) {
    sc.setParameters("display",display);
  }
  if (ipId != null) {
    sc.setParameters("ip",ipId);
  }
  if (networkId != null) {
    sc.setParameters("networkId",networkId);
  }
  sc.setParameters("purpose",Purpose.Firewall);
  sc.setParameters("trafficType",trafficType);
  Pair<List<FirewallRuleVO>,Integer> result=_firewallDao.searchAndCount(sc,filter);
  return new Pair<List<? extends FirewallRule>,Integer>(result.first(),result.second());
}
