{
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  boolean isRecursive=cmd.isRecursive();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException("Ip address id=" + ipId + " not ready for firewall rules yet");
    }
    _accountMgr.checkAccess(caller,null,ipAddressVO);
  }
  ListProjectResourcesCriteria listProjectResourcesCriteria=_accountMgr.buildACLSearchParameters(caller,domainId,isRecursive,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,cmd.listAll(),id);
  Filter filter=new Filter(FirewallRuleVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("id",sb.entity().getId(),Op.EQ);
  sb.and("ip",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and("purpose",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (ipId != null) {
    sc.setParameters("ip",ipId);
  }
  sc.setParameters("purpose",Purpose.Firewall);
  return _firewallDao.search(sc,filter);
}
