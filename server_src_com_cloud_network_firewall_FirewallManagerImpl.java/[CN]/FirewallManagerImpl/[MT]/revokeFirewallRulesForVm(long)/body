{
  boolean success=true;
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> pfRules=_pfRulesDao.listByVm(vmId);
  List<FirewallRuleVO> staticNatRules=_firewallDao.listStaticNatByVmId(vm.getId());
  List<FirewallRuleVO> firewallRules=new ArrayList<FirewallRuleVO>();
  for (  PortForwardingRuleVO pfRule : pfRules) {
    FirewallRuleVO relatedRule=_firewallDao.findByRelatedId(pfRule.getId());
    if (relatedRule != null) {
      firewallRules.add(relatedRule);
    }
  }
  for (  FirewallRuleVO staticNatRule : staticNatRules) {
    FirewallRuleVO relatedRule=_firewallDao.findByRelatedId(staticNatRule.getId());
    if (relatedRule != null) {
      firewallRules.add(relatedRule);
    }
  }
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (firewallRules.isEmpty()) {
    s_logger.debug("No firewall rules are found for vm id=" + vmId);
    return true;
  }
 else {
    s_logger.debug("Found " + firewallRules.size() + " to cleanup for vm id="+ vmId);
  }
  for (  FirewallRuleVO rule : firewallRules) {
    revokeFirewallRule(rule.getId(),false,_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug("Applying firewall rules for ip address id=" + ipId + " as a part of vm expunge");
    try {
      success=success && applyFirewallRules(ipId,_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn("Failed to apply port forwarding rules for ip id=" + ipId);
      success=false;
    }
  }
  return success;
}
