{
  LinkedHashMap<Network,List<? extends NicProfile>> networks=new LinkedHashMap<Network,List<? extends NicProfile>>(3);
  boolean hasGuestNetwork=false;
  if (this.guestNetwork != null) {
    logger.debug("Adding nic for Virtual Router in Guest network " + this.guestNetwork);
    String defaultNetworkStartIp=null, defaultNetworkStartIpv6=null;
    if (!this.publicNetwork) {
      final Nic placeholder=networkModel.getPlaceholderNicForRouter(this.guestNetwork,this.getPodId());
      if (this.guestNetwork.getCidr() != null) {
        if (placeholder != null && placeholder.getIp4Address() != null) {
          logger.debug("Requesting ipv4 address " + placeholder.getIp4Address() + " stored in placeholder nic for the network "+ this.guestNetwork);
          defaultNetworkStartIp=placeholder.getIp4Address();
        }
 else {
          final String startIp=networkModel.getStartIpAddress(this.guestNetwork.getId());
          if (startIp != null && ipAddressDao.findByIpAndSourceNetworkId(this.guestNetwork.getId(),startIp).getAllocatedTime() == null) {
            defaultNetworkStartIp=startIp;
          }
 else           if (logger.isDebugEnabled()) {
            logger.debug("First ipv4 " + startIp + " in network id="+ this.guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ip address from the range");
          }
        }
      }
      if (this.guestNetwork.getIp6Cidr() != null) {
        if (placeholder != null && placeholder.getIp6Address() != null) {
          logger.debug("Requesting ipv6 address " + placeholder.getIp6Address() + " stored in placeholder nic for the network "+ this.guestNetwork);
          defaultNetworkStartIpv6=placeholder.getIp6Address();
        }
 else {
          final String startIpv6=networkModel.getStartIpv6Address(this.guestNetwork.getId());
          if (startIpv6 != null && ipv6Dao.findByNetworkIdAndIp(this.guestNetwork.getId(),startIpv6) == null) {
            defaultNetworkStartIpv6=startIpv6;
          }
 else           if (logger.isDebugEnabled()) {
            logger.debug("First ipv6 " + startIpv6 + " in network id="+ this.guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ipv6 address from the range");
          }
        }
      }
    }
    final NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp,defaultNetworkStartIpv6);
    if (this.publicNetwork) {
      if (this.isRedundant) {
        gatewayNic.setIp4Address(ipAddrMgr.acquireGuestIpAddress(this.guestNetwork,null));
      }
 else {
        gatewayNic.setIp4Address(this.guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(this.guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(this.guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(this.guestNetwork.getBroadcastUri());
      gatewayNic.setMode(this.guestNetwork.getMode());
      final String gatewayCidr=this.guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    }
 else {
      gatewayNic.setDefaultNic(true);
    }
    networks.put(this.guestNetwork,new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));
    hasGuestNetwork=true;
  }
  logger.debug("Adding nic for Virtual Router in Control network ");
  List<? extends NetworkOffering> offerings=networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork);
  NetworkOffering controlOffering=offerings.get(0);
  Network controlConfig=networkMgr.setupNetwork(VirtualNwStatus.account,controlOffering,this.plan,null,null,false).get(0);
  networks.put(controlConfig,new ArrayList<NicProfile>());
  if (publicNetwork) {
    logger.debug("Adding nic for Virtual Router in Public network ");
    final NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(this.sourceNatIp.getAddress().addr());
    defaultNic.setGateway(this.sourceNatIp.getGateway());
    defaultNic.setNetmask(this.sourceNatIp.getNetmask());
    defaultNic.setMacAddress(this.sourceNatIp.getMacAddress());
    final Network pubNet=networkDao.findById(sourceNatIp.getNetworkId());
    if (pubNet.getBroadcastDomainType() == BroadcastDomainType.Vxlan) {
      defaultNic.setBroadcastType(BroadcastDomainType.Vxlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vxlan.toUri(this.sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(BroadcastDomainType.Vxlan.toUri(this.sourceNatIp.getVlanTag()));
    }
 else {
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(this.sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(this.sourceNatIp.getVlanTag()));
    }
    if (hasGuestNetwork) {
      defaultNic.setDeviceId(2);
    }
    final NetworkOffering publicOffering=networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork).get(0);
    final List<? extends Network> publicNetworks=networkMgr.setupNetwork(VirtualNwStatus.account,publicOffering,this.plan,null,null,false);
    final String publicIp=defaultNic.getIp4Address();
    final NicVO peerNic=nicDao.findByIp4AddressAndNetworkId(publicIp,publicNetworks.get(0).getId());
    if (peerNic != null) {
      logger.info("Use same MAC as previous RvR, the MAC is " + peerNic.getMacAddress());
      defaultNic.setMacAddress(peerNic.getMacAddress());
    }
    networks.put(publicNetworks.get(0),new ArrayList<NicProfile>(Arrays.asList(defaultNic)));
  }
  return networks;
}
