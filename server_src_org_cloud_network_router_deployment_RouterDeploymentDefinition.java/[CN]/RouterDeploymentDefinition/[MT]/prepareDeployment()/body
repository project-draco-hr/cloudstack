{
  boolean canProceed=true;
  if (networkModel.isNetworkSystem(guestNetwork) || guestNetwork.getGuestType() == Network.GuestType.Shared) {
    this.owner=accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  this.isPublicNetwork=networkModel.isProviderSupportServiceInNetwork(guestNetwork.getId(),Service.SourceNat,Provider.VirtualRouter);
  if (this.isRedundant && !this.isPublicNetwork) {
    logger.error("Didn't support redundant virtual router without public network!");
    this.routers=new ArrayList<>();
    canProceed=false;
  }
  return canProceed;
}
