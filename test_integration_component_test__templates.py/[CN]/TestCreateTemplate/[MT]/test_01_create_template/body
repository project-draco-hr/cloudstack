def test_01_create_template(self):
    'Test create public & private template\n        '
    for (k, v) in self.services['templates'].items():
        template = Template.register(self.apiclient, v, zoneid=self.zone.id, account=self.account.account.name, domainid=self.account.account.domainid)
        self.debug(('Registered a template of format: %s with ID: %s' % (v['format'], template.id)))
        template.download(self.apiclient)
        self.cleanup.append(template)
        time.sleep(self.services['sleep'])
        timeout = self.services['timeout']
        while True:
            list_template_response = list_templates(self.apiclient, templatefilter=self.services['templatefilter'], id=template.id, zoneid=self.zone.id, account=self.account.account.name, domainid=self.account.account.domainid)
            if isinstance(list_template_response, list):
                break
            elif (timeout == 0):
                raise Exception('List template failed!')
            time.sleep(5)
            timeout = (timeout - 1)
        self.assertEqual(isinstance(list_template_response, list), True, 'Check for list template response return valid data')
        self.assertNotEqual(len(list_template_response), 0, 'Check template available in List Templates')
        template_response = list_template_response[0]
        self.assertEqual(template_response.isready, True, 'Check display text of newly created template')
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, mode=self.services['mode'])
        self.debug(('creating an instance with template ID: %s' % template.id))
        vm_response = list_virtual_machines(self.apiclient, id=virtual_machine.id, account=self.account.account.name, domainid=self.account.account.domainid)
        self.assertEqual(isinstance(vm_response, list), True, 'Check for list VMs response after VM deployment')
        self.assertNotEqual(len(vm_response), 0, 'Check VMs available in List VMs response')
        vm = vm_response[0]
        self.assertEqual(vm.state, 'Running', 'Check the state of VM created from Template')
    return
