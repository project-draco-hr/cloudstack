@classmethod
def setUpClass(cls):
    cls.services = Services().services
    cls.api_client = super(TestTemplates, cls).getClsTestClient().getApiClient()
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostypeid'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.services['account'] = cls.account.account.name
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.virtual_machine.stop(cls.api_client)
    timeout = cls.services['timeout']
    time.sleep(cls.services['sleep'])
    while True:
        list_volume = list_volumes(cls.api_client, virtualmachineid=cls.virtual_machine.id, type='ROOT', listall=True)
        if isinstance(list_volume, list):
            break
        elif (timeout == 0):
            raise Exception('List volumes failed.')
        time.sleep(5)
        timeout = (timeout - 1)
    cls.volume = list_volume[0]
    cls.template = Template.create(cls.api_client, cls.services['template'], cls.volume.id)
    cls._cleanup = [cls.service_offering, cls.account]
