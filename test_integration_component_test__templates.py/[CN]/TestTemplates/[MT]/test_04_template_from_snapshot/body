@attr(speed='slow')
@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_04_template_from_snapshot(self):
    'Create Template from snapshot\n        '
    if (self.hypervisor.lower() in ['hyperv', 'lxc']):
        self.skipTest(('Snapshots feature is not supported on %s' % self.hypervisor.lower()))
    userapiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    volumes = Volume.list(userapiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    volume = volumes[0]
    self.debug(('Creating a snapshot from volume: %s' % volume.id))
    snapshot = Snapshot.create(userapiclient, volume.id, account=self.account.name, domainid=self.account.domainid)
    self.debug(('Creating a template from snapshot: %s' % snapshot.id))
    template = Template.create_from_snapshot(userapiclient, snapshot, self.services['template'])
    self.cleanup.append(template)
    templates = Template.list(userapiclient, templatefilter=self.services['template']['templatefilter'], id=template.id)
    self.assertNotEqual(templates, None, 'Check if result exists in list item call')
    self.assertEqual(templates[0].id, template.id, 'Check new template id in list resources call')
    self.debug(('Deploying a VM from template: %s' % template.id))
    virtual_machine = VirtualMachine.create(userapiclient, self.services['virtual_machine'], templateid=template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine)
    vm_response = VirtualMachine.list(userapiclient, id=virtual_machine.id, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check for list VM response return valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check VMs available in List VMs response')
    vm = vm_response[0]
    self.assertEqual(vm.state, 'Running', 'Check the state of VM created from Template')
    return
