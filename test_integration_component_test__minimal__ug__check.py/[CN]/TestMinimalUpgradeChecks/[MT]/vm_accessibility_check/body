def vm_accessibility_check(self, src_VM, dst_VM, first_time=True):
    self.ssh = SshClient(host=src_VM.public_ip, port=TestMinimalUpgradeChecks.services['virtual_machine']['ssh_port'], user='root', passwd='password')
    self.debug(('Source VM Accessed. VM with ID: %s' % src_VM.id))
    if first_time:
        self.debug('Execute "firstconn_expectscript.exp" expect script on the Source VM, in order to connect to Destination VM deployed before upgrade and retrieve the guest ip address of the VM')
        ssh_output = self.ssh.runCommand(('/tmp/firstconn_expectscript.exp %s %s %s %s' % (dst_VM.public_ip, 'password', src_VM.public_ip, 'password')))
    else:
        self.debug('Execute "secondconn_expectscript.exp" expect script on the Source VM, in order to connect to Destination VM deployed before upgrade and retrieve the guest ip address of the VM')
        ssh_output = self.ssh.runCommand(('/tmp/secondconn_expectscript.exp %s %s %s %s' % (dst_VM.public_ip, 'password', src_VM.public_ip, 'password')))
    if (ssh_output['status'] is SUCCESS):
        ssh_output = self.ssh.runCommand('cat /tmp/vm_ip_address')
    else:
        self.debug('firstconn/secondconn_expectscript.exp Script execution didnt succeed')
        raise Exception('firstconn/secondconn_expectscript.exp Script execution didnt succeed')
    guest_ip_address = str(ssh_output['stdout'])
    self.debug(('IP Address SCPed: %s' % guest_ip_address))
    self.debug(('IP Address to be compared with: %s' % str(dst_VM.nicip)))
    guest_ip_address = self.get_guest_ip_address(guest_ip_address)
    self.assertEqual(guest_ip_address, dst_VM.nicip, 'Failed to Test the Connection')
    ssh_output = self.ssh.runCommand('rm -rf /tmp/vm_ip_address')
    self.debug('rm -rf /tmp/vm_ip_address')
    if (ssh_output['status'] is SUCCESS):
        removed_file = self.ssh.runCommand('ls -lh /tmp/vm_ip_address')
        self.debug('ls -lh /tmp/vm_ip_address')
        if ((removed_file['status'] == FAIL) and ('No such file' in str(removed_file['stderr']))):
            self.ssh.close()
            return
        elif (removed_file['status'] == SUCCESS):
            self.debug('Unable to delete vm_ip_address file')
            raise Exception('Unable to delete vm_ip_address file')
        else:
            raise Exception('SSH Command Execution Failure')
