@attr(tags=['advanced', 'basic', 'multicluster', 'storagemotion', 'xenserver'], required_hardware='true')
def test_01_migrate_vm_with_volume(self):
    'Test migrate virtual machine with its volumes\n        '
    hosts = Host.listForMigration(self.apiclient, virtualmachineid=self.virtual_machine.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check the number of hosts in the zone')
    hosts[:] = [host for host in hosts if host.requiresStorageMotion]
    if ((hosts is None) or (len(hosts) == 0)):
        self.skipTest('No valid hosts for storage motion. Skipping')
    host = hosts[0]
    self.debug(('Migrating VM-ID: %s to Host: %s' % (self.virtual_machine.id, host.id)))
    cmd = migrateVirtualMachineWithVolume.migrateVirtualMachineWithVolumeCmd()
    cmd.hostid = host.id
    cmd.virtualmachineid = self.virtual_machine.id
    self.apiclient.migrateVirtualMachineWithVolume(cmd)
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_vm_response, None, 'Check virtual machine is listVirtualMachines')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.id, self.virtual_machine.id, 'Check virtual machine ID of migrated VM')
    self.assertEqual(vm_response.hostid, host.id, 'Check destination hostID of migrated VM')
    self.assertEqual(vm_response.state, 'Running', 'Check the state of VM')
    return
