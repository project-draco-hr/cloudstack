@attr(tags=['advanced', 'basic', 'multipool', 'storagemotion', 'xenserver'])
def test_02_migrate_volume(self):
    'Test migrate volume of a running vm\n        '
    list_volumes_response = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, listall=True)
    self.assertEqual(isinstance(list_volumes_response, list), True, 'Check list volumes response for valid list')
    self.assertNotEqual(list_volumes_response, None, 'Check if volume exists in ListVolumes')
    for volume in list_volumes_response:
        pools = StoragePool.listForMigration(self.apiclient, id=volume.id)
        self.assertEqual(isinstance(pools, list), True, 'Check list storage pools response for valid list')
        self.assertNotEqual(pools, None, 'Check if pools  exists in ListStoragePools')
        pool = pools[0]
        self.debug(('Migrating Volume-ID: %s to Pool: %s' % (volume.id, pool.id)))
        Volume.migrate(self.apiclient, volumeid=volume.id, storageid=pool.id, livemigrate='true')
        migrated_volume_response = list_volumes(self.apiclient, id=volume.id)
        self.assertEqual(isinstance(migrated_volume_response, list), True, 'Check list volumes response for valid list')
        self.assertNotEqual(migrated_volume_response, None, 'Check if volume exists in ListVolumes')
        migrated_volume = migrated_volume_response[0]
        self.assertEqual(migrated_volume.state, 'Ready', 'Check migrated volume is in Ready state')
        self.assertEqual(migrated_volume.storage, pool.name, 'Check volume is on migrated pool')
    return
