def __cleanEntries(self):
    '\n        @Name : __cleanAndEntries\n        @Description: Cleans up the created DC in order of creation\n        '
    try:
        try:
            ret = FAILED
            if (('order' in self.__dcCfg.keys()) and len(self.__dcCfg['order'])):
                self.__dcCfg['order'].reverse()
            print '\n====Clean Up Entries===', self.__dcCfg
            for type in self.__dcCfg['order']:
                self.__tcRunLogger.debug(('====CleanUp Started For Type: %s====' % type))
                if type:
                    temp_ids = self.__dcCfg[type]
                    ids = [items for items in temp_ids if items]
                    for id in ids:
                        del_mod = ('delete' + type)
                        del_cmd = getattr(globals()[del_mod], (del_mod + 'Cmd'))
                        del_cmd_obj = del_cmd()
                        del_cmd_resp = getattr(globals()[del_mod], (del_mod + 'Response'))
                        del_cmd_obj.id = id
                        del_cmd_obj = self.__deleteCmds((del_mod + 'Cmd'), del_cmd_obj)
                        del_func = getattr(self.__apiClient, del_mod)
                        del_cmd_resp = del_func(del_cmd_obj)
                        if del_cmd_resp:
                            self.__tcRunLogger.debug(('====%s CleanUp Failed. ID: %s ===' % (type, id)))
                        else:
                            self.__tcRunLogger.debug(('====%s CleanUp Successful. ID : %s===' % (type, id)))
            ret = SUCCESS
        except Exception as e:
            print ('\n==== Exception Under __cleanEntries: %s ==== % ' % GetDetailExceptionInfo(e))
            self.__tcRunLogger.exception(('\n==== Exception Under __cleanEntries: %s ==== % ' % GetDetailExceptionInfo(e)))
    finally:
        return ret
