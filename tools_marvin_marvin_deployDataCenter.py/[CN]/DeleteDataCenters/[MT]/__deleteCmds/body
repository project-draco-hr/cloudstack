def __deleteCmds(self, cmd_name, cmd_obj):
    '\n        @Name : __deleteCmds\n        @Desc : Deletes the entities provided by cmd\n        '
    if (cmd_name.lower() == 'deletehostcmd'):
        cmd_obj.forcedestroylocalstorage = 'true'
        cmd_obj.force = 'true'
        '\n            Step1 : Prepare Host For Maintenance\n            '
        host_maint_cmd = prepareHostForMaintenance.prepareHostForMaintenanceCmd()
        host_maint_cmd.id = cmd_obj.id
        host_maint_resp = self.__apiClient.prepareHostForMaintenance(host_maint_cmd)
        if host_maint_resp:
            '\n                Step2 : List Hosts for Resource State\n                '
            list_host_cmd = listHosts.listHostsCmd()
            list_host_cmd.id = cmd_obj.id
            retries = 3
            for i in xrange(retries):
                list_host_resp = self.__apiClient.listHosts(list_host_cmd)
                if (list_host_resp and (list_host_resp[0].resourcestate == 'Maintenance')):
                    break
                sleep(30)
    if (cmd_name.lower() == 'deletestoragepoolcmd'):
        cmd_obj.forced = 'true'
        store_maint_cmd = enableStorageMaintenance.enableStorageMaintenanceCmd()
        store_maint_cmd.id = cmd_obj.id
        store_maint_resp = self.__apiClient.enableStorageMaintenance(store_maint_cmd)
        if store_maint_resp:
            list_store_cmd = listStoragePools.listStoragePoolsCmd()
            list_store_cmd.id = cmd_obj.id
            retries = 3
            for i in xrange(retries):
                store_maint_resp = self.__apiClient.listStoragePools(list_store_cmd)
                if (store_maint_resp and (store_maint_resp[0].state == 'Maintenance')):
                    break
                sleep(30)
    return cmd_obj
