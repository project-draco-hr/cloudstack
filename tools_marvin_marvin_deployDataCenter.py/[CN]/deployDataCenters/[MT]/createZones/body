def createZones(self, zones):
    for zone in zones:
        createzone = createZone.createZoneCmd()
        createzone.dns1 = zone.dns1
        createzone.dns2 = zone.dns2
        createzone.internaldns1 = zone.internaldns1
        createzone.internaldns2 = zone.internaldns2
        createzone.name = zone.name
        createzone.securitygroupenabled = zone.securitygroupenabled
        createzone.networktype = zone.networktype
        createzone.guestcidraddress = zone.guestcidraddress
        zoneresponse = self.apiClient.createZone(createzone)
        zoneId = zoneresponse.id
        for pnet in zone.physical_networks:
            phynetwrk = self.createPhysicalNetwork(pnet, zoneId)
            self.configureProviders(phynetwrk, pnet.providers)
            self.updatePhysicalNetwork(phynetwrk.id, 'Enabled', vlan=zone.vlan)
        if (zone.networktype == 'Basic'):
            listnetworkoffering = listNetworkOfferings.listNetworkOfferingsCmd()
            listnetworkoffering.name = ('DefaultSharedNetscalerEIPandELBNetworkOffering' if (len(filter((lambda x: (x.typ == 'Public')), zone.physical_networks[0].traffictypes)) > 0) else 'DefaultSharedNetworkOfferingWithSGService')
            listnetworkofferingresponse = self.apiClient.listNetworkOfferings(listnetworkoffering)
            guestntwrk = configGenerator.network()
            guestntwrk.displaytext = 'guestNetworkForBasicZone'
            guestntwrk.name = 'guestNetworkForBasicZone'
            guestntwrk.zoneid = zoneId
            guestntwrk.networkofferingid = listnetworkofferingresponse[0].id
            networkid = self.createnetworks([guestntwrk], zoneId)
            self.createpods(zone.pods, zoneId, networkid)
            if self.isEipElbZone(zone):
                self.createVlanIpRanges(zone.networktype, zone.ipranges, zoneId)
        if (zone.networktype == 'Advanced'):
            self.createpods(zone.pods, zoneId)
            self.createVlanIpRanges(zone.networktype, zone.ipranges, zoneId)
        self.createSecondaryStorages(zone.secondaryStorages, zoneId)
        self.enableZone(zoneId, 'Enabled')
    return
