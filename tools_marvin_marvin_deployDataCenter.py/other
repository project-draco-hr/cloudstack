'Deploy datacenters according to a json configuration file'
import configGenerator
from cloudstackException import InvalidParameterException, GetDetailExceptionInfo
import logging
from cloudstackAPI import *
from os import path
from time import sleep
from optparse import OptionParser
from marvin.codes import FAILED, SUCCESS
from sys import exit
if (__name__ == '__main__'):
    parser = OptionParser()
    parser.add_option('-i', '--input', action='store', default='./datacenterCfg', dest='input', help='the path                       where the json config file generated, by default is                       ./datacenterCfg')
    (options, args) = parser.parse_args()
    if options.input:
        '\n        Imports the Modules Required\n        '
        from marvin.marvinLog import MarvinLog
        from marvin.cloudstackTestClient import CSTestClient
        cfg = configGenerator.getSetupConfig(options.input)
        log_obj = MarvinLog('CSLog')
        tcRunLogger = log_obj.setLogHandler('/tmp/debug.log')
        if (tcRunLogger is None):
            print '\nLogger Creation Failed. Please Check'
            exit(1)
        else:
            print '\nAll Logs Are Available Under /tmp/debug.log File'
        obj_tc_client = CSTestClient(cfg.mgtSvr[0], cfg.dbSvr, logger=tcRunLogger)
        if ((obj_tc_client is not None) and (obj_tc_client.CreateTestClient() != FAILED)):
            deploy = DeployDataCenters(obj_tc_client, cfg, tcRunLogger)
            if (deploy.deploy() == FAILED):
                print '\nDeploy DC Failed'
                exit(1)
        else:
            print '\nTestClient Creation Failed. Please Check'
            exit(1)
    else:
        print '\n Please Specify a Valid Configuration File'
    '\n    create = createStoragePool.createStoragePoolCmd()\n    create.clusterid = 1\n    create.podid = 2\n    create.name = "fdffdf"\n    create.url = "nfs://jfkdjf/fdkjfkd"\n    create.zoneid = 2\n\n    deploy = deployDataCenters("./datacenterCfg")\n    deploy.loadCfg()\n    deploy.apiClient.createStoragePool(create)\n    '
