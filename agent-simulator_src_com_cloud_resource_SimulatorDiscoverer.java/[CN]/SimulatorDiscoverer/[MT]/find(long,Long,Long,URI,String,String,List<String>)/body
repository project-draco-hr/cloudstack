{
  Map<AgentResourceBase,Map<String,String>> resources;
  try {
    String scheme=uri.getScheme();
    String host=uri.getAuthority();
    String commands=URLDecoder.decode(uri.getPath());
    long cpuSpeed=_mockAgentMgr.DEFAULT_HOST_SPEED_MHZ;
    long cpuCores=_mockAgentMgr.DEFAULT_HOST_CPU_CORES;
    long memory=_mockAgentMgr.DEFAULT_HOST_MEM_SIZE;
    long localstorageSize=_mockStorageMgr.DEFAULT_HOST_STORAGE_SIZE;
    if (scheme.equals("http")) {
      if (host == null || !host.startsWith("sim")) {
        String msg="uri is not of simulator type so we're not taking care of the discovery for this: " + uri;
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(msg);
        }
        return null;
      }
      if (commands != null) {
        int index=commands.lastIndexOf("/");
        if (index != -1) {
          commands=commands.substring(index + 1);
          String[] cmds=commands.split("&");
          for (          String cmd : cmds) {
            String[] parameter=cmd.split("=");
            if (parameter[0].equalsIgnoreCase("cpuspeed") && parameter[1] != null) {
              cpuSpeed=Long.parseLong(parameter[1]);
            }
 else             if (parameter[0].equalsIgnoreCase("cpucore") && parameter[1] != null) {
              cpuCores=Long.parseLong(parameter[1]);
            }
 else             if (parameter[0].equalsIgnoreCase("memory") && parameter[1] != null) {
              memory=Long.parseLong(parameter[1]);
            }
 else             if (parameter[0].equalsIgnoreCase("localstorage") && parameter[1] != null) {
              localstorageSize=Long.parseLong(parameter[1]);
            }
          }
        }
      }
    }
 else {
      String msg="uriString is not http so we're not taking care of the discovery for this: " + uri;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg);
      }
      return null;
    }
    String cluster=null;
    if (clusterId == null) {
      String msg="must specify cluster Id when adding host";
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg);
      }
      throw new RuntimeException(msg);
    }
 else {
      ClusterVO clu=_clusterDao.findById(clusterId);
      if (clu == null || (clu.getHypervisorType() != HypervisorType.Simulator)) {
        if (s_logger.isInfoEnabled())         s_logger.info("invalid cluster id or cluster is not for Simulator hypervisors");
        return null;
      }
      cluster=Long.toString(clusterId);
      if (clu.getGuid() == null) {
        clu.setGuid(UUID.randomUUID().toString());
      }
      _clusterDao.update(clusterId,clu);
    }
    String pod;
    if (podId == null) {
      String msg="must specify pod Id when adding host";
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg);
      }
      throw new RuntimeException(msg);
    }
 else {
      pod=Long.toString(podId);
    }
    Map<String,String> details=new HashMap<String,String>();
    Map<String,Object> params=new HashMap<String,Object>();
    details.put("username",username);
    params.put("username",username);
    details.put("password",password);
    params.put("password",password);
    params.put("zone",Long.toString(dcId));
    params.put("pod",pod);
    params.put("cluster",cluster);
    params.put("cpuspeed",Long.toString(cpuSpeed));
    params.put("cpucore",Long.toString(cpuCores));
    params.put("memory",Long.toString(memory));
    params.put("localstorage",Long.toString(localstorageSize));
    resources=createAgentResources(params);
    return resources;
  }
 catch (  Exception ex) {
    s_logger.error("Exception when discovering simulator hosts: " + ex.getMessage());
  }
  return null;
}
