@attr(tags=['advanced', 'advancedns', 'simulator'], required_hardware='true')
def test_02_project_counts_migrate_instance(self):
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count = project_list[0].cputotal
    expected_resource_count = int(self.services['service_offering']['cpunumber'])
    self.assertEqual(resource_count, expected_resource_count, 'Resource count should match with the expected resource count')
    host = findSuitableHostForMigration(self.apiclient, self.vm.id)
    if (host is None):
        self.skipTest(ERROR_NO_HOST_FOR_MIGRATION)
    self.debug(('Migrating instance: %s to host: %s' % (self.vm.name, host.name)))
    try:
        self.vm.migrate(self.apiclient, host.id)
    except Exception as e:
        self.fail(('Failed to migrate instance: %s' % e))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count_after_migrate = project_list[0].cputotal
    self.assertEqual(resource_count, resource_count_after_migrate, 'Resource count should be same after migrating the instance')
    return
