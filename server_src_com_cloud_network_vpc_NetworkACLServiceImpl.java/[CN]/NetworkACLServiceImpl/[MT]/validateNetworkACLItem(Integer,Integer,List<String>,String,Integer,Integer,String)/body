{
  if (portStart != null && !NetUtils.isValidPort(portStart)) {
    throw new InvalidParameterValueException("publicPort is an invalid value: " + portStart);
  }
  if (portEnd != null && !NetUtils.isValidPort(portEnd)) {
    throw new InvalidParameterValueException("Public port range is an invalid value: " + portEnd);
  }
  if (portStart != null && portEnd != null && portStart > portEnd) {
    throw new InvalidParameterValueException("Start port can't be bigger than end port");
  }
  if (sourceCidrList != null) {
    for (    String cidr : sourceCidrList) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,"Source cidrs formatting error " + cidr);
      }
    }
  }
  if (protocol != null) {
    if (StringUtils.isNumeric(protocol)) {
      int protoNumber=Integer.parseInt(protocol);
      if (protoNumber < 0 || protoNumber > 255) {
        throw new InvalidParameterValueException("Invalid protocol number: " + protoNumber);
      }
    }
 else {
      String supportedProtocols="tcp,udp,icmp,all";
      if (!supportedProtocols.contains(protocol.toLowerCase())) {
        throw new InvalidParameterValueException("Invalid protocol: " + protocol);
      }
    }
    if (!protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (icmpCode != null || icmpType != null)) {
      throw new InvalidParameterValueException("Can specify icmpCode and icmpType for ICMP protocol only");
    }
    if (protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (portStart != null || portEnd != null)) {
      throw new InvalidParameterValueException("Can't specify start/end port when protocol is ICMP");
    }
  }
  if (icmpType != null) {
    if (icmpType.longValue() != -1 && !NetUtils.validateIcmpType(icmpType.longValue())) {
      throw new InvalidParameterValueException("Invalid icmp type; should belong to [0-255] range");
    }
    if (icmpCode != null) {
      if (icmpCode.longValue() != -1 && !NetUtils.validateIcmpCode(icmpCode.longValue())) {
        throw new InvalidParameterValueException("Invalid icmp code; should belong to [0-15] range and can" + " be defined when icmpType belongs to [0-40] range");
      }
    }
  }
  if (action != null) {
    if (!("Allow".equalsIgnoreCase(action) || "Deny".equalsIgnoreCase(action))) {
      throw new InvalidParameterValueException("Invalid action. Allowed actions are Allow and Deny");
    }
  }
}
