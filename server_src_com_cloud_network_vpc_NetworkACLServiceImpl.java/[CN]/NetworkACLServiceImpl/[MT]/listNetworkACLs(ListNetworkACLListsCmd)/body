{
  Long id=cmd.getId();
  String name=cmd.getName();
  Long networkId=cmd.getNetworkId();
  Long vpcId=cmd.getVpcId();
  String keyword=cmd.getKeyword();
  Boolean display=cmd.getDisplay();
  SearchBuilder<NetworkACLVO> sb=_networkACLDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),Op.EQ);
  sb.and("name",sb.entity().getName(),Op.EQ);
  sb.and("vpcId",sb.entity().getVpcId(),Op.IN);
  sb.and("display",sb.entity().isDisplay(),Op.EQ);
  Account caller=CallContext.current().getCallingAccount();
  if (networkId != null) {
    SearchBuilder<NetworkVO> network=_networkDao.createSearchBuilder();
    network.and("networkId",network.entity().getId(),Op.EQ);
    sb.join("networkJoin",network,sb.entity().getId(),network.entity().getNetworkACLId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<NetworkACLVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<NetworkACLVO> ssc=_networkACLDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("description",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (display != null) {
    sc.setParameters("display",display);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (name != null) {
    sc.setParameters("name",name);
  }
  if (vpcId != null) {
    Vpc vpc=_entityMgr.findById(Vpc.class,vpcId);
    if (vpc == null) {
      throw new InvalidParameterValueException("Unable to find VPC");
    }
    _accountMgr.checkAccess(caller,null,true,vpc);
    sc.setParameters("vpcId",vpcId,0);
  }
 else {
    List<Long> permittedAccounts=new ArrayList<Long>();
    Long domainId=cmd.getDomainId();
    boolean isRecursive=cmd.isRecursive();
    String accountName=cmd.getAccountName();
    Long projectId=cmd.getProjectId();
    boolean listAll=cmd.listAll();
    Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
    _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,false);
    domainId=domainIdRecursiveListProject.first();
    isRecursive=domainIdRecursiveListProject.second();
    ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
    SearchBuilder<VpcVO> sbVpc=_vpcDao.createSearchBuilder();
    _accountMgr.buildACLSearchBuilder(sbVpc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
    SearchCriteria<VpcVO> scVpc=sbVpc.create();
    _accountMgr.buildACLSearchCriteria(scVpc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
    List<VpcVO> vpcs=_vpcDao.search(scVpc,null);
    List<Long> vpcIds=new ArrayList<Long>();
    for (    VpcVO vpc : vpcs) {
      vpcIds.add(vpc.getId());
    }
    vpcIds.add(0L);
    sc.setParameters("vpcId",vpcIds.toArray());
  }
  if (networkId != null) {
    sc.setJoinParameters("networkJoin","networkId",networkId);
  }
  Filter filter=new Filter(NetworkACLVO.class,"id",false,null,null);
  Pair<List<NetworkACLVO>,Integer> acls=_networkACLDao.searchAndCount(sc,filter);
  return new Pair<List<? extends NetworkACL>,Integer>(acls.first(),acls.second());
}
