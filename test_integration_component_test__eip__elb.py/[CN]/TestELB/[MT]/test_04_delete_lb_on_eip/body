def test_04_delete_lb_on_eip(self):
    'Test delete LB rule generated on EIP\n        '
    self.debug(("select id from account where account_name='%s';" % self.account.account.name))
    qresultset = self.dbclient.execute(("select id from account where account_name='%s';" % self.account.account.name))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'DB query should return a valid public IP address')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(('select public_ip_address from user_ip_address where is_system=0 and account_id=%s;' % account_id))
    qresultset = self.dbclient.execute(('select public_ip_address from user_ip_address where is_system=0 and account_id=%s;' % account_id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'DB query should return a valid public IP address')
    qresult = qresultset[0]
    public_ip = qresult[0]
    self.debug(('Fetching public IP for account: %s' % self.account.account.name))
    ip_addrs = PublicIPAddress.list(self.api_client, ipaddress=public_ip, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'List Public IP address should return valid IP address for network')
    lb_ip = ip_addrs[0]
    lb_rules = LoadBalancerRule.list(self.apiclient, publicipid=lb_ip.id, listall=True)
    self.assertEqual(isinstance(lb_rules, list), True, 'Atleast one LB rule must be present for public IP address')
    lb_rule = lb_rules[0]
    self.debug(('Deleting LB rule associated with IP: %s' % public_ip))
    try:
        cmd = deleteLoadBalancerRule.deleteLoadBalancerRuleCmd()
        cmd.id = lb_rule.id
        self.apiclient.deleteLoadBalancerRule(cmd)
    except Exception as e:
        self.fail(('Deleting LB rule failed for IP: %s-%s' % (public_ip, e)))
    config = list_configurations(self.apiclient, name='network.gc.wait')
    self.assertEqual(isinstance(config, list), True, 'Check list configurations response')
    gc_delay = config[0]
    self.debug(('network.gc.wait: %s' % gc_delay.value))
    config = list_configurations(self.apiclient, name='network.gc.interval')
    self.assertEqual(isinstance(config, list), True, 'Check list configurations response')
    gc_interval = config[0]
    self.debug(('network.gc.intervall: %s' % gc_interval.value))
    total_wait = (int(gc_interval.value) + int(gc_delay.value))
    time.sleep(total_wait)
    self.debug('LB rule deleted!')
    ip_addrs = PublicIPAddress.list(self.api_client, ipaddress=public_ip, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'Deleting LB rule should not delete public IP')
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient.remoteSSHClient(self.services['netscaler']['ipaddress'], 22, self.services['netscaler']['username'], self.services['netscaler']['password'])
        self.debug('command: show ip')
        res = ssh_client.execute('show ip')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count(public_ip), 1, 'One IP from EIP pool should be taken and configured on NS')
        self.debug('Command:show lb vserver')
        res = ssh_client.execute('show lb vserver')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertNotEqual(result.count('State: UP'), 2, 'User subnet IP should be enabled for LB service')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
