def test_02_elb_acquire_and_create(self):
    'Test ELB by acquiring IP and then creating a LB rule\n        '
    self.debug(('Acquiring new IP for network: %s' % self.guest_network.id))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, services=self.services['virtual_machine'])
    self.debug(('IP address: %s is acquired by network: %s' % (public_ip.ipaddress.ipaddress, self.guest_network.id)))
    self.debug(('Creating LB rule for public IP: %s' % public_ip.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], accountid=self.account.account.name, ipaddressid=public_ip.ipaddress.id, networkid=self.guest_network.id, domainid=self.account.account.domaind)
    self.debug(('Assigning VMs (%s, %s) to LB rule: %s' % (self.vm_1.name, self.vm_2.name, lb_rule.name)))
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    self.debug(('SSHing into VMs using ELB IP: %s' % public_ip.ipaddress.ipaddress))
    try:
        ssh_1 = self.vm_1.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
        self.debug('Command: hostname')
        result = ssh_1.execute('hostname')
        self.debug(('Result: %s' % result))
        if isinstance(result, list):
            res = result[0]
        else:
            self.fail('hostname retrieval failed!')
        self.assertIn(res, [self.vm_1.name, self.vm_2.name], 'SSH should return hostname of one of the VM')
        ssh_2 = self.vm_2.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
        self.debug('Command: hostname')
        result = ssh_2.execute('hostname')
        self.debug(('Result: %s' % result))
        if isinstance(result, list):
            res = result[0]
        else:
            self.fail('hostname retrieval failed!')
        self.assertIn(res, [self.vm_1.name, self.vm_2.name], 'SSH should return hostname of one of the VM')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.vm_1.ipaddress, e)))
    self.debug(("select is_system from user_ip_address where public_ip_address='%s';" % public_ip.ipaddress.ipaddress))
    qresultset = self.dbclient.execute(("select is_system from user_ip_address where public_ip_address='%s';" % public_ip.ipaddress.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 0, 'is_system value should be 0 for non-system generated LB rule')
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient.remoteSSHClient(self.services['netscaler']['ipaddress'], 22, self.services['netscaler']['username'], self.services['netscaler']['password'])
        self.debug('command: show ip')
        res = ssh_client.execute('show ip')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(public_ip.ipaddress.ipaddress), 1, 'One IP from EIP pool should be taken and configured on NS')
        self.debug('Command:show lb vserver')
        res = ssh_client.execute('show lb vserver')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('State: UP'), 4, 'User subnet IP should be enabled for LB service')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
