def test_03_elb_delete_lb_system(self):
    'Test delete LB rule generated with public IP with is_system = 1\n        '
    self.debug(('Fetching LB IP for account: %s' % self.account.account.name))
    ip_addrs = PublicIPAddress.list(self.api_client, associatednetworkid=self.guest_network.id, account=self.account.account.name, domainid=self.account.account.domainid, forloadbalancing=True, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'List Public IP address should return valid IP address for network')
    lb_ip = ip_addrs[0]
    self.debug(('LB IP generated for account: %s is: %s' % (self.account.account.name, lb_ip.ipaddress)))
    self.debug(('Deleting LB rule: %s' % self.lb_rule.id))
    self.lb_rule.delete(self.apiclient)
    config = list_configurations(self.apiclient, name='network.gc.wait')
    self.assertEqual(isinstance(config, list), True, 'Check list configurations response')
    gc_delay = config[0]
    self.debug(('network.gc.wait: %s' % gc_delay.value))
    config = list_configurations(self.apiclient, name='network.gc.interval')
    self.assertEqual(isinstance(config, list), True, 'Check list configurations response')
    gc_interval = config[0]
    self.debug(('network.gc.intervall: %s' % gc_interval.value))
    total_wait = (int(gc_interval.value) + int(gc_delay.value))
    time.sleep(total_wait)
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient.remoteSSHClient(self.services['netscaler']['ipaddress'], 22, self.services['netscaler']['username'], self.services['netscaler']['password'])
        self.debug('command: show ip')
        res = ssh_client.execute('show ip')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(lb_ip.ipaddress), 1, 'One IP from EIP pool should be taken and configured on NS')
        self.debug('Command:show lb vserver')
        res = ssh_client.execute('show lb vserver')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('State: UP'), 2, 'User subnet IP should be enabled for LB service')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
