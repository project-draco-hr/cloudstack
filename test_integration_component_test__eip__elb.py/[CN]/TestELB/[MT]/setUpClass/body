@classmethod
def setUpClass(cls):
    cls.api_client = super(TestELB, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostypeid'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id)
    networks = Network.list(cls.api_client, zoneid=cls.zone.id, listall=True)
    if isinstance(networks, list):
        cls.guest_network = networks[0]
    else:
        raise Exception(('List networks returned empty response for zone: %s' % cls.zone.id))
    cls.lb_rule = LoadBalancerRule.create(cls.api_client, cls.services['lbrule'], accountid=cls.account.account.name, networkid=cls.guest_network.id, domainid=cls.account.account.domainid)
    cls.lb_rule.assign(cls.api_client, [cls.vm_1, cls.vm_2])
    cls._cleanup = [cls.account, cls.service_offering]
    return
