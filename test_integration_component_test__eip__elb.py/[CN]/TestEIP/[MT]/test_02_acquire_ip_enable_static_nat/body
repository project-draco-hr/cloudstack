def test_02_acquire_ip_enable_static_nat(self):
    'Test associate new IP and enable static NAT for new IP and the VM\n        '
    self.debug(('Acquiring new IP for network: %s' % self.guest_network.id))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, services=self.services['virtual_machine'])
    self.debug(('IP address: %s is acquired by network: %s' % (public_ip.ipaddress.ipaddress, self.guest_network.id)))
    self.debug(('Enabling static NAT for IP Address: %s' % public_ip.ipaddress.ipaddress))
    StaticNATRule.enable(self.apiclient, ipaddressid=public_ip.ipaddress.id, virtualmachineid=self.virtual_machine.id)
    self.debug(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % public_ip.ipaddress.ipaddress))
    qresultset = self.dbclient.execute(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % public_ip.ipaddress.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 0, 'user_ip_address.is_system value should be 0 for new IP')
    self.assertEqual(qresult[1], 1, 'user_ip_address.one_to_one_nat value should be 1 for static NAT')
    self.debug(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % self.source_nat.ipaddress))
    qresultset = self.dbclient.execute(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % self.source_nat.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 0, 'user_ip_address.is_system value should be 0 old source NAT')
    try:
        self.debug(('SSH into VM: %s' % public_ip.ipaddress.ipaddress))
        ssh = self.virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (public_ip.ipaddress.ipaddress, e)))
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient.remoteSSHClient(self.services['netscaler']['ipaddress'], 22, self.services['netscaler']['username'], self.services['netscaler']['password'])
        self.debug('command: show ip')
        res = ssh_client.execute('show ip')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(public_ip.ipaddress.ipaddress), 1, 'One IP from EIP pool should be taken and configured on NS')
        self.debug('Command:show inat')
        res = ssh_client.execute('show inat')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('USIP: ON'), 2, 'User source IP should be enabled for INAT service')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
