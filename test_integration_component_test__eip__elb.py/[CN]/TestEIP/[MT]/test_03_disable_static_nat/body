def test_03_disable_static_nat(self):
    'Test disable static NAT and release EIP acquired\n        '
    self.debug(('Fetching static NAT for VM: %s' % self.virtual_machine.name))
    ip_addrs = PublicIPAddress.list(self.api_client, associatednetworkid=self.guest_network.id, isstaticnat=True, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'List Public IP address should return valid IP address for network')
    static_nat = ip_addrs[0]
    self.debug(('Static NAT for VM: %s is: %s' % (self.virtual_machine.name, static_nat.ipaddress)))
    self.debug(("select is_system from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    qresultset = self.dbclient.execute(("select is_system from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 0, 'user_ip_address.is_system value should be 0')
    self.debug(('Disassociate Static NAT: %s' % static_nat.ipaddress))
    cmd = disassociateIpAddress.disassociateIpAddressCmd()
    cmd.id = static_nat.id
    self.apiclient.disassociateIpAddress(cmd)
    self.debug('Sleeping - after disassociating static NAT')
    time.sleep(self.services['sleep'])
    self.debug(("select state from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    qresultset = self.dbclient.execute(("select state from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 'Free', 'Ip should be marked as Free after disassociate IP')
    self.debug(('Fetching static NAT for VM: %s' % self.virtual_machine.name))
    ip_addrs = PublicIPAddress.list(self.api_client, associatednetworkid=self.guest_network.id, isstaticnat=True, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'List Public IP address should return valid IP address for network')
    static_nat = ip_addrs[0]
    self.debug(('Static NAT for VM: %s is: %s' % (self.virtual_machine.name, static_nat.ipaddress)))
    self.debug(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    qresultset = self.dbclient.execute(("select is_system, one_to_one_nat from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 1, 'is_system value should be 1 for automatically assigned IP')
    self.assertEqual(qresult[1], 1, 'one_to_one_nat value should be 1 for automatically assigned IP')
    try:
        self.debug(('SSH into VM: %s' % static_nat.ipaddress))
        ssh = self.virtual_machine.get_ssh_client(ipaddress=static_nat.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (static_nat.ipaddress, e)))
    self.debug(('SSH into netscaler: %s' % self.services['netscaler']['ipaddress']))
    try:
        ssh_client = remoteSSHClient.remoteSSHClient(self.services['netscaler']['ipaddress'], 22, self.services['netscaler']['username'], self.services['netscaler']['password'])
        self.debug('command: show ip')
        res = ssh_client.execute('show ip')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(static_nat.ipaddress), 1, 'One IP from EIP pool should be taken and configured on NS')
        self.debug('Command:show inat')
        res = ssh_client.execute('show inat')
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('USIP: ON'), 2, 'User source IP should be enabled for INAT service')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
