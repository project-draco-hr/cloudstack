def test_04_disable_static_nat_system(self):
    'Test disable static NAT with system = True\n        '
    self.debug(('Fetching static NAT for VM: %s' % self.virtual_machine.name))
    ip_addrs = PublicIPAddress.list(self.api_client, associatednetworkid=self.guest_network.id, isstaticnat=True, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
    self.assertEqual(isinstance(ip_addrs, list), True, 'List Public IP address should return valid IP address for network')
    static_nat = ip_addrs[0]
    self.debug(('Static NAT for VM: %s is: %s' % (self.virtual_machine.name, static_nat.ipaddress)))
    self.debug(("select is_system from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    qresultset = self.dbclient.execute(("select is_system from user_ip_address where public_ip_address='%s';" % static_nat.ipaddress))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    self.assertEqual(qresult[0], 1, 'user_ip_address.is_system value should be 1')
    self.debug(('Disassociate Static NAT: %s' % static_nat.ipaddress))
    with self.assertRaises(Exception):
        cmd = disassociateIpAddress.disassociateIpAddressCmd()
        cmd.id = static_nat.id
        apiclient.disassociateIpAddress(cmd)
    self.debug('Disassociate system IP failed')
    return
