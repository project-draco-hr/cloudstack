@attr(tags=['advanced', 'advancedsg', 'basic'], required_hardware='True')
def test_01_positive_path(self):
    '\n        positive test for volume life cycle\n        # 1. Deploy a vm [vm1] with shared storage and data disk\n        # 2. Deploy a vm [vm2]with shared storage without data disk\n        # 3. TBD\n        # 4. Create a new volume and attache to vm2\n        # 5. Detach data disk from vm1 and download it\n        #  Variance(1-9)\n        # 6. Upload volume by providing url of downloaded volume in step 5\n        # 7. Attach the volume to a different vm - vm2\n        # 8. Try to delete an attached volume\n        # 9. Create template from root volume of VM1\n        # 10. Create new VM using the template created in step 9\n        # 11. Delete the template\n        # 12. Detach the disk from VM2 and re-attach the disk to VM1\n        # 13.TBD\n        # 14.TBD\n        # 15.Migrate volume(detached) and then attach to a vm and live-migrate\n        # 16.Upload volume of size smaller  than\n            storage.max.volume.upload.size(leaving the negative case)\n        # 17.TBD\n        # 18.TBD\n        # 19.TBD\n        # 20.Detach data disks from VM2 and delete volume\n\n        '
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest(('feature is not supported in %s' % self.hypervisor))
    self.virtual_machine_1 = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_1.id, zoneid=self.zone.id, diskofferingid=self.disk_offering_1.id, mode=self.testdata['mode'])
    verify_vm(self, self.virtual_machine_1.id)
    list_volume = Volume.list(self.userapiclient, virtualmachineid=self.virtual_machine_1.id, type='DATADISK')
    self.assertEqual(validateList(list_volume)[0], PASS, ('Check List volume response for vm id  %s' % self.virtual_machine_1.id))
    list_data_volume_for_vm1 = list_volume[0]
    self.assertEqual(len(list_volume), 1, ('There is no data disk attached to vm id:%s' % self.virtual_machine_1.id))
    self.assertEqual(list_data_volume_for_vm1.virtualmachineid, str(self.virtual_machine_1.id), 'Check if volume state (attached) is reflected')
    self.virtual_machine_2 = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_1.id, zoneid=self.zone.id, mode=self.testdata['mode'])
    verify_vm(self, self.virtual_machine_2.id)
    self.volume = Volume.create(self.userapiclient, services=self.testdata['volume'], diskofferingid=self.disk_offering_1.id, zoneid=self.zone.id)
    list_data_volume = Volume.list(self.userapiclient, id=self.volume.id)
    self.assertEqual(validateList(list_data_volume)[0], PASS, ('Check List volume response for volume %s' % self.volume.id))
    self.assertEqual(list_data_volume[0].id, self.volume.id, ('check list volume response for volume id:  %s' % self.volume.id))
    self.debug(('volume id %s got created successfully' % list_data_volume[0].id))
    self.virtual_machine_2.attach_volume(self.userapiclient, self.volume)
    verify_attach_volume(self, self.virtual_machine_2.id, self.volume.id)
    if self.zone.localstorageenabled:
        self.virtual_machine_local_3 = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_2.id, zoneid=self.zone.id, mode=self.testdata['mode'])
        verify_vm(self, self.virtual_machine_local_3.id)
        self.local_volumes = []
        for i in range(2):
            local_volume = Volume.create(self.userapiclient, services=self.testdata['volume'], diskofferingid=self.disk_offering_local.id, zoneid=self.zone.id)
            list_local_data_volume = Volume.list(self.userapiclient, id=local_volume.id)
            self.assertEqual(validateList(list_local_data_volume)[0], PASS, ('Check List volume response for volume %s' % local_volume.id))
            self.assertEqual(list_local_data_volume[0].id, local_volume.id, ('check list volume response for volume id:  %s' % local_volume.id))
            self.debug(('volume id %s got created successfully' % list_local_data_volume[0].id))
            self.local_volumes.append(local_volume)
        self.virtual_machine_1.attach_volume(self.userapiclient, self.local_volumes[0])
        verify_attach_volume(self, self.virtual_machine_1.id, self.local_volumes[0].id)
    if self.list_storage:
        self.virtual_machine_zone_4 = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.tagged_so.id, zoneid=self.zone.id, mode=self.testdata['mode'])
        verify_vm(self, self.virtual_machine_zone_4.id)
        self.zone_volumes = []
        for i in range(2):
            zone_volume = Volume.create(self.userapiclient, services=self.testdata['volume'], diskofferingid=self.disk_offering_tagged.id, zoneid=self.zone.id)
            list_zone_data_volume = Volume.list(self.userapiclient, id=zone_volume.id)
            self.assertEqual(validateList(list_zone_data_volume)[0], PASS, ('Check List volume response for volume %s' % zone_volume.id))
            self.assertEqual(list_zone_data_volume[0].id, zone_volume.id, ('check list volume response for volume id:  %s' % zone_volume.id))
            self.debug(('volume id:%s got created successfully' % list_zone_data_volume[0].id))
            self.zone_volumes.append(zone_volume)
        self.virtual_machine_1.attach_volume(self.userapiclient, self.zone_volumes[0])
        verify_attach_volume(self, self.virtual_machine_1.id, self.zone_volumes[0].id)
        self.cluster_volume = Volume.create(self.userapiclient, services=self.testdata['volume'], diskofferingid=self.disk_offering_1.id, zoneid=self.zone.id)
        list_cluster_volume = Volume.list(self.userapiclient, id=self.cluster_volume.id)
        self.assertEqual(validateList(list_cluster_volume)[0], PASS, ('Check List volume response for volume %s' % self.cluster_volume.id))
        self.assertEqual(list_cluster_volume[0].id, str(self.cluster_volume.id), ('volume does not exist %s' % self.cluster_volume.id))
        self.debug(('volume id %s got created successfuly' % list_cluster_volume[0].id))
        self.virtual_machine_zone_4.attach_volume(self.userapiclient, self.cluster_volume)
        verify_attach_volume(self, self.virtual_machine_zone_4.id, self.cluster_volume.id)
    if (self.list_storage and self.zone.localstorageenabled):
        self.virtual_machine_local_3.attach_volume(self.userapiclient, self.zone_volumes[1])
        verify_attach_volume(self, self.virtual_machine_local_3.id, self.zone_volumes[1].id)
        self.virtual_machine_zone_4.attach_volume(self.userapiclient, self.local_volumes[1])
        verify_attach_volume(self, self.virtual_machine_zone_4.id, self.local_volumes[1].id)
    self.virtual_machine_1.detach_volume(self.userapiclient, volume=list_data_volume_for_vm1)
    verify_detach_volume(self, self.virtual_machine_1.id, list_data_volume_for_vm1.id)
    self.extract_volume = Volume.extract(self.userapiclient, volume_id=list_data_volume_for_vm1.id, zoneid=self.zone.id, mode='HTTP_DOWNLOAD')
    self.debug(('extracted url is%s  :' % self.extract_volume.url))
    try:
        formatted_url = urllib.unquote_plus(self.extract_volume.url)
        self.debug(('Attempting to download volume at url %s' % formatted_url))
        response = urllib.urlopen(formatted_url)
        self.debug(('response from volume url %s' % response.getcode()))
        (fd, path) = tempfile.mkstemp()
        self.debug(('Saving volume %s to path %s' % (list_data_volume_for_vm1.id, path)))
        os.close(fd)
        with open(path, 'wb') as fd:
            fd.write(response.read())
        self.debug('Saved volume successfully')
    except Exception:
        self.fail(('Extract Volume Failed with invalid URL %s (vol id: %s)' % (self.extract_volume, list_data_volume_for_vm1.id)))
    if ('OVA' in self.extract_volume.url.upper()):
        self.testdata['configurableData']['upload_volume']['format'] = 'OVA'
    if ('QCOW2' in self.extract_volume.url.upper()):
        self.testdata['configurableData']['upload_volume']['format'] = 'QCOW2'
    self.upload_response = Volume.upload(self.userapiclient, zoneid=self.zone.id, url=self.extract_volume.url, services=self.testdata['configurableData']['upload_volume'])
    self.upload_response.wait_for_upload(self.userapiclient)
    self.debug(('uploaded volume id is %s' % self.upload_response.id))
    self.virtual_machine_2.attach_volume(self.userapiclient, volume=self.upload_response)
    verify_attach_volume(self, self.virtual_machine_2.id, self.upload_response.id)
    try:
        self.volume.delete(self.userapiclient)
        self.fail(('Volume got deleted in attached state %s ' % self.volume.id))
    except Exception as e:
        self.debug(('Attached volume deletion failed because  %s' % e))
    self.virtual_machine_1.stop(self.userapiclient)
    self.list_root_disk_for_vm1 = Volume.list(self.userapiclient, virtualmachineid=self.virtual_machine_1.id, type='ROOT')
    self.assertEqual(validateList(self.list_root_disk_for_vm1)[0], PASS, ('Check List volume response for vm %s' % self.virtual_machine_1.id))
    self.assertEqual(len(self.list_root_disk_for_vm1), 1, ('list root disk for vm1 is empty : %s' % self.virtual_machine_1.id))
    self.template_from_vm1_root_disk = Template.create(self.userapiclient, self.testdata['template'], self.list_root_disk_for_vm1[0].id, account=self.account.name, domainid=self.account.domainid)
    list_template = Template.list(self.userapiclient, templatefilter=self.testdata['templatefilter'], id=self.template_from_vm1_root_disk.id)
    self.assertEqual(validateList(list_template)[0], PASS, ('Check List template response for template id %s' % self.template_from_vm1_root_disk.id))
    self.assertEqual(len(list_template), 1, ('list template response is empty for template id  : %s' % list_template[0].id))
    self.assertEqual(list_template[0].id, self.template_from_vm1_root_disk.id, 'list template id is not same as created template')
    self.debug(('Template id:%s got created successfully' % self.template_from_vm1_root_disk.id))
    self.virtual_machine_1.start(self.userapiclient)
    self.virtual_machine_3 = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template_from_vm1_root_disk.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_1.id, zoneid=self.zone.id, mode=self.testdata['mode'])
    verify_vm(self, self.virtual_machine_3.id)
    try:
        self.template_from_vm1_root_disk.delete(self.userapiclient)
        self.debug(('Template id: %s got deleted successfuly' % self.template_from_vm1_root_disk.id))
    except Exception as e:
        raise Exception(('Template deletion failed with error %s' % e))
    list_template = Template.list(self.userapiclient, templatefilter=self.testdata['templatefilter'], id=self.template_from_vm1_root_disk.id)
    self.assertEqual(list_template, None, ('Template is not deleted, id %s:' % self.template_from_vm1_root_disk.id))
    self.debug(('Template id%s got deleted successfully' % self.template_from_vm1_root_disk.id))
    verify_vm(self, self.virtual_machine_3.id)
    self.virtual_machine_2.detach_volume(self.userapiclient, volume=self.upload_response)
    verify_detach_volume(self, self.virtual_machine_2.id, self.upload_response.id)
    self.virtual_machine_1.attach_volume(self.userapiclient, volume=self.upload_response)
    verify_attach_volume(self, self.virtual_machine_1.id, self.upload_response.id)
    self.migrate_volume = Volume.create(self.userapiclient, services=self.testdata['volume'], diskofferingid=self.disk_offering_1.id, zoneid=self.zone.id)
    list_volume = Volume.list(self.apiclient, id=self.migrate_volume.id)
    self.assertEqual(validateList(list_volume)[0], PASS, ('Check List volume response for volume %s' % self.migrate_volume.id))
    self.assertEqual(list_volume[0].id, str(self.migrate_volume.id), ('volume does not exist %s' % self.migrate_volume.id))
    self.debug(('volume id %s got created successfuly' % list_volume[0].id))
    self.virtual_machine_1.attach_volume(self.userapiclient, self.migrate_volume)
    verify_attach_volume(self, self.virtual_machine_1.id, self.migrate_volume.id)
    self.virtual_machine_1.detach_volume(self.userapiclient, volume=self.migrate_volume)
    verify_detach_volume(self, self.virtual_machine_1.id, self.migrate_volume.id)
    list_volume = Volume.list(self.apiclient, id=self.migrate_volume.id)
    self.assertEqual(validateList(list_volume)[0], PASS, ('Check List volume response for volume %s' % self.migrate_volume.id))
    self.assertEqual(list_volume[0].id, str(self.migrate_volume.id), ('volume does not exist %s' % self.migrate_volume.id))
    self.debug(('volume id %s got created successfuly' % list_volume[0].id))
    list_pool = StoragePool.list(self.apiclient, id=list_volume[0].storageid)
    self.assertEqual(validateList(list_pool)[0], PASS, ('Check List pool response for storage id %s' % list_volume[0].storageid))
    self.assertGreater(len(list_pool), 0, ('Check the list list storagepoolresponse for vm id:  %s' % list_volume[0].storageid))
    list_pools = StoragePool.list(self.apiclient, scope=list_pool[0].scope)
    self.assertEqual(validateList(list_pools)[0], PASS, ('Check List pool response for scope %s' % list_pool[0].scope))
    self.assertGreater(len(list_pools), 0, ('Check the list vm response for scope :%s' % list_volume[0].scope))
    storagepoolid = None
    for i in range(len(list_pools)):
        if (list_volume[0].storageid != list_pools[i].id):
            storagepoolid = list_pools[i].id
            break
        else:
            self.debug('No pool available for volume migration ')
    if (storagepoolid is not None):
        try:
            volume_migrate = Volume.migrate(self.apiclient, storageid=storagepoolid, volumeid=self.migrate_volume.id)
        except Exception as e:
            raise Exception(('Volume migration failed with error %s' % e))
        self.virtual_machine_2.attach_volume(self.userapiclient, self.migrate_volume)
        verify_attach_volume(self, self.virtual_machine_2.id, self.migrate_volume.id)
        pool_for_migration = StoragePool.listForMigration(self.apiclient, id=self.migrate_volume.id)
        self.assertEqual(validateList(pool_for_migration)[0], PASS, ('Check list pool For Migration response for volume %s' % self.migrate_volume.id))
        self.assertGreater(len(pool_for_migration), 0, ('Check the listForMigration response for volume :%s' % self.migrate_volume.id))
        try:
            volume_migrate = Volume.migrate(self.apiclient, storageid=pool_for_migration[0].id, volumeid=self.migrate_volume.id, livemigrate=True)
        except Exception as e:
            raise Exception(('Volume migration failed with error %s' % e))
    else:
        try:
            self.migrate_volume.delete(self.userapiclient)
            self.debug(('volume id:%s got deleted successfully ' % self.migrate_volume.id))
        except Exception as e:
            raise Exception(('Volume deletion failed with error %s' % e))
    self.testdata['configurableData']['upload_volume']['format'] = 'VHD'
    volume_upload = Volume.upload(self.userapiclient, self.testdata['configurableData']['upload_volume'], zoneid=self.zone.id)
    volume_upload.wait_for_upload(self.userapiclient)
    self.debug(('volume id :%s got uploaded successfully is ' % volume_upload.id))
    self.virtual_machine_2.detach_volume(self.userapiclient, volume=self.volume)
    verify_detach_volume(self, self.virtual_machine_2.id, self.volume.id)
    try:
        self.volume.delete(self.userapiclient)
        self.debug(('volume id:%s got deleted successfully ' % self.volume.id))
    except Exception as e:
        raise Exception(('Volume deletion failed with error %s' % e))
