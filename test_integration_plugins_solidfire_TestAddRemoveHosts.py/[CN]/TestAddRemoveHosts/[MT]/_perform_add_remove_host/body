def _perform_add_remove_host(self, primary_storage_id, sr_name):
    xen_sr = self.xen_session.xenapi.SR.get_by_name_label(sr_name)[0]
    pbds = self.xen_session.xenapi.SR.get_PBDs(xen_sr)
    self._verify_all_pbds_attached(pbds)
    num_pbds = len(pbds)
    sf_vag_id = self._get_sf_vag_id(self.cluster.id, primary_storage_id)
    host_iscsi_iqns = self._get_host_iscsi_iqns()
    sf_vag = self._get_sf_vag(sf_vag_id)
    sf_vag_initiators = self._get_sf_vag_initiators(sf_vag)
    self._verifyVag(host_iscsi_iqns, sf_vag_initiators)
    sf_vag_initiators_len_orig = len(sf_vag_initiators)
    xen_session = XenAPI.Session(self.testdata[TestData.urlOfNewHost])
    xenserver = self.testdata[TestData.xenServer]
    xen_session.xenapi.login_with_password(xenserver[TestData.username], xenserver[TestData.password])
    xen_session.xenapi.pool.join(self.xs_pool_master_ip, xenserver[TestData.username], xenserver[TestData.password])
    time.sleep(60)
    pbds = self.xen_session.xenapi.SR.get_PBDs(xen_sr)
    self.assertEqual(len(pbds), (num_pbds + 1), "'len(pbds)' is not equal to 'num_pbds + 1'.")
    num_pbds = (num_pbds + 1)
    num_pbds_not_attached = 0
    for pbd in pbds:
        pbd_record = self.xen_session.xenapi.PBD.get_record(pbd)
        if (pbd_record['currently_attached'] == False):
            num_pbds_not_attached = (num_pbds_not_attached + 1)
    self.assertEqual(num_pbds_not_attached, 1, "'num_pbds_not_attached' is not equal to 1.")
    host = Host.create(self.apiClient, self.cluster, self.testdata[TestData.newHost], hypervisor='XenServer')
    self.assertTrue(isinstance(host, Host), "'host' is not a 'Host'.")
    pbds = self.xen_session.xenapi.SR.get_PBDs(xen_sr)
    self.assertEqual(len(pbds), num_pbds, "'len(pbds)' is not equal to 'num_pbds'.")
    self._verify_all_pbds_attached(pbds)
    host_iscsi_iqns = self._get_host_iscsi_iqns()
    sf_vag = self._get_sf_vag(sf_vag_id)
    sf_vag_initiators = self._get_sf_vag_initiators(sf_vag)
    self._verifyVag(host_iscsi_iqns, sf_vag_initiators)
    sf_vag_initiators_len_new = len(sf_vag_initiators)
    self.assertEqual(sf_vag_initiators_len_new, (sf_vag_initiators_len_orig + 1), "sf_vag_initiators_len_new' != sf_vag_initiators_len_orig + 1")
    host.delete(self.apiClient)
    pbds = self.xen_session.xenapi.SR.get_PBDs(xen_sr)
    self.assertEqual(len(pbds), num_pbds, "'len(pbds)' is not equal to 'num_pbds'.")
    self._verify_all_pbds_attached(pbds)
    host_iscsi_iqns = self._get_host_iscsi_iqns()
    sf_vag = self._get_sf_vag(sf_vag_id)
    sf_vag_initiators = self._get_sf_vag_initiators(sf_vag)
    self.assertEqual((len(host_iscsi_iqns) - 1), len(sf_vag_initiators), "'len(host_iscsi_iqns) - 1' is not equal to 'len(sf_vag_initiators)'.")
    host_ref = self.xen_session.xenapi.host.get_by_name_label(self.testdata[TestData.newHostDisplayName])[0]
    self.xen_session.xenapi.pool.eject(host_ref)
    time.sleep(120)
    pbds = self.xen_session.xenapi.SR.get_PBDs(xen_sr)
    self.assertEqual(len(pbds), (num_pbds - 1), "'len(pbds)' is not equal to 'num_pbds - 1'.")
    self._verify_all_pbds_attached(pbds)
    host_iscsi_iqns = self._get_host_iscsi_iqns()
    sf_vag = self._get_sf_vag(sf_vag_id)
    sf_vag_initiators = self._get_sf_vag_initiators(sf_vag)
    self._verifyVag(host_iscsi_iqns, sf_vag_initiators)
    sf_vag_initiators_len_new = len(sf_vag_initiators)
    self.assertEqual(sf_vag_initiators_len_new, sf_vag_initiators_len_orig, "sf_vag_initiators_len_new' != sf_vag_initiators_len_orig")
