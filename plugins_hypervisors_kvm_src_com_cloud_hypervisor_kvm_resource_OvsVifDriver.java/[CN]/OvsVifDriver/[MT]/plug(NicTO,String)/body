{
  s_logger.debug("plugging nic=" + nic);
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  intf.setVirtualPortType("openvswitch");
  String vlanId=null;
  String logicalSwitchUuid=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    URI broadcastUri=nic.getBroadcastUri();
    vlanId=broadcastUri.getHost();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    logicalSwitchUuid=nic.getBroadcastUri().getSchemeSpecificPart();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {
    vlanId=NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) && !vlanId.equalsIgnoreCase("untagged")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug("creating a vlan dev and bridge for guest traffic per traffic label " + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get("private"),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
      s_logger.debug("nic " + nic + " needs to be connected to LogicalSwitch "+ logicalSwitchUuid);
      intf.setVirtualPortInterfaceId(nic.getUuid());
      String brName=(trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get("private");
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType));
    }
 else {
      intf.defBridgeNet(_bridges.get("guest"),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork(_bridges.get("linklocal"));
    intf.defBridgeNet(_bridges.get("linklocal"),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase("untagged")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug("creating a vlan dev and bridge for public traffic per traffic label " + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get("public"),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else {
      intf.defBridgeNet(_bridges.get("public"),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get("private"),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get("private") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType));
  }
  return intf;
}
