@staticmethod
def getSrcForwardingRules(srcUser, destUser, address, vmIdMap):
    columns = ['id', 'public_port', 'private_ip_address', 'private_port', 'enabled', 'protocol', 'forwarding', 'algorithm']
    ruleRows = GLOBALS['SRC_SYSTEM'].db.getDbValues('ip_forwarding', columns, {'public_ip_address': address, })
    activeRules = []
    for ruleRow in ruleRows:
        srcVmId = VM.getVmId(GLOBALS['SRC_SYSTEM'], srcUser.accountId, ruleRow['private_ip_address'])
        destVmId = vmIdMap.get(srcVmId)
        if (destVmId == None):
            continue
        if (ruleRow['forwarding'] == '1'):
            activeRules.append(ForwardingRule.PortForwardingRule(address, ruleRow['public_port'], PublicIp.getGuestIpAddress(GLOBALS['DEST_SYSTEM'], destVmId), ruleRow['private_port'], ruleRow['enabled'], ruleRow['protocol']))
        else:
            activeRules.append(ForwardingRule.LoadBalancerRule(destUser.accountId, address, ruleRow['public_port'], ruleRow['private_port'], destVmId, ruleRow['algorithm']))
    return activeRules
