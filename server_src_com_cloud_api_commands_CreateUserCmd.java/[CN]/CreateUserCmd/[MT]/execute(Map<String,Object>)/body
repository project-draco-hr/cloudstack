{
  String username=(String)params.get(BaseCmd.Properties.USERNAME.getName());
  String password=(String)params.get(BaseCmd.Properties.PASSWORD.getName());
  String firstname=(String)params.get(BaseCmd.Properties.FIRSTNAME.getName());
  String lastname=(String)params.get(BaseCmd.Properties.LASTNAME.getName());
  String email=(String)params.get(BaseCmd.Properties.EMAIL.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long accountType=(Long)params.get(BaseCmd.Properties.ACCOUNT_TYPE.getName());
  String timezone=(String)params.get(BaseCmd.Properties.TIMEZONE.getName());
  if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (accountName != null) {
    Account account=getManagementServer().findActiveAccount(accountName,domainId);
    if (account != null) {
      accountType=Long.valueOf((long)account.getType());
    }
  }
 else {
    accountName=username;
  }
  User createdUser=null;
  try {
    createdUser=getManagementServer().createUserAPI(username,password,firstname,lastname,domainId,accountName,accountType.shortValue(),email,timezone);
  }
 catch (  CloudRuntimeException ex) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("exception creating user: " + ex);
    }
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,ex.getMessage());
  }
  if (createdUser == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"failed to create user");
  }
 else {
    Account userAccount=getManagementServer().findAccountById(Long.valueOf(createdUser.getAccountId()));
    if (userAccount != null) {
      domainId=userAccount.getDomainId();
      accountName=userAccount.getAccountName();
    }
  }
  List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),createdUser.getId().toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.USERNAME.getName(),createdUser.getUsername()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.FIRSTNAME.getName(),createdUser.getFirstname()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.LASTNAME.getName(),createdUser.getLastname()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.EMAIL.getName(),createdUser.getEmail()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(createdUser.getCreated())));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),createdUser.getState()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountName));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT_TYPE.getName(),accountType));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),domainId.toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(domainId).getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TIMEZONE.getName(),createdUser.getTimezone()));
  embeddedObject.add(new Pair<String,Object>("user",new Object[]{returnValues}));
  return embeddedObject;
}
