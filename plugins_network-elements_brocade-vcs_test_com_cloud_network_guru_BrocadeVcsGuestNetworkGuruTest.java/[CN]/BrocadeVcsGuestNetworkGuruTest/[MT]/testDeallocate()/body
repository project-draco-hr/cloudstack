{
  final NetworkVO network=mock(NetworkVO.class);
  when(network.getName()).thenReturn("testnetwork");
  when(network.getState()).thenReturn(State.Implementing);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  when(network.getDataCenterId()).thenReturn(NETWORK_ID);
  final NicProfile nic=mock(NicProfile.class);
  when(nic.getMacAddress()).thenReturn("macaddress");
  when(nic.getReservationStrategy()).thenReturn(ReservationStrategy.Start);
  final VirtualMachineProfile vmProfile=mock(VirtualMachineProfile.class);
  final HostVO brocadeHost=mock(HostVO.class);
  when(hostdao.findById(anyLong())).thenReturn(brocadeHost);
  when(brocadeHost.getId()).thenReturn(NETWORK_ID);
  when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID);
  final BrocadeVcsDeviceVO brocadeDevice=mock(BrocadeVcsDeviceVO.class);
  when(brocadeDevice.getHostId()).thenReturn(NETWORK_ID);
  final List<BrocadeVcsDeviceVO> devices=new ArrayList();
  devices.add(brocadeDevice);
  when(vcsdao.listByPhysicalNetwork(anyLong())).thenReturn(devices);
  final DisassociateMacFromNetworkAnswer answer=mock(DisassociateMacFromNetworkAnswer.class);
  when(answer.getResult()).thenReturn(true);
  when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  guru.deallocate(network,nic,vmProfile);
  verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any());
}
