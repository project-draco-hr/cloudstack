{
  final NetworkVO network=mock(NetworkVO.class);
  when(network.getName()).thenReturn("testnetwork");
  when(network.getState()).thenReturn(State.Implementing);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  when(network.getBroadcastUri()).thenReturn(new URI("vlan://14"));
  when(network.getDataCenterId()).thenReturn(NETWORK_ID);
  final NicProfile nic=mock(NicProfile.class);
  when(nic.getMacAddress()).thenReturn("macaddress");
  when(nic.getReservationStrategy()).thenReturn(ReservationStrategy.Start);
  final VirtualMachineProfile vmProfile=mock(VirtualMachineProfile.class);
  final DeployDestination dest=mock(DeployDestination.class);
  final DataCenterVO dc=mock(DataCenterVO.class);
  when(dest.getDataCenter()).thenReturn(dc);
  when(dcdao.findById((long)anyInt())).thenReturn(dc);
  final HostVO brocadeHost=mock(HostVO.class);
  when(hostdao.findById(anyLong())).thenReturn(brocadeHost);
  when(brocadeHost.getId()).thenReturn(NETWORK_ID);
  when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID);
  final BrocadeVcsDeviceVO brocadeDevice=mock(BrocadeVcsDeviceVO.class);
  when(brocadeDevice.getHostId()).thenReturn(NETWORK_ID);
  final List<BrocadeVcsDeviceVO> devices=mock(List.class);
  when(devices.isEmpty()).thenReturn(true);
  when(vcsdao.listByPhysicalNetwork(anyLong())).thenReturn(devices);
  final Domain dom=mock(Domain.class);
  when(dom.getName()).thenReturn("domain");
  final Account acc=mock(Account.class);
  when(acc.getAccountName()).thenReturn("accountname");
  final ReservationContext res=mock(ReservationContext.class);
  when(res.getDomain()).thenReturn(dom);
  when(res.getAccount()).thenReturn(acc);
  final AssociateMacToNetworkAnswer answer=mock(AssociateMacToNetworkAnswer.class);
  when(answer.getResult()).thenReturn(true);
  when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  guru.reserve(nic,network,vmProfile,dest,res);
  verify(agentmgr,times(0)).easySend(eq(NETWORK_ID),(Command)any());
}
