{
  final NetworkVO network=mock(NetworkVO.class);
  when(network.getName()).thenReturn("testnetwork");
  when(network.getState()).thenReturn(State.Implementing);
  when(network.getId()).thenReturn(NETWORK_ID);
  when(network.getDataCenterId()).thenReturn(NETWORK_ID);
  final NetworkOffering offering=mock(NetworkOffering.class);
  when(offering.getId()).thenReturn(NETWORK_ID);
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getGuestType()).thenReturn(GuestType.Isolated);
  final HostVO brocadeHost=mock(HostVO.class);
  when(hostdao.findById(anyLong())).thenReturn(brocadeHost);
  when(brocadeHost.getId()).thenReturn(NETWORK_ID);
  when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID);
  final BrocadeVcsNetworkVlanMappingVO mapping=mock(BrocadeVcsNetworkVlanMappingVO.class);
  when(mapping.getVlanId()).thenReturn(14);
  when(vcsmapdao.findByNetworkId(anyLong())).thenReturn(mapping);
  when(vcsmapdao.remove(anyLong())).thenReturn(true);
  final BrocadeVcsDeviceVO brocadeDevice=mock(BrocadeVcsDeviceVO.class);
  when(brocadeDevice.getHostId()).thenReturn(NETWORK_ID);
  final List<BrocadeVcsDeviceVO> devices=mock(List.class);
  when(devices.isEmpty()).thenReturn(true);
  when(vcsdao.listByPhysicalNetwork(anyLong())).thenReturn(devices);
  final boolean result=guru.trash(network,offering);
  assertTrue(result == false);
  verify(agentmgr,times(0)).easySend(eq(NETWORK_ID),(Command)any());
}
