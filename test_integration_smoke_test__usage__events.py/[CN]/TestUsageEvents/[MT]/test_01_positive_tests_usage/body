@attr(tags=['advanced, basic'], required_hardware='true')
def test_01_positive_tests_usage(self):
    ' Check events in usage_events table when VM creation fails\n\n        Steps:\n        1. Create service offering with large resource numbers\n        2. Try to deploy a VM\n        3. VM creation should fail and VM should be in error state\n        4. Destroy the VM with expunge parameter True\n        5. Check the events for the account in usage_events table\n        6. There should be VM.CREATE, VM.DESTROY, VOLUME.CREATE and\n            VOLUME.DELETE events present in the table\n        '
    with self.assertRaises(Exception):
        VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    vms = VirtualMachine.list(self.apiclient, account=self.account.name, domaind=self.account.domainid)
    self.assertEqual(validateList(vms)[0], PASS, 'Vm list validation failed')
    self.assertEqual(vms[0].state.lower(), 'error', 'VM should be in error state')
    qresultset = self.dbclient.execute(("select id from account where uuid = '%s';" % self.account.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select type from usage_event where account_id = '%s';" % account_id))
    qresultset = self.dbclient.execute(("select type from usage_event where account_id = '%s';" % account_id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = str(qresultset)
    self.debug(('Query result: %s' % qresult))
    self.assertEqual(qresult.count('VM.CREATE'), 1, 'Check VM.CREATE event in events table')
    self.assertEqual(qresult.count('VM.DESTROY'), 1, 'Check VM.DESTROY in list events')
    self.assertEqual(qresult.count('VOLUME.CREATE'), 1, 'Check VOLUME.CREATE in events table')
    self.assertEqual(qresult.count('VOLUME.DELETE'), 1, 'Check VM.DELETE in events table')
    return
