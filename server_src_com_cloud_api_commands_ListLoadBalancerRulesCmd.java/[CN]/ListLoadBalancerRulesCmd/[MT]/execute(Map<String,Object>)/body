{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String publicIp=(String)params.get(BaseCmd.Properties.PUBLIC_IP.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=null;
  boolean isAdmin=false;
  Account ipAddressOwner=null;
  if (publicIp != null) {
    IPAddressVO ipAddressVO=getManagementServer().findIPAddressById(publicIp);
    if (ipAddressVO == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find IP address " + publicIp);
    }
 else {
      ipAddressOwner=getManagementServer().findAccountById(ipAddressVO.getAccountId());
    }
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid domain id (" + domainId + ") given, unable to list load balancer rules.");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findAccountByName(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else     if (ipAddressOwner != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),ipAddressOwner.getDomainId())) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to list load balancer rules for IP address " + publicIp + ", permission denied.");
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("ipAddress",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.ACCOUNTID,accountId);
  if (keyword == null) {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.NAME,name);
    c.addCriteria(Criteria.INSTANCEID,vmId);
    c.addCriteria(Criteria.IPADDRESS,publicIp);
    if (isAdmin) {
      c.addCriteria(Criteria.DOMAINID,domainId);
    }
  }
 else {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
  List<LoadBalancerVO> loadBalancers=getManagementServer().searchForLoadBalancers(c);
  if (loadBalancers == null) {
    throw new ServerApiException(BaseCmd.NET_LIST_ERROR,"unable to find load balancing rules");
  }
  List<Pair<String,Object>> lbTags=new ArrayList<Pair<String,Object>>();
  Object[] lbTag=new Object[loadBalancers.size()];
  int i=0;
  for (  LoadBalancerVO loadBalancer : loadBalancers) {
    List<Pair<String,Object>> lbData=new ArrayList<Pair<String,Object>>();
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.valueOf(loadBalancer.getId()).toString()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),loadBalancer.getName()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.DESCRIPTION.getName(),loadBalancer.getDescription()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_IP.getName(),loadBalancer.getIpAddress()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_PORT.getName(),loadBalancer.getPublicPort()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.PRIVATE_PORT.getName(),loadBalancer.getPrivatePort()));
    lbData.add(new Pair<String,Object>(BaseCmd.Properties.ALGORITHM.getName(),loadBalancer.getAlgorithm()));
    Account accountTemp=getManagementServer().findAccountById(loadBalancer.getAccountId());
    if (accountTemp != null) {
      lbData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountTemp.getAccountName()));
      lbData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),accountTemp.getDomainId()));
      lbData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(accountTemp.getDomainId()).getName()));
    }
    lbTag[i++]=lbData;
  }
  Pair<String,Object> ruleTag=new Pair<String,Object>("loadbalancerrule",lbTag);
  lbTags.add(ruleTag);
  return lbTags;
}
