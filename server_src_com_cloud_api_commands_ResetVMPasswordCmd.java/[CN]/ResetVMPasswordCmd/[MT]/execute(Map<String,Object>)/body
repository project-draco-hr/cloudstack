{
  Long vmId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String password=null;
  UserVmVO vmInstance=getManagementServer().findUserVMInstanceById(vmId.longValue());
  if (vmInstance == null) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"unable to find a virtual machine with id " + vmId);
  }
  if (account != null) {
    if (!isAdmin(account.getType()) && (account.getId() != vmInstance.getAccountId())) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"unable to find a virtual machine with id " + vmId + " for this account");
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),vmInstance.getDomainId())) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid virtual machine id (" + vmId + ") given, unable to reset password.");
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  VMTemplateVO template=getManagementServer().findTemplateById(vmInstance.getTemplateId());
  if (template.getEnablePassword()) {
    password=getManagementServer().generateRandomPassword();
  }
 else {
    password="saved_password";
  }
  long jobId=getManagementServer().resetVMPasswordAsync(userId.longValue(),vmId,password);
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for ResetVMPassword comamnd");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("ResetVMPassword command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  return returnValues;
}
