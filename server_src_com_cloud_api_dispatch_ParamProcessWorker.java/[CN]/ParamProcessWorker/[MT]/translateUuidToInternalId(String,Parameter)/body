{
  if (uuid.equals("-1")) {
    return -1L;
  }
  Long internalId=null;
  final boolean isPre3x=annotation.since().isEmpty();
  final boolean isUuid=uuid.matches("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$");
  if (!isPre3x && !isUuid)   return null;
  final Class<?>[] entities=annotation.entityType()[0].getAnnotation(EntityReference.class).value();
  if (isPre3x && !isUuid) {
    try {
      internalId=Long.parseLong(uuid);
    }
 catch (    final NumberFormatException e) {
      internalId=null;
    }
    if (internalId != null) {
      for (      final Class<?> entity : entities) {
        CallContext.current().putContextParameter(entity.getName(),internalId);
      }
      return internalId;
    }
  }
  for (  final Class<?> entity : entities) {
    final Object objVO=_entityMgr.findByUuidIncludingRemoved(entity,uuid);
    if (objVO == null) {
      continue;
    }
    try {
      internalId=((InternalIdentity)objVO).getId();
    }
 catch (    final IllegalArgumentException e) {
    }
catch (    final NullPointerException e) {
    }
    if (internalId != null) {
      CallContext.current().putContextParameter(entity.getName(),internalId);
      break;
    }
  }
  if (internalId == null) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Object entity uuid = " + uuid + " does not exist in the database.");
    throw new InvalidParameterValueException("Invalid parameter " + annotation.name() + " value="+ uuid+ " due to incorrect long value format, or entity does not exist or due to incorrect parameter annotation for the field in api cmd class.");
  }
  return internalId;
}
