{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long loadBalancerId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long instanceId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  String instanceIds=(String)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_IDS.getName());
  if ((instanceId == null) && (instanceIds == null)) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"No virtual machine id (or list if ids) specified.");
  }
  List<Long> instanceIdList=new ArrayList<Long>();
  if (instanceIds != null) {
    StringTokenizer st=new StringTokenizer(instanceIds,",");
    while (st.hasMoreTokens()) {
      String token=st.nextToken();
      try {
        Long nextInstanceId=Long.parseLong(token);
        instanceIdList.add(nextInstanceId);
      }
 catch (      NumberFormatException nfe) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"The virtual machine id " + token + " is not a valid parameter.");
      }
    }
  }
 else {
    instanceIdList.add(instanceId);
  }
  if (account == null) {
    account=getManagementServer().findActiveAccount(accountName,domainId);
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  LoadBalancerVO loadBalancer=getManagementServer().findLoadBalancerById(loadBalancerId.longValue());
  if (loadBalancer == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find load balancer rule, with id " + loadBalancerId);
  }
 else   if (account != null) {
    if (!isAdmin(account.getType()) && (loadBalancer.getAccountId() != account.getId())) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Account " + account.getAccountName() + " does not own load balancer rule "+ loadBalancer.getName()+ " (id:"+ loadBalancer.getId()+ ")");
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid load balancer rule id (" + loadBalancer.getId() + ") given, unable to assign instances to load balancer rule.");
    }
  }
  long jobId=getManagementServer().assignToLoadBalancerAsync(userId.longValue(),loadBalancerId.longValue(),instanceIdList);
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for AssignToLoadBalancerRule comamnd");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("AssignToLoadBalancerRule command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  return returnValues;
}
