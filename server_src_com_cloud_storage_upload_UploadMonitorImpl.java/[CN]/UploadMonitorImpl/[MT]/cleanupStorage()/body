{
  final int EXTRACT_URL_LIFE_LIMIT_IN_SECONDS=_urlExpirationInterval;
  List<UploadVO> extractJobs=_uploadDao.listByModeAndStatus(Mode.HTTP_DOWNLOAD,Status.DOWNLOAD_URL_CREATED);
  for (  UploadVO extractJob : extractJobs) {
    if (getTimeDiff(extractJob.getLastUpdated()) > EXTRACT_URL_LIFE_LIMIT_IN_SECONDS) {
      String path=extractJob.getInstallPath();
      DataStore secStore=this.storeMgr.getDataStore(extractJob.getDataStoreId(),DataStoreRole.Image);
      DeleteEntityDownloadURLCommand cmd=new DeleteEntityDownloadURLCommand(path,extractJob.getType(),extractJob.getUploadUrl(),((ImageStoreVO)secStore).getParent());
      EndPoint ep=_epSelector.select(secStore);
      if (ep == null) {
        s_logger.warn("UploadMonitor cleanup: There is no secondary storage VM for secondary storage host " + extractJob.getDataStoreId());
        continue;
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("UploadMonitor cleanup: Sending deletion of extract URL " + extractJob.getUploadUrl() + " to ssvm "+ ep.getHostAddr());
      }
      Answer ans=ep.sendMessage(cmd);
      if (ans != null && ans.getResult()) {
        _uploadDao.remove(extractJob.getId());
      }
 else {
        s_logger.warn("UploadMonitor cleanup: Unable to delete the link for " + extractJob.getType() + " id="+ extractJob.getTypeId()+ " url="+ extractJob.getUploadUrl()+ " on ssvm "+ ep.getHostAddr());
      }
    }
  }
}
