{
  String errorString="";
  boolean success=false;
  try {
    List<HostVO> storageServers=_serverDao.listByTypeDataCenter(Host.Type.SecondaryStorage,dataCenterId);
    if (storageServers == null) {
      errorString="No Storage Server found at the datacenter - " + dataCenterId;
      throw new CloudRuntimeException(errorString);
    }
    UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
    uploadJob.setUploadState(Status.DOWNLOAD_URL_NOT_CREATED);
    uploadJob.setLastUpdated(new Date());
    _uploadDao.update(uploadJob.getId(),uploadJob);
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(path);
    long result=send(ApiDBUtils.findUploadById(uploadId).getHostId(),cmd,null);
    if (result == -1) {
      errorString="Unable to create a link for " + type + " id:"+ entityId;
      s_logger.warn(errorString);
      throw new CloudRuntimeException(errorString);
    }
    List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(dataCenterId,State.Running);
    if (ssVms.size() > 0) {
      SecondaryStorageVmVO ssVm=ssVms.get(0);
      if (ssVm.getPublicIpAddress() == null) {
        errorString="A running secondary storage vm has a null public ip?";
        s_logger.warn(errorString);
        throw new CloudRuntimeException(errorString);
      }
      String extractURL=generateCopyUrl(ssVm.getPublicIpAddress(),path);
      UploadVO vo=_uploadDao.createForUpdate();
      vo.setLastUpdated(new Date());
      vo.setUploadUrl(extractURL);
      vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
      _uploadDao.update(uploadId,vo);
      success=true;
      return;
    }
    errorString="Couldnt find a running SSVM in the zone" + dataCenterId + ". Couldnt create the extraction URL.";
    throw new CloudRuntimeException(errorString);
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadId,uploadJob);
    }
  }
}
