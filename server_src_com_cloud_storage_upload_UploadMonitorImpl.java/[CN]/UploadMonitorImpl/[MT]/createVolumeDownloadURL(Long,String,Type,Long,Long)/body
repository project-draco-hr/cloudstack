{
  String errorString="";
  boolean success=false;
  try {
    List<HostVO> storageServers=_resourceMgr.listAllHostsInOneZoneByType(Host.Type.SecondaryStorage,dataCenterId);
    if (storageServers == null) {
      errorString="No Storage Server found at the datacenter - " + dataCenterId;
      throw new CloudRuntimeException(errorString);
    }
    UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
    uploadJob.setUploadState(Status.DOWNLOAD_URL_NOT_CREATED);
    uploadJob.setLastUpdated(new Date());
    _uploadDao.update(uploadJob.getId(),uploadJob);
    List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,dataCenterId,State.Running);
    if (ssVms.size() == 0) {
      errorString="Couldnt find a running SSVM in the zone" + dataCenterId + ". Couldnt create the extraction URL.";
      throw new CloudRuntimeException(errorString);
    }
    String uuid=UUID.randomUUID().toString() + path.substring(path.length() - 4);
    HostVO secStorage=ApiDBUtils.findHostById(ApiDBUtils.findUploadById(uploadId).getHostId());
    HostVO ssvm=_ssvmMgr.pickSsvmHost(secStorage);
    if (ssvm == null) {
      errorString="There is no secondary storage VM for secondary storage host " + secStorage.getName();
      throw new CloudRuntimeException(errorString);
    }
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(secStorage.getParent(),path,uuid);
    try {
      send(ssvm.getId(),cmd,null);
    }
 catch (    AgentUnavailableException e) {
      errorString="Unable to create a link for " + type + " id:"+ entityId+ ","+ e.getMessage();
      s_logger.warn(errorString,e);
      throw new CloudRuntimeException(errorString);
    }
    String extractURL=generateCopyUrl(ssvm.getPublicIpAddress(),uuid);
    UploadVO vo=_uploadDao.createForUpdate();
    vo.setLastUpdated(new Date());
    vo.setUploadUrl(extractURL);
    vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
    _uploadDao.update(uploadId,vo);
    success=true;
    return;
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadId,uploadJob);
    }
  }
}
