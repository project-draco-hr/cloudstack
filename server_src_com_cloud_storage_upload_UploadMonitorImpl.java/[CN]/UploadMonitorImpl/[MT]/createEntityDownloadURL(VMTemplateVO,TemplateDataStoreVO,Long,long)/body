{
  String errorString="";
  boolean success=false;
  Type type=(template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(template.getId(),type,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractURLList.size() > 0) {
    return extractURLList.get(0);
  }
  UploadVO uploadTemplateObj=new UploadVO(vmTemplateHost.getDataStoreId(),template.getId(),new Date(),Status.DOWNLOAD_URL_NOT_CREATED,0,type,Mode.HTTP_DOWNLOAD);
  uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());
  _uploadDao.persist(uploadTemplateObj);
  DataStore store=this.storeMgr.getDataStore(vmTemplateHost.getDataStoreId(),DataStoreRole.Image);
  EndPoint ep=_epSelector.select(store);
  try {
    String path=vmTemplateHost.getInstallPath();
    String uuid=UUID.randomUUID().toString() + "." + template.getFormat().getFileExtension();
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(((ImageStoreVO)store).getParent(),path,uuid);
    Answer ans=ep.sendMessage(cmd);
    if (ans == null || !ans.getResult()) {
      errorString="Unable to create a link for " + type + " id:"+ template.getId()+ ","+ ans.getDetails();
      s_logger.error(errorString);
      throw new CloudRuntimeException(errorString);
    }
    String extractURL=generateCopyUrl(ep.getHostAddr(),uuid);
    UploadVO vo=_uploadDao.createForUpdate();
    vo.setLastUpdated(new Date());
    vo.setUploadUrl(extractURL);
    vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
    _uploadDao.update(uploadTemplateObj.getId(),vo);
    success=true;
    return _uploadDao.findById(uploadTemplateObj.getId(),true);
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadTemplateObj.getId());
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadTemplateObj.getId(),uploadJob);
    }
  }
}
