@attr(tags=['domains', 'advanced', 'advancedns', 'simulator'])
def test_DeleteDomain(self):
    ' Test delete domain with force option'
    self.debug('Creating a domain for login with API domain test')
    domain = Domain.create(self.apiclient, self.services['domain'], parentdomainid=self.domain.id)
    self._cleanup.append(domain)
    self.debug(('Domain: %s is created successfully.' % domain.name))
    self.debug('Checking if the created domain is listed in list domains API')
    domains = Domain.list(self.apiclient, id=domain.id, listall=True)
    self.assertEqual(isinstance(domains, list), True, 'List domains shall return a valid response')
    self.debug(('Creating 2 user accounts in domain: %s' % domain.name))
    self.account_1 = Account.create(self.apiclient, self.services['account'], domainid=domain.id)
    self.cleanup.append(self.account_1)
    self.account_2 = Account.create(self.apiclient, self.services['account'], domainid=domain.id)
    self.cleanup.append(self.account_2)
    self.debug('Creating a tiny service offering for VM deployment')
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering'], domainid=self.domain.id)
    self.cleanup.append(self.service_offering)
    self.debug(('Deploying virtual machine in account 1: %s' % self.account_1.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deploying virtual machine in account 2: %s' % self.account_2.name))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account_2.name, domainid=self.account_2.domainid, serviceofferingid=self.service_offering.id)
    networks = Network.list(self.apiclient, account=self.account_1.name, domainid=self.account_1.domainid, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response')
    network_1 = networks[0]
    self.debug(('Default network in account 1: %s is %s' % (self.account_1.name, network_1.name)))
    src_nat_list = PublicIPAddress.list(self.apiclient, associatednetworkid=network_1.id, account=self.account_1.name, domainid=self.account_1.domainid, listall=True, issourcenat=True)
    self.assertEqual(isinstance(src_nat_list, list), True, 'List Public IP should return a valid source NAT')
    self.assertNotEqual(len(src_nat_list), 0, 'Length of response from listPublicIp should not be 0')
    src_nat = src_nat_list[0]
    self.debug(('Trying to create a port forwarding rule in source NAT: %s' % src_nat.ipaddress))
    nat_rule = NATRule.create(self.apiclient, vm_1, self.services['natrule'], ipaddressid=src_nat.id)
    self.debug(('Created PF rule on source NAT: %s' % src_nat.ipaddress))
    nat_rules = NATRule.list(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'List NAT should return a valid port forwarding rules')
    self.assertNotEqual(len(nat_rules), 0, 'Length of response from listLbRules should not be 0')
    self.debug('Deleting domain without force option')
    with self.assertRaises(Exception):
        domain.delete(self.apiclient, cleanup=False)
    return
