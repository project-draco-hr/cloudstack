@classmethod
def setUpClass(cls):
    cls.api_client = super(TestTemplateHierarchy, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.services['mode'] = cls.zone.networktype
    cls.domain_1 = Domain.create(cls.api_client, cls.services['domain'])
    cls.domain_2 = Domain.create(cls.api_client, cls.services['domain'], parentdomainid=cls.domain_1.id)
    cls.account_1 = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain_1.id)
    cls.account_2 = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain_2.id)
    builtin_info = get_builtin_template_info(cls.api_client, cls.zone.id)
    cls.services['template']['url'] = builtin_info[0]
    cls.services['template']['hypervisor'] = builtin_info[1]
    cls.services['template']['format'] = builtin_info[2]
    cls.template = Template.register(cls.api_client, cls.services['template'], zoneid=cls.zone.id, account=cls.account_1.name, domainid=cls.domain_1.id)
    cls.template.download(cls.api_client)
    time.sleep(60)
    cls._cleanup = [cls.account_2, cls.domain_2, cls.template, cls.account_1, cls.domain_1]
    return
