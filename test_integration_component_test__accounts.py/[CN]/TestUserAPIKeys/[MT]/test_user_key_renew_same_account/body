@attr(tags=['role', 'accounts', 'simulator', 'advanced', 'advancedns', 'basic', 'eip', 'sg'])
def test_user_key_renew_same_account(self):
    user_1 = User.create(self.apiclient, self.services['user'], account=self.account.name, domainid=self.domain.id)
    self.cleanup.append(user_1)
    account_response = list_accounts(self.apiclient, id=self.account.id)[0]
    self.assertEqual(hasattr(account_response, 'user'), True, 'Users are included in account response')
    account_users = account_response.user
    self.assertEqual(isinstance(account_users, list), True, 'Check account for valid data')
    self.assertNotEqual(len(account_users), 0, 'Check number of User in Account')
    [user] = [u for u in account_users if (u.username == user_1.username)]
    self.assertEqual(user.apikey, None, "Check that the user don't have an API key yet")
    self.debug('Register API keys for user')
    userkeys = User.registerUserKeys(self.apiclient, user_1.id)
    users = list_accounts(self.apiclient, id=self.account.id)[0].user
    [user] = [u for u in users if (u.id == user_1.id)]
    self.assertEqual(user.apikey, userkeys.apikey, 'Check User api key')
    self.assertEqual(user.secretkey, userkeys.secretkey, 'Check User having secret key')
    self.debug('Get test client with user keys')
    cs_api = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    self.debug('Renew API keys for user using current keys')
    new_keys = User.registerUserKeys(cs_api, user_1.id)
    self.assertNotEqual(userkeys.apikey, new_keys.apikey, 'Check API key is different')
    self.assertNotEqual(userkeys.secretkey, new_keys.secretkey, 'Check secret key is different')
