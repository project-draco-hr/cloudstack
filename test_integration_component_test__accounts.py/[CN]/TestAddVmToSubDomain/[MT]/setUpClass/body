@classmethod
def setUpClass(cls):
    cls.api_client = super(TestAddVmToSubDomain, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.sub_domain = Domain.create(cls.api_client, cls.services['domain'], parentdomainid=cls.domain.id)
    cls.account_1 = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.account_2 = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.sub_domain.id)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'], domainid=cls.domain.id)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostypeid'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=cls.template.id, accountid=cls.account_1.account.name, domainid=cls.account_1.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=cls.template.id, accountid=cls.account_2.account.name, domainid=cls.account_2.account.domainid, serviceofferingid=cls.service_offering.id)
    cls._cleanup = [cls.account_2, cls.account_1, cls.sub_domain, cls.service_offering]
    return
