@unittest.skip('Open Questions')
def test_02_remove_all_users(self):
    'Test Remove both users from the account \n        '
    user_1 = User.create(self.apiclient, self.services['user'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created user: %s' % user_1.id))
    user_2 = User.create(self.apiclient, self.services['user'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created user: %s' % user_2.id))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM in account: %s, ID: %s' % (self.account.account.name, vm_1.id)))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM in account: %s, ID: %s' % (self.account.account.name, vm_2.id)))
    users = list_users(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(users, list), True, 'Check for valid list users response')
    for user in users:
        self.debug(('Deleting user: %s' % user.id))
        cmd = deleteUser.deleteUserCmd()
        cmd.id = user.id
        self.apiclient.deleteUser(cmd)
    interval = list_configurations(self.apiclient, name='account.cleanup.interval')
    self.assertEqual(isinstance(interval, list), True, 'Check for valid list configurations response')
    self.debug(('account.cleanup.interval: %s' % interval[0].value))
    time.sleep(int(interval[0].value))
    account_response = list_accounts(self.apiclient, id=self.account.account.id)
    self.assertEqual(account_response, None, 'Check List VM response')
    vm_response = list_virtual_machines(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(vm_response, None, 'Check List VM response')
    with self.assertRaises(Exception):
        list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    return
