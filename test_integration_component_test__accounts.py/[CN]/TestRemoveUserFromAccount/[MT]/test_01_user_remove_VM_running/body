def test_01_user_remove_VM_running(self):
    'Test Remove one user from the account \n        '
    user_1 = User.create(self.apiclient, self.services['user'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created user: %s' % user_1.id))
    user_2 = User.create(self.apiclient, self.services['user'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created user: %s' % user_2.id))
    self.cleanup.append(user_2)
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM in account: %s, ID: %s' % (self.account.account.name, vm_1.id)))
    self.cleanup.append(vm_1)
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM in account: %s, ID: %s' % (self.account.account.name, vm_2.id)))
    self.cleanup.append(vm_2)
    self.debug(('Deleting user: %s' % user_1.id))
    user_1.delete(self.apiclient)
    accounts_response = list_accounts(self.apiclient, id=self.account.account.id)
    self.assertEqual(isinstance(accounts_response, list), True, 'Check for valid list accounts response')
    self.assertNotEqual(len(accounts_response), 0, 'Check List Account response')
    vm_response = list_virtual_machines(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check for valid list VM response')
    self.assertNotEqual(len(vm_response), 0, 'Check List VM response')
    for vm in vm_response:
        self.assertEqual(vm.state, 'Running', 'Check state of VMs associated with account')
    return
