@attr(tags=['advanced', 'advancedns', 'ssh', 'selfservice'])
def test_enableVPNOverRvR(self):
    'Test redundant router internals\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.debug(('Network state: %s' % nw_response.state))
    self.assertEqual(nw_response.state, 'Allocated', 'The network should be in allocated state after creation')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(routers, None, 'Routers should not be spawned when network is in allocated state')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm should be in running state after deployment')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id)
    self.debug(('Associated %s with network %s' % (public_ip.ipaddress.ipaddress, network.id)))
    self.debug(('Creating a remote access VPN for account: %s' % self.account.name))
    try:
        vpn = Vpn.create(self.apiclient, publicipid=public_ip.ipaddress.id, account=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('Failed to create VPN for account: %s - %s' % (self.account.name, e)))
    try:
        vpnuser = VpnUser.create(self.apiclient, username='root', password='password', account=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('Failed to create VPN user: %s' % e))
    self.debug('Checking if the remote access VPN is created or not?')
    remote_vpns = Vpn.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, publicipid=public_ip.ipaddress.id, listall=True)
    self.assertEqual(isinstance(remote_vpns, list), True, 'List remote VPNs should not return empty response')
    self.debug(('Deleting the remote access VPN for account: %s' % self.account.name))
    try:
        vpn.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete VPN : %s' % e))
    self.debug('Checking if the remote access VPN is created or not?')
    remote_vpns = Vpn.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, publicipid=public_ip.ipaddress.id, listall=True)
    self.assertEqual(remote_vpns, None, 'List remote VPNs should not return empty response')
    return
