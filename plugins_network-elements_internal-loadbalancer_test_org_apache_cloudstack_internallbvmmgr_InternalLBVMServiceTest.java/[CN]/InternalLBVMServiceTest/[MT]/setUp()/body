{
  Mockito.when(_accountMgr.getAccount(1L)).thenReturn(new AccountVO());
  ServiceOfferingVO off=new ServiceOfferingVO("alena",1,1,1,1,1,false,"alena",Storage.ProvisioningType.THIN,false,false,null,false,VirtualMachine.Type.InternalLoadBalancerVm,false);
  off=setId(off,1);
  Mockito.when(_svcOffDao.persistSystemServiceOffering(Matchers.any(ServiceOfferingVO.class))).thenReturn(off);
  ComponentContext.initComponentsLifeCycle();
  Mockito.when(_accountMgr.getSystemUser()).thenReturn(new UserVO(1));
  Mockito.when(_accountMgr.getSystemAccount()).thenReturn(new AccountVO(2));
  Mockito.when(_accountDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(new AccountVO(2));
  CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
  final DomainRouterVO validVm=new DomainRouterVO(validVmId,off.getId(),1,"alena",1,HypervisorType.XenServer,1,1,1,1,false,null,false,false,VirtualMachine.Type.InternalLoadBalancerVm,null);
  validVm.setRole(Role.INTERNAL_LB_VM);
  final DomainRouterVO nonInternalLbVm=new DomainRouterVO(validVmId,off.getId(),1,"alena",1,HypervisorType.XenServer,1,1,1,1,false,null,false,false,VirtualMachine.Type.DomainRouter,null);
  nonInternalLbVm.setRole(Role.VIRTUAL_ROUTER);
  Mockito.when(_domainRouterDao.findById(validVmId)).thenReturn(validVm);
  Mockito.when(_domainRouterDao.findById(nonExistingVmId)).thenReturn(null);
  Mockito.when(_domainRouterDao.findById(nonInternalLbVmId)).thenReturn(nonInternalLbVm);
}
