{
switch (status) {
case ABORTED:
case UNRECOVERABLE_ERROR:
case UPLOAD_FINISHED:
    return 0;
default :
}
Date start=new Date();
StringBuffer sb=new StringBuffer(ftpUrl);
sb.append(";type=i");
try {
  URL url=new URL(sb.toString());
  URLConnection urlc=url.openConnection();
  File sourceFile=new File(sourcePath);
  entitySizeinBytes=sourceFile.length();
  outputStream=new BufferedOutputStream(urlc.getOutputStream());
  inputStream=new BufferedInputStream(new FileInputStream(sourceFile));
  status=TemplateUploader.Status.IN_PROGRESS;
  int bytes=0;
  byte[] block=new byte[CHUNK_SIZE];
  boolean done=false;
  while (!done && status != Status.ABORTED) {
    if ((bytes=inputStream.read(block,0,CHUNK_SIZE)) > -1) {
      outputStream.write(block,0,bytes);
      totalBytes+=bytes;
    }
 else {
      done=true;
    }
  }
  status=TemplateUploader.Status.UPLOAD_FINISHED;
  return totalBytes;
}
 catch (MalformedURLException e) {
  status=TemplateUploader.Status.UNRECOVERABLE_ERROR;
  errorString=e.getMessage();
  s_logger.error(errorString);
}
catch (IOException e) {
  status=TemplateUploader.Status.UNRECOVERABLE_ERROR;
  errorString=e.getMessage();
  s_logger.error(errorString);
}
 finally {
  try {
    if (inputStream != null) {
      inputStream.close();
    }
    if (outputStream != null) {
      outputStream.close();
    }
  }
 catch (  IOException ioe) {
    s_logger.error(" Caught exception while closing the resources");
  }
  if (callback != null) {
    callback.uploadComplete(status);
  }
}
return 0;
}
