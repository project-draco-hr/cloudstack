{
  String version="";
  Object[] endVals=new Object[endWaitProps.length];
  Object[] filterVals=new Object[filterProps.length];
  PropertyFilterSpec spec=new PropertyFilterSpec();
  ObjectSpec oSpec=new ObjectSpec();
  oSpec.setObj(objmor);
  oSpec.setSkip(Boolean.FALSE);
  spec.getObjectSet().add(oSpec);
  PropertySpec pSpec=new PropertySpec();
  pSpec.getPathSet().addAll(Arrays.asList(filterProps));
  pSpec.setType(objmor.getType());
  spec.getPropSet().add(pSpec);
  ManagedObjectReference propertyCollector=getPropCol();
  ManagedObjectReference filterSpecRef=vimPort.createFilter(propertyCollector,spec,true);
  boolean reached=false;
  UpdateSet updateset=null;
  List<PropertyFilterUpdate> filtupary=null;
  List<ObjectUpdate> objupary=null;
  List<PropertyChange> propchgary=null;
  while (!reached) {
    updateset=vimPort.waitForUpdates(propertyCollector,version);
    if (updateset == null || updateset.getFilterSet() == null) {
      continue;
    }
    version=updateset.getVersion();
    filtupary=updateset.getFilterSet();
    for (    PropertyFilterUpdate filtup : filtupary) {
      objupary=filtup.getObjectSet();
      for (      ObjectUpdate objup : objupary) {
        if (objup.getKind() == ObjectUpdateKind.MODIFY || objup.getKind() == ObjectUpdateKind.ENTER || objup.getKind() == ObjectUpdateKind.LEAVE) {
          propchgary=objup.getChangeSet();
          for (          PropertyChange propchg : propchgary) {
            updateValues(endWaitProps,endVals,propchg);
            updateValues(filterProps,filterVals,propchg);
          }
        }
      }
    }
    Object expctdval=null;
    for (int chgi=0; chgi < endVals.length && !reached; chgi++) {
      for (int vali=0; vali < expectedVals[chgi].length && !reached; vali++) {
        expctdval=expectedVals[chgi][vali];
        reached=expctdval.equals(endVals[chgi]) || reached;
      }
    }
  }
  vimPort.destroyPropertyFilter(filterSpecRef);
  return filterVals;
}
