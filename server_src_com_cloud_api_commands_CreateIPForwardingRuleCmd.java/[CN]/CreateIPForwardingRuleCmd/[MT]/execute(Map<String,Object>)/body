{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String ipAddress=(String)params.get(BaseCmd.Properties.IP_ADDRESS.getName());
  String publicPort=(String)params.get(BaseCmd.Properties.PUBLIC_PORT.getName());
  String privatePort=(String)params.get(BaseCmd.Properties.PRIVATE_PORT.getName());
  String protocol=(String)params.get(BaseCmd.Properties.PROTOCOL.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  IPAddressVO ipAddressVO=getManagementServer().findIPAddressById(ipAddress);
  if (ipAddressVO == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find IP address " + ipAddress);
  }
  UserVmVO userVM=getManagementServer().findUserVMInstanceById(vmId);
  if (userVM == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find virtual machine with id " + vmId);
  }
  if ((ipAddressVO.getAccountId() == null) || (ipAddressVO.getAccountId().longValue() != userVM.getAccountId())) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create port forwarding rule, IP address " + ipAddress + " owner is not the same as owner of virtual machine "+ userVM.toString());
  }
  if (ipAddressVO.getDataCenterId() != userVM.getDataCenterId()) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create port forwarding rule, IP address " + ipAddress + " owner is not in the same availability zone as virtual machine "+ userVM.toString());
  }
  if (account != null) {
    if (isAdmin(account.getType())) {
      Account vmOwner=getManagementServer().findAccountById(userVM.getAccountId());
      if (!getManagementServer().isChildDomain(account.getDomainId(),vmOwner.getDomainId())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create port forwarding rule, IP address " + ipAddress + " to virtual machine "+ vmId+ ", permission denied.");
      }
    }
 else     if (account.getId() != userVM.getAccountId()) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create port forwarding rule, IP address " + ipAddress + " to virtual machine "+ vmId+ ", permission denied.");
    }
  }
  FirewallRuleVO firewallRule=null;
  try {
    firewallRule=getManagementServer().createPortForwardingRule(userId.longValue(),ipAddressVO,userVM,publicPort,privatePort,protocol);
  }
 catch (  NetworkRuleConflictException ex) {
    throw new ServerApiException(BaseCmd.NET_CONFLICT_IPFW_RULE_ERROR,"Network rule conflict creating a forwarding rule on address:port " + ipAddress + ":"+ publicPort+ " to virtual machine "+ userVM.toString());
  }
catch (  IllegalArgumentException argEx) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,argEx.getMessage());
  }
  if (firewallRule == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"The port forwarding rule from public port " + publicPort + " to private port "+ privatePort+ " for address "+ ipAddress+ " and virtual machine "+ userVM.toString()+ " already exists.");
  }
  List<Pair<String,Object>> groupsTags=new ArrayList<Pair<String,Object>>();
  Object[] forwardingTag=new Object[1];
  List<Pair<String,Object>> ruleData=new ArrayList<Pair<String,Object>>();
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),firewallRule.getId().toString()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_PORT.getName(),firewallRule.getPublicPort()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PRIVATE_PORT.getName(),firewallRule.getPrivatePort()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PROTOCOL.getName(),firewallRule.getProtocol()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_NAME.getName(),userVM.getName()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_DISPLAYNAME.getName(),userVM.getDisplayName()));
  ruleData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName(),Long.toString(userVM.getId())));
  forwardingTag[0]=ruleData;
  Pair<String,Object> eventTag=new Pair<String,Object>("portforwardingrule",forwardingTag);
  groupsTags.add(eventTag);
  return groupsTags;
}
