@attr(tags=['advanced'])
@data('isolated', 'shared')
def test_02_add_nw_stopped_vm(self, value):
    'Add network to stopped VM'
    self.debug(('Stopping Virtual Machine: %s' % self.virtual_machine.id))
    self.virtual_machine.stop(self.apiclient)
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    self.assertTrue((vm_list[0].state == 'Stopped'), ('Failed to stop VM, the state is %s' % vm_list[0].state))
    network = None
    if (value == 'isolated'):
        network = self.isolated_network
    elif (value == 'shared'):
        network = self.shared_network
    if (network is None):
        self.skipTest(('Network should not be none. Case not handled for Network of type %s' % value))
    self.addNetworkToVm(network, self.virtual_machine)
    self.debug(('Starting Virtual Machine: %s' % self.virtual_machine.id))
    self.virtual_machine.start(self.apiclient)
    return
