@attr(tags=['advanced'])
def test_24_add_nw_different_domain(self):
    'Add network to running VM'
    network = None
    try:
        try:
            tempCleanupList = []
            self.child_domain_1 = Domain.create(self.apiclient, services=self.services['domain'], parentdomainid=self.domain.id)
            tempCleanupList.append(self.child_domain_1)
            self.child_do_admin_1 = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.child_domain_1.id)
            tempCleanupList.append(self.child_do_admin_1)
            self.child_domain_2 = Domain.create(self.apiclient, services=self.services['domain'], parentdomainid=self.domain.id)
            tempCleanupList.append(self.child_domain_2)
            self.child_do_admin_2 = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.child_domain_2.id)
            tempCleanupList.append(self.child_do_admin_2)
        except Exception as e:
            self.fail(e)
    finally:
        tempCleanupList.reverse()
        self.cleanup += tempCleanupList
    network = Network.create(self.api_client, self.services['isolated_network'], self.child_do_admin_1.name, self.child_do_admin_1.domainid, networkofferingid=self.isolated_network_offering.id)
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.child_do_admin_2.name, domainid=self.child_do_admin_2.domainid, serviceofferingid=self.service_offering.id, mode=self.zone.networktype)
    time.sleep(self.services['sleep'])
    self.debug(('Trying to %s network in domain %s to a vm in domain %s, This should fail' % (network.type, self.child_domain_1.name, self.child_domain_2.name)))
    with self.assertRaises(Exception) as e:
        virtual_machine.add_nic(self.apiclient, network.id)
        self.debug(('Operation failed with exception %s' % e.exception))
    return
