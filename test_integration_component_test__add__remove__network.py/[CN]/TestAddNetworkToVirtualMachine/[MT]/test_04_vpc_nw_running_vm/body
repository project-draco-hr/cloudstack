@attr(tags=['advanced'])
@data('isolated')
def test_04_vpc_nw_running_vm(self, value):
    'Add VPC network to running VM belonging to isolated network'
    try:
        virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, mode=self.zone.networktype, networkids=[self.defaultNetworkId])
        self.cleanup.append(virtual_machine)
    except Exception as e:
        self.fail(('Failed to deply virtual machine: %s' % e))
    network = self.isolated_network
    self.addNetworkToVm(network, virtual_machine)
    self.debug('Creating VPC offering')
    vpc_off = VpcOffering.create(self.api_client, self.services['vpc_offering'])
    self.debug(('Created VPC offering: %s' % vpc_off.id))
    self.debug('Enabling the VPC offering')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug('Creating VPC')
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(vpc)
    self.cleanup.append(vpc_off)
    self.debug('Trying to add VPC to vm belonging to isolated network, this should fail')
    with self.assertRaises(Exception):
        virtual_machine.add_nic(self.apiclient, vpc.id)
    self.debug(('Disabling vpc offering: %s' % vpc_off.id))
    vpc_off.update(self.apiclient, state='Disabled')
    return
