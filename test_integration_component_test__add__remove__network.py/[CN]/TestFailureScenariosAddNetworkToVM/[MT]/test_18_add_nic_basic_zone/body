@attr(tags=['basic'])
def test_18_add_nic_basic_zone(self):
    'Add network to vm in basic zone'
    basicZone = None
    zones = list_zones(self.apiclient, available=True)
    list_zones_validation_result = validateList(zones)
    self.assertEqual(list_zones_validation_result[0], PASS, ('list zones validation failed due to: %s' % list_zones_validation_result[2]))
    for zone in zones:
        if (zone.networktype.lower() == 'BASIC'):
            basicZone = zone.id
            break
    if (basicZone is None):
        self.skipTest('This test requires at least one basic zone to be present in the setup')
    self.services['isolated_network']['zoneid'] = basicZone.id
    self.debug(('Creating isolated network in basic zone: %s' % basicZone.id))
    isolated_network = Network.create(self.apiclient, self.services['isolated_network'], networkofferingid=self.isolated_network_offering.id)
    self.debug(('Created isolated network %s:' % isolated_network.id))
    self.cleanup.append(isolated_network)
    self.services['virtual_machine']['zoneid'] = basicZone.id
    self.debug(('Deploying virtual machine in basic zone: %s' % basicZone.id))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], serviceofferingid=self.service_offering.id, mode=basicZone.networktype)
    time.sleep(self.services['sleep'])
    self.debug(('Deployed virtual machine %s: ' % virtual_machine.id))
    cmd = addNicToVirtualMachine.addNicToVirtualMachineCmd()
    cmd.virtualmachineid = virtual_machine.id
    cmd.networkid = isolated_network.id
    self.dedbug('Trying to add isolated network to VM (both in basic zone,                    this operation should fail')
    with self.assertRaises(Exception) as e:
        time.sleep(5)
        self.apiclient.addNicToVirtualMachine(cmd)
        self.debug(('addNicToVirtualMachine API failed with exception: %s' % e.exception))
    return
