@attr(tags=['advanced', 'dvs'])
def test_17_add_nic_different_zone(self):
    'Add network to vm where both belong to different zones'
    foreignZoneId = None
    zones = list_zones(self.apiclient, available=True)
    list_zones_validation_result = validateList(zones)
    self.assertEqual(list_zones_validation_result[0], PASS, ('list zones validation failed due to: %s' % list_zones_validation_result[2]))
    if (len(zones) >= 2):
        for zone in zones:
            if (zone.id != self.zone.id):
                foreignZoneId = zone.id
                break
        else:
            self.skipTest('This test requires at least two zones to be present in the setup')
        self.services['isolated_network']['zoneid'] = foreignZoneId
    self.debug(('Creating isolated network in zone %s which is foreign to VM' % foreignZoneId))
    isolated_network = Network.create(self.apiclient, self.services['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    self.debug(('Created isolated network %s in zone %s' % (isolated_network.id, foreignZoneId)))
    self.debug('Trying to add network to VM, both belonging to different zones')
    cmd = addNicToVirtualMachine.addNicToVirtualMachineCmd()
    cmd.virtualmachineid = self.virtual_machine.id
    cmd.networkid = isolated_network.id
    with self.assertRaises(Exception) as e:
        time.sleep(5)
        self.apiclient.addNicToVirtualMachine(cmd)
        self.debug(('addNicToVirtualMachine API failed with exception: %s' % e.exception))
    return
