@attr(tags=['advanced', 'dvs'])
def test_27_remove_nic_insufficient_permission(self):
    'Try to remove nic from vm with insufficient permission'
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    vm = vm_list_validation_result[1]
    nics = [x for x in vm.nic if (x.networkid == self.isolated_network.id)]
    self.assertEqual(len(nics), 1, ('There should be exactly one nic corresponding to the isolate                        network %s' % self.isolated_network.id))
    cmd = removeNicFromVirtualMachine.removeNicFromVirtualMachineCmd()
    cmd.virtualmachineid = self.virtual_machine.id
    cmd.nicid = nics[0].id
    self.debug('Creating new account')
    account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    self.debug(('Created account %s' % account.name))
    self.debug(('creating user api client for account: %s' % account.name))
    api_client = self.testClient.getUserApiClient(UserName=account.name, DomainName=self.account.domain)
    self.debug('Trying to add network to vm with this api client, this should fail due to                     insufficient permission')
    with self.assertRaises(Exception) as e:
        api_client.removeNicFromVirtualMachine(cmd)
        self.debug(('removeNicFromVirtualMachine API failed with exception: %s' % e.exception))
    return
