@attr(tags=['advanced'])
def test_19_remove_nic_wrong_vm_id(self):
    'Try to remove nic from a vm providing wrong vm id to API'
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    vm = vm_list_validation_result[1]
    nics = [x for x in vm.nic if (x.networkid == self.isolated_network.id)]
    self.assertEqual(len(nics), 1, ('There should be exactly one nic corresponding to the isolate                        network %s' % self.isolated_network.id))
    cmd = removeNicFromVirtualMachine.removeNicFromVirtualMachineCmd()
    cmd.virtualmachineid = (self.virtual_machine.id + random_gen())
    cmd.nicid = nics[0].id
    with self.assertRaises(Exception) as e:
        self.apiclient.removeNicFromVirtualMachine(cmd)
        self.debug(('removeNicFromVirtualMachine API failed with exception: %s' % e.exception))
    return
