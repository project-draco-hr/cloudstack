@attr(tags=['advanced'])
def test_11_update_nic_running_vm(self):
    'update default nic of running VM'
    self.addNetworkToVm(self.isolated_network, self.virtual_machine)
    self.debug('Listing virtual machine so that to retrive the list of non-default and default nic')
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    if (len(vm_list[0].nic) != 2):
        self.fail('VM should have exactly two NICs')
    defaultNicIdBeforeUpdate = None
    nonDefaultNicIdBeforeUpdate = None
    for nic in vm_list[0].nic:
        if nic.isdefault:
            defaultNicIdBeforeUpdate = nic.id
        else:
            nonDefaultNicIdBeforeUpdate = nic.id
    self.debug(('Default nic of VM is %s and non default nic of VM is %s' % (defaultNicIdBeforeUpdate, nonDefaultNicIdBeforeUpdate)))
    self.debug('Making non default nic as default nic')
    self.virtual_machine.update_default_nic(self.apiclient, nicId=nonDefaultNicIdBeforeUpdate)
    self.debug('Again listing the NIC list of VM to verify the update operation was successful')
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    if (len(vm_list[0].nic) != 2):
        self.fail('VM should have exactly two NICs')
    for nic in vm_list[0].nic:
        if nic.isdefault:
            defaultNicIdAfterUpdate = nic.id
    self.assertEqual(nonDefaultNicIdBeforeUpdate, defaultNicIdAfterUpdate, 'old non default NIC not made                        default one, update_default_nic API failed')
    self.debug("Retrieving events list matching events 'NIC.UPDATE'")
    events = list_events(self.apiclient, account=self.account.name, domainid=self.account.domainid, type='NIC.UPDATE')
    event_list_validation_result = validateList(events)
    self.assertEqual(event_list_validation_result[0], PASS, ('event list validation failed due to %s' % event_list_validation_result[2]))
    self.debug('Events list contains event NIC.UPDATE')
    self.debug(('events: %s' % events))
    return
