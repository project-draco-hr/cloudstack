@attr(tags=['advanced'])
def test_07_remove_nic_running_vm(self):
    'Remove nic from running VM'
    self.addNetworkToVm(self.isolated_network, self.virtual_machine)
    self.debug(('Removing added nic %s from vm %s' % (self.nics[0].id, self.virtual_machine.id)))
    self.virtual_machine.remove_nic(self.apiclient, self.nics[0].id)
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    self.debug(('virtual machine nics: %s' % vm_list[0].nic))
    self.debug('Verifying the nic is removed from the virtual machine')
    self.assertFalse(any(((x.networkid == self.isolated_network.id) for x in vm_list[0].nic)), 'nic still present in the virtual machine nic list')
    self.debug('nic removed successfully')
    self.debug("Retrieving events list matching events 'NIC.DELETE'")
    events = list_events(self.apiclient, account=self.account.name, domainid=self.account.domainid, type='NIC.DELETE')
    event_list_validation_result = validateList(events)
    self.assertEqual(event_list_validation_result[0], PASS, ('vm list validation failed due to %s' % event_list_validation_result[2]))
    self.debug('Events list contains event NIC.DELETE')
    self.debug(('events: %s' % events))
    return
