@attr(tags=['advanced'], required_hardware='true')
def test_29_remove_nic_CS22503(self):
    'Test to verify remove nic from vm if the nic ip is same as another vm ip in another network'
    vm1 = self.virtual_machine
    nic2 = self.addNetworkToVm(self.isolated_network, vm1)
    vm1_ip = nic2[0].ipaddress
    self.assertIsNotNone(vm1_ip, 'New nic did not get the ip address')
    self.network3 = Network.create(self.api_client, self.services['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    self.cleanup.append(self.network3)
    self.vm2 = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[self.network3.id], ipaddress=vm1_ip, mode=self.zone.networktype)
    self.cleanup.append(self.vm2)
    vm2 = VirtualMachine.list(self.api_client, id=self.vm2.id)
    self.assertEqual(validateList(vm2)[0], PASS, 'list vms returned invalid response')
    self.assertIsNotNone(vm2[0].nic[0].ipaddress, "vm2 didn't get the ip address")
    self.assertEqual(vm1_ip, vm2[0].nic[0].ipaddress, 'vm2 did not get the ip address passed while deploying vm')
    ip_address = PublicIPAddress.create(self.apiclient, self.account.name, self.zone.id, self.account.domainid, self.services['virtual_machine'], self.network3.id)
    self.cleanup.append(ip_address)
    self.cleanup = self.cleanup[::(-1)]
    FireWallRule.create(self.apiclient, ipaddressid=ip_address.ipaddress.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    nat_rule = NATRule.create(self.apiclient, self.vm2, self.services['natrule'], ip_address.ipaddress.id)
    list_nat_rule_response = list_nat_rules(self.apiclient, id=nat_rule.id)
    self.assertEqual(validateList(list_nat_rule_response)[0], PASS, 'Check list response returns a valid list')
    self.assertEqual(list_nat_rule_response[0].id, nat_rule.id, 'Check Correct Port forwarding Rule is returned')
    try:
        vm1.remove_nic(self.apiclient, self.nics[0].id)
        vm1_res = VirtualMachine.list(self.apiclient, id=vm1.id)
        self.assertEqual(validateList(vm1_res)[0], PASS, 'invalid listvm response')
        self.assertEqual(len(vm1_res[0].nic), 1, 'VM has more than one nic even after removing the 2nd nic')
    except Exception as e:
        self.fail('Failed to delete the nic from vm')
    return
