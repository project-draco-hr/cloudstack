@attr(tags=['advanced', 'dvs'])
def test_21_update_nic_wrong_vm_id(self):
    'update default nic of vm providing wrong vm id to the API'
    self.debug('Listing virtual machine so that to retrive the list of non-default and default nic')
    vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    vm_list_validation_result = validateList(vm_list)
    self.assertEqual(vm_list_validation_result[0], PASS, ('vm list validation failed due to %s' % vm_list_validation_result[2]))
    if (len(vm_list[0].nic) != 2):
        self.fail('VM should have exactly two NICs')
    defaultNicIdBeforeUpdate = None
    nonDefaultNicIdBeforeUpdate = None
    for nic in vm_list[0].nic:
        if nic.isdefault:
            defaultNicIdBeforeUpdate = nic.id
        else:
            nonDefaultNicIdBeforeUpdate = nic.id
    self.debug(('Default nic of VM is %s and non default nic of VM is %s' % (defaultNicIdBeforeUpdate, nonDefaultNicIdBeforeUpdate)))
    self.debug('Making non default nic as default nic')
    cmd = updateDefaultNicForVirtualMachine.updateDefaultNicForVirtualMachineCmd()
    cmd.virtualmachineid = (self.virtual_machine.id + random_gen())
    cmd.nicid = nonDefaultNicIdBeforeUpdate
    with self.assertRaises(Exception) as e:
        self.apiclient.updateDefaultNicForVirtualMachine(cmd)
        self.debug(('updateDefaultNicForVirtualMachine API failed with exception: %s' % e.exception))
    return
