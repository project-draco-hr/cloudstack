@classmethod
def setUpClass(cls):
    cls.api_client = super(TestFailureScenariosUpdateVirtualMachineNIC, cls).getClsTestClient().getApiClient()
    hypervisor = get_hypervisor_type(cls.api_client)
    if (hypervisor.lower() not in ['xenserver', 'kvm']):
        raise unittest.SkipTest('This feature is supported only on XenServer and KVM')
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = template.id
    cls.services['isolated_network']['zoneid'] = cls.zone.id
    cls.services['shared_network']['zoneid'] = cls.zone.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.zone.networktype)
    cls.defaultNetworkId = cls.virtual_machine.nic[0].networkid
    cls.isolated_network_offering = NetworkOffering.create(cls.api_client, cls.services['isolated_network_offering'])
    cls.isolated_network_offering.update(cls.api_client, state='Enabled')
    cls.isolated_network = Network.create(cls.api_client, cls.services['isolated_network'], cls.account.name, cls.account.domainid, networkofferingid=cls.isolated_network_offering.id)
    cls.virtual_machine.add_nic(cls.api_client, cls.isolated_network.id)
    cls._cleanup = [cls.account, cls.service_offering, cls.isolated_network_offering]
    return
