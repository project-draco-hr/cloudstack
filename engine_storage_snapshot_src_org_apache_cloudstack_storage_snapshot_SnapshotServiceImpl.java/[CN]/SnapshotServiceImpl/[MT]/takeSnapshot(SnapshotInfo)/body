{
  SnapshotObject snapshot=(SnapshotObject)snap;
  SnapshotObject snapshotOnPrimary=null;
  try {
    snapshotOnPrimary=(SnapshotObject)snap.getDataStore().create(snapshot);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to create snapshot state on data store due to " + e.getMessage());
    throw new CloudRuntimeException(e);
  }
  try {
    snapshotOnPrimary.processEvent(Snapshot.Event.CreateRequested);
  }
 catch (  NoTransitionException e) {
    s_logger.debug("Failed to change snapshot state: " + e.toString());
    throw new CloudRuntimeException(e);
  }
  try {
    snapshotOnPrimary.processEvent(Event.CreateOnlyRequested);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to change snapshot state: " + e.toString());
    try {
      snapshotOnPrimary.processEvent(Snapshot.Event.OperationFailed);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug("Failed to change snapshot state: " + e1.toString());
    }
    throw new CloudRuntimeException(e);
  }
  AsyncCallFuture<SnapshotResult> future=new AsyncCallFuture<SnapshotResult>();
  try {
    CreateSnapshotContext<CommandResult> context=new CreateSnapshotContext<CommandResult>(null,snap.getBaseVolume(),snapshotOnPrimary,future);
    AsyncCallbackDispatcher<SnapshotServiceImpl,CreateCmdResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().createSnapshotAsyncCallback(null,null)).setContext(context);
    PrimaryDataStoreDriver primaryStore=(PrimaryDataStoreDriver)snapshotOnPrimary.getDataStore().getDriver();
    primaryStore.takeSnapshot(snapshot,caller);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to take snapshot: " + snapshot.getId(),e);
    try {
      snapshot.processEvent(Snapshot.Event.OperationFailed);
      snapshot.processEvent(Event.OperationFailed);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug("Failed to change state for event: OperationFailed",e);
    }
    throw new CloudRuntimeException("Failed to take snapshot" + snapshot.getId());
  }
  SnapshotResult result;
  try {
    result=future.get();
    if (result.isFailed()) {
      snapshot.processEvent(Snapshot.Event.OperationFailed);
      snapshot.processEvent(Event.OperationFailed);
      throw new CloudRuntimeException(result.getResult());
    }
    return result;
  }
 catch (  InterruptedException e) {
    s_logger.debug("Failed to create snapshot",e);
    throw new CloudRuntimeException("Failed to create snapshot",e);
  }
catch (  ExecutionException e) {
    s_logger.debug("Failed to create snapshot",e);
    throw new CloudRuntimeException("Failed to create snapshot",e);
  }
catch (  NoTransitionException e) {
    s_logger.debug("Failed to create snapshot",e);
    throw new CloudRuntimeException("Failed to create snapshot",e);
  }
}
