def load_dynamic_methods():
    'creates smart function objects for every method in the commands.xml file'

    def getText(nodelist):
        rc = []
        for node in nodelist:
            if (node.nodeType == node.TEXT_NODE):
                rc.append(node.data)
        return ''.join(rc)
    xmlfile = os.path.join('/etc/cloud/cli/', 'commands.xml')
    dom = xml.dom.minidom.parse(xmlfile)
    for cmd in dom.getElementsByTagName('command'):
        name = getText(cmd.getElementsByTagName('name')[0].childNodes).strip()
        assert name
        description = getText(cmd.getElementsByTagName('description')[0].childNodes).strip()
        if description:
            description = ('"""%s"""' % description)
        else:
            description = ''
        arguments = []
        options = []
        descriptions = []
        for param in cmd.getElementsByTagName('request')[0].getElementsByTagName('arg'):
            argname = getText(param.getElementsByTagName('name')[0].childNodes).strip()
            assert argname
            required = getText(param.getElementsByTagName('required')[0].childNodes).strip()
            if (required == 'true'):
                required = True
            elif (required == 'false'):
                required = False
            else:
                raise AssertionError, 'Not reached'
            if required:
                arguments.append(argname)
            options.append(argname)
            requestDescription = param.getElementsByTagName('description')
            if requestDescription:
                descriptionParam = getText(requestDescription[0].childNodes)
            else:
                descriptionParam = ''
            if descriptionParam:
                descriptions.append((argname, descriptionParam))
        funcparams = (['self'] + [('%s=None' % o) for o in options])
        funcparams = ', '.join(funcparams)
        code = ('\n        def %s(%s):\n            %s\n            parms = locals()\n            del parms["self"]\n            for arg in %r:\n                if locals()[arg] is None:\n                    raise TypeError, "%%s is a required option"%%arg \n            for k,v in parms.items():\n                if v is None: del parms[k]\n            output = self._make_request("%s",parms)\n            return output\n        ' % (name, funcparams, description, arguments, name))
        namespace = {}
        exec code.strip() in namespace
        func = namespace[name]
        for (argname, description) in descriptions:
            func = describe(argname, description)(func)
        yield (name, func)
