{
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long hostId=(Long)params.get(BaseCmd.Properties.HOST_ID.getName());
  String type=(String)params.get(BaseCmd.Properties.TYPE.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=1000000;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("capacityType",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.DATACENTERID,zoneId);
  c.addCriteria(Criteria.PODID,podId);
  c.addCriteria(Criteria.HOSTID,hostId);
  c.addCriteria(Criteria.TYPE,type);
  List<CapacityVO> capacities=getManagementServer().listCapacities(c);
  if (capacities == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"unable to get capacity statistic");
  }
  List<CapacityVO> summedCapacities=sumCapacities(capacities);
  List<Pair<String,Object>> capacitiesTags=new ArrayList<Pair<String,Object>>();
  Object[] cTag=new Object[summedCapacities.size()];
  int i=0;
  for (  CapacityVO capacity : summedCapacities) {
    List<Pair<String,Object>> capacityData=new ArrayList<Pair<String,Object>>();
    capacityData.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),capacity.getCapacityType()));
    capacityData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),capacity.getDataCenterId()));
    capacityData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().getDataCenterBy(capacity.getDataCenterId()).getName()));
    if (capacity.getPodId() != null) {
      capacityData.add(new Pair<String,Object>(BaseCmd.Properties.POD_ID.getName(),capacity.getPodId()));
      capacityData.add(new Pair<String,Object>(BaseCmd.Properties.POD_NAME.getName(),(capacity.getPodId() > 0) ? getManagementServer().findHostPodById(capacity.getPodId()).getName() : "All"));
    }
    capacityData.add(new Pair<String,Object>(BaseCmd.Properties.CAPACITY_USED.getName(),Long.valueOf(capacity.getUsedCapacity()).toString()));
    capacityData.add(new Pair<String,Object>(BaseCmd.Properties.CAPACITY_TOTAL.getName(),Long.valueOf(capacity.getTotalCapacity()).toString()));
    try {
      if (capacity.getTotalCapacity() != 0) {
        float percent=(float)capacity.getUsedCapacity() / (float)capacity.getTotalCapacity() * 100;
        capacityData.add(new Pair<String,Object>(BaseCmd.Properties.PERCENT_USED.getName(),s_percentFormat.format(percent)));
      }
 else {
        capacityData.add(new Pair<String,Object>(BaseCmd.Properties.PERCENT_USED.getName(),s_percentFormat.format(0)));
      }
    }
 catch (    Exception ex) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"unable to get capacity statistic");
    }
    cTag[i++]=capacityData;
  }
  Pair<String,Object> capacityTag=new Pair<String,Object>("capacity",cTag);
  capacitiesTags.add(capacityTag);
  return capacitiesTags;
}
