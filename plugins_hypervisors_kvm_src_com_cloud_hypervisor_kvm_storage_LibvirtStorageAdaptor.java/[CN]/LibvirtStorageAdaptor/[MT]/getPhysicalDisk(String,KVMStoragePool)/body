{
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=this.getVolume(libvirtPool.getPool(),volumeUuid);
    KVMPhysicalDisk disk;
    LibvirtStorageVolumeDef voldef=getStorageVolumeDef(libvirtPool.getPool().getConnect(),vol);
    disk=new KVMPhysicalDisk(vol.getPath(),vol.getName(),pool);
    disk.setSize(vol.getInfo().allocation);
    disk.setVirtualSize(vol.getInfo().capacity);
    if (voldef.getFormat() == null) {
      File diskDir=new File(disk.getPath());
      if (diskDir.exists() && diskDir.isDirectory()) {
        disk.setFormat(PhysicalDiskFormat.DIR);
      }
 else       if (volumeUuid.endsWith("tar") || volumeUuid.endsWith(("TAR"))) {
        disk.setFormat(PhysicalDiskFormat.TAR);
      }
 else {
        disk.setFormat(pool.getDefaultFormat());
      }
    }
 else     if (pool.getType() == StoragePoolType.RBD) {
      disk.setFormat(KVMPhysicalDisk.PhysicalDiskFormat.RAW);
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.QCOW2) {
      disk.setFormat(KVMPhysicalDisk.PhysicalDiskFormat.QCOW2);
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.RAW) {
      disk.setFormat(KVMPhysicalDisk.PhysicalDiskFormat.RAW);
    }
    return disk;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}
