{
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  s_logger.debug("copyPhysicalDisk: disk size:" + disk.getSize() + ", virtualsize:"+ disk.getVirtualSize()+ " format:"+ disk.getFormat());
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,Storage.ProvisioningType.THIN,disk.getVirtualSize());
    }
 else {
      newDisk=destPool.createPhysicalDisk(name,Storage.ProvisioningType.THIN,disk.getVirtualSize());
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + "/" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR && destFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript("cp " + sourcePath + " "+ destPath);
    }
 else     if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript("tar -x -f " + sourcePath + " -C "+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript("mkdir -p " + destPath);
      Script.runSimpleBashScript("chmod 755 " + destPath);
      Script.runSimpleBashScript("cp -p -r " + sourcePath + "/* "+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String("backing_file"));
        if (sourceFormat.equals(destFormat) && backingFile == null && sourcePath.endsWith(".qcow2")) {
          String result=Script.runSimpleBashScript("cp -f " + sourcePath + " "+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException("Failed to create disk: " + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error("Failed to convert " + srcFile.getFileName() + " to "+ destFile.getFileName()+ " the error was: "+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error("Failed to fetch the information of file " + srcFile.getFileName() + " the error was: "+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug("The source image is not RBD, but the destination is. We will convert into RBD format 2");
    try {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      String rbdDestFile=KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),destPool.getSourceDir() + "/" + name);
      destFile=new QemuImgFile(rbdDestFile,destFormat);
      s_logger.debug("Starting copy from source image " + srcFile.getFileName() + " to RBD image "+ destPool.getSourceDir()+ "/"+ name);
      qemu.convert(srcFile,destFile);
      s_logger.debug("Succesfully converted source image " + srcFile.getFileName() + " to RBD image "+ destPool.getSourceDir()+ "/"+ name);
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet("mon_host",destPool.getSourceHost() + ":" + destPool.getSourcePort());
      r.confSet("key",destPool.getAuthSecret());
      r.confSet("client_mount_timeout","30");
      r.connect();
      s_logger.debug("Succesfully connected to Ceph cluster at " + r.confGet("mon_host"));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(name);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error("Failed to convert from " + srcFile.getFileName() + " to "+ destFile.getFileName()+ " the error was: "+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error("A Ceph RADOS operation failed (" + e.getReturnValue() + "). The error was: "+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error("A Ceph RBD operation failed (" + e.getReturnValue() + "). The error was: "+ e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error("Failed to convert " + srcFile.getFileName() + " to "+ destFile.getFileName()+ " the error was: "+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException("Failed to copy " + disk.getPath() + " to "+ name);
  }
  return newDisk;
}
