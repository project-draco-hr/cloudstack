{
  if (pool.getType() == StoragePoolType.RBD) {
    try {
      s_logger.info("Unprotecting and Removing RBD snapshots of image " + pool.getSourceDir() + "/"+ uuid+ " prior to removing the image");
      Rados r=new Rados(pool.getAuthUserName());
      r.confSet("mon_host",pool.getSourceHost() + ":" + pool.getSourcePort());
      r.confSet("key",pool.getAuthSecret());
      r.confSet("client_mount_timeout","30");
      r.connect();
      s_logger.debug("Succesfully connected to Ceph cluster at " + r.confGet("mon_host"));
      IoCTX io=r.ioCtxCreate(pool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(uuid);
      s_logger.debug("Fetching list of snapshots of RBD image " + pool.getSourceDir() + "/"+ uuid);
      List<RbdSnapInfo> snaps=image.snapList();
      for (      RbdSnapInfo snap : snaps) {
        s_logger.debug("Unprotecting snapshot " + pool.getSourceDir() + "/"+ uuid+ "@"+ snap.name);
        image.snapUnprotect(snap.name);
        s_logger.debug("Removing snapshot " + pool.getSourceDir() + "/"+ uuid+ "@"+ snap.name);
        image.snapRemove(snap.name);
      }
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    RadosException e) {
      throw new CloudRuntimeException(e.toString());
    }
catch (    RbdException e) {
      throw new CloudRuntimeException(e.toString());
    }
  }
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=getVolume(libvirtPool.getPool(),uuid);
    deleteVol(libvirtPool,vol);
    vol.free();
    return true;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}
