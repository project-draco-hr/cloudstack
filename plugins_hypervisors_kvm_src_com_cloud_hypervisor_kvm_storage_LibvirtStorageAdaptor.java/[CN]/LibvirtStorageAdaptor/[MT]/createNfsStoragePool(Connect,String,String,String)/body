{
  String targetPath=_mountPoint + File.separator + uuid;
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.NETFS,uuid,uuid,host,path,targetPath);
  _storageLayer.mkdir(targetPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolCreateXML(spd.toString(),0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.error(e.toString());
    if (e.toString().contains("already mounted")) {
      s_logger.error("Attempting to unmount old mount libvirt is unaware of at " + targetPath);
      String result=Script.runSimpleBashScript("umount -l " + targetPath);
      if (result == null) {
        s_logger.error("Succeeded in unmounting " + targetPath);
        try {
          sp=conn.storagePoolCreateXML(spd.toString(),0);
          s_logger.error("Succeeded in redefining storage");
          return sp;
        }
 catch (        LibvirtException l) {
          s_logger.error("Target was already mounted, unmounted it but failed to redefine storage:" + l);
        }
      }
 else {
        s_logger.error("Failed in unmounting and redefining storage");
      }
    }
 else {
      s_logger.error("Internal error occurred when attempting to mount: specified path may be invalid");
      throw e;
    }
    if (sp != null) {
      try {
        if (sp.isPersistent() == 1) {
          sp.destroy();
          sp.undefine();
        }
 else {
          sp.destroy();
        }
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug("Failed to undefine nfs storage pool with: " + l.toString());
      }
    }
    return null;
  }
}
