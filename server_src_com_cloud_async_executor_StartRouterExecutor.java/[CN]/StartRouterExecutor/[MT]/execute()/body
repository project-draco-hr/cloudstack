{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  VMOperationParam param=gson.fromJson(job.getCmdInfo(),VMOperationParam.class);
  if (getSyncSource() == null) {
    asyncMgr.syncAsyncJobExecution(job.getId(),"Router",param.getVmId());
    return true;
  }
 else {
    boolean success=false;
    try {
      DomainRouter router=managementServer.startRouter(param.getVmId(),param.getEventId());
      if (router != null) {
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,RouterExecutorHelper.composeResultObject(managementServer,router));
      }
 else       asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"operation failed");
    }
 catch (    InternalErrorException e) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
catch (    Exception e) {
      s_logger.warn("Unable to start router " + param.getVmId() + ":"+ e.getMessage(),e);
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
 finally {
      if (!success) {
        asyncMgr.getExecutorContext().getManagementServer().saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_ERROR,EventTypes.EVENT_ROUTER_START,"Failed to start router",null,param.getEventId());
      }
    }
    return true;
  }
}
