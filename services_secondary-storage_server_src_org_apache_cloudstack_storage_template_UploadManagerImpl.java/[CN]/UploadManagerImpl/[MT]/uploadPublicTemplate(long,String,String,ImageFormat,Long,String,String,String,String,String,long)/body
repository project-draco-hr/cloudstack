{
  UUID uuid=UUID.randomUUID();
  String jobId=uuid.toString();
  String completePath=parentDir + File.separator + installPathPrefix;
  logger.debug("Starting upload from " + completePath);
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  URISyntaxException e) {
    logger.error("URI is incorrect: " + url);
    throw new CloudRuntimeException("URI is incorrect: " + url);
  }
  TemplateUploader tu;
  if ((uri != null) && (uri.getScheme() != null)) {
    if (uri.getScheme().equalsIgnoreCase("ftp")) {
      tu=new FtpTemplateUploader(completePath,url,new Completion(jobId),templateSizeInBytes);
    }
 else {
      logger.error("Scheme is not supported " + url);
      throw new CloudRuntimeException("Scheme is not supported " + url);
    }
  }
 else {
    logger.error("Unable to download from URL: " + url);
    throw new CloudRuntimeException("Unable to download from URL: " + url);
  }
  UploadJob uj=new UploadJob(tu,jobId,id,name,format,hvm,accountId,descr,cksum,installPathPrefix);
  jobs.put(jobId,uj);
  threadPool.execute(tu);
  return jobId;
}
