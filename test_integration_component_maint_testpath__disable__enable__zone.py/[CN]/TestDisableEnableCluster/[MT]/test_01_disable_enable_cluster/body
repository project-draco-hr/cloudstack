@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_disable_enable_cluster(self):
    'disable enable cluster\n            1. Disable cluster and verify following things:\n                For admin user:\n                     --Should be able to create new vm, snapshot,\n                     volume,template,iso in the same cluster\n                For Non-admin user:\n                     --Should not be able create new vm, snapshot,\n                     volume,template,iso in the same cluster\n            2. Enable the above disabled cluster and verify that:\n                -All users should be create to deploy new vm, snapshot,\n                volume,template,iso in the same cluster\n            3. Disable the managestate of the cluster and verify that:\n                --Host in the cluster should get disconnected\n                --VM\'s in the cluster are ping-able and ssh to\n                --Creation of new VM in the cluster should fail\n            4. Enable the managestate of the cluster and verify that:\n                --Hosts in the cluster get connected\n                --VM\'s in the cluster are accessible\n            5. Try to delete the cluster and it should fail with error message:\n                -"The cluster is not deletable because there are\n                servers running in this cluster"\n\n        '
    vm_user = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.vm_list.append(vm_user)
    vm_root = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.vm_list.append(vm_root)
    cmd = updateCluster.updateClusterCmd()
    cmd.id = self.cluster.id
    cmd.allocationstate = DISABLED
    self.apiclient.updateCluster(cmd)
    clusterList = Cluster.list(self.apiclient, id=self.cluster.id)
    self.assertEqual(clusterList[0].allocationstate, DISABLED, 'Check if the cluster is in disabled state')
    self.assertEqual(vm_user.state.lower(), 'running', 'Verify that the user vm is running')
    self.assertEqual(vm_root.state.lower(), 'running', 'Verify that the root vm is running')
    VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    root_volume = list_volumes(self.userapiclient, virtualmachineid=vm_root.id, type='ROOT', listall=True)
    if self.snapshotSupported:
        Snapshot.create(self.apiclient, root_volume[0].id)
        snapshots = list_snapshots(self.apiclient, volumeid=root_volume[0].id, listall=True)
        Template.create_from_snapshot(self.apiclient, snapshots[0], self.testdata['privatetemplate'])
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.testdata['privatetemplate']['url'] = builtin_info[0]
    self.testdata['privatetemplate']['hypervisor'] = builtin_info[1]
    self.testdata['privatetemplate']['format'] = builtin_info[2]
    Template.register(self.apiclient, self.testdata['privatetemplate'], zoneid=self.zone.id)
    Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id)
    Iso.create(self.apiclient, self.testdata['iso2'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    with self.assertRaises(Exception):
        VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, mode=self.zone.networktype)
    root_volume = list_volumes(self.userapiclient, virtualmachineid=vm_user.id, type='ROOT', listall=True)
    if self.snapshotSupported:
        with self.assertRaises(Exception):
            Snapshot.create(self.userapiclient, root_volume[0].id)
    with self.assertRaises(Exception):
        Template.register(self.userapiclient, self.testdata['privatetemplate'], zoneid=self.zone.id)
    Volume.create(self.userapiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id)
    with self.assertRaises(Exception):
        Iso.create(self.userapiclient, self.testdata['iso2'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    cmd.allocationstate = ENABLED
    self.apiclient.updateCluster(cmd)
    clusterList = Cluster.list(self.apiclient, id=self.cluster.id)
    self.assertEqual(clusterList[0].allocationstate, ENABLED, 'Check if the cluster is in disabled state')
    root_vm_new = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.assertEqual(root_vm_new.state.lower(), 'running', 'Verify that admin should create new VM')
    if self.snapshotSupported:
        Snapshot.create(self.apiclient, root_volume[0].id)
    user_vm_new = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.assertEqual(user_vm_new.state.lower(), 'running', 'Verify that admin should create new VM')
    if self.snapshotSupported:
        Snapshot.create(self.userapiclient, root_volume[0].id)
    cmd = updateCluster.updateClusterCmd()
    cmd.id = self.cluster.id
    cmd.managedstate = 'Unmanaged'
    self.apiclient.updateCluster(cmd)
    clusterList = Cluster.list(self.apiclient, id=self.cluster.id)
    self.assertEqual(clusterList[0].managedstate.lower(), 'unmanaged', 'Check if the cluster is in unmanaged  state')
    time.sleep(60)
    hostList = Host.list(self.apiclient, clusterid=self.cluster.id)
    for host in hostList:
        self.assertEqual(host.state.lower(), 'disconnected', 'Check if host in the cluster gets disconnected')
    for vm in self.vm_list:
        try:
            SshClient(vm.ssh_ip, vm.ssh_port, vm.username, vm.password)
        except Exception as e:
            self.exception_list.append(e)
    self.assertEqual(self.exception_list, [], "Check if vm's are accesible")
    with self.assertRaises(Exception):
        VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, mode=self.zone.networktype)
    root_volume = list_volumes(self.userapiclient, virtualmachineid=vm_user.id, type='ROOT', listall=True)
    if self.snapshotSupported:
        with self.assertRaises(Exception):
            Snapshot.create(self.userapiclient, root_volume[0].id)
    with self.assertRaises(Exception):
        Template.register(self.userapiclient, self.testdata['privatetemplate'], zoneid=self.zone.id)
    cmd.managedstate = 'Managed'
    self.apiclient.updateCluster(cmd)
    time.sleep(60)
    hostList = Host.list(self.apiclinet, clusterid=self.cluster.id)
    for host in hostList:
        self.assertEqual(host.state.lower(), 'up', 'Check if host in the cluster gets up')
    vm_root.stop(self.apiclient)
    vm_user.stop(self.apiclient)
    root_state = self.dbclient.execute(("select state from vm_instance where name='%s'" % vm_root.name))[0][0]
    user_state = self.dbclient.execute(("select state from vm_instance where name='%s'" % vm_user.name))[0][0]
    self.assertEqual(root_state, 'Stopped', 'verify that vm should stop')
    self.assertEqual(user_state, 'Stopped', 'verify that vm should stop')
    root_vm_new = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.assertEqual(root_vm_new.state.lower(), 'running', 'Verify that admin should create new VM')
    with self.assertRaises(Exception):
        self.pod.delete(self.apiclient)
    return
