@attr(tags=['basic', 'advanced'], required_hardware='false')
def test_01_dedicated_cluster_allocation(self):
    ' Dedicated cluster and router allocation\n            1.   Dedicate a cluster to one account\n            2.   Deploy a VM on dedicated account\n            3.   Deploy another VM on another account.\n            4.   Verify the dedicated cluster is not used for\n                virtual routers that belong to non-dedicated account\n        '
    dedicateCmd = dedicateCluster.dedicateClusterCmd()
    dedicateCmd.clusterid = self.clusters[0].id
    dedicateCmd.domainid = self.domain.id
    dedicateCmd.account = self.account_1.name
    self.apiclient.dedicateCluster(dedicateCmd)
    afcmd = listAffinityGroups.listAffinityGroupsCmd()
    afcmd.account = self.account_1.name
    afcmd.domainid = self.account_1.domainid
    affinitygr_list = self.apiclient.listAffinityGroups(afcmd)
    self.vm = VirtualMachine.create(self.userapiclient_1, self.testdata['small'], templateid=self.template.id, accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id, affinitygroupids=[affinitygr_list[0].id], zoneid=self.zone.id, mode=self.zone.networktype)
    vmlist = list_virtual_machines(self.apiclient, id=self.vm.id)
    hostlist = list_hosts(self.apiclient, id=vmlist[0].hostid)
    self.assertEqual(hostlist[0].clusterid, self.clusters[0].id, 'check if vm gets deployed on dedicated clusture')
    self.vm_1 = VirtualMachine.create(self.userapiclient_2, self.testdata['small'], templateid=self.template.id, accountid=self.account_2.name, domainid=self.account_2.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, mode=self.zone.networktype)
    vmlist_1 = list_virtual_machines(self.apiclient, id=self.vm_1.id)
    hostlist_1 = list_hosts(self.apiclient, id=vmlist_1[0].hostid)
    self.assertNotEqual(hostlist_1[0].clusterid, self.clusters[0].id, 'check if vm gets deployed on correct clusture')
    routerList = list_routers(self.apiclient, clusterid=self.clusters[0].id, networkid=self.vm_1.nic[0].networkid)
    self.assertEqual(routerList, None, 'Check Dedicated cluster is used for virtual routers                     that belong to non-dedicated account')
    return
