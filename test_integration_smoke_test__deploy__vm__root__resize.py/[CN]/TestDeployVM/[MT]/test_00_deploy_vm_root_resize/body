@attr(tags=['advanced', 'simulator', 'basic', 'sg'])
def test_00_deploy_vm_root_resize(self):
    'Test deploy virtual machine with root resize\n\n        # Validate the following:\n        # 1. listVirtualMachines returns accurate information\n        # 2. root disk has new size per listVolumes\n        # 3. Rejects non-supported hypervisor types\n        '
    if (self.apiclient.hypervisor == 'kvm'):
        newrootsize = ((self.template.size >> 30) + 2)
        self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id, rootdisksize=newrootsize)
        list_vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
        self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
        self.assertEqual(isinstance(list_vms, list), True, 'List VM response was not a valid list')
        self.assertNotEqual(len(list_vms), 0, 'List VM response was empty')
        vm = list_vms[0]
        self.assertEqual(vm.id, self.virtual_machine.id, 'Virtual Machine ids do not match')
        self.assertEqual(vm.name, self.virtual_machine.name, 'Virtual Machine names do not match')
        self.assertEqual(vm.state, 'Running', msg='VM is not in Running state')
        list_volume_response = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
        rootvolume = list_volume_response[0]
        success = False
        if ((rootvolume is not None) and (rootvolume.size == (newrootsize << 30))):
            success = True
        self.assertEqual(success, True, 'Check if the root volume resized appropriately')
    else:
        self.debug(('hypervisor %s unsupported for test 00, verifying it errors properly' % self.apiclient.hypervisor))
        newrootsize = ((self.template.size >> 30) + 2)
        success = False
        try:
            self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id, rootdisksize=newrootsize)
        except Exception as ex:
            if ('Hypervisor XenServer does not support rootdisksize override' in str(ex)):
                success = True
            else:
                self.debug(('virtual machine create did not fail appropriately. Error was actually : ' + str(ex)))
        self.assertEqual(success, True, ('Check if unsupported hypervisor %s fails appropriately' % self.apiclient.hypervisor))
