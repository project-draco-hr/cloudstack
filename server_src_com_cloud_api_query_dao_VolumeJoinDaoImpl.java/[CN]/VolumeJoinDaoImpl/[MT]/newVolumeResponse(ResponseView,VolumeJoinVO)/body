{
  Account caller=CallContext.current().getCallingAccount();
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getUuid());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName("");
  }
  volResponse.setZoneId(volume.getDataCenterUuid());
  volResponse.setZoneName(volume.getDataCenterName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  long instanceId=volume.getVmId();
  if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {
    volResponse.setVirtualMachineId(volume.getVmUuid());
    volResponse.setVirtualMachineName(volume.getVmName());
    volResponse.setVirtualMachineState(volume.getVmState().toString());
    volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());
  }
  volResponse.setProvisioningType(volume.getProvisioningType().toString());
  volResponse.setSize(volume.getSize());
  volResponse.setMinIops(volume.getMinIops());
  volResponse.setMaxIops(volume.getMaxIops());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  if (volume.getState() == Volume.State.UploadOp) {
    volResponse.setSize(volume.getVolumeStoreSize());
    volResponse.setCreated(volume.getCreatedOnStore());
    if (view == ResponseView.Full)     volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(),volume.getFormat()).toString());
    if (volume.getDownloadState() != Status.DOWNLOADED) {
      String volumeStatus="Processing";
      if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {
        if (volume.getDownloadPercent() == 100) {
          volumeStatus="Checking Volume";
        }
 else {
          volumeStatus=volume.getDownloadPercent() + "% Uploaded";
        }
        volResponse.setState("Uploading");
      }
 else {
        volumeStatus=volume.getErrorString();
        if (volume.getDownloadState() == VMTemplateHostVO.Status.NOT_DOWNLOADED) {
          volResponse.setState("UploadNotStarted");
        }
 else {
          volResponse.setState("UploadError");
        }
      }
      volResponse.setStatus(volumeStatus);
    }
 else     if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {
      volResponse.setStatus("Upload Complete");
      volResponse.setState("Uploaded");
    }
 else {
      volResponse.setStatus("Successfully Installed");
    }
  }
  if (view == ResponseView.Full) {
    volResponse.setPath(volume.getPath());
  }
  ApiResponseHelper.populateOwner(volResponse,volume);
  if (volume.getDiskOfferingId() > 0) {
    boolean isServiceOffering=false;
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      isServiceOffering=true;
    }
 else {
      long offeringId=volume.getDiskOfferingId();
      if (ApiDBUtils.findDiskOfferingById(offeringId) == null) {
        isServiceOffering=true;
      }
    }
    if (isServiceOffering) {
      volResponse.setServiceOfferingId(volume.getDiskOfferingUuid());
      volResponse.setServiceOfferingName(volume.getDiskOfferingName());
      volResponse.setServiceOfferingDisplayText(volume.getDiskOfferingDisplayText());
    }
 else {
      volResponse.setDiskOfferingId(volume.getDiskOfferingUuid());
      volResponse.setDiskOfferingName(volume.getDiskOfferingName());
      volResponse.setDiskOfferingDisplayText(volume.getDiskOfferingDisplayText());
    }
    volResponse.setStorageType(volume.isUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());
    volResponse.setBytesReadRate(volume.getBytesReadRate());
    volResponse.setBytesWriteRate(volume.getBytesReadRate());
    volResponse.setIopsReadRate(volume.getIopsWriteRate());
    volResponse.setIopsWriteRate(volume.getIopsWriteRate());
  }
  if (view == ResponseView.Full) {
    if (volume.getState() != Volume.State.UploadOp) {
      if (volume.getHypervisorType() != null) {
        volResponse.setHypervisor(volume.getHypervisorType().toString());
      }
 else {
        volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(),volume.getFormat()).toString());
      }
    }
    Long poolId=volume.getPoolId();
    String poolName=(poolId == null) ? "none" : volume.getPoolName();
    volResponse.setStoragePoolName(poolName);
    volResponse.setStoragePoolId(volume.getPoolUuid());
  }
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  boolean isExtractable=true;
  if (volume.getVolumeType() != Volume.Type.DATADISK) {
    if (volume.getTemplateId() > 0) {
      isExtractable=volume.isExtractable() && volume.getTemplateType() != Storage.TemplateType.SYSTEM;
    }
  }
  long tag_id=volume.getTagId();
  if (tag_id > 0) {
    ResourceTagJoinVO vtag=ApiDBUtils.findResourceTagViewById(tag_id);
    if (vtag != null) {
      volResponse.addTag(ApiDBUtils.newResourceTagResponse(vtag,false));
    }
  }
  volResponse.setExtractable(isExtractable);
  volResponse.setDisplayVolume(volume.isDisplayVolume());
  volResponse.setChainInfo(volume.getChainInfo());
  volResponse.setTemplateId(volume.getTemplateUuid());
  volResponse.setTemplateName(volume.getTemplateName());
  volResponse.setTemplateDisplayText(volume.getTemplateDisplayText());
  volResponse.setIsoId(volume.getIsoUuid());
  volResponse.setIsoName(volume.getIsoName());
  volResponse.setIsoDisplayText(volume.getIsoDisplayText());
  if (volume.getJobId() != null) {
    volResponse.setJobId(volume.getJobUuid());
    volResponse.setJobStatus(volume.getJobStatus());
  }
  volResponse.setObjectName("volume");
  return volResponse;
}
