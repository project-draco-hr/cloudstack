{
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  capabilities.put(Service.Connectivity,null);
  capabilities.put(Service.Gateway,null);
  capabilities.put(Service.SecurityGroup,null);
  Map<Capability,String> sourceNatCapabilities=new HashMap<Capability,String>();
  sourceNatCapabilities.put(Capability.SupportedSourceNatTypes,"perzone");
  sourceNatCapabilities.put(Capability.RedundantRouter,"false");
  capabilities.put(Service.SourceNat,sourceNatCapabilities);
  capabilities.put(Service.StaticNat,null);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.TrafficStatistics,"per public ip");
  firewallCapabilities.put(Capability.SupportedProtocols,"tcp,udp,icmp");
  firewallCapabilities.put(Capability.SupportedEgressProtocols,"tcp,udp,icmp, all");
  firewallCapabilities.put(Capability.SupportedTrafficDirection,"ingress, egress");
  firewallCapabilities.put(Capability.MultipleIps,"true");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> dhcpCapabilities=new HashMap<Capability,String>();
  capabilities.put(Service.Dhcp,dhcpCapabilities);
  Map<Network.Capability,String> networkACLCapabilities=new HashMap<Network.Capability,String>();
  networkACLCapabilities.put(Network.Capability.SupportedProtocols,"tcp,udp,icmp");
  capabilities.put(Network.Service.NetworkACL,networkACLCapabilities);
  return capabilities;
}
