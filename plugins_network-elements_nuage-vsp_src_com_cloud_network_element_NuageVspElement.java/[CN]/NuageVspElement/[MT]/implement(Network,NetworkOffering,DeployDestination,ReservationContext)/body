{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Entering NuageElement implement function for network " + network.getDisplayText() + " (state "+ network.getState()+ ")");
  }
  if (network.getVpcId() != null) {
    return applyACLRulesForVpc(network,offering);
  }
  if (!canHandle(network,Service.Connectivity)) {
    return false;
  }
  if (network.getBroadcastUri() == null) {
    s_logger.error("Nic has no broadcast Uri with the virtual router IP");
    return false;
  }
  VspNetwork vspNetwork=_nuageVspEntityBuilder.buildVspNetwork(network,false);
  List<String> dnsServers=_nuageVspManager.getDnsDetails(network);
  List<VspAclRule> ingressFirewallRules=getFirewallRulesToApply(network,FirewallRule.TrafficType.Ingress);
  List<VspAclRule> egressFirewallRules=getFirewallRulesToApply(network,FirewallRule.TrafficType.Egress);
  List<IPAddressVO> ips=_ipAddressDao.listStaticNatPublicIps(network.getId());
  List<String> floatingIpUuids=new ArrayList<String>();
  for (  IPAddressVO ip : ips) {
    floatingIpUuids.add(ip.getUuid());
  }
  HostVO nuageVspHost=getNuageVspHost(network.getPhysicalNetworkId());
  ImplementVspCommand cmd=new ImplementVspCommand(vspNetwork,dnsServers,ingressFirewallRules,egressFirewallRules,floatingIpUuids);
  Answer answer=_agentMgr.easySend(nuageVspHost.getId(),cmd);
  if (answer == null || !answer.getResult()) {
    s_logger.error("ImplementVspCommand for network " + network.getUuid() + " failed on Nuage VSD "+ nuageVspHost.getDetail("hostname"));
    if ((null != answer) && (null != answer.getDetails())) {
      throw new ResourceUnavailableException(answer.getDetails(),Network.class,network.getId());
    }
  }
  return true;
}
