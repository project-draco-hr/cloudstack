@attr(tags=['advanced', 'advancedns', 'smoke', 'basic', 'sg'], required_hardware='false')
def test_01_primary_storage_nfs(self):
    'Test primary storage pools - XEN, KVM, VMWare\n        '
    if (self.hypervisor.lower() in ['kvm', 'hyperv']):
        raise self.skipTest('NFS primary storage not supported on kvm or Hyper-V')
    clusters = list_clusters(self.apiclient, zoneid=self.zone.id)
    assert (isinstance(clusters, list) and (len(clusters) > 0))
    for cluster in clusters:
        list_hosts_response = list_hosts(self.apiclient, clusterid=cluster.id)
        self.assertEqual(isinstance(list_hosts_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(list_hosts_response), 0, ('Check list Hosts in the cluster: ' + cluster.name))
        storage = StoragePool.create(self.apiclient, self.services['nfs'], clusterid=cluster.id, zoneid=self.zone.id, podid=self.pod.id)
        self.cleanup.append(storage)
        self.debug(('Created storage pool in cluster: %s' % cluster.id))
        self.assertEqual(storage.state, 'Up', 'Check primary storage state ')
        self.assertEqual(storage.type, 'NetworkFilesystem', 'Check storage pool type ')
        storage_pools_response = list_storage_pools(self.apiclient, id=storage.id)
        self.assertEqual(isinstance(storage_pools_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(storage_pools_response), 0, 'Check list Hosts response')
        storage_response = storage_pools_response[0]
        self.assertEqual(storage_response.id, storage.id, 'Check storage pool ID')
        self.assertEqual(storage.type, storage_response.type, 'Check storage pool type ')
        cleanup_resources(self.apiclient, self.cleanup)
        self.cleanup = []
        return
