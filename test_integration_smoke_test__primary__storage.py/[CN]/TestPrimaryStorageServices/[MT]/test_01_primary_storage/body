def test_01_primary_storage(self):
    'Test primary storage pools - XEN, KVM, VMWare\n        '
    for (k, v) in self.services['nfs'].items():
        clusters = list_clusters(self.apiclient, zoneid=self.zone.id, hypervisortype=v['hypervisor'])
        self.assertEqual(isinstance(clusters, list), True, 'Check list response returns a valid list')
        cluster = clusters[0]
        list_hosts_response = list_hosts(self.apiclient, clusterid=cluster.id)
        self.assertEqual(isinstance(list_hosts_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(list_hosts_response), 0, ('Check list Hosts for hypervisor: ' + v['hypervisor']))
        storage = StoragePool.create(self.apiclient, v, clusterid=cluster.id, zoneid=self.zone.id, podid=self.pod.id)
        self.cleanup.append(storage)
        self.debug(('Created storage pool in cluster: %s' % cluster.id))
        self.assertEqual(storage.state, 'Up', ('Check primary storage state for hypervisor: ' + v['hypervisor']))
        self.assertEqual(storage.type, 'NetworkFilesystem', ('Check storage pool type for hypervisor : ' + v['hypervisor']))
        storage_pools_response = list_storage_pools(self.apiclient, id=storage.id)
        self.assertEqual(isinstance(storage_pools_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(storage_pools_response), 0, 'Check list Hosts response')
        storage_response = storage_pools_response[0]
        self.assertEqual(storage_response.id, storage.id, ('Check storage pool ID for hypervisor: ' + v['hypervisor']))
        self.assertEqual(storage.type, storage_response.type, ('Check storage pool type for hypervisor: ' + v['hypervisor']))
        cleanup_resources(self.apiclient, self.cleanup)
        self.cleanup = []
    for (k, v) in self.services['iscsi'].items():
        clusters = list_clusters(self.apiclient, zoneid=self.zone.id, hypervisortype=v['hypervisor'])
        self.assertEqual(isinstance(clusters, list), True, 'Check list response returns a valid list')
        cluster = clusters[0]
        storage = StoragePool.create(self.apiclient, v, clusterid=cluster.id, zoneid=self.zone.id, podid=self.pod.id)
        self.cleanup.append(storage)
        self.debug(('Created iSCSI storage pool in cluster: %s' % cluster.id))
        self.assertEqual(storage.state, 'Up', ('Check primary storage state for hypervisor: ' + v['hypervisor']))
        storage_pools_response = list_storage_pools(self.apiclient, id=storage.id)
        self.assertEqual(isinstance(storage_pools_response, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(storage_pools_response), 0, ('Check Hosts response for hypervisor: ' + v['hypervisor']))
        storage_response = storage_pools_response[0]
        self.assertEqual(storage_response.id, storage.id, ('Check storage pool ID for hypervisor: ' + v['hypervisor']))
        self.assertEqual(storage.type, storage_response.type, ('Check storage pool type hypervisor: ' + v['hypervisor']))
        cleanup_resources(self.apiclient, self.cleanup)
        self.cleanup = []
    return
