@classmethod
def setUpClass(cls):
    cls.api_client = super(TestVMLifeCycleHostmaintenance, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering_1 = ServiceOffering.create(cls.api_client, cls.services['service_offering_1'])
    cls.service_offering_2 = ServiceOffering.create(cls.api_client, cls.services['service_offering_2'])
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls.services['vpc']['cidr'] = '10.1.1.1/16'
    cls.vpc = VPC.create(cls.api_client, cls.services['vpc'], vpcofferingid=cls.vpc_off.id, zoneid=cls.zone.id, account=cls.account.name, domainid=cls.account.account.domainid)
    cls.nw_off = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=False)
    cls.nw_off.update(cls.api_client, state='Enabled')
    cls.network_1 = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.account.domainid, networkofferingid=cls.nw_off.id, zoneid=cls.zone.id, gateway='10.1.1.1', vpcid=cls.vpc.id)
    cls.nw_off_no_lb = NetworkOffering.create(cls.api_client, cls.services['network_offering_no_lb'], conservemode=False)
    cls.nw_off_no_lb.update(cls.api_client, state='Enabled')
    cls.network_2 = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.account.domainid, networkofferingid=cls.nw_off_no_lb.id, zoneid=cls.zone.id, gateway='10.1.2.1', vpcid=cls.vpc.id)
    cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering_1.id, networkids=[str(cls.network_1.id)])
    cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering_1.id, networkids=[str(cls.network_1.id)])
    cls.vm_3 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering_2.id, networkids=[str(cls.network_2.id)])
    routers = Router.list(cls.api_client, account=cls.account.name, domainid=cls.account.account.domainid, listall=True)
    if isinstance(routers, list):
        cls.vpcvr = routers[0]
    cls._cleanup = [cls.service_offering_1, cls.service_offering_2, cls.nw_off, cls.nw_off_no_lb]
    return
