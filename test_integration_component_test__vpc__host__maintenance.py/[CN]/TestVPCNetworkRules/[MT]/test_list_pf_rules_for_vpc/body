@attr(tags=['advanced', 'intervlan'])
def test_list_pf_rules_for_vpc(self):
    ' Test List Port Forwarding Rules & vms belonging to a VPC\n        '
    self.debug(('Associating public IP for network: %s' % self.network_1.name))
    public_ip_1 = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=self.network_1.id, vpcid=self.vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_1.ipaddress.ipaddress, self.network_1.id)))
    nat_rule_1 = NATRule.create(self.apiclient, self.vm_1, self.services['natrule'], ipaddressid=public_ip_1.ipaddress.id, openfirewall=False, networkid=self.network_1.id, vpcid=self.vpc.id)
    self.debug(('Associating public IP for network: %s' % self.network_2.name))
    public_ip_2 = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=self.network_2.id, vpcid=self.vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_2.ipaddress.ipaddress, self.network_2.id)))
    nat_rule_2 = NATRule.create(self.apiclient, self.vm_3, self.services['natrule'], ipaddressid=public_ip_2.ipaddress.id, openfirewall=False, networkid=self.network_2.id, vpcid=self.vpc.id)
    self.debug('Listing all the PF rules belonging to VPC')
    nat_rules = NATRule.list(self.apiclient, vpcid=self.vpc.id, listall=True)
    self.assertEqual(isinstance(nat_rules, list), True, 'List NAT rules should return the valid list')
    self.assertEqual(len(nat_rules), 2, 'List NAT for VPC shall return all NAT rules belonging to VPC')
    for nat_rule in nat_rules:
        self.assertEqual(nat_rule.vpcid, self.vpc.id, 'NAT rules should belong to VPC')
    self.debug(('Listing all the VMs belonging to VPC for network: %s' % self.network_1.name))
    vms = VirtualMachine.list(self.apiclient, networkid=self.network_1.id, vpcid=self.vpc.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List virtual machines should return the valid list')
    for vm in vms:
        self.assertEqual(vm.networkid, self.network_1.id, 'List VMs should return vms belonging to network_1')
    return
