@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_04_disable_host_unmanage_cluster_check_hosts_status(self):
    '\n        Disable the host then unmanage the cluster,\n        make sure that the host goes to Disconnected state\n        '
    host_state = 'Disable'
    host_resourcestate = update_host(host_state, self.my_host_id)
    self.assertEqual(host_resourcestate, (host_state + 'd'), 'Host state not correct')
    cluster_state = 'Enabled'
    managed_state = 'Unmanaged'
    (cluster_managedstate, cluster_allocationstate) = update_cluster(cluster_state, self.my_cluster_id, managed_state)
    self.assertEqual(cluster_allocationstate, cluster_state, 'Not able to enable/disable the cluster')
    self.assertEqual(cluster_managedstate, managed_state, 'Not able to managed/unmanage the cluster')
    time.sleep(30)
    host_list = list_hosts(self.apiclient, id=self.my_host_id)
    self.assertEqual(host_list[0].state, 'Disconnected', ' Host is not in Disconnected state after unmanaging cluster')
    managed_state = 'Managed'
    (cluster_managedstate, cluster_allocationstate) = update_cluster(cluster_state, self.my_cluster_id, managed_state)
    self.assertEqual(cluster_allocationstate, cluster_state, 'Not able to enable/disable the cluster')
    self.assertEqual(cluster_managedstate, managed_state, 'Not able to managed/unmanage the cluster')
    time.sleep(90)
    host_list = list_hosts(self.apiclient, id=self.my_host_id)
    self.assertEqual(host_list[0].state, 'Up', ' Host is not in Up state after managing cluster')
    host_state = 'Enable'
    host_resourcestate = update_host(host_state, self.my_host_id)
    self.assertEqual(host_resourcestate, (host_state + 'd'), 'Host state not correct')
    return
