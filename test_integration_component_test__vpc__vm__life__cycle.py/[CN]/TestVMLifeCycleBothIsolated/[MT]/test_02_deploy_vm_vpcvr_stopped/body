@attr(tags=['advanced', 'intervlan'])
def test_02_deploy_vm_vpcvr_stopped(self):
    ' Test deploy virtual machine when VPC VR in stopped state'
    self.debug(('Finding the virtual router for network: %s' % self.network_1.name))
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.account.domainid, networkid=self.network_1.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, ('List routers should return router for network: %s' % self.network_1.name))
    router = routers[0]
    self.debug(('Check state of VPC virtual router, state: %s' % router.state))
    if (router.state == 'Running'):
        self.debug('Router state is running, stop it!')
        Router.stop(self.apiclient, id=router.id)
        self.debug('Check the router state again')
        routers = Router.list(self.apiclient, id=router.id, listall=True)
        self.assertEqual(isinstance(routers, list), True, ('List routers should return router for network: %s' % self.network_1.name))
        router = routers[0]
        self.assertEqual(router.state, 'Stopped', 'Router state should be stopped')
    self.debug(('Deploy an instance in network: %s with stopped VPCVR' % self.network_1.name))
    try:
        vm = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_1.id)])
    except Exception as e:
        self.fail(('Failed to deploy the virtual instance: %s' % e))
    self.debug('Verify the deployment of virtual instace')
    vms = VirtualMachine.list(self.apiclient, id=vm.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List vms shall return a valid resposnse')
    vm_response = vms[0]
    self.assertEqaul(vm_response.state, 'Running', 'VM state should be running after deployment')
    return
