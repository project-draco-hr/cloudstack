@classmethod
def setUpClass(cls):
    cls.api_client = super(TestVMLifeCycleVPC, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls.services['vpc']['cidr'] = '10.1.1.1/16'
    cls.vpc = VPC.create(cls.api_client, cls.services['vpc'], vpcofferingid=cls.vpc_off.id, zoneid=cls.zone.id, account=cls.account.name, domainid=cls.account.account.domainid)
    cls.nw_off = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=False)
    cls.nw_off.update(cls.api_client, state='Enabled')
    cls.network_1 = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.account.domainid, networkofferingid=cls.nw_off.id, zoneid=cls.zone.id, gateway='10.1.1.1', vpcid=cls.vpc.id)
    cls.nw_off_no_lb = NetworkOffering.create(cls.api_client, cls.services['network_offering_no_lb'], conservemode=False)
    cls.nw_off_no_lb.update(cls.api_client, state='Enabled')
    cls.network_2 = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.account.domainid, networkofferingid=cls.nw_off_no_lb.id, zoneid=cls.zone.id, gateway='10.1.2.1', vpcid=cls.vpc.id)
    cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network_1.id)])
    cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network_1.id)])
    cls.vm_3 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network_2.id)])
    cls.public_ip_1 = PublicIPAddress.create(cls.api_client, accountid=cls.account.name, zoneid=cls.zone.id, domainid=cls.account.account.domainid, networkid=cls.network_1.id, vpcid=cls.vpc.id)
    cls.lb_rule = LoadBalancerRule.create(cls.api_client, cls.services['lbrule'], ipaddressid=cls.public_ip_1.ipaddress.id, accountid=cls.account.name, networkid=cls.network_1.id, vpcid=cls.vpc.id, domainid=cls.account.account.domainid)
    cls.lb_rule.assign(cls.api_client, [cls.vm_1, cls.vm_2])
    cls.public_ip_2 = PublicIPAddress.create(cls.api_client, accountid=cls.account.name, zoneid=cls.zone.id, domainid=cls.account.account.domainid, networkid=cls.network_1.id, vpcid=cls.vpc.id)
    cls.nat_rule = NATRule.create(cls.api_client, cls.vm_1, cls.services['natrule'], ipaddressid=cls.public_ip_2.ipaddress.id, openfirewall=False, networkid=cls.network_1.id, vpcid=cls.vpc.id)
    cls.nwacl_nat = NetworkACL.create(cls.api_client, networkid=cls.network_1.id, services=cls.services['natrule'], traffictype='Ingress')
    cls.nwacl_lb = NetworkACL.create(cls.api_client, networkid=cls.network_1.id, services=cls.services['lbrule'], traffictype='Ingress')
    cls.nwacl_internet_1 = NetworkACL.create(cls.api_client, networkid=cls.network_1.id, services=cls.services['http_rule'], traffictype='Egress')
    cls._cleanup = [cls.service_offering, cls.nw_off, cls.nw_off_no_lb]
    return
