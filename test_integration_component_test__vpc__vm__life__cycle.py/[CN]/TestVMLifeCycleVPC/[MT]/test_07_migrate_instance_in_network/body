@attr(tags=['advanced', 'intervlan'])
def test_07_migrate_instance_in_network(self):
    ' Test migrate an instance in VPC networks\n        '
    vm_list = VirtualMachine.list(self.apiclient, id=self.vm_1.id)
    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, vm list is %s' % vm_list))
    vm_hostid = vm_list[0].hostid
    self.debug('Checking if the host is available for migration?')
    hosts = Host.list(self.apiclient, zoneid=self.zone.id, type='Routing')
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return a valid list')
    if (len(hosts) < 2):
        raise unittest.SkipTest('No host available for migration. Test requires atleast 2 hosts')
    hosts[:] = [host for host in hosts if (host.id != vm_hostid)]
    host = hosts[0]
    self.debug('Validating if the network rules work properly or not?')
    self.validate_network_rules()
    self.debug(('Migrating VM-ID: %s to Host: %s' % (self.vm_1.id, host.id)))
    try:
        self.vm_1.migrate(self.apiclient, hostid=host.id)
    except Exception as e:
        self.fail(('Failed to migrate instance, %s' % e))
    self.debug('Validating if the network rules work properly or not?')
    self.validate_network_rules()
    return
