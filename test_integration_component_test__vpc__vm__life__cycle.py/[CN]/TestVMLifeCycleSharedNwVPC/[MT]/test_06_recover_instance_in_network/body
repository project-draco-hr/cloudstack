@attr(tags=['advanced', 'intervlan'])
def test_06_recover_instance_in_network(self):
    ' Test recover an instance in VPC networks\n        '
    self.debug('Deploying vm')
    self.vm_2 = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_1.id), str(self.network_2.id)])
    self.cleanup.append(self.vm_2)
    try:
        self.vm_2.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to destroy the virtual instances, %s' % e))
    try:
        self.vm_2.recover(self.apiclient)
    except Exception as e:
        self.fail(('Failed to recover the virtual instances, %s' % e))
    self.debug('Check if the instance is in stopped state?')
    vms = VirtualMachine.list(self.apiclient, id=self.vm_2.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List virtual machines should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Stopped', 'Virtual machine should be in stopped state')
    self.debug(('Starting the instance: %s' % self.vm_2.name))
    try:
        self.vm_2.start(self.apiclient)
    except Exception as e:
        self.fail(('Failed to start the instances, %s' % e))
    vms = VirtualMachine.list(self.apiclient, id=self.vm_2.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List virtual machines should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Virtual machine should be in running state')
    self.debug('Validating if network rules are coonfigured properly?')
    self.validate_network_rules()
    return
