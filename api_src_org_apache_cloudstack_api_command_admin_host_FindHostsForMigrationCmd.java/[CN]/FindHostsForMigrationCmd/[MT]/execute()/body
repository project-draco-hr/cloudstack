{
  ListResponse<HostForMigrationResponse> response=null;
  Pair<List<? extends Host>,Integer> result;
  Map<Host,Boolean> hostsRequiringStorageMotion;
  Ternary<Pair<List<? extends Host>,Integer>,List<? extends Host>,Map<Host,Boolean>> hostsForMigration=_mgr.listHostsForMigrationOfVM(getVirtualMachineId(),this.getStartIndex(),this.getPageSizeVal());
  result=hostsForMigration.first();
  List<? extends Host> hostsWithCapacity=hostsForMigration.second();
  hostsRequiringStorageMotion=hostsForMigration.third();
  response=new ListResponse<HostForMigrationResponse>();
  List<HostForMigrationResponse> hostResponses=new ArrayList<HostForMigrationResponse>();
  for (  Host host : result.first()) {
    HostForMigrationResponse hostResponse=_responseGenerator.createHostForMigrationResponse(host);
    Boolean suitableForMigration=false;
    if (hostsWithCapacity.contains(host)) {
      suitableForMigration=true;
    }
    hostResponse.setSuitableForMigration(suitableForMigration);
    Boolean requiresStorageMotion=hostsRequiringStorageMotion.get(host);
    if (requiresStorageMotion != null && requiresStorageMotion) {
      hostResponse.setRequiresStorageMotion(true);
    }
 else {
      hostResponse.setRequiresStorageMotion(false);
    }
    hostResponse.setObjectName("host");
    hostResponses.add(hostResponse);
  }
  response.setResponses(hostResponses,result.second());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}
