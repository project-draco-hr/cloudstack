{
  List<String> ips=_appLbDao.listLbIpsBySourceIpNetworkIdAndScheme(network.getId(),Scheme.Internal);
  for (  String ip : ips) {
    Ip sourceIp=new Ip(ip);
    long active=_appLbDao.countActiveBySourceIp(sourceIp,network.getId());
    if (active > 0) {
      s_logger.debug("Have to implement internal lb vm for source ip " + sourceIp + " as a part of network "+ network+ " implement as there are "+ active+ " internal lb rules exist for this ip");
      List<? extends VirtualRouter> internalLbVms;
      try {
        internalLbVms=_internalLbMgr.deployInternalLbVm(network,sourceIp,dest,_accountMgr.getAccount(network.getAccountId()),null);
      }
 catch (      InsufficientCapacityException e) {
        s_logger.warn("Failed to deploy element " + getName() + " for ip "+ sourceIp+ " due to:",e);
        return false;
      }
catch (      ConcurrentOperationException e) {
        s_logger.warn("Failed to deploy element " + getName() + " for ip "+ sourceIp+ " due to:",e);
        return false;
      }
      if (internalLbVms == null || internalLbVms.isEmpty()) {
        throw new ResourceUnavailableException("Can't deploy " + getName() + " to handle LB rules",DataCenter.class,network.getDataCenterId());
      }
    }
  }
  return true;
}
