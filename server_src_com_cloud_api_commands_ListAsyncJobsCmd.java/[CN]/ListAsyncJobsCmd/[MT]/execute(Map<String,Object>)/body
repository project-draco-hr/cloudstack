{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=(Long)params.get(BaseCmd.Properties.ACCOUNT_ID.getName());
  Date startDate=(Date)params.get(BaseCmd.Properties.START_TZDATE.getName());
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  if (account == null) {
    if (accountId != null)     c.addCriteria(Criteria.ACCOUNTID,accountId.longValue());
  }
 else {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (accountId != null)       c.addCriteria(Criteria.ACCOUNTID,accountId.longValue());
    }
 else {
      c.addCriteria(Criteria.ACCOUNTID,account.getId());
    }
  }
  if (startDate != null) {
    c.addCriteria(Criteria.STARTDATE,startDate);
  }
  List<AsyncJobVO> jobs=getManagementServer().searchForAsyncJobs(c);
  if (jobs == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"unable to find async jobs");
  }
  List<Pair<String,Object>> jobTags=new ArrayList<Pair<String,Object>>();
  Object[] sTag=new Object[jobs.size()];
  int i=0;
  for (  AsyncJobVO job : jobs) {
    List<Pair<String,Object>> jobData=new ArrayList<Pair<String,Object>>();
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),job.getId().toString()));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT_ID.getName(),String.valueOf(job.getAccountId())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.USER_ID.getName(),String.valueOf(job.getUserId())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.CMD.getName(),job.getCmd()));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(job.getStatus())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_PROCESS_STATUS.getName(),String.valueOf(job.getProcessStatus())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_RESULT_CODE.getName(),String.valueOf(job.getResultCode())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_RESULT.getName(),job.getResult()));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_INSTANCE_TYPE.getName(),job.getInstanceType()));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_INSTANCE_ID.getName(),String.valueOf(job.getInstanceId())));
    jobData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(job.getCreated())));
    sTag[i++]=jobData;
  }
  Pair<String,Object> jobTag=new Pair<String,Object>("asyncjobs",sTag);
  jobTags.add(jobTag);
  return jobTags;
}
