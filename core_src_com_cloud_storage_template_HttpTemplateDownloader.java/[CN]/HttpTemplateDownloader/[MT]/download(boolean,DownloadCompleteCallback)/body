{
switch (status) {
case ABORTED:
case UNRECOVERABLE_ERROR:
case DOWNLOAD_FINISHED:
    return 0;
default :
}
int bytes=0;
File file=new File(toFile);
try {
  long localFileSize=0;
  if (file.exists() && resume) {
    localFileSize=file.length();
    s_logger.info("Resuming download to file (current size)=" + localFileSize);
  }
  Date start=new Date();
  int responseCode=0;
  if (localFileSize > 0) {
    request.addRequestHeader("Range","bytes=" + localFileSize + "-");
    if (client.executeMethod(request) != HttpStatus.SC_PARTIAL_CONTENT) {
      errorString="HTTP Server does not support partial get";
      status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
      return 0;
    }
  }
 else   if ((responseCode=client.executeMethod(request)) != HttpStatus.SC_OK) {
    status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
    errorString=" HTTP Server returned " + responseCode + " (expected 200 OK) ";
    return 0;
  }
  Header contentLengthHeader=request.getResponseHeader("Content-Length");
  boolean chunked=false;
  long remoteSize2=0;
  if (contentLengthHeader == null) {
    Header chunkedHeader=request.getResponseHeader("Transfer-Encoding");
    if (chunkedHeader == null || !"chunked".equalsIgnoreCase(chunkedHeader.getValue())) {
      status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
      errorString=" Failed to receive length of download ";
      return 0;
    }
 else     if ("chunked".equalsIgnoreCase(chunkedHeader.getValue())) {
      chunked=true;
    }
  }
 else {
    remoteSize2=Long.parseLong(contentLengthHeader.getValue());
    if (remoteSize2 == 0) {
      status=TemplateDownloader.Status.DOWNLOAD_FINISHED;
      String downloaded="(download complete remote=" + remoteSize + "bytes)";
      errorString="Downloaded " + totalBytes + " bytes "+ downloaded;
      downloadTime=0;
      return 0;
    }
  }
  if (remoteSize == 0) {
    remoteSize=remoteSize2;
  }
  if (remoteSize > maxTemplateSizeInBytes) {
    s_logger.info("Remote size is too large: " + remoteSize + " , max="+ maxTemplateSizeInBytes);
    status=Status.UNRECOVERABLE_ERROR;
    errorString="Download file size is too large";
    return 0;
  }
  if (remoteSize == 0) {
    remoteSize=maxTemplateSizeInBytes;
  }
  URL url=new URL(getDownloadUrl());
  InputStream in=url.openStream();
  RandomAccessFile out=new RandomAccessFile(file,"rw");
  out.seek(localFileSize);
  s_logger.info("Starting download from " + getDownloadUrl() + " to "+ toFile+ " remoteSize="+ remoteSize+ " , max size="+ maxTemplateSizeInBytes);
  byte[] block=new byte[CHUNK_SIZE];
  long offset=0;
  boolean done=false;
  boolean verifiedFormat=false;
  status=TemplateDownloader.Status.IN_PROGRESS;
  while (!done && status != Status.ABORTED && offset <= remoteSize) {
    if ((bytes=in.read(block,0,CHUNK_SIZE)) > -1) {
      out.write(block,0,bytes);
      offset+=bytes;
      out.seek(offset);
      totalBytes+=bytes;
      if (!verifiedFormat && (offset >= 1048576 || offset >= remoteSize)) {
        String uripath=null;
        try {
          URI str=new URI(getDownloadUrl());
          uripath=str.getPath();
        }
 catch (        URISyntaxException e) {
          s_logger.warn("Invalid download url: " + getDownloadUrl() + ", This should not happen since we have validated the url before!!");
        }
        String unsupportedFormat=ImageStoreUtil.checkTemplateFormat(file.getAbsolutePath(),uripath);
        if (unsupportedFormat == null || !unsupportedFormat.isEmpty()) {
          try {
            request.abort();
            out.close();
            in.close();
          }
 catch (          Exception ex) {
            s_logger.debug("Error on http connection : " + ex.getMessage());
          }
          status=Status.UNRECOVERABLE_ERROR;
          errorString="Template content is unsupported, or mismatch between selected format and template content. Found  : " + unsupportedFormat;
          return 0;
        }
        s_logger.debug("Verified format of downloading file " + file.getAbsolutePath() + " is supported");
        verifiedFormat=true;
      }
    }
 else {
      done=true;
    }
  }
  out.getFD().sync();
  Date finish=new Date();
  String downloaded="(incomplete download)";
  if (totalBytes >= remoteSize) {
    status=TemplateDownloader.Status.DOWNLOAD_FINISHED;
    downloaded="(download complete remote=" + remoteSize + "bytes)";
  }
  errorString="Downloaded " + totalBytes + " bytes "+ downloaded;
  downloadTime+=finish.getTime() - start.getTime();
  in.close();
  out.close();
  return totalBytes;
}
 catch (HttpException hte) {
  status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
  errorString=hte.getMessage();
}
catch (IOException ioe) {
  status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
  errorString=ioe.getMessage();
}
 finally {
  if (status == Status.UNRECOVERABLE_ERROR && file.exists() && !file.isDirectory()) {
    file.delete();
  }
  request.releaseConnection();
  if (callback != null) {
    callback.downloadComplete(status);
  }
}
return 0;
}
