{
  if (entity == null && action != null) {
    List<AclPolicy> policies=_iamSrv.listAclPolicies(caller.getAccountId());
    boolean isAllowed=_iamSrv.isActionAllowedForPolicies(action,policies);
    if (!isAllowed) {
      throw new PermissionDeniedException("The action '" + action + "' not allowed for account "+ caller);
    }
    return true;
  }
  String entityType=entity.getEntityType().toString();
  if (accessType == null) {
    accessType=AccessType.ListEntry;
  }
  List<AclPolicy> policies=getEffectivePolicies(caller,entity);
  HashMap<AclPolicy,Boolean> policyPermissionMap=new HashMap<AclPolicy,Boolean>();
  for (  AclPolicy policy : policies) {
    List<AclPolicyPermission> permissions=new ArrayList<AclPolicyPermission>();
    if (action != null) {
      permissions=_iamSrv.listPolicyPermissionByEntityType(policy.getId(),action,entityType);
    }
 else {
      permissions=_iamSrv.listPolicyPermissionByAccessType(policy.getId(),accessType.toString(),entityType,action);
    }
    for (    AclPolicyPermission permission : permissions) {
      if (checkPermissionScope(caller,permission.getScope(),entity)) {
        if (permission.getEntityType().equals(entityType)) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
          break;
        }
 else         if (permission.getEntityType().equals("*")) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
        }
      }
    }
    if (policyPermissionMap.containsKey(policy) && policyPermissionMap.get(policy)) {
      return true;
    }
  }
  if (!policies.isEmpty()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Account " + caller + " does not have permission to access resource "+ entity+ " for access type: "+ accessType);
    }
    throw new PermissionDeniedException(caller + " does not have permission to access resource " + entity);
  }
  return false;
}
