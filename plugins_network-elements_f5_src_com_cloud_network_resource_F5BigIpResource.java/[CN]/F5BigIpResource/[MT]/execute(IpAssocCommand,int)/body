{
  String[] results=new String[cmd.getIpAddresses().length];
  int i=0;
  try {
    IpAddressTO[] ips=cmd.getIpAddresses();
    for (    IpAddressTO ip : ips) {
      long guestVlanTag=Long.valueOf(ip.getVlanId());
      boolean inline=ip.isOneToOneNat();
      String vlanSelfIp=inline ? tagAddressWithRouteDomain(ip.getVlanGateway(),guestVlanTag) : ip.getVlanGateway();
      String vlanNetmask=ip.getVlanNetmask();
      deleteGuestVlan(guestVlanTag,vlanSelfIp,vlanNetmask,inline);
      if (ip.isAdd()) {
        addGuestVlan(guestVlanTag,vlanSelfIp,vlanNetmask,inline);
      }
      saveConfiguration();
      results[i++]=ip.getPublicIp() + " - success";
    }
  }
 catch (  ExecutionException e) {
    s_logger.error("Failed to execute IPAssocCommand due to " + e);
    if (shouldRetry(numRetries)) {
      return retry(cmd,numRetries);
    }
 else {
      results[i++]=IpAssocAnswer.errorResult;
    }
  }
  return new IpAssocAnswer(cmd,results);
}
