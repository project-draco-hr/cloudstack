{
  try {
    String memberIdentifier=destIp + "-" + destPort;
    List<String> lbPools=getAllLbPools();
    if (lbPools.contains(virtualServerName) && memberExists(virtualServerName,memberIdentifier)) {
      s_logger.debug("Deleting member " + memberIdentifier + " from pool for virtual server "+ virtualServerName);
      _loadbalancerApi.remove_member(genStringArray(virtualServerName),genMembers(destIp,destPort));
      if (memberExists(virtualServerName,memberIdentifier)) {
        throw new ExecutionException("Failed to delete member " + memberIdentifier + " from pool for virtual server "+ virtualServerName);
      }
      if (nodeExists(destIp)) {
        boolean nodeNeeded=false;
        done:         for (        String poolToCheck : lbPools) {
          for (          String memberInPool : getMembers(poolToCheck)) {
            if (getIpAndPort(memberInPool)[0].equals(destIp)) {
              nodeNeeded=true;
              break done;
            }
          }
        }
        if (!nodeNeeded) {
          s_logger.debug("Deleting node " + destIp);
          _nodeApi.delete_node_address(genStringArray(destIp));
          if (nodeExists(destIp)) {
            throw new ExecutionException("Failed to delete node " + destIp);
          }
        }
      }
    }
  }
 catch (  RemoteException e) {
    throw new ExecutionException(e.getMessage());
  }
}
