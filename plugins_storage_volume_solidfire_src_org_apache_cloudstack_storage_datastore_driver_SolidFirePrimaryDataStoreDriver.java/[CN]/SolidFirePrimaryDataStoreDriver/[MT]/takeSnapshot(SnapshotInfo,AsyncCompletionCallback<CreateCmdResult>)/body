{
  CreateCmdResult result=null;
  try {
    VolumeInfo volumeInfo=snapshotInfo.getBaseVolume();
    VolumeVO volumeVO=volumeDao.findById(volumeInfo.getId());
    long sfVolumeId=Long.parseLong(volumeVO.getFolder());
    long storagePoolId=volumeVO.getPoolId();
    SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePoolId,storagePoolDetailsDao);
    SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getVolume(sfConnection,sfVolumeId);
    StoragePoolVO storagePool=storagePoolDao.findById(storagePoolId);
    long capacityBytes=storagePool.getCapacityBytes();
    long usedBytes=getUsedBytes(storagePool);
    long sfVolumeSize=sfVolume.getTotalSize();
    usedBytes+=sfVolumeSize;
    if (usedBytes > capacityBytes) {
      throw new CloudRuntimeException("Insufficient amount of space remains in this primary storage to take a snapshot");
    }
    storagePool.setUsedBytes(usedBytes);
    SnapshotObjectTO snapshotObjectTo=(SnapshotObjectTO)snapshotInfo.getTO();
    if (shouldTakeSnapshot(snapshotInfo.getId())) {
      String sfNewSnapshotName=volumeInfo.getName() + "-" + snapshotInfo.getUuid();
      long sfNewSnapshotId=SolidFireUtil.createSnapshot(sfConnection,sfVolumeId,sfNewSnapshotName,getSnapshotAttributes(snapshotInfo));
      updateSnapshotDetails(snapshotInfo.getId(),sfVolumeId,sfNewSnapshotId,storagePoolId,sfVolumeSize);
      snapshotObjectTo.setPath("SfSnapshotId=" + sfNewSnapshotId);
    }
 else {
      String sfNewVolumeName=volumeInfo.getName() + "-" + snapshotInfo.getUuid();
      final Iops iops=getIops(MIN_IOPS_FOR_SNAPSHOT_VOLUME,MAX_IOPS_FOR_SNAPSHOT_VOLUME,storagePoolId);
      long sfNewVolumeId=SolidFireUtil.createVolume(sfConnection,sfNewVolumeName,sfVolume.getAccountId(),sfVolumeSize,sfVolume.isEnable512e(),getSnapshotAttributes(snapshotInfo),iops.getMinIops(),iops.getMaxIops(),iops.getBurstIops());
      SolidFireUtil.SolidFireVolume sfNewVolume=SolidFireUtil.getVolume(sfConnection,sfNewVolumeId);
      updateSnapshotDetails(snapshotInfo.getId(),sfNewVolumeId,storagePoolId,sfVolumeSize,sfNewVolume.getIqn());
      snapshotObjectTo.setPath("SfVolumeId=" + sfNewVolumeId);
    }
    storagePoolDao.update(storagePoolId,storagePool);
    CreateObjectAnswer createObjectAnswer=new CreateObjectAnswer(snapshotObjectTo);
    result=new CreateCmdResult(null,createObjectAnswer);
    result.setResult(null);
  }
 catch (  Exception ex) {
    LOGGER.debug(SolidFireUtil.LOG_PREFIX + "Failed to take CloudStack snapshot: " + snapshotInfo.getId(),ex);
    result=new CreateCmdResult(null,new CreateObjectAnswer(ex.toString()));
    result.setResult(ex.toString());
  }
  callback.complete(result);
}
