{
  CreateCmdResult result=null;
  try {
    VolumeInfo volumeInfo=snapshotInfo.getBaseVolume();
    VolumeVO volume=_volumeDao.findById(volumeInfo.getId());
    long sfVolumeId=Long.parseLong(volume.getFolder());
    long storagePoolId=volume.getPoolId();
    SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePoolId,_storagePoolDetailsDao);
    SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getSolidFireVolume(sfConnection,sfVolumeId);
    StoragePoolVO storagePool=_storagePoolDao.findById(storagePoolId);
    long capacityBytes=storagePool.getCapacityBytes();
    long usedBytes=getUsedBytes(storagePool);
    long sfVolumeSize=sfVolume.getTotalSize();
    usedBytes+=sfVolumeSize;
    if (usedBytes > capacityBytes) {
      throw new CloudRuntimeException("Insufficient amount of space remains in this primary storage to take a snapshot");
    }
    storagePool.setUsedBytes(usedBytes);
    long sfSnapshotId=SolidFireUtil.createSolidFireSnapshot(sfConnection,sfVolumeId,snapshotInfo.getUuid());
    _storagePoolDao.update(storagePoolId,storagePool);
    updateSnapshotDetails(snapshotInfo.getId(),sfSnapshotId,storagePoolId,sfVolumeSize);
    SnapshotObjectTO snapshotObjectTo=(SnapshotObjectTO)snapshotInfo.getTO();
    snapshotObjectTo.setPath(String.valueOf(sfSnapshotId));
    CreateObjectAnswer createObjectAnswer=new CreateObjectAnswer(snapshotObjectTo);
    result=new CreateCmdResult(null,createObjectAnswer);
    result.setResult(null);
  }
 catch (  Exception ex) {
    s_logger.debug(SolidFireUtil.LOG_PREFIX + "Failed to take CloudStack snapshot: " + snapshotInfo.getId(),ex);
    result=new CreateCmdResult(null,new CreateObjectAnswer(ex.toString()));
    result.setResult(ex.toString());
  }
  callback.complete(result);
}
