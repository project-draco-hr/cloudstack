{
  String sfNewVolumeName=volumeInfo.getName();
  long sfVolumeId=Long.MIN_VALUE;
  long sfSnapshotId=Long.MIN_VALUE;
  if (dataObjectType == DataObjectType.SNAPSHOT) {
    SnapshotDetailsVO snapshotDetails=snapshotDetailsDao.findDetail(dataObjectId,SolidFireUtil.SNAPSHOT_ID);
    if (snapshotDetails != null && snapshotDetails.getValue() != null) {
      sfSnapshotId=Long.parseLong(snapshotDetails.getValue());
    }
    snapshotDetails=snapshotDetailsDao.findDetail(dataObjectId,SolidFireUtil.VOLUME_ID);
    sfVolumeId=Long.parseLong(snapshotDetails.getValue());
  }
 else   if (dataObjectType == DataObjectType.TEMPLATE) {
    VMTemplateStoragePoolVO templatePoolRef=tmpltPoolDao.findByPoolTemplate(storagePoolId,dataObjectId);
    if (templatePoolRef != null) {
      sfVolumeId=Long.parseLong(templatePoolRef.getLocalDownloadPath());
    }
  }
  if (sfVolumeId <= 0) {
    throw new CloudRuntimeException("Unable to find SolidFire volume for the following data-object ID: " + dataObjectId + " and data-object type: "+ dataObjectType);
  }
  final long newSfVolumeId=SolidFireUtil.createSolidFireClone(sfConnection,sfVolumeId,sfSnapshotId,sfAccountId,sfNewVolumeName,getVolumeAttributes(volumeInfo));
  final Iops iops=getIops(volumeInfo.getMinIops(),volumeInfo.getMaxIops(),storagePoolId);
  SolidFireUtil.modifySolidFireVolume(sfConnection,newSfVolumeId,null,null,iops.getMinIops(),iops.getMaxIops(),iops.getBurstIops());
  return SolidFireUtil.getSolidFireVolume(sfConnection,newSfVolumeId);
}
