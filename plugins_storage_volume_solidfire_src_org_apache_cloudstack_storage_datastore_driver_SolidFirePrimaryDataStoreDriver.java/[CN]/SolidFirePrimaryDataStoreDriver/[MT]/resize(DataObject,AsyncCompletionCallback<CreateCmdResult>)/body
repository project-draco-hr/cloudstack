{
  String iqn=null;
  String errMsg=null;
  if (dataObject.getType() == DataObjectType.VOLUME) {
    VolumeInfo volumeInfo=(VolumeInfo)dataObject;
    iqn=volumeInfo.get_iScsiName();
    long storagePoolId=volumeInfo.getPoolId();
    long sfVolumeId=Long.parseLong(volumeInfo.getFolder());
    ResizeVolumePayload payload=(ResizeVolumePayload)volumeInfo.getpayload();
    SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePoolId,_storagePoolDetailsDao);
    SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getSolidFireVolume(sfConnection,sfVolumeId);
    verifySufficientIopsForStoragePool(storagePoolId,volumeInfo.getId(),payload.newMinIops);
    SolidFireUtil.modifySolidFireVolume(sfConnection,sfVolumeId,sfVolume.getTotalSize(),NumberFormat.getInstance().format(payload.newSize),payload.newMinIops,payload.newMaxIops,getDefaultBurstIops(storagePoolId,payload.newMaxIops));
    VolumeVO volume=_volumeDao.findById(volumeInfo.getId());
    volume.setMinIops(payload.newMinIops);
    volume.setMaxIops(payload.newMaxIops);
    _volumeDao.update(volume.getId(),volume);
    updateVolumeDetails(volume.getId(),sfVolume.getTotalSize());
  }
 else {
    errMsg="Invalid DataObjectType (" + dataObject.getType() + ") passed to resize";
  }
  CreateCmdResult result=new CreateCmdResult(iqn,new Answer(null,errMsg == null,errMsg));
  result.setResult(errMsg);
  callback.complete(result);
}
