{
  String iqn=null;
  String errMsg=null;
  if (dataObject.getType() == DataObjectType.VOLUME) {
    VolumeInfo volumeInfo=(VolumeInfo)dataObject;
    iqn=volumeInfo.get_iScsiName();
    long storagePoolId=volumeInfo.getPoolId();
    long sfVolumeId=Long.parseLong(volumeInfo.getFolder());
    ResizeVolumePayload payload=(ResizeVolumePayload)volumeInfo.getpayload();
    SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePoolId,storagePoolDetailsDao);
    SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getVolume(sfConnection,sfVolumeId);
    verifySufficientIopsForStoragePool(storagePoolId,volumeInfo.getId(),payload.newMinIops);
    verifySufficientBytesForStoragePool(storagePoolId,volumeInfo.getId(),payload.newSize,payload.newHypervisorSnapshotReserve);
    long sfNewVolumeSize=sfVolume.getTotalSize();
    Integer hsr=volumeInfo.getHypervisorSnapshotReserve();
    if (payload.newSize != null || payload.newHypervisorSnapshotReserve != null) {
      if (payload.newHypervisorSnapshotReserve != null) {
        if (hsr != null) {
          if (payload.newHypervisorSnapshotReserve > hsr) {
            hsr=payload.newHypervisorSnapshotReserve;
          }
        }
 else {
          hsr=payload.newHypervisorSnapshotReserve;
        }
      }
      sfNewVolumeSize=getVolumeSizeIncludingHypervisorSnapshotReserve(payload.newSize,hsr);
    }
    Map<String,String> mapAttributes=new HashMap<>();
    mapAttributes.put(SolidFireUtil.CloudStackVolumeId,String.valueOf(volumeInfo.getId()));
    mapAttributes.put(SolidFireUtil.CloudStackVolumeSize,NumberFormat.getInstance().format(payload.newSize));
    SolidFireUtil.modifyVolume(sfConnection,sfVolumeId,sfNewVolumeSize,mapAttributes,payload.newMinIops,payload.newMaxIops,getDefaultBurstIops(storagePoolId,payload.newMaxIops));
    VolumeVO volume=volumeDao.findById(volumeInfo.getId());
    volume.setMinIops(payload.newMinIops);
    volume.setMaxIops(payload.newMaxIops);
    volume.setHypervisorSnapshotReserve(hsr);
    volumeDao.update(volume.getId(),volume);
    updateVolumeDetails(volume.getId(),sfNewVolumeSize);
  }
 else {
    errMsg="Invalid DataObjectType (" + dataObject.getType() + ") passed to resize";
  }
  CreateCmdResult result=new CreateCmdResult(iqn,new Answer(null,errMsg == null,errMsg));
  result.setResult(errMsg);
  callback.complete(result);
}
