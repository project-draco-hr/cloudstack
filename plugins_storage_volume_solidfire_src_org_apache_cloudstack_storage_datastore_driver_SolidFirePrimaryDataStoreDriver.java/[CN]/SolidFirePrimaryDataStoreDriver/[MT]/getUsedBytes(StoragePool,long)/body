{
  long usedSpace=0;
  List<VolumeVO> lstVolumes=volumeDao.findByPoolId(storagePool.getId(),null);
  if (lstVolumes != null) {
    for (    VolumeVO volume : lstVolumes) {
      if (volume.getId() == volumeIdToIgnore) {
        continue;
      }
      VolumeDetailVO volumeDetail=volumeDetailsDao.findDetail(volume.getId(),SolidFireUtil.VOLUME_SIZE);
      if (volumeDetail != null && volumeDetail.getValue() != null) {
        long volumeSize=Long.parseLong(volumeDetail.getValue());
        usedSpace+=volumeSize;
      }
 else {
        SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePool.getId(),storagePoolDetailsDao);
        try {
          long lVolumeId=Long.parseLong(volume.getFolder());
          SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getVolume(sfConnection,lVolumeId);
          long volumeSize=sfVolume.getTotalSize();
          updateVolumeDetails(volume.getId(),volumeSize);
          usedSpace+=volumeSize;
        }
 catch (        NumberFormatException ex) {
        }
      }
    }
  }
  List<SnapshotVO> lstSnapshots=snapshotDao.listAll();
  if (lstSnapshots != null) {
    for (    SnapshotVO snapshot : lstSnapshots) {
      SnapshotDetailsVO snapshotDetails=snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.STORAGE_POOL_ID);
      if (snapshotDetails != null && snapshotDetails.getValue() != null && Long.parseLong(snapshotDetails.getValue()) == storagePool.getId()) {
        snapshotDetails=snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.VOLUME_SIZE);
        if (snapshotDetails != null && snapshotDetails.getValue() != null) {
          long snapshotSize=Long.parseLong(snapshotDetails.getValue());
          usedSpace+=snapshotSize;
        }
      }
    }
  }
  List<VMTemplateStoragePoolVO> lstTemplatePoolRefs=tmpltPoolDao.listByPoolId(storagePool.getId());
  if (lstTemplatePoolRefs != null) {
    for (    VMTemplateStoragePoolVO templatePoolRef : lstTemplatePoolRefs) {
      usedSpace+=templatePoolRef.getTemplateSize();
    }
  }
  return usedSpace;
}
