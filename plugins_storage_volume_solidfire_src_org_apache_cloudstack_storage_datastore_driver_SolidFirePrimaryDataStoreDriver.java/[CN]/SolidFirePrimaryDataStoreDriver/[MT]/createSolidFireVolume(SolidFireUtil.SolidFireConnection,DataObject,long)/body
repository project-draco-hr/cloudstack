{
  long storagePoolId=dataObject.getDataStore().getId();
  final Long minIops;
  final Long maxIops;
  final Long volumeSize;
  final String volumeName;
  final Map<String,String> mapAttributes;
  if (dataObject.getType() == DataObjectType.VOLUME) {
    VolumeInfo volumeInfo=(VolumeInfo)dataObject;
    minIops=volumeInfo.getMinIops();
    maxIops=volumeInfo.getMaxIops();
    volumeSize=getDataObjectSizeIncludingHypervisorSnapshotReserve(volumeInfo,storagePoolDao.findById(storagePoolId));
    volumeName=volumeInfo.getName();
    mapAttributes=getVolumeAttributes(volumeInfo);
  }
 else   if (dataObject.getType() == DataObjectType.TEMPLATE) {
    TemplateInfo templateInfo=(TemplateInfo)dataObject;
    minIops=MIN_IOPS_FOR_TEMPLATE_VOLUME;
    maxIops=MAX_IOPS_FOR_TEMPLATE_VOLUME;
    volumeSize=getDataObjectSizeIncludingHypervisorSnapshotReserve(templateInfo,storagePoolDao.findById(storagePoolId));
    volumeName=templateInfo.getUniqueName();
    mapAttributes=getTemplateAttributes(templateInfo);
  }
 else {
    throw new CloudRuntimeException("Invalid type passed to createSolidFireVolume: " + dataObject.getType());
  }
  final Iops iops=getIops(minIops,maxIops,storagePoolId);
  long sfVolumeId=SolidFireUtil.createVolume(sfConnection,SolidFireUtil.getSolidFireVolumeName(volumeName),sfAccountId,volumeSize,true,mapAttributes,iops.getMinIops(),iops.getMaxIops(),iops.getBurstIops());
  return SolidFireUtil.getVolume(sfConnection,sfVolumeId);
}
