{
  AccountDetailVO accountDetail=_accountDetailsDao.findDetail(volumeInfo.getAccountId(),SolidFireUtil.ACCOUNT_ID);
  long sfAccountId=Long.parseLong(accountDetail.getValue());
  long storagePoolId=volumeInfo.getDataStore().getId();
  final Iops iops;
  Long minIops=volumeInfo.getMinIops();
  Long maxIops=volumeInfo.getMaxIops();
  if (minIops == null || minIops <= 0 || maxIops == null || maxIops <= 0) {
    long defaultMaxIops=getDefaultMaxIops(storagePoolId);
    iops=new Iops(getDefaultMinIops(storagePoolId),defaultMaxIops,getDefaultBurstIops(storagePoolId,defaultMaxIops));
  }
 else {
    iops=new Iops(volumeInfo.getMinIops(),volumeInfo.getMaxIops(),getDefaultBurstIops(storagePoolId,volumeInfo.getMaxIops()));
  }
  long volumeSize=getVolumeSizeIncludingHypervisorSnapshotReserve(volumeInfo,_storagePoolDao.findById(storagePoolId));
  long sfVolumeId=SolidFireUtil.createSolidFireVolume(sfConnection,SolidFireUtil.getSolidFireVolumeName(volumeInfo.getName()),sfAccountId,volumeSize,true,NumberFormat.getInstance().format(volumeInfo.getSize()),iops.getMinIops(),iops.getMaxIops(),iops.getBurstIops());
  return SolidFireUtil.getSolidFireVolume(sfConnection,sfVolumeId);
}
