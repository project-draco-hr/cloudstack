{
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Could not find zone with ID: " + zoneId);
  }
  HostPodVO pod=_podDao.findById(podId);
  if (pod == null) {
    throw new InvalidParameterValueException("Could not find pod with ID: " + podId);
  }
  List<HostVO> dhcps=_hostDao.listBy(Host.Type.ExternalDhcp,null,podId,zoneId);
  if (dhcps.size() != 0) {
    throw new InvalidParameterValueException("Already had a DHCP server in Pod: " + podId + " zone: "+ zoneId);
  }
  String ipAddress=url;
  String guid=getDhcpServerGuid(Long.toString(zoneId) + "-" + Long.toString(podId),"ExternalDhcp",ipAddress);
  Map params=new HashMap<String,String>();
  params.put("type",type);
  params.put("zone",Long.toString(zoneId));
  params.put("pod",podId.toString());
  params.put("ip",ipAddress);
  params.put("username",username);
  params.put("password",password);
  params.put("guid",guid);
  params.put("pod",Long.toString(podId));
  params.put("gateway",pod.getGateway());
  String dns=zone.getDns1();
  if (dns == null) {
    dns=zone.getDns2();
  }
  params.put("dns",dns);
  ServerResource resource=null;
  try {
    if (type.equalsIgnoreCase(DhcpServerType.Dnsmasq.getName())) {
      resource=new DnsmasqResource();
      resource.configure("Dnsmasq resource",params);
    }
 else     if (type.equalsIgnoreCase(DhcpServerType.Dhcpd.getName())) {
      resource=new DhcpdResource();
      resource.configure("Dhcpd resource",params);
    }
 else {
      throw new CloudRuntimeException("Unsupport DHCP server " + type);
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new CloudRuntimeException(e.getMessage());
  }
  Host dhcpServer=_agentMgr.addHost(zoneId,resource,Host.Type.ExternalDhcp,params);
  if (dhcpServer == null) {
    throw new CloudRuntimeException("Cannot add external Dhcp server as a host");
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  pod.setExternalDhcp(true);
  _podDao.update(pod.getId(),pod);
  txn.commit();
  return dhcpServer;
}
