def execute_internallb_haproxy_tests(self, vpc_offering):
    settings = self.get_lb_stats_settings()
    dummy_port = 90
    network_gw = '10.1.2.1'
    default_visibility = 'global'
    if (settings['visibility'] != default_visibility):
        config_update = Configurations.update(self.apiclient, 'network.loadbalancer.haproxy.stats.visibility', default_visibility)
        self.logger.debug(('Updated global setting stats haproxy.stats.visibility to %s' % default_visibility))
        settings = self.get_lb_stats_settings()
    network_offering_intlb = self.create_and_enable_network_serviceoffering(self.services['network_offering_internal_lb'])
    vpc = self.create_vpc(vpc_offering)
    network_internal_lb = self.create_network_tier('intlb_test02', vpc.id, network_gw, network_offering_intlb)
    vm = self.deployvm_in_network(vpc, network_internal_lb.id)
    public_ip = self.acquire_publicip(vpc, network_internal_lb)
    applb = self.create_internal_loadbalancer(dummy_port, dummy_port, 'leastconn', network_internal_lb.id)
    self.logger.debug(('Assigning virtual machines to LB: %s' % applb.id))
    try:
        applb.assign(self.apiclient, vms=[vm])
    except Exception as e:
        self.fail(('Failed to assign virtual machine(s) to loadbalancer: %s' % e))
    self.create_natrule(vpc, vm, '22', '22', public_ip, network_internal_lb)
    stats = self.verify_lb_stats(applb.sourceipaddress, self.get_ssh_client(vm, 5), settings)
    self.assertTrue(stats, 'Failed to verify LB HAProxy stats')
