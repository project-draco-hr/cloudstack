def createNetworkOffering(self):
    createNetworkOfferingCmd = createNetworkOffering.createNetworkOfferingCmd()
    createNetworkOfferingCmd.name = ('Network offering for internal lb service - ' + str(random.randrange(1, (100 + 1))))
    createNetworkOfferingCmd.displaytext = 'Network offering for internal lb service'
    createNetworkOfferingCmd.guestiptype = 'isolated'
    createNetworkOfferingCmd.traffictype = 'Guest'
    createNetworkOfferingCmd.conservemode = 'false'
    createNetworkOfferingCmd.supportedservices = 'Vpn,Dhcp,Dns,Lb,UserData,SourceNat,StaticNat,PortForwarding,NetworkACL'
    createNetworkOfferingCmd.serviceproviderlist = []
    for item in self.serviceProviderList:
        createNetworkOfferingCmd.serviceproviderlist.append({'service': item['service'], 'provider': item['provider'], })
    createNetworkOfferingCmd.servicecapabilitylist = []
    for item in self.serviceCapsList:
        createNetworkOfferingCmd.servicecapabilitylist.append({'service': item['service'], 'capabilitytype': item['capabilitytype'], 'capabilityvalue': item['capabilityvalue'], })
    createNetworkOfferingResponse = self.apiClient.createNetworkOffering(createNetworkOfferingCmd)
    TestInternalLb.networkOfferingId = createNetworkOfferingResponse.id
    updateNetworkOfferingCmd = updateNetworkOffering.updateNetworkOfferingCmd()
    updateNetworkOfferingCmd.id = TestInternalLb.networkOfferingId
    updateNetworkOfferingCmd.state = 'Enabled'
    updateNetworkOfferingResponse = self.apiClient.updateNetworkOffering(updateNetworkOfferingCmd)
    listNetworkOfferingsCmd = listNetworkOfferings.listNetworkOfferingsCmd()
    listNetworkOfferingsCmd.id = TestInternalLb.networkOfferingId
    listOffResponse = self.apiClient.listNetworkOfferings(listNetworkOfferingsCmd)
    self.assertNotEqual(len(listOffResponse), 0, 'Check if the list network offerings API                                 returns a non-empty response')
