@attr(tags=['smoke', 'advanced'], required_hardware='true')
def test02_internallb_haproxy_stats_on_all_interfaces(self):
    " Test to verify access to loadbalancer haproxy admin stats page\n            when global setting network.loadbalancer.haproxy.stats.visibility is set to 'all'\n            with credentials from global setting network.loadbalancer.haproxy.stats.auth\n            using the uri from global setting network.loadbalancer.haproxy.stats.uri"
    self.logger.debug('Starting test_02_internallb_haproxy_stats_on_all_interfaces')
    settings = self.get_lb_stats_settings()
    dummy_port = 90
    network_gw = '10.1.2.1'
    default_visibility = 'global'
    if (settings['visibility'] != default_visibility):
        config_update = Configurations.update(self.apiclient, 'network.loadbalancer.haproxy.stats.visibility', default_visibility)
        self.logger.debug(('Updated global setting stats haproxy.stats.visibility to %s' % default_visibility))
        settings = self.get_lb_stats_settings()
    network_offering_intlb = self.create_and_enable_network_serviceoffering(self.services['network_offering_internal_lb'])
    vpc = self.create_vpc('vpc_intlb_test_02', '10.1.0.0/16')
    network_internal_lb = self.create_network_tier('intlb_test02', vpc.id, network_gw, network_offering_intlb)
    vm = self.deployvm_in_network(vpc, network_internal_lb.id)
    public_ip = self.acquire_publicip(vpc, network_internal_lb)
    applb = self.create_internal_loadbalancer(dummy_port, dummy_port, 'leastconn', network_internal_lb.id)
    self.logger.debug(('Assigning virtual machines to LB: %s' % applb.id))
    try:
        applb.assign(self.apiclient, vms=[vm])
    except Exception as e:
        self.fail(('Failed to assign virtual machine(s) to loadbalancer: %s' % e))
    self.create_natrule(vpc, vm, '22', '22', public_ip, network_internal_lb)
    stats = self.verify_lb_stats(applb.sourceipaddress, self.get_ssh_client(vm, 4), settings)
    self.assertTrue(stats, 'Failed to verify LB HAProxy stats')
