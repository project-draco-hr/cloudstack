{
  boolean lockedNetwork=lockNetworkForUserVm(network,vm);
  if (lockedNetwork && s_logger.isDebugEnabled()) {
    s_logger.debug("Locked network " + network.getId() + " for creation of user VM "+ vm.getInstanceName());
  }
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Handling reserve() call back to with Create a new VM or add an interface to existing VM in network " + network.getName());
    }
    DataCenter dc=_dcDao.findById(network.getDataCenterId());
    AccountVO neworkAccountDetails=_accountDao.findById(network.getAccountId());
    if (neworkAccountDetails.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      throw new InsufficientVirtualNetworkCapacityException("CS project support is not yet implemented in NuageVsp",DataCenter.class,dc.getId());
    }
    if (Strings.isNullOrEmpty(network.getBroadcastUri().getPath()) || !network.getBroadcastUri().getPath().startsWith("/")) {
      throw new IllegalStateException("The broadcast URI path " + network.getBroadcastUri() + " is empty or in an incorrect format.");
    }
    nic.setBroadcastUri(network.getBroadcastUri());
    nic.setIsolationUri(network.getBroadcastUri());
    NicVO nicFromDb=_nicDao.findById(nic.getId());
    IPAddressVO staticNatIp=_ipAddressDao.findByVmIdAndNetworkId(network.getId(),vm.getId());
    VspNetwork vspNetwork=_nuageVspEntityBuilder.buildVspNetwork(network,false);
    VspVm vspVm=_nuageVspEntityBuilder.buildVspVm(vm.getVirtualMachine(),network);
    VspNic vspNic=_nuageVspEntityBuilder.buildVspNic(nicFromDb.getUuid(),nic);
    VspStaticNat vspStaticNat=null;
    if (staticNatIp != null) {
      VlanVO staticNatVlan=_vlanDao.findById(staticNatIp.getVlanId());
      vspStaticNat=_nuageVspEntityBuilder.buildVspStaticNat(null,staticNatIp,staticNatVlan,null);
    }
    HostVO nuageVspHost=getNuageVspHost(network.getPhysicalNetworkId());
    ReserveVmInterfaceVspCommand cmd=new ReserveVmInterfaceVspCommand(vspNetwork,vspVm,vspNic,vspStaticNat);
    Answer answer=_agentMgr.easySend(nuageVspHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error("ReserveVmInterfaceNuageVspCommand failed for NIC " + nic.getId() + " attached to VM "+ vm.getId()+ " in network "+ network.getId());
      if ((null != answer) && (null != answer.getDetails())) {
        s_logger.error(answer.getDetails());
      }
      throw new InsufficientVirtualNetworkCapacityException("Failed to reserve VM in Nuage VSP.",Network.class,network.getId());
    }
    if (vspVm.getDomainRouter() == Boolean.TRUE) {
      nic.setIPv4Address(vspVm.getDomainRouterIp());
    }
  }
  finally {
    if (network != null && lockedNetwork) {
      _networkDao.releaseFromLockTable(network.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unlocked network " + network.getId() + " for creation of user VM "+ vm.getInstanceName());
      }
    }
  }
}
