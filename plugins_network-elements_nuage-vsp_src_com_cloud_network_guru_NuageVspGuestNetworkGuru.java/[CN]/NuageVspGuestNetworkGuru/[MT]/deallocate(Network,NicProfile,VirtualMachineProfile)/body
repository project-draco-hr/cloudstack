{
  boolean lockedNetwork=lockNetworkForUserVm(network,vm);
  if (lockedNetwork && s_logger.isDebugEnabled()) {
    s_logger.debug("Locked network " + network.getId() + " for deallocation of user VM "+ vm.getInstanceName());
  }
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Handling deallocate() call back, which is called when a VM is destroyed or interface is removed, " + "to delete VM Interface with IP " + nic.getIPv4Address() + " from a VM "+ vm.getInstanceName()+ " with state "+ vm.getVirtualMachine().getState());
    }
    NicVO nicFromDb=_nicDao.findById(nic.getId());
    VspNetwork vspNetwork=_nuageVspEntityBuilder.buildVspNetwork(network,false);
    VspVm vspVm=_nuageVspEntityBuilder.buildVspVm(vm.getVirtualMachine(),network);
    VspNic vspNic=_nuageVspEntityBuilder.buildVspNic(nicFromDb.getUuid(),nic);
    HostVO nuageVspHost=getNuageVspHost(network.getPhysicalNetworkId());
    DeallocateVmVspCommand cmd=new DeallocateVmVspCommand(vspNetwork,vspVm,vspNic);
    Answer answer=_agentMgr.easySend(nuageVspHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error("DeallocateVmNuageVspCommand for VM " + vm.getUuid() + " failed on Nuage VSD "+ nuageVspHost.getDetail("hostname"));
      if ((null != answer) && (null != answer.getDetails())) {
        s_logger.error(answer.getDetails());
      }
    }
  }
  finally {
    if (network != null && lockedNetwork) {
      _networkDao.releaseFromLockTable(network.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unlocked network " + network.getId() + " for deallocation of user VM "+ vm.getInstanceName());
      }
    }
  }
  super.deallocate(network,nic,vm);
}
