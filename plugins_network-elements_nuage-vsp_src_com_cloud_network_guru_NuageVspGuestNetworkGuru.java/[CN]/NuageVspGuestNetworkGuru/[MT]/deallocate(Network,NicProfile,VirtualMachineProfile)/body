{
  boolean lockedNetwork=lockNetworkForUserVm(network,vm);
  if (lockedNetwork && s_logger.isDebugEnabled()) {
    s_logger.debug("Locked network " + network.getId() + " for deallocation of user VM "+ vm.getInstanceName());
  }
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Handling deallocate() call back, which is called when a VM is destroyed or interface is removed, " + "to delete VM Interface with IP " + nic.getIPv4Address() + " from a VM "+ vm.getInstanceName()+ " with state "+ vm.getVirtualMachine().getState());
    }
    DomainVO networksDomain=_domainDao.findById(network.getDomainId());
    NicVO nicFrmDd=_nicDao.findById(nic.getId());
    NetworkOffering networkOffering=_ntwkOfferingDao.findById(network.getNetworkOfferingId());
    boolean isL3Network=isL3Network(network);
    boolean isSharedNetwork=networkOffering.getGuestType() == GuestType.Shared;
    boolean isExpunging=vm.getVirtualMachine().getState() == VirtualMachine.State.Expunging;
    Long vpcId=network.getVpcId();
    String vpcUuid=null;
    if (vpcId != null) {
      Vpc vpcObj=_vpcDao.findById(vpcId);
      vpcUuid=vpcObj.getUuid();
    }
    HostVO nuageVspHost=getNuageVspHost(network.getPhysicalNetworkId());
    DeallocateVmVspCommand.Builder cmdBuilder=new DeallocateVmVspCommand.Builder().networkUuid(network.getUuid()).nicFromDbUuid(nicFrmDd.getUuid()).nicMacAddress(nic.getMacAddress()).nicIp4Address(nic.getIPv4Address()).isL3Network(isL3Network).isSharedNetwork(isSharedNetwork).vpcUuid(vpcUuid).networksDomainUuid(networksDomain.getUuid()).vmInstanceName(vm.getInstanceName()).vmUuid(vm.getUuid()).isExpungingState(isExpunging);
    Answer answer=_agentMgr.easySend(nuageVspHost.getId(),cmdBuilder.build());
    if (answer == null || !answer.getResult()) {
      s_logger.error("DeallocateVmNuageVspCommand for VM " + vm.getUuid() + " failed on Nuage VSD "+ nuageVspHost.getDetail("hostname"));
      if ((null != answer) && (null != answer.getDetails())) {
        s_logger.error(answer.getDetails());
      }
    }
  }
  finally {
    if (network != null && lockedNetwork) {
      _networkDao.releaseFromLockTable(network.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unlocked network " + network.getId() + " for deallocation of user VM "+ vm.getInstanceName());
      }
    }
  }
  super.deallocate(network,nic,vm);
}
