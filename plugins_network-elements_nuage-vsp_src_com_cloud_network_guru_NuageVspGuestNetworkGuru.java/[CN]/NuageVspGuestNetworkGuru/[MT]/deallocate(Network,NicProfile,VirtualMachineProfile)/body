{
  try {
    s_logger.debug("Handling deallocate() call back, which is called when a VM is destroyed or interface is removed, " + "to delete VM Interface with IP " + nic.getIp4Address() + " from a VM "+ vm.getInstanceName()+ " with state "+ vm.getVirtualMachine().getState());
    DomainVO networksDomain=_domainDao.findById(network.getDomainId());
    NicVO nicFrmDd=_nicDao.findById(nic.getId());
    long networkOfferingId=_ntwkOfferingDao.findById(network.getNetworkOfferingId()).getId();
    Long vpcId=network.getVpcId();
    String vpcUuid=null;
    if (vpcId != null) {
      Vpc vpcObj=_vpcDao.findById(vpcId);
      vpcUuid=vpcObj.getUuid();
    }
    HostVO nuageVspHost=getNuageVspHost(network.getPhysicalNetworkId());
    DeallocateVmVspCommand cmd=new DeallocateVmVspCommand(network.getUuid(),nicFrmDd.getUuid(),nic.getMacAddress(),nic.getIp4Address(),isL3Network(networkOfferingId),vpcUuid,networksDomain.getUuid(),vm.getInstanceName(),vm.getUuid());
    DeallocateVmVspAnswer answer=(DeallocateVmVspAnswer)_agentMgr.easySend(nuageVspHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error("DeallocateVmNuageVspCommand for VM " + vm.getUuid() + " failed");
      if ((null != answer) && (null != answer.getDetails())) {
        s_logger.error(answer.getDetails());
      }
    }
  }
 catch (  InsufficientVirtualNetworkCapacityException e) {
    s_logger.error("Handling deallocate(). VM " + vm.getInstanceName() + " with NIC IP "+ nic.getIp4Address()+ " is getting destroyed. REST API failed to update the VM state in NuageVsp",e);
  }
  super.deallocate(network,nic,vm);
}
