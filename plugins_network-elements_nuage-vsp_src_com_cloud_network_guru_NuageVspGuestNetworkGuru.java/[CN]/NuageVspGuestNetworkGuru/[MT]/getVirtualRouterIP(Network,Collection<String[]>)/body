{
  String virtualRouterIp;
  String subnet=NetUtils.getCidrSubNet(network.getCidr());
  String netmask=NetUtils.getCidrNetmask(network.getCidr());
  long cidrSize=NetUtils.getCidrSize(netmask);
  Set<Long> allIPsInCidr=NetUtils.getAllIpsFromCidr(subnet,cidrSize,new HashSet<Long>());
  if (allIPsInCidr == null || !(allIPsInCidr instanceof TreeSet)) {
    throw new IllegalStateException("The IPs in CIDR for subnet " + subnet + " where null or returned in a non-ordered set.");
  }
  if (allIPsInCidr.size() > 3) {
    Iterator<Long> ipIterator=allIPsInCidr.iterator();
    long vip=ipIterator.next();
    if (NetUtils.ip2Long(network.getGateway()) == vip) {
      vip=ipIterator.next();
      virtualRouterIp=NetUtils.long2Ip(vip);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("1st IP is used as gateway IP. Reserving " + virtualRouterIp + " for the Virtual Router IP for Network("+ network.getName()+ ")");
      }
    }
 else {
      virtualRouterIp=NetUtils.long2Ip(vip);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("1st IP is not used as the gateway IP. Reserving" + virtualRouterIp + " for the Virtual Router IP for Network("+ network.getName()+ ")");
      }
    }
    ipAddressRanges.add(new String[]{NetUtils.long2Ip(ipIterator.next()),NetUtils.getIpRangeEndIpFromCidr(subnet,cidrSize)});
    return virtualRouterIp;
  }
  throw new InsufficientVirtualNetworkCapacityException("VSP allocates an IP for VirtualRouter." + " So, subnet should have atleast minimum 4 hosts ",Network.class,network.getId());
}
