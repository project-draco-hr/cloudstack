{
  long networkId=network.getId();
  network=_networkDao.acquireInLockTable(network.getId(),1200);
  if (network == null) {
    throw new ConcurrentOperationException("Unable to acquire lock on network " + networkId);
  }
  NetworkVO implemented=null;
  try {
    if (network.getState() != State.Implementing) {
      throw new IllegalStateException("Network " + networkId + " is not in expected state Implementing, but is in state "+ network.getState());
    }
    AccountVO networksAccount=_accountDao.findById(network.getAccountId());
    if (networksAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      String errorMessage="Networks created by account " + networksAccount.getAccountName() + " of type Project ("+ Account.ACCOUNT_TYPE_PROJECT+ ") "+ "are not yet supported by NuageVsp provider";
      s_logger.error(errorMessage);
      throw new InsufficientVirtualNetworkCapacityException(errorMessage,Account.class,network.getAccountId());
    }
    long dcId=dest.getDataCenter().getId();
    Long physicalNetworkId=network.getPhysicalNetworkId();
    if (physicalNetworkId == null) {
      physicalNetworkId=_networkModel.findPhysicalNetworkId(dcId,offering.getTags(),offering.getTrafficType());
    }
    implemented=new NetworkVO(network.getId(),network,network.getNetworkOfferingId(),network.getGuruName(),network.getDomainId(),network.getAccountId(),network.getRelated(),network.getName(),network.getDisplayText(),network.getNetworkDomain(),network.getGuestType(),network.getDataCenterId(),physicalNetworkId,network.getAclType(),network.getSpecifyIpRanges(),network.getVpcId(),offering.getRedundantRouter());
    implemented.setUuid(network.getUuid());
    implemented.setState(State.Allocated);
    if (network.getGateway() != null) {
      implemented.setGateway(network.getGateway());
    }
    if (network.getCidr() != null) {
      implemented.setCidr(network.getCidr());
    }
    VspNetwork vspNetwork=_nuageVspEntityBuilder.buildVspNetwork(implemented,true);
    String tenantId=context.getDomain().getName() + "-" + context.getAccount().getAccountId();
    String broadcastUriStr=implemented.getUuid() + "/" + vspNetwork.getVirtualRouterIp();
    implemented.setBroadcastUri(Networks.BroadcastDomainType.Vsp.toUri(broadcastUriStr));
    implemented.setBroadcastDomainType(Networks.BroadcastDomainType.Vsp);
    HostVO nuageVspHost=getNuageVspHost(physicalNetworkId);
    List<String> dnsServers=_nuageVspManager.getDnsDetails(network);
    ImplementNetworkVspCommand cmd=new ImplementNetworkVspCommand(vspNetwork,dnsServers);
    Answer answer=_agentMgr.easySend(nuageVspHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error("ImplementNetworkVspCommand for network " + network.getUuid() + " failed on Nuage VSD "+ nuageVspHost.getDetail("hostname"));
      if ((null != answer) && (null != answer.getDetails())) {
        s_logger.error(answer.getDetails());
      }
      return null;
    }
    if (StringUtils.isNotBlank(vspNetwork.getDomainTemplateName())) {
      if (network.getVpcId() != null) {
        VpcDetailVO vpcDetail=new VpcDetailVO(network.getVpcId(),NuageVspManager.nuageDomainTemplateDetailName,vspNetwork.getDomainTemplateName(),false);
        _vpcDetailsDao.persist(vpcDetail);
      }
 else {
        NetworkDetailVO networkDetail=new NetworkDetailVO(implemented.getId(),NuageVspManager.nuageDomainTemplateDetailName,vspNetwork.getDomainTemplateName(),false);
        _networkDetailsDao.persist(networkDetail);
      }
    }
    s_logger.info("Implemented OK, network " + implemented.getUuid() + " in tenant "+ tenantId+ " linked to "+ implemented.getBroadcastUri());
  }
  finally {
    _networkDao.releaseFromLockTable(network.getId());
  }
  return implemented;
}
