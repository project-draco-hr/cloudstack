{
  State state=vm.getState();
  if (state == State.Starting || state == State.Running) {
    s_logger.debug("VM is already started: " + vm);
    return vm;
  }
  if (state != State.Stopped) {
    s_logger.debug("VM " + vm + " is not in a state to be started: "+ state);
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creating actual resources for VM " + vm);
  }
  Journal journal=new Journal.LogJournal("Creating " + vm,s_logger);
  ServiceOffering offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  BootloaderType bt=BootloaderType.PyGrub;
  if (template.getFormat() == Storage.ImageFormat.ISO || template.isRequiresHvm()) {
    bt=BootloaderType.HVM;
  }
  GuestOSVO guestOS=_guestOsDao.findById(vm.getGuestOSId());
  if (guestOS == null) {
    throw new CloudRuntimeException("Guest OS is not set");
  }
  VirtualMachineProfile vmProfile=new VirtualMachineProfile(vm,offering,guestOS.getDisplayName(),template.getHypervisorType());
  if (!_vmDao.updateIf(vm,Event.StartRequested,null)) {
    throw new ConcurrentOperationException("Unable to start vm " + vm + " due to concurrent operations");
  }
  ExcludeList avoids=new ExcludeList();
  int retry=_retry;
  while (retry-- != 0) {
    DeployDestination dest=null;
    for (    DeploymentPlanner planner : _planners) {
      dest=planner.plan(vmProfile,plan,avoids);
      if (dest != null) {
        avoids.addHost(dest.getHost().getId());
        journal.record("Deployment found ",vmProfile,dest);
        break;
      }
    }
    if (dest == null) {
      throw new InsufficientServerCapacityException("Unable to create a deployment for " + vmProfile);
    }
    vm.setDataCenterId(dest.getDataCenter().getId());
    vm.setPodId(dest.getPod().getId());
    _vmDao.updateIf(vm,Event.OperationRetry,dest.getHost().getId());
    VirtualMachineTO vmTO=new VirtualMachineTO(vmProfile,bt);
    VolumeTO[] volumes=null;
    try {
      volumes=_storageMgr.prepare(vmProfile,dest);
    }
 catch (    ConcurrentOperationException e) {
      throw e;
    }
catch (    StorageUnavailableException e) {
      s_logger.warn("Unable to contact storage.",e);
      continue;
    }
    NicTO[] nics=_networkMgr.prepare(vmProfile,dest,acct);
    vmTO.setNics(nics);
    vmTO.setDisks(volumes);
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new Start2Command(vmTO));
    if (guru != null) {
      guru.finalizeDeployment(cmds,vm,vmProfile,dest);
    }
    try {
      Answer[] answers=_agentMgr.send(dest.getHost().getId(),cmds);
      if (answers[0].getResult()) {
        if (!_vmDao.updateIf(vm,Event.OperationSucceeded,dest.getHost().getId())) {
          throw new CloudRuntimeException("Unable to transition to a new state.");
        }
        return vm;
      }
      s_logger.info("Unable to start VM on " + dest.getHost() + " due to "+ answers[0].getDetails());
    }
 catch (    AgentUnavailableException e) {
      s_logger.debug("Unable to send the start command to host " + dest.getHost());
      continue;
    }
catch (    OperationTimedoutException e) {
      s_logger.debug("Unable to send the start command to host " + dest.getHost());
      continue;
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creation complete for VM " + vmProfile);
  }
  return null;
}
