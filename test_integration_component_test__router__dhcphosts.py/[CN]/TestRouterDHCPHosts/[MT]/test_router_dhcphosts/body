@attr(tags=['advanced', 'advancedns', 'ssh'], required_hardware='true')
def test_router_dhcphosts(self):
    "Check that the /etc/dhcphosts.txt doesn't contain duplicate IPs"
    self.logger.debug('Starting test_router_dhcphosts...')
    routers = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    public_ips = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IPs response return valid data')
    public_ip = public_ips[0]
    self.logger.debug(('Creating Firewall rule for VM ID: %s' % self.vm_1.id))
    FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['natrule1']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule1']['publicport'], endport=self.services['natrule1']['publicport'])
    self.logger.debug(('Creating NAT rule for VM ID: %s' % self.vm_1.id))
    nat_rule1 = NATRule.create(self.apiclient, self.vm_1, self.services['natrule1'], public_ip.id)
    self.logger.debug(('Creating Firewall rule for VM ID: %s' % self.vm_2.id))
    FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['natrule2']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule2']['publicport'], endport=self.services['natrule2']['publicport'])
    self.logger.debug(('Creating NAT rule for VM ID: %s' % self.vm_2.id))
    nat_rule2 = NATRule.create(self.apiclient, self.vm_2, self.services['natrule2'], public_ip.id)
    nat_rules = list_nat_rules(self.apiclient, id=nat_rule1.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'Check for list NAT rules response return valid data')
    self.assertEqual(nat_rules[0].state, 'Active', 'Check list port forwarding rules')
    nat_rules = list_nat_rules(self.apiclient, id=nat_rule2.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'Check for list NAT rules response return valid data')
    self.assertEqual(nat_rules[0].state, 'Active', 'Check list port forwarding rules')
    self.logger.debug(('Testing SSH to VMs %s and %s' % (self.vm_1.id, self.vm_2.id)))
    self.test_ssh_command(self.vm_1, nat_rule1, 'natrule1')
    self.test_ssh_command(self.vm_2, nat_rule2, 'natrule2')
    self.logger.debug(('Testing DHCP hosts for VMs %s and %s' % (self.vm_1.id, self.vm_2.id)))
    self.test_dhcphosts(self.vm_1, router)
    self.test_dhcphosts(self.vm_2, router)
    self.logger.debug(('Deleting and Expunging VM %s with ip %s' % (self.vm_1.id, self.vm_1.nic[0].ipaddress)))
    self.vm_1.delete(self.apiclient)
    self.logger.debug('Creating new VM using the same IP as the one which was deleted => IP 10.1.1.50')
    self.vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account.name, domainid=self.domain.id, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)], ipaddress='10.1.1.50')
    self.cleanup.append(self.vm_1)
    self.logger.debug(('Testing DHCP hosts for VMs %s and %s' % (self.vm_1.id, self.vm_2.id)))
    self.test_dhcphosts(self.vm_1, router)
    self.test_dhcphosts(self.vm_2, router)
    return
