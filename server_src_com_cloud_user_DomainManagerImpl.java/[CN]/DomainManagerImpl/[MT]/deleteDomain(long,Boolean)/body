{
  Account caller=UserContext.current().getCaller();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException("Failed to delete domain " + domainId + ", domain not found");
  }
 else   if (domainId == DomainVO.ROOT_DOMAIN) {
    throw new PermissionDeniedException("Can't delete ROOT domain");
  }
  _accountMgr.checkAccess(caller,domain);
  s_logger.debug("Marking domain id=" + domainId + " as "+ Domain.State.Inactive+ " before actually deleting it");
  domain.setState(Domain.State.Inactive);
  _domainDao.update(domainId,domain);
  try {
    long ownerId=domain.getAccountId();
    if ((cleanup != null) && cleanup.booleanValue()) {
      if (!cleanupDomain(domainId,ownerId)) {
        s_logger.error("Failed to clean up domain resources and sub domains, delete failed on domain " + domain.getName() + " (id: "+ domainId+ ").");
        return false;
      }
    }
 else {
      List<AccountVO> accountsForCleanup=_accountDao.findCleanupsForRemovedAccounts(domainId);
      if (accountsForCleanup.isEmpty()) {
        if (!_domainDao.remove(domainId)) {
          s_logger.error("Delete failed on domain " + domain.getName() + " (id: "+ domainId+ "); please make sure all users and sub domains have been removed from the domain before deleting");
          return false;
        }
      }
 else {
        s_logger.warn("Can't delete the domain yet because it has " + accountsForCleanup.size() + "accounts that need a cleanup");
        return false;
      }
    }
    cleanupDomainOfferings(domainId);
    return true;
  }
 catch (  Exception ex) {
    s_logger.error("Exception deleting domain with id " + domainId,ex);
    return false;
  }
}
