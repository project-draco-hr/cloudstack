{
  s_logger.debug("Marking domain id=" + domain.getId() + " as "+ Domain.State.Inactive+ " before actually deleting it");
  domain.setState(Domain.State.Inactive);
  _domainDao.update(domain.getId(),domain);
  boolean rollBackState=false;
  boolean hasDedicatedResources=false;
  try {
    long ownerId=domain.getAccountId();
    if ((cleanup != null) && cleanup.booleanValue()) {
      if (!cleanupDomain(domain.getId(),ownerId)) {
        rollBackState=true;
        CloudRuntimeException e=new CloudRuntimeException("Failed to clean up domain resources and sub domains, delete failed on domain " + domain.getName() + " (id: "+ domain.getId()+ ").");
        e.addProxyObject(domain.getUuid(),"domainId");
        throw e;
      }
    }
 else {
      List<Long> networkIds=_networkDomainDao.listNetworkIdsByDomain(domain.getId());
      List<AccountVO> accountsForCleanup=_accountDao.findCleanupsForRemovedAccounts(domain.getId());
      List<DedicatedResourceVO> dedicatedResources=_dedicatedDao.listByDomainId(domain.getId());
      if (dedicatedResources != null && !dedicatedResources.isEmpty()) {
        s_logger.error("There are dedicated resources for the domain " + domain.getId());
        hasDedicatedResources=true;
      }
      if (accountsForCleanup.isEmpty() && networkIds.isEmpty() && !hasDedicatedResources) {
        if (!_domainDao.remove(domain.getId())) {
          rollBackState=true;
          CloudRuntimeException e=new CloudRuntimeException("Delete failed on domain " + domain.getName() + " (id: "+ domain.getId()+ "); Please make sure all users and sub domains have been removed from the domain before deleting");
          e.addProxyObject(domain.getUuid(),"domainId");
          throw e;
        }
      }
 else {
        rollBackState=true;
        String msg=null;
        if (!accountsForCleanup.isEmpty()) {
          msg=accountsForCleanup.size() + " accounts to cleanup";
        }
 else         if (!networkIds.isEmpty()) {
          msg=networkIds.size() + " non-removed networks";
        }
 else         if (hasDedicatedResources) {
          msg="dedicated resources.";
        }
        CloudRuntimeException e=new CloudRuntimeException("Can't delete the domain yet because it has " + msg);
        e.addProxyObject(domain.getUuid(),"domainId");
        throw e;
      }
    }
    cleanupDomainOfferings(domain.getId());
    CallContext.current().putContextParameter(Domain.class,domain.getUuid());
    _messageBus.publish(_name,MESSAGE_REMOVE_DOMAIN_EVENT,PublishScope.LOCAL,domain);
    return true;
  }
 catch (  Exception ex) {
    s_logger.error("Exception deleting domain with id " + domain.getId(),ex);
    if (ex instanceof CloudRuntimeException)     throw (CloudRuntimeException)ex;
 else     return false;
  }
 finally {
    if (rollBackState) {
      s_logger.debug("Changing domain id=" + domain.getId() + " state back to "+ Domain.State.Active+ " because it can't be removed due to resources referencing to it");
      domain.setState(Domain.State.Active);
      _domainDao.update(domain.getId(),domain);
    }
  }
}
