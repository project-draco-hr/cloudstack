{
  s_logger.debug("Cleaning up domain id=" + domainId);
  boolean success=true;
{
    DomainVO domainHandle=_domainDao.findById(domainId);
    domainHandle.setState(Domain.State.Inactive);
    _domainDao.update(domainId,domainHandle);
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd("parent",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    SearchCriteria<DomainVO> sc1=_domainDao.createSearchCriteria();
    sc1.addAnd("path",SearchCriteria.Op.LIKE,"%" + domainHandle.getPath() + "%");
    List<DomainVO> domainsToBeInactivated=_domainDao.search(sc1,null);
    for (    DomainVO domain : domainsToBeInactivated) {
      domain.setState(Domain.State.Inactive);
      _domainDao.update(domain.getId(),domain);
    }
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
      if (!success) {
        s_logger.warn("Failed to cleanup domain id=" + domain.getId());
      }
    }
  }
  SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
  sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
  List<AccountVO> accounts=_accountDao.search(sc,null);
  for (  AccountVO account : accounts) {
    if (account.getType() != Account.ACCOUNT_TYPE_PROJECT) {
      s_logger.debug("Deleting account " + account + " as a part of domain id="+ domainId+ " cleanup");
      success=(success && _accountMgr.deleteAccount(account,UserContext.current().getCallerUserId(),UserContext.current().getCaller()));
      if (!success) {
        s_logger.warn("Failed to cleanup account id=" + account.getId() + " as a part of domain cleanup");
      }
    }
 else {
      ProjectVO project=_projectDao.findByProjectAccountId(account.getId());
      s_logger.debug("Deleting project " + project + " as a part of domain id="+ domainId+ " cleanup");
      success=(success && _projectMgr.deleteProject(UserContext.current().getCaller(),UserContext.current().getCallerUserId(),project));
      if (!success) {
        s_logger.warn("Failed to cleanup project " + project + " as a part of domain cleanup");
      }
    }
  }
  boolean deleteDomainSuccess=true;
  List<AccountVO> accountsForCleanup=_accountDao.findCleanupsForRemovedAccounts(domainId);
  if (accountsForCleanup.isEmpty()) {
    deleteDomainSuccess=_domainDao.remove(domainId);
  }
 else {
    s_logger.debug("Can't delete the domain yet because it has " + accountsForCleanup.size() + "accounts that need a cleanup");
  }
  return success && deleteDomainSuccess;
}
