{
  logger.debug("Cleaning up domain id=" + domainId);
  boolean success=true;
{
    DomainVO domainHandle=_domainDao.findById(domainId);
    domainHandle.setState(Domain.State.Inactive);
    _domainDao.update(domainId,domainHandle);
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd("parent",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    SearchCriteria<DomainVO> sc1=_domainDao.createSearchCriteria();
    sc1.addAnd("path",SearchCriteria.Op.LIKE,"%" + domainHandle.getPath() + "%");
    List<DomainVO> domainsToBeInactivated=_domainDao.search(sc1,null);
    for (    DomainVO domain : domainsToBeInactivated) {
      domain.setState(Domain.State.Inactive);
      _domainDao.update(domain.getId(),domain);
    }
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
      if (!success) {
        logger.warn("Failed to cleanup domain id=" + domain.getId());
      }
    }
  }
  SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
  sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
  List<AccountVO> accounts=_accountDao.search(sc,null);
  for (  AccountVO account : accounts) {
    if (account.getType() != Account.ACCOUNT_TYPE_PROJECT) {
      logger.debug("Deleting account " + account + " as a part of domain id="+ domainId+ " cleanup");
      boolean deleteAccount=_accountMgr.deleteAccount(account,CallContext.current().getCallingUserId(),CallContext.current().getCallingAccount());
      if (!deleteAccount) {
        logger.warn("Failed to cleanup account id=" + account.getId() + " as a part of domain cleanup");
      }
      success=(success && deleteAccount);
    }
 else {
      ProjectVO project=_projectDao.findByProjectAccountId(account.getId());
      logger.debug("Deleting project " + project + " as a part of domain id="+ domainId+ " cleanup");
      boolean deleteProject=_projectMgr.deleteProject(CallContext.current().getCallingAccount(),CallContext.current().getCallingUserId(),project);
      if (!deleteProject) {
        logger.warn("Failed to cleanup project " + project + " as a part of domain cleanup");
      }
      success=(success && deleteProject);
    }
  }
  boolean networksDeleted=true;
  logger.debug("Deleting networks for domain id=" + domainId);
  List<Long> networkIds=_networkDomainDao.listNetworkIdsByDomain(domainId);
  CallContext ctx=CallContext.current();
  ReservationContext context=new ReservationContextImpl(null,null,_accountMgr.getActiveUser(ctx.getCallingUserId()),ctx.getCallingAccount());
  for (  Long networkId : networkIds) {
    logger.debug("Deleting network id=" + networkId + " as a part of domain id="+ domainId+ " cleanup");
    if (!_networkMgr.destroyNetwork(networkId,context,false)) {
      logger.warn("Unable to destroy network id=" + networkId + " as a part of domain id="+ domainId+ " cleanup.");
      networksDeleted=false;
    }
 else {
      logger.debug("Network " + networkId + " successfully deleted as a part of domain id="+ domainId+ " cleanup.");
    }
  }
  if (!networksDeleted) {
    logger.debug("Failed to delete the shared networks as a part of domain id=" + domainId + " clenaup");
    return false;
  }
  boolean deleteDomainSuccess=true;
  List<AccountVO> accountsForCleanup=_accountDao.findCleanupsForRemovedAccounts(domainId);
  if (accountsForCleanup.isEmpty()) {
    List<DedicatedResourceVO> dedicatedResources=_dedicatedDao.listByDomainId(domainId);
    if (dedicatedResources != null && !dedicatedResources.isEmpty()) {
      logger.debug("Releasing dedicated resources for domain" + domainId);
      for (      DedicatedResourceVO dr : dedicatedResources) {
        if (!_dedicatedDao.remove(dr.getId())) {
          logger.warn("Fail to release dedicated resources for domain " + domainId);
          return false;
        }
      }
    }
    deleteDomainSuccess=_domainDao.remove(domainId);
    _resourceCountDao.removeEntriesByOwner(domainId,ResourceOwnerType.Domain);
    _resourceLimitDao.removeEntriesByOwner(domainId,ResourceOwnerType.Domain);
  }
 else {
    logger.debug("Can't delete the domain yet because it has " + accountsForCleanup.size() + "accounts that need a cleanup");
    return false;
  }
  return success && deleteDomainSuccess;
}
