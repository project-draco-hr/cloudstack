def __sanitizeCmd(self, cmd):
    '\n        @Name : __sanitizeCmd\n        @Desc : Removes None values, Validates all required params are present\n        @Input: cmd: Cmd object eg: createPhysicalNetwork\n        @Output: Returns command name, asynchronous or not,request payload\n                 FAILED for failed cases\n        '
    try:
        cmd_name = ''
        payload = {}
        required = []
        isAsync = 'false'
        for attribute in dir(cmd):
            if (not attribute.startswith('__')):
                if (attribute == 'isAsync'):
                    isAsync = getattr(cmd, attribute)
                elif (attribute == 'required'):
                    required = getattr(cmd, attribute)
                else:
                    payload[attribute] = getattr(cmd, attribute)
        cmd_name = cmd.__class__.__name__.replace('Cmd', '')
        for required_param in required:
            if (payload[required_param] is None):
                self.logger.debug(('CmdName: %s Parameter : %s is Required' % (cmd_name, required_param)))
                self.__lastError = InvalidParameterException('Invalid Parameters')
                return FAILED
        for (param, value) in payload.items():
            if (value is None):
                payload.pop(param)
            elif isinstance(value, list):
                if (len(value) == 0):
                    payload.pop(param)
                elif (not isinstance(value[0], dict)):
                    payload[param] = ','.join(value)
                else:
                    payload.pop(param)
                    i = 0
                    for val in value:
                        for (k, v) in val.iteritems():
                            payload[('%s[%d].%s' % (param, i, k))] = v
                        i += 1
        return (cmd_name.strip(), isAsync, payload)
    except Exception as e:
        self.__lastError = e
        self.logger.exception(('__sanitizeCmd: CmdName : %s : Exception:%s' % (cmd_name, GetDetailExceptionInfo(e))))
        return FAILED
