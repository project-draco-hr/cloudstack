def __poll(self, jobid, response_cmd):
    '\n        @Name : __poll\n        @Desc: polls for the completion of a given jobid\n        @Input 1. jobid: Monitor the Jobid for CS\n               2. response_cmd:response command for request cmd\n        @return: FAILED if jobid is cancelled,failed\n                 Else return async_response\n        '
    try:
        cmd = queryAsyncJobResult.queryAsyncJobResultCmd()
        cmd.jobid = jobid
        timeout = self.asyncTimeout
        start_time = time.time()
        end_time = time.time()
        async_response = FAILED
        self.logger.debug(('=== Jobid: %s Started ===' % str(jobid)))
        while (timeout > 0):
            async_response = self.marvinRequest(cmd, response_type=response_cmd)
            if (async_response != FAILED):
                job_status = async_response.jobstatus
                if (job_status in [JOB_CANCELLED, JOB_SUCCEEDED]):
                    break
                elif (job_status == JOB_FAILED):
                    raise Exception(('Job failed: %s' % async_response))
            time.sleep(5)
            timeout -= 5
            self.logger.debug(('=== JobId:%s is Still Processing, Will TimeOut in:%s ====' % (str(jobid), str(timeout))))
        end_time = time.time()
        tot_time = int((start_time - end_time))
        self.logger.debug(('===Jobid:%s ; StartTime:%s ; EndTime:%s ; TotalTime:%s===' % (str(jobid), str(time.ctime(start_time)), str(time.ctime(end_time)), str(tot_time))))
        return async_response
    except Exception as e:
        self.__lastError = e
        self.logger.exception(('==== __poll: Exception Occurred :%s ====' % str(self.__lastError)))
        return FAILED
