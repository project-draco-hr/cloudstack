def __poll(self, jobid, response_cmd):
    '\n        @Name : __poll\n        @Desc: polls for the completion of a given jobid\n        @Input 1. jobid: Monitor the Jobid for CS\n               2. response_cmd:response command for request cmd\n        @return: FAILED if jobid is cancelled,failed\n                 Else return async_response\n        '
    try:
        cmd = queryAsyncJobResult.queryAsyncJobResultCmd()
        cmd.jobid = jobid
        timeout = self.asyncTimeout
        while (timeout > 0):
            async_response = self.marvinRequest(cmd, response_type=response_cmd)
            if (async_response != FAILED):
                job_status = async_response.jobstatus
                if (job_status in [JOB_FAILED, JOB_CANCELLED]):
                    self.logger.debug(('=====JobId:%s Either got Cancelled or Failed======' % str(jobid)))
                    return FAILED
                if (job_status == JOB_SUCCEEDED):
                    self.logger.debug(('======JobId:%s Succeeded=====' % str(jobid)))
                    return async_response
            time.sleep(5)
            timeout -= 5
            self.logger.debug(('JobId:%s is Still Processing, Will TimeOut in:%s' % (str(jobid), str(timeout))))
        return FAILED
    except Exception as e:
        self.__lastError = GetDetailExceptionInfo(e)
        self.logger.exception(('__poll: Exception Occurred :%s' % self.__lastError))
        return FAILED
