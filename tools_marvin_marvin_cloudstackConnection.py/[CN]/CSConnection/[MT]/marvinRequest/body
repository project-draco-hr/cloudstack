def marvinRequest(self, cmd, response_type=None, method='GET', data=''):
    "\n        @Name : marvinRequest\n        @Desc: Handles Marvin Requests\n        @Input  cmd: marvin's command from cloudstackAPI\n                response_type: response type of the command in cmd\n                method: HTTP GET/POST, defaults to GET\n        @Output: Response received from CS\n                 FAILED In case of Error\\Exception\n        "
    try:
        '\n            1. Verify the Inputs Provided\n            '
        if (((cmd is None) or (cmd == '')) or ((response_type is None) or (response_type == ''))):
            self.logger.exception('marvinRequest : Invalid Command Input')
            return FAILED
        '\n            2. Sanitize the Command\n            '
        sanitize_cmd_out = self.__sanitizeCmd(cmd)
        if (sanitize_cmd_out == FAILED):
            return FAILED
        (cmd_name, is_async, payload) = sanitize_cmd_out
        '\n            3. Send Command to CS\n            '
        cmd_response = self.__sendCmdToCS(cmd_name, self.auth, payload=payload, method=method)
        if (cmd_response == FAILED):
            return FAILED
        '\n            4. Check if the Command Response received above is valid or Not.\n               If not return Invalid Response\n            '
        return self.__parseAndGetResponse(cmd_response, response_type, is_async)
    except Exception as e:
        self.logger.exception(('marvinRequest : CmdName: %s Exception: %s' % (str(cmd), GetDetailExceptionInfo(e))))
        return FAILED
