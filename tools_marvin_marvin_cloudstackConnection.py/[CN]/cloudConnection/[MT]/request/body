def request(self, command, auth=True, payload={}, method='GET'):
    '\n        Makes requests using auth or over integration port\n        @param command: cloudstack API command name\n                    eg: deployVirtualMachineCommand\n        @param auth: Authentication (apikey,secretKey) => True\n                     else False for integration.api.port\n        @param payload: request data composed as a dictionary\n        @param method: GET/POST via HTTP\n        @return:\n        '
    payload['command'] = command
    payload['response'] = 'json'
    if auth:
        payload['apiKey'] = self.apiKey
        signature = self.sign(payload)
        payload['signature'] = signature
    try:
        https_flag = False
        cert_path = ()
        if (self.protocol == 'https'):
            https_flag = True
            if ((self.certCAPath != 'NA') and (self.certPath != 'NA')):
                cert_path = (self.certCAPath, self.certPath)
        if (self.protocol == 'http'):
            if (method == 'POST'):
                response = requests.post(self.baseurl, params=payload, verify=https_flag)
            else:
                response = requests.get(self.baseurl, params=payload, verify=https_flag)
        else:
            '\n                If protocol is https, then create the  connection url with                 user provided certificates                 provided as part of cert\n                '
            try:
                if (method == 'POST'):
                    response = requests.post(self.baseurl, params=payload, cert=cert_path, verify=https_flag)
                else:
                    response = requests.get(self.baseurl, params=payload, cert=cert_path, verify=https_flag)
            except Exception as e:
                '\n                    If an exception occurs with user provided CA certs,                     then try with default certs,                     we dont need to mention here the cert path\n                    '
                self.logging.debug(('Creating CS connection over https                                         didnt worked with user provided certs                                             , so trying with no certs %s' % e))
                if (method == 'POST'):
                    response = requests.post(self.baseurl, params=payload, verify=https_flag)
                else:
                    response = requests.get(self.baseurl, params=payload, verify=https_flag)
    except ConnectionError as c:
        self.logging.debug(('Connection refused. Reason: %s : %s' % (self.baseurl, c)))
        raise c
    except HTTPError as h:
        self.logging.debug(('Http Error.Server returned error code: %s' % h))
        raise h
    except Timeout as t:
        self.logging.debug(('Connection timed out with %s' % t))
        raise t
    except RequestException as r:
        self.logging.debug(('RequestException from server %s' % r))
        raise r
    except Exception as e:
        self.logging.debug(('Error returned by server %s' % r))
        raise e
    else:
        return response
