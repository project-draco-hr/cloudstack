import sys, os, subprocess, errno, re
from os.path import exists
TOOl_PATH = '/usr/bin/ipmitool'
try:
    from subprocess import check_call
    from subprocess import CalledProcessError
except ImportError:

    def check_call(*popenargs, **kwargs):
        import subprocess
        retcode = subprocess.call(*popenargs, **kwargs)
        cmd = kwargs.get('args')
        if (cmd is None):
            cmd = popenargs[0]
        if retcode:
            raise CalledProcessError(retcode, cmd)
        return retcode


    class CalledProcessError(Exception):

        def __init__(self, returncode, cmd):
            self.returncode = returncode
            self.cmd = cmd

        def __str__(self):
            return ("Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode))
ipmitool = Command('ipmitool')
call_table = {'ping': ping, 'boot_dev': boot_dev, 'reboot': reboot, 'power': power, }
if (__name__ == '__main__'):
    if (check_tool() == False):
        sys.exit(1)
    if (len(sys.argv) < 2):
        print 'Not enough arguments, at least one'
        sys.exit(1)
    sys.exit(dispatch(sys.argv))
