{
  if (network.getTrafficType() != TrafficType.Guest) {
    s_logger.trace("External firewall can only be used for add/remove guest networks.");
    return false;
  }
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  HostVO externalFirewall=null;
  if (add) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock("NetworkFirewallDeviceMap");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          ExternalFirewallDeviceVO device=findSuitableFirewallForNetwork(network);
          long externalFirewallId=device.getId();
          NetworkExternalFirewallVO networkFW=new NetworkExternalFirewallVO(network.getId(),externalFirewallId);
          _networkExternalFirewallDao.persist(networkFW);
          externalFirewall=_hostDao.findById(device.getHostId());
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
  }
 else {
    ExternalFirewallDeviceVO fwDeviceVO=getExternalFirewallForNetwork(network);
    if (fwDeviceVO == null) {
      s_logger.warn("Network shutdown requested on external firewall element, which did not implement the network." + " Either network implement failed half way through or already network shutdown is completed.");
      return true;
    }
    externalFirewall=_hostDao.findById(fwDeviceVO.getHostId());
  }
  Account account=_accountDao.findByIdIncludingRemoved(network.getAccountId());
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  IPAddressVO sourceNatIp=null;
  if (!sharedSourceNat) {
    List<? extends IpAddress> sourceNatIps=_networkModel.listPublicIpsAssignedToAccount(network.getAccountId(),zoneId,true);
    if (sourceNatIps.size() != 1) {
      String errorMsg="External firewall was unable to find the source NAT IP address for account " + account.getAccountName();
      s_logger.error(errorMsg);
      return true;
    }
 else {
      sourceNatIp=_ipAddressDao.findById(sourceNatIps.get(0).getId());
    }
  }
  long guestVlanTag=Long.parseLong(network.getBroadcastUri().getHost());
  String guestVlanGateway=network.getGateway();
  String guestVlanCidr=network.getCidr();
  String sourceNatIpAddress=null;
  String publicVlanTag=null;
  if (sourceNatIp != null) {
    sourceNatIpAddress=sourceNatIp.getAddress().addr();
    VlanVO publicVlan=_vlanDao.findById(sourceNatIp.getVlanId());
    publicVlanTag=publicVlan.getVlanTag();
  }
  Integer networkRate=_networkModel.getNetworkRate(network.getId(),null);
  IpAddressTO ip=new IpAddressTO(account.getAccountId(),sourceNatIpAddress,add,false,!sharedSourceNat,publicVlanTag,null,null,null,networkRate,false);
  IpAddressTO[] ips=new IpAddressTO[1];
  ips[0]=ip;
  IpAssocCommand cmd=new IpAssocCommand(ips);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,guestVlanGateway);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_CIDR,guestVlanCidr);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
  Answer answer=_agentMgr.easySend(externalFirewall.getId(),cmd);
  List<String> reservedIpAddressesForGuestNetwork=_nicDao.listIpAddressInNetwork(network.getId());
  if (answer == null || !answer.getResult()) {
    String action=add ? "implement" : "shutdown";
    String answerDetails=(answer != null) ? answer.getDetails() : "answer was null";
    String msg="External firewall was unable to " + action + " the guest network on the external firewall in zone "+ zone.getName()+ " due to "+ answerDetails;
    s_logger.error(msg);
    if (!add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
      s_logger.error("Skip the shutdown of guest network on SRX because it seems we didn't implement it as well");
      return true;
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,zoneId);
  }
  if (add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
    _networkMgr.savePlaceholderNic(network,network.getGateway(),null);
  }
  List<NicVO> nicsInNetwork=_nicDao.listByNetworkId(network.getId());
  for (  NicVO nic : nicsInNetwork) {
    InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByNicId(nic.getId());
    if (mapping != null) {
      _nicDao.expunge(mapping.getNicId());
      _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
    }
  }
  if (!add) {
    List<NicVO> nics=_nicDao.listByNetworkId(network.getId());
    for (    NicVO nic : nics) {
      if (nic.getVmType() == null && nic.getReservationStrategy().equals(ReservationStrategy.PlaceHolder) && nic.getIp4Address().equals(network.getGateway())) {
        s_logger.debug("Removing placeholder nic " + nic + " for the network "+ network);
        _nicDao.remove(nic.getId());
      }
    }
    freeFirewallForNetwork(network);
  }
  String action=add ? "implemented" : "shut down";
  s_logger.debug("External firewall has " + action + " the guest network for account "+ account.getAccountName()+ "(id = "+ account.getAccountId()+ ") with VLAN tag "+ guestVlanTag);
  return true;
}
