{
  Mockito.when(poolDao.listBy(Mockito.anyLong(),Mockito.anyLong(),Mockito.anyLong(),Mockito.any(ScopeType.class))).thenReturn(Collections.singletonList(pool));
  Mockito.when(poolDao.findZoneWideStoragePoolsByTags(Mockito.anyLong(),Mockito.any(String[].class))).thenReturn(Collections.<StoragePoolVO>emptyList());
  Mockito.when(poolDao.findZoneWideStoragePoolsByHypervisor(Mockito.anyLong(),Mockito.any(Hypervisor.HypervisorType.class))).thenReturn(Collections.<StoragePoolVO>emptyList());
  storagePoolMonitor.processConnect(host,cmd,false);
  Mockito.verify(storageManager,Mockito.times(1)).connectHostToSharedPool(Mockito.eq(host.getId()),Mockito.eq(pool.getId()));
  Mockito.verify(storageManager,Mockito.times(1)).createCapacityEntry(Mockito.eq(pool.getId()));
}
