@attr(tags=['advanced', 'advancedns', 'ssh'], required_hardware='true')
def test_02_isolate_network_FW_PF_default_routes_egress_false(self):
    ' Test redundant router internals '
    self.logger.debug('Starting test_02_isolate_network_FW_PF_default_routes_egress_false...')
    self.logger.debug('Creating Network Offering with default egress FALSE')
    network_offering_egress_false = NetworkOffering.create(self.apiclient, self.services['network_offering_egress_false'], conservemode=True)
    network_offering_egress_false.update(self.apiclient, state='Enabled')
    self.logger.debug(('Creating Network with Network Offering ID %s' % network_offering_egress_false.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=network_offering_egress_false.id, zoneid=self.zone.id)
    self.logger.debug(('Deploying Virtual Machine on Network %s' % network.id))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account.name, domainid=self.domain.id, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.logger.debug(('Deployed VM in network: %s' % network.id))
    self.cleanup.insert(0, network_offering_egress_false)
    self.cleanup.insert(0, network)
    self.cleanup.insert(0, virtual_machine)
    self.logger.debug('Starting test_isolate_network_FW_PF_default_routes...')
    routers = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    self.assertNotEqual(len(routers), 0, 'Check list router response')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    public_ips = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IPs response return valid data')
    public_ip = public_ips[0]
    self.logger.debug(('Creating Firewall rule for VM ID: %s' % virtual_machine.id))
    FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    self.logger.debug(('Creating NAT rule for VM ID: %s' % virtual_machine.id))
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], public_ip.id)
    nat_rules = list_nat_rules(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'Check for list NAT rules response return valid data')
    self.assertEqual(nat_rules[0].state, 'Active', 'Check list port forwarding rules')
    expected = 0
    ssh_command = 'ping -c 3 8.8.8.8'
    check_string = ' 0% packet loss'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Ping to outside world from VM should NOT be successful')
    expected = 0
    ssh_command = 'wget -t 1 -T 1 www.google.com'
    check_string = 'HTTP request sent, awaiting response... 200 OK'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Attempt to retrieve google.com index page should NOT be successful')
    EgressFireWallRule.create(self.apiclient, networkid=network.id, protocol=self.services['egress_80']['protocol'], startport=self.services['egress_80']['startport'], endport=self.services['egress_80']['endport'], cidrlist=self.services['egress_80']['cidrlist'])
    expected = 1
    ssh_command = 'wget -t 1 -T 5 www.google.com'
    check_string = 'HTTP request sent, awaiting response... 200 OK'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Attempt to retrieve google.com index page should be successful once rule is added!')
    return
