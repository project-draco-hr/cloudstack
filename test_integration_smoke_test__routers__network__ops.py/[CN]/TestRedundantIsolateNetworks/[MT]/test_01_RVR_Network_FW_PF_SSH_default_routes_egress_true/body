@attr(tags=['advanced', 'advancedns', 'ssh'], required_hardware='true')
def test_01_RVR_Network_FW_PF_SSH_default_routes_egress_true(self):
    ' Test redundant router internals '
    self.logger.debug('Starting test_01_RVR_Network_FW_PF_SSH_default_routes_egress_true...')
    self.logger.debug('Creating Network Offering with default egress TRUE')
    network_offering_egress_true = NetworkOffering.create(self.apiclient, self.services['nw_off_persistent_RVR_egress_true'], conservemode=True)
    network_offering_egress_true.update(self.api_client, state='Enabled')
    self.logger.debug(('Creating network with network offering: %s' % network_offering_egress_true.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=network_offering_egress_true.id, zoneid=self.zone.id)
    self.logger.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.logger.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.logger.debug(('Deployed VM in network: %s' % network.id))
    self.cleanup.insert(0, network_offering_egress_true)
    self.cleanup.insert(0, network)
    self.cleanup.insert(0, virtual_machine)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM should be in running state after deployment')
    self.logger.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    public_ips = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    public_ip = public_ips[0]
    self.assertEqual(isinstance(public_ips, list), True, 'Check for list public IPs response return valid data')
    self.logger.debug(('Creating Firewall rule for VM ID: %s' % virtual_machine.id))
    FireWallRule.create(self.apiclient, ipaddressid=public_ip.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    self.logger.debug(('Creating NAT rule for VM ID: %s' % virtual_machine.id))
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], public_ip.id)
    expected = 1
    ssh_command = 'ping -c 3 8.8.8.8'
    check_string = ' 0% packet loss'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Ping to outside world from VM should be successful!')
    expected = 1
    ssh_command = 'wget -t 1 -T 5 www.google.com'
    check_string = 'HTTP request sent, awaiting response... 200 OK'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Attempt to retrieve google.com index page should be successful!')
    EgressFireWallRule.create(self.apiclient, networkid=network.id, protocol=self.services['egress_80']['protocol'], startport=self.services['egress_80']['startport'], endport=self.services['egress_80']['endport'], cidrlist=self.services['egress_80']['cidrlist'])
    expected = 0
    ssh_command = 'wget -t 1 -T 1 www.google.com'
    check_string = 'HTTP request sent, awaiting response... 200 OK'
    result = check_router_command(virtual_machine, nat_rule.ipaddress, ssh_command, check_string, self)
    self.assertEqual(result, expected, 'Attempt to retrieve google.com index page should NOT be successful once rule is added!')
    return
