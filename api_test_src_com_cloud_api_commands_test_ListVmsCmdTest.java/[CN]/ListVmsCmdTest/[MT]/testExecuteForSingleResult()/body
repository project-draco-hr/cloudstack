{
  List<UserVmJoinVO> vmList=new ArrayList<UserVmJoinVO>();
  UserVmJoinVO vm=new UserVmJoinVO();
  String uuid=UUID.randomUUID().toString();
  vm.setUuid(uuid);
  vmList.add(vm);
  List<UserVmResponse> respList=new ArrayList<UserVmResponse>();
  UserVmResponse resp=new UserVmResponse();
  resp.setId(uuid);
  respList.add(resp);
  Mockito.when(userVmService.searchForUserVMs(listVmCmd)).thenReturn(new Pair<List<UserVmJoinVO>,Integer>(vmList,1));
  Mockito.when(responseGenerator.createUserVmResponse("virtualmachine",EnumSet.of(VMDetails.all),vm)).thenReturn(respList);
  try {
    listVmCmd.execute();
    ListResponse<UserVmResponse> listResp=(ListResponse<UserVmResponse>)listVmCmd.getResponseObject();
    assertNotNull(listResp);
    assertEquals(1,listResp.getCount().intValue());
    List<UserVmResponse> vmResp=listResp.getResponses();
    assertTrue(vmResp != null && vmResp.size() == 1);
    UserVmResponse v=vmResp.get(0);
    assertEquals(uuid,v.getId());
  }
 catch (  ServerApiException exception) {
    assertEquals("Failed to list user vms",exception.getDescription());
  }
}
