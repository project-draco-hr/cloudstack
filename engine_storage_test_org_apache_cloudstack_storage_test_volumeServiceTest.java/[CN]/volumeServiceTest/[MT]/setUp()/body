{
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,NetworkType.Basic,null,null,true,true);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),dc.getId(),"192.168.56.1","192.168.56.0/24",8,"test");
  pod=podDao.persist(pod);
  ClusterVO cluster=new ClusterVO(dc.getId(),pod.getId(),"devcloud cluster");
  cluster.setHypervisorType(HypervisorType.XenServer.toString());
  cluster.setClusterType(ClusterType.CloudManaged);
  cluster.setManagedState(ManagedState.Managed);
  cluster=clusterDao.persist(cluster);
  clusterId=cluster.getId();
  HostVO host=new HostVO(UUID.randomUUID().toString());
  host.setName("devcloud xen host");
  host.setType(Host.Type.Routing);
  host.setPrivateIpAddress("192.168.56.2");
  host.setDataCenterId(dc.getId());
  host.setVersion("6.0.1");
  host.setAvailable(true);
  host.setSetup(true);
  host.setLastPinged(0);
  host.setResourceState(ResourceState.Enabled);
  host.setClusterId(cluster.getId());
  host=hostDao.persist(host);
  List<HostVO> results=new ArrayList<HostVO>();
  results.add(host);
  Mockito.when(hostDao.listAll()).thenReturn(results);
  Mockito.when(hostDao.findHypervisorHostInCluster(Mockito.anyLong())).thenReturn(results);
  CreateVolumeAnswer createVolumeFromImageAnswer=new CreateVolumeAnswer(UUID.randomUUID().toString());
  try {
    Mockito.when(agentMgr.send(Mockito.anyLong(),Mockito.any(CreateVolumeFromBaseImageCommand.class))).thenReturn(createVolumeFromImageAnswer);
  }
 catch (  AgentUnavailableException e) {
  }
catch (  OperationTimedoutException e) {
  }
}
