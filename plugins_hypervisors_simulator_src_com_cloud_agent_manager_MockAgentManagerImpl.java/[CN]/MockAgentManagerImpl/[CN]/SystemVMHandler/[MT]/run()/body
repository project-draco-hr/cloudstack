{
  Transaction txn=Transaction.open(Transaction.SIMULATOR_DB);
  try {
    if (this.mode.equalsIgnoreCase("Stop")) {
      txn.start();
      MockHost host=_mockHostDao.findByVmId(this.vmId);
      if (host != null) {
        String guid=host.getGuid();
        if (guid != null) {
          AgentResourceBase res=_resources.get(guid);
          if (res != null) {
            res.stop();
            _resources.remove(guid);
          }
        }
      }
      txn.commit();
      return;
    }
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Unable to get host " + guid + " due to "+ ex.getMessage(),ex);
  }
 finally {
    txn.close();
    txn=Transaction.open(Transaction.CLOUD_DB);
    txn.close();
  }
  String resource=null;
  if (vmType.equalsIgnoreCase("secstorage")) {
    resource="com.cloud.agent.AgentStorageResource";
  }
  MockHostVO mockHost=new MockHostVO();
  mockHost.setDataCenterId(this.dcId);
  mockHost.setPodId(this.podId);
  mockHost.setCpuCount(DEFAULT_HOST_CPU_CORES);
  mockHost.setCpuSpeed(DEFAULT_HOST_SPEED_MHZ);
  mockHost.setMemorySize(DEFAULT_HOST_MEM_SIZE);
  mockHost.setGuid(this.guid);
  mockHost.setName(name);
  mockHost.setPrivateIpAddress(this.privateIpAddress);
  mockHost.setPublicIpAddress(this.privateIpAddress);
  mockHost.setStorageIpAddress(this.privateIpAddress);
  mockHost.setPrivateMacAddress(this.privateMacAddress);
  mockHost.setPublicMacAddress(this.privateMacAddress);
  mockHost.setStorageMacAddress(this.privateMacAddress);
  mockHost.setVersion(this.getClass().getPackage().getImplementationVersion());
  mockHost.setResource(resource);
  mockHost.setVmId(vmId);
  Transaction simtxn=Transaction.open(Transaction.SIMULATOR_DB);
  try {
    simtxn.start();
    mockHost=_mockHostDao.persist(mockHost);
    simtxn.commit();
  }
 catch (  Exception ex) {
    simtxn.rollback();
    throw new CloudRuntimeException("Unable to persist host " + mockHost.getGuid() + " due to "+ ex.getMessage(),ex);
  }
 finally {
    simtxn.close();
    simtxn=Transaction.open(Transaction.CLOUD_DB);
    simtxn.close();
  }
  if (vmType.equalsIgnoreCase("secstorage")) {
    AgentStorageResource storageResource=new AgentStorageResource();
    try {
      Map<String,Object> params=new HashMap<String,Object>();
      Map<String,String> details=new HashMap<String,String>();
      params.put("guid",this.guid);
      details.put("guid",this.guid);
      storageResource.configure("secondaryStorage",params);
      storageResource.start();
      _resources.put(this.guid,storageResource);
    }
 catch (    ConfigurationException e) {
      s_logger.debug("Failed to load secondary storage resource: " + e.toString());
      return;
    }
  }
}
