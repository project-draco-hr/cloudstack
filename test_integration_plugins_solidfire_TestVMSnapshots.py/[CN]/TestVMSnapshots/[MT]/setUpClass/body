@classmethod
def setUpClass(cls):
    testclient = super(TestVMSnapshots, cls).getClsTestClient()
    cls.apiClient = testclient.getApiClient()
    cls.testdata = TestData().testdata
    host_ip = ('https://' + list_hosts(cls.apiClient, clusterid=cls.testdata[TestData.clusterId], name='XenServer-6.5-1')[0].ipaddress)
    cls.xen_session = XenAPI.Session(host_ip)
    xenserver = cls.testdata[TestData.xenServer]
    cls.xen_session.xenapi.login_with_password(xenserver[TestData.username], xenserver[TestData.password])
    cls.sf_client = sf_api.SolidFireAPI(endpoint_dict=cls.testdata[TestData.solidFire])
    cls.zone = get_zone(cls.apiClient, zone_id=cls.testdata[TestData.zoneId])
    template = get_template(cls.apiClient, cls.zone.id, template_name=cls.testdata[TestData.templateName])
    cls.domain = get_domain(cls.apiClient, cls.testdata[TestData.domainId])
    cls.account = Account.create(cls.apiClient, cls.testdata[TestData.account], admin=1)
    user = User.create(cls.apiClient, cls.testdata[TestData.user], account=cls.account.name, domainid=cls.domain.id)
    url = cls.testdata[TestData.url]
    api_url = (('http://' + url) + ':8080/client/api')
    userkeys = User.registerUserKeys(cls.apiClient, user.id)
    cls.cs_api = SignedAPICall.CloudStack(api_url, userkeys.apikey, userkeys.secretkey)
    primarystorage = cls.testdata[TestData.primaryStorage]
    cls.primary_storage = StoragePool.create(cls.apiClient, primarystorage, scope=primarystorage[TestData.scope], zoneid=cls.zone.id, provider=primarystorage[TestData.provider], tags=primarystorage[TestData.tags], capacityiops=primarystorage[TestData.capacityIops], capacitybytes=primarystorage[TestData.capacityBytes], hypervisor=primarystorage[TestData.hypervisor])
    compute_offering = ServiceOffering.create(cls.apiClient, cls.testdata[TestData.computeOffering])
    cls.disk_offering = DiskOffering.create(cls.apiClient, cls.testdata[TestData.diskOffering])
    cls.virtual_machine = VirtualMachine.create(cls.apiClient, cls.testdata[TestData.virtualMachine], accountid=cls.account.name, zoneid=cls.zone.id, serviceofferingid=compute_offering.id, templateid=template.id, domainid=cls.domain.id, startvm=True)
    cls._cleanup = [cls.virtual_machine, compute_offering, cls.disk_offering, user, cls.account]
