{
  String link=buildLink(struct.getSwitchIp(),struct.getVlan());
  HttpHeaders headers=createBasicAuthenticationHeader(struct);
  HttpEntity<String> request=new HttpEntity<>(headers);
  ResponseEntity rsp=rest.exchange(link,HttpMethod.GET,request,String.class);
  if (rsp.getStatusCode() == HttpStatus.NOT_FOUND) {
    PortInfo port=new PortInfo(struct);
    XmlObject xml=new XmlObject("vlan").putElement("vlan-id",String.valueOf(struct.getVlan())).putElement("tagged",new XmlObject(port.interfaceType).putElement("name",port.port)).putElement("shutdown","false");
    request=new HttpEntity<>(xml.toString(),headers);
    link=buildLink(struct.getSwitchIp(),null);
    rsp=rest.exchange(link,HttpMethod.GET,request,String.class);
    if (rsp.getStatusCode() != HttpStatus.OK) {
      throw new CloudRuntimeException(String.format("unable to create vlan[%s] on force10 switch[ip:%s]. HTTP status code:%s, body dump:%s",struct.getVlan(),rsp.getStatusCode(),struct.getSwitchIp(),rsp.getBody()));
    }
  }
 else   if (rsp.getStatusCode() == HttpStatus.OK) {
    PortInfo port=new PortInfo(struct);
    XmlObject xml=XmlObjectParser.parseFromString((String)rsp.getBody());
    List<XmlObject> ports=xml.getAsList("tagged.tengigabitethernet");
    ports.addAll(xml.<XmlObject>getAsList("tagged.gigabitethernet"));
    ports.addAll(xml.<XmlObject>getAsList("tagged.fortyGigE"));
    for (    XmlObject pxml : ports) {
      XmlObject name=pxml.get("name");
      if (port.port.equals(name.getText())) {
        logger.debug(String.format("port[%s] has joined in vlan[%s], no need to program again",struct.getPort(),struct.getVlan()));
        return;
      }
    }
    XmlObject tag=xml.get("tagged");
    tag.putElement(port.interfaceType,new XmlObject("name").setText(port.port));
    request=new HttpEntity<>(xml.toString(),headers);
    link=buildLink(struct.getSwitchIp(),struct.getVlan());
    rsp=rest.exchange(link,HttpMethod.PUT,request,String.class);
    if (rsp.getStatusCode() != HttpStatus.NO_CONTENT) {
      throw new CloudRuntimeException(String.format("failed to program vlan[%s] for port[%s] on force10[ip:%s]. http status:%s, body dump:%s",struct.getVlan(),struct.getPort(),struct.getSwitchIp(),rsp.getStatusCode(),rsp.getBody()));
    }
  }
 else {
    throw new CloudRuntimeException(String.format("force10[ip:%s] returns unexpected error[%s] when http getting %s, body dump:%s",struct.getSwitchIp(),rsp.getStatusCode(),link,rsp.getBody()));
  }
}
