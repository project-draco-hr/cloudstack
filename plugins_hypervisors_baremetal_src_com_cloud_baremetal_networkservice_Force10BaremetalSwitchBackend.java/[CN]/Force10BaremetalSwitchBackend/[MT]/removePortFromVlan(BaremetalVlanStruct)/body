{
  String link=buildLink(struct.getSwitchIp(),struct.getVlan());
  HttpHeaders headers=createBasicAuthenticationHeader(struct);
  HttpEntity<String> request=new HttpEntity<>(headers);
  ResponseEntity rsp=rest.exchange(link,HttpMethod.GET,request,String.class);
  if (rsp.getStatusCode() == HttpStatus.NOT_FOUND) {
    logger.debug(String.format("vlan[%s] has been deleted on force10[ip:%s], no need to remove the port[%s] anymore",struct.getVlan(),struct.getSwitchIp(),struct.getPort()));
  }
 else   if (rsp.getStatusCode() == HttpStatus.OK) {
    PortInfo port=new PortInfo(struct);
    XmlObject xml=XmlObjectParser.parseFromString((String)rsp.getBody());
    List<XmlObject> ports=xml.getAsList("tagged.tengigabitethernet");
    ports.addAll(xml.<XmlObject>getAsList("tagged.gigabitethernet"));
    ports.addAll(xml.<XmlObject>getAsList("tagged.fortyGigE"));
    List<XmlObject> newPorts=new ArrayList<>();
    boolean needRemove=false;
    for (    XmlObject pxml : ports) {
      XmlObject name=pxml.get("name");
      if (port.port.equals(name.getText())) {
        needRemove=true;
        continue;
      }
      newPorts.add(pxml);
    }
    if (!needRemove) {
      return;
    }
    xml.putElement("tagged",newPorts);
    request=new HttpEntity<>(xml.toString(),headers);
    rsp=rest.exchange(link,HttpMethod.PUT,request,String.class);
    if (rsp.getStatusCode() != HttpStatus.NO_CONTENT) {
      throw new CloudRuntimeException(String.format("failed to program vlan[%s] for port[%s] on force10[ip:%s]. http status:%s, body dump:%s",struct.getVlan(),struct.getPort(),struct.getSwitchIp(),rsp.getStatusCode(),rsp.getBody()));
    }
 else {
      logger.debug(String.format("removed port[%s] from vlan[%s] on force10[ip:%s]",struct.getPort(),struct.getVlan(),struct.getSwitchIp()));
    }
  }
 else {
    throw new CloudRuntimeException(String.format("force10[ip:%s] returns unexpected error[%s] when http getting %s, body dump:%s",struct.getSwitchIp(),rsp.getStatusCode(),link,rsp.getBody()));
  }
}
