@attr(tags=['advanced', 'intervlan'], required_hardware='true')
def test_stop_start_vpc_router(self):
    ' Test stop and start VPC router\n\n        # 1. List the router in VPC network\n        # 2. Stop the router and verify that router is in stopped state\n        # 3. Start the router and verify that router is in running state\n        '
    self.debug(('Finding the VPC virtual router for account: %s' % self.account.name))
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List routers shall return a valid list')
    vpcvr = routers[0]
    self.debug('restarting the VPC virtual router')
    try:
        Router.stop(self.apiclient, id=vpcvr.id)
    except Exception as e:
        self.fail(('Failed to stop the virtual router: %s, %s' % (vpcvr.id, e)))
    response = verifyRouterState(self.apiclient, vpcvr.id, 'stopped')
    exceptionOccured = response[0]
    isRouterInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isRouterInDesiredState)):
        self.fail(exceptionMessage)
    self.debug(('Starting the router with ID: %s' % vpcvr.id))
    try:
        Router.start(self.apiclient, id=vpcvr.id)
    except Exception as e:
        self.fail(('Failed to start the virtual router: %s, %s' % (vpcvr.id, e)))
    response = verifyRouterState(self.apiclient, vpcvr.id, 'running')
    exceptionOccured = response[0]
    isRouterInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isRouterInDesiredState)):
        self.fail(exceptionMessage)
    return
