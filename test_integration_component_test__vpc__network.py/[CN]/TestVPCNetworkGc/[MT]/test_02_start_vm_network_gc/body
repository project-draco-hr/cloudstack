@attr(tags=['advanced', 'intervlan'], required_hardware='true')
def test_02_start_vm_network_gc(self):
    ' Test network rules after starting a VpcVr that\n            was shutdown after network.gc\n        '
    self.debug('Waiting for network garbage collection thread to run')
    wait_for_cleanup(self.apiclient, ['network.gc.interval', 'network.gc.wait'])
    self.debug('Starting one of the virtual machine')
    try:
        self.vm_1.start(self.apiclient)
    except Exception as e:
        self.fail(('Failed to start virtual machine: %s, %s' % (self.vm_1.name, e)))
    try:
        ssh_1 = self.vm_1.get_ssh_client(ipaddress=self.public_ip_1.ipaddress.ipaddress, reconnect=True, port=self.services['lbrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_1.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (self.public_ip_1.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    self.debug('Checking if we can SSH into VM_2?')
    try:
        ssh_2 = self.vm_1.get_ssh_client(ipaddress=self.public_ip_2.ipaddress.ipaddress, reconnect=True, port=self.services['natrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_2.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (self.public_ip_2.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    return
