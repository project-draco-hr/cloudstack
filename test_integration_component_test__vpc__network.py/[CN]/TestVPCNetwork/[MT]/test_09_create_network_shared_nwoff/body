@attr(tags=['advanced', 'intervlan'])
def test_09_create_network_shared_nwoff(self):
    ' Test create network with shared network offering\n        '
    self.debug('Creating a VPC offering')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc)
    self.debug('Creating network offering with guesttype=shared')
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_off_shared'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering)
    self.debug(('Creating network with network offering without SourceNAT: %s' % self.network_offering.id))
    with self.assertRaises(Exception):
        Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug('Network creation failed')
    return
