@data('network_off_shared', 'network_offering_vpcns')
@attr(tags=['advanced', 'intervlan'])
def test_09_create_network_shared_nwoff(self, value):
    ' Test create network with shared network offering\n        '
    if ((value == 'network_offering_vpcns') and (not self.ns_configured)):
        self.skipTest('Netscaler not configured: skipping test')
    if (value == 'network_off_shared'):
        vpc_off_list = VpcOffering.list(self.apiclient, name='Default VPC offering', listall=True)
    else:
        vpc_off_list = VpcOffering.list(self.apiclient, name='Default VPC  offering with Netscaler', listall=True)
    vpc_off = vpc_off_list[0]
    self.debug(('Creating a VPC with offering: %s' % vpc_off.id))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    self.debug('Creating network offering with guesttype=shared')
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_off_shared'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self.cleanup.append(self.network_offering)
    self.debug(('Creating network with network offering without SourceNAT: %s' % self.network_offering.id))
    with self.assertRaises(Exception):
        Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug('Network creation failed')
    return
