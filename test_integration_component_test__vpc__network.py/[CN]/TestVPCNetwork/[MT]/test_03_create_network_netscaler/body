@unittest.skip('Skip - Requires netscaler setup')
@attr(tags=['netscaler', 'intervlan'])
def test_03_create_network_netscaler(self):
    ' Test create network using netscaler for LB\n        '
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_off_netscaler'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering)
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network.id))
    self.debug('Verifying list network response to check if network created?')
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response')
    nw = networks[0]
    self.assertEqual(nw.networkofferingid, self.network_offering.id, ('Network should be created from network offering - %s' % self.network_offering.id))
    self.assertEqual(nw.vpcid, vpc.id, ('Network should be created in VPC: %s' % vpc.name))
    return
