@attr(tags=['advanced', 'intervlan', 'provisioning'])
def test_01_network_services_upgrade(self):
    ' Test update Network that is part of a VPC to a network offering that has more services\n        '
    self.debug('Creating a VPC offering..')
    vpc_off_list = VpcOffering.list(self.apiclient, name='Default VPC offering', listall=True)
    vpc_off = vpc_off_list[0]
    self.debug(('Creating a VPC with offering: %s' % vpc_off.id))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    nw_off = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    nw_off.update(self.apiclient, state='Enabled')
    self.cleanup.append(nw_off)
    self.services['network_offering']['supportedservices'] = 'Vpn,Dhcp,Dns,SourceNat,UserData,Lb,StaticNat,NetworkACL'
    self.services['network_offering']['serviceProviderList'] = {'Vpn': 'VpcVirtualRouter', 'Dhcp': 'VpcVirtualRouter', 'Dns': 'VpcVirtualRouter', 'SourceNat': 'VpcVirtualRouter', 'Lb': 'VpcVirtualRouter', 'UserData': 'VpcVirtualRouter', 'StaticNat': 'VpcVirtualRouter', 'NetworkACL': 'VpcVirtualRouter', }
    nw_off_no_pf = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    nw_off_no_pf.update(self.apiclient, state='Enabled')
    self.cleanup.append(nw_off_no_pf)
    self.debug(('Creating network with network offering: %s' % nw_off_no_pf.id))
    network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=nw_off_no_pf.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_1.id))
    self.debug(('deploying VMs in network: %s' % network_1.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed VM in network: %s' % network_1.id))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed another VM in network: %s' % network_1.id))
    self.debug(('Associating public IP for network: %s' % network_1.name))
    public_ip_1 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network_1.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_1.ipaddress.ipaddress, network_1.id)))
    self.debug(('Creating LB rule for IP address: %s' % public_ip_1.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip_1.ipaddress.id, accountid=self.account.name, networkid=network_1.id, vpcid=vpc.id, domainid=self.account.domainid)
    self.debug(('Adding virtual machines %s to LB rule' % vm_1.name))
    lb_rule.assign(self.apiclient, [vm_1])
    self.debug(('Associating public IP for network: %s' % network_1.name))
    public_ip_2 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network_1.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_2.ipaddress.ipaddress, network_1.id)))
    self.debug(('Enabling static NAT for IP: %s' % public_ip_2.ipaddress.ipaddress))
    try:
        StaticNATRule.enable(self.apiclient, ipaddressid=public_ip_2.ipaddress.id, virtualmachineid=vm_2.id, networkid=network_1.id)
        self.debug(('Static NAT enabled for IP: %s' % public_ip_2.ipaddress.ipaddress))
    except Exception as e:
        self.fail(('Failed to enable static NAT on IP: %s - %s' % (public_ip_2.ipaddress.ipaddress, e)))
    public_ips = PublicIPAddress.list(self.apiclient, networkid=network_1.id, listall=True, isstaticnat=True, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(public_ips, list), True, 'List public Ip for network should list the Ip addr')
    self.assertEqual(public_ips[0].ipaddress, public_ip_2.ipaddress.ipaddress, 'List public Ip for network should list the Ip addr')
    self.debug('Adding NetwrokACl rules to make PF and LB accessible')
    NetworkACL.create(self.apiclient, networkid=network_1.id, services=self.services['lbrule'], traffictype='Ingress')
    self.debug(('Adding Egress rules to network %s to access internet' % network_1.name))
    NetworkACL.create(self.apiclient, networkid=network_1.id, services=self.services['icmp_rule'], traffictype='Egress')
    self.debug(('Checking if we can SSH into VM_1? - IP: %s' % public_ip_1.ipaddress.ipaddress))
    try:
        ssh_1 = vm_1.get_ssh_client(ipaddress=public_ip_1.ipaddress.ipaddress, reconnect=True, port=self.services['lbrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_1.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_1.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    self.debug('Checking if we can SSH into VM_2?')
    try:
        ssh_2 = vm_2.get_ssh_client(ipaddress=public_ip_2.ipaddress.ipaddress, reconnect=True, port=self.services['natrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_2.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_2.ipaddress.ipaddress, e)))
    result = str(res)
    self.debug(('Result: %s' % result))
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    self.debug(('Associating public IP for network: %s' % vpc.name))
    public_ip_3 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network_1.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_3.ipaddress.ipaddress, network_1.id)))
    self.debug('Creatinng NAT rule in network shall through exception?')
    with self.assertRaises(Exception):
        NATRule.create(self.apiclient, vm_1, self.services['natrule'], ipaddressid=public_ip_3.ipaddress.id, openfirewall=False, networkid=network_1.id, vpcid=vpc.id)
    self.debug('Create NAT rule failed!')
    self.debug('Stopping all the virtual machines in network before upgrade')
    try:
        vm_1.stop(self.apiclient)
        vm_2.stop(self.apiclient)
    except Exception as e:
        self.fail(('Failed to stop VMs, %s' % e))
    retriesCount = 10
    while True:
        networks = list_networks(self.apiclient, id=network_1.id)
        self.assertEqual(validateList(networks)[0], PASS, ('networks list validation failed, list id %s' % networks))
        self.debug(('network state is %s' % networks[0].state))
        if (networks[0].state == 'Allocated'):
            break
        if (retriesCount == 0):
            self.fail(('Network state should change to Allocated, it is %s' % networks[0].state))
        retriesCount -= 1
        time.sleep(6)
    self.debug('Upgrading network offering to support PF services')
    try:
        network_1.update(self.apiclient, networkofferingid=nw_off.id)
    except Exception as e:
        self.fail(('failed to upgrade the network offering- %s' % e))
    self.debug('Starting all the virtual machines in network after upgrade')
    try:
        vm_1.start(self.apiclient)
        vm_2.start(self.apiclient)
    except Exception as e:
        self.fail(('Failed to start VMs, %s' % e))
    NATRule.create(self.apiclient, vm_1, self.services['natrule'], ipaddressid=public_ip_3.ipaddress.id, openfirewall=False, networkid=network_1.id, vpcid=vpc.id)
    self.debug('Adding NetwrokACl rules to make NAT rule accessible')
    NetworkACL.create(self.apiclient, networkid=network_1.id, services=self.services['natrule'], traffictype='Ingress')
    self.debug('Checking if we can SSH into VM using NAT rule?')
    try:
        ssh_3 = vm_1.get_ssh_client(ipaddress=public_ip_3.ipaddress.ipaddress, reconnect=True, port=self.services['natrule']['publicport'])
        self.debug('SSH into VM is successfully')
        self.debug('Verifying if we can ping to outside world from VM?')
        res = ssh_3.execute('ping -c 1 www.google.com')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_3.ipaddress.ipaddress, e)))
    result = str(res)
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    return
