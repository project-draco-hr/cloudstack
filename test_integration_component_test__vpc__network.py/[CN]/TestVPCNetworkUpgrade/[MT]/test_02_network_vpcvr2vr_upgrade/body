@attr(tags=['advanced', 'intervlan'])
def test_02_network_vpcvr2vr_upgrade(self):
    ' Test update Network that is NOT part of a VPC to a nw offering that has services that are provided by VPCVR and vice versa\n        '
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    nw_off = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    nw_off.update(self.apiclient, state='Enabled')
    self._cleanup.append(nw_off)
    self.services['network_offering']['supportedservices'] = 'Vpn,Dhcp,Dns,SourceNat,PortForwarding,UserData,Lb,StaticNat'
    self.services['network_offering']['serviceProviderList'] = {'Vpn': 'VirtualRouter', 'Dhcp': 'VirtualRouter', 'Dns': 'VirtualRouter', 'SourceNat': 'VirtualRouter', 'PortForwarding': 'VirtualRouter', 'Lb': 'VirtualRouter', 'UserData': 'VirtualRouter', 'StaticNat': 'VirtualRouter', }
    nw_off_vr = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    nw_off_vr.update(self.apiclient, state='Enabled')
    self._cleanup.append(nw_off_vr)
    self.debug(('Creating network with network offering: %s' % nw_off.id))
    network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=nw_off.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_1.id))
    self.debug(('deploying VMs in network: %s' % network_1.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed VM in network: %s' % network_1.id))
    self.debug('Stopping all the virtual machines in network before upgrade')
    try:
        vm_1.stop(self.apiclient)
    except Exception as e:
        self.fail(('Failed to stop VMs, %s' % e))
    wait_for_cleanup(self.apiclient, ['expunge.interval', 'expunge.delay'])
    self.debug('Upgrading network offering to support PF services')
    with self.assertRaises(Exception):
        network_1.update(self.apiclient, networkofferingid=nw_off_vr.id, changecidr=True)
    return
