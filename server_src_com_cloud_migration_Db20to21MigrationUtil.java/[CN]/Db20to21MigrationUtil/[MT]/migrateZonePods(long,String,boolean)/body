{
  SearchBuilder<HostPodVO> sb=_podDao.createSearchBuilder();
  sb.and("zoneId",sb.entity().getDataCenterId(),Op.EQ);
  sb.done();
  SearchCriteria<HostPodVO> sc=sb.create();
  sc.setParameters("zoneId",zoneId);
  List<HostPodVO> pods=_podDao.searchIncludingRemoved(sc,null,false,false);
  if (pods.size() > 0) {
    for (    HostPodVO pod : pods) {
      System.out.println("Migrating pod " + pod.getName() + " in zone "+ zoneName+ "...");
      System.out.println("Current pod " + pod.getName() + " configuration as");
      System.out.println("\tCIDR: " + pod.getCidrAddress() + "/"+ pod.getCidrSize());
      System.out.println("\tGateway: " + pod.getGateway());
      System.out.print("Please type your gateway address for the pod: ");
      String gateway=readInput();
      pod.setGateway(gateway);
      _podDao.update(pod.getId(),pod);
      if (createCluster)       migrateHostsInPod(zoneId,pod.getId(),pod.getName());
      System.out.println("Set last_host_id for VMs in pod " + pod.getName());
      migrateVmInstanceLastHostId(zoneId,pod.getId());
      System.out.println("Setup link local addresses, it will take a while, please wait...");
      String ipNums=_configDao.getValue("linkLocalIp.nums");
      int nums=Integer.parseInt(ipNums);
      if (nums > 16 || nums <= 0) {
        nums=10;
      }
      String[] ipRanges=NetUtils.getLinkLocalIPRange(nums);
      _dcDao.addLinkLocalPrivateIpAddress(zoneId,pod.getId(),ipRanges[0],ipRanges[1]);
    }
  }
}
