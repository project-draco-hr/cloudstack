{
  System.out.println("Migrating device_id for volumes, this may take a while, please wait...");
  SearchCriteria<VMInstanceVO> sc=_vmInstanceDao.createSearchCriteria();
  List<VMInstanceVO> vmInstances=_vmInstanceDao.searchIncludingRemoved(sc,null,false,false);
  long deviceId=1;
  for (  VMInstanceVO vm : vmInstances) {
    SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
    sb.and("instanceId",sb.entity().getInstanceId(),Op.EQ);
    sb.done();
    SearchCriteria<VolumeVO> sc2=sb.create();
    sc2.setParameters("instanceId",vm.getId());
    List<VolumeVO> volumes=_volumeDao.searchIncludingRemoved(sc2,null,false,false);
    deviceId=1;
    for (    VolumeVO vol : volumes) {
      if (vol.getVolumeType() == VolumeType.ROOT) {
        System.out.println("Setting root volume device id to zero, vol: " + vol.getName() + ", instance: "+ vm.getName());
        vol.setDeviceId(0L);
      }
 else       if (vol.getVolumeType() == VolumeType.DATADISK) {
        System.out.println("Setting data volume device id, vol: " + vol.getName() + ", instance: "+ vm.getName()+ ", device id: "+ deviceId);
        vol.setDeviceId(deviceId);
        if (++deviceId == 3)         deviceId++;
      }
 else {
        System.out.println("Unsupported volume type found for volume: " + vol.getName());
      }
      _volumeDao.update(vol.getId(),vol);
    }
  }
  System.out.println("Migrating device_id for volumes done");
}
