{
  System.out.println("Creating cluster for pod " + podName);
  ClusterVO cluster=null;
  SearchBuilder<HostVO> sb=_hostDao.createSearchBuilder();
  sb.and("dc",sb.entity().getDataCenterId(),Op.EQ);
  sb.and("pod",sb.entity().getPodId(),Op.EQ);
  sb.and("type",sb.entity().getType(),Op.EQ);
  sb.done();
  SearchCriteria<HostVO> sc=sb.create();
  sc.setParameters("dc",zoneId);
  sc.setParameters("pod",podId);
  sc.setParameters("type",Host.Type.Routing);
  List<HostVO> hostsInPod=_hostDao.searchAll(sc,null,false,false);
  if (hostsInPod.size() > 0) {
    if (cluster == null) {
      cluster=new ClusterVO(zoneId,podId,String.valueOf(podId));
      cluster=_clusterDao.persist(cluster);
    }
    for (    HostVO host : hostsInPod) {
      host.setClusterId(cluster.getId());
      _hostDao.update(host.getId(),host);
      System.out.println("Join host " + host.getName() + " to auto-formed cluster");
    }
  }
  SearchBuilder<StoragePoolVO> sbPool=_spDao.createSearchBuilder();
  sbPool.and("dc",sbPool.entity().getDataCenterId(),Op.EQ);
  sbPool.and("pod",sbPool.entity().getPodId(),Op.EQ);
  sbPool.and("poolType",sbPool.entity().getPoolType(),Op.IN);
  sbPool.done();
  SearchCriteria<StoragePoolVO> scPool=sbPool.create();
  scPool.setParameters("dc",zoneId);
  scPool.setParameters("pod",podId);
  scPool.setParameters("poolType",StoragePoolType.NetworkFilesystem.toString(),StoragePoolType.IscsiLUN.toString());
  List<StoragePoolVO> sPoolsInPod=_spDao.searchAll(scPool,null,false,false);
  if (sPoolsInPod.size() > 0) {
    if (cluster == null) {
      cluster=new ClusterVO(zoneId,podId,String.valueOf(podId));
      cluster=_clusterDao.persist(cluster);
    }
    for (    StoragePoolVO spool : sPoolsInPod) {
      spool.setClusterId(cluster.getId());
      _spDao.update(spool.getId(),spool);
      System.out.println("Join host " + spool.getName() + " to auto-formed cluster");
    }
  }
}
