{
  System.out.println("Fixup NULL disk_offering_id references in volumes table ...");
  SearchCriteria<DiskOffering21VO> scDiskOffering=_diskOffering21Dao.createSearchCriteria();
  List<DiskOffering21VO> offeringList=_diskOffering21Dao.searchAll(scDiskOffering,new Filter(DiskOffering21VO.class,"diskSize",true,null,null),false,false);
  for (  DiskOffering21VO offering : offeringList) {
    s_logger.info("Disk offering name: " + offering.getName() + ", disk size: "+ offering.getDiskSizeInBytes());
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and("diskOfferingId",sb.entity().getDiskOfferingId(),Op.NULL);
  sb.done();
  SearchCriteria<VolumeVO> sc=sb.create();
  List<VolumeVO> volumes=_volumeDao.searchAll(sc,null,false,false);
  if (volumes.size() > 0) {
    for (    VolumeVO vol : volumes) {
      if (vol.getInstanceId() != null) {
        VMInstanceVO vmInstance=_vmInstanceDao.findById(vol.getInstanceId());
        if (vmInstance.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vol.getInstanceId());
          if (userVm != null) {
            vol.setDiskOfferingId(userVm.getServiceOfferingId());
          }
 else {
            System.out.println("Data integrity could not be fixed up for volume: " + vol.getId() + " because its owner user vm no longer exists");
          }
        }
 else         if (vmInstance.getType() == VirtualMachine.Type.ConsoleProxy) {
          vol.setDiskOfferingId(this._consoleProxyServiceOfferingId);
        }
 else         if (vmInstance.getType() == VirtualMachine.Type.SecondaryStorageVm) {
          vol.setDiskOfferingId(this._secStorageServiceOfferingId);
        }
 else         if (vmInstance.getType() == VirtualMachine.Type.DomainRouter) {
          vol.setDiskOfferingId(this._domRServiceOfferingId);
        }
      }
 else {
        System.out.println("volume: " + vol.getId() + " is standalone, fix disck_offering_id based on volume size");
        boolean found=false;
        for (        DiskOffering21VO do21 : offeringList) {
          if (do21.getType() == Type.Disk && vol.getSize() > do21.getDiskSizeInBytes()) {
            found=true;
            System.out.println("volume: " + vol.getId() + " disck_offering_id is fixed to "+ do21.getId());
            vol.setDiskOfferingId(do21.getId());
            break;
          }
        }
        if (!found) {
          System.out.println("volume: " + vol.getId() + " disck_offering_id is fixed to "+ offeringList.get(offeringList.size() - 1).getId());
          vol.setDiskOfferingId(offeringList.get(offeringList.size() - 1).getId());
        }
      }
      _volumeDao.update(vol.getId(),vol);
    }
  }
  System.out.println("Disk offering fixup is done");
}
