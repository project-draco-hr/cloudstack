@attr(tags=['advanced', 'advancedns', 'ssh', 'selfservice'])
def test_downgradeRvR_to_VR(self):
    'Test downgrade redundant virtual router to virtual router\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.debug(('Network state: %s' % nw_response.state))
    self.assertEqual(nw_response.state, 'Allocated', 'The network should be in allocated state after creation')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in the account: %s' % self.account.name))
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm should be in running state after deployment')
    self.debug(('Listing routers for account: %s' % self.account.name))
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return two routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (MASTER & BACKUP)')
    network_offerings = NetworkOffering.list(self.apiclient, name='DefaultIsolatedNetworkOfferingWithSourceNatService', listall=True)
    self.assertEqual(isinstance(network_offerings, list), True, 'List network offering should not return empty response')
    network_off_vr = network_offerings[0]
    self.debug('Upgrading the network to RVR network offering..')
    try:
        network.update(self.apiclient, networkofferingid=network_off_vr.id)
    except Exception as e:
        self.fail(('Failed to upgrade the network from VR to RVR: %s' % e))
    self.debug(('Listing routers for account: %s' % self.account.name))
    routers = Router.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return only one router')
    self.assertEqual(len(routers), 1, 'Length of the list router should be 1')
    return
