@attr(tags=['advanced_sg', 'sg'])
def test_01_add_ip_same_cidr(self):
    'Test add guest ip range in the existing cidr\n        '
    ip2 = self.increment_cidr()
    test_nw = ip2.network
    test_gateway = (test_nw + 1)
    test_startIp = (test_nw + 2)
    test_endIp = (test_startIp + 5)
    test_startIp2 = (test_endIp + 5)
    test_endIp2 = (test_startIp2 + 5)
    self.services['vlan_ip_range']['startip'] = test_startIp
    self.services['vlan_ip_range']['endip'] = test_endIp
    self.services['vlan_ip_range']['gateway'] = test_gateway
    self.services['vlan_ip_range']['netmask'] = self.netmask
    self.services['vlan_ip_range']['zoneid'] = self.zone.id
    self.services['vlan_ip_range']['podid'] = self.pod.id
    new_vlan = PublicIpRange.create(self.apiclient, self.services['vlan_ip_range'])
    self.debug(('Created new vlan range with startip:%s and endip:%s' % (test_startIp, test_endIp)))
    self.cleanup.append(new_vlan)
    new_vlan_res = new_vlan.list(self.apiclient, new_vlan.id)
    self.verify_vlan_range(new_vlan_res, self.services['vlan_ip_range'])
    self.services['vlan_ip_range']['startip'] = test_startIp2
    self.services['vlan_ip_range']['endip'] = test_endIp2
    new_vlan2 = PublicIpRange.create(self.apiclient, self.services['vlan_ip_range'])
    self.debug(('Created new vlan range with startip:%s and endip:%s' % (test_startIp2, test_endIp2)))
    self.cleanup.append(new_vlan2)
    new_vlan2_res = new_vlan2.list(self.apiclient, new_vlan2.id)
    self.verify_vlan_range(new_vlan2_res, self.services['vlan_ip_range'])
    return
