{
  ComponentContext.initComponentsLifeCycle();
  VirtualRouterProviderVO validElement=new VirtualRouterProviderVO(1,VirtualRouterProviderType.InternalLbVm);
  validElement.setEnabled(true);
  VirtualRouterProviderVO invalidElement=new VirtualRouterProviderVO(1,VirtualRouterProviderType.VirtualRouter);
  VirtualRouterProviderVO notEnabledElement=new VirtualRouterProviderVO(1,VirtualRouterProviderType.InternalLbVm);
  Mockito.when(_vrProviderDao.findByNspIdAndType(validElId,VirtualRouterProviderType.InternalLbVm)).thenReturn(validElement);
  Mockito.when(_vrProviderDao.findByNspIdAndType(invalidElId,VirtualRouterProviderType.InternalLbVm)).thenReturn(invalidElement);
  Mockito.when(_vrProviderDao.findByNspIdAndType(notEnabledElId,VirtualRouterProviderType.InternalLbVm)).thenReturn(notEnabledElement);
  Mockito.when(_vrProviderDao.persist(validElement)).thenReturn(validElement);
  Mockito.when(_vrProviderDao.findByNspIdAndType(validProviderId,VirtualRouterProviderType.InternalLbVm)).thenReturn(validElement);
  PhysicalNetworkServiceProviderVO validProvider=new PhysicalNetworkServiceProviderVO(1,"InternalLoadBalancerElement");
  PhysicalNetworkServiceProviderVO invalidProvider=new PhysicalNetworkServiceProviderVO(1,"Invalid name!");
  Mockito.when(_pNtwkProviderDao.findById(validProviderId)).thenReturn(validProvider);
  Mockito.when(_pNtwkProviderDao.findById(invalidProviderId)).thenReturn(invalidProvider);
  Mockito.when(_vrProviderDao.persist(Mockito.any(VirtualRouterProviderVO.class))).thenReturn(validElement);
  DataCenterVO dc=new DataCenterVO(1L,null,null,null,null,null,null,null,null,null,NetworkType.Advanced,null,null);
  Mockito.when(_configMgr.getZone(Mockito.anyLong())).thenReturn(dc);
}
