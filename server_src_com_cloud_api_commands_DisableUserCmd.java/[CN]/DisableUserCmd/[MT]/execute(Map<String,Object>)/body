{
  Account adminAccount=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  User user=getManagementServer().findUserById(id);
  if (user == null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find user by id");
  }
 else   if (user.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find user by id");
  }
  Account account=getManagementServer().findAccountById(user.getAccountId());
  if ((account != null) && (account.getId().longValue() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"user id : " + id + " is a system user, disabling is not allowed");
  }
  if ((adminAccount != null) && !getManagementServer().isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to disable user " + id + ", permission denied.");
  }
  long jobId=getManagementServer().disableUserAsync(id.longValue());
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for DisableUser comamnd");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("DisableUser command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  return returnValues;
}
