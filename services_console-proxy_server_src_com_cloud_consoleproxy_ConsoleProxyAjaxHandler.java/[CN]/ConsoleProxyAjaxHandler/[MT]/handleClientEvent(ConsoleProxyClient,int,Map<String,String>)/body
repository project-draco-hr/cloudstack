{
  int code=0;
  int x=0, y=0;
  int modifiers=0;
  String str;
switch (event) {
case 1:
case 2:
case 3:
case 8:
    str=queryMap.get("x");
  if (str != null) {
    try {
      x=Integer.parseInt(str);
    }
 catch (    NumberFormatException e) {
      s_logger.warn("Invalid number parameter in query string: " + str);
      throw new IllegalArgumentException(e);
    }
  }
str=queryMap.get("y");
if (str != null) {
try {
  y=Integer.parseInt(str);
}
 catch (NumberFormatException e) {
  s_logger.warn("Invalid number parameter in query string: " + str);
  throw new IllegalArgumentException(e);
}
}
if (event != 1) {
str=queryMap.get("code");
try {
code=Integer.parseInt(str);
}
 catch (NumberFormatException e) {
s_logger.warn("Invalid number parameter in query string: " + str);
throw new IllegalArgumentException(e);
}
str=queryMap.get("modifier");
try {
modifiers=Integer.parseInt(str);
}
 catch (NumberFormatException e) {
s_logger.warn("Invalid number parameter in query string: " + str);
throw new IllegalArgumentException(e);
}
if (s_logger.isTraceEnabled()) s_logger.trace("Handle client mouse event. event: " + event + ", x: "+ x+ ", y: "+ y+ ", button: "+ code+ ", modifier: "+ modifiers);
}
 else {
if (s_logger.isTraceEnabled()) s_logger.trace("Handle client mouse move event. x: " + x + ", y: "+ y);
}
viewer.sendClientMouseEvent(InputEventType.fromEventCode(event),x,y,code,modifiers);
break;
case 4:
case 5:
case 6:
str=queryMap.get("code");
try {
code=Integer.parseInt(str);
}
 catch (NumberFormatException e) {
s_logger.warn("Invalid number parameter in query string: " + str);
throw new IllegalArgumentException(e);
}
str=queryMap.get("modifier");
try {
modifiers=Integer.parseInt(str);
}
 catch (NumberFormatException e) {
s_logger.warn("Invalid number parameter in query string: " + str);
throw new IllegalArgumentException(e);
}
if (s_logger.isDebugEnabled()) s_logger.debug("Handle client keyboard event. event: " + event + ", code: "+ code+ ", modifier: "+ modifiers);
viewer.sendClientRawKeyboardEvent(InputEventType.fromEventCode(event),code,modifiers);
break;
default :
break;
}
}
