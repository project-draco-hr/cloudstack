{
  String deleteSql="DELETE FROM `cloud`.`op_dc_ip_address_alloc` WHERE ip_address = ? AND pod_id = ? AND data_center_id = ?";
  String isPrivateIPAllocatedSelectSql="SELECT * FROM `cloud`.`op_dc_ip_address_alloc` WHERE ip_address = ? AND data_center_id = ? AND pod_id = ?";
  Vector<String> problemIPs=new Vector<String>();
  try {
    Connection conn=txn.getConnection();
    try (PreparedStatement stmt=conn.prepareStatement(deleteSql);PreparedStatement isAllocatedStmt=conn.prepareStatement(isPrivateIPAllocatedSelectSql)){
      while (startIP <= endIP) {
        if (!isPrivateIPAllocated(NetUtils.long2Ip(startIP),podId,zoneId,isAllocatedStmt)) {
          stmt.clearParameters();
          stmt.setString(1,NetUtils.long2Ip(startIP));
          stmt.setLong(2,podId);
          stmt.setLong(3,zoneId);
          stmt.executeUpdate();
        }
 else {
          problemIPs.add(NetUtils.long2Ip(startIP));
        }
        startIP+=1;
      }
    }
 catch (    SQLException e) {
      System.out.println("deletePrivateIPRange. Exception: " + e.getMessage());
      printError("deletePrivateIPRange. Exception: " + e.getMessage());
    }
  }
 catch (  SQLException e) {
    System.out.println("deletePrivateIPRange. Exception: " + e.getMessage());
    printError("deletePrivateIPRange. Exception: " + e.getMessage());
  }
  return problemIPs;
}
