{
  Map<String,List<String>> responseApiNameListMap=new HashMap<String,List<String>>();
  for (  Class<?> cmdClass : cmdClasses) {
    APICommand apiCmdAnnotation=cmdClass.getAnnotation(APICommand.class);
    if (apiCmdAnnotation == null)     apiCmdAnnotation=cmdClass.getSuperclass().getAnnotation(APICommand.class);
    if (apiCmdAnnotation == null || !apiCmdAnnotation.includeInApiDoc() || apiCmdAnnotation.name().isEmpty())     continue;
    String apiName=apiCmdAnnotation.name();
    String responseName=apiCmdAnnotation.responseObject().getName();
    if (!responseName.contains("SuccessResponse")) {
      if (!responseApiNameListMap.containsKey(responseName))       responseApiNameListMap.put(responseName,new ArrayList<String>());
      responseApiNameListMap.get(responseName).add(apiName);
    }
    ApiDiscoveryResponse response=new ApiDiscoveryResponse();
    response.setName(apiName);
    response.setDescription(apiCmdAnnotation.description());
    if (!apiCmdAnnotation.since().isEmpty())     response.setSince(apiCmdAnnotation.since());
    response.setRelated(responseName);
    Field[] responseFields=apiCmdAnnotation.responseObject().getDeclaredFields();
    for (    Field responseField : responseFields) {
      SerializedName serializedName=responseField.getAnnotation(SerializedName.class);
      if (serializedName != null) {
        ApiResponseResponse responseResponse=new ApiResponseResponse();
        responseResponse.setName(serializedName.value());
        Param param=responseField.getAnnotation(Param.class);
        if (param != null)         responseResponse.setDescription(param.description());
        responseResponse.setType(responseField.getType().getSimpleName().toLowerCase());
        response.addApiResponse(responseResponse);
      }
    }
    Set<Field> fields=ReflectUtil.getAllFieldsForClass(cmdClass,new Class<?>[]{BaseCmd.class,BaseAsyncCmd.class,BaseAsyncCreateCmd.class});
    boolean isAsync=ReflectUtil.isCmdClassAsync(cmdClass,new Class<?>[]{BaseAsyncCmd.class,BaseAsyncCreateCmd.class});
    response.setAsync(isAsync);
    for (    Field field : fields) {
      Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
      if (parameterAnnotation != null && parameterAnnotation.expose() && parameterAnnotation.includeInApiDoc()) {
        ApiParameterResponse paramResponse=new ApiParameterResponse();
        paramResponse.setName(parameterAnnotation.name());
        paramResponse.setDescription(parameterAnnotation.description());
        paramResponse.setType(parameterAnnotation.type().toString().toLowerCase());
        paramResponse.setLength(parameterAnnotation.length());
        paramResponse.setRequired(parameterAnnotation.required());
        if (!parameterAnnotation.since().isEmpty())         paramResponse.setSince(parameterAnnotation.since());
        paramResponse.setRelated(parameterAnnotation.entityType()[0].getName());
        response.addParam(paramResponse);
      }
    }
    response.setObjectName("api");
    s_apiNameDiscoveryResponseMap.put(apiName,response);
  }
  for (  String apiName : s_apiNameDiscoveryResponseMap.keySet()) {
    ApiDiscoveryResponse response=s_apiNameDiscoveryResponseMap.get(apiName);
    Set<ApiParameterResponse> processedParams=new HashSet<ApiParameterResponse>();
    for (    ApiParameterResponse param : response.getParams()) {
      if (responseApiNameListMap.containsKey(param.getRelated())) {
        List<String> relatedApis=responseApiNameListMap.get(param.getRelated());
        param.setRelated(StringUtils.join(relatedApis,","));
      }
 else {
        param.setRelated(null);
      }
      processedParams.add(param);
    }
    response.setParams(processedParams);
    if (responseApiNameListMap.containsKey(response.getRelated())) {
      List<String> relatedApis=responseApiNameListMap.get(response.getRelated());
      relatedApis.remove(apiName);
      response.setRelated(StringUtils.join(relatedApis,","));
    }
 else {
      response.setRelated(null);
    }
    s_apiNameDiscoveryResponseMap.put(apiName,response);
  }
}
