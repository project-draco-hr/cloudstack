{
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{"org.apache.cloudstack.api","com.cloud.api"});
  for (  Class<?> cmdClass : cmdClasses) {
    APICommand apiCmdAnnotation=cmdClass.getAnnotation(APICommand.class);
    if (apiCmdAnnotation == null)     apiCmdAnnotation=cmdClass.getSuperclass().getAnnotation(APICommand.class);
    if (apiCmdAnnotation == null || !apiCmdAnnotation.includeInApiDoc() || apiCmdAnnotation.name().isEmpty())     continue;
    String apiName=apiCmdAnnotation.name();
    ApiDiscoveryResponse response=new ApiDiscoveryResponse();
    response.setName(apiName);
    response.setDescription(apiCmdAnnotation.description());
    response.setSince(apiCmdAnnotation.since());
    Field[] fields=ReflectUtil.getAllFieldsForClass(cmdClass,new Class<?>[]{BaseCmd.class,BaseAsyncCmd.class,BaseAsyncCreateCmd.class});
    boolean isAsync=ReflectUtil.isCmdClassAsync(cmdClass,new Class<?>[]{BaseAsyncCmd.class,BaseAsyncCreateCmd.class});
    response.setAsync(isAsync);
    for (    Field field : fields) {
      Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
      if (parameterAnnotation != null && parameterAnnotation.expose() && parameterAnnotation.includeInApiDoc()) {
        ApiParameterResponse paramResponse=new ApiParameterResponse();
        paramResponse.setName(parameterAnnotation.name());
        paramResponse.setDescription(parameterAnnotation.description());
        paramResponse.setType(parameterAnnotation.type().toString());
        paramResponse.setLength(parameterAnnotation.length());
        paramResponse.setRequired(parameterAnnotation.required());
        paramResponse.setSince(parameterAnnotation.since());
        response.addParam(paramResponse);
      }
    }
    response.setObjectName("apis");
    _apiNameDiscoveryResponseMap.put(apiName,response);
  }
}
