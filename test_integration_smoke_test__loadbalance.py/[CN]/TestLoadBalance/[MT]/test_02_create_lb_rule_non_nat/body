@attr(tags=['advanced', 'advancedns', 'smoke'], required_hardware='true')
def test_02_create_lb_rule_non_nat(self):
    'Test to create Load balancing rule with non source NAT'
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], self.non_src_nat_ip.ipaddress.id, accountid=self.account.name)
    self.cleanup.append(lb_rule)
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    lb_rules = list_lb_rules(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_rules), 0, 'Check Load Balancer Rule in its List')
    self.assertEqual(lb_rules[0].id, lb_rule.id, 'Check List Load Balancer Rules returns valid Rule')
    lb_instance_rules = list_lb_instances(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_instance_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_instance_rules), 0, 'Check Load Balancer instances Rule in its List')
    self.assertIn(lb_instance_rules[0].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    self.assertIn(lb_instance_rules[1].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    try:
        unameResults = []
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.debug(('UNAME: %s' % str(unameResults)))
        self.assertIn('Linux', unameResults, 'Check if ssh succeeded for server1')
        self.assertIn('Linux', unameResults, 'Check if ssh succeeded for server2')
        lb_rule.remove(self.apiclient, [self.vm_2])
        self.debug(('SSHing into IP address: %s after removing VM (ID: %s) from LB rule' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_2.id)))
        unameResults[:] = []
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
        self.assertIn('Linux', unameResults, 'Check if ssh succeeded for server1')
        self.debug(('UNAME after removing VM2: %s' % str(unameResults)))
    except Exception as e:
        self.fail(('%s: SSH failed for VM with IP Address: %s' % (e, self.non_src_nat_ip.ipaddress.ipaddress)))
    lb_rule.remove(self.apiclient, [self.vm_1])
    with self.assertRaises(Exception):
        self.debug(('SSHing into IP address: %s after removing VM (ID: %s) from LB rule' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_1.id)))
        self.try_ssh(self.non_src_nat_ip.ipaddress.ipaddress, unameResults)
    return
