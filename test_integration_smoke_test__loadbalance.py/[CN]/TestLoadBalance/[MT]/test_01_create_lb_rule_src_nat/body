@attr(tags=['advanced', 'advancedns', 'smoke', 'needle'])
def test_01_create_lb_rule_src_nat(self):
    'Test to create Load balancing rule with source NAT'
    src_nat_ip_addrs = PublicIPAddress.list(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(src_nat_ip_addrs, list), True, 'Check list response returns a valid list')
    src_nat_ip_addr = src_nat_ip_addrs[0]
    vm_response = VirtualMachine.list(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM returns a valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check Port Forwarding Rule is created')
    for vm in vm_response:
        self.assertEqual(vm.state, 'Running', 'VM state should be Running before creating a NAT rule.')
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], src_nat_ip_addr.id, accountid=self.account.name)
    self.cleanup.append(lb_rule)
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    lb_rules = list_lb_rules(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_rules), 0, 'Check Load Balancer Rule in its List')
    self.assertEqual(lb_rules[0].id, lb_rule.id, 'Check List Load Balancer Rules returns valid Rule')
    lb_instance_rules = list_lb_instances(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_instance_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_instance_rules), 0, 'Check Load Balancer instances Rule in its List')
    self.debug(('lb_instance_rules Ids: %s, %s' % (lb_instance_rules[0].id, lb_instance_rules[1].id)))
    self.debug(('VM ids: %s, %s' % (self.vm_1.id, self.vm_2.id)))
    self.assertIn(lb_instance_rules[0].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    self.assertIn(lb_instance_rules[1].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    hostnames = []
    self.try_ssh(src_nat_ip_addr, hostnames)
    self.try_ssh(src_nat_ip_addr, hostnames)
    self.try_ssh(src_nat_ip_addr, hostnames)
    self.try_ssh(src_nat_ip_addr, hostnames)
    self.try_ssh(src_nat_ip_addr, hostnames)
    self.debug(('Hostnames: %s' % str(hostnames)))
    self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    self.assertIn(self.vm_2.name, hostnames, 'Check if ssh succeeded for server2')
    lb_rule.remove(self.apiclient, [self.vm_2])
    hostnames[:] = []
    try:
        self.debug(('SSHing into IP address: %s after removing VM (ID: %s)' % (src_nat_ip_addr.ipaddress, self.vm_2.id)))
        self.try_ssh(src_nat_ip_addr, hostnames)
        self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    except Exception as e:
        self.fail(('%s: SSH failed for VM with IP Address: %s' % (e, src_nat_ip_addr.ipaddress)))
    lb_rule.remove(self.apiclient, [self.vm_1])
    with self.assertRaises(Exception):
        self.debug('Removed all VMs, trying to SSH')
        self.try_ssh(src_nat_ip_addr, hostnames)
    return
