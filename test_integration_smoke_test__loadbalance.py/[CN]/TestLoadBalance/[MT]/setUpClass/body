@classmethod
def setUpClass(cls):
    testClient = super(TestLoadBalance, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['server']['zoneid'] = cls.zone.id
    cls.account = Account.create(cls.apiclient, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings'])
    cls.vm_1 = VirtualMachine.create(cls.apiclient, cls.services['server'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.vm_2 = VirtualMachine.create(cls.apiclient, cls.services['server'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.vm_3 = VirtualMachine.create(cls.apiclient, cls.services['server'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
    cls.non_src_nat_ip = PublicIPAddress.create(cls.apiclient, cls.account.name, cls.zone.id, cls.account.domainid, cls.services['server'])
    cls.fw_rule = FireWallRule.create(cls.apiclient, ipaddressid=cls.non_src_nat_ip.ipaddress.id, protocol=cls.services['lbrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=cls.services['lbrule']['publicport'], endport=cls.services['lbrule']['publicport'])
    cls._cleanup = [cls.account, cls.service_offering]
