@attr(tags=['advanced', 'advancedns', 'smoke'])
def test_assign_and_removal_lb(self):
    'Test for assign & removing load balancing rule'
    vm_response = VirtualMachine.list(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM returns a valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check Port Forwarding Rule is created')
    for vm in vm_response:
        self.assertEqual(vm.state, 'Running', 'VM state should be Running before creating a NAT rule.')
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], self.non_src_nat_ip.ipaddress.id, self.account.name)
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    hostnames = []
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.debug(('Hostnames: %s' % str(hostnames)))
    self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    self.assertIn(self.vm_2.name, hostnames, 'Check if ssh succeeded for server2')
    lb_rule.remove(self.apiclient, [self.vm_2])
    hostnames[:] = []
    try:
        self.debug(('SSHing again into IP address: %s with VM (ID: %s) added to LB rule' % (self.non_src_nat_ip.ipaddress, self.vm_1.id)))
        self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
        self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.non_src_nat_ip.ipaddress))
    lb_rule.assign(self.apiclient, [self.vm_3])
    hostnames[:] = []
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.try_ssh(self.non_src_nat_ip.ipaddress, hostnames)
    self.debug(('Hostnames: %s' % str(hostnames)))
    self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    self.assertIn(self.vm_3.name, hostnames, 'Check if ssh succeeded for server3')
    return
