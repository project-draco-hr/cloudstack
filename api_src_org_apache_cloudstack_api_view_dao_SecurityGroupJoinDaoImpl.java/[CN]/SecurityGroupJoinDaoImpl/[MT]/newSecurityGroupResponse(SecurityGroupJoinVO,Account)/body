{
  SecurityGroupResponse sgResponse=new SecurityGroupResponse();
  sgResponse.setId(vsg.getUuid());
  sgResponse.setName(vsg.getName());
  sgResponse.setDescription(vsg.getDescription());
  ViewResponseHelper.populateOwner(sgResponse,vsg);
  Long rule_id=vsg.getRuleId();
  if (rule_id != null && rule_id.longValue() > 0) {
    SecurityGroupRuleResponse ruleData=new SecurityGroupRuleResponse();
    ruleData.setRuleId(vsg.getRuleUuid());
    ruleData.setProtocol(vsg.getRuleProtocol());
    if ("icmp".equalsIgnoreCase(vsg.getRuleProtocol())) {
      ruleData.setIcmpType(vsg.getRuleStartPort());
      ruleData.setIcmpCode(vsg.getRuleEndPort());
    }
 else {
      ruleData.setStartPort(vsg.getRuleStartPort());
      ruleData.setEndPort(vsg.getRuleEndPort());
    }
    if (vsg.getRuleAllowedNetworkId() != null) {
      List<SecurityGroupJoinVO> sgs=this.searchByIds(vsg.getRuleAllowedNetworkId());
      if (sgs != null && sgs.size() > 0) {
        SecurityGroupJoinVO sg=sgs.get(0);
        ruleData.setSecurityGroupName(sg.getName());
        ruleData.setAccountName(sg.getAccountName());
      }
    }
 else {
      ruleData.setCidr(vsg.getRuleAllowedSourceIpCidr());
    }
    if (vsg.getRuleType() == SecurityRuleType.IngressRule) {
      ruleData.setObjectName("ingressrule");
      sgResponse.addSecurityGroupIngressRule(ruleData);
    }
 else {
      ruleData.setObjectName("egressrule");
      sgResponse.addSecurityGroupEgressRule(ruleData);
    }
  }
  Long tag_id=vsg.getTagId();
  if (tag_id != null && tag_id.longValue() > 0) {
    ResourceTagJoinVO vtag=DBViewUtils.findResourceTagViewById(tag_id);
    if (vtag != null) {
      sgResponse.addTag(DBViewUtils.newResourceTagResponse(vtag,false));
    }
  }
  sgResponse.setObjectName("securitygroup");
  return sgResponse;
}
