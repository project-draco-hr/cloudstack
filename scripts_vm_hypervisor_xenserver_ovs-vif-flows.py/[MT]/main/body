def main(command, vif_raw):
    if (command not in ('online', 'offline')):
        return
    (vif_name, dom_id, vif_index) = vif_raw.split('-')
    this_vif = ('%s%s.%s' % (vif_name, dom_id, vif_index))
    net_stack = pluginlib.do_cmd(['cat', '/etc/xensource/network.conf'])
    if (net_stack.lower() == 'bridge'):
        if (command == 'offline'):
            clear_rules(this_vif)
        return
    bridge = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'iface-to-br', this_vif])
    xs_nw_uuid = pluginlib.do_cmd([pluginlib.XE_PATH, 'network-list', ('bridge=%s' % bridge), '--minimal'])
    ovs_tunnel_network = pluginlib.is_regular_tunnel_network(xs_nw_uuid)
    if (ovs_tunnel_network == 'True'):
        vlan = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'br-to-vlan', bridge])
        if (vlan != '0'):
            bridge = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'br-to-parent', bridge])
        vsctl_output = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'list-ports', bridge])
        vifs = vsctl_output.split('\n')
        vif_ofports = []
        vif_other_ofports = []
        for vif in vifs:
            vif_ofport = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'get', 'Interface', vif, 'ofport'])
            if (this_vif == vif):
                this_vif_ofport = vif_ofport
            if vif.startswith('vif'):
                vif_ofports.append(vif_ofport)
        if (command == 'offline'):
            vif_other_ofports = copy.copy(vif_ofports)
            vif_other_ofports.remove(this_vif_ofport)
            clear_flows(bridge, this_vif_ofport, vif_other_ofports)
        if (command == 'online'):
            apply_flows(bridge, this_vif_ofport, vif_ofports)
    ovs_vpc_distributed_vr_network = pluginlib.is_vpc_network_with_distributed_routing(xs_nw_uuid)
    if (ovs_vpc_distributed_vr_network == 'True'):
        vlan = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'br-to-vlan', bridge])
        if (vlan != '0'):
            bridge = pluginlib.do_cmd([pluginlib.VSCTL_PATH, 'br-to-parent', bridge])
        vif_network_id = pluginlib.get_network_id_for_vif(this_vif)
        pluginlib.update_flooding_rules_on_port_plug_unplug(bridge, this_vif, command, vif_network_id)
    return
