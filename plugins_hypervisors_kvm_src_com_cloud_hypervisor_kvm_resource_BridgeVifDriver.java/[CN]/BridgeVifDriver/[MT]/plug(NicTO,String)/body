{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("nic=" + nic);
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vlanId=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    URI broadcastUri=nic.getBroadcastUri();
    vlanId=broadcastUri.getHost();
  }
  if (nic.getType() == Networks.TrafficType.Guest) {
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase("untagged")) {
      String brName=createVlanBr(vlanId,_pifs.get("private"));
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType));
    }
 else {
      intf.defBridgeNet(_bridges.get("guest"),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get("linklocal"),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase("untagged")) {
      String brName=createVlanBr(vlanId,_pifs.get("public"));
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType));
    }
 else {
      intf.defBridgeNet(_bridges.get("public"),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get("private"),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get("private") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType));
  }
  return intf;
}
