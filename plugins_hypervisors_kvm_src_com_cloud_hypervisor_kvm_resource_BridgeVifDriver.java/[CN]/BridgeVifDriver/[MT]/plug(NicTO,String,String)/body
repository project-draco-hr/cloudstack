{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("nic=" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug("custom nic adapter=" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException("Nicira NVP Logicalswitches are not supported by the BridgeVifDriver");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase("untagged")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug("creating a vNet dev and bridge for guest traffic per traffic label " + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,"private",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get("guest"),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get("linklocal"),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase("untagged")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug("creating a vNet dev and bridge for public traffic per traffic label " + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,"public",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get("public"),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get("private"),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get("private") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}
