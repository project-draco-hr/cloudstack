{
  _selector=Selector.open();
  Task task=null;
  try {
    _clientConnection=SocketChannel.open();
    s_logger.info("Connecting to " + _host + ":"+ _port);
    final InetSocketAddress peerAddr=new InetSocketAddress(_host,_port);
    _clientConnection.connect(peerAddr);
    _clientConnection.configureBlocking(false);
    final SSLContext sslContext=Link.initSSLContext(true);
    SSLEngine sslEngine=sslContext.createSSLEngine(_host,_port);
    sslEngine.setUseClientMode(true);
    sslEngine.setEnabledProtocols(SSLUtils.getSupportedProtocols(sslEngine.getEnabledProtocols()));
    sslEngine.beginHandshake();
    if (!Link.doHandshake(_clientConnection,sslEngine,true)) {
      s_logger.error("SSL Handshake failed while connecting to host: " + _host + " port: "+ _port);
      _selector.close();
      throw new IOException("SSL Handshake failed while connecting to host: " + _host + " port: "+ _port);
    }
    s_logger.info("SSL: Handshake done");
    s_logger.info("Connected to " + _host + ":"+ _port);
    final Link link=new Link(peerAddr,this);
    link.setSSLEngine(sslEngine);
    final SelectionKey key=_clientConnection.register(_selector,SelectionKey.OP_READ);
    link.setKey(key);
    key.attach(link);
    task=_factory.create(Task.Type.CONNECT,link,null);
  }
 catch (  final GeneralSecurityException e) {
    _selector.close();
    throw new IOException("Failed to initialise security",e);
  }
catch (  final IOException e) {
    _selector.close();
    throw e;
  }
  _executor.submit(task);
}
