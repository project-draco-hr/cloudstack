{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long volumeId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long deviceId=(Long)params.get(BaseCmd.Properties.DEVICE_ID.getName());
  Long instanceId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  VolumeVO volume=null;
  if ((volumeId == null && (deviceId == null && instanceId == null)) || (volumeId != null && (deviceId != null || instanceId != null)) || (volumeId == null && (deviceId == null || instanceId == null))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please provide either a volume id, or a tuple(device id, instance id)");
  }
  if (volumeId != null) {
    deviceId=instanceId=Long.valueOf("0");
  }
 else {
    volumeId=Long.valueOf("0");
    ;
  }
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  if (volumeId != 0) {
    volume=getManagementServer().findVolumeById(volumeId);
    if (volume == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId);
  }
 else {
    volume=getManagementServer().findVolumeByInstanceAndDeviceId(instanceId,deviceId);
    if (volume == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId())     throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId + " for account: "+ account.getAccountName());
  }
 else   if (account != null) {
    if (!getManagementServer().isChildDomain(account.getDomainId(),volume.getDomainId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to detach volume with ID: " + volumeId + ", permission denied.");
    }
  }
  try {
    long jobId=getManagementServer().detachVolumeFromVMAsync(volumeId,deviceId,instanceId);
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for DetachVolume comamnd");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("DetachVolume command has been accepted, job id: " + jobId);
    }
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    return returnValues;
  }
 catch (  Exception ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to detach volume: " + ex.getMessage());
  }
}
