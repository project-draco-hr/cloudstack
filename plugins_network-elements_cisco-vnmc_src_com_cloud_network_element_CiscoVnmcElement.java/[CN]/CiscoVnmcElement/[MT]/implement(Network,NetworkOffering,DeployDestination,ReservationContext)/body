{
  final DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (zone.getNetworkType() == NetworkType.Basic) {
    s_logger.debug("Not handling network implement in zone of type " + NetworkType.Basic);
    return false;
  }
  if (!canHandle(network)) {
    return false;
  }
  final List<CiscoVnmcControllerVO> devices=_ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId());
  if (devices.isEmpty()) {
    s_logger.error("No Cisco Vnmc device on network " + network.getName());
    return false;
  }
  List<CiscoAsa1000vDeviceVO> asaList=_ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId());
  if (asaList.isEmpty()) {
    s_logger.debug("No Cisco ASA 1000v device on network " + network.getName());
    return false;
  }
  NetworkAsa1000vMapVO asaForNetwork=_networkAsa1000vMapDao.findByNetworkId(network.getId());
  if (asaForNetwork != null) {
    s_logger.debug("Cisco ASA 1000v device already associated with network " + network.getName());
    return true;
  }
  if (!_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.SourceNat,Provider.CiscoVnmc)) {
    s_logger.error("SourceNat service is not provided by Cisco Vnmc device on network " + network.getName());
    return false;
  }
  try {
    Transaction.execute(new TransactionCallbackWithExceptionNoReturn<Exception>(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status) throws InsufficientAddressCapacityException, ResourceUnavailableException {
        CiscoAsa1000vDevice assignedAsa=assignAsa1000vToNetwork(network);
        if (assignedAsa == null) {
          s_logger.error("Unable to assign ASA 1000v device to network " + network.getName());
          throw new CloudRuntimeException("Unable to assign ASA 1000v device to network " + network.getName());
        }
        ClusterVO asaCluster=_clusterDao.findById(assignedAsa.getClusterId());
        ClusterVSMMapVO clusterVsmMap=_clusterVsmMapDao.findByClusterId(assignedAsa.getClusterId());
        if (clusterVsmMap == null) {
          s_logger.error("Vmware cluster " + asaCluster.getName() + " has no Cisco Nexus VSM device associated with it");
          throw new CloudRuntimeException("Vmware cluster " + asaCluster.getName() + " has no Cisco Nexus VSM device associated with it");
        }
        CiscoNexusVSMDeviceVO vsmDevice=_vsmDeviceDao.findById(clusterVsmMap.getVsmId());
        if (vsmDevice == null) {
          s_logger.error("Unable to load details of Cisco Nexus VSM device associated with cluster " + asaCluster.getName());
          throw new CloudRuntimeException("Unable to load details of Cisco Nexus VSM device associated with cluster " + asaCluster.getName());
        }
        CiscoVnmcControllerVO ciscoVnmcDevice=devices.get(0);
        HostVO ciscoVnmcHost=_hostDao.findById(ciscoVnmcDevice.getHostId());
        _hostDao.loadDetails(ciscoVnmcHost);
        Account owner=context.getAccount();
        PublicIp sourceNatIp=_ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner,network);
        long vlanId=Long.parseLong(BroadcastDomainType.getValue(network.getBroadcastUri()));
        List<VlanVO> vlanVOList=_vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId());
        List<String> publicGateways=new ArrayList<String>();
        for (        VlanVO vlanVO : vlanVOList) {
          publicGateways.add(vlanVO.getVlanGateway());
        }
        IpAddress outsideIp=null;
        List<IPAddressVO> publicIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
        for (        IPAddressVO ip : publicIps) {
          if (!ip.isSourceNat()) {
            outsideIp=ip;
            break;
          }
        }
        if (outsideIp == null) {
          try {
            Account caller=CallContext.current().getCallingAccount();
            long callerUserId=CallContext.current().getCallingUserId();
            outsideIp=_ipAddrMgr.allocateIp(owner,false,caller,callerUserId,zone);
          }
 catch (          ResourceAllocationException e) {
            s_logger.error("Unable to allocate additional public Ip address. Exception details " + e);
            throw new CloudRuntimeException("Unable to allocate additional public Ip address. Exception details " + e);
          }
          try {
            outsideIp=_ipAddrMgr.associateIPToGuestNetwork(outsideIp.getId(),network.getId(),true);
          }
 catch (          ResourceAllocationException e) {
            s_logger.error("Unable to assign allocated additional public Ip " + outsideIp.getAddress().addr() + " to network with vlan "+ vlanId+ ". Exception details "+ e);
            throw new CloudRuntimeException("Unable to assign allocated additional public Ip " + outsideIp.getAddress().addr() + " to network with vlan "+ vlanId+ ". Exception details "+ e);
          }
        }
        String gatewayNetmask=NetUtils.getCidrNetmask(network.getCidr());
        if (!createLogicalEdgeFirewall(vlanId,network.getGateway(),gatewayNetmask,outsideIp.getAddress().addr(),sourceNatIp.getNetmask(),publicGateways,ciscoVnmcHost.getId())) {
          s_logger.error("Failed to create logical edge firewall in Cisco VNMC device for network " + network.getName());
          throw new CloudRuntimeException("Failed to create logical edge firewall in Cisco VNMC device for network " + network.getName());
        }
        if (!configureNexusVsmForAsa(vlanId,network.getGateway(),vsmDevice.getUserName(),vsmDevice.getPassword(),vsmDevice.getipaddr(),assignedAsa.getInPortProfile(),ciscoVnmcHost.getId())) {
          s_logger.error("Failed to configure Cisco Nexus VSM " + vsmDevice.getipaddr() + " for ASA device for network "+ network.getName());
          throw new CloudRuntimeException("Failed to configure Cisco Nexus VSM " + vsmDevice.getipaddr() + " for ASA device for network "+ network.getName());
        }
        if (!configureSourceNat(vlanId,network.getCidr(),sourceNatIp,ciscoVnmcHost.getId())) {
          s_logger.error("Failed to configure source NAT in Cisco VNMC device for network " + network.getName());
          throw new CloudRuntimeException("Failed to configure source NAT in Cisco VNMC device for network " + network.getName());
        }
        if (!associateAsaWithLogicalEdgeFirewall(vlanId,assignedAsa.getManagementIp(),ciscoVnmcHost.getId())) {
          s_logger.error("Failed to associate Cisco ASA 1000v (" + assignedAsa.getManagementIp() + ") with logical edge firewall in VNMC for network "+ network.getName());
          throw new CloudRuntimeException("Failed to associate Cisco ASA 1000v (" + assignedAsa.getManagementIp() + ") with logical edge firewall in VNMC for network "+ network.getName());
        }
      }
    }
);
  }
 catch (  CloudRuntimeException e) {
    s_logger.error("CiscoVnmcElement failed",e);
    return false;
  }
catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,InsufficientAddressCapacityException.class);
    ExceptionUtil.rethrow(e,ResourceUnavailableException.class);
    throw new IllegalStateException(e);
  }
  return true;
}
