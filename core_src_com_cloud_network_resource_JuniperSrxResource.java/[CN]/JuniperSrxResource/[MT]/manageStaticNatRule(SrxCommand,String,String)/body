{
  String ruleName=genStaticNatRuleName(publicIp,privateIp);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.STATIC_NAT_RULE_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
return sendRequestAndCheckResponse(command,xml,"name",ruleName);
case ADD:
if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS,publicIp,privateIp)) {
return true;
}
xml=SrxXml.STATIC_NAT_RULE_ADD.getXml();
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
xml=replaceXmlValue(xml,"original-ip",publicIp);
xml=replaceXmlValue(xml,"translated-ip",privateIp);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to add static NAT rule from public IP " + publicIp + " to private IP "+ privateIp);
}
 else {
return true;
}
case DELETE:
if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS,publicIp,privateIp)) {
return true;
}
xml=SrxXml.STATIC_NAT_RULE_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,"rule-set",_publicZone);
xml=replaceXmlValue(xml,"from-zone",_publicZone);
xml=replaceXmlValue(xml,"rule-name",ruleName);
if (!sendRequestAndCheckResponse(command,xml,"name",ruleName)) {
throw new ExecutionException("Failed to delete static NAT rule from public IP " + publicIp + " to private IP "+ privateIp);
}
 else {
return true;
}
default :
throw new ExecutionException("Unrecognized command.");
}
}
