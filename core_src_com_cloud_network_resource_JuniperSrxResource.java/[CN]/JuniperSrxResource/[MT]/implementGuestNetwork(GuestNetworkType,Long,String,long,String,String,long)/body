{
  privateGateway=privateGateway + "/" + privateCidrNumber;
  privateSubnet=privateSubnet + "/" + privateCidrNumber;
  managePrivateInterface(SrxCommand.ADD,!type.equals(GuestNetworkType.SOURCE_NAT),privateVlanTag,privateGateway);
  manageZoneInterface(SrxCommand.ADD,privateVlanTag);
  if (type.equals(GuestNetworkType.SOURCE_NAT)) {
    manageSourceNatPool(SrxCommand.ADD,publicIp);
    manageSourceNatRule(SrxCommand.ADD,publicIp,privateSubnet);
    manageProxyArp(SrxCommand.ADD,publicVlanTag,publicIp);
    manageUsageFilter(SrxCommand.ADD,UsageFilter.IP_OUTPUT,privateSubnet,null,genIpFilterTermName(publicIp));
    manageUsageFilter(SrxCommand.ADD,UsageFilter.IP_INPUT,publicIp,null,genIpFilterTermName(publicIp));
  }
 else   if (type.equals(GuestNetworkType.INTERFACE_NAT)) {
    manageUsageFilter(SrxCommand.ADD,UsageFilter.VLAN_OUTPUT,null,privateVlanTag,null);
    manageUsageFilter(SrxCommand.ADD,UsageFilter.VLAN_INPUT,null,privateVlanTag,null);
  }
  String msg="Implemented guest network with type " + type + ". Guest VLAN tag: "+ privateVlanTag+ ", guest gateway: "+ privateGateway;
  msg+=type.equals(GuestNetworkType.SOURCE_NAT) ? ", source NAT IP: " + publicIp : "";
  s_logger.debug(msg);
}
