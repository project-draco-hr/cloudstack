{
  String fromZone=_publicZone;
  String toZone=_privateZone;
  String securityPolicyName;
  String addressBookEntryName;
  if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
    securityPolicyName=ipsecVpnName;
    addressBookEntryName=ipsecVpnName;
  }
 else {
    securityPolicyName=genSecurityPolicyName(type,accountId,username,fromZone,toZone,privateIp);
    addressBookEntryName=genAddressBookEntryName(privateIp);
  }
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,"from-zone",fromZone);
xml=replaceXmlValue(xml,"to-zone",toZone);
xml=replaceXmlValue(xml,"policy-name",securityPolicyName);
return sendRequestAndCheckResponse(command,xml,"name",securityPolicyName);
case CHECK_IF_IN_USE:
List<String[]> rulesToCheck=null;
if (type.equals(SecurityPolicyType.STATIC_NAT)) {
rulesToCheck=getStaticNatRules(RuleMatchCondition.ALL,null,null);
}
 else if (type.equals(SecurityPolicyType.DESTINATION_NAT)) {
rulesToCheck=getDestNatRules(RuleMatchCondition.ALL,null,null,null,null);
}
 else {
return false;
}
for (String[] rule : rulesToCheck) {
String rulePrivateIp=rule[1];
if (privateIp.equals(rulePrivateIp)) {
return true;
}
}
return false;
case ADD:
if (!manageAddressBookEntry(SrxCommand.CHECK_IF_EXISTS,toZone,privateIp,ipsecVpnName)) {
throw new ExecutionException("No address book entry for policy: " + securityPolicyName);
}
xml=SrxXml.SECURITY_POLICY_ADD.getXml();
xml=replaceXmlValue(xml,"from-zone",fromZone);
xml=replaceXmlValue(xml,"to-zone",toZone);
xml=replaceXmlValue(xml,"policy-name",securityPolicyName);
xml=replaceXmlValue(xml,"src-address","any");
xml=replaceXmlValue(xml,"dest-address",addressBookEntryName);
if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
xml=replaceXmlValue(xml,"tunnel","<tunnel><ipsec-vpn>" + ipsecVpnName + "</ipsec-vpn></tunnel>");
}
 else {
xml=replaceXmlValue(xml,"tunnel","");
}
String applications;
if (applicationNames == null) {
applications="<application>any</application>";
}
 else {
applications="";
for (String applicationName : applicationNames) {
applications+="<application>" + applicationName + "</application>";
}
}
xml=replaceXmlValue(xml,"applications",applications);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to add security policy for privateIp " + privateIp + " and applications "+ applicationNames);
}
 else {
return true;
}
case DELETE:
if (!manageSecurityPolicy(type,SrxCommand.CHECK_IF_EXISTS,null,null,privateIp,applicationNames,ipsecVpnName)) {
return true;
}
if (manageSecurityPolicy(type,SrxCommand.CHECK_IF_IN_USE,null,null,privateIp,applicationNames,ipsecVpnName)) {
return true;
}
xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,"from-zone",fromZone);
xml=replaceXmlValue(xml,"to-zone",toZone);
xml=replaceXmlValue(xml,"policy-name",securityPolicyName);
boolean success=sendRequestAndCheckResponse(command,xml);
if (success) {
xml=SrxXml.SECURITY_POLICY_GETALL.getXml();
xml=replaceXmlValue(xml,"from-zone",fromZone);
xml=replaceXmlValue(xml,"to-zone",toZone);
String getAllResponseXml=sendRequest(xml);
if (getAllResponseXml == null) {
throw new ExecutionException("Deleted security policy, but failed to delete security policy group.");
}
if (!getAllResponseXml.contains(fromZone) || !getAllResponseXml.contains(toZone)) {
return true;
}
 else if (!getAllResponseXml.contains("match") && !getAllResponseXml.contains("then")) {
xml=SrxXml.SECURITY_POLICY_GROUP.getXml();
xml=replaceXmlValue(xml,"from-zone",fromZone);
xml=replaceXmlValue(xml,"to-zone",toZone);
xml=setDelete(xml,true);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Deleted security policy, but failed to delete security policy group.");
}
 else {
return true;
}
}
 else {
return true;
}
}
 else {
throw new ExecutionException("Failed to delete security policy for privateIp " + privateIp + " and applications "+ applicationNames);
}
default :
s_logger.debug("Unrecognized command.");
return false;
}
}
