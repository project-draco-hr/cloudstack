{
  try {
    String socOpenException="Failed to open a connection for Usage data.";
    String socCloseException="Unable to close connection for Usage data.";
    if (!openUsageSocket()) {
      throw new ExecutionException(socOpenException);
    }
    ExternalNetworkResourceUsageAnswer answer=new ExternalNetworkResourceUsageAnswer(cmd);
    String xml=SrxXml.FIREWALL_FILTER_BYTES_GETALL.getXml();
    String rawUsageData=sendUsageRequest(xml);
    Document doc=getDocument(rawUsageData);
    NodeList counters=doc.getElementsByTagName("counter");
    for (int i=0; i < counters.getLength(); i++) {
      Node n=counters.item(i);
      if (n.getNodeName().equals("counter")) {
        NodeList counterInfoList=n.getChildNodes();
        String counterName=null;
        long byteCount=0;
        for (int j=0; j < counterInfoList.getLength(); j++) {
          Node counterInfo=counterInfoList.item(j);
          if (counterInfo.getNodeName().equals("counter-name")) {
            counterName=counterInfo.getFirstChild().getNodeValue();
          }
 else           if (counterInfo.getNodeName().equals("byte-count")) {
            try {
              byteCount=Long.parseLong(counterInfo.getFirstChild().getNodeValue());
            }
 catch (            Exception e) {
              s_logger.debug(e);
              byteCount=0;
            }
          }
        }
        if (byteCount >= 0) {
          updateUsageAnswer(answer,counterName,byteCount);
        }
      }
    }
    if (!closeUsageSocket()) {
      throw new ExecutionException(socCloseException);
    }
    return answer;
  }
 catch (  Exception e) {
    closeUsageSocket();
    throw new ExecutionException(e.getMessage());
  }
}
