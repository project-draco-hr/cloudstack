{
  String publicInterface=genPublicInterface(publicVlanTag);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.PROXY_ARP_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,"public-interface-name",publicInterface);
xml=replaceXmlValue(xml,"public-ip-address",publicIp);
return sendRequestAndCheckResponse(command,xml,"name",publicIp + "/32");
case CHECK_IF_IN_USE:
List<String[]> staticAndDestNatRules=getAllStaticAndDestNatRules();
for (String[] rule : staticAndDestNatRules) {
String rulePublicIp=rule[0];
if (publicIp.equals(rulePublicIp)) {
return true;
}
}
return false;
case ADD:
if (manageProxyArp(SrxCommand.CHECK_IF_EXISTS,publicVlanTag,publicIp)) {
return true;
}
xml=SrxXml.PROXY_ARP_ADD.getXml();
xml=replaceXmlValue(xml,"public-interface-name",publicInterface);
xml=replaceXmlValue(xml,"public-ip-address",publicIp);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException("Failed to add proxy ARP entry for public IP " + publicIp);
}
 else {
return true;
}
case DELETE:
if (!manageProxyArp(SrxCommand.CHECK_IF_EXISTS,publicVlanTag,publicIp)) {
return true;
}
if (manageProxyArp(SrxCommand.CHECK_IF_IN_USE,publicVlanTag,publicIp)) {
return true;
}
xml=SrxXml.PROXY_ARP_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,"public-interface-name",publicInterface);
xml=replaceXmlValue(xml,"public-ip-address",publicIp);
if (!sendRequestAndCheckResponse(command,xml,"name",publicIp)) {
throw new ExecutionException("Failed to delete proxy ARP entry for public IP " + publicIp);
}
 else {
return true;
}
default :
s_logger.debug("Unrecognized command.");
return false;
}
}
