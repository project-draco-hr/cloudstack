{
  return new ManagedContextRunnable(){
    @Override protected void runInContext(){
      GlobalLock scanLock=GlobalLock.getInternLock("AsyncJobManagerGC");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    public void reallyRun(){
      try {
        logger.info("Begin cleanup expired async-jobs");
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(JobCancelThresholdMinutes.value() * 60000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            try {
              if (item.getContentType().equalsIgnoreCase(SyncQueueItem.AsyncJobContentType)) {
                logger.info("Remove Job-" + item.getContentId() + " from Queue-"+ item.getId()+ " since it has been blocked for too long");
                completeAsyncJob(item.getContentId(),JobInfo.Status.FAILED,0,"Job is cancelled as it has been blocking others for too long");
                _jobMonitor.unregisterByJobId(item.getContentId());
              }
              _queueMgr.purgeItem(item.getId());
            }
 catch (            Throwable e) {
              logger.error("Unexpected exception when trying to remove job from sync queue, ",e);
            }
          }
        }
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - JobExpireMinutes.value() * 60000);
        List<AsyncJobVO> unfinishedJobs=_jobDao.getExpiredUnfinishedJobs(cutTime,100);
        for (        AsyncJobVO job : unfinishedJobs) {
          try {
            logger.info("Expunging unfinished job-" + job.getId());
            _jobMonitor.unregisterByJobId(job.getId());
            expungeAsyncJob(job);
          }
 catch (          Throwable e) {
            logger.error("Unexpected exception when trying to expunge job-" + job.getId(),e);
          }
        }
        List<AsyncJobVO> completedJobs=_jobDao.getExpiredCompletedJobs(cutTime,100);
        for (        AsyncJobVO job : completedJobs) {
          try {
            logger.info("Expunging completed job-" + job.getId());
            expungeAsyncJob(job);
          }
 catch (          Throwable e) {
            logger.error("Unexpected exception when trying to expunge job-" + job.getId(),e);
          }
        }
        logger.info("End cleanup expired async-jobs");
      }
 catch (      Throwable e) {
        logger.error("Unexpected exception when trying to execute queue item, ",e);
      }
    }
  }
;
}
