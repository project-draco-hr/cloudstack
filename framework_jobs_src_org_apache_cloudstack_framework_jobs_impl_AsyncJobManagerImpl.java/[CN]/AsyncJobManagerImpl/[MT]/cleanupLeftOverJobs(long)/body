{
  try {
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        _queueMgr.cleanupActiveQueueItems(msid,true);
        List<AsyncJobVO> jobs=_jobDao.getResetJobs(msid);
        for (        AsyncJobVO job : jobs) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Cancel left-over job-" + job.getId());
          }
          job.setStatus(JobInfo.Status.FAILED);
          job.setResultCode(ApiErrorCode.INTERNAL_ERROR.getHttpCode());
          job.setResult("job cancelled because of management server restart or shutdown");
          _jobDao.update(job.getId(),job);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Purge queue item for cancelled job-" + job.getId());
          }
          _queueMgr.purgeAsyncJobQueueItemId(job.getId());
        }
      }
    }
);
  }
 catch (  Throwable e) {
    s_logger.warn("Unexpected exception in cleaning up left over jobs for mamagement server node " + msid,e);
  }
}
