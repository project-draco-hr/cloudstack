{
  try {
    final File dbPropsFile=PropertiesUtil.findConfigFile("db.properties");
    final Properties dbProps=new Properties();
    dbProps.load(new FileInputStream(dbPropsFile));
    final int cloudMaxActive=Integer.parseInt(dbProps.getProperty("db.cloud.maxActive"));
    int poolSize=(cloudMaxActive * 2) / 3;
    s_logger.info("Start AsyncJobManager thread pool in size " + poolSize);
    _executor=Executors.newFixedThreadPool(poolSize,new NamedThreadFactory(AsyncJobManager.JOB_POOL_THREAD_PREFIX));
  }
 catch (  final Exception e) {
    throw new ConfigurationException("Unable to load db.properties to configure AsyncJobManagerImpl");
  }
  JoinJobSearch=_joinMapDao.createSearchBuilder(Long.class);
  JoinJobSearch.and(JoinJobSearch.entity().getJoinJobId(),Op.EQ,"joinJobId");
  JoinJobSearch.selectFields(JoinJobSearch.entity().getJobId());
  JoinJobSearch.done();
  JoinJobTimeSearch=_joinMapDao.createSearchBuilder(Long.class);
  JoinJobTimeSearch.and(JoinJobTimeSearch.entity().getNextWakeupTime(),Op.LT,"beginTime");
  JoinJobTimeSearch.and(JoinJobTimeSearch.entity().getExpiration(),Op.GT,"endTime");
  JoinJobTimeSearch.selectFields(JoinJobTimeSearch.entity().getJobId()).done();
  JobIdsSearch=_jobDao.createSearchBuilder();
  JobIdsSearch.and(JobIdsSearch.entity().getId(),Op.IN,"ids").done();
  QueueJobIdsSearch=_queueItemDao.createSearchBuilder();
  QueueJobIdsSearch.and(QueueJobIdsSearch.entity().getContentId(),Op.IN,"contentIds").done();
  JoinJobIdsSearch=_joinMapDao.createSearchBuilder(Long.class);
  JoinJobIdsSearch.selectFields(JoinJobIdsSearch.entity().getJobId());
  JoinJobIdsSearch.and(JoinJobIdsSearch.entity().getJoinJobId(),Op.EQ,"joinJobId");
  JoinJobIdsSearch.and(JoinJobIdsSearch.entity().getJobId(),Op.NIN,"jobIds");
  JoinJobIdsSearch.done();
  ContentIdsSearch=_queueItemDao.createSearchBuilder(Long.class);
  ContentIdsSearch.selectFields(ContentIdsSearch.entity().getContentId()).done();
  AsyncJobExecutionContext.init(this,_joinMapDao);
  OutcomeImpl.init(this);
  return true;
}
