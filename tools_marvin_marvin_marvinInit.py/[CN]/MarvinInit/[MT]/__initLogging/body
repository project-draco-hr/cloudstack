def __initLogging(self):
    try:
        '\n            @Desc : 1. Initializes the logging for marvin and so provides\n                    various log features for automation run.\n                    2. Initializes all logs to be available under\n                    given Folder Path,where all test run logs\n                    are available for a given run.\n                    3. All logging like exception log,results, run info etc\n                     for a given test run are available under a given\n                     timestamped folder\n            '
        temp_path = ''.join(str(time.time()).split('.'))
        if (self.__logFolderPath is None):
            log_config = self.__parsedConfig.logger
            if (log_config is not None):
                if (log_config.LogFolderPath is not None):
                    self.logFolderPath = ((log_config.LogFolderPath + '/') + temp_path)
                else:
                    self.logFolderPath = temp_path
            else:
                self.logFolderPath = temp_path
        else:
            self.logFolderPath = ((self.__logFolderPath + '/') + temp_path)
        if os.path.exists(self.logFolderPath):
            self.logFolderPath = (self.logFolderPath + ''.join((random.choice((string.ascii_uppercase + string.digits)) for x in range(3))))
        os.makedirs(self.logFolderPath)
        '\n            Log File Paths\n            '
        tc_failed_exceptionlog = (self.logFolderPath + '/failed_plus_exceptions.txt')
        tc_run_log = (self.logFolderPath + '/runinfo.txt')
        self.__tcRunDebugFile = open((self.logFolderPath + '/results.txt'), 'w')
        log_obj = MarvinLog('CSLog')
        self.__tcRunLogger = log_obj.setLogHandler(tc_run_log)
        log_obj.setLogHandler(tc_failed_exceptionlog, log_level=logging.FATAL)
        return SUCCESS
    except Exception as e:
        print ('\n Exception Occurred Under __initLogging :%s' % str(e))
        return None
