@unittest.skip('skipped')
def test_01_host_maintenance_mode(self):
    'Test host maintenance mode\n        '
    hosts = Host.list(self.apiclient, zoneid=self.zone.id, resourcestate='Enabled', type='Routing')
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return valid host response')
    self.assertEqual(len(hosts), 2, 'There must be two hosts present in a cluster')
    self.debug(('Checking HA with hosts: %s, %s' % (hosts[0].name, hosts[1].name)))
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm = vms[0]
    self.debug(('Deployed VM on host: %s' % vm.hostid))
    self.assertEqual(vm.state, 'Running', 'Deployed VM should be in RUnning state')
    networks = Network.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return valid list for the account')
    network = networks[0]
    self.debug(('Associating public IP for account: %s' % self.account.account.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network.id)
    self.debug(('Associated %s with network %s' % (public_ip.ipaddress.ipaddress, network.id)))
    self.debug(('Creating PF rule for IP address: %s' % public_ip.ipaddress.ipaddress))
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], ipaddressid=public_ip.ipaddress.id)
    self.debug(('Creating LB rule on IP with NAT: %s' % public_ip.ipaddress.ipaddress))
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.account.name)
    self.debug(('Created LB rule with ID: %s' % lb_rule.id))
    try:
        self.debug(('SSH into VM: %s' % virtual_machine.id))
        ssh = virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine.ipaddress, e)))
    first_host = vm.hostid
    self.debug(('Enabling maintenance mode for host %s' % vm.hostid))
    cmd = prepareHostForMaintenance.prepareHostForMaintenanceCmd()
    cmd.id = first_host
    self.apiclient.prepareHostForMaintenance(cmd)
    self.debug('Waiting for SSVMs to come up')
    wait_for_ssvms(self.apiclient, zoneid=self.zone.id, podid=self.pod.id)
    timeout = self.services['timeout']
    while True:
        vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
        self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
        self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
        vm = vms[0]
        self.debug(('VM 1 state: %s' % vm.state))
        if (vm.state in ['Stopping', 'Stopped', 'Running', 'Starting', 'Migrating']):
            if (vm.state == 'Running'):
                break
            else:
                time.sleep(self.services['sleep'])
                timeout = (timeout - 1)
        else:
            self.fail('VM migration from one-host-to-other failed while enabling maintenance')
    second_host = vm.hostid
    self.assertEqual(vm.state, 'Running', 'VM should be in Running state after enabling host maintenance')
    try:
        self.debug(('SSH into VM: %s' % virtual_machine.id))
        ssh = virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine.ipaddress, e)))
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_2.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm = vms[0]
    self.debug(('Deployed VM on host: %s' % vm.hostid))
    self.debug(('VM 2 state: %s' % vm.state))
    self.assertEqual(vm.state, 'Running', 'Deployed VM should be in Running state')
    self.debug(('Canceling host maintenance for ID: %s' % first_host))
    cmd = cancelHostMaintenance.cancelHostMaintenanceCmd()
    cmd.id = first_host
    self.apiclient.cancelHostMaintenance(cmd)
    self.debug(('Maintenance mode canceled for host: %s' % first_host))
    self.debug(('Enabling maintenance mode for host %s' % second_host))
    cmd = prepareHostForMaintenance.prepareHostForMaintenanceCmd()
    cmd.id = second_host
    self.apiclient.prepareHostForMaintenance(cmd)
    self.debug(('Maintenance mode enabled for host: %s' % second_host))
    self.debug('Waiting for SSVMs to come up')
    wait_for_ssvms(self.apiclient, zoneid=self.zone.id, podid=self.pod.id)
    timeout = self.services['timeout']
    while True:
        vms = VirtualMachine.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
        self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
        self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
        vm = vms[0]
        self.debug(('VM state after enabling maintenance on first host: %s' % vm.state))
        if (vm.state in ['Stopping', 'Stopped', 'Running', 'Starting', 'Migrating']):
            if (vm.state == 'Running'):
                break
            else:
                time.sleep(self.services['sleep'])
                timeout = (timeout - 1)
        else:
            self.fail('VM migration from one-host-to-other failed while enabling maintenance')
    timeout = self.services['timeout']
    while True:
        vms = VirtualMachine.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid, listall=True)
        self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
        self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
        vm = vms[1]
        self.debug(('VM state after enabling maintenance on first host: %s' % vm.state))
        if (vm.state in ['Stopping', 'Stopped', 'Running', 'Starting', 'Migrating']):
            if (vm.state == 'Running'):
                break
            else:
                time.sleep(self.services['sleep'])
                timeout = (timeout - 1)
        else:
            self.fail('VM migration from one-host-to-other failed while enabling maintenance')
    for vm in vms:
        self.debug(('VM states after enabling maintenance mode on host: %s - %s' % (first_host, vm.state)))
        self.assertEqual(vm.state, 'Running', 'Deployed VM should be in Running state')
    virtual_machine_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_3.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm = vms[0]
    self.debug(('Deployed VM on host: %s' % vm.hostid))
    self.debug(('VM 3 state: %s' % vm.state))
    self.assertEqual(vm.state, 'Running', 'Deployed VM should be in Running state')
    try:
        self.debug(('SSH into VM: %s' % virtual_machine.id))
        ssh = virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine.ipaddress, e)))
    self.debug(('Canceling host maintenance for ID: %s' % second_host))
    cmd = cancelHostMaintenance.cancelHostMaintenanceCmd()
    cmd.id = second_host
    self.apiclient.cancelHostMaintenance(cmd)
    self.debug(('Maintenance mode canceled for host: %s' % second_host))
    self.debug('Waiting for SSVMs to come up')
    wait_for_ssvms(self.apiclient, zoneid=self.zone.id, podid=self.pod.id)
    return
