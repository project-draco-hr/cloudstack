@attr(tags=['advanced', 'intervlan'])
def test_09_network_services_VPC_StopDeleteAllMultiplePF(self):
    ' Test delete all PF rules in VPC across multiple networks when VpcVirtualRouter is Stopped\n        '
    network_1 = self.create_network(self.services['network_offering'])
    network_2 = self.create_network(self.services['network_offering_no_lb'], '10.1.2.1')
    vm_1 = self.deployvm_in_network(network_1)
    vm_2 = self.deployvm_in_network(network_1)
    vm_3 = self.deployvm_in_network(network_2)
    vm_4 = self.deployvm_in_network(network_2)
    public_ip_1 = self.acquire_publicip(network_1)
    public_ip_2 = self.acquire_publicip(network_1)
    nat_rule1 = self.create_natrule(vm_1, public_ip_1, network_1)
    nat_rule2 = self.create_natrule(vm_2, public_ip_2, network_1)
    http_rule1 = self.open_egress_to_world(network_1)
    nat_rule3 = self.create_natrule(vm_3, public_ip_1, network_2)
    nat_rule4 = self.create_natrule(vm_4, public_ip_2, network_2)
    http_rule2 = self.open_egress_to_world(network_2)
    self.check_ssh_into_vm(vm_1, public_ip_1, testnegative=False)
    self.check_ssh_into_vm(vm_2, public_ip_2, testnegative=False)
    self.check_ssh_into_vm(vm_3, public_ip_1, testnegative=False)
    self.check_ssh_into_vm(vm_4, public_ip_2, testnegative=False)
    self.check_wget_from_vm(vm_1, public_ip_1, testnegative=False)
    self.check_wget_from_vm(vm_2, public_ip_2, testnegative=False)
    self.check_wget_from_vm(vm_3, public_ip_1, testnegative=False)
    self.check_wget_from_vm(vm_4, public_ip_2, testnegative=False)
    router = self.stop_vpcrouter()
    nat_rule1.delete()
    nat_rule2.delete()
    nat_rule3.delete()
    nat_rule4.delete()
    http_rule1.delete()
    http_rule2.delete()
    self.start_vpcrouter(router)
    self.check_ssh_into_vm(vm_1, public_ip_1, testnegative=True)
    self.check_ssh_into_vm(vm_2, public_ip_2, testnegative=True)
    self.check_ssh_into_vm(vm_3, public_ip_1, testnegative=True)
    self.check_ssh_into_vm(vm_4, public_ip_2, testnegative=True)
    self.check_wget_from_vm(vm_1, public_ip_1, testnegative=True)
    self.check_wget_from_vm(vm_2, public_ip_2, testnegative=True)
    self.check_wget_from_vm(vm_3, public_ip_1, testnegative=True)
    self.check_wget_from_vm(vm_4, public_ip_2, testnegative=True)
    return
