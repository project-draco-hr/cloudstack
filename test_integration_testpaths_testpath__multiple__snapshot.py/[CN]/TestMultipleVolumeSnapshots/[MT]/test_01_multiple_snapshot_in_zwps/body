@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_multiple_snapshot_in_zwps(self):
    ' Test multiple volume snapshot in zwps\n\n        # 1. Verify if setup has a ZWPS and 2 CWPS\n        # 2. Deploy a VM with data disk in ZWPS\n        # 1. Verify ROOT and DATA Disk of the VM is in ZWPS.\n        # 2. Take a snapshot of VM.\n        # 3. Create Multiple Snapshots till operation fails.\n        '
    try:
        self.pools = StoragePool.list(self.apiclient, zoneid=self.zone.id)
        status = validateList(self.pools)
        self.assertEqual(status[0], PASS, ('Check: Failed to list storage pools due to %s' % status[2]))
        zonepoolList = list((storagePool for storagePool in self.pools if (storagePool.scope == 'ZONE')))
        if (len(zonepoolList) < 1):
            self.skipTest('There must be at least one zone wide                storage pools available in the setup')
        if (len(list((storagePool for storagePool in self.pools if (storagePool.scope == 'CLUSTER')))) < 2):
            self.skipTest('There must be at atleast two cluster wide                storage pools available in the setup')
    except Exception as e:
        self.skipTest(e)
    zone_no = 1
    StoragePool.update(self.apiclient, id=zonepoolList[0].id, tags=[(ZONETAG1[:(-1)] + repr(zone_no))])
    self.vm_zwps = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_zwps.id, diskofferingid=self.disk_offering_zwps.id, zoneid=self.zone.id)
    self.cleanup.append(self.vm_zwps)
    volumes_root_list = list_volumes(self.apiclient, virtualmachineid=self.vm_zwps.id, type=ROOT, listall=True)
    status = validateList(volumes_root_list)
    self.assertEqual(status[0], PASS, ('Check: Failed to list root vloume due to %s' % status[2]))
    root_volume = volumes_root_list[0]
    if (root_volume.storage != zonepoolList[0].name):
        self.fail('Root Volume not in Zone-Wide Storage Pool !')
    volumes_data_list = list_volumes(self.apiclient, virtualmachineid=self.vm_zwps.id, type=DATA, listall=True)
    status = validateList(volumes_data_list)
    self.assertEqual(status[0], PASS, ('Check: Failed to list data vloume due to %s' % status[2]))
    data_volume = volumes_data_list[0]
    if (data_volume.storage != zonepoolList[0].name):
        self.fail('Data Volume not in Zone-Wide Storage Pool !')
    self.vm_zwps.stop(self.apiclient)
    self.debug('Creation of Snapshot of Data Volume after VM is stopped.....')
    Snapshot.create(self.apiclient, data_volume.id)
    snapshots_list = Snapshot.list(self.apiclient, volumeid=data_volume.id, listall=True)
    snap_list_validation_result = validateList(snapshots_list)
    self.assertEqual(snap_list_validation_result[0], PASS, ('snapshot list validation failed due to %s' % snap_list_validation_result[2]))
    snap_count = len(snapshots_list)
    self.debug('Creating Multiple Snapshots(Should create more than 10).....')
    try:
        while (snap_count <= 12):
            Snapshot.create(self.apiclient, data_volume.id)
            snapshots_list = Snapshot.list(self.apiclient, volumeid=data_volume.id, listall=True)
            snap_list_validation_result = validateList(snapshots_list)
            self.assertEqual(snap_list_validation_result[0], PASS, ('snapshot list validation failed due to %s' % snap_list_validation_result[2]))
            snap_count = len(snapshots_list)
    except Exception as e:
        snapshots_list = Snapshot.list(self.apiclient, volumeid=data_volume.id, listall=True)
        snap_list_validation_result = validateList(snapshots_list)
        self.assertEqual(snap_list_validation_result[0], PASS, ('snapshot list validation failed due to %s' % snap_list_validation_result[2]))
        assert (len(snapshots_list) >= 10), 'Less than 10 snapshots created....'
        raise Exception(('Snapshot creation failed !: %s' % e))
    return
