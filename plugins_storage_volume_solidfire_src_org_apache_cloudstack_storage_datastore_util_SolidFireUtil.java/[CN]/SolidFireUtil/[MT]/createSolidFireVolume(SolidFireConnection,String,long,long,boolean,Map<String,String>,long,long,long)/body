{
  JsonObject volumeToCreate=new JsonObject();
  volumeToCreate.addProperty("method","CreateVolume");
  JsonObject params=new JsonObject();
  volumeToCreate.add("params",params);
  params.addProperty("name",strSfVolumeName);
  params.addProperty("accountID",lSfAccountId);
  params.addProperty("totalSize",lTotalSize);
  params.addProperty("enable512e",bEnable512e);
  JsonObject qos=new JsonObject();
  params.add("qos",qos);
  qos.addProperty("minIOPS",minIops);
  qos.addProperty("maxIOPS",maxIops);
  qos.addProperty("burstIOPS",burstIops);
  if (mapAttributes != null && mapAttributes.size() > 0) {
    JsonObject attributes=new JsonObject();
    params.add("attributes",attributes);
    Iterator<Map.Entry<String,String>> itr=mapAttributes.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry<String,String> pair=itr.next();
      attributes.addProperty(pair.getKey(),pair.getValue());
    }
  }
  final Gson gson=new GsonBuilder().create();
  String strVolumeToCreateJson=gson.toJson(volumeToCreate);
  String strVolumeCreateResultJson=executeJsonRpc(sfConnection,strVolumeToCreateJson);
  VolumeCreateResult volumeCreateResult=gson.fromJson(strVolumeCreateResultJson,VolumeCreateResult.class);
  verifyResult(volumeCreateResult.result,strVolumeCreateResultJson,gson);
  return volumeCreateResult.result.volumeID;
}
