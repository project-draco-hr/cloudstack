{
  JsonObject volumeToModify=new JsonObject();
  volumeToModify.addProperty("method","ModifyVolume");
  JsonObject params=new JsonObject();
  volumeToModify.add("params",params);
  params.addProperty("volumeID",volumeId);
  if (totalSize != null) {
    params.addProperty("totalSize",totalSize);
  }
  JsonObject qos=new JsonObject();
  params.add("qos",qos);
  qos.addProperty("minIOPS",minIops);
  qos.addProperty("maxIOPS",maxIops);
  qos.addProperty("burstIOPS",burstIops);
  if (mapAttributes != null && mapAttributes.size() > 0) {
    JsonObject attributes=new JsonObject();
    params.add("attributes",attributes);
    Iterator<Map.Entry<String,String>> itr=mapAttributes.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry<String,String> pair=itr.next();
      attributes.addProperty(pair.getKey(),pair.getValue());
    }
  }
  final Gson gson=new GsonBuilder().create();
  String strVolumeToModifyJson=gson.toJson(volumeToModify);
  String strVolumeModifyResultJson=executeJsonRpc(sfConnection,strVolumeToModifyJson);
  JsonError jsonError=gson.fromJson(strVolumeModifyResultJson,JsonError.class);
  if (jsonError.error != null) {
    throw new IllegalStateException(jsonError.error.message);
  }
}
