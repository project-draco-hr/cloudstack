{
  JsonObject cloneToCreate=new JsonObject();
  cloneToCreate.addProperty("method","CloneVolume");
  JsonObject params=new JsonObject();
  cloneToCreate.add("params",params);
  params.addProperty("volumeID",lVolumeId);
  if (lSnapshotId > 0) {
    params.addProperty("snapshotID",lSnapshotId);
  }
  params.addProperty("newAccountID",sfAccountId);
  params.addProperty("name",cloneName);
  if (mapAttributes != null && mapAttributes.size() > 0) {
    JsonObject attributes=new JsonObject();
    params.add("attributes",attributes);
    Iterator<Map.Entry<String,String>> itr=mapAttributes.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry<String,String> pair=itr.next();
      attributes.addProperty(pair.getKey(),pair.getValue());
    }
  }
  final Gson gson=new GsonBuilder().create();
  String strCloneToCreateJson=gson.toJson(cloneToCreate);
  String strCloneCreateResultJson=executeJsonRpc(sfConnection,strCloneToCreateJson);
  CloneCreateResult cloneCreateResult=gson.fromJson(strCloneCreateResultJson,CloneCreateResult.class);
  verifyResult(cloneCreateResult.result,strCloneCreateResultJson,gson);
  AsyncJobToPoll asyncJobToPoll=new AsyncJobToPoll(cloneCreateResult.result.asyncHandle);
  String strAsyncJobToPollJson=gson.toJson(asyncJobToPoll);
  do {
    String strAsyncJobResultJson=executeJsonRpc(sfConnection,strAsyncJobToPollJson);
    AsyncJobResult asyncJobResult=gson.fromJson(strAsyncJobResultJson,AsyncJobResult.class);
    verifyResult(asyncJobResult.result,strAsyncJobResultJson,gson);
    if (asyncJobResult.result.status.equals("complete")) {
      break;
    }
    try {
      Thread.sleep(500);
    }
 catch (    Exception ex) {
    }
  }
 while (true);
  return cloneCreateResult.result.volumeID;
}
