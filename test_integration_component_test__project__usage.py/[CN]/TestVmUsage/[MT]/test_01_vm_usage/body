def test_01_vm_usage(self):
    'Test Create/Destroy VM and verify usage calculation\n        '
    self.debug(('Stopping the VM: %s' % self.virtual_machine.id))
    self.virtual_machine.stop(self.apiclient)
    time.sleep(self.services['sleep'])
    self.debug(('Destroying the VM: %s' % self.virtual_machine.id))
    self.virtual_machine.delete(self.apiclient)
    self.debug(("select project_account_id from projects where uuid = '%s';" % self.project.id))
    qresultset = self.dbclient.execute(("select project_account_id from projects where uuid = '%s';" % self.project.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select type from usage_event where account_id = '%s';" % account_id))
    qresultset = self.dbclient.execute(("select type from usage_event where account_id = '%s';" % account_id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = str(qresultset)
    self.debug(('Query result: %s' % qresult))
    self.assertEqual(qresult.count('VM.START'), 1, 'Check VM.START event in events table')
    self.assertEqual(qresult.count('NETWORK.OFFERING.ASSIGN'), 1, 'Check NETWORK.OFFERING.ASSIGN in events table')
    self.assertEqual(qresult.count('VM.CREATE'), 1, 'Check VM.CREATE in list events')
    self.assertEqual(qresult.count('VOLUME.CREATE'), 1, 'Check VOLUME.CREATE in events table')
    self.assertEqual(qresult.count('VM.STOP'), 1, 'Check VM.STOP in events table')
    self.assertEqual(qresult.count('NETWORK.OFFERING.REMOVE'), 1, 'Check NETWORK.OFFERING.REMOVE in list events')
    self.assertEqual(qresult.count('VM.DESTROY'), 1, 'Check VM.DESTROY in events table')
    self.assertEqual(qresult.count('VOLUME.DELETE'), 1, 'Check VOLUME.DELETE in events table')
    return
