@classmethod
def setUpClass(cls):
    cls.testClient = super(TestTemplateUsage, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.services['server']['zoneid'] = cls.zone.id
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['server']['zoneid'] = cls.zone.id
    cls._cleanup = []
    try:
        cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.services['account'] = cls.account.name
        cls.project = Project.create(cls.api_client, cls.services['project'], account=cls.account.name, domainid=cls.account.domainid)
        cls._cleanup.insert((-1), cls.project)
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['server'], templateid=template.id, serviceofferingid=cls.service_offering.id, projectid=cls.project.id)
        cls.virtual_machine.stop(cls.api_client)
        list_volume = list_volumes(cls.api_client, projectid=cls.project.id, type='ROOT', listall=True)
        if isinstance(list_volume, list):
            cls.volume = list_volume[0]
        else:
            raise Exception('List Volumes failed!')
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Failed during setUpClass: %s' % e))
    return
