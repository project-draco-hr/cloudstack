@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns'], required_hardware='true')
def test_01_template_usage(self):
    'Test Upload/ delete a template and verify correct usage is generated\n            for the template uploaded\n        '
    self.debug('Register a Template in the project')
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.services['templates']['url'] = builtin_info[0]
    self.services['templates']['hypervisor'] = builtin_info[1]
    self.services['templates']['format'] = builtin_info[2]
    template = Template.register(self.userapiclient, self.services['templates'], zoneid=self.zone.id, projectid=self.project.id)
    self.debug(('Registered a template of format: %s with ID: %s' % (self.services['templates']['format'], template.id)))
    time.sleep(self.services['sleep'])
    timeout = self.services['timeout']
    while True:
        list_template_response = Template.list(self.apiclient, templatefilter='all', id=template.id, zoneid=self.zone.id, projectid=self.project.id)
        if (list_template_response[0].isready is True):
            break
        elif (timeout == 0):
            raise Exception(('Template state is not ready, it is %s' % list_template_response[0].isready))
        time.sleep(self.services['sleep'])
        timeout = (timeout - 1)
    self.assertEqual(isinstance(list_template_response, list), True, 'Check for list template response return valid data')
    self.assertNotEqual(len(list_template_response), 0, 'Check template available in List Templates')
    template_response = list_template_response[0]
    self.assertEqual(template_response.isready, True, ('Template state is not ready, it is %s' % template_response.isready))
    self.debug(('Created template with ID: %s' % template.id))
    template.delete(self.apiclient)
    self.debug(('Deleted template with ID: %s' % template.id))
    self.debug(("select project_account_id from projects where uuid = '%s';" % self.project.id))
    qresultset = self.dbclient.execute(("select project_account_id from projects where uuid = '%s';" % self.project.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select type from usage_event where account_id = '%s';" % account_id))
    qresultset = self.dbclient.execute(("select type from usage_event where account_id = '%s';" % account_id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = str(qresultset)
    self.debug(('Query result: %s' % qresult))
    self.assertEqual(qresult.count('TEMPLATE.CREATE'), 1, 'Check TEMPLATE.CREATE event in events table')
    self.assertEqual(qresult.count('TEMPLATE.DELETE'), 1, 'Check TEMPLATE.DELETE in events table')
    return
