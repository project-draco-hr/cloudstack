def test_07_associate_public_ip(self):
    'Test associate public IP within the project\n        '
    networks = Network.list(self.apiclient, projectid=self.project.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'Check list networks response returns a valid response')
    self.assertNotEqual(len(networks), 0, 'Check list networks response returns a valid network')
    network = networks[0]
    self.debug(('Associating public IP for project: %s' % self.project.id))
    public_ip = PublicIPAddress.create(self.apiclient, zoneid=self.virtual_machine.zoneid, services=self.services['server'], networkid=network.id, projectid=self.project.id)
    self.cleanup.append(public_ip)
    self.debug(('Creating a NAT rule within project, VM ID: %s' % self.virtual_machine.id))
    nat_rule = NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], public_ip.ipaddress.id, projectid=self.project.id)
    self.debug(('created a NAT rule with ID: %s' % nat_rule.id))
    nat_rule_response = NATRule.list(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rule_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(nat_rule_response), 0, 'Check Port Forwarding Rule is created')
    self.assertEqual(nat_rule_response[0].id, nat_rule.id, 'Check Correct Port forwarding Rule is returned')
    self.debug(('Created LB rule for public IP: %s' % public_ip.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], public_ip.ipaddress.id, projectid=self.project.id)
    self.cleanup.append(lb_rule)
    self.debug(('Assigning VM: %s to LB rule: %s' % (self.virtual_machine.name, lb_rule.id)))
    lb_rule.assign(self.apiclient, [self.virtual_machine])
    lb_rules = list_lb_rules(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_rules), 0, 'Check Load Balancer Rule in its List')
    self.assertEqual(lb_rules[0].id, lb_rule.id, 'Check List Load Balancer Rules returns valid Rule')
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'], projectid=self.project.id)
    self.debug(('Created firewall rule: %s' % fw_rule.id))
    fw_rules = FireWallRule.list(self.apiclient, id=fw_rule.id)
    self.assertEqual(isinstance(fw_rules, list), True, 'Check for list FW rules response return valid data')
    self.assertEqual(fw_rules[0].state, 'Active', 'Check list load balancing rules')
    self.assertEqual(fw_rules[0].startport, str(self.services['fw_rule']['startport']), 'Check start port of firewall rule')
    self.assertEqual(fw_rules[0].endport, str(self.services['fw_rule']['endport']), 'Check end port of firewall rule')
    self.debug(('Deploying VM for account: %s' % self.account.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_1)
    self.debug(('VM state after deploy: %s' % virtual_machine_1.state))
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    self.debug(('Creating NAT rule for VM (ID: %s) outside project' % virtual_machine_1.id))
    with self.assertRaises(Exception):
        NATRule.create(self.apiclient, virtual_machine_1, self.services['natrule'], public_ip.ipaddress.id)
    self.debug(('Creating LB rule for public IP: %s outside project' % public_ip.ipaddress.ipaddress))
    with self.assertRaises(Exception):
        LoadBalancerRule.create(self.apiclient, self.services['lbrule'], public_ip.ipaddress.id, accountid=self.account.account.name)
    self.debug(('Creating firewall rule for public IP: %s outside project' % public_ip.ipaddress.ipaddress))
    with self.assertRaises(Exception):
        FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    return
