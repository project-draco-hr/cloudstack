def test_08_security_group(self):
    'Test security groups in project\n        '
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], projectid=self.project.id)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, projectid=self.project.id)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertNotEqual(len(sercurity_groups), 0, 'Check List Security groups response')
    ingress_rule = security_group.authorize(self.apiclient, self.services['security_group'], projectid=self.project.id)
    self.assertEqual(isinstance(ingress_rule, dict), True, 'Check ingress rule created properly')
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_group.id))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id], projectid=self.project.id)
    self.debug(('Deployed VM (ID: %s) in project: %s' % (self.virtual_machine.id, self.project.id)))
    self.assertEqual(self.virtual_machine.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Deploying VM with security group: %s outside project:%s' % (security_group.id, self.project.id)))
    with self.assertRaises(Exception):
        VirtualMachine.create(self.apiclient, self.services['server'], serviceofferingid=self.service_offering.id, accountid=self.account.account.name, domainid=self.account.account.domainid, securitygroupids=[security_group.id])
    return
