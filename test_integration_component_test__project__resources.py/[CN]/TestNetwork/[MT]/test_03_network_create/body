def test_03_network_create(self):
    ' Test create network in project\n        '
    project = Project.create(self.apiclient, self.services['project'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    network_offerings = list_network_offerings(self.apiclient, projectid=project.id, supportedServices='SourceNat', type='isolated', state='Enabled')
    self.assertEqual(isinstance(network_offerings, list), True, 'Check for the valid network offerings')
    network_offering = network_offerings[0]
    self.debug(('creating a network with network offering ID: %s' % network_offering.id))
    self.services['network']['zoneid'] = self.zone.id
    network = Network.create(self.apiclient, self.services['network'], networkofferingid=network_offering.id, projectid=project.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, projectid=project.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'Check for the valid network list response')
    network_response = networks[0]
    self.debug(('Deploying VM with network: %s' % network.id))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, networkids=[str(network.id)], serviceofferingid=self.service_offering.id, projectid=project.id)
    self.debug(('Deployed VM with ID: %s' % virtual_machine.id))
    self.assertEqual(virtual_machine.state, 'Running', 'Check VM state is Running or not')
    network_offerings = list_network_offerings(self.apiclient, state='Enabled', guestiptype='Shared', name='DefaultSharedNetworkOffering', displaytext='Offering for Shared networks')
    self.assertEqual(isinstance(network_offerings, list), True, 'Check for the valid network offerings')
    network_offering = network_offerings[0]
    self.debug(('creating a shared network in domain: %s' % self.domain.id))
    domain_network = Network.create(self.apiclient, self.services['domain_network'], domainid=self.domain.id, networkofferingid=network_offering.id, zoneid=self.zone.id)
    self._cleanup.append(domain_network)
    self.debug(('Created network with ID: %s' % domain_network.id))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, networkids=[str(domain_network.id)], serviceofferingid=self.service_offering.id, projectid=project.id)
    self.debug(('Deployed VM with ID: %s' % virtual_machine.id))
    self.assertEqual(virtual_machine.state, 'Running', 'Check VM state is Running or not')
    return
