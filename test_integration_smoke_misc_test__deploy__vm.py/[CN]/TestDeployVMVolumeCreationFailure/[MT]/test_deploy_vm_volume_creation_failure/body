@attr(tags=['advanced'], required_hardware='simulator only')
def test_deploy_vm_volume_creation_failure(self):
    'Test Deploy Virtual Machine - volume creation failure and retry\n\n        # Validate the following:\n        # 1. 1st VM creation failed\n        # 2. Check there were 4 failed volume creation retries (mock count = (6-4) = 2)\n        # 3. 2nd VM creation succeeded\n        # 4. Check there were 2 failed volume creation retries (mock count = (2-2) = 0)\n        # 5. ListVM returns accurate information\n        '
    self.virtual_machine = None
    with self.assertRaises(Exception):
        self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine2'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    self.mock_volume_failure = self.mock_volume_failure.query(self.apiclient)
    self.assertEqual(self.mock_volume_failure.count, 2, msg='Volume failure mock not executed')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine3'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    list_vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertTrue((isinstance(list_vms, list) and (len(list_vms) > 0)), msg='List VM response empty')
    vm = list_vms[0]
    self.assertEqual(vm.id, self.virtual_machine.id, 'VM ids do not match')
    self.assertEqual(vm.name, self.virtual_machine.name, 'VM names do not match')
    self.assertEqual(vm.state, 'Running', msg='VM is not in Running state')
    self.mock_volume_failure = self.mock_volume_failure.query(self.apiclient)
    self.assertEqual(self.mock_volume_failure.count, 0, msg='Volume failure mock not executed')
