def run(self):
    while (self.inqueue.qsize() > 0):
        job = self.inqueue.get()
        cmd = job.cmd
        cmdName = cmd.__class__.__name__
        responseName = cmdName.replace('Cmd', 'Response')
        responseInstance = self.connection.getclassFromName(cmd, responseName)
        jobstatus = jobStatus()
        jobId = None
        try:
            if (not cmd.isAsync):
                jobstatus.startTime = time.time()
                result = self.connection.make_request(cmd, responseInstance)
                jobstatus.result = result
                jobstatus.endTime = time.time()
            else:
                result = self.connection.make_request(cmd, responseInstance, True)
                jobId = self.connection.getAsyncJobId(responseInstance, result)
                result = self.connection.pollAsyncJob(cmd, responseInstance, jobId)
                jobstatus.result = result
                jobstatus.jobId = jobId
            jobstatus.status = True
        except cloudstackException.cloudstackAPIException as e:
            jobstatus.result = str(e)
            jobstatus.status = False
        except:
            jobstatus.status = False
            jobstatus.result = sys.exc_info()
        self.output.lock.acquire()
        self.output.dict[job.id] = jobstatus
        self.output.lock.release()
        self.inqueue.task_done()
    'release the resource'
    self.connection.close()
