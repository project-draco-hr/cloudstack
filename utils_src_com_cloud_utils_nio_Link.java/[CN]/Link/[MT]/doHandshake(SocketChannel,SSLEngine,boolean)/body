{
  s_logger.info("SSL: begin Handshake, isClient: " + isClient);
  SSLEngineResult engResult;
  SSLSession sslSession=sslEngine.getSession();
  HandshakeStatus hsStatus;
  ByteBuffer in_pkgBuf=ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);
  ByteBuffer in_appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
  ByteBuffer out_pkgBuf=ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);
  ByteBuffer out_appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
  int count;
  if (isClient) {
    hsStatus=SSLEngineResult.HandshakeStatus.NEED_WRAP;
  }
 else {
    hsStatus=SSLEngineResult.HandshakeStatus.NEED_UNWRAP;
  }
  while (hsStatus != SSLEngineResult.HandshakeStatus.FINISHED) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("SSL: Handshake status " + hsStatus);
    }
    engResult=null;
    if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
      out_pkgBuf.clear();
      out_appBuf.clear();
      out_appBuf.put("Hello".getBytes());
      engResult=sslEngine.wrap(out_appBuf,out_pkgBuf);
      out_pkgBuf.flip();
      int remain=out_pkgBuf.limit();
      while (remain != 0) {
        remain-=ch.write(out_pkgBuf);
        if (remain < 0) {
          throw new IOException("Too much bytes sent?");
        }
      }
    }
 else     if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {
      in_appBuf.clear();
      if (in_pkgBuf.position() == 0 || !in_pkgBuf.hasRemaining()) {
        in_pkgBuf.clear();
        count=ch.read(in_pkgBuf);
        if (count == -1) {
          throw new IOException("Connection closed with -1 on reading size.");
        }
        in_pkgBuf.flip();
      }
      engResult=sslEngine.unwrap(in_pkgBuf,in_appBuf);
      ByteBuffer tmp_pkgBuf=ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);
      int loop_count=0;
      while (engResult.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW) {
        if (loop_count > 10) {
          throw new IOException("Too many times in SSL BUFFER_UNDERFLOW, disconnect guest.");
        }
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("SSL: Buffer overflowed, getting more packets");
        }
        tmp_pkgBuf.clear();
        count=ch.read(tmp_pkgBuf);
        if (count == -1) {
          throw new IOException("Connection closed with -1 on reading size.");
        }
        tmp_pkgBuf.flip();
        in_pkgBuf.mark();
        in_pkgBuf.position(in_pkgBuf.limit());
        in_pkgBuf.limit(in_pkgBuf.limit() + tmp_pkgBuf.limit());
        in_pkgBuf.put(tmp_pkgBuf);
        in_pkgBuf.reset();
        in_appBuf.clear();
        engResult=sslEngine.unwrap(in_pkgBuf,in_appBuf);
        loop_count++;
      }
    }
 else     if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {
      Runnable run;
      while ((run=sslEngine.getDelegatedTask()) != null) {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("SSL: Running delegated task!");
        }
        run.run();
      }
    }
 else     if (hsStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
      throw new IOException("NOT a handshaking!");
    }
    if (engResult != null && engResult.getStatus() != SSLEngineResult.Status.OK) {
      throw new IOException("Fail to handshake! " + engResult.getStatus());
    }
    if (engResult != null)     hsStatus=engResult.getHandshakeStatus();
 else     hsStatus=sslEngine.getHandshakeStatus();
  }
}
