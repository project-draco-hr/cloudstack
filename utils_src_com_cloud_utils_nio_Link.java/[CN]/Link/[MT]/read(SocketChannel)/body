{
  if (_readSize) {
    if (_readBuffer.position() == 0) {
      _readBuffer.limit(4);
    }
    if (ch.read(_readBuffer) == -1) {
      throw new IOException("Connection closed with -1 on reading size.");
    }
    if (_readBuffer.hasRemaining()) {
      s_logger.trace("Need to read the rest of the packet length");
      return null;
    }
    _readBuffer.flip();
    int readSize=_readBuffer.getInt();
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Packet length is " + readSize);
    }
    if (readSize > 65535) {
      throw new IOException("Packet is too big! Discard it. Size: " + readSize);
    }
    _readBuffer.clear();
    _readSize=false;
    if (_readBuffer.capacity() < readSize) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Resizing the byte buffer from " + _readBuffer.capacity());
      }
      _readBuffer=ByteBuffer.allocate(readSize);
    }
    _readBuffer.limit(readSize);
  }
  if (ch.read(_readBuffer) == -1) {
    throw new IOException("Connection closed with -1 on read.");
  }
  if (_readBuffer.hasRemaining()) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Still has " + _readBuffer.remaining());
    }
    return null;
  }
  _readBuffer.flip();
  byte[] result=new byte[_readBuffer.limit()];
  _readBuffer.get(result);
  _readBuffer.clear();
  _readSize=true;
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Done with packet: " + result.length);
  }
  return result;
}
