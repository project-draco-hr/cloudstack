{
  SSLSession sslSession=sslEngine.getSession();
  ByteBuffer pkgBuf=ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);
  SSLEngineResult engResult;
  ByteBuffer headBuf=ByteBuffer.allocate(4);
  int totalLen=0;
  for (  ByteBuffer buffer : buffers) {
    totalLen+=buffer.limit();
  }
  int processedLen=0;
  while (processedLen < totalLen) {
    headBuf.clear();
    pkgBuf.clear();
    engResult=sslEngine.wrap(buffers,pkgBuf);
    if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
      throw new IOException("SSL: SSLEngine return bad result! " + engResult);
    }
    processedLen=0;
    for (    ByteBuffer buffer : buffers) {
      processedLen+=buffer.position();
    }
    int dataRemaining=pkgBuf.position();
    int header=dataRemaining;
    int headRemaining=4;
    pkgBuf.flip();
    if (processedLen < totalLen) {
      header=header | HEADER_FLAG_FOLLOWING;
    }
    headBuf.putInt(header);
    headBuf.flip();
    while (headRemaining > 0) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Writing Header " + headRemaining);
      }
      long count=ch.write(headBuf);
      headRemaining-=count;
    }
    while (dataRemaining > 0) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Writing Data " + dataRemaining);
      }
      long count=ch.write(pkgBuf);
      dataRemaining-=count;
    }
  }
}
