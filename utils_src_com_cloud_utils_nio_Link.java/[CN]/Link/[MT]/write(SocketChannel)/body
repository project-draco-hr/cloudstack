{
  ByteBuffer[] data=null;
  while ((data=_writeQueue.poll()) != null) {
    if (data.length == 0) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Closing connection requested");
      }
      return true;
    }
    ByteBuffer pkgBuf;
    SSLSession sslSession=_sslEngine.getSession();
    SSLEngineResult engResult;
    ByteBuffer headBuf=ByteBuffer.allocate(4);
    ByteBuffer[] raw_data=new ByteBuffer[data.length - 1];
    System.arraycopy(data,1,raw_data,0,data.length - 1);
    pkgBuf=ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);
    engResult=_sslEngine.wrap(raw_data,pkgBuf);
    if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
      throw new IOException("SSL: SSLEngine return bad result! " + engResult);
    }
    int dataRemaining=pkgBuf.position();
    int headRemaining=4;
    pkgBuf.flip();
    headBuf.putInt(dataRemaining);
    headBuf.flip();
    if (headRemaining + dataRemaining > 65535) {
      throw new IOException("Fail to send a too big packet! Size: " + (headRemaining + dataRemaining));
    }
    while (headRemaining > 0) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Writing Header " + headRemaining);
      }
      long count=ch.write(headBuf);
      headRemaining-=count;
    }
    while (dataRemaining > 0) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Writing Data " + dataRemaining);
      }
      long count=ch.write(pkgBuf);
      dataRemaining-=count;
    }
  }
  return false;
}
