def validatePhysicalNetworkVlan(self, physicalNetworkId, vlan):
    'Validate whether the physical network has the updated vlan\n\n        params:\n\n        @physicalNetworkId: The id of physical network which needs to be validated\n        @vlan: vlan with which physical network was updated. This should match with the vlan of listed\n               physical network\n\n        Raise Exception if not matched\n        '
    self.debug(('Listing physical networks with id: %s' % physicalNetworkId))
    physicalnetworks = PhysicalNetwork.list(self.apiclient, id=physicalNetworkId)
    self.assertTrue(isinstance(physicalnetworks, list), 'PhysicalNetwork.list should return a                         valid list object')
    self.assertTrue((len(physicalnetworks) > 0), 'physical networks list should not be empty')
    self.debug('Checking if physical network vlan matches with the passed vlan')
    vlans = xsplit(vlan, [','])
    for virtualLan in vlans:
        self.assert_((physicalnetworks[0].vlan.find(virtualLan) != (-1)), ('vlan range %s                         is not present in physical network: %s' % (virtualLan, physicalNetworkId)))
    return
