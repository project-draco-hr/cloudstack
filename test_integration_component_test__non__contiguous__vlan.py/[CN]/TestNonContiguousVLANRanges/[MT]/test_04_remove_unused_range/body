@attr(tags=['simulator', 'advanced'])
def test_04_remove_unused_range(self):
    '\n        Test removing unused vlan range\n        '
    vlan1 = ((self.existingvlan + ',') + self.vlan['partial_range'][0])
    self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=vlan1)
    vlan2 = ((vlan1 + ',') + self.vlan['partial_range'][1])
    self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=vlan2)
    self.debug(('Removing vlan : %s' % self.vlan['partial_range'][1]))
    self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=vlan1)
    physicalnetworks = PhysicalNetwork.list(self.apiclient, id=self.physicalnetworkid)
    self.assertTrue(isinstance(physicalnetworks, list), 'PhysicalNetwork.list should return a                         valid list object')
    self.assertTrue((len(physicalnetworks) > 0), 'physical networks list should not be empty')
    vlanranges = physicalnetworks[0].vlan
    self.assert_((vlanranges.find(self.vlan['partial_range'][1]) == (-1)), 'vlan range is not removed')
    return
