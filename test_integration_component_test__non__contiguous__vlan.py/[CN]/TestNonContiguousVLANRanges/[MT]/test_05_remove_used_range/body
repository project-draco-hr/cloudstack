@attr(tags=['simulator', 'advanced'])
def test_05_remove_used_range(self):
    '\n        Test removing used vlan range\n        '
    vlans = xsplit(self.existingvlan, ['-', ','])
    vlanstartid = int(vlans[0])
    vlanendid = int(vlans[1])
    networks = list_networks(self.apiclient)
    existingvlaninuse = False
    if (isinstance(networks, list) and (len(networks) > 0)):
        self.debug(('networks: %s' % networks))
        vlansinuse = [network for network in networks if (network.vlan and (vlanstartid <= int(network.vlan) <= vlanendid))]
        self.debug(('Total no. of vlans in use : %s' % len(vlansinuse)))
        if (len(vlansinuse) > 0):
            existingvlaninuse = True
        else:
            existingvlaninuse = False
    vlan1 = self.vlan['partial_range'][0]
    if existingvlaninuse:
        self.debug('Trying to remove existing vlan in use, This should fail')
        with self.assertRaises(Exception) as e:
            self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=vlan1)
        self.debug(('operation failed with exception: %s' % e.exception))
    else:
        self.debug('No vlan in use, hence adding a new vlan and using it by deploying an instance')
        self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=vlan1)
        self.debug(('Verifying the VLAN of the updated physical network: %s, It should match with                     the passed vlan: %s' % (self.physicalnetworkid, vlan1)))
        self.validatePhysicalNetworkVlan(self.physicalnetworkid, vlan1)
        account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
        self.debug(('Deploying instance in the account: %s' % account.name))
        self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=account.name, domainid=account.domainid, serviceofferingid=self.service_offering.id, mode=self.zone.networktype)
        self.debug(('Deployed instance in account: %s' % account.name))
        self.debug(('Trying to remove vlan range : %s , This should fail' % self.vlan['partial_range'][0]))
        with self.assertRaises(Exception) as e:
            self.physicalnetwork.update(self.apiClient, id=self.physicalnetworkid, vlan=self.existingvlan)
        self.debug(('operation failed with exception: %s' % e.exception))
        account.delete(self.apiclient)
    return
