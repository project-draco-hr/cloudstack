def check_private_gateway_interfaces(self, status_to_check='UP'):
    routers = self.query_routers()
    state_holder = {routers[0].linklocalip: {'state': None, 'mac': None, }, routers[1].linklocalip: {'state': None, 'mac': None, }, }
    state = None
    mac = None
    for router in routers:
        hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
        self.assertEqual(isinstance(hosts, list), True, 'Check for list hosts response return valid data')
        host = hosts[0]
        host.user = self.services['configurableData']['host']['username']
        host.passwd = self.services['configurableData']['host']['password']
        host.port = self.services['configurableData']['host']['port']
        try:
            state = get_process_status(host.ipaddress, host.port, host.user, host.passwd, router.linklocalip, "ip addr | grep eth6 | grep state | awk '{print $9;}'")
            mac = get_process_status(host.ipaddress, host.port, host.user, host.passwd, router.linklocalip, "ip addr | grep link/ether | awk '{print $2;}' | sed -n 7p")
        except KeyError:
            self.skipTest(('Provide a marvin config file with host credentials to run %s' % self._testMethodName))
        state = str(state[0])
        mac = str(mac[0])
        self.logger.debug(("Result from the Router on IP '%s' is -> state: '%s', mac: '%s'" % (router.linklocalip, state, mac)))
        state_holder[router.linklocalip]['state'] = str(state)
        state_holder[router.linklocalip]['mac'] = str(mac)
    if (status_to_check == 'UP'):
        check_state = state_holder[routers[0].linklocalip]['state'].count(state_holder[routers[1].linklocalip]['state'])
        check_mac = state_holder[routers[0].linklocalip]['mac'].count(state_holder[routers[1].linklocalip]['mac'])
        self.assertTrue((check_state == 0), 'Routers private gateway interface should not be on the same state!')
        self.assertTrue((check_mac == 0), 'Routers private gateway interface should not have the same mac address!')
    else:
        self.assertTrue((check_state == 1), 'Routers private gateway interface should should have been removed!')
