def performPrivateGWInterfaceTests(self, vpc_off):
    self.logger.debug(('Creating VPCs with  offering ID %s' % vpc_off.id))
    vpc_1 = self.createVPC(vpc_off, cidr='10.0.0.0/16')
    self.cleanup = [vpc_1, vpc_off, self.account]
    physical_network = self.get_guest_traffic_physical_network(self.apiclient, self.zone.id)
    if (not physical_network):
        self.fail('No Physical Networks found!')
    qresultset = self.dbclient.execute(("select vnet from op_dc_vnet_alloc where physical_network_id=            (select id from physical_network where uuid='%s' ) and taken is NULL and reservation_id is NULL and account_id is NULL ORDER BY id DESC;" % physical_network.id))
    vlans = qresultset
    vlan_1 = int(vlans[0][0])
    net_offering_no_lb = 'network_offering_no_lb'
    network_1 = self.createNetwork(vpc_1, gateway='10.0.0.1')
    network_2 = self.createNetwork(vpc_1, net_offering=net_offering_no_lb, gateway='10.0.1.1')
    network_3 = self.createNetwork(vpc_1, net_offering=net_offering_no_lb, gateway='10.0.2.1')
    network_4 = self.createNetwork(vpc_1, net_offering=net_offering_no_lb, gateway='10.0.3.1')
    vm1 = self.createVM(network_1)
    vm2 = self.createVM(network_2)
    vm3 = self.createVM(network_3)
    vm4 = self.createVM(network_4)
    self.cleanup.insert(0, vm1)
    self.cleanup.insert(0, vm2)
    self.cleanup.insert(0, vm3)
    self.cleanup.insert(0, vm4)
    acl1 = self.createACL(vpc_1)
    self.createACLItem(acl1.id, cidr='0.0.0.0/0')
    privateGw_1 = self.createPvtGw(vpc_1, '10.1.0.100', '10.1.0.101', acl1.id, vlan_1)
    self.replacePvtGwACL(acl1.id, privateGw_1.id)
    self.replaceNetworkAcl(acl1.id, network_1)
    self.replaceNetworkAcl(acl1.id, network_2)
    self.replaceNetworkAcl(acl1.id, network_3)
    self.replaceNetworkAcl(acl1.id, network_4)
    public_ip_1 = self.acquire_publicip(vpc_1, network_1)
    nat_rule_1 = self.create_natrule(vpc_1, vm1, public_ip_1, network_1)
    self.check_private_gateway_interfaces()
    self.check_pvt_gw_connectivity(vm1, public_ip_1, [vm2.nic[0].ipaddress, vm3.nic[0].ipaddress, vm4.nic[0].ipaddress])
    self.reboot_vpc_with_cleanup(vpc_1, cleanup=True)
    self.check_routers_state()
    self.check_pvt_gw_connectivity(vm1, public_ip_1, [vm2.nic[0].ipaddress, vm3.nic[0].ipaddress, vm4.nic[0].ipaddress])
    self.stop_router_by_type('MASTER')
    self.check_routers_state()
    self.check_private_gateway_interfaces()
    self.check_pvt_gw_connectivity(vm1, public_ip_1, [vm2.nic[0].ipaddress, vm3.nic[0].ipaddress, vm4.nic[0].ipaddress])
    self.start_routers()
    self.check_routers_state()
    self.check_private_gateway_interfaces()
    self.check_pvt_gw_connectivity(vm1, public_ip_1, [vm2.nic[0].ipaddress, vm3.nic[0].ipaddress, vm4.nic[0].ipaddress])
    self.deletePvtGw(privateGw_1.id)
    self.check_private_gateway_interfaces(status_to_check='DOWN')
