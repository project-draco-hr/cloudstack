@data(ADMIN_ACCOUNT, USER_ACCOUNT)
@attr(tags=['basic', 'advanced'])
def test_check_vm_stats(self, value):
    'Deploy VM with dynamic service offering and check VM stats'
    isadmin = True
    if (value == USER_ACCOUNT):
        isadmin = False
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id, admin=isadmin)
    apiclient = self.testClient.createUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    self.cleanup.append(self.account)
    self.services['service_offering']['cpunumber'] = ''
    self.services['service_offering']['cpuspeed'] = ''
    self.services['service_offering']['memory'] = ''
    serviceOffering = ServiceOffering.create(self.apiclient, self.services['service_offering'])
    self.cleanup_co.append(serviceOffering)
    customcpunumber = 2
    customcpuspeed = 256
    custommemory = 128
    try:
        virtualMachine = VirtualMachine.create(apiclient, self.services['virtual_machine'], serviceofferingid=serviceOffering.id, customcpunumber=customcpunumber, customcpuspeed=customcpuspeed, custommemory=custommemory, accountid=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    vmlist = VirtualMachine.list(self.apiclient, id=virtualMachine.id)
    self.assertEqual(validateList(vmlist)[0], PASS, 'vm list validation failed')
    vm = vmlist[0]
    self.assertEqual(str(vm.cpunumber), str(customcpunumber), ('vm cpu number %s                 not matching with provided custom cpu number %s' % (vm.cpunumber, customcpunumber)))
    self.assertEqual(str(vm.cpuspeed), str(customcpuspeed), ('vm cpu speed %s                 not matching with provided custom cpu speed %s' % (vm.cpuspeed, customcpuspeed)))
    self.assertEqual(str(vm.memory), str(custommemory), ('vm memory %s                 not matching with provided custom memory %s' % (vm.memory, custommemory)))
    return
