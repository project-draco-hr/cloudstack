@attr('simulator_only', tags=['advanced'], required_hardware='false')
def test_deployVM_in_sharedNetwork_as_domainadmin_scope_domain_nosubdomainaccess_ROOTuser(self):
    '\n\tValiate that Domain admin is NOT able to deploy a VM for user in ROOT domain in a shared network with scope=Domain and no subdomain access\n\t'
    self.apiclient.connection.apiKey = self.user_d1_apikey
    self.apiclient.connection.securityKey = self.user_d1_secretkey
    self.vmdata['name'] = (self.acldata['vmROOTA']['name'] + '-shared-scope-domain-nosubdomainaccess-domain-admin')
    self.vmdata['displayname'] = (self.acldata['vmROOTA']['displayname'] + '-shared-scope-domain-nosubdomainaccess-domain-admin')
    try:
        vm = VirtualMachine.create(self.apiclient, self.vmdata, zoneid=self.zone.id, serviceofferingid=self.service_offering.id, templateid=self.template.id, networkids=self.shared_network_domain_d11.id, accountid=self.account_roota.name, domainid=self.account_roota.domainid)
        self.fail('Domain admin is able to deploy a VM for user in ROOT domain in a shared network with scope=Domain and no subdomain access')
    except Exception as e:
        self.debug(('When a regular user from ROOT domain deploys a VM in a shared network with scope=domain with no subdomain access %s' % e))
        if (not CloudstackAclException.verifyMsginException(e, CloudstackAclException.NO_PERMISSION_TO_OPERATE_DOMAIN)):
            self.fail('Error message validation failed when Domain admin tries to deploy a VM for user in ROOT domain in a shared network with scope=Domain and no subdomain access')
