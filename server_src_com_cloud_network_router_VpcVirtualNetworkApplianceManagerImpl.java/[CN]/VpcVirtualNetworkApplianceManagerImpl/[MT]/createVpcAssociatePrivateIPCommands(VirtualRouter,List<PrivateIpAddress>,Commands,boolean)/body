{
  Map<String,ArrayList<PrivateIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PrivateIpAddress>>();
  for (  final PrivateIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PrivateIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PrivateIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PrivateIpAddress> ipAddrList=vlanAndIp.getValue();
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    for (    final PrivateIpAddress ipAddr : ipAddrList) {
      Network network=_networkModel.getNetwork(ipAddr.getNetworkId());
      IpAddressTO ip=new IpAddressTO(Account.ACCOUNT_ID_SYSTEM,ipAddr.getIpAddress(),add,false,false,ipAddr.getVlanTag(),ipAddr.getGateway(),ipAddr.getNetmask(),ipAddr.getMacAddress(),null,false);
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
    }
    IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand("IPAssocVpcCommand",cmd);
  }
}
