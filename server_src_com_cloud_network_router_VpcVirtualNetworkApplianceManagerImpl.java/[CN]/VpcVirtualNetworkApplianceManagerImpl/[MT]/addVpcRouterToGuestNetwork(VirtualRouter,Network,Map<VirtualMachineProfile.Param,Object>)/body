{
  if (network.getTrafficType() != TrafficType.Guest) {
    logger.warn("Network " + network + " is not of type "+ TrafficType.Guest);
    return false;
  }
  boolean result=true;
  try {
    _routerDao.addRouterToGuestNetwork(router,network);
    final NicProfile guestNic=_itMgr.addVmToNetwork(router,network,null);
    if (guestNic != null) {
      result=setupVpcGuestNetwork(network,router,true,guestNic);
    }
 else {
      logger.warn("Failed to add router " + router + " to guest network "+ network);
      result=false;
    }
    if (result && params.get(Param.ReProgramGuestNetworks) != null && (Boolean)params.get(Param.ReProgramGuestNetworks) == true) {
      sendNetworkRulesToRouter(router.getId(),network.getId());
    }
  }
 catch (  final Exception ex) {
    logger.warn("Failed to add router " + router + " to network "+ network+ " due to ",ex);
    result=false;
  }
 finally {
    if (!result) {
      logger.debug("Removing the router " + router + " from network "+ network+ " as a part of cleanup");
      if (removeVpcRouterFromGuestNetwork(router,network)) {
        logger.debug("Removed the router " + router + " from network "+ network+ " as a part of cleanup");
      }
 else {
        logger.warn("Failed to remove the router " + router + " from network "+ network+ " as a part of cleanup");
      }
    }
 else {
      logger.debug("Succesfully added router " + router + " to guest network "+ network);
    }
  }
  return result;
}
