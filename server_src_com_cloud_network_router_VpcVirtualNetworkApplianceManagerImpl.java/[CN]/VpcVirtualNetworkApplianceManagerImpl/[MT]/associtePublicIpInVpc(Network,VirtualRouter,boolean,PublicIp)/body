{
  List<PublicIp> publicIps=new ArrayList<PublicIp>(1);
  publicIps.add(ipAddress);
  Commands cmds=new Commands(OnError.Stop);
  createVpcAssociateIPCommands(router,publicIps,cmds,0);
  String assoc=add ? "Associating " : "Disassociating";
  StringBuilder debugMsg=new StringBuilder(assoc + " ip address " + ipAddress);
  if (ipAddress.isSourceNat()) {
    Integer networkRate=_networkMgr.getNetworkRate(ipAddress.getNetworkId(),router.getId());
    String vmGuestAddress=null;
    IpAddressTO ip=new IpAddressTO(ipAddress.getAccountId(),ipAddress.getAddress().addr(),add,false,true,ipAddress.getVlanTag(),ipAddress.getGateway(),ipAddress.getNetmask(),ipAddress.getMacAddress(),vmGuestAddress,networkRate,ipAddress.isOneToOneNat());
    ip.setTrafficType(network.getTrafficType());
    ip.setNetworkName(_networkMgr.getNetworkTag(router.getHypervisorType(),network));
    SetSourceNatCommand cmd=new SetSourceNatCommand(ip,true);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(ipAddress.getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    String enable=add ? "enabling" : "disabling";
    debugMsg.append(" and " + enable + " source nat for it");
  }
  if (sendCommandsToRouter(router,cmds)) {
    s_logger.debug("Successfully applied ip associatino for ip " + ipAddress + " in vpc network "+ network);
    return true;
  }
 else {
    s_logger.warn("Failed to associate ip address " + ipAddress + " in vpc network "+ network);
    return false;
  }
}
