{
  if (ipAddress == null || ipAddress.isEmpty()) {
    s_logger.debug("No ip association rules to be applied for network " + network.getId());
    return true;
  }
  VirtualRouter router=routers.get(0);
  if (router.getVpcId() == null) {
    return super.associatePublicIP(network,ipAddress,routers);
  }
  Pair<Map<String,PublicIpAddress>,Map<String,PublicIpAddress>> nicsToChange=getNicsToChangeOnRouter(ipAddress,router);
  Map<String,PublicIpAddress> nicsToPlug=nicsToChange.first();
  Map<String,PublicIpAddress> nicsToUnplug=nicsToChange.second();
  for (  String vlanTag : nicsToUnplug.keySet()) {
    Network publicNtwk=null;
    try {
      publicNtwk=_networkMgr.getNetwork(nicsToUnplug.get(vlanTag).getNetworkId());
      URI broadcastUri=BroadcastDomainType.Vlan.toUri(vlanTag);
      _itMgr.removeVmFromNetwork(router,publicNtwk,broadcastUri);
    }
 catch (    ConcurrentOperationException e) {
      s_logger.warn("Failed to remove router " + router + " from vlan "+ vlanTag+ " in public network "+ publicNtwk+ " due to ",e);
      return false;
    }
  }
  for (  String vlanTag : nicsToPlug.keySet()) {
    PublicIpAddress ip=nicsToPlug.get(vlanTag);
    NicProfile defaultNic=new NicProfile();
    if (ip.isSourceNat()) {
      defaultNic.setDefaultNic(true);
    }
    defaultNic.setIp4Address(ip.getAddress().addr());
    defaultNic.setGateway(ip.getGateway());
    defaultNic.setNetmask(ip.getNetmask());
    defaultNic.setMacAddress(ip.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    NicProfile publicNic=null;
    Network publicNtwk=null;
    try {
      publicNtwk=_networkMgr.getNetwork(ip.getNetworkId());
      publicNic=_itMgr.addVmToNetwork(router,publicNtwk,defaultNic);
    }
 catch (    ConcurrentOperationException e) {
      s_logger.warn("Failed to add router " + router + " to vlan "+ vlanTag+ " in public network "+ publicNtwk+ " due to ",e);
    }
catch (    InsufficientCapacityException e) {
      s_logger.warn("Failed to add router " + router + " to vlan "+ vlanTag+ " in public network "+ publicNtwk+ " due to ",e);
    }
 finally {
      if (publicNic == null) {
        s_logger.warn("Failed to add router " + router + " to vlan "+ vlanTag+ " in public network "+ publicNtwk);
        return false;
      }
    }
  }
  boolean result=applyRules(network,routers,"vpc ip association",false,null,false,new RuleApplier(){
    @Override public boolean execute(    Network network,    VirtualRouter router) throws ResourceUnavailableException {
      Commands cmds=new Commands(OnError.Continue);
      Map<String,String> vlanMacAddress=new HashMap<String,String>();
      for (      PublicIpAddress ipAddr : ipAddress) {
        String broadcastURI=BroadcastDomainType.Vlan.toUri(ipAddr.getVlanTag()).toString();
        Nic nic=_nicDao.findByNetworkIdInstanceIdAndBroadcastUri(ipAddr.getNetworkId(),router.getId(),broadcastURI);
        String macAddress=null;
        if (nic == null) {
          if (ipAddr.getState() != IpAddress.State.Releasing) {
            throw new CloudRuntimeException("Unable to find the nic in network " + ipAddr.getNetworkId() + "  to apply the ip address "+ ipAddr+ " for");
          }
          macAddress=ipAddr.getMacAddress();
        }
 else {
          macAddress=nic.getMacAddress();
        }
        vlanMacAddress.put(ipAddr.getVlanTag(),macAddress);
      }
      createVpcAssociatePublicIPCommands(router,ipAddress,cmds,vlanMacAddress);
      return sendCommandsToRouter(router,cmds);
    }
  }
);
  return result;
}
