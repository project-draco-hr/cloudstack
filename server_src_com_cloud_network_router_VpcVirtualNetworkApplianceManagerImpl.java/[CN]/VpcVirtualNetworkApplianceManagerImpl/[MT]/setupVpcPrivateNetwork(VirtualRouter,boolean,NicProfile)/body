{
  boolean result=true;
  Commands cmds=new Commands(OnError.Stop);
  Integer networkRate=_networkMgr.getNetworkRate(privateNic.getNetworkId(),router.getId());
  IpAddressTO ip=new IpAddressTO(Account.ACCOUNT_ID_SYSTEM,privateNic.getIp4Address(),add,false,true,privateNic.getBroadCastUri().getHost(),privateNic.getGateway(),privateNic.getNetmask(),privateNic.getMacAddress(),null,networkRate,false);
  Network network=_networkMgr.getNetwork(privateNic.getNetworkId());
  ip.setTrafficType(network.getTrafficType());
  SetSourceNatCommand cmd=new SetSourceNatCommand(ip,add);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand("SetSourceNatCommand",cmd);
  sendCommandsToRouter(router,cmds);
  SetSourceNatAnswer setupAnswer=cmds.getAnswer(SetSourceNatAnswer.class);
  String setup=add ? "set" : "destroy";
  if (!(setupAnswer != null && setupAnswer.getResult())) {
    s_logger.warn("Unable to " + setup + " source nat for private gateway "+ privateNic+ " on router "+ router);
    result=false;
  }
  return result;
}
