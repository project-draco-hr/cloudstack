{
  DomainRouterVO router=profile.getVirtualMachine();
  boolean isVpc=(router.getVpcId() != null);
  if (!isVpc) {
    return super.finalizeCommandsOnStart(cmds,profile);
  }
  NicProfile controlNic=getControlNic(profile);
  if (controlNic == null) {
    s_logger.error("Control network doesn't exist for the router " + router);
    return false;
  }
  finalizeSshAndVersionAndNetworkUsageOnStart(cmds,profile,router,controlNic);
  Map<Nic,Network> guestNics=new HashMap<Nic,Network>();
  Map<Nic,Network> publicNics=new HashMap<Nic,Network>();
  List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  Nic routerNic : routerNics) {
    Network network=_networkMgr.getNetwork(routerNic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      guestNics.put(routerNic,network);
    }
 else     if (network.getTrafficType() == TrafficType.Public) {
      publicNics.put(routerNic,network);
    }
  }
  try {
    List<PublicIp> publicIps=new ArrayList<PublicIp>(1);
    for (    Nic publicNic : publicNics.keySet()) {
      Network publicNtwk=publicNics.get(publicNic);
      IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(publicNtwk.getId(),publicNic.getIp4Address());
      if (userIp.isSourceNat()) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
        publicIps.add(publicIp);
      }
      PlugNicCommand plugNicCmd=new PlugNicCommand(_itMgr.toVmTO(profile),getNicTO(router,publicNic.getNetworkId()));
      cmds.addCommand(plugNicCmd);
    }
    if (!publicIps.isEmpty()) {
      createVpcAssociateIPCommands(router,publicIps,cmds);
    }
    for (    Nic guestNic : guestNics.keySet()) {
      PlugNicCommand plugNicCmd=new PlugNicCommand(_itMgr.toVmTO(profile),getNicTO(router,guestNic.getNetworkId()));
      cmds.addCommand(plugNicCmd);
      if (!_networkMgr.isPrivateGateway(guestNic)) {
        VirtualMachine vm=_vmDao.findById(router.getId());
        NicProfile nicProfile=_networkMgr.getNicProfile(vm,guestNic.getNetworkId());
        SetupGuestNetworkCommand setupCmd=createSetupGuestNetworkCommand(router,true,nicProfile);
        cmds.addCommand(setupCmd);
      }
 else {
        Integer networkRate=_networkMgr.getNetworkRate(guestNic.getNetworkId(),router.getId());
        IpAddressTO ip=new IpAddressTO(Account.ACCOUNT_ID_SYSTEM,guestNic.getIp4Address(),true,false,true,guestNic.getBroadcastUri().getHost(),guestNic.getGateway(),guestNic.getNetmask(),guestNic.getMacAddress(),null,networkRate,false);
        SetSourceNatCommand cmd=new SetSourceNatCommand(ip,true);
        cmds.addCommand(cmd);
      }
    }
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to add router " + router + " to network due to exception ",ex);
    return false;
  }
  boolean reprogramGuestNtwks=true;
  if (profile.getParameter(Param.ReProgramGuestNetworks) != null && (Boolean)profile.getParameter(Param.ReProgramGuestNetworks) == false) {
    reprogramGuestNtwks=false;
  }
  VirtualRouterProvider vrProvider=_vrProviderDao.findById(router.getElementId());
  if (vrProvider == null) {
    throw new CloudRuntimeException("Cannot find related virtual router provider of router: " + router.getHostName());
  }
  Provider provider=Network.Provider.getProvider(vrProvider.getType().toString());
  if (provider == null) {
    throw new CloudRuntimeException("Cannot find related provider of virtual router provider: " + vrProvider.getType().toString());
  }
  List<Long> routerGuestNtwkIds=_routerDao.getRouterNetworks(router.getId());
  for (  Long guestNetworkId : routerGuestNtwkIds) {
    if (reprogramGuestNtwks) {
      finalizeIpAssocForNetwork(cmds,router,provider,guestNetworkId);
      finalizeNetworkRulesForNetwork(cmds,router,provider,guestNetworkId);
    }
    finalizeUserDataAndDhcpOnStart(cmds,router,provider,guestNetworkId);
  }
  return true;
}
