{
  if (entity instanceof VirtualMachineTemplate) {
    VirtualMachineTemplate template=(VirtualMachineTemplate)entity;
    Account owner=_accountDao.findById(template.getAccountId());
    if (!template.isPublicTemplate()) {
      if (_accountService.isRootAdmin(caller.getId()) || (owner.getId() == caller.getId())) {
        return true;
      }
      if (owner.getType() == Account.ACCOUNT_TYPE_PROJECT && _projectMgr.canAccessProjectAccount(caller,owner.getId())) {
        return true;
      }
      LaunchPermissionVO permission=_launchPermissionDao.findByTemplateAndAccount(template.getId(),caller.getId());
      if (permission == null) {
        throw new PermissionDeniedException(caller + " does not have permission to launch instances from " + template);
      }
    }
 else {
      if (accessType != null && accessType == AccessType.OperateEntry) {
        if (!_accountService.isRootAdmin(caller.getId()) && owner.getId() != caller.getId()) {
          if (owner.getType() != Account.ACCOUNT_TYPE_PROJECT || !(_projectMgr.canAccessProjectAccount(caller,owner.getId()))) {
            throw new PermissionDeniedException("Domain Admin and regular users can modify only their own Public templates");
          }
        }
      }
    }
    return true;
  }
 else   if (entity instanceof Network && accessType != null && accessType == AccessType.UseEntry) {
    _networkMgr.checkNetworkPermissions(caller,(Network)entity);
  }
 else   if (entity instanceof AffinityGroup) {
    return false;
  }
 else {
    if (_accountService.isNormalUser(caller.getId())) {
      Account account=_accountDao.findById(entity.getAccountId());
      if (account != null && account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
        if (accessType != null && accessType == AccessType.ModifyProject) {
          if (!_projectMgr.canModifyProjectAccount(caller,account.getId())) {
            throw new PermissionDeniedException(caller + " does not have permission to operate with resource " + entity);
          }
        }
 else         if (!_projectMgr.canAccessProjectAccount(caller,account.getId())) {
          throw new PermissionDeniedException(caller + " does not have permission to operate with resource " + entity);
        }
      }
 else {
        if (caller.getId() != entity.getAccountId()) {
          throw new PermissionDeniedException(caller + " does not have permission to operate with resource " + entity);
        }
      }
    }
  }
  return true;
}
