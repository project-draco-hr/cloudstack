from cloudstackAPI import *
import cloudstackException
import cloudstackTestClient
import sys
import uuid
if (__name__ == '__main__'):
    ' to logging the testclient\n    logger = logging.getLogger("test_async")\n    fh = logging.FileHandler("test.log")\n    logger.addHandler(fh)\n    logger.setLevel(logging.DEBUG)\n    testclient = cloudstackTestClient.cloudstackTestClient(mgtSvr="localhost", logging=logger)\n    '
    testclient = cloudstackTestClient.cloudstackTestClient(mgtSvr='localhost', port=8080, apiKey='rUJI62HcbyhAXpRgqERZHXlrJz9GiC55fmAm7j4WobLUTFkJyupBm87sbMki1-aRFox7TDs436xYvNW9fTHcew', securityKey='2_SIz9HULx5guCLypSoRoePCBFnTZGIrA3gQ0qhy__oca6dDacJwibMSQh-kVeJivJHeA55AwJZPJAu4U3V5KQ')
    testclient.dbConfigure()
    api = testclient.getApiClient()
    '\n    testclient.submitJob(jobs(1), 10, 10, 1)\n    \n    js = []\n    for i in range(10):\n        js.append(jobs(1))\n        \n    testclient.submitJobs(js, 10, 1)\n    '
    cmds = []
    for i in range(20):
        cmd = deployVirtualMachine.deployVirtualMachineCmd()
        cmd.zoneid = 1
        cmd.templateid = 10
        cmd.serviceofferingid = 16
        cmd.displayname = str(uuid.uuid4())
        cmds.append(cmd)
    asyncJobResult = testclient.submitCmdsAndWait(cmds, 6)
    for (handle, jobStatus) in asyncJobResult.iteritems():
        if jobStatus.status:
            print jobStatus.result[0].id, jobStatus.result[0].templatename, jobStatus.startTime, jobStatus.endTime
        else:
            print jobStatus.result, jobStatus.startTime, jobStatus.endTime
        print jobStatus.duration
