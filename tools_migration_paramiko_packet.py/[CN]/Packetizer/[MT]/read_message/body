def read_message(self):
    '\n        Only one thread should ever be in this function (no other locking is\n        done).\n        \n        @raise SSHException: if the packet is mangled\n        @raise NeedRekeyException: if the transport should rekey\n        '
    header = self.read_all(self.__block_size_in, check_rekey=True)
    if (self.__block_engine_in != None):
        header = self.__block_engine_in.decrypt(header)
    if self.__dump_packets:
        self._log(DEBUG, util.format_binary(header, 'IN: '))
    packet_size = struct.unpack('>I', header[:4])[0]
    leftover = header[4:]
    if (((packet_size - len(leftover)) % self.__block_size_in) != 0):
        raise SSHException('Invalid packet blocking')
    buf = self.read_all(((packet_size + self.__mac_size_in) - len(leftover)))
    packet = buf[:(packet_size - len(leftover))]
    post_packet = buf[(packet_size - len(leftover)):]
    if (self.__block_engine_in != None):
        packet = self.__block_engine_in.decrypt(packet)
    if self.__dump_packets:
        self._log(DEBUG, util.format_binary(packet, 'IN: '))
    packet = (leftover + packet)
    if (self.__mac_size_in > 0):
        mac = post_packet[:self.__mac_size_in]
        mac_payload = (struct.pack('>II', self.__sequence_number_in, packet_size) + packet)
        my_mac = compute_hmac(self.__mac_key_in, mac_payload, self.__mac_engine_in)[:self.__mac_size_in]
        if (my_mac != mac):
            raise SSHException('Mismatched MAC')
    padding = ord(packet[0])
    payload = packet[1:(packet_size - padding)]
    randpool.add_event()
    if self.__dump_packets:
        self._log(DEBUG, ('Got payload (%d bytes, %d padding)' % (packet_size, padding)))
    if (self.__compress_engine_in is not None):
        payload = self.__compress_engine_in(payload)
    msg = Message(payload[1:])
    msg.seqno = self.__sequence_number_in
    self.__sequence_number_in = ((self.__sequence_number_in + 1) & 4294967295L)
    self.__received_bytes += ((packet_size + self.__mac_size_in) + 4)
    self.__received_packets += 1
    if self.__need_rekey:
        self.__received_packets_overflow += 1
        if (self.__received_packets_overflow >= 20):
            raise SSHException('Remote transport is ignoring rekey requests')
    elif ((self.__received_packets >= self.REKEY_PACKETS) or (self.__received_bytes >= self.REKEY_BYTES)):
        self._log(DEBUG, ('Rekeying (hit %d packets, %d bytes received)' % (self.__received_packets, self.__received_bytes)))
        self.__received_packets_overflow = 0
        self._trigger_rekey()
    cmd = ord(payload[0])
    if (cmd in MSG_NAMES):
        cmd_name = MSG_NAMES[cmd]
    else:
        cmd_name = ('$%x' % cmd)
    if self.__dump_packets:
        self._log(DEBUG, ('Read packet <%s>, length %d' % (cmd_name, len(payload))))
    return (cmd, msg)
