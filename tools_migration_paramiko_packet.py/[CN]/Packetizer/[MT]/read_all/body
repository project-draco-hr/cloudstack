def read_all(self, n, check_rekey=False):
    '\n        Read as close to N bytes as possible, blocking as long as necessary.\n        \n        @param n: number of bytes to read\n        @type n: int\n        @return: the data read\n        @rtype: str\n        @raise EOFError: if the socket was closed before all the bytes could\n            be read\n        '
    out = ''
    if (len(self.__remainder) > 0):
        out = self.__remainder[:n]
        self.__remainder = self.__remainder[n:]
        n -= len(out)
    if PY22:
        return self._py22_read_all(n, out)
    while (n > 0):
        got_timeout = False
        try:
            x = self.__socket.recv(n)
            if (len(x) == 0):
                raise EOFError()
            out += x
            n -= len(x)
        except socket.timeout:
            got_timeout = True
        except socket.error as e:
            if ((type(e.args) is tuple) and (len(e.args) > 0) and (e.args[0] == errno.EAGAIN)):
                got_timeout = True
            elif ((type(e.args) is tuple) and (len(e.args) > 0) and (e.args[0] == errno.EINTR)):
                pass
            elif self.__closed:
                raise EOFError()
            else:
                raise
        if got_timeout:
            if self.__closed:
                raise EOFError()
            if (check_rekey and (len(out) == 0) and self.__need_rekey):
                raise NeedRekeyException()
            self._check_keepalive()
    return out
