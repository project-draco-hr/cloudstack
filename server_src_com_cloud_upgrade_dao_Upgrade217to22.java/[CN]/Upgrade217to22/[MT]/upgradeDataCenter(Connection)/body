{
  PreparedStatement pstmt;
  try {
    pstmt=conn.prepareStatement("SELECT value FROM configuration WHERE name='direct.attach.untagged.vlan.enabled'");
    ResultSet rs=pstmt.executeQuery();
    _basicZone=!(rs.next() && Boolean.parseBoolean(rs.getString(1)));
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement("UPDATE data_center SET networktype=?, dns_provider=?, gateway_provider=?, firewall_provider=?, dhcp_provider=?, lb_provider=?, vpn_provider=?, userdata_provider=?");
    if (_basicZone) {
      pstmt.setString(1,"Basic");
      pstmt.setString(2,"DhcpServer");
      pstmt.setString(3,null);
      pstmt.setString(4,null);
      pstmt.setString(5,"DhcpServer");
      pstmt.setString(6,null);
      pstmt.setString(7,null);
      pstmt.setString(8,"DhcpServer");
    }
 else {
      pstmt.setString(1,"Advanced");
      pstmt.setString(2,"VirtualRouter");
      pstmt.setString(3,"VirtualRouter");
      pstmt.setString(4,"VirtualRouter");
      pstmt.setString(5,"VirtualRouter");
      pstmt.setString(6,"VirtualRouter");
      pstmt.setString(7,"VirtualRouter");
      pstmt.setString(8,"VirtualRouter");
    }
    pstmt.executeUpdate();
    pstmt.close();
    pstmt=conn.prepareStatement("SELECT id FROM data_center");
    rs=pstmt.executeQuery();
    ArrayList<Long> dcs=new ArrayList<Long>();
    while (rs.next()) {
      dcs.add(rs.getLong(1));
    }
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement("SELECT id FROM network_offerings WHERE name='System-Management-Network'");
    rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new CloudRuntimeException("Unable to find the management network offering.");
    }
    long managementNetworkOfferingId=rs.getLong(1);
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement("SELECT id FROM network_offerings WHERE name='System-Public-Network'");
    rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new CloudRuntimeException("Unable to find the public network offering.");
    }
    long publicNetworkOfferingId=rs.getLong(1);
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement("SELECT id FROM network_offerings WHERE name='System-Control-Network'");
    rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new CloudRuntimeException("Unable to find the control network offering.");
    }
    long controlNetworkOfferingId=rs.getLong(1);
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement("SELECT id FROM network_offerings WHERE name='System-Storage-Network'");
    rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new CloudRuntimeException("Unable to find the storage network offering.");
    }
    long storageNetworkOfferingId=rs.getLong(1);
    rs.close();
    pstmt.close();
    for (    Long dcId : dcs) {
      insertNetwork(conn,"ManagementNetwork" + dcId,"Management Network created for Zone " + dcId,"Management","Native",null,null,null,"Static",managementNetworkOfferingId,dcId,"PodBasedNetworkGuru","Setup",1,1,null,null,null,true,null,false);
      insertNetwork(conn,"StorageNetwork" + dcId,"Storage Network created for Zone " + dcId,"Storage","Native",null,null,null,"Static",storageNetworkOfferingId,dcId,"PodBasedNetworkGuru","Setup",1,1,null,null,null,true,null,false);
      insertNetwork(conn,"ControlNetwork" + dcId,"Control Network created for Zone " + dcId,"Control","Native",null,null,null,"Static",publicNetworkOfferingId,dcId,"PublicNetworkGuru","Setup",1,1,null,null,null,true,null,false);
    }
    if (_basicZone) {
      long networkOfferingId=insertNetworkOffering(conn,"System-Guest-Network","System-Guest-Network","Guest",false,true,"Required",true,false,false,false,true,false,true,"Direct");
      for (      Long dcId : dcs) {
        pstmt=conn.prepareStatement("INSERT INTO network_offerings VALUES ('System-Guest-Network','System-Guest-Network',NULL,NULL,NULL,'Guest',NULL,1,0,NULL,now(),NULL,1,'Required',1,0,0,0,1,0,1,'Direct')");
        insertNetwork(conn,"BasicZoneDirectNetwork" + dcId,"Basic Zone Direct Network created for Zone " + dcId,"Guest","Native",null,null,null,"Dhcp",networkOfferingId,dcId,"DirectPodBasedNetworkGuru","Setup",1,1,null,null,null,true,null,false);
      }
    }
 else {
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Can't update data center ",e);
  }
}
