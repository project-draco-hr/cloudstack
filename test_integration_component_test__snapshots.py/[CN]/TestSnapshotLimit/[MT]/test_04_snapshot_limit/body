def test_04_snapshot_limit(self):
    'Test snapshot limit in snapshot policies\n        '
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    volume = volumes[0]
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, volume.id, self.services['recurring_snapshot'])
    self.cleanup.append(recurring_snapshot)
    snapshot_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=volume.id)
    self.assertEqual(isinstance(snapshot_policy, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshot_policy, None, 'Check if result exists in list item call')
    self.assertEqual(snapshot_policy[0].id, recurring_snapshot.id, 'Check recurring snapshot id in list resources call')
    self.assertEqual(snapshot_policy[0].maxsnaps, self.services['recurring_snapshot']['maxsnaps'], 'Check interval type in list resources call')
    time.sleep((self.services['recurring_snapshot']['maxsnaps'] * 3600))
    snapshots = list_snapshots(self.apiclient, volumeid=volume.id, intervaltype=self.services['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertEqual(len(snapshots), self.services['recurring_snapshot']['maxsnaps'], 'Check maximum number of recurring snapshots retained')
    snapshot = snapshots[0]
    time.sleep(self.services['sleep'])
    qresultset = self.dbclient.execute(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % snapshot.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DBQuery returns a valid list')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    snapshot_uuid = qresult[0]
    account_id = qresult[1]
    volume_id = qresult[2]
    hosts = list_hosts(self.apiclient, type='SecondaryStorage', zoneid=self.zone.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        try:
            ssh_client = remoteSSHClient.remoteSSHClient(self.services['mgmt_server']['ipaddress'], self.services['mgmt_server']['port'], self.services['mgmt_server']['username'], self.services['mgmt_server']['password'])
            cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                result = ssh_client.execute(c)
            uuids.append(result)
            cmds = [('umount %s' % self.services['mount_dir'])]
            for c in cmds:
                result = ssh_client.execute(c)
        except Exception as e:
            raise Exception(('SSH access failed for management server: %s' % self.services['mgmt_server']['ipaddress']))
    res = str(uuids)
    self.assertEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    return
