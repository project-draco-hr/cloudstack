def test_01_createVM_snapshotTemplate(self):
    'Test create VM, Snapshot and Template\n        '
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Created VM with ID: %s' % self.virtual_machine.id))
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    volume = volumes[0]
    snapshot = Snapshot.create(self.apiclient, volumes[0].id)
    self.debug(('Snapshot created: ID - %s' % snapshot.id))
    self.cleanup.append(snapshot)
    snapshots = list_snapshots(self.apiclient, id=snapshot.id)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshots, None, 'Check if result exists in list snapshots call')
    self.assertEqual(snapshots[0].id, snapshot.id, 'Check snapshot id in list resources call')
    self.debug(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % snapshot.id))
    qresultset = self.dbclient.execute(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % snapshot.id))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    snapshot_uuid = qresult[0]
    account_id = qresult[1]
    volume_id = qresult[2]
    template = Template.create_from_snapshot(self.apiclient, snapshot, self.services['templates'])
    self.debug(('Created template from snapshot: %s' % template.id))
    self.cleanup.append(template)
    templates = list_templates(self.apiclient, templatefilter=self.services['templates']['templatefilter'], id=template.id)
    self.assertNotEqual(templates, None, 'Check if result exists in list item call')
    self.assertEqual(templates[0].isready, True, 'Check new template state in list templates call')
    new_virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], templateid=template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Created VM with ID: %s from template: %s' % (new_virtual_machine.id, template.id)))
    self.cleanup.append(new_virtual_machine)
    virtual_machines = list_virtual_machines(self.apiclient, id=new_virtual_machine.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
    hosts = list_hosts(self.apiclient, type='SecondaryStorage', zoneid=self.zone.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        time.sleep(self.services['sleep'])
        try:
            ssh_client = remoteSSHClient.remoteSSHClient(self.services['mgmt_server']['ipaddress'], self.services['mgmt_server']['port'], self.services['mgmt_server']['username'], self.services['mgmt_server']['password'])
            cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                self.debug(('command: %s' % c))
                result = ssh_client.execute(c)
                self.debug(('Result: %s' % result))
        except Exception as e:
            self.fail(('SSH failed for Management server: %s' % self.services['mgmt_server']['ipaddress']))
        uuids.append(result)
        cmds = [('umount %s' % self.services['mount_dir'])]
        try:
            for c in cmds:
                self.debug(('command: %s' % c))
                result = ssh_client.execute(c)
                self.debug(('Result: %s' % result))
        except Exception as e:
            self.fail(('SSH failed for Management server: %s' % self.services['mgmt_server']['ipaddress']))
    res = str(uuids)
    self.assertEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    return
