def test_02_accountSnapshotClean(self):
    'Test snapshot cleanup after account deletion\n        '
    accounts = list_accounts(self.apiclient, id=self.account.account.id)
    self.assertEqual(isinstance(accounts, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(accounts), 0, 'Check list Accounts response')
    virtual_machines = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.debug(('VM ID: %s, VM state: %s' % (virtual_machine.id, virtual_machine.state)))
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
    snapshots = list_snapshots(self.apiclient, id=self.snapshot.id)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshots, None, 'Check if result exists in list snapshots call')
    self.assertEqual(snapshots[0].id, self.snapshot.id, 'Check snapshot id in list resources call')
    qresultset = self.dbclient.execute(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % self.snapshot.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB response returns a valid list')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    snapshot_uuid = qresult[0]
    account_id = qresult[1]
    volume_id = qresult[2]
    hosts = list_hosts(self.apiclient, type='SecondaryStorage', zoneid=self.zone.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        time.sleep(self.services['sleep'])
        try:
            ssh_client = remoteSSHClient.remoteSSHClient(self.services['mgmt_server']['ipaddress'], self.services['mgmt_server']['port'], self.services['mgmt_server']['username'], self.services['mgmt_server']['password'])
            cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                self.debug(('command: %s' % c))
                result = ssh_client.execute(c)
                self.debug(('Result: %s' % result))
            uuids.append(result)
            cmds = [('umount %s' % self.services['mount_dir'])]
            for c in cmds:
                result = ssh_client.execute(c)
        except Exception:
            self.fail(('SSH failed for management server: %s' % self.services['mgmt_server']['ipaddress']))
    res = str(uuids)
    self.assertEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    self.debug(('Deleting account: %s' % self.account.account.name))
    self.account.delete(self.apiclient)
    interval = list_configurations(self.apiclient, name='account.cleanup.interval')
    self.assertEqual(isinstance(interval, list), True, 'Check list response returns a valid list')
    self.debug(('account.cleanup.interval: %s' % interval[0].value))
    time.sleep((int(interval[0].value) * 2))
    accounts = list_accounts(self.apiclient, id=self.account.account.id)
    self.assertEqual(accounts, None, 'List accounts should return empty list after account deletion')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        try:
            cmds = [('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                self.debug(('command: %s' % c))
                result = ssh_client.execute(c)
                self.debug(('Result: %s' % result))
            uuids.append(result)
            cmds = [('umount %s' % self.services['mount_dir'])]
            for c in cmds:
                self.debug(('command: %s' % c))
                result = ssh_client.execute(c)
                self.debug(('Result: %s' % result))
        except Exception:
            self.fail(('SSH failed for management server: %s' % self.services['mgmt_server']['ipaddress']))
    res = str(uuids)
    self.assertNotEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    return
