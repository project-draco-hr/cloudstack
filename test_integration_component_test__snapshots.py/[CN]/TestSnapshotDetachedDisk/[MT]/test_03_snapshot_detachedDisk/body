def test_03_snapshot_detachedDisk(self):
    'Test snapshot from detached disk\n        '
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    volume = volumes[0]
    random_data_0 = random_gen(100)
    random_data_1 = random_gen(100)
    try:
        ssh_client = self.virtual_machine.get_ssh_client()
        format_volume_to_ext3(ssh_client, self.services['diskdevice'])
        cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s1 %s' % (self.services['diskdevice'], self.services['mount_dir'])), ('pushd %s' % self.services['mount_dir']), ('mkdir -p %s/{%s,%s} ' % (self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['sub_lvl_dir2'])), ('echo %s > %s/%s/%s' % (random_data_0, self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['random_data'])), ('echo %s > %s/%s/%s' % (random_data_1, self.services['sub_dir'], self.services['sub_lvl_dir2'], self.services['random_data'])), 'sync']
        for c in cmds:
            self.debug(ssh_client.execute(c))
        cmd = detachVolume.detachVolumeCmd()
        cmd.id = volume.id
        self.apiclient.detachVolume(cmd)
        snapshot = Snapshot.create(self.apiclient, volume.id)
        self.cleanup.append(snapshot)
        volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
        self.assertEqual(volumes, None, 'Check Volume is detached')
        snapshots = list_snapshots(self.apiclient, id=snapshot.id)
        self.assertNotEqual(snapshots, None, 'Check if result exists in list snapshots call')
        self.assertEqual(snapshots[0].id, snapshot.id, 'Check snapshot id in list resources call')
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.virtual_machine.ipaddress))
    qresultset = self.dbclient.execute(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % snapshot.id))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    snapshot_uuid = qresult[0]
    account_id = qresult[1]
    volume_id = qresult[2]
    self.assertNotEqual(str(qresult[0]), 'NULL', 'Check if backup_snap_id is not null')
    hosts = list_hosts(self.apiclient, type='SecondaryStorage', zoneid=self.zone.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        time.sleep(self.services['sleep'])
        try:
            ssh_client = remoteSSHClient.remoteSSHClient(self.services['mgmt_server']['ipaddress'], self.services['mgmt_server']['port'], self.services['mgmt_server']['username'], self.services['mgmt_server']['password'])
            cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                result = ssh_client.execute(c)
            uuids.append(result)
            cmds = [('umount %s' % self.services['mount_dir'])]
            for c in cmds:
                result = ssh_client.execute(c)
        except Exception as e:
            self.fail(('SSH failed for management server: %s' % self.services['mgmt_server']['ipaddress']))
    res = str(uuids)
    self.assertEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    return
