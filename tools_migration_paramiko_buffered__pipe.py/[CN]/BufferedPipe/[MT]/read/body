def read(self, nbytes, timeout=None):
    '\n        Read data from the pipe.  The return value is a string representing\n        the data received.  The maximum amount of data to be received at once\n        is specified by C{nbytes}.  If a string of length zero is returned,\n        the pipe has been closed.\n\n        The optional C{timeout} argument can be a nonnegative float expressing\n        seconds, or C{None} for no timeout.  If a float is given, a\n        C{PipeTimeout} will be raised if the timeout period value has\n        elapsed before any data arrives.\n\n        @param nbytes: maximum number of bytes to read\n        @type nbytes: int\n        @param timeout: maximum seconds to wait (or C{None}, the default, to\n            wait forever)\n        @type timeout: float\n        @return: data\n        @rtype: str\n        \n        @raise PipeTimeout: if a timeout was specified and no data was ready\n            before that timeout\n        '
    out = ''
    self._lock.acquire()
    try:
        if (len(self._buffer) == 0):
            if self._closed:
                return out
            if (timeout == 0.0):
                raise PipeTimeout()
            while ((len(self._buffer) == 0) and (not self._closed)):
                then = time.time()
                self._cv.wait(timeout)
                if (timeout is not None):
                    timeout -= (time.time() - then)
                    if (timeout <= 0.0):
                        raise PipeTimeout()
        if (len(self._buffer) <= nbytes):
            out = self._buffer.tostring()
            del self._buffer[:]
            if ((self._event is not None) and (not self._closed)):
                self._event.clear()
        else:
            out = self._buffer[:nbytes].tostring()
            del self._buffer[:nbytes]
    finally:
        self._lock.release()
    return out
