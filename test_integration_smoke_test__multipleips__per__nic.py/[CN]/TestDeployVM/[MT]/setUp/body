def setUp(self):
    self.testdata = TestData().testdata
    self.apiclient = self.testClient.getApiClient()
    self.domain = get_domain(self.apiclient, self.testdata)
    self.zone = get_zone(self.apiclient, self.testdata)
    self.testdata['mode'] = self.zone.networktype
    self.template = get_template(self.apiclient, self.zone.id, self.testdata['ostype'])
    self.account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    self.service_offering = ServiceOffering.create(self.apiclient, self.testdata['service_offering']['small'])
    self.cleanup = [self.service_offering, self.account]
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=self.template.id)
    list_vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.assertEqual(isinstance(list_vms, list), True, 'List VM response was not a valid list')
    self.assertNotEqual(len(list_vms), 0, 'List VM response was empty')
    vm = list_vms[0]
    self.assertEqual(vm.id, self.virtual_machine.id, 'Virtual Machine ids do not match')
    self.assertEqual(vm.name, self.virtual_machine.name, 'Virtual Machine names do not match')
    self.assertEqual(vm.state, 'Running', msg='VM is not in Running state')
