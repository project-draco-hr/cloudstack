{
  Long newCount=Transaction.execute(new TransactionCallback<Long>(){
    @Override public Long doInTransaction(    TransactionStatus status){
      Long newCount=null;
      SearchCriteria<ResourceCountVO> sc=ResourceCountSearch.create();
      sc.setParameters("accountId",accountId);
      _resourceCountDao.lockRows(sc,null,true);
      ResourceCountVO accountRC=_resourceCountDao.findByOwnerAndType(accountId,ResourceOwnerType.Account,type);
      long oldCount=0;
      if (accountRC != null)       oldCount=accountRC.getCount();
      if (type == Resource.ResourceType.user_vm) {
        newCount=_userVmDao.countAllocatedVMsForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.volume) {
        newCount=_volumeDao.countAllocatedVolumesForAccount(accountId);
        long virtualRouterCount=_vmDao.findIdsOfAllocatedVirtualRoutersForAccount(accountId).size();
        newCount=newCount - virtualRouterCount;
      }
 else       if (type == Resource.ResourceType.snapshot) {
        newCount=_snapshotDao.countSnapshotsForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.public_ip) {
        newCount=calculatePublicIpForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.template) {
        newCount=_vmTemplateDao.countTemplatesForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.project) {
        newCount=_projectAccountDao.countByAccountIdAndRole(accountId,Role.Admin);
      }
 else       if (type == Resource.ResourceType.network) {
        newCount=_networkDao.countNetworksUserCanCreate(accountId);
      }
 else       if (type == Resource.ResourceType.vpc) {
        newCount=_vpcDao.countByAccountId(accountId);
      }
 else       if (type == Resource.ResourceType.cpu) {
        newCount=countCpusForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.memory) {
        newCount=calculateMemoryForAccount(accountId);
      }
 else       if (type == Resource.ResourceType.primary_storage) {
        List<Long> virtualRouters=_vmDao.findIdsOfAllocatedVirtualRoutersForAccount(accountId);
        newCount=_volumeDao.primaryStorageUsedForAccount(accountId,virtualRouters);
      }
 else       if (type == Resource.ResourceType.secondary_storage) {
        newCount=calculateSecondaryStorageForAccount(accountId);
      }
 else {
        throw new InvalidParameterValueException("Unsupported resource type " + type);
      }
      _resourceCountDao.setResourceCount(accountId,ResourceOwnerType.Account,type,(newCount == null) ? 0 : newCount.longValue());
      if (oldCount != newCount) {
        s_logger.info("Discrepency in the resource count " + "(original count=" + oldCount + " correct count = "+ newCount+ ") for type "+ type+ " for account ID "+ accountId+ " is fixed during resource count recalculation.");
      }
      return newCount;
    }
  }
);
  return (newCount == null) ? 0 : newCount.longValue();
}
