{
  ResourceCountSearch=_resourceCountDao.createSearchBuilder();
  ResourceCountSearch.and("id",ResourceCountSearch.entity().getId(),SearchCriteria.Op.IN);
  ResourceCountSearch.and("accountId",ResourceCountSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  ResourceCountSearch.and("domainId",ResourceCountSearch.entity().getDomainId(),SearchCriteria.Op.EQ);
  ResourceCountSearch.done();
  templateSizeSearch=_vmTemplateHostDao.createSearchBuilder(SumCount.class);
  templateSizeSearch.select("sum",Func.SUM,templateSizeSearch.entity().getSize());
  templateSizeSearch.and("downloadState",templateSizeSearch.entity().getDownloadState(),Op.EQ);
  templateSizeSearch.and("destroyed",templateSizeSearch.entity().getDestroyed(),Op.EQ);
  SearchBuilder<VMTemplateVO> join1=_vmTemplateDao.createSearchBuilder();
  join1.and("accountId",join1.entity().getAccountId(),Op.EQ);
  templateSizeSearch.join("templates",join1,templateSizeSearch.entity().getTemplateId(),join1.entity().getId(),JoinBuilder.JoinType.INNER);
  templateSizeSearch.done();
  _resourceCountCheckInterval=NumbersUtil.parseInt(_configDao.getValue(Config.ResourceCountCheckInterval.key()),0);
  if (_resourceCountCheckInterval > 0) {
    _rcExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("ResourceCountChecker"));
  }
  projectResourceLimitMap.put(Resource.ResourceType.public_ip,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectPublicIPs.key())));
  projectResourceLimitMap.put(Resource.ResourceType.snapshot,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectSnapshots.key())));
  projectResourceLimitMap.put(Resource.ResourceType.template,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectTemplates.key())));
  projectResourceLimitMap.put(Resource.ResourceType.user_vm,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectUserVms.key())));
  projectResourceLimitMap.put(Resource.ResourceType.volume,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectVolumes.key())));
  projectResourceLimitMap.put(Resource.ResourceType.network,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectNetworks.key())));
  projectResourceLimitMap.put(Resource.ResourceType.vpc,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectVpcs.key())));
  projectResourceLimitMap.put(Resource.ResourceType.cpu,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectCpus.key())));
  projectResourceLimitMap.put(Resource.ResourceType.memory,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectMemory.key())));
  projectResourceLimitMap.put(Resource.ResourceType.primary_storage,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectPrimayStorage.key())));
  projectResourceLimitMap.put(Resource.ResourceType.secondary_storage,Long.parseLong(_configDao.getValue(Config.DefaultMaxProjectSecondaryStorage.key())));
  accountResourceLimitMap.put(Resource.ResourceType.public_ip,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountPublicIPs.key())));
  accountResourceLimitMap.put(Resource.ResourceType.snapshot,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountSnapshots.key())));
  accountResourceLimitMap.put(Resource.ResourceType.template,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountTemplates.key())));
  accountResourceLimitMap.put(Resource.ResourceType.user_vm,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountUserVms.key())));
  accountResourceLimitMap.put(Resource.ResourceType.volume,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountVolumes.key())));
  accountResourceLimitMap.put(Resource.ResourceType.network,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountNetworks.key())));
  accountResourceLimitMap.put(Resource.ResourceType.vpc,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountVpcs.key())));
  accountResourceLimitMap.put(Resource.ResourceType.cpu,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountCpus.key())));
  accountResourceLimitMap.put(Resource.ResourceType.memory,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountMemory.key())));
  accountResourceLimitMap.put(Resource.ResourceType.primary_storage,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountPrimayStorage.key())));
  accountResourceLimitMap.put(Resource.ResourceType.secondary_storage,Long.parseLong(_configDao.getValue(Config.DefaultMaxAccountSecondaryStorage.key())));
  return true;
}
