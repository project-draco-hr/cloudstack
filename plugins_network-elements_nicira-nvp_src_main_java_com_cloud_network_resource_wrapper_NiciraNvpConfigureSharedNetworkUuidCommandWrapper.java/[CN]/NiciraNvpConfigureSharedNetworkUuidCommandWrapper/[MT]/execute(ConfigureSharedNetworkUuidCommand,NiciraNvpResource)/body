{
  final String logicalRouterUuid=command.getLogicalRouterUuid();
  final String logicalSwitchUuid=command.getLogicalSwitchUuid();
  final String portIpAddress=command.getPortIpAddress();
  final List<NiciraNvpTag> tags=new ArrayList<NiciraNvpTag>();
  tags.add(new NiciraNvpTag("cs_account",command.getOwnerName()));
  final long networkId=command.getNetworkId();
  final NiciraNvpApi niciraNvpApi=niciraNvpResource.getNiciraNvpApi();
  s_logger.debug("Attaching Logical Switch " + logicalSwitchUuid + " on Logical Router "+ logicalRouterUuid+ " for Shared Network "+ networkId);
  s_logger.info("Looking for Logical Switch " + logicalSwitchUuid + " display name");
  String logicalSwitchDisplayName;
  try {
    List<LogicalSwitch> lSwitchList=niciraNvpApi.findLogicalSwitch(logicalSwitchUuid);
    if (lSwitchList != null) {
      if (lSwitchList.size() == 1) {
        logicalSwitchDisplayName=lSwitchList.get(0).getDisplayName();
      }
 else {
        s_logger.error("More than one Logical Switch found with uuid " + logicalSwitchUuid);
        throw new CloudRuntimeException("More than one Logical Switch found with uuid=" + logicalSwitchUuid);
      }
    }
 else {
      s_logger.error("Logical Switch " + logicalSwitchUuid + " not found");
      throw new CloudRuntimeException("Logical Switch " + logicalSwitchUuid + " not found");
    }
  }
 catch (  NiciraNvpApiException e) {
    s_logger.warn("Logical Switch " + logicalSwitchUuid + " not found, retrying");
    final CommandRetryUtility retryUtility=niciraNvpResource.getRetryUtility();
    retryUtility.addRetry(command,NUM_RETRIES);
    return retryUtility.retry(command,ConfigureSharedNetworkUuidAnswer.class,e);
  }
catch (  CloudRuntimeException e) {
    s_logger.info("Shared network UUID vlan id failed due to : " + e.getMessage());
    return new ConfigureSharedNetworkUuidAnswer(command,false,e.getMessage());
  }
  s_logger.info("Found display name " + logicalSwitchDisplayName + " for Logical Switch "+ logicalSwitchUuid);
  s_logger.debug("Creating Logical Router Port in Logical Router " + logicalRouterUuid);
  LogicalRouterPort lRouterPort=null;
  try {
    lRouterPort=new LogicalRouterPort();
    lRouterPort.setAdminStatusEnabled(true);
    lRouterPort.setDisplayName(niciraNvpResource.truncate(logicalSwitchDisplayName + "-uplink",NAME_MAX_LEN));
    lRouterPort.setTags(tags);
    final List<String> ipAddresses=new ArrayList<String>();
    ipAddresses.add(portIpAddress);
    lRouterPort.setIpAddresses(ipAddresses);
    lRouterPort=niciraNvpApi.createLogicalRouterPort(logicalRouterUuid,lRouterPort);
  }
 catch (  NiciraNvpApiException e) {
    s_logger.warn("Could not create Logical Router Port on Logical Router " + logicalRouterUuid + " due to: "+ e.getMessage()+ ", retrying");
    return handleException(e,command,niciraNvpResource);
  }
  s_logger.debug("Logical Router Port " + lRouterPort.getUuid() + " ("+ lRouterPort.getDisplayName()+ ") successfully created in Logical Router "+ logicalRouterUuid);
  s_logger.debug("Creating Logical Switch Port in Logical Switch " + logicalSwitchUuid + " ("+ logicalSwitchDisplayName+ ")");
  LogicalSwitchPort lSwitchPort=null;
  try {
    lSwitchPort=new LogicalSwitchPort(niciraNvpResource.truncate("lrouter-uplink",NAME_MAX_LEN),tags,true);
    lSwitchPort=niciraNvpApi.createLogicalSwitchPort(logicalSwitchUuid,lSwitchPort);
  }
 catch (  NiciraNvpApiException e) {
    s_logger.warn("Could not create Logical Switch Port on Logical Switch " + logicalSwitchUuid + " ("+ logicalSwitchDisplayName+ ")  due to: "+ e.getMessage());
    cleanupLRouterPort(logicalRouterUuid,lRouterPort,niciraNvpApi);
    return handleException(e,command,niciraNvpResource);
  }
  s_logger.debug("Logical Switch Port " + lSwitchPort.getUuid() + " ("+ lSwitchPort.getDisplayName()+ ") successfully created in Logical Switch "+ logicalSwitchUuid+ " ("+ logicalSwitchDisplayName+ ")");
  s_logger.debug("Attaching Logical Router Port " + lRouterPort.getUuid() + " ("+ lRouterPort.getDisplayName()+ ") to Logical Switch Port "+ lSwitchPort.getUuid()+ " ("+ lSwitchPort.getDisplayName()+ ") with a PatchAttachment");
  try {
    niciraNvpApi.updateLogicalRouterPortAttachment(logicalRouterUuid,lRouterPort.getUuid(),new PatchAttachment(lSwitchPort.getUuid()));
  }
 catch (  NiciraNvpApiException e) {
    s_logger.warn("Could not attach Logical Router Port " + lRouterPort.getUuid() + " ("+ lRouterPort.getDisplayName()+ ") to Logical Switch Port "+ lSwitchPort.getUuid()+ " ("+ lSwitchPort.getDisplayName()+ ") due to: "+ e.getMessage()+ ", retrying");
    cleanupLRouterPort(logicalRouterUuid,lRouterPort,niciraNvpApi);
    cleanupLSwitchPort(logicalSwitchUuid,lSwitchPort,niciraNvpApi);
    return handleException(e,command,niciraNvpResource);
  }
  s_logger.debug("Logical Router Port " + lRouterPort.getUuid() + " ("+ lRouterPort.getDisplayName()+ ") successfully attached to to Logical Switch Port "+ lSwitchPort.getUuid()+ " ("+ lSwitchPort.getDisplayName()+ ") with a PatchAttachment");
  s_logger.debug("Attaching Logical Switch Port " + lSwitchPort.getUuid() + " ("+ lSwitchPort.getDisplayName()+ ") to Logical Router Port "+ lRouterPort.getUuid()+ " ("+ lRouterPort.getDisplayName()+ ") with a PatchAttachment");
  try {
    niciraNvpApi.updateLogicalSwitchPortAttachment(logicalSwitchUuid,lSwitchPort.getUuid(),new PatchAttachment(lRouterPort.getUuid()));
  }
 catch (  NiciraNvpApiException e) {
    s_logger.warn("Could not attach Logical Switch Port " + lSwitchPort.getUuid() + " ("+ lSwitchPort.getDisplayName()+ ") to Logical Router Port "+ lRouterPort.getUuid()+ " ("+ lRouterPort.getDisplayName()+ ") due to: "+ e.getMessage()+ ", retrying");
    cleanupLRouterPort(logicalRouterUuid,lRouterPort,niciraNvpApi);
    cleanupLSwitchPort(logicalSwitchUuid,lSwitchPort,niciraNvpApi);
    return handleException(e,command,niciraNvpResource);
  }
  s_logger.debug("Logical Switch Port " + lSwitchPort.getUuid() + " ("+ lSwitchPort.getDisplayName()+ ") successfully attached to to Logical Router Port "+ lRouterPort.getUuid()+ " ("+ lRouterPort.getDisplayName()+ ") with a PatchAttachment");
  s_logger.info("Successfully attached Logical Switch " + logicalSwitchUuid + " on Logical Router "+ logicalRouterUuid+ " for Shared Network "+ networkId);
  return new ConfigureSharedNetworkUuidAnswer(command,true,"OK");
}
