def test_01_revokeIngressRule(self):
    'Test revoke ingress rule\n        '
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_group.id))
    ingress_rule = security_group.authorize(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(ingress_rule, dict), True, 'Check ingress rule created properly')
    ssh_rule = ingress_rule['ingressrule'][0].__dict__
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id])
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    try:
        self.debug(('SSH into VM: %s' % self.virtual_machine.id))
        self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machine.ipaddress, e)))
    self.debug(('Revoking ingress rule for sec group ID: %s for ssh access' % security_group.id))
    result = security_group.revoke(self.apiclient, id=ssh_rule['ruleid'])
    with self.assertRaises(Exception):
        self.debug(('SSH into VM: %s' % self.virtual_machine.id))
        remoteSSHClient.remoteSSHClient(self.virtual_machine.ssh_ip, self.virtual_machine.ssh_port, self.virtual_machine.username, self.virtual_machine.password)
    return
