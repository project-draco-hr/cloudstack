@attr(tags=['sg', 'eip', 'advancedsg'])
def test_03_stopStartVM_verifyIngressAccess(self):
    'Test Start/Stop VM and Verify ingress rule'
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.account.name, domainid=self.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorize Ingress Rule for Security Group %s for account: %s' % (security_group.id, self.account.name)))
    ingress_rule = security_group.authorize(self.apiclient, self.services['security_group'], account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(ingress_rule, dict), True, 'Check ingress rule created properly')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id])
    self.debug(('Deploying VM in account: %s' % self.account.name))
    try:
        self.debug(('Trying to SSH into VM %s' % self.virtual_machine.ssh_ip))
        self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH access failed for ingress rule ID: %s' % ingress_rule['id']))
    try:
        self.virtual_machine.stop(self.apiclient)
        self.virtual_machine.start(self.apiclient)
        time.sleep(self.services['sleep'])
    except Exception as e:
        self.fail(('Exception occured: %s' % e))
    try:
        self.debug(('Trying to SSH into VM %s' % self.virtual_machine.ssh_ip))
        self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH access failed for ingress rule ID: %s' % ingress_rule['id']))
    return
