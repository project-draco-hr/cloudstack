def test_01_authorizeIngressRule_AfterDeployVM(self):
    'Test delete security group with running VM'
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorize Ingress Rule for Security Group %s for account: %s' % (security_group.id, self.account.account.name)))
    ingress_rule_1 = security_group.authorize(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(ingress_rule_1, dict), True, 'Check ingress rule created properly')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id])
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    self.debug(('Authorize Ingress Rule for Security Group %s for account: %s' % (security_group.id, self.account.account.name)))
    ingress_rule_2 = security_group.authorize(self.apiclient, self.services['security_group_2'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(ingress_rule_2, dict), True, 'Check ingress rule created properly')
    try:
        self.debug(('Trying to SSH into VM %s on port %s' % (self.virtual_machine.ssh_ip, self.services['security_group']['endport'])))
        self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH access failed for ingress rule ID: %s, %s' % (ingress_rule_1['id'], e)))
    try:
        self.debug(('Trying to ping VM %s' % self.virtual_machine.ssh_ip))
        result = subprocess.call(['ping', '-c 1', self.virtual_machine.ssh_ip])
        self.debug(('Ping result: %s' % result))
        self.assertEqual(result, 0, 'Check if ping is successful or not')
    except Exception as e:
        self.fail(('Ping failed for ingress rule ID: %s, %s' % (ingress_rule_2['id'], e)))
    return
