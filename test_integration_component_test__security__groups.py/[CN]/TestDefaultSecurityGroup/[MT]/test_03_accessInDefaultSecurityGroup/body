def test_03_accessInDefaultSecurityGroup(self):
    'Test access in default security group\n        '
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM with ID: %s' % self.virtual_machine.id))
    self.cleanup.append(self.virtual_machine)
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check for list VM response')
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    vm_response = list_vm_response[0]
    self.assertNotEqual(len(list_vm_response), 0, 'Check VM available in List Virtual Machines')
    self.assertEqual(vm_response.id, self.virtual_machine.id, 'Check virtual machine id in listVirtualMachines')
    self.assertEqual(vm_response.displayname, self.virtual_machine.displayname, 'Check virtual machine displayname in listVirtualMachines')
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.debug(('List Security groups response: %s' % str(sercurity_groups)))
    self.assertNotEqual(len(sercurity_groups), 0, 'Check List Security groups response')
    self.assertEqual(hasattr(sercurity_groups, 'ingressrule'), False, 'Check ingress rule attribute for default security group')
    with self.assertRaises(Exception):
        self.debug(('SSH into VM: %s' % self.virtual_machine.ssh_ip))
        ssh = remoteSSHClient.remoteSSHClient(self.virtual_machine.ssh_ip, self.virtual_machine.ssh_port, self.virtual_machine.username, self.virtual_machine.password)
    return
