@attr(tags=['sg', 'eip', 'advancedsg'])
def test_01_authorizeIngressRule(self):
    'Test authorize ingress rule\n        '
    security_group = SecurityGroup.create(self.apiclient, self.testdata['security_group'], account=self.account.name, domainid=self.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    ingress_rule = security_group.authorize(self.apiclient, self.testdata['ingress_rule'], account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(ingress_rule, dict), True, 'Check ingress rule created properly')
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_group.id))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id], mode=self.testdata['mode'])
    self.debug(('Deploying VM in account: %s' % self.account.name))
    try:
        self.debug(('SSH into VM: %s' % self.virtual_machine.id))
        self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machine.ipaddress, e)))
    return
