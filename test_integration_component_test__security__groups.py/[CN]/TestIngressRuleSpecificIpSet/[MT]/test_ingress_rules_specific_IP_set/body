@attr(tags=['sg', 'eip', 'advancedsg'])
def test_ingress_rules_specific_IP_set(self):
    'Test ingress rules for specific IP set\n\n        # Validate the following:\n        # 1. Create an account and add ingress rule\n             (CIDR 0.0.0.0/0) in default security group\n        # 2. Deploy 2 VMs in the default sec group\n        # 3. Check if SSH works for the VMs from test machine, should work\n        # 4. Check if SSH works for the VM from different machine (\n             for instance, management server), should work\n        # 5. Revoke the ingress rule and add ingress rule for specific IP\n             set (including test machine)\n        # 6. Add new Vm to default sec group\n        # 7. Verify that SSH works to VM from test machine\n        # 8. Verify that SSH does not work to VM from different machine which\n             is outside specified IP set\n        '
    security_groups = SecurityGroup.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(validateList(security_groups)[0], PASS, 'Security groups list validation failed')
    defaultSecurityGroup = security_groups[0]
    cmd = authorizeSecurityGroupIngress.authorizeSecurityGroupIngressCmd()
    cmd.securitygroupid = defaultSecurityGroup.id
    cmd.protocol = 'TCP'
    cmd.startport = 22
    cmd.endport = 22
    cmd.cidrlist = '0.0.0.0/0'
    ingress_rule = self.apiclient.authorizeSecurityGroupIngress(cmd)
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[defaultSecurityGroup.id], mode=self.testdata['mode'])
    self.cleanup.append(virtual_machine_1)
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[defaultSecurityGroup.id], mode=self.testdata['mode'])
    self.cleanup.append(virtual_machine_2)
    try:
        SshClient(virtual_machine_1.ssh_ip, virtual_machine_1.ssh_port, virtual_machine_1.username, virtual_machine_1.password)
    except Exception as e:
        self.revokeSGRule(ingress_rule.ingressrule[0].ruleid)
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine_1.ipaddress, e)))
    try:
        SshClient(virtual_machine_2.ssh_ip, virtual_machine_2.ssh_port, virtual_machine_2.username, virtual_machine_2.password)
    except Exception as e:
        self.revokeSGRule(ingress_rule.ingressrule[0].ruleid)
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine_2.ipaddress, e)))
    try:
        sshClient = SshClient(self.mgtSvrDetails['mgtSvrIp'], 22, self.mgtSvrDetails['user'], self.mgtSvrDetails['passwd'])
    except Exception as e:
        self.revokeSGRule(ingress_rule.ingressrule[0].ruleid)
        self.fail(('SSH Access failed for %s: %s' % (self.mgtSvrDetails['mgtSvrIp'], e)))
    response = sshClient.execute(('ssh %s@%s -v' % (virtual_machine_1.username, virtual_machine_1.ssh_ip)))
    self.debug(('Response is :%s' % response))
    self.assertTrue(('connection established' in str(response).lower()), ('SSH to VM at %s failed from external machine ip %s other than test machine' % (virtual_machine_1.ssh_ip, self.mgtSvrDetails['mgtSvrIp'])))
    response = sshClient.execute(('ssh %s@%s -v' % (virtual_machine_2.username, virtual_machine_2.ssh_ip)))
    self.debug(('Response is :%s' % response))
    self.assertTrue(('connection established' in str(response).lower()), ('SSH to VM at %s failed from external machine ip %s other than test machine' % (virtual_machine_2.ssh_ip, self.mgtSvrDetails['mgtSvrIp'])))
    virtual_machine_3 = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[defaultSecurityGroup.id], mode=self.testdata['mode'])
    self.cleanup.append(virtual_machine_3)
    security_groups = SecurityGroup.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(validateList(security_groups)[0], PASS, 'Security groups list validation failed')
    for sg in security_groups:
        if (not sg.ingressrule):
            continue
        self.revokeSGRule(sg.ingressrule[0].ruleid)
    localMachineIpAddress = self.getLocalMachineIpAddress()
    cidr = (localMachineIpAddress + '/32')
    cmd = authorizeSecurityGroupIngress.authorizeSecurityGroupIngressCmd()
    cmd.securitygroupid = defaultSecurityGroup.id
    cmd.protocol = 'TCP'
    cmd.startport = 22
    cmd.endport = 22
    cmd.cidrlist = cidr
    ingress_rule = self.apiclient.authorizeSecurityGroupIngress(cmd)
    if self.testdata['configurableData']['setHostConfigurationForIngressRule']:
        self.setHostConfiguration()
        time.sleep(180)
    virtual_machine_3.stop(self.apiclient)
    virtual_machine_3.start(self.apiclient)
    try:
        sshClient = SshClient(virtual_machine_3.ssh_ip, virtual_machine_3.ssh_port, virtual_machine_3.username, virtual_machine_3.password)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine_3.ssh_ip, e)))
    sshClient = SshClient(self.mgtSvrDetails['mgtSvrIp'], 22, self.mgtSvrDetails['user'], self.mgtSvrDetails['passwd'])
    response = sshClient.execute(('ssh %s@%s -v' % (virtual_machine_3.username, virtual_machine_3.ssh_ip)))
    self.debug(('Response is :%s' % response))
    self.assertFalse(('connection established' in str(response).lower()), ('SSH to VM at %s succeeded from external machine ip %s other than test machine' % (virtual_machine_3.ssh_ip, self.mgtSvrDetails['mgtSvrIp'])))
    return
