{
  CopyCmdAnswer copyCmdAnswer=null;
  String errMsg=null;
  try {
    HostVO hostVO=getHost(snapshotInfo);
    boolean usingBackendSnapshot=usingBackendSnapshotFor(snapshotInfo);
    boolean computeClusterSupportsResign=clusterDao.getSupportsResigning(hostVO.getClusterId());
    if (usingBackendSnapshot && !computeClusterSupportsResign) {
      String noSupportForResignErrMsg="Unable to locate an applicable host with which to perform a resignature operation : Cluster ID = " + hostVO.getClusterId();
      LOGGER.warn(noSupportForResignErrMsg);
      throw new CloudRuntimeException(noSupportForResignErrMsg);
    }
    boolean canStorageSystemCreateVolumeFromVolume=canStorageSystemCreateVolumeFromVolume(snapshotInfo);
    boolean useCloning=usingBackendSnapshot || (canStorageSystemCreateVolumeFromVolume && computeClusterSupportsResign);
    VolumeDetailVO volumeDetail=null;
    if (useCloning) {
      volumeDetail=new VolumeDetailVO(volumeInfo.getId(),"cloneOfSnapshot",String.valueOf(snapshotInfo.getId()),false);
      volumeDetail=volumeDetailsDao.persist(volumeDetail);
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findByIdIncludingRemoved(volumeInfo.getDiskOfferingId());
    SnapshotVO snapshot=_snapshotDao.findById(snapshotInfo.getId());
    _volumeService.updateHypervisorSnapshotReserveForVolume(diskOffering,volumeInfo.getId(),snapshot.getHypervisorType());
    AsyncCallFuture<VolumeApiResult> future=_volumeService.createVolumeAsync(volumeInfo,volumeInfo.getDataStore());
    VolumeApiResult result=future.get();
    if (volumeDetail != null) {
      volumeDetailsDao.remove(volumeDetail.getId());
    }
    if (result.isFailed()) {
      LOGGER.warn("Failed to create a volume: " + result.getResult());
      throw new CloudRuntimeException(result.getResult());
    }
    volumeInfo=_volumeDataFactory.getVolume(volumeInfo.getId(),volumeInfo.getDataStore());
    volumeInfo.processEvent(Event.MigrationRequested);
    volumeInfo=_volumeDataFactory.getVolume(volumeInfo.getId(),volumeInfo.getDataStore());
    if (useCloning) {
      copyCmdAnswer=performResignature(volumeInfo,hostVO);
    }
 else {
      hostVO=getHost(snapshotInfo.getDataCenterId(),false);
      copyCmdAnswer=performCopyOfVdi(volumeInfo,snapshotInfo,hostVO);
    }
    if (copyCmdAnswer == null || !copyCmdAnswer.getResult()) {
      if (copyCmdAnswer != null && !StringUtils.isEmpty(copyCmdAnswer.getDetails())) {
        errMsg=copyCmdAnswer.getDetails();
      }
 else {
        errMsg="Unable to create volume from snapshot";
      }
    }
  }
 catch (  Exception ex) {
    errMsg=ex.getMessage() != null ? ex.getMessage() : "Copy operation failed in 'StorageSystemDataMotionStrategy.handleCreateVolumeFromSnapshotBothOnStorageSystem'";
  }
  CopyCommandResult result=new CopyCommandResult(null,copyCmdAnswer);
  result.setResult(errMsg);
  callback.complete(result);
}
