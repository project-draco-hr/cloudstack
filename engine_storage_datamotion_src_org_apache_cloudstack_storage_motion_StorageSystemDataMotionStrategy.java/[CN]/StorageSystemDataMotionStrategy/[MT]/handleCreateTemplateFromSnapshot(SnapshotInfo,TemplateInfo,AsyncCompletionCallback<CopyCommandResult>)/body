{
  try {
    snapshotInfo.processEvent(Event.CopyingRequested);
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException("This snapshot is not currently in a state where it can be used to create a template.");
  }
  HostVO hostVO=getHost(snapshotInfo);
  boolean usingBackendSnapshot=usingBackendSnapshotFor(snapshotInfo);
  boolean computeClusterSupportsResign=clusterDao.getSupportsResigning(hostVO.getClusterId());
  if (usingBackendSnapshot && !computeClusterSupportsResign) {
    String noSupportForResignErrMsg="Unable to locate an applicable host with which to perform a resignature operation : Cluster ID = " + hostVO.getClusterId();
    LOGGER.warn(noSupportForResignErrMsg);
    throw new CloudRuntimeException(noSupportForResignErrMsg);
  }
  try {
    if (usingBackendSnapshot) {
      createVolumeFromSnapshot(hostVO,snapshotInfo,true);
    }
    DataStore srcDataStore=snapshotInfo.getDataStore();
    String value=_configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
    int primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
    CopyCommand copyCommand=new CopyCommand(snapshotInfo.getTO(),templateInfo.getTO(),primaryStorageDownloadWait,VirtualMachineManager.ExecuteInSequence.value());
    String errMsg=null;
    CopyCmdAnswer copyCmdAnswer=null;
    try {
      if (usingBackendSnapshot == false) {
        _volumeService.grantAccess(snapshotInfo,hostVO,srcDataStore);
      }
      Map<String,String> srcDetails=getSnapshotDetails(snapshotInfo);
      copyCommand.setOptions(srcDetails);
      copyCmdAnswer=(CopyCmdAnswer)_agentMgr.send(hostVO.getId(),copyCommand);
    }
 catch (    CloudRuntimeException|AgentUnavailableException|OperationTimedoutException ex) {
      String msg="Failed to create template from snapshot (Snapshot ID = " + snapshotInfo.getId() + ") : ";
      LOGGER.warn(msg,ex);
      throw new CloudRuntimeException(msg + ex.getMessage());
    }
 finally {
      try {
        _volumeService.revokeAccess(snapshotInfo,hostVO,srcDataStore);
      }
 catch (      Exception ex) {
        LOGGER.warn("Error revoking access to snapshot (Snapshot ID = " + snapshotInfo.getId() + "): "+ ex.getMessage(),ex);
      }
      if (copyCmdAnswer == null || !copyCmdAnswer.getResult()) {
        if (copyCmdAnswer != null && !StringUtils.isEmpty(copyCmdAnswer.getDetails())) {
          errMsg=copyCmdAnswer.getDetails();
        }
 else {
          errMsg="Unable to create template from snapshot";
        }
      }
      try {
        if (StringUtils.isEmpty(errMsg)) {
          snapshotInfo.processEvent(Event.OperationSuccessed);
        }
 else {
          snapshotInfo.processEvent(Event.OperationFailed);
        }
      }
 catch (      Exception ex) {
        LOGGER.warn("Error processing snapshot event: " + ex.getMessage(),ex);
      }
    }
    CopyCommandResult result=new CopyCommandResult(null,copyCmdAnswer);
    result.setResult(errMsg);
    callback.complete(result);
  }
  finally {
    if (usingBackendSnapshot) {
      deleteVolumeFromSnapshot(snapshotInfo);
    }
  }
}
