{
  if (!initialized) {
    throw new IllegalStateException("Error : ElastiCenterClient is not initialized.");
  }
  if (command == null || command.trim().isEmpty()) {
    throw new InvalidParameterException("No command to execute.");
  }
  try {
    ClientConfig config=new DefaultClientConfig();
    Client client=Client.create(config);
    WebResource webResource=client.resource(UriBuilder.fromUri(restprotocol + elastiCenterAddress + restpath).build());
    MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();
    queryParams.add(queryparamapikey,apiKey);
    queryParams.add(queryparamresponse,responseType);
    queryParams.add(queryparamcommand,command);
    if (null != params) {
      for (      String key : params.keySet()) {
        queryParams.add(key,params.getFirst(key));
      }
    }
    if (debug) {
      System.out.println("Command Sent " + command + " : "+ queryParams);
    }
    ClientResponse response=webResource.queryParams(queryParams).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    if (response.getStatus() >= 300) {
      if (debug)       System.out.println("ElastiCenter returned error code : " + response.getStatus());
      if (401 == response.getStatus()) {
        throw new InvalidCredentialsException("Please specify a valid API Key.");
      }
 else       if (431 == response.getStatus()) {
        throw new InvalidParameterException(response.getHeaders().getFirst("X-Description"));
      }
 else       if (432 == response.getStatus()) {
        throw new InvalidParameterException(command + " does not exist on the ElastiCenter server.  Please specify a valid command or contact your ElastiCenter Administrator.");
      }
 else {
        throw new ServiceUnavailableException("Internal Error. Please contact your ElastiCenter Administrator.");
      }
    }
 else     if (null != responeObj) {
      String jsonResponse=response.getEntity(String.class);
      if (debug) {
        System.out.println("Command Response : " + jsonResponse);
      }
      Gson gson=new Gson();
      return gson.fromJson(jsonResponse,responeObj.getClass());
    }
 else {
      return "Success";
    }
  }
 catch (  Throwable t) {
    throw t;
  }
}
