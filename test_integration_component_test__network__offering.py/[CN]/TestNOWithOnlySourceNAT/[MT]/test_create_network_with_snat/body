@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_create_network_with_snat(self):
    'Test to create a network with SourceNAT service only'
    self.account = Account.create(self.apiclient, self.services['account'], admin=False, domainid=self.domain.id)
    self.cleanup.append(self.account)
    self.debug('creating network offering with source NAT only')
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering_sourcenat'])
    self.network_offering.update(self.apiclient, state='Enabled')
    self.debug(('Created n/w offering with ID: %s' % self.network_offering.id))
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created guest network with ID: %s within account %s' % (self.network.id, self.account.name)))
    self.debug(('Deploying VM in account: %s on the network %s' % (self.account.name, self.network.id)))
    VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    src_nat_list = PublicIPAddress.list(self.apiclient, associatednetworkid=self.network.id, account=self.account.name, domainid=self.account.domainid, listall=True, issourcenat=True)
    self.assertEqual(isinstance(src_nat_list, list), True, 'List Public IP should return a valid source NAT')
    self.assertNotEqual(len(src_nat_list), 0, 'Length of response from listPublicIp should not be 0')
    src_nat = src_nat_list[0]
    self.debug(('Successfully implemented network with source NAT IP: %s' % src_nat.ipaddress))
    with self.assertRaises(Exception):
        FireWallRule.create(self.apiclient, ipaddressid=src_nat.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    return
