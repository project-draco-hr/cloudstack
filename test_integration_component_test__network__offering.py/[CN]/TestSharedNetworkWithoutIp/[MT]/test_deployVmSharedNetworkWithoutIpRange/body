@attr(tags=['advanced', 'advancedns', 'simulator', 'network', 'api'])
def test_deployVmSharedNetworkWithoutIpRange(self):
    'Test deployVM in shared network without startIp/endIp\n        '
    self.debug('Fetching default shared network offering from nw offerings')
    network_offerings = NetworkOffering.list(self.apiclient, listall=True, guestiptype='Shared', name='DefaultSharedNetworkOffering', displaytext='Offering for Shared networks')
    self.assertEqual(isinstance(network_offerings, list), True, 'Nw offerings should have atleast a shared nw offering')
    shared_nw_off = network_offerings[0]
    self.debug(('Shared netwrk offering: %s' % shared_nw_off.name))
    self.debug('Creating a network from shared network offering')
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=shared_nw_off.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    try:
        VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
        self.debug(('Deployed VM in network: %s' % self.network.id))
    except Exception as e:
        self.fail(('Deply Vm in shared network failed! - %s' % e))
    return
