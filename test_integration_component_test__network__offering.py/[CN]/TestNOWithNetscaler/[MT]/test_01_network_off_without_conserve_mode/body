def test_01_network_off_without_conserve_mode(self):
    'Test Nw off with Conserve mode off, VR-All services, LB-netscaler\n        '
    self.debug('Creating n/w offering with all services in VR & conserve mode:ON')
    self.network_offering = NetworkOffering.create(self.api_client, self.services['network_offering_netscaler'], conservemode=False)
    self.cleanup.append(self.network_offering)
    self.debug(('Created n/w offering with ID: %s' % self.network_offering.id))
    self.network_offering.update(self.apiclient, state='Enabled')
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    src_nat_list = PublicIPAddress.list(self.apiclient, associatednetworkid=self.network.id, account=self.account.account.name, domainid=self.account.account.domainid, listall=True, issourcenat=True)
    self.assertEqual(isinstance(src_nat_list, list), True, 'List Public IP should return a valid source NAT')
    self.assertNotEqual(len(src_nat_list), 0, 'Length of response from listPublicIp should not be 0')
    src_nat = src_nat_list[0]
    self.debug(('Trying to create LB rule on source NAT IP: %s' % src_nat.ipaddress))
    with self.assertRaises(Exception):
        LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=src_nat.id, accountid=self.account.account.name)
    self.debug(('Trying to create a port forwarding rule in source NAT: %s' % src_nat.ipaddress))
    with self.assertRaises(Exception):
        NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], ipaddressid=src_nat.id)
    self.debug(('Creating firewall rule on source NAT: %s' % src_nat.ipaddress))
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=src_nat.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug(('Created firewall rule: %s' % fw_rule.id))
    fw_rules = FireWallRule.list(self.apiclient, id=fw_rule.id)
    self.assertEqual(isinstance(fw_rules, list), True, 'List fw rules should return a valid firewall rules')
    self.assertNotEqual(len(fw_rules), 0, 'Length of fw rules response should not be zero')
    self.debug(('Associating public IP for network: %s' % self.network.id))
    ip_with_nat_rule = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=self.network.id)
    self.debug(('Associated %s with network %s' % (ip_with_nat_rule.ipaddress.ipaddress, self.network.id)))
    self.debug(('Creating PF rule for IP address: %s' % ip_with_nat_rule.ipaddress.ipaddress))
    NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], ipaddressid=ip_with_nat_rule.ipaddress.id)
    self.debug(('Trying to create LB rule on IP with NAT: %s' % ip_with_nat_rule.ipaddress.ipaddress))
    with self.assertRaises(Exception):
        LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ip_with_nat_rule.ipaddress.id, accountid=self.account.account.name)
    self.debug('Creating PF rule with public port: 66')
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule_port_66'], ipaddressid=ip_with_nat_rule.ipaddress.id)
    nat_rules = NATRule.list(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'List NAT rules should return valid list')
    self.debug(('Associating public IP for network: %s' % self.network.id))
    ip_with_lb_rule = PublicIPAddress.create(self.apiclient, accountid=self.account.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=self.network.id)
    self.debug(('Associated %s with network %s' % (ip_with_lb_rule.ipaddress.ipaddress, self.network.id)))
    self.debug(('Creating LB rule for IP address: %s' % ip_with_lb_rule.ipaddress.ipaddress))
    LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ip_with_lb_rule.ipaddress.id, accountid=self.account.account.name, networkid=self.network.id)
    self.debug(('Trying to create PF rule on IP with LB rule: %s' % ip_with_nat_rule.ipaddress.ipaddress))
    with self.assertRaises(Exception):
        NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], ipaddressid=ip_with_lb_rule.ipaddress.id)
    self.debug('Trying to create FW rule on IP with LB rule')
    with self.assertRaises(Exception):
        FireWallRule.create(self.apiclient, ipaddressid=src_nat.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug('Creating LB rule with public port: 2221')
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule_port_2221'], ipaddressid=ip_with_lb_rule.ipaddress.id, accountid=self.account.account.name, networkid=self.network.id)
    lb_rules = LoadBalancerRule.list(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'List LB rules should return valid list')
    self.debug(('Enabling VPN on source NAT IP: %s' % src_nat.ipaddress))
    with self.assertRaises(Exception):
        Vpn.create(self.apiclient, src_nat.id, account=self.account.account.name, domainid=self.account.account.domainid)
    return
