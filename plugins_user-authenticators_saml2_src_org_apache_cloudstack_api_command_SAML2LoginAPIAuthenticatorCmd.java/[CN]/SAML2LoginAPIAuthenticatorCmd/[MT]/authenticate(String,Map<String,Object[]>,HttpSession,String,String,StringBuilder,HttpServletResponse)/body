{
  try {
    if (!params.containsKey("SAMLResponse") && !params.containsKey("SAMLart")) {
      String idpUrl=null;
      final String[] idps=(String[])params.get(ApiConstants.IDP_URL);
      if (idps != null && idps.length > 0) {
        idpUrl=idps[0];
      }
      String redirectUrl=this.buildAuthnRequestUrl(idpUrl);
      resp.sendRedirect(redirectUrl);
      return "";
    }
    if (params.containsKey("SAMLart")) {
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.UNSUPPORTED_ACTION_ERROR.getHttpCode(),"SAML2 HTTP Artifact Binding is not supported",params,responseType));
    }
 else {
      final String samlResponse=((String[])params.get(SAMLUtils.SAML_RESPONSE))[0];
      Response processedSAMLResponse=this.processSAMLResponse(samlResponse);
      String statusCode=processedSAMLResponse.getStatus().getStatusCode().getValue();
      if (!statusCode.equals(StatusCode.SUCCESS_URI)) {
        throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Identity Provider send a non-successful authentication status code",params,responseType));
      }
      if (_samlAuthManager.getIdpSigningKey() != null) {
        org.opensaml.xml.signature.Signature sig=processedSAMLResponse.getSignature();
        BasicX509Credential credential=new BasicX509Credential();
        credential.setEntityCertificate(_samlAuthManager.getIdpSigningKey());
        SignatureValidator validator=new SignatureValidator(credential);
        try {
          validator.validate(sig);
        }
 catch (        ValidationException e) {
          s_logger.error("SAML Response's signature failed to be validated by IDP signing key:" + e.getMessage());
          throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"SAML Response's signature failed to be validated by IDP signing key",params,responseType));
        }
      }
      String domainString=_configDao.getValue(Config.SAMLUserDomain.key());
      Long domainId=null;
      Domain domain=_domainMgr.getDomain(domainString);
      if (domain != null) {
        domainId=domain.getId();
      }
 else {
        try {
          domainId=Long.parseLong(domainString);
        }
 catch (        NumberFormatException ignore) {
        }
      }
      if (domainId == null) {
        s_logger.error("The default domain ID for SAML users is not set correct, it should be a UUID. ROOT domain will be used.");
      }
      String username=null;
      String password=SAMLUtils.generateSecureRandomId();
      String firstName="";
      String lastName="";
      String timeZone="GMT";
      String email="";
      short accountType=0;
      Assertion assertion=processedSAMLResponse.getAssertions().get(0);
      NameID nameId=assertion.getSubject().getNameID();
      String sessionIndex=assertion.getAuthnStatements().get(0).getSessionIndex();
      session.setAttribute(SAMLUtils.SAML_NAMEID,nameId);
      session.setAttribute(SAMLUtils.SAML_SESSION,sessionIndex);
      if (nameId.getFormat().equals(NameIDType.PERSISTENT) || nameId.getFormat().equals(NameIDType.EMAIL)) {
        username=nameId.getValue();
        if (nameId.getFormat().equals(NameIDType.EMAIL)) {
          email=username;
        }
      }
      List<AttributeStatement> attributeStatements=assertion.getAttributeStatements();
      if (attributeStatements != null && attributeStatements.size() > 0) {
        for (        AttributeStatement attributeStatement : attributeStatements) {
          if (attributeStatement == null) {
            continue;
          }
          for (          Attribute attribute : attributeStatement.getAttributes()) {
            String attributeName=attribute.getName();
            String attributeValue=attribute.getAttributeValues().get(0).getDOM().getTextContent();
            if (attributeName.equalsIgnoreCase("uid") && username == null) {
              username=attributeValue;
            }
 else             if (attributeName.equalsIgnoreCase("givenName")) {
              firstName=attributeValue;
            }
 else             if (attributeName.equalsIgnoreCase(("sn"))) {
              lastName=attributeValue;
            }
 else             if (attributeName.equalsIgnoreCase("mail")) {
              email=attributeValue;
            }
          }
        }
      }
      if (username == null && email != null) {
        username=email;
      }
      final String uniqueUserId=SAMLUtils.createSAMLId(username);
      UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
      if (userAccount == null && uniqueUserId != null && username != null) {
        CallContext.current().setEventDetails("SAML Account/User with UserName: " + username + ", FirstName :"+ password+ ", LastName: "+ lastName);
        userAccount=_accountService.createUserAccount(username,password,firstName,lastName,email,timeZone,username,(short)accountType,domainId,null,null,UUID.randomUUID().toString(),uniqueUserId);
      }
      if (userAccount != null) {
        try {
          if (_apiServer.verifyUser(userAccount.getId())) {
            LoginCmdResponse loginResponse=(LoginCmdResponse)_apiServer.loginUser(session,username,userAccount.getPassword(),domainId,null,remoteAddress,params);
            resp.addCookie(new Cookie("userid",URLEncoder.encode(loginResponse.getUserId(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("domainid",URLEncoder.encode(loginResponse.getDomainId(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("role",URLEncoder.encode(loginResponse.getType(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("username",URLEncoder.encode(loginResponse.getUsername(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("sessionKey",URLEncoder.encode(loginResponse.getSessionKey(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("account",URLEncoder.encode(loginResponse.getAccount(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("timezone",URLEncoder.encode(loginResponse.getTimeZone(),HttpUtils.UTF_8)));
            resp.addCookie(new Cookie("userfullname",URLEncoder.encode(loginResponse.getFirstName() + " " + loginResponse.getLastName(),HttpUtils.UTF_8).replace("+","%20")));
            resp.sendRedirect(_configDao.getValue(Config.SAMLCloudStackRedirectionUrl.key()));
            return ApiResponseSerializer.toSerializedString(loginResponse,responseType);
          }
        }
 catch (        final CloudAuthenticationException ignored) {
        }
      }
    }
  }
 catch (  IOException e) {
    auditTrailSb.append("SP initiated SAML authentication using HTTP redirection failed:");
    auditTrailSb.append(e.getMessage());
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Unable to authenticate or retrieve user while performing SAML based SSO",params,responseType));
}
