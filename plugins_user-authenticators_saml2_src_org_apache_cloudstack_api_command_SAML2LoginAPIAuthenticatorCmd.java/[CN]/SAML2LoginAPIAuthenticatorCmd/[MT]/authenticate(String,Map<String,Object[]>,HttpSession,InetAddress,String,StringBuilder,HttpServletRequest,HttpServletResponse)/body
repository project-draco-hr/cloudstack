{
  try {
    if (!params.containsKey(SAMLPluginConstants.SAML_RESPONSE) && !params.containsKey("SAMLart")) {
      String idpId=null;
      String domainPath=null;
      if (params.containsKey(ApiConstants.IDP_ID)) {
        idpId=((String[])params.get(ApiConstants.IDP_ID))[0];
      }
      if (params.containsKey(ApiConstants.DOMAIN)) {
        domainPath=((String[])params.get(ApiConstants.DOMAIN))[0];
      }
      if (domainPath != null && !domainPath.isEmpty()) {
        if (!domainPath.startsWith("/")) {
          domainPath="/" + domainPath;
        }
        if (!domainPath.endsWith("/")) {
          domainPath=domainPath + "/";
        }
      }
      SAMLProviderMetadata spMetadata=_samlAuthManager.getSPMetadata();
      SAMLProviderMetadata idpMetadata=_samlAuthManager.getIdPMetadata(idpId);
      if (idpMetadata == null) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),"IdP ID (" + idpId + ") is not found in our list of supported IdPs, cannot proceed.",params,responseType));
      }
      if (idpMetadata.getSsoUrl() == null || idpMetadata.getSsoUrl().isEmpty()) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),"IdP ID (" + idpId + ") has no Single Sign On URL defined please contact "+ idpMetadata.getContactPersonName()+ " <"+ idpMetadata.getContactPersonEmail()+ ">, cannot proceed.",params,responseType));
      }
      String authnId=SAMLUtils.generateSecureRandomId();
      _samlAuthManager.saveToken(authnId,domainPath,idpMetadata.getEntityId());
      s_logger.debug("Sending SAMLRequest id=" + authnId);
      String redirectUrl=SAMLUtils.buildAuthnRequestUrl(authnId,spMetadata,idpMetadata,SAML2AuthManager.SAMLSignatureAlgorithm.value());
      resp.sendRedirect(redirectUrl);
      return "";
    }
    if (params.containsKey("SAMLart")) {
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.UNSUPPORTED_ACTION_ERROR.getHttpCode(),"SAML2 HTTP Artifact Binding is not supported",params,responseType));
    }
 else {
      final String samlResponse=((String[])params.get(SAMLPluginConstants.SAML_RESPONSE))[0];
      Response processedSAMLResponse=this.processSAMLResponse(samlResponse);
      String statusCode=processedSAMLResponse.getStatus().getStatusCode().getValue();
      if (!statusCode.equals(StatusCode.SUCCESS_URI)) {
        throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Identity Provider send a non-successful authentication status code",params,responseType));
      }
      String username=null;
      Issuer issuer=processedSAMLResponse.getIssuer();
      SAMLProviderMetadata spMetadata=_samlAuthManager.getSPMetadata();
      SAMLProviderMetadata idpMetadata=_samlAuthManager.getIdPMetadata(issuer.getValue());
      String responseToId=processedSAMLResponse.getInResponseTo();
      s_logger.debug("Received SAMLResponse in response to id=" + responseToId);
      SAMLTokenVO token=_samlAuthManager.getToken(responseToId);
      if (token != null) {
        if (!(token.getEntity().equalsIgnoreCase(issuer.getValue()))) {
          throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"The SAML response contains Issuer Entity ID that is different from the original SAML request",params,responseType));
        }
      }
 else {
        throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Received SAML response for a SSO request that we may not have made or has expired, please try logging in again",params,responseType));
      }
      session.setAttribute(SAMLPluginConstants.SAML_IDPID,issuer.getValue());
      Signature sig=processedSAMLResponse.getSignature();
      if (idpMetadata.getSigningCertificate() != null && sig != null) {
        BasicX509Credential credential=new BasicX509Credential();
        credential.setEntityCertificate(idpMetadata.getSigningCertificate());
        SignatureValidator validator=new SignatureValidator(credential);
        try {
          validator.validate(sig);
        }
 catch (        ValidationException e) {
          s_logger.error("SAML Response's signature failed to be validated by IDP signing key:" + e.getMessage());
          throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"SAML Response's signature failed to be validated by IDP signing key",params,responseType));
        }
      }
      if (username == null) {
        username=SAMLUtils.getValueFromAssertions(processedSAMLResponse.getAssertions(),SAML2AuthManager.SAMLUserAttributeName.value());
      }
      for (      Assertion assertion : processedSAMLResponse.getAssertions()) {
        if (assertion != null && assertion.getSubject() != null && assertion.getSubject().getNameID() != null) {
          session.setAttribute(SAMLPluginConstants.SAML_NAMEID,assertion.getSubject().getNameID().getValue());
          break;
        }
      }
      if (idpMetadata.getEncryptionCertificate() != null && spMetadata != null && spMetadata.getKeyPair() != null && spMetadata.getKeyPair().getPrivate() != null) {
        Credential credential=SecurityHelper.getSimpleCredential(idpMetadata.getEncryptionCertificate().getPublicKey(),spMetadata.getKeyPair().getPrivate());
        StaticKeyInfoCredentialResolver keyInfoResolver=new StaticKeyInfoCredentialResolver(credential);
        EncryptedKeyResolver keyResolver=new InlineEncryptedKeyResolver();
        Decrypter decrypter=new Decrypter(null,keyInfoResolver,keyResolver);
        decrypter.setRootInNewDocument(true);
        List<EncryptedAssertion> encryptedAssertions=processedSAMLResponse.getEncryptedAssertions();
        if (encryptedAssertions != null) {
          for (          EncryptedAssertion encryptedAssertion : encryptedAssertions) {
            Assertion assertion=null;
            try {
              assertion=decrypter.decrypt(encryptedAssertion);
            }
 catch (            DecryptionException e) {
              s_logger.warn("SAML EncryptedAssertion error: " + e.toString());
            }
            if (assertion == null) {
              continue;
            }
            Signature encSig=assertion.getSignature();
            if (idpMetadata.getSigningCertificate() != null && encSig != null) {
              BasicX509Credential sigCredential=new BasicX509Credential();
              sigCredential.setEntityCertificate(idpMetadata.getSigningCertificate());
              SignatureValidator validator=new SignatureValidator(sigCredential);
              try {
                validator.validate(encSig);
              }
 catch (              ValidationException e) {
                s_logger.error("SAML Response's signature failed to be validated by IDP signing key:" + e.getMessage());
                throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"SAML Response's signature failed to be validated by IDP signing key",params,responseType));
              }
            }
            if (assertion.getSubject() != null && assertion.getSubject().getNameID() != null) {
              session.setAttribute(SAMLPluginConstants.SAML_NAMEID,assertion.getSubject().getNameID().getValue());
            }
            if (username == null) {
              username=SAMLUtils.getValueFromAttributeStatements(assertion.getAttributeStatements(),SAML2AuthManager.SAMLUserAttributeName.value());
            }
          }
        }
      }
      if (username == null) {
        throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Failed to find admin configured username attribute in the SAML Response. Please ask your administrator to check SAML user attribute name.",params,responseType));
      }
      UserAccount userAccount=null;
      List<UserAccountVO> possibleUserAccounts=_userAccountDao.getAllUsersByNameAndEntity(username,issuer.getValue());
      if (possibleUserAccounts != null && possibleUserAccounts.size() > 0) {
        for (        UserAccountVO possibleUserAccount : possibleUserAccounts) {
          if (possibleUserAccount.getAccountState().equals(Account.State.enabled.toString())) {
            userAccount=possibleUserAccount;
            break;
          }
        }
      }
      if (userAccount == null || userAccount.getExternalEntity() == null || !_samlAuthManager.isUserAuthorized(userAccount.getId(),issuer.getValue())) {
        throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Your authenticated user is not authorized for SAML Single Sign-On, please contact your administrator",params,responseType));
      }
      try {
        if (_apiServer.verifyUser(userAccount.getId())) {
          LoginCmdResponse loginResponse=(LoginCmdResponse)_apiServer.loginUser(session,userAccount.getUsername(),userAccount.getUsername() + userAccount.getSource().toString(),userAccount.getDomainId(),null,remoteAddress,params);
          SAMLUtils.setupSamlUserCookies(loginResponse,resp);
          resp.sendRedirect(SAML2AuthManager.SAMLCloudStackRedirectionUrl.value());
          return ApiResponseSerializer.toSerializedString(loginResponse,responseType);
        }
      }
 catch (      CloudAuthenticationException|IOException exception) {
        s_logger.debug("SAML Login failed to log in the user due to: " + exception.getMessage());
      }
    }
  }
 catch (  IOException e) {
    auditTrailSb.append("SP initiated SAML authentication using HTTP redirection failed:");
    auditTrailSb.append(e.getMessage());
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"Unable to authenticate user while performing SAML based SSO. Please make sure your user/account has been added, enable and authorized by the admin before you can authenticate. Please contact your administrator.",params,responseType));
}
