{
  ResultSet rs=null;
  try (PreparedStatement addRedundantColToVpcOfferingPstmt=conn.prepareStatement("ALTER TABLE `cloud`.`vpc_offerings` ADD COLUMN `redundant_router_service` tinyint(1) DEFAULT 0");PreparedStatement addRedundantColToVpcPstmt=conn.prepareStatement("ALTER TABLE `cloud`.`vpc` ADD COLUMN `redundant` tinyint(1) DEFAULT 0");PreparedStatement addRedundantColToNwPstmt=conn.prepareStatement("ALTER TABLE `cloud`.`networks` ADD COLUMN `redundant` tinyint(1) DEFAULT 0");PreparedStatement redundancyPerNwPstmt=conn.prepareStatement("select distinct nw.network_offering_id from networks nw join network_offerings off " + "on nw.network_offering_id = off.id where off.redundant_router_service = 1");PreparedStatement updateNwRedundancyPstmt=conn.prepareStatement("update networks set redundant = 1 where network_offering_id = ?")){
    addRedundantColToVpcPstmt.executeUpdate();
    addRedundantColToVpcOfferingPstmt.executeUpdate();
    addRedundantColToNwPstmt.executeUpdate();
    rs=redundancyPerNwPstmt.executeQuery();
    while (rs.next()) {
      final long nwOfferingId=rs.getLong("nw.network_offering_id");
      updateNwRedundancyPstmt.setLong(1,nwOfferingId);
      updateNwRedundancyPstmt.executeUpdate();
    }
  }
 catch (  final SQLException e) {
    e.printStackTrace();
    throw new CloudRuntimeException("Adding redundancy to vpc, networks and vpc_offerings failed",e);
  }
}
