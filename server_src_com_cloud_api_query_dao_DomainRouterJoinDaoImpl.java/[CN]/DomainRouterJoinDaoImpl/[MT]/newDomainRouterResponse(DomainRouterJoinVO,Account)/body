{
  DomainRouterResponse routerResponse=new DomainRouterResponse();
  routerResponse.setId(router.getUuid());
  routerResponse.setZoneId(router.getDataCenterUuid());
  routerResponse.setName(router.getName());
  routerResponse.setTemplateId(router.getTemplateUuid());
  routerResponse.setCreated(router.getCreated());
  routerResponse.setState(router.getState());
  routerResponse.setIsRedundantRouter(router.isRedundantRouter());
  routerResponse.setRedundantState(router.getRedundantState().toString());
  if (router.getTemplateVersion() != null) {
    String routerVersion=Version.trimRouterVersion(router.getTemplateVersion());
    routerResponse.setVersion(routerVersion);
    routerResponse.setRequiresUpgrade((Version.compare(routerVersion,VirtualNetworkApplianceService.MinVRVersion) < 0));
  }
 else {
    routerResponse.setVersion("UNKNOWN");
    routerResponse.setRequiresUpgrade(true);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    if (router.getHostId() != null) {
      routerResponse.setHostId(router.getHostUuid());
      routerResponse.setHostName(router.getHostName());
    }
    routerResponse.setPodId(router.getPodUuid());
    long nic_id=router.getNicId();
    if (nic_id > 0) {
      TrafficType ty=router.getTrafficType();
      if (ty != null) {
        if (ty == TrafficType.Public) {
          routerResponse.setPublicIp(router.getIpAddress());
          routerResponse.setPublicMacAddress(router.getMacAddress());
          routerResponse.setPublicNetmask(router.getNetmask());
          routerResponse.setGateway(router.getGateway());
          routerResponse.setPublicNetworkId(router.getNetworkUuid());
        }
 else         if (ty == TrafficType.Control) {
          routerResponse.setLinkLocalIp(router.getIpAddress());
          routerResponse.setLinkLocalMacAddress(router.getMacAddress());
          routerResponse.setLinkLocalNetmask(router.getNetmask());
          routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());
        }
 else         if (ty == TrafficType.Guest) {
          routerResponse.setGuestIpAddress(router.getIpAddress());
          routerResponse.setGuestMacAddress(router.getMacAddress());
          routerResponse.setGuestNetmask(router.getNetmask());
          routerResponse.setGuestNetworkId(router.getNetworkUuid());
          routerResponse.setNetworkDomain(router.getNetworkDomain());
        }
      }
      NicResponse nicResponse=new NicResponse();
      nicResponse.setId(router.getNicUuid());
      nicResponse.setIpaddress(router.getIpAddress());
      nicResponse.setGateway(router.getGateway());
      nicResponse.setNetmask(router.getNetmask());
      nicResponse.setNetworkid(router.getNetworkUuid());
      nicResponse.setNetworkName(router.getNetworkName());
      nicResponse.setMacAddress(router.getMacAddress());
      nicResponse.setIp6Address(router.getIp6Address());
      nicResponse.setIp6Gateway(router.getIp6Gateway());
      nicResponse.setIp6Cidr(router.getIp6Cidr());
      if (router.getBroadcastUri() != null) {
        nicResponse.setBroadcastUri(router.getBroadcastUri().toString());
      }
      if (router.getIsolationUri() != null) {
        nicResponse.setIsolationUri(router.getIsolationUri().toString());
      }
      if (router.getTrafficType() != null) {
        nicResponse.setTrafficType(router.getTrafficType().toString());
      }
      if (router.getGuestType() != null) {
        nicResponse.setType(router.getGuestType().toString());
      }
      nicResponse.setIsDefault(router.isDefaultNic());
      nicResponse.setObjectName("nic");
      routerResponse.addNic(nicResponse);
    }
  }
  routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());
  routerResponse.setServiceOfferingName(router.getServiceOfferingName());
  ApiResponseHelper.populateOwner(routerResponse,router);
  routerResponse.setDomainId(router.getDomainUuid());
  routerResponse.setDomainName(router.getDomainName());
  routerResponse.setZoneName(router.getDataCenterName());
  routerResponse.setDns1(router.getDns1());
  routerResponse.setDns2(router.getDns2());
  routerResponse.setIp6Dns1(router.getIp6Dns1());
  routerResponse.setIp6Dns2(router.getIp6Dns2());
  routerResponse.setVpcId(router.getVpcUuid());
  routerResponse.setRole(router.getRole().toString());
  if (router.getJobId() != null) {
    routerResponse.setJobId(router.getJobUuid());
    routerResponse.setJobStatus(router.getJobStatus());
  }
  if (router.getRole() == Role.INTERNAL_LB_VM) {
    routerResponse.setObjectName("internalloadbalancervm");
  }
 else {
    routerResponse.setObjectName("router");
  }
  return routerResponse;
}
