{
  Connection conn=hypervisorResource.getConnection();
  DataTO srcData=cmd.getSrcTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataTO destData=cmd.getDestTO();
  DataStoreTO imageStore=srcData.getDataStore();
  if (srcData.getDataStore() instanceof PrimaryDataStoreTO && destData.getDataStore() instanceof PrimaryDataStoreTO) {
    return createVolumeFromSnapshot2(cmd);
  }
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer("unsupported protocol");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String primaryStorageNameLabel=destData.getDataStore().getUuid();
  String secondaryStorageUrl=nfsImageStore.getUrl();
  int wait=cmd.getWait();
  boolean result=false;
  String details=null;
  String volumeUUID=null;
  if (secondaryStorageUrl == null) {
    details+=" because the URL passed: " + secondaryStorageUrl + " is invalid.";
    return new CopyCmdAnswer(details);
  }
  try {
    SR primaryStorageSR=hypervisorResource.getSRByNameLabelandHost(conn,primaryStorageNameLabel);
    if (primaryStorageSR == null) {
      throw new InternalErrorException("Could not create volume from snapshot because the primary Storage SR could not be created from the name label: " + primaryStorageNameLabel);
    }
    String snapshotInstallPath=snapshot.getPath();
    int index=snapshotInstallPath.lastIndexOf(nfsImageStore.getPathSeparator());
    String snapshotName=snapshotInstallPath.substring(index + 1);
    if (!snapshotName.startsWith("VHD-") && !snapshotName.endsWith(".vhd")) {
      snapshotInstallPath=snapshotInstallPath + ".vhd";
    }
    URI snapshotURI=new URI(secondaryStorageUrl + nfsImageStore.getPathSeparator() + snapshotInstallPath);
    String snapshotPath=snapshotURI.getHost() + ":" + snapshotURI.getPath();
    String srUuid=primaryStorageSR.getUuid(conn);
    volumeUUID=copy_vhd_from_secondarystorage(conn,snapshotPath,srUuid,wait);
    result=true;
    VDI volume=VDI.getByUuid(conn,volumeUUID);
    VDI.Record vdir=volume.getRecord(conn);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(volumeUUID);
    newVol.setSize(vdir.virtualSize);
    return new CopyCmdAnswer(newVol);
  }
 catch (  XenAPIException e) {
    details+=" due to " + e.toString();
    s_logger.warn(details,e);
  }
catch (  Exception e) {
    details+=" due to " + e.getMessage();
    s_logger.warn(details,e);
  }
  if (!result) {
    s_logger.error(details);
  }
  return new CopyCmdAnswer(details);
}
