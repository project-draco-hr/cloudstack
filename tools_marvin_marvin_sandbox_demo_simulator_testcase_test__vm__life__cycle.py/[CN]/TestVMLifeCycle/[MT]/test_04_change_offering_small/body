def test_04_change_offering_small(self):
    'Change Offering to a small capacity\n        '
    self.debug(('Stopping VM - ID: %s' % self.medium_virtual_machine.id))
    self.medium_virtual_machine.stop(self.apiclient)
    timeout = self.services['timeout']
    while True:
        time.sleep(self.services['sleep'])
        list_vm_response = list_virtual_machines(self.apiclient, id=self.medium_virtual_machine.id)
        if isinstance(list_vm_response, list):
            vm = list_vm_response[0]
            if (vm.state == 'Stopped'):
                self.debug(('VM state: %s' % vm.state))
                break
        if (timeout == 0):
            raise Exception(('Failed to stop VM (ID: %s) in change service offering' % vm.id))
        timeout = (timeout - 1)
    self.debug(('Change Service offering VM - ID: %s' % self.medium_virtual_machine.id))
    cmd = changeServiceForVirtualMachine.changeServiceForVirtualMachineCmd()
    cmd.id = self.medium_virtual_machine.id
    cmd.serviceofferingid = self.small_offering.id
    self.apiclient.changeServiceForVirtualMachine(cmd)
    self.debug(('Starting VM - ID: %s' % self.medium_virtual_machine.id))
    self.medium_virtual_machine.start(self.apiclient)
    timeout = self.services['timeout']
    while True:
        time.sleep(self.services['sleep'])
        list_vm_response = list_virtual_machines(self.apiclient, id=self.medium_virtual_machine.id)
        if isinstance(list_vm_response, list):
            vm = list_vm_response[0]
            if (vm.state == 'Running'):
                self.debug(('VM state: %s' % vm.state))
                break
        if (timeout == 0):
            raise Exception(('Failed to start VM (ID: %s) after changing service offering' % vm.id))
        timeout = (timeout - 1)
    return
