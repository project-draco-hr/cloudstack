@classmethod
def setUpClass(cls):
    cls.api_client = super(TestVMLifeCycle, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    domain = get_domain(cls.api_client, cls.services)
    zone = get_zone(cls.api_client, cls.services)
    template = get_template(cls.api_client, zone.id, cls.services['ostypeid'])
    cls.services['small']['zoneid'] = zone.id
    cls.services['small']['template'] = template.id
    cls.services['medium']['zoneid'] = zone.id
    cls.services['medium']['template'] = template.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=domain.id)
    cls.small_offering = ServiceOffering.create(cls.api_client, cls.services['service_offerings']['small'])
    cls.medium_offering = ServiceOffering.create(cls.api_client, cls.services['service_offerings']['medium'])
    cls.small_virtual_machine = VirtualMachine.create(cls.api_client, cls.services['small'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.small_offering.id, mode=cls.services['mode'])
    cls.medium_virtual_machine = VirtualMachine.create(cls.api_client, cls.services['medium'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.medium_offering.id, mode=cls.services['mode'])
    cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['small'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.small_offering.id, mode=cls.services['mode'])
    cls._cleanup = [cls.small_offering, cls.medium_offering, cls.account]
