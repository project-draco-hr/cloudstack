@attr(required_hardware='false')
@attr(tags=['advanced', 'basic', 'simulator'])
def test_01_find_hosts_for_migration(self):
    ' Test find suitable and not-suitable list of hosts for migration '
    list_service_response = list_service_offering(self.apiclient, id=self.service_offering_with_tag.id)
    self.assertEqual(isinstance(list_service_response, list), True, 'listServiceOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_service_response), 0, 'listServiceOfferings returned empty list.')
    self.assertEqual(list_service_response[0].hosttags, 'PREMIUM', 'The service offering having tag')
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_with_tag.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    self.debug(('Deployed VM on host: %s' % vms[0].hostid))
    list_hosts_response = list_hosts(self.apiclient, id=virtual_machine.hostid)
    self.assertEqual(isinstance(list_hosts_response, list), True, 'listHosts returned invalid object in response.')
    self.assertNotEqual(len(list_hosts_response), 0, 'listHosts returned empty list.')
    host = list_hosts_response[0]
    self.assertEqual(host.hosttags, 'PREMIUM', ('VM is created on a host having appropriate tag. %s' % host.uuid))
    try:
        list_hosts_response = Host.listForMigration(self.apiclient, virtualmachineid=virtual_machine.id)
    except Exception as e:
        raise Exception(('Exception while getting hosts list suitable for migration: %s' % e))
    self.assertEqual(isinstance(list_hosts_response, list), True, 'listHosts returned invalid object in response.')
    self.assertNotEqual(len(list_hosts_response), 0, 'listHosts returned empty response.')
    suitableHost = set()
    notSuitableHost = set()
    for host in list_hosts_response:
        if host.suitableformigration:
            suitableHost.add(host)
        else:
            notSuitableHost.add(host)
    self.assertTrue((notSuitableHost is not None), 'notsuitablehost should not be None')
    self.debug(('Suitable Hosts: %s' % suitableHost))
    self.debug(('Not suitable Hosts: %s' % notSuitableHost))
