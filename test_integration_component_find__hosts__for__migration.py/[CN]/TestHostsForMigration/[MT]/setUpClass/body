@classmethod
def setUpClass(cls):
    cls.testClient = super(TestHostsForMigration, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    clusterWithSufficientHosts = None
    clusters = Cluster.list(cls.api_client, zoneid=cls.zone.id)
    for cluster in clusters:
        cls.hosts = Host.list(cls.api_client, clusterid=cluster.id, type='Routing')
        if (len(cls.hosts) >= 2):
            clusterWithSufficientHosts = cluster
            break
    if (clusterWithSufficientHosts is None):
        raise unittest.SkipTest('No Cluster with 2 hosts found')
    Host.update(cls.api_client, id=cls.hosts[1].id, hosttags='PREMIUM')
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering_with_tag = ServiceOffering.create(cls.api_client, cls.services['service_offering_with_tag'])
    cls._cleanup = [cls.service_offering_with_tag]
    return
