{
  final Transaction txn=Transaction.currentTxn();
  try {
    final SearchCriteria<SecurityGroupWorkVO> sc=UntakenWorkSearch.create();
    sc.setParameters("step",Step.Scheduled);
    txn.start();
    final SecurityGroupWorkVO vo=this.lockOneRandomRow(sc,true);
    if (vo == null) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("No security group work items found");
      }
      txn.commit();
      return null;
    }
    SecurityGroupWorkVO work=null;
    if (findByVmIdStep(vo.getInstanceId(),Step.Processing) == null) {
      work=vo;
    }
    if (work == null) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Found a security group work item in Scheduled and Processing, exiting vm=" + vo.getInstanceId());
      }
      txn.commit();
      return null;
    }
    work.setServerId(serverId);
    work.setDateTaken(new Date());
    work.setStep(SecurityGroupWorkVO.Step.Processing);
    update(work.getId(),work);
    txn.commit();
    return work;
  }
 catch (  final Throwable e) {
    throw new CloudRuntimeException("Unable to execute take",e);
  }
}
