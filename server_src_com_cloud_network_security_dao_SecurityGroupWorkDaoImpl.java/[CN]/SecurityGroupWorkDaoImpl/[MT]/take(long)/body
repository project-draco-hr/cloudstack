{
  final Transaction txn=Transaction.currentTxn();
  try {
    final SearchCriteria<SecurityGroupWorkVO> sc=UntakenWorkSearch.create();
    sc.setParameters("step",Step.Scheduled);
    final Filter filter=new Filter(SecurityGroupWorkVO.class,null,true,0l,1l);
    txn.start();
    final List<SecurityGroupWorkVO> vos=lockRows(sc,filter,true);
    if (vos.size() == 0) {
      txn.commit();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Security Group take: no work found");
      }
      return null;
    }
    SecurityGroupWorkVO work=vos.get(0);
    boolean processing=false;
    if (findByVmIdStep(work.getInstanceId(),Step.Processing) != null) {
      processing=true;
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Security Group work take: found a job in Scheduled and Processing  vmid=" + work.getInstanceId());
      }
    }
    work.setServerId(serverId);
    work.setDateTaken(new Date());
    if (processing) {
      work.setStep(SecurityGroupWork.Step.Done);
    }
 else {
      work.setStep(SecurityGroupWork.Step.Processing);
    }
    update(work.getId(),work);
    txn.commit();
    return work;
  }
 catch (  final Throwable e) {
    throw new CloudRuntimeException("Unable to execute take",e);
  }
}
