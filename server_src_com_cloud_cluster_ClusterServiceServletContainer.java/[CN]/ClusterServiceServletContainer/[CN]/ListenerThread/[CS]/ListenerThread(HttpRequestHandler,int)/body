{
  _executor=Executors.newCachedThreadPool(new NamedThreadFactory("Cluster-Listener"));
  try {
    _serverSocket=new ServerSocket(port);
  }
 catch (  IOException ioex) {
    s_logger.error("error initializing cluster service servlet container",ioex);
    return;
  }
  _params=new BasicHttpParams();
  _params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT,5000).setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE,8 * 1024).setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK,false).setBooleanParameter(CoreConnectionPNames.TCP_NODELAY,true).setParameter(CoreProtocolPNames.ORIGIN_SERVER,"HttpComponents/1.1");
  BasicHttpProcessor httpproc=new BasicHttpProcessor();
  httpproc.addInterceptor(new ResponseDate());
  httpproc.addInterceptor(new ResponseServer());
  httpproc.addInterceptor(new ResponseContent());
  httpproc.addInterceptor(new ResponseConnControl());
  HttpRequestHandlerRegistry reqistry=new HttpRequestHandlerRegistry();
  reqistry.register("/clusterservice",requestHandler);
  _httpService=new HttpService(httpproc,new DefaultConnectionReuseStrategy(),new DefaultHttpResponseFactory());
  _httpService.setParams(_params);
  _httpService.setHandlerResolver(reqistry);
}
