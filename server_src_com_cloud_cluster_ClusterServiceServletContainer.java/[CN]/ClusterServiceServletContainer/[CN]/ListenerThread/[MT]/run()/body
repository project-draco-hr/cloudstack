{
  if (s_logger.isInfoEnabled())   s_logger.info("Cluster service servlet container listening on port " + _serverSocket.getLocalPort());
  while (!Thread.interrupted()) {
    try {
      Socket socket=_serverSocket.accept();
      final DefaultHttpServerConnection conn=new DefaultHttpServerConnection();
      conn.bind(socket,_params);
      _executor.execute(new Runnable(){
        public void run(){
          HttpContext context=new BasicHttpContext(null);
          try {
            while (!Thread.interrupted() && conn.isOpen()) {
              if (s_logger.isTraceEnabled())               s_logger.trace("dispatching cluster request from " + conn.getRemoteAddress().toString());
              _httpService.handleRequest(conn,context);
              if (s_logger.isTraceEnabled())               s_logger.trace("Cluster request from " + conn.getRemoteAddress().toString() + " is processed");
            }
          }
 catch (          ConnectionClosedException ex) {
            s_logger.trace("Client closed connection",ex);
          }
catch (          IOException ex) {
            s_logger.trace("I/O error",ex);
          }
catch (          HttpException ex) {
            s_logger.error("Unrecoverable HTTP protocol violation",ex);
          }
 finally {
            try {
              conn.shutdown();
            }
 catch (            IOException ignore) {
              s_logger.error("unexpected exception",ignore);
            }
          }
        }
      }
);
    }
 catch (    InterruptedIOException ex) {
      break;
    }
catch (    IOException e) {
      s_logger.error("Exception when initializing cluster service servlet container : ",e);
      break;
    }
  }
  _executor.shutdown();
  if (s_logger.isInfoEnabled())   s_logger.info("Cluster service servlet container shutdown");
}
