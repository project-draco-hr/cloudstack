@attr(tags=['devcloud', 'smoke', 'advanced', 'advancedns'], required_hardware='true')
def test_01_nic(self):
    'Test to add and update added nic to a virtual machine'
    hypervisorIsVmware = False
    isVmwareToolInstalled = False
    if (self.hypervisor.lower() == 'vmware'):
        hypervisorIsVmware = True
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[self.test_network.id], mode=(self.zone.networktype if hypervisorIsVmware else 'default'))
    self.cleanup.insert(0, self.virtual_machine)
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(validateList(vms)[0], PASS, 'vms list validation failed')
    vm_response = vms[0]
    self.assertEqual(len(vm_response.nic), 1, 'Verify we only start with one nic')
    self.assertEqual(vm_response.nic[0].isdefault, True, 'Verify initial adapter is set to default')
    existing_nic_ip = vm_response.nic[0].ipaddress
    existing_nic_id = vm_response.nic[0].id
    self.virtual_machine.add_nic(self.apiclient, self.test_network2.id)
    list_vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(len(list_vm_response[0].nic), 2, "Verify we have 2 NIC's now")
    if hypervisorIsVmware:
        sshClient = self.virtual_machine.get_ssh_client()
        result = str(sshClient.execute('service vmware-tools status')).lower()
        self.debug(('and result is: %s' % result))
        if ('running' in result):
            isVmwareToolInstalled = True
    goForUnplugOperation = True
    if (hypervisorIsVmware and (not isVmwareToolInstalled)):
        goForUnplugOperation = False
    if goForUnplugOperation:
        new_nic_id = ''
        for nc in list_vm_response[0].nic:
            if (nc.ipaddress != existing_nic_ip):
                new_nic_id = nc.id
        self.virtual_machine.update_default_nic(self.apiclient, new_nic_id)
        time.sleep(5)
        list_vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
        for nc in list_vm_response[0].nic:
            if (nc.ipaddress == existing_nic_ip):
                self.assertEqual(nc.isdefault, False, 'Verify initial adapter is NOT set to default')
            else:
                self.assertEqual(nc.isdefault, True, 'Verify second adapter is set to default')
        with self.assertRaises(Exception):
            self.virtual_machine.remove_nic(self.apiclient, new_nic_id)
        self.virtual_machine.update_default_nic(self.apiclient, existing_nic_id)
        time.sleep(5)
        self.virtual_machine.remove_nic(self.apiclient, new_nic_id)
        time.sleep(5)
        list_vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
        self.assertEqual(len(list_vm_response[0].nic), 1, 'Verify we are back to a signle NIC')
    return
