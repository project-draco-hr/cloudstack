{
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue("sortkey.algorithm"));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(DiskOfferingJoinVO.class,"sortKey",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<DiskOfferingJoinVO> sc=_diskOfferingJoinDao.createSearchCriteria();
  sc.addAnd("type",Op.EQ,DiskOfferingVO.Type.Disk);
  Account account=CallContext.current().getCallingAccount();
  Object name=cmd.getDiskOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long domainId=cmd.getDomainId();
  Boolean isRootAdmin=_accountMgr.isRootAdmin(account.getAccountId());
  if (domainId != null) {
    if (_accountMgr.isRootAdmin(account.getId()) || isPermissible(account.getDomainId(),domainId)) {
      sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
      if (!isRootAdmin) {
        sc.addAnd("displayOffering",SearchCriteria.Op.EQ,1);
      }
      return _diskOfferingJoinDao.searchAndCount(sc,searchFilter);
    }
 else {
      throw new PermissionDeniedException("The account:" + account.getAccountName() + " does not fall in the same domain hierarchy as the disk offering");
    }
  }
  List<Long> domainIds=null;
  if ((_accountMgr.isNormalUser(account.getId()) || _accountMgr.isDomainAdmin(account.getId())) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    domainIds=new ArrayList<Long>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord == null) {
      s_logger.error("Could not find the domainId for account:" + account.getAccountName());
      throw new CloudAuthenticationException("Could not find the domainId for account:" + account.getAccountName());
    }
    domainIds.add(domainRecord.getId());
    while (domainRecord.getParent() != null) {
      domainRecord=_domainDao.findById(domainRecord.getParent());
      domainIds.add(domainRecord.getId());
    }
    SearchCriteria<DiskOfferingJoinVO> spc=_diskOfferingJoinDao.createSearchCriteria();
    spc.addOr("domainId",SearchCriteria.Op.IN,domainIds.toArray());
    spc.addOr("domainId",SearchCriteria.Op.NULL);
    sc.addAnd("domainId",SearchCriteria.Op.SC,spc);
    sc.addAnd("displayOffering",SearchCriteria.Op.EQ,1);
    sc.addAnd("systemUse",SearchCriteria.Op.EQ,false);
  }
  if (keyword != null) {
    SearchCriteria<DiskOfferingJoinVO> ssc=_diskOfferingJoinDao.createSearchCriteria();
    ssc.addOr("displayText",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd("id",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.EQ,name);
  }
  return _diskOfferingJoinDao.searchAndCount(sc,searchFilter);
}
