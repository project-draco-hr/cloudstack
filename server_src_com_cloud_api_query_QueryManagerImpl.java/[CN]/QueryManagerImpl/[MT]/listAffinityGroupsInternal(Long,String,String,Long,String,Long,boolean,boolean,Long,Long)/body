{
  Account caller=CallContext.current().getCallingAccount();
  Long accountId=caller.getAccountId();
  if (vmId != null) {
    UserVmVO userVM=_userVmDao.findById(vmId);
    if (userVM == null) {
      throw new InvalidParameterValueException("Unable to list affinity groups for virtual machine instance " + vmId + "; instance not found.");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listAffinityGroupsByVM(vmId.longValue(),startIndex,pageSize);
  }
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,affinityGroupId,accountName,null,permittedAccounts,domainIdRecursiveListProject,listAll,true);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AffinityGroupJoinVO.class,"id",true,startIndex,pageSize);
  SearchCriteria<AffinityGroupJoinVO> sc=buildAffinityGroupSearchCriteria(domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria,affinityGroupId,affinityGroupName,affinityGroupType);
  Pair<List<AffinityGroupJoinVO>,Integer> uniqueGroupsPair=_affinityGroupJoinDao.searchAndCount(sc,searchFilter);
  List<AffinityGroupJoinVO> vrs=new ArrayList<AffinityGroupJoinVO>();
  Integer count=uniqueGroupsPair.second();
  if (count.intValue() != 0) {
    List<AffinityGroupJoinVO> uniqueGroups=uniqueGroupsPair.first();
    Long[] vrIds=new Long[uniqueGroups.size()];
    int i=0;
    for (    AffinityGroupJoinVO v : uniqueGroups) {
      vrIds[i++]=v.getId();
    }
    vrs=_affinityGroupJoinDao.searchByIds(vrIds);
  }
  if (!permittedAccounts.isEmpty()) {
    if (domainId != null) {
      SearchCriteria<AffinityGroupJoinVO> scDomain=buildAffinityGroupSearchCriteria(null,isRecursive,new ArrayList<Long>(),listProjectResourcesCriteria,affinityGroupId,affinityGroupName,affinityGroupType);
      vrs.addAll(listDomainLevelAffinityGroups(scDomain,searchFilter,domainId));
    }
 else {
      for (      Long permAcctId : permittedAccounts) {
        Account permittedAcct=_accountDao.findById(permAcctId);
        SearchCriteria<AffinityGroupJoinVO> scDomain=buildAffinityGroupSearchCriteria(null,isRecursive,new ArrayList<Long>(),listProjectResourcesCriteria,affinityGroupId,affinityGroupName,affinityGroupType);
        vrs.addAll(listDomainLevelAffinityGroups(scDomain,searchFilter,permittedAcct.getDomainId()));
      }
    }
  }
 else   if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchCriteria<AffinityGroupJoinVO> scDomain=buildAffinityGroupSearchCriteria(null,isRecursive,new ArrayList<Long>(),listProjectResourcesCriteria,affinityGroupId,affinityGroupName,affinityGroupType);
    vrs.addAll(listDomainLevelAffinityGroups(scDomain,searchFilter,domainId));
  }
  return new Pair<List<AffinityGroupJoinVO>,Integer>(vrs,vrs.size());
}
