{
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),null,permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listAsyncJobs");
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AsyncJobJoinVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object keyword=cmd.getKeyword();
  Object startDate=cmd.getStartDate();
  SearchCriteria<AsyncJobJoinVO> sc=_jobJoinDao.createSearchCriteria();
  SearchCriteria<AsyncJobJoinVO> aclSc=_jobJoinDao.createSearchCriteria();
  _accountMgr.buildACLViewSearchCriteria(sc,aclSc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (keyword != null) {
    sc.addAnd("cmd",SearchCriteria.Op.LIKE,"%" + keyword + "%");
  }
  if (startDate != null) {
    sc.addAnd("created",SearchCriteria.Op.GTEQ,startDate);
  }
  return _jobJoinDao.searchAndCount(sc,searchFilter);
}
