{
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Map<String,String> tags=cmd.getTags();
  Long storageId=cmd.getStorageId();
  Long diskOffId=cmd.getDiskOfferingId();
  Boolean display=cmd.getDisplay();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listVolumes");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeJoinVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeJoinVO> sb=_volumeJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("volumeType",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and("instanceId",sb.entity().getVmId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("storageId",sb.entity().getPoolId(),SearchCriteria.Op.EQ);
  sb.and("diskOfferingId",sb.entity().getDiskOfferingId(),SearchCriteria.Op.EQ);
  sb.and("display",sb.entity().isDisplayVolume(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and("systemUse",sb.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.and().op("type",sb.entity().getVmType(),SearchCriteria.Op.NIN);
  sb.or("nulltype",sb.entity().getVmType(),SearchCriteria.Op.NULL);
  if (!(cmd instanceof ListVolumesCmdByAdmin)) {
    sb.and("displayVolume",sb.entity().isDisplayVolume(),SearchCriteria.Op.EQ);
  }
  sb.cp();
  SearchCriteria<VolumeJoinVO> sc=sb.create();
  SearchCriteria<VolumeJoinVO> aclSc=_volumeJoinDao.createSearchCriteria();
  _accountMgr.buildACLViewSearchCriteria(sc,aclSc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeJoinVO> ssc=_volumeJoinDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("volumeType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("name",name);
  }
  if (display != null) {
    sc.setParameters("display",display);
  }
  sc.setParameters("systemUse",1);
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<VolumeJoinVO> tagSc=_volumeJoinDao.createSearchCriteria();
    for (    String key : tags.keySet()) {
      SearchCriteria<VolumeJoinVO> tsc=_volumeJoinDao.createSearchCriteria();
      tsc.addAnd("tagKey",SearchCriteria.Op.EQ,key);
      tsc.addAnd("tagValue",SearchCriteria.Op.EQ,tags.get(key));
      tagSc.addOr("tagKey",SearchCriteria.Op.SC,tsc);
    }
    sc.addAnd("tagKey",SearchCriteria.Op.SC,tagSc);
  }
  if (diskOffId != null) {
    sc.setParameters("diskOfferingId",diskOffId);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (type != null) {
    sc.setParameters("volumeType","%" + type + "%");
  }
  if (vmInstanceId != null) {
    sc.setParameters("instanceId",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (podId != null) {
    sc.setParameters("podId",podId);
  }
  if (storageId != null) {
    sc.setParameters("storageId",storageId);
  }
  if (!(cmd instanceof ListVolumesCmdByAdmin)) {
    sc.setParameters("displayVolume",1);
  }
  sc.setParameters("type",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters("state",Volume.State.Destroy);
  Pair<List<VolumeJoinVO>,Integer> uniqueVolPair=_volumeJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueVolPair.second();
  if (count.intValue() == 0) {
    return uniqueVolPair;
  }
  List<VolumeJoinVO> uniqueVols=uniqueVolPair.first();
  Long[] vrIds=new Long[uniqueVols.size()];
  int i=0;
  for (  VolumeJoinVO v : uniqueVols) {
    vrIds[i++]=v.getId();
  }
  List<VolumeJoinVO> vrs=_volumeJoinDao.searchByIds(vrIds);
  return new Pair<List<VolumeJoinVO>,Integer>(vrs,count);
}
