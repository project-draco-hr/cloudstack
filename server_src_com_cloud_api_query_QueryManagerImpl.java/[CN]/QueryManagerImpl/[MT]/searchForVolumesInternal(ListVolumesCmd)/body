{
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Map<String,String> tags=cmd.getTags();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeJoinVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeJoinVO> sb=_volumeJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  _accountMgr.buildACLViewSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("volumeType",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and("instanceId",sb.entity().getVmId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and("systemUse",sb.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.and().op("type",sb.entity().getVmType(),SearchCriteria.Op.NIN);
  sb.or("nulltype",sb.entity().getVmType(),SearchCriteria.Op.NULL);
  sb.cp();
  if (tags != null && !tags.isEmpty()) {
    for (int count=0; count < tags.size(); count++) {
      sb.or().op("key" + String.valueOf(count),sb.entity().getTagKey(),SearchCriteria.Op.EQ);
      sb.and("value" + String.valueOf(count),sb.entity().getTagValue(),SearchCriteria.Op.EQ);
      sb.cp();
    }
  }
  SearchCriteria<VolumeJoinVO> sc=sb.create();
  _accountMgr.buildACLViewSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeJoinVO> ssc=_volumeJoinDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("volumeType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  sc.setParameters("systemUse",1);
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    for (    String key : tags.keySet()) {
      sc.setParameters("key" + String.valueOf(count),key);
      sc.setParameters("value" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (type != null) {
    sc.setParameters("volumeType","%" + type + "%");
  }
  if (vmInstanceId != null) {
    sc.setParameters("instanceId",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (podId != null) {
    sc.setParameters("podId",podId);
  }
  sc.setParameters("type",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters("state",Volume.State.Destroy);
  Pair<List<VolumeJoinVO>,Integer> uniqueVolPair=_volumeJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueVolPair.second();
  if (count.intValue() == 0) {
    return uniqueVolPair;
  }
  List<VolumeJoinVO> uniqueVols=uniqueVolPair.first();
  Long[] vrIds=new Long[uniqueVols.size()];
  int i=0;
  for (  VolumeJoinVO v : uniqueVols) {
    vrIds[i++]=v.getId();
  }
  List<VolumeJoinVO> vrs=_volumeJoinDao.searchByIds(vrIds);
  return new Pair<List<VolumeJoinVO>,Integer>(vrs,count);
}
