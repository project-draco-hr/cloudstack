{
  Account caller=CallContext.current().getCallingAccount();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long id=cmd.getId();
  Object keyword=cmd.getKeyword();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Map<String,String> tags=cmd.getTags();
  if (instanceId != null) {
    UserVmVO userVM=_userVmDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException("Unable to list network groups for virtual machine instance " + instanceId + "; instance not found.");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue(),cmd.getStartIndex(),cmd.getPageSizeVal());
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SecurityGroupJoinVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SecurityGroupJoinVO> sb=_securityGroupJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  _accountMgr.buildACLViewSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.EQ);
  SearchCriteria<SecurityGroupJoinVO> sc=sb.create();
  _accountMgr.buildACLViewSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<SecurityGroupJoinVO> tagSc=_securityGroupJoinDao.createSearchCriteria();
    for (    String key : tags.keySet()) {
      SearchCriteria<SecurityGroupJoinVO> tsc=_securityGroupJoinDao.createSearchCriteria();
      tsc.addAnd("tagKey",SearchCriteria.Op.EQ,key);
      tsc.addAnd("tagValue",SearchCriteria.Op.EQ,tags.get(key));
      tagSc.addOr("tagKey",SearchCriteria.Op.SC,tsc);
    }
    sc.addAnd("tagKey",SearchCriteria.Op.SC,tagSc);
  }
  if (securityGroup != null) {
    sc.setParameters("name",securityGroup);
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupJoinVO> ssc=_securityGroupJoinDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("description",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  Pair<List<SecurityGroupJoinVO>,Integer> uniqueSgPair=_securityGroupJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueSgPair.second();
  if (count.intValue() == 0) {
    return uniqueSgPair;
  }
  List<SecurityGroupJoinVO> uniqueSgs=uniqueSgPair.first();
  Long[] sgIds=new Long[uniqueSgs.size()];
  int i=0;
  for (  SecurityGroupJoinVO v : uniqueSgs) {
    sgIds[i++]=v.getId();
  }
  List<SecurityGroupJoinVO> sgs=_securityGroupJoinDao.searchByIds(sgIds);
  return new Pair<List<SecurityGroupJoinVO>,Integer>(sgs,count);
}
