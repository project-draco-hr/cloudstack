{
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  boolean listAll=cmd.listAll();
  Long id=cmd.getId();
  String accountName=cmd.getSearchName();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,null,null,permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,listAll,false,"listAccounts");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  Filter searchFilter=new Filter(AccountJoinVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountJoinVO> sb=_accountJoinDao.createSearchBuilder();
  sb.and("accountName",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("type",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and("needsCleanup",sb.entity().isNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and("typeNEQ",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and("idNEQ",sb.entity().getId(),SearchCriteria.Op.NEQ);
  SearchCriteria<AccountJoinVO> sc=sb.create();
  SearchCriteria<AccountJoinVO> aclSc=_accountJoinDao.createSearchCriteria();
  if (!permittedDomains.isEmpty() || !permittedAccounts.isEmpty() || !permittedResources.isEmpty()) {
    if (!permittedDomains.isEmpty()) {
      if (isRecursive) {
        for (int i=0; i < permittedDomains.size(); i++) {
          Domain domain=_domainDao.findById(permittedDomains.get(i));
          aclSc.addOr("domainPath",SearchCriteria.Op.LIKE,domain.getPath() + "%");
        }
      }
 else {
        aclSc.addOr("domainId",SearchCriteria.Op.IN,permittedDomains.toArray());
      }
    }
    if (!permittedAccounts.isEmpty()) {
      aclSc.addOr("id",SearchCriteria.Op.IN,permittedAccounts.toArray());
    }
    if (!permittedResources.isEmpty()) {
      aclSc.addOr("id",SearchCriteria.Op.IN,permittedResources.toArray());
    }
    sc.addAnd("id",SearchCriteria.Op.SC,aclSc);
  }
  sc.setParameters("idNEQ",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountJoinVO> ssc=_accountJoinDao.createSearchCriteria();
    ssc.addOr("accountName",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("state",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("accountName",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters("type",type);
  }
  if (state != null) {
    sc.setParameters("state",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters("needsCleanup",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters("accountName",accountName);
  }
  sc.setParameters("typeNEQ",Account.ACCOUNT_TYPE_PROJECT);
  if (id != null) {
    sc.setParameters("id",id);
  }
  return _accountJoinDao.searchAndCount(sc,searchFilter);
}
