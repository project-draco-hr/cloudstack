{
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  Object id=cmd.getId();
  Object name=cmd.getStoragePoolName();
  Object path=cmd.getPath();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object address=cmd.getIpAddress();
  Object keyword=cmd.getKeyword();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(StoragePoolJoinVO.class,"id",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<StoragePoolJoinVO> sb=_poolJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and("path",sb.entity().getPath(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("clusterId",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and("hostAddress",sb.entity().getHostAddress(),SearchCriteria.Op.EQ);
  SearchCriteria<StoragePoolJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<StoragePoolJoinVO> ssc=_poolJoinDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("poolType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (name != null) {
    sc.setParameters("name",name);
  }
  if (path != null) {
    sc.setParameters("path",path);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (pod != null) {
    sc.setParameters("podId",pod);
  }
  if (address != null) {
    sc.setParameters("hostAddress",address);
  }
  if (cluster != null) {
    sc.setParameters("clusterId",cluster);
  }
  Pair<List<StoragePoolJoinVO>,Integer> uniquePoolPair=_poolJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniquePoolPair.second();
  if (count.intValue() == 0) {
    return uniquePoolPair;
  }
  List<StoragePoolJoinVO> uniquePools=uniquePoolPair.first();
  Long[] vrIds=new Long[uniquePools.size()];
  int i=0;
  for (  StoragePoolJoinVO v : uniquePools) {
    vrIds[i++]=v.getId();
  }
  List<StoragePoolJoinVO> vrs=_poolJoinDao.searchByIds(vrIds);
  return new Pair<List<StoragePoolJoinVO>,Integer>(vrs,count);
}
