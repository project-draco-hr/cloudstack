{
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
    if (hypers == null || hypers.isEmpty()) {
      return new Pair<List<TemplateJoinVO>,Integer>(new ArrayList<TemplateJoinVO>(),0);
    }
  }
  VMTemplateVO template=null;
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue("sortkey.algorithm"));
  isAscending=(isAscending == null ? Boolean.TRUE : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,"sortKey",isAscending,startIndex,pageSize);
  SearchBuilder<TemplateJoinVO> sb=_templateJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getTempZonePair());
  SearchCriteria<TemplateJoinVO> sc=sb.create();
  if (templateId != null) {
    template=_templateDao.findByIdIncludingRemoved(templateId);
    if (template == null) {
      throw new InvalidParameterValueException("Please specify a valid template ID.");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error("Template Id " + templateId + " is not an ISO");
      InvalidParameterValueException ex=new InvalidParameterValueException("Specified Template Id is not an ISO");
      ex.addProxyObject(template.getUuid(),"templateId");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error("Incorrect format of the template id " + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException("Incorrect format " + template.getFormat() + " of the specified template id");
      ex.addProxyObject(template.getUuid(),"templateId");
      throw ex;
    }
    if (!template.isPublicTemplate() && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      _accountMgr.checkAccess(caller,null,false,template);
    }
    sc.addAnd("id",SearchCriteria.Op.EQ,templateId);
  }
 else {
    DomainVO domain=null;
    if (!permittedAccounts.isEmpty()) {
      domain=_domainDao.findById(permittedAccounts.get(0).getDomainId());
    }
 else {
      domain=_domainDao.findById(Domain.ROOT_DOMAIN);
    }
    if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
      sc.addAnd("accountType",SearchCriteria.Op.NEQ,Account.ACCOUNT_TYPE_PROJECT);
    }
 else     if (listProjectResourcesCriteria == ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sc.addAnd("accountType",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
    }
    if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
      sc.addAnd("domainPath",SearchCriteria.Op.LIKE,domain.getPath() + "%");
    }
    List<Long> relatedDomainIds=new ArrayList<Long>();
    List<Long> permittedAccountIds=new ArrayList<Long>();
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        permittedAccountIds.add(account.getId());
        boolean publicTemplates=(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community);
        DomainVO domainTreeNode=null;
        if (publicTemplates) {
          domainTreeNode=_domainDao.findById(Domain.ROOT_DOMAIN);
        }
 else {
          domainTreeNode=_domainDao.findById(account.getDomainId());
        }
        relatedDomainIds.add(domainTreeNode.getId());
        while (domainTreeNode.getParent() != null) {
          domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          relatedDomainIds.add(domainTreeNode.getId());
        }
        if (_accountMgr.isAdmin(account.getId()) || publicTemplates) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(domainTreeNode.getPath(),domainTreeNode.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.add(childDomain.getId());
          }
        }
      }
    }
    if (!isIso) {
      if (hypers != null && !hypers.isEmpty()) {
        String[] relatedHypers=new String[hypers.size()];
        for (int i=0; i < hypers.size(); i++) {
          relatedHypers[i]=hypers.get(i).toString();
        }
        sc.addAnd("hypervisorType",SearchCriteria.Op.IN,relatedHypers);
      }
    }
    if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
      sc.addAnd("publicTemplate",SearchCriteria.Op.EQ,true);
      if (templateFilter == TemplateFilter.featured) {
        sc.addAnd("featured",SearchCriteria.Op.EQ,true);
      }
 else {
        sc.addAnd("featured",SearchCriteria.Op.EQ,false);
      }
      if (!permittedAccounts.isEmpty()) {
        SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
        scc.addOr("domainId",SearchCriteria.Op.IN,relatedDomainIds.toArray());
        scc.addOr("domainId",SearchCriteria.Op.NULL);
        sc.addAnd("domainId",SearchCriteria.Op.SC,scc);
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      if (!permittedAccounts.isEmpty()) {
        sc.addAnd("accountId",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      sc.addAnd("sharedAccountId",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    }
 else     if (templateFilter == TemplateFilter.executable) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr("publicTemplate",SearchCriteria.Op.EQ,true);
      if (!permittedAccounts.isEmpty()) {
        scc.addOr("accountId",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
      sc.addAnd("publicTemplate",SearchCriteria.Op.SC,scc);
    }
    if (tags != null && !tags.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      for (      Map.Entry<String,String> entry : tags.entrySet()) {
        SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
        scTag.addAnd("tagKey",SearchCriteria.Op.EQ,entry.getKey());
        scTag.addAnd("tagValue",SearchCriteria.Op.EQ,entry.getValue());
        if (isIso) {
          scTag.addAnd("tagResourceType",SearchCriteria.Op.EQ,ResourceObjectType.ISO);
        }
 else {
          scTag.addAnd("tagResourceType",SearchCriteria.Op.EQ,ResourceObjectType.Template);
        }
        scc.addOr("tagKey",SearchCriteria.Op.SC,scTag);
      }
      sc.addAnd("tagKey",SearchCriteria.Op.SC,scc);
    }
    if (keyword != null) {
      sc.addAnd("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    }
 else     if (name != null) {
      sc.addAnd("name",SearchCriteria.Op.EQ,name);
    }
    if (isIso) {
      sc.addAnd("format",SearchCriteria.Op.EQ,"ISO");
    }
 else {
      sc.addAnd("format",SearchCriteria.Op.NEQ,"ISO");
    }
    if (!hyperType.equals(HypervisorType.None)) {
      sc.addAnd("hypervisorType",SearchCriteria.Op.EQ,hyperType);
    }
    if (bootable != null) {
      sc.addAnd("bootable",SearchCriteria.Op.EQ,bootable);
    }
    if (onlyReady) {
      SearchCriteria<TemplateJoinVO> readySc=_templateJoinDao.createSearchCriteria();
      readySc.addOr("state",SearchCriteria.Op.EQ,TemplateState.Ready);
      readySc.addOr("format",SearchCriteria.Op.EQ,ImageFormat.BAREMETAL);
      SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
      isoPerhostSc.addAnd("format",SearchCriteria.Op.EQ,ImageFormat.ISO);
      isoPerhostSc.addAnd("templateType",SearchCriteria.Op.EQ,TemplateType.PERHOST);
      readySc.addOr("templateType",SearchCriteria.Op.SC,isoPerhostSc);
      sc.addAnd("state",SearchCriteria.Op.SC,readySc);
    }
    if (!showDomr) {
      sc.addAnd("templateType",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
    }
  }
  if (zoneId != null) {
    SearchCriteria<TemplateJoinVO> zoneSc=_templateJoinDao.createSearchCriteria();
    zoneSc.addOr("dataCenterId",SearchCriteria.Op.EQ,zoneId);
    zoneSc.addOr("dataStoreScope",SearchCriteria.Op.EQ,ScopeType.REGION);
    SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
    isoPerhostSc.addAnd("format",SearchCriteria.Op.EQ,ImageFormat.ISO);
    isoPerhostSc.addAnd("templateType",SearchCriteria.Op.EQ,TemplateType.PERHOST);
    zoneSc.addOr("templateType",SearchCriteria.Op.SC,isoPerhostSc);
    sc.addAnd("dataCenterId",SearchCriteria.Op.SC,zoneSc);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=null;
  if (showRemovedTmpl) {
    uniqueTmplPair=_templateJoinDao.searchIncludingRemovedAndCount(sc,searchFilter);
  }
 else {
    sc.addAnd("templateState",SearchCriteria.Op.IN,new State[]{State.Active,State.NotUploaded,State.UploadInProgress});
    uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  }
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  String[] tzIds=new String[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    tzIds[i++]=v.getTempZonePair();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByTemplateZonePair(showRemovedTmpl,tzIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}
