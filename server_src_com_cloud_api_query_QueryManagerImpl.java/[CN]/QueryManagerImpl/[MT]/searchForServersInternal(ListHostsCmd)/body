{
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  String zoneType=cmd.getZoneType();
  Object name=cmd.getHostName();
  Object type=cmd.getType();
  Object state=cmd.getState();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object resourceState=cmd.getResourceState();
  Object haHosts=cmd.getHaHost();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(HostJoinVO.class,"id",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<HostJoinVO> sb=_hostJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("type",sb.entity().getType(),SearchCriteria.Op.LIKE);
  sb.and("status",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterType",sb.entity().getZoneType(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("clusterId",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and("resourceState",sb.entity().getResourceState(),SearchCriteria.Op.EQ);
  String haTag=_haMgr.getHaTag();
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    if ((Boolean)haHosts) {
      sb.and("tag",sb.entity().getTag(),SearchCriteria.Op.EQ);
    }
 else {
      sb.and().op("tag",sb.entity().getTag(),SearchCriteria.Op.NEQ);
      sb.or("tagNull",sb.entity().getTag(),SearchCriteria.Op.NULL);
      sb.cp();
    }
  }
  SearchCriteria<HostJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<HostJoinVO> ssc=_hostJoinDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("status",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("type",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (type != null) {
    sc.setParameters("type","%" + type);
  }
  if (state != null) {
    sc.setParameters("status",state);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (zoneType != null) {
    sc.setParameters("dataCenterType",zoneType);
  }
  if (pod != null) {
    sc.setParameters("podId",pod);
  }
  if (cluster != null) {
    sc.setParameters("clusterId",cluster);
  }
  if (resourceState != null) {
    sc.setParameters("resourceState",resourceState);
  }
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    sc.setJoinParameters("hostTagSearch","tag",haTag);
  }
  Pair<List<HostJoinVO>,Integer> uniqueHostPair=_hostJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueHostPair.second();
  if (count.intValue() == 0) {
    return uniqueHostPair;
  }
  List<HostJoinVO> uniqueHosts=uniqueHostPair.first();
  Long[] hostIds=new Long[uniqueHosts.size()];
  int i=0;
  for (  HostJoinVO v : uniqueHosts) {
    hostIds[i++]=v.getId();
  }
  List<HostJoinVO> hosts=_hostJoinDao.searchByIds(hostIds);
  return new Pair<List<HostJoinVO>,Integer>(hosts,count);
}
