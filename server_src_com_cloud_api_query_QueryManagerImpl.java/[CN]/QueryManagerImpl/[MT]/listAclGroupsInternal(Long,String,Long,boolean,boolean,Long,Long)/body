{
  Account caller=CallContext.current().getCallingAccount();
  Boolean listForDomain=false;
  if (aclGroupId != null) {
    AclGroup group=_aclGroupDao.findById(aclGroupId);
    if (group == null) {
      throw new InvalidParameterValueException("Unable to find acl group by id " + aclGroupId);
    }
    _accountMgr.checkAccess(caller,null,true,group);
  }
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Domain id=" + domainId + " doesn't exist");
    }
    _accountMgr.checkAccess(caller,domain);
    if (aclGroupName != null) {
      AclGroup group=_aclGroupDao.findByName(domainId,aclGroupName);
      if (group == null) {
        throw new InvalidParameterValueException("Unable to find acl group by name " + aclGroupName + " in domain "+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,group);
    }
  }
  if (aclGroupId == null) {
    if (_accountMgr.isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (_accountMgr.isAdmin(caller.getType()) && domainId != null) {
      listForDomain=true;
    }
  }
  Filter searchFilter=new Filter(AclGroupJoinVO.class,"id",true,startIndex,pageSize);
  SearchBuilder<AclGroupJoinVO> sb=_aclGroupJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and("domainId",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  if (listForDomain && isRecursive) {
    sb.and("path",sb.entity().getDomainPath(),SearchCriteria.Op.LIKE);
  }
  SearchCriteria<AclGroupJoinVO> sc=sb.create();
  if (aclGroupName != null) {
    sc.setParameters("name",aclGroupName);
  }
  if (aclGroupId != null) {
    sc.setParameters("id",aclGroupId);
  }
  if (listForDomain) {
    if (isRecursive) {
      Domain domain=_domainDao.findById(domainId);
      sc.setParameters("path",domain.getPath() + "%");
    }
 else {
      sc.setParameters("domainId",domainId);
    }
  }
  Pair<List<AclGroupJoinVO>,Integer> uniqueGroupPair=_aclGroupJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueGroupPair.second();
  if (count.intValue() == 0) {
    return uniqueGroupPair;
  }
  List<AclGroupJoinVO> uniqueGroups=uniqueGroupPair.first();
  Long[] vrIds=new Long[uniqueGroups.size()];
  int i=0;
  for (  AclGroupJoinVO v : uniqueGroups) {
    vrIds[i++]=v.getId();
  }
  List<AclGroupJoinVO> vrs=_aclGroupJoinDao.searchByIds(vrIds);
  return new Pair<List<AclGroupJoinVO>,Integer>(vrs,count);
}
