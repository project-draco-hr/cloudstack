{
  List<Long> affinityGroupIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<AffinityGroupDomainMapVO> maps=_affinityGroupDomainMapDao.listByDomain(allowedDomains.toArray());
  for (  AffinityGroupDomainMapVO map : maps) {
    boolean subdomainAccess=map.isSubdomainAccess();
    if (map.getDomainId() == domainId || subdomainAccess) {
      affinityGroupIds.add(map.getAffinityGroupId());
    }
  }
  if (!affinityGroupIds.isEmpty()) {
    SearchCriteria<AffinityGroupJoinVO> domainSC=_affinityGroupJoinDao.createSearchCriteria();
    domainSC.addAnd("id",SearchCriteria.Op.IN,affinityGroupIds.toArray());
    domainSC.addAnd("aclType",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd("id",SearchCriteria.Op.SC,domainSC);
    Pair<List<AffinityGroupJoinVO>,Integer> uniqueGroupsPair=_affinityGroupJoinDao.searchAndCount(sc,searchFilter);
    Integer count=uniqueGroupsPair.second();
    if (count.intValue() == 0) {
      return new ArrayList<AffinityGroupJoinVO>();
    }
    List<AffinityGroupJoinVO> uniqueGroups=uniqueGroupsPair.first();
    Long[] vrIds=new Long[uniqueGroups.size()];
    int i=0;
    for (    AffinityGroupJoinVO v : uniqueGroups) {
      vrIds[i++]=v.getId();
    }
    List<AffinityGroupJoinVO> vrs=_affinityGroupJoinDao.searchByIds(vrIds);
    return vrs;
  }
 else {
    return new ArrayList<AffinityGroupJoinVO>();
  }
}
