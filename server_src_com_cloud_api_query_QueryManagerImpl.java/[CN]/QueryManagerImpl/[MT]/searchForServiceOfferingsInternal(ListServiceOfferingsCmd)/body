{
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue("sortkey.algorithm"));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(ServiceOfferingJoinVO.class,"sortKey",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingJoinVO> sc=_srvOfferingJoinDao.createSearchCriteria();
  Account caller=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vmTypeStr=cmd.getSystemVmType();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException("Only ROOT admins can access system's offering");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException("The account:" + caller.getAccountName() + " does not fall in the same domain hierarchy as the service offering");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException("Only root admins can access system's offering");
    }
    List<Long> domainIds=new ArrayList<Long>();
    DomainVO domainRecord=_domainDao.findById(caller.getDomainId());
    if (domainRecord == null) {
      s_logger.error("Could not find the domainId for account:" + caller.getAccountName());
      throw new CloudAuthenticationException("Could not find the domainId for account:" + caller.getAccountName());
    }
    domainIds.add(domainRecord.getId());
    while (domainRecord.getParent() != null) {
      domainRecord=_domainDao.findById(domainRecord.getParent());
      domainIds.add(domainRecord.getId());
    }
    SearchCriteria<ServiceOfferingJoinVO> spc=_srvOfferingJoinDao.createSearchCriteria();
    spc.addOr("domainId",SearchCriteria.Op.IN,domainIds.toArray());
    spc.addOr("domainId",SearchCriteria.Op.NULL);
    sc.addAnd("domainId",SearchCriteria.Op.SC,spc);
  }
 else {
    if (caller.getDomainId() != 1 && isSystem) {
      throw new InvalidParameterValueException("Non ROOT admins cannot access system's offering");
    }
    if (domainId != null) {
      sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingJoinVO> ssc=_srvOfferingJoinDao.createSearchCriteria();
    ssc.addOr("displayText",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      InvalidParameterValueException ex=new InvalidParameterValueException("unable to find a virtual machine with specified id");
      ex.addProxyObject(vmId.toString(),"vmId");
      throw ex;
    }
    _accountMgr.checkAccess(caller,null,true,vmInstance);
    ServiceOfferingVO offering=_srvOfferingDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd("id",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd("useLocalStorage",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd("id",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd("systemUse",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.EQ,name);
  }
  if (vmTypeStr != null) {
    sc.addAnd("vm_type",SearchCriteria.Op.EQ,vmTypeStr);
  }
  return _srvOfferingJoinDao.searchAndCount(sc,searchFilter);
}
