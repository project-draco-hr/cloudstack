{
  if (object == null) {
    return null;
  }
  Map<String,Object> map=(Map<String,Object>)object;
  Event.Record record=new Event.Record();
  record.id=toLong(map.get("id"));
  record.timestamp=toDate(map.get("timestamp"));
  record.clazz=toString(map.get("class"));
  record.operation=toEventOperation(map.get("operation"));
  record.ref=toString(map.get("ref"));
  record.objUuid=toString(map.get("obj_uuid"));
  Object a, b;
  a=map.get("snapshot");
switch (toXenAPIObjects(record.clazz)) {
case SESSION:
    b=toSessionRecord(a);
  break;
case SUBJECT:
b=toSubjectRecord(a);
break;
case ROLE:
b=toRoleRecord(a);
break;
case TASK:
b=toTaskRecord(a);
break;
case EVENT:
b=toEventRecord(a);
break;
case POOL:
b=toPoolRecord(a);
break;
case POOL_PATCH:
b=toPoolPatchRecord(a);
break;
case VM:
b=toVMRecord(a);
break;
case VM_METRICS:
b=toVMMetricsRecord(a);
break;
case VM_GUEST_METRICS:
b=toVMGuestMetricsRecord(a);
break;
case VMPP:
b=toVMPPRecord(a);
break;
case HOST:
b=toHostRecord(a);
break;
case HOST_CRASHDUMP:
b=toHostCrashdumpRecord(a);
break;
case HOST_PATCH:
b=toHostPatchRecord(a);
break;
case HOST_METRICS:
b=toHostMetricsRecord(a);
break;
case HOST_CPU:
b=toHostCpuRecord(a);
break;
case NETWORK:
b=toNetworkRecord(a);
break;
case VIF:
b=toVIFRecord(a);
break;
case VIF_METRICS:
b=toVIFMetricsRecord(a);
break;
case PIF:
b=toPIFRecord(a);
break;
case PIF_METRICS:
b=toPIFMetricsRecord(a);
break;
case BOND:
b=toBondRecord(a);
break;
case VLAN:
b=toVLANRecord(a);
break;
case SM:
b=toSMRecord(a);
break;
case SR:
b=toSRRecord(a);
break;
case VDI:
b=toVDIRecord(a);
break;
case VBD:
b=toVBDRecord(a);
break;
case VBD_METRICS:
b=toVBDMetricsRecord(a);
break;
case PBD:
b=toPBDRecord(a);
break;
case CRASHDUMP:
b=toCrashdumpRecord(a);
break;
case VTPM:
b=toVTPMRecord(a);
break;
case CONSOLE:
b=toConsoleRecord(a);
break;
case USER:
b=toUserRecord(a);
break;
case DATA_SOURCE:
b=toDataSourceRecord(a);
break;
case BLOB:
b=toBlobRecord(a);
break;
case MESSAGE:
b=toMessageRecord(a);
break;
case SECRET:
b=toSecretRecord(a);
break;
case TUNNEL:
b=toTunnelRecord(a);
break;
default :
throw new RuntimeException("Internal error in auto-generated code whilst unmarshalling event snapshot");
}
record.snapshot=b;
return record;
}
