{
  if (object == null) {
    return null;
  }
  Map<String,Object> map=(Map<String,Object>)object;
  VM.Record record=new VM.Record();
  record.uuid=toString(map.get("uuid"));
  record.allowedOperations=toSetOfVmOperations(map.get("allowed_operations"));
  record.currentOperations=toMapOfStringVmOperations(map.get("current_operations"));
  record.powerState=toVmPowerState(map.get("power_state"));
  record.nameLabel=toString(map.get("name_label"));
  record.nameDescription=toString(map.get("name_description"));
  record.userVersion=toLong(map.get("user_version"));
  record.isATemplate=toBoolean(map.get("is_a_template"));
  record.suspendVDI=toVDI(map.get("suspend_VDI"));
  record.residentOn=toHost(map.get("resident_on"));
  record.affinity=toHost(map.get("affinity"));
  record.memoryOverhead=toLong(map.get("memory_overhead"));
  record.memoryTarget=toLong(map.get("memory_target"));
  record.memoryStaticMax=toLong(map.get("memory_static_max"));
  record.memoryDynamicMax=toLong(map.get("memory_dynamic_max"));
  record.memoryDynamicMin=toLong(map.get("memory_dynamic_min"));
  record.memoryStaticMin=toLong(map.get("memory_static_min"));
  record.VCPUsParams=toMapOfStringString(map.get("VCPUs_params"));
  record.VCPUsMax=toLong(map.get("VCPUs_max"));
  record.VCPUsAtStartup=toLong(map.get("VCPUs_at_startup"));
  record.actionsAfterShutdown=toOnNormalExit(map.get("actions_after_shutdown"));
  record.actionsAfterReboot=toOnNormalExit(map.get("actions_after_reboot"));
  record.actionsAfterCrash=toOnCrashBehaviour(map.get("actions_after_crash"));
  record.consoles=toSetOfConsole(map.get("consoles"));
  record.VIFs=toSetOfVIF(map.get("VIFs"));
  record.VBDs=toSetOfVBD(map.get("VBDs"));
  record.crashDumps=toSetOfCrashdump(map.get("crash_dumps"));
  record.VTPMs=toSetOfVTPM(map.get("VTPMs"));
  record.PVBootloader=toString(map.get("PV_bootloader"));
  record.PVKernel=toString(map.get("PV_kernel"));
  record.PVRamdisk=toString(map.get("PV_ramdisk"));
  record.PVArgs=toString(map.get("PV_args"));
  record.PVBootloaderArgs=toString(map.get("PV_bootloader_args"));
  record.PVLegacyArgs=toString(map.get("PV_legacy_args"));
  record.HVMBootPolicy=toString(map.get("HVM_boot_policy"));
  record.HVMBootParams=toMapOfStringString(map.get("HVM_boot_params"));
  record.HVMShadowMultiplier=toDouble(map.get("HVM_shadow_multiplier"));
  record.platform=toMapOfStringString(map.get("platform"));
  record.PCIBus=toString(map.get("PCI_bus"));
  record.otherConfig=toMapOfStringString(map.get("other_config"));
  record.domid=toLong(map.get("domid"));
  record.domarch=toString(map.get("domarch"));
  record.lastBootCPUFlags=toMapOfStringString(map.get("last_boot_CPU_flags"));
  record.isControlDomain=toBoolean(map.get("is_control_domain"));
  record.metrics=toVMMetrics(map.get("metrics"));
  record.guestMetrics=toVMGuestMetrics(map.get("guest_metrics"));
  record.lastBootedRecord=toString(map.get("last_booted_record"));
  record.recommendations=toString(map.get("recommendations"));
  record.xenstoreData=toMapOfStringString(map.get("xenstore_data"));
  record.haAlwaysRun=toBoolean(map.get("ha_always_run"));
  record.haRestartPriority=toString(map.get("ha_restart_priority"));
  record.isASnapshot=toBoolean(map.get("is_a_snapshot"));
  record.snapshotOf=toVM(map.get("snapshot_of"));
  record.snapshots=toSetOfVM(map.get("snapshots"));
  record.snapshotTime=toDate(map.get("snapshot_time"));
  record.transportableSnapshotId=toString(map.get("transportable_snapshot_id"));
  record.blobs=toMapOfStringBlob(map.get("blobs"));
  record.tags=toSetOfString(map.get("tags"));
  record.blockedOperations=toMapOfVmOperationsString(map.get("blocked_operations"));
  record.snapshotInfo=toMapOfStringString(map.get("snapshot_info"));
  record.snapshotMetadata=toString(map.get("snapshot_metadata"));
  record.parent=toVM(map.get("parent"));
  record.children=toSetOfVM(map.get("children"));
  record.biosStrings=toMapOfStringString(map.get("bios_strings"));
  record.protectionPolicy=toVMPP(map.get("protection_policy"));
  record.isSnapshotFromVmpp=toBoolean(map.get("is_snapshot_from_vmpp"));
  return record;
}
