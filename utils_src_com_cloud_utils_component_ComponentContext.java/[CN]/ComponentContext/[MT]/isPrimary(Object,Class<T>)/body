{
  Class<?> componentType=beanType;
  Class<?> targetClass=getTargetClass(instance);
  Class<?> interfaces[]=targetClass.getInterfaces();
  for (  Class<?> intf : interfaces) {
    if (beanType.isAssignableFrom(intf) && intf != beanType) {
      componentType=intf;
      break;
    }
  }
  Map<String,T> matchedTypes=(Map<String,T>)ComponentContext.getComponentsOfType(componentType);
  if (matchedTypes.size() > 1) {
    Primary primary=targetClass.getAnnotation(Primary.class);
    if (primary != null) {
      s_logger.info(targetClass.getName() + " is the primary component of " + componentType.getName());
      return true;
    }
    s_logger.warn(targetClass.getName() + " is not the primary component of " + componentType.getName()+ ", there are other candidates");
    for (    T candidate : matchedTypes.values()) {
      s_logger.warn("Candidate " + getTargetClass(candidate).getName());
    }
    return false;
  }
  return true;
}
