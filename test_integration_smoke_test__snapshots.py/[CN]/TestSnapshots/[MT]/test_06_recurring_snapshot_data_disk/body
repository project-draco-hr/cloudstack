def test_06_recurring_snapshot_data_disk(self):
    'Test Recurring Snapshot data Disk\n        '
    volume = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine_with_disk.id, type='DATADISK', listall=True)
    self.assertEqual(isinstance(volume, list), True, 'Check list response returns a valid list')
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, volume[0].id, self.services['recurring_snapshot'])
    self.cleanup.append(recurring_snapshot)
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=volume[0].id)
    self.assertEqual(isinstance(list_snapshots_policy, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_snapshots_policy, None, 'Check if result exists in list item call')
    snapshots_policy = list_snapshots_policy[0]
    self.assertEqual(snapshots_policy.id, recurring_snapshot.id, 'Check recurring snapshot id in list resources call')
    self.assertEqual(snapshots_policy.maxsnaps, self.services['recurring_snapshot']['maxsnaps'], 'Check interval type in list resources call')
    time.sleep((self.services['recurring_snapshot']['maxsnaps'] * 3600))
    timeout = self.services['timeout']
    while True:
        snapshots = list_snapshots(self.apiclient, volumeid=volume[0].id, intervaltype=self.services['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
        if isinstance(snapshots, list):
            break
        elif (timeout == 0):
            raise Exception('List snapshots API call failed.')
        time.sleep(1)
        timeout = (timeout - 1)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertEqual(len(snapshots), self.services['recurring_snapshot']['maxsnaps'], 'Check maximum number of recurring snapshots retained')
    return
