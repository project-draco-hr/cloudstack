@classmethod
def setUpClass(cls):
    cls.api_client = super(TestSnapshots, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostypeid'])
    cls.services['domainid'] = cls.domain.id
    cls.services['server_with_disk']['zoneid'] = cls.zone.id
    cls.services['server_with_disk']['diskoffering'] = cls.disk_offering.id
    cls.services['server_without_disk']['zoneid'] = cls.zone.id
    cls.services['template'] = template.id
    cls.services['zoneid'] = cls.zone.id
    cls.services['diskoffering'] = cls.disk_offering.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.services['account'] = cls.account.account.name
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.virtual_machine = cls.virtual_machine_with_disk = VirtualMachine.create(cls.api_client, cls.services['server_with_disk'], templateid=template.id, accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls.virtual_machine_without_disk = VirtualMachine.create(cls.api_client, cls.services['server_without_disk'], templateid=template.id, accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls._cleanup = [cls.service_offering, cls.disk_offering, cls.account]
    return
