def test_07_template_from_snapshot(self):
    'Create Template from snapshot\n        '
    random_data_0 = random_gen(100)
    random_data_1 = random_gen(100)
    try:
        ssh_client = self.virtual_machine.get_ssh_client()
        cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s1 %s' % (self.services['rootdisk'], self.services['mount_dir'])), ('mkdir -p %s/%s/{%s,%s} ' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['sub_lvl_dir2'])), ('echo %s > %s/%s/%s/%s' % (random_data_0, self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['random_data'])), ('echo %s > %s/%s/%s/%s' % (random_data_1, self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir2'], self.services['random_data'])), 'sync']
        for c in cmds:
            self.debug(c)
            result = ssh_client.execute(c)
            self.debug(result)
    except Exception as e:
        self.fail(('SSH failed for VM with IP address: %s' % self.virtual_machine.ipaddress))
    cmds = [('umount %s' % self.services['mount_dir'])]
    for c in cmds:
        self.debug(c)
        ssh_client.execute(c)
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    volume = volumes[0]
    snapshot = Snapshot.create(self.apiclient, volume.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Snapshot created from volume ID: %s' % volume.id))
    template = Template.create_from_snapshot(self.apiclient, snapshot, self.services['templates'])
    self.cleanup.append(template)
    self.debug(('Template created from snapshot ID: %s' % snapshot.id))
    templates = list_templates(self.apiclient, templatefilter=self.services['templates']['templatefilter'], id=template.id)
    self.assertNotEqual(templates, None, 'Check if result exists in list item call')
    self.assertEqual(templates[0].id, template.id, 'Check new template id in list resources call')
    self.debug(('Deploying new VM from template: %s' % template.id))
    new_virtual_machine = VirtualMachine.create(self.apiclient, self.services['server_without_disk'], templateid=template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, mode=self.services['mode'])
    self.cleanup.append(new_virtual_machine)
    try:
        ssh = new_virtual_machine.get_ssh_client()
        cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s1 %s' % (self.services['rootdisk'], self.services['mount_dir']))]
        for c in cmds:
            ssh.execute(c)
        returned_data_0 = ssh.execute(('cat %s/%s/%s/%s' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['random_data'])))
        self.debug(returned_data_0)
        returned_data_1 = ssh.execute(('cat %s/%s/%s/%s' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir2'], self.services['random_data'])))
        self.debug(returned_data_1)
    except Exception as e:
        self.fail(('SSH failed for VM with IP address: %s' % new_virtual_machine.ipaddress))
    self.assertEqual(random_data_0, returned_data_0[0], 'Verify newly attached volume contents with existing one')
    self.assertEqual(random_data_1, returned_data_1[0], 'Verify newly attached volume contents with existing one')
    cmds = [('umount %s' % self.services['mount_dir'])]
    try:
        for c in cmds:
            self.debug(c)
            ssh_client.execute(c)
    except Exception as e:
        self.fail(('SSH failed for VM with IP address: %s' % new_virtual_machine.ipaddress))
    return
