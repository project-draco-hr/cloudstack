def test_03_volume_from_snapshot(self):
    'Create volumes from snapshots\n        '
    random_data_0 = random_gen(100)
    random_data_1 = random_gen(100)
    try:
        ssh_client = self.virtual_machine.get_ssh_client()
        format_volume_to_ext3(ssh_client, self.services['diskdevice'])
        cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s1 %s' % (self.services['diskdevice'], self.services['mount_dir'])), ('mkdir -p %s/%s/{%s,%s} ' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['sub_lvl_dir2'])), ('echo %s > %s/%s/%s/%s' % (random_data_0, self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['random_data'])), ('echo %s > %s/%s/%s/%s' % (random_data_1, self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir2'], self.services['random_data']))]
        for c in cmds:
            self.debug(c)
            ssh_client.execute(c)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.virtual_machine.ipaddress))
    cmds = [('umount %s' % self.services['mount_dir'])]
    try:
        for c in cmds:
            self.debug(c)
            ssh_client.execute(c)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.virtual_machine.ipaddress))
    list_volume_response = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
    volume_response = list_volume_response[0]
    snapshot = Snapshot.create(self.apiclient, volume_response.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created Snapshot from volume: %s' % volume_response.id))
    self.debug(('Creating volume from snapshot: %s' % snapshot.id))
    volume = Volume.create_from_snapshot(self.apiclient, snapshot.id, self.services, account=self.account.account.name, domainid=self.account.account.domainid)
    volumes = list_volumes(self.apiclient, id=volume.id)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(volumes), None, 'Check Volume list Length')
    self.assertEqual(volumes[0].id, volume.id, 'Check Volume in the List Volumes')
    new_virtual_machine = self.virtual_machine_without_disk
    self.cleanup.append(new_virtual_machine)
    cmd = attachVolume.attachVolumeCmd()
    cmd.id = volume.id
    cmd.virtualmachineid = new_virtual_machine.id
    self.apiclient.attachVolume(cmd)
    try:
        ssh = new_virtual_machine.get_ssh_client()
        cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s1 %s' % (self.services['diskdevice'], self.services['mount_dir']))]
        for c in cmds:
            self.debug(c)
            result = ssh.execute(c)
            self.debug(result)
        returned_data_0 = ssh.execute(('cat %s/%s/%s/%s' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir1'], self.services['random_data'])))
        returned_data_1 = ssh.execute(('cat %s/%s/%s/%s' % (self.services['mount_dir'], self.services['sub_dir'], self.services['sub_lvl_dir2'], self.services['random_data'])))
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.new_virtual_machine.ipaddress))
    self.assertEqual(random_data_0, returned_data_0[0], 'Verify newly attached volume contents with existing one')
    self.assertEqual(random_data_1, returned_data_1[0], 'Verify newly attached volume contents with existing one')
    cmds = [('umount %s' % self.services['mount_dir'])]
    try:
        for c in cmds:
            ssh_client.execute(c)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.new_virtual_machine.ipaddress))
    return
