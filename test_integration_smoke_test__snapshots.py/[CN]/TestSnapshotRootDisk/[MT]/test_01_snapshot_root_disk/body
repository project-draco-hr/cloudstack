def test_01_snapshot_root_disk(self):
    'Test Snapshot Root Disk\n        '
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine_with_disk.id, type='ROOT', listall=True)
    snapshot = Snapshot.create(self.apiclient, volumes[0].id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Snapshot created: ID - %s' % snapshot.id))
    snapshots = list_snapshots(self.apiclient, id=snapshot.id)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshots, None, 'Check if result exists in list item call')
    self.assertEqual(snapshots[0].id, snapshot.id, 'Check resource id in list resources call')
    self.debug(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % str(snapshot.id)))
    qresultset = self.dbclient.execute(("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % str(snapshot.id)))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    snapshot_uuid = qresult[0]
    account_id = qresult[1]
    volume_id = qresult[2]
    self.assertNotEqual(str(snapshot_uuid), 'NULL', 'Check if backup_snap_id is not null')
    hosts = list_hosts(self.apiclient, type='SecondaryStorage', zoneid=self.zone.id)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    uuids = []
    for host in hosts:
        parse_url = host.name.split('/')
        sec_storage_ip = parse_url[2]
        export_path = '/'.join(parse_url[3:])
        try:
            ssh_client = self.virtual_machine_with_disk.get_ssh_client()
            cmds = [('mkdir -p %s' % self.services['mount_dir']), ('mount %s/%s %s' % (sec_storage_ip, export_path, self.services['mount_dir'])), ('ls %s/snapshots/%s/%s' % (self.services['mount_dir'], account_id, volume_id))]
            for c in cmds:
                self.debug(c)
                result = ssh_client.execute(c)
                self.debug(result)
        except Exception:
            self.fail(('SSH failed for Virtual machine: %s' % self.virtual_machine_with_disk.ipaddress))
        uuids.append(result)
        cmds = [('umount %s' % self.services['mount_dir'])]
        try:
            for c in cmds:
                self.debug(c)
                result = ssh_client.execute(c)
                self.debug(result)
        except Exception as e:
            self.fail(('SSH failed for Virtual machine: %s' % self.virtual_machine_with_disk.ipaddress))
    res = str(uuids)
    self.assertEqual(res.count(snapshot_uuid), 1, 'Check snapshot UUID in secondary storage and database')
    return
