@classmethod
def setUpClass(cls):
    testClient = super(TestSnapshotRootDisk, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.hypervisorNotSupported = False
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    if ((cls.hypervisor.lower() in ['hyperv', 'lxc']) or ('kvm-centos6' in cls.testClient.getZoneForTests())):
        cls.hypervisorNotSupported = True
    cls._cleanup = []
    if (not cls.hypervisorNotSupported):
        macchinina = Templates().templates['macchinina']
        cls.template = Template.register(cls.apiclient, macchinina[cls.hypervisor.lower()], cls.zone.id, hypervisor=cls.hypervisor.lower(), domainid=cls.domain.id)
        cls.template.download(cls.apiclient)
        if (cls.template == FAILED):
            assert False, 'get_template() failed to return template'
        cls.services['domainid'] = cls.domain.id
        cls.services['small']['zoneid'] = cls.zone.id
        cls.services['templates']['ostypeid'] = cls.template.ostypeid
        cls.services['zoneid'] = cls.zone.id
        cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings']['tiny'])
        cls.virtual_machine = cls.virtual_machine_with_disk = VirtualMachine.create(cls.apiclient, cls.services['small'], templateid=cls.template.id, accountid=cls.account.name, domainid=cls.account.domainid, zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
        cls._cleanup.append(cls.virtual_machine)
        cls._cleanup.append(cls.service_offering)
        cls._cleanup.append(cls.account)
        cls._cleanup.append(cls.template)
    return
