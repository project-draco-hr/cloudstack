{
  Long userVmId=work.getInstanceId();
  UserVm vm=_userVMDao.findById(userVmId);
  if (vm != null && vm.getState() == State.Running) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("SecurityGroupManager v2: found vm, " + userVmId + " state="+ vm.getState());
    }
    Long agentId=vm.getHostId();
    if (agentId != null) {
      if (!_workTracker.canSend(agentId)) {
        s_logger.debug("SecurityGroupManager v2: not sending ruleset update for vm " + vm.getInstanceName() + ": too many messages outstanding on host "+ agentId);
        return;
      }
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId,ruleType);
      SecurityGroupRulesCmd cmd=generateRulesetCmd(ruleType,vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),null,work.getLogsequenceNumber(),rules);
      cmd.setMsId(_serverId);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("SecurityGroupManager v2: sending ruleset update for vm " + vm.getInstanceName() + ": num rules="+ cmd.getRuleSet().length+ " num cidrs="+ cmd.getTotalNumCidrs()+ " sig="+ cmd.getSignature());
      }
      Commands cmds=new Commands(cmd);
      try {
        _agentMgr.send(agentId,cmds,_answerListener);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("SecurityGroupManager v2: sent ruleset updates for " + vm.getInstanceName() + " curr queue size="+ _workQueue.size());
        }
      }
 catch (      AgentUnavailableException e) {
        s_logger.debug("Unable to send updates for vm: " + userVmId + "(agentid="+ agentId+ ")");
        _workTracker.handleException(agentId);
      }
    }
  }
 else {
    if (s_logger.isDebugEnabled()) {
      if (vm != null)       s_logger.debug("No rules sent to vm " + vm + "state="+ vm.getState());
 else       s_logger.debug("Could not find vm: No rules sent to vm " + userVmId);
    }
  }
}
