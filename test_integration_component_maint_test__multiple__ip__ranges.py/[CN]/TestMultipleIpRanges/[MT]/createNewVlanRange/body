@classmethod
def createNewVlanRange(cls):
    ' Increment current cidr of vlan range present in network\n            and create new range\n        '
    publicIpRange = PublicIpRange.list(cls.api_client)
    cls.startIp = publicIpRange[0].startip
    cls.endIp = publicIpRange[0].endip
    cls.gateway = publicIpRange[0].gateway
    cls.netmask = publicIpRange[0].netmask
    ip = IPNetwork(((cls.startIp + '/') + cls.netmask))
    networkIncrementFactor = random.randint(1, 255)
    new_cidr = ip.__iadd__(networkIncrementFactor)
    ip2 = IPNetwork(new_cidr)
    test_nw = ip2.network
    ip = IPAddress(test_nw)
    test_gateway = ip.__add__(1)
    test_startIp = ip.__add__(3)
    test_endIp = ip.__add__(10)
    cls.testdata['vlan_ip_range']['startip'] = test_startIp
    cls.testdata['vlan_ip_range']['endip'] = test_endIp
    cls.testdata['vlan_ip_range']['gateway'] = test_gateway
    cls.testdata['vlan_ip_range']['netmask'] = cls.netmask
    cls.testdata['vlan_ip_range']['zoneid'] = cls.zone.id
    cls.testdata['vlan_ip_range']['podid'] = cls.pod.id
    return PublicIpRange.create(cls.api_client, cls.testdata['vlan_ip_range'])
