@attr(tags=['sg'])
def test_06_reboot_VR_verify_ip_alias(self):
    'Reboot VR and verify ip alias\n            1.Deploy guest vm in new cidr\n            2.Verify ip alias creation\n            3.Reboot VR\n            4.Verify ip alias on VR\n        '
    list_router_response = list_routers(self.apiclient, zoneid=self.zone.id, listall=True)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list host returns a valid list')
    host = hosts[0]
    self.debug(('Router ID: %s, state: %s' % (router.id, router.state)))
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    proc = 'ip addr show eth0'
    result = get_process_status(host.ipaddress, self.services['host']['publicport'], self.services['host']['username'], self.services['host']['password'], router.linklocalip, proc)
    res = str(result)
    self.debug(('ip alias configuration on VR: %s' % res))
    self.assertNotEqual((res.find(self.alias_ip) - 1), 'ip alias is not created on VR eth0')
    resp = Router.reboot(self.apiclient, router.id)
    self.debug(('Reboot router api response: %s' % resp))
    list_router_response = list_routers(self.apiclient, zoneid=self.zone.id, listall=True)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    self.assertEqual(router.state, 'Running', 'Router is not in running state after reboot')
    result = get_process_status(host.ipaddress, self.services['host']['publicport'], self.services['host']['username'], self.services['host']['password'], router.linklocalip, proc)
    res = str(result)
    self.assertNotEqual(res.find(self.alias_ip), (-1), 'IP alias not present on VR after VR reboot')
    return
