@attr(tags=['sg'])
def test_03_passwd_service_on_alias_IP(self):
    'Deploy guest vm in new CIDR and verify passwd service on alias ip\n            1.Deploy guest vm in new cidr\n            2.Verify password service(passwd_server_ip.py) listens on alias ip in VR\n        '
    list_router_response = list_routers(self.apiclient, zoneid=self.zone.id, listall=True)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list host returns a valid list')
    host = hosts[0]
    self.debug(('Router ID: %s, state: %s' % (router.id, router.state)))
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    port = self.testdata['configurableData']['host']['publicport']
    username = self.testdata['configurableData']['host']['username']
    password = self.testdata['configurableData']['host']['password']
    SshClient(host.ipaddress, port, username, password)
    proc = 'python passwd_server_ip.py'
    result = get_process_status(host.ipaddress, port, username, password, router.linklocalip, ('netstat -atnp | grep %s' % proc))
    res = str(result)
    self.debug(('password process status on VR: %s' % res))
    self.assertNotEqual((res.find(self.alias_ip) - 1), 'password service is not running on alias ip')
    return
