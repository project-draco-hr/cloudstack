def test_01_deploy_vm_in_new_cidr(self):
    'Deploy guest vm after adding guest IP range in new CIDR\n\n            1.Add IP range in new CIDR\n            2.Deploy guest vm\n        '
    dc_id = self.dbclient.execute(("select id from data_center where uuid = '%s';" % str(self.services['zoneid'])))
    dc_id = dc_id[0][0]
    id_list = self.dbclient.execute(("select id from user_ip_address where allocated is null and data_center_id = '%s';" % str(dc_id)))
    ip_list = []
    for i in range(len(id_list)):
        ip_list.append(id_list[i][0])
    vr_state = self.list_Routers()
    if (vr_state is True):
        for id in ip_list:
            self.dbclient.execute(("update user_ip_address set allocated=now() where id = '%s';" % str(id)))
    else:
        ip_list = ip_list[:(-2)]
        for id in ip_list:
            self.dbclient.execute(("update user_ip_address set allocated=now() where id = '%s';" % str(id)))
    test_gateway = self.services['cidr']['gateway']
    test_startIp = self.services['cidr']['startip']
    test_endIp = self.services['cidr']['endip']
    test_netmask = self.services['cidr']['netmask']
    self.services['vlan_ip_range']['startip'] = test_startIp
    self.services['vlan_ip_range']['endip'] = test_endIp
    self.services['vlan_ip_range']['gateway'] = test_gateway
    self.services['vlan_ip_range']['netmask'] = test_netmask
    self.services['vlan_ip_range']['zoneid'] = self.zone.id
    self.services['vlan_ip_range']['podid'] = self.pod.id
    new_vlan = PublicIpRange.create(self.apiclient, self.services['vlan_ip_range'])
    self.debug(('Created new vlan range with startip:%s and endip:%s' % (test_startIp, test_endIp)))
    self.cleanup.append(new_vlan)
    new_vlan_res = new_vlan.list(self.apiclient, id=new_vlan.vlan.id)
    self.verify_vlan_range(new_vlan_res, self.services['vlan_ip_range'])
    if (vr_state is False):
        vm_res = VirtualMachine.create(self.apiclient, self.services['server_without_disk'], templateid=self.template.id, accountid=self.account.name, domainid=self.services['domainid'], zoneid=self.services['zoneid'], serviceofferingid=self.service_offering.id, mode=self.services['mode'])
        self.cleanup.append(vm_res)
    try:
        try:
            self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['server_without_disk'], templateid=self.template.id, accountid=self.account.name, domainid=self.services['domainid'], zoneid=self.services['zoneid'], serviceofferingid=self.service_offering.id, mode=self.services['mode'])
        except Exception as e:
            raise Exception('Warning: Exception during vm deployment: {}'.format(e))
    finally:
        for id in ip_list:
            self.dbclient.execute(("update user_ip_address set allocated=default where id = '%s';" % str(id)))
    self.vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(self.vm_response, list), True, 'Check VM list response returned a valid list')
    self.ip_range = list(netaddr.iter_iprange(unicode(self.services['cidr']['startip']), unicode(self.services['cidr']['endip'])))
    self.nic_ip = netaddr.IPAddress(unicode(self.vm_response[0].nic[0].ipaddress))
    self.debug('vm got {} as ip address'.format(self.nic_ip))
    self.assertIn(self.nic_ip, self.ip_range, 'VM did not get the ip address from the new ip range')
    self.virtual_machine.delete(self.apiclient)
    expunge_del = Configurations.list(self.apiclient, name='expunge.delay')
    expunge_int = Configurations.list(self.apiclient, name='expunge.interval')
    wait_time = ((int(expunge_del[0].value) + int(expunge_int[0].value)) + int(30))
    self.debug('Waiting for {} seconds for the vm to expunge'.format(wait_time))
    time.sleep(wait_time)
    return
