{
  VirtualMachineEntityImpl vmEntity=ComponentContext.inject(VirtualMachineEntityImpl.class);
  vmEntity.init(id,owner,hostName,displayName,cpu,speed,memory,computeTags,rootDiskTags,new ArrayList<String>(networkNicMap.keySet()));
  VMInstanceVO vm=_vmDao.findByUuid(id);
  ServiceOfferingVO computeOffering=_serviceOfferingDao.findById(vm.getId(),vm.getServiceOfferingId());
  DiskOfferingInfo rootDiskOfferingInfo=new DiskOfferingInfo();
  rootDiskOfferingInfo.setDiskOffering(computeOffering);
  Long diskOfferingId=vm.getDiskOfferingId();
  if (diskOfferingId == null) {
    throw new InvalidParameterValueException("Installing from ISO requires a disk offering to be specified for the root disk.");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if (diskOffering == null) {
    throw new InvalidParameterValueException("Unable to find disk offering " + diskOfferingId);
  }
  Long size=null;
  if (diskOffering.getDiskSize() == 0) {
    size=diskSize;
    if (size == null) {
      throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
    }
    _volumeMgr.validateVolumeSizeRange(size * 1024 * 1024* 1024);
  }
  rootDiskOfferingInfo.setDiskOffering(diskOffering);
  rootDiskOfferingInfo.setSize(size);
  if (diskOffering.isCustomizedIops() != null && diskOffering.isCustomizedIops()) {
    Map<String,String> userVmDetails=_userVmDetailsDao.listDetailsKeyPairs(vm.getId());
    if (userVmDetails != null) {
      String minIops=userVmDetails.get("minIopsDo");
      String maxIops=userVmDetails.get("maxIopsDo");
      rootDiskOfferingInfo.setMinIops(minIops != null && minIops.trim().length() > 0 ? Long.parseLong(minIops) : null);
      rootDiskOfferingInfo.setMaxIops(maxIops != null && maxIops.trim().length() > 0 ? Long.parseLong(maxIops) : null);
    }
  }
  LinkedHashMap<Network,List<? extends NicProfile>> networkIpMap=new LinkedHashMap<Network,List<? extends NicProfile>>();
  for (  String uuid : networkNicMap.keySet()) {
    NetworkVO network=_networkDao.findByUuid(uuid);
    if (network != null) {
      networkIpMap.put(network,new ArrayList<NicProfile>(Arrays.asList(networkNicMap.get(uuid))));
    }
  }
  HypervisorType hypervisorType=HypervisorType.valueOf(hypervisor);
  _itMgr.allocate(vm.getInstanceName(),_templateDao.findById(new Long(isoId)),computeOffering,rootDiskOfferingInfo,new ArrayList<DiskOfferingInfo>(),networkIpMap,plan,hypervisorType);
  return vmEntity;
}
