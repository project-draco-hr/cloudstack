@attr(speed='slow')
@attr(tags=['advanced', 'advancedns'], required_hardware='true')
def test_04_snapshot_limit(self):
    'Test snapshot limit in snapshot policies\n        '
    volumes = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    volume = volumes[0]
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, volume.id, self.services['recurring_snapshot'])
    self.cleanup.append(recurring_snapshot)
    snapshot_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=volume.id)
    self.assertEqual(isinstance(snapshot_policy, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshot_policy, None, 'Check if result exists in list item call')
    self.assertEqual(snapshot_policy[0].id, recurring_snapshot.id, 'Check recurring snapshot id in list resources call')
    self.assertEqual(snapshot_policy[0].maxsnaps, self.services['recurring_snapshot']['maxsnaps'], 'Check interval type in list resources call')
    time.sleep((self.services['recurring_snapshot']['maxsnaps'] * 3600))
    snapshots = list_snapshots(self.apiclient, volumeid=volume.id, intervaltype=self.services['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertEqual(len(snapshots), self.services['recurring_snapshot']['maxsnaps'], 'Check maximum number of recurring snapshots retained')
    snapshot = snapshots[0]
    time.sleep(self.services['sleep'])
    self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshot.id))
    return
