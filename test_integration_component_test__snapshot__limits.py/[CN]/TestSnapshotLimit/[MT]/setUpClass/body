@classmethod
def setUpClass(cls):
    cls.testClient = super(TestSnapshotLimit, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls._cleanup = []
    try:
        template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
        cls.services['server']['zoneid'] = cls.zone.id
        cls.services['template'] = template.id
        cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.services['account'] = cls.account.name
        if cls.zone.localstorageenabled:
            cls.services['service_offering']['storagetype'] = 'local'
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['server'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
        cls._cleanup.append(cls.virtual_machine)
    except Exception as e:
        cls.tearDownClass()
        unittest.SkipTest(('setupClass fails for %s' % cls.__name__))
        raise e
    return
