def get_template(apiclient, zone_id=None, ostype_desc=None, template_filter='featured', template_type='BUILTIN', template_id=None, template_name=None, account=None, domain_id=None, project_id=None, hypervisor=None):
    '\n    @Name : get_template\n    @Desc : Retrieves the template Information based upon inputs provided\n            Template is retrieved based upon either of the inputs matched\n            condition\n    @Input : returns a template"\n    @Output : FAILED in case of any failure\n              template Information matching the inputs\n    '
    cmd = listTemplates.listTemplatesCmd()
    cmd.templatefilter = template_filter
    if (domain_id is not None):
        cmd.domainid = domain_id
    if (zone_id is not None):
        cmd.zoneid = zone_id
    if (template_id is not None):
        cmd.id = template_id
    if (template_name is not None):
        cmd.name = template_name
    if (hypervisor is not None):
        cmd.hypervisor = hypervisor
    if (project_id is not None):
        cmd.projectid = project_id
    if (account is not None):
        cmd.account = account
    '\n    Get the Templates pertaining to the inputs provided\n    '
    list_templatesout = apiclient.listTemplates(cmd)
    if (list_templatesout is None):
        return FAILED
    if (validateList(list_templatesout[0]) == FAIL):
        return FAILED
    for template in list_templatesout:
        if (template.isready and (template.templatetype == template_type) and (template.ostypename == ostype_desc)):
            print 'found template'
            return template
    '\n    Return default first template, if no template matched\n    '
    return list_templatesout[0]
