def verifyRouterState(apiclient, routerid, state, listall=True):
    'List router and check if the router state matches the given state'
    retriesCount = 10
    isRouterInDesiredState = False
    exceptionOccured = False
    exceptionMessage = ''
    try:
        while (retriesCount >= 0):
            routers = Router.list(apiclient, id=routerid, listall=listall)
            assert (validateList(routers)[0] == PASS), 'Routers list validation failed'
            if (str(routers[0].state).lower() == state):
                isRouterInDesiredState = True
                break
            retriesCount -= 1
            time.sleep(60)
        if (not isRouterInDesiredState):
            exceptionMessage = ('Router state should be %s, it is %s' % (state, routers[0].state))
    except Exception as e:
        exceptionOccured = True
        exceptionMessage = e
        return [exceptionOccured, isRouterInDesiredState, exceptionMessage]
    return [exceptionOccured, isRouterInDesiredState, exceptionMessage]
