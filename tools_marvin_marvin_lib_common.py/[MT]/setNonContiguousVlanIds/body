def setNonContiguousVlanIds(apiclient, zoneid):
    '\n    Form the non contiguous ranges based on currently assigned range in physical network\n    '
    NonContigVlanIdsAcquired = False
    list_physical_networks_response = PhysicalNetwork.list(apiclient, zoneid=zoneid)
    assert isinstance(list_physical_networks_response, list)
    assert (len(list_physical_networks_response) > 0), ('No physical networks found in zone %s' % zoneid)
    for physical_network in list_physical_networks_response:
        if (not hasattr(physical_network, 'vlan')):
            continue
        vlans = xsplit(physical_network.vlan, ['-', ','])
        assert (len(vlans) > 0)
        assert (int(vlans[0]) < int(vlans[(-1)])), ('VLAN range  %s was improperly split' % physical_network.vlan)
        non_contig_end_vlan_id = (int(vlans[(-1)]) + 6)
        non_contig_start_vlan_id = (int(vlans[0]) - 6)
        vlan = {'partial_range': ['', ''], 'full_range': '', }
        if (non_contig_end_vlan_id < 4095):
            vlan['partial_range'][0] = ((str((non_contig_end_vlan_id - 4)) + '-') + str((non_contig_end_vlan_id - 3)))
            vlan['partial_range'][1] = ((str((non_contig_end_vlan_id - 1)) + '-') + str(non_contig_end_vlan_id))
            vlan['full_range'] = ((str((non_contig_end_vlan_id - 4)) + '-') + str(non_contig_end_vlan_id))
            NonContigVlanIdsAcquired = True
        elif (non_contig_start_vlan_id > 0):
            vlan['partial_range'][0] = ((str(non_contig_start_vlan_id) + '-') + str((non_contig_start_vlan_id + 1)))
            vlan['partial_range'][1] = ((str((non_contig_start_vlan_id + 3)) + '-') + str((non_contig_start_vlan_id + 4)))
            vlan['full_range'] = ((str(non_contig_start_vlan_id) + '-') + str((non_contig_start_vlan_id + 4)))
            NonContigVlanIdsAcquired = True
        else:
            NonContigVlanIdsAcquired = False
        if (not NonContigVlanIdsAcquired):
            continue
        else:
            break
    if (not NonContigVlanIdsAcquired):
        return (None, None)
    return (physical_network, vlan)
