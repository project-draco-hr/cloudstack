def getExpectedPortGroupNames(api_client, physical_network, network_rate, switch_name, traffic_types, switch_dict, vcenter_conn, specified_vlan, traffic_type):
    ' Return names of expected port groups that should be\n        present in vcenter\n\n        Parameters:\n        @physical_network: Physical Network of the @traffic_type\n        @network_rate:     as defined by network.throttling.rate\n        @switch_name:      Name of the switch used by the traffic in\n                           vcenter\n        @traffic_types:    List of all traffic types present in the physical\n                           network\n        @switch_dict:      Dictionary containing switch information in vcenter\n        @vcenter_conn:     vcenter connection object used to fetch information\n                           from vcenter\n        @specified_vlan:   The vlan for @traffic_type\n        @traffic_type:     Traffic type for which the port names are to be\n                           returned\n\n        Return value:\n        [PASS/FAIL, exception object if FAIL else expected port group names\n         for @traffic_type]\n        '
    try:
        expectedDVPortGroupNames = []
        if (traffic_type == PUBLIC_TRAFFIC):
            publicIpRanges = PublicIpRange.list(api_client, physicalnetworkid=physical_network.id)
            if (publicIpRanges is not None):
                for publicIpRange in publicIpRanges:
                    vlanInIpRange = re.findall('\\d+', str(publicIpRange.vlan))
                    vlanId = 'untagged'
                    if (len(vlanInIpRange) > 0):
                        vlanId = vlanInIpRange[0]
                    ipRangeInUse = isIpRangeInUse(api_client, publicIpRange)
                    if ipRangeInUse:
                        expectedDVPortGroupName = (((((((((('cloud' + '.') + PUBLIC_TRAFFIC) + '.') + vlanId) + '.') + network_rate) + '.') + '1') + '-') + switch_name)
                        expectedDVPortGroupNames.append(expectedDVPortGroupName)
                    expectedDVPortGroupName = (((((((((('cloud' + '.') + PUBLIC_TRAFFIC) + '.') + vlanId) + '.') + '0') + '.') + '1') + '-') + switch_name)
                    expectedDVPortGroupNames.append(expectedDVPortGroupName)
        if (traffic_type == GUEST_TRAFFIC):
            networks = Network.list(api_client, physicalnetworkid=physical_network.id, listall=True)
            if (networks is not None):
                for network in networks:
                    networkVlan = re.findall('\\d+', str(network.vlan))
                    if (len(networkVlan) > 0):
                        vlanId = networkVlan[0]
                        expectedDVPortGroupName = (((((((((('cloud' + '.') + GUEST_TRAFFIC) + '.') + vlanId) + '.') + network_rate) + '.') + '1') + '-') + switch_name)
                        expectedDVPortGroupNames.append(expectedDVPortGroupName)
        if (traffic_type == STORAGE_TRAFFIC):
            vlanId = ''
            storageIpRanges = StorageNetworkIpRange.list(api_client, zoneid=physical_network.zoneid)
            if (storageIpRanges is not None):
                for storageIpRange in storageIpRanges:
                    vlanInIpRange = re.findall('\\d+', str(storageIpRange.vlan))
                    if (len(vlanInIpRange) > 0):
                        vlanId = vlanInIpRange[0]
                    else:
                        vlanId = 'untagged'
                    expectedDVPortGroupName = (((((((((('cloud' + '.') + STORAGE_TRAFFIC) + '.') + vlanId) + '.') + '0') + '.') + '1') + '-') + switch_name)
                    expectedDVPortGroupNames.append(expectedDVPortGroupName)
            else:
                response = analyzeTrafficType(traffic_types, MANAGEMENT_TRAFFIC)
                assert (response[0] == PASS), response[1]
                (filteredList, switchName, vlanSpecified) = (response[1], response[2], response[3])
                if (not filteredList):
                    raise Exception('No Management traffic present and                                Storage traffic does not have any IP range,                                Invalid zone setting')
                if (switchName not in switch_dict):
                    dvswitches = vcenter_conn.get_dvswitches(name=switchName)
                    switch_dict[switchName] = dvswitches[0]['dvswitch']['portgroupNameList']
                if vlanSpecified:
                    vlanId = vlanSpecified
                else:
                    vlanId = 'untagged'
                expectedDVPortGroupName = (((((((((('cloud' + '.') + STORAGE_TRAFFIC) + '.') + vlanId) + '.') + '0') + '.') + '1') + '-') + switchName)
                expectedDVPortGroupNames.append(expectedDVPortGroupName)
        if (traffic_type == MANAGEMENT_TRAFFIC):
            vlanId = 'untagged'
            if specified_vlan:
                vlanId = specified_vlan
            expectedDVPortGroupName = (((((((((('cloud' + '.') + 'private') + '.') + vlanId) + '.') + '0') + '.') + '1') + '-') + switch_name)
            expectedDVPortGroupNames.append(expectedDVPortGroupName)
    except Exception as e:
        return [FAIL, e]
    return [PASS, expectedDVPortGroupNames]
