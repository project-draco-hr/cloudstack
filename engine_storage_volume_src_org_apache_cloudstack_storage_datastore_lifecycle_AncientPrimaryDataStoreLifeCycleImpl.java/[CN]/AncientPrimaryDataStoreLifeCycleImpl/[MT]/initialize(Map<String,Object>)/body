{
  Long clusterId=(Long)dsInfos.get("clusterId");
  Long podId=(Long)dsInfos.get("podId");
  Long zoneId=(Long)dsInfos.get("zoneId");
  String url=(String)dsInfos.get("url");
  Long providerId=(Long)dsInfos.get("providerId");
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException("Cluster id requires pod id");
  }
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException("scheme is null " + url + ", add nfs:// as a prefix");
    }
 else     if (uri.getScheme().equalsIgnoreCase("nfs")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException("host or path is null, should be nfs://hostname/path");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase("sharedMountPoint")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException("host or path is null, should be sharedmountpoint://localhost/path");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase("rbd")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException("host or path is null, should be rbd://hostname/pool");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + " is not a valid uri");
  }
  String tags=(String)dsInfos.get("tags");
  Map<String,String> details=(Map<String,String>)dsInfos.get("details");
  if (tags != null) {
    String[] tokens=tags.split(",");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,"true");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  Object localStorage=dsInfos.get("localStorage");
  if (localStorage != null) {
    hostPath=hostPath.replace("/","");
  }
  String userInfo=uri.getUserInfo();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("createPool Params @ scheme - " + scheme + " storageHost - "+ storageHost+ " hostPath - "+ hostPath+ " port - "+ port);
  }
  if (scheme.equalsIgnoreCase("nfs")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("file")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,"localhost",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("sharedMountPoint")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("clvm")) {
    pool=new StoragePoolVO(StoragePoolType.CLVM,storageHost,0,hostPath.replaceFirst("/",""));
  }
 else   if (scheme.equalsIgnoreCase("rbd")) {
    if (port == -1) {
      port=6789;
    }
    pool=new StoragePoolVO(StoragePoolType.RBD,storageHost,port,hostPath.replaceFirst("/",""));
    pool.setUserInfo(userInfo);
  }
 else   if (scheme.equalsIgnoreCase("PreSetup")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("iscsi")) {
    String[] tokens=hostPath.split("/");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException("IscsiLUN need to have clusters specified");
      }
      hostPath.replaceFirst("/","");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      for (      StoragePoolDiscoverer discoverer : _discoverers) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=discoverer.find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException("Not enough information for discovery " + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase("iso")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("vmfs")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,"VMFS datastore: " + hostPath,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase("ocfs2")) {
    port=7777;
    pool=new StoragePoolVO(StoragePoolType.OCFS2,"clustered",port,hostPath);
  }
 else {
    StoragePoolType type=Enum.valueOf(StoragePoolType.class,scheme);
    if (type != null) {
      pool=new StoragePoolVO(type,storageHost,0,hostPath);
    }
 else {
      s_logger.warn("Unable to figure out the scheme for URI: " + uri);
      throw new IllegalArgumentException("Unable to figure out the scheme for URI: " + uri);
    }
  }
  if (pool == null) {
    s_logger.warn("Unable to figure out the scheme for URI: " + uri);
    throw new IllegalArgumentException("Unable to figure out the scheme for URI: " + uri);
  }
  if (localStorage == null) {
    List<StoragePoolVO> pools=primaryDataStoreDao.listPoolByHostPath(storageHost,hostPath);
    if (!pools.isEmpty() && !scheme.equalsIgnoreCase("sharedmountpoint")) {
      Long oldPodId=pools.get(0).getPodId();
      throw new CloudRuntimeException("Storage pool " + uri + " already in use by another pod (id="+ oldPodId+ ")");
    }
  }
  long poolId=primaryDataStoreDao.getNextInSequence(Long.class,"id");
  Object existingUuid=dsInfos.get("uuid");
  String uuid=null;
  if (existingUuid != null) {
    uuid=(String)existingUuid;
  }
 else   if (scheme.equalsIgnoreCase("sharedmountpoint") || scheme.equalsIgnoreCase("clvm")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase("PreSetup")) {
    uuid=hostPath.replace("/","");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=primaryDataStoreDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Another active pool with the same uuid already exists");
    }
    throw new CloudRuntimeException("Another active pool with the same uuid already exists");
  }
  String poolName=(String)dsInfos.get("name");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("In createPool Setting poolId - " + poolId + " uuid - "+ uuid+ " zoneId - "+ zoneId+ " podId - "+ podId+ " poolName - "+ poolName);
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(zoneId);
  pool.setPodId(podId);
  pool.setName(poolName);
  pool.setClusterId(clusterId);
  pool.setStorageProviderId(providerId);
  pool.setStatus(StoragePoolStatus.Initialized);
  pool=primaryDataStoreDao.persist(pool,details);
  return dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
}
