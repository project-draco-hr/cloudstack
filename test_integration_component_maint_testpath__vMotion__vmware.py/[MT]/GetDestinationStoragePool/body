def GetDestinationStoragePool(self, poolsToavoid, storage_scope, storage_type):
    ' Get destination pool which has scope same as migrateto\n        and which is not in avoid set\n    '
    destinationPool = None
    destinationCluster = None
    if ((storage_scope == 'within_cluster') or (storage_scope == 'across_cluster')):
        scope = 'CLUSTER'
    else:
        scope = 'ZONE'
    pool = list_storage_pools(self.apiclient, name=poolsToavoid)
    clusters = list_clusters(self.apiclient, listall=True)
    if (storage_scope == 'across_cluster'):
        for cluster in clusters:
            if (cluster.id not in pool[0].clusterid):
                if (len(list_storage_pools(self.apiclient, clusterid=cluster.id)) > 0):
                    destinationCluster = cluster
                    break
        pools_in_cluster = list_storage_pools(self.apiclient, clusterid=destinationCluster.id, scope=scope)
        for pool in pools_in_cluster:
            if (pool.type == storage_type):
                destinationPool = pool
                break
        return destinationPool
    elif (storage_scope == 'within_cluster'):
        destinationCluster = list_clusters(self.apiclient, id=pool[0].clusterid, listall=True)[0]
        storagepools = list_storage_pools(self.apiclient, clusterid=destinationCluster.id, scope=scope)
        for pool in storagepools:
            if ((pool.name not in poolsToavoid) and (pool.type == storage_type)):
                destinationPool = pool
        return destinationPool
    elif (storage_scope == 'ZONE'):
        storagepools = list_storage_pools(self.apiclient, scope=scope)
        for pool in storagepools:
            if ((pool.name not in poolsToavoid) and (pool.type == storage_type)):
                destinationPool = pool
        return destinationPool
