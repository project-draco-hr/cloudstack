@classmethod
def setUpClass(cls):
    testClient = super(TestStorageLiveMigrationVmware, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.dbclient = cls.testClient.getDbConnection()
    cls.exceptionList = []
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    if (cls.hypervisor.lower() not in ['vmware', 'kvm', 'xenserver', 'hyper-v']):
        raise cls.skipTest(('Storage migration not supported on %s' % cls.hypervisor))
    iscsi_pools = []
    nfs_pools = []
    try:
        cls.list_vmware_clusters = list_clusters(cls.apiclient, hypervisor='vmware')
    except Exception as e:
        raise cls.skipTest(e)
    if (len(cls.list_vmware_clusters) < 1):
        raise cls.skipTest('There is no cluster available in the setup')
    else:
        for cluster in cls.list_vmware_clusters:
            try:
                list_esx_hosts = list_hosts(cls.apiclient, clusterid=cluster.id)
            except Exception as e:
                raise cls.skipTest(e)
            if (len(list_esx_hosts) > 1):
                try:
                    list_storage = list_storage_pools(cls.apiclient, clusterid=cluster.id)
                except Exception as e:
                    raise cls.skipTest(e)
                for storage in list_storage:
                    if (storage.type == 'VMFS'):
                        iscsi_pools.append(storage)
                if (len(iscsi_pools) > 1):
                    break
                else:
                    iscsi_pools = []
                for storage in list_storage:
                    if (storage.type == 'NetworkFilesystem'):
                        nfs_pools.append(storage)
                if (len(nfs_pools) > 1):
                    break
                else:
                    nfs_pools = []
    if ((len(iscsi_pools) < 2) and (len(nfs_pools) < 2)):
        raise unittest.SkipTest('Not enough storage pools available in the setup')
    cls.hosts = list_esx_hosts
    cls.pools = list_storage
    cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
    cls._cleanup.append(cls.account)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
    cls._cleanup.append(cls.service_offering)
    if cls.zone.localstorageenabled:
        cls.testdata['service_offering']['storagetype'] = 'local'
        cls.service_offering_local1 = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering_local1)
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
    cls._cleanup.append(cls.disk_offering)
    cls.resized_disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['resized_disk_offering'])
    cls._cleanup.append(cls.resized_disk_offering)
    if cls.zone.localstorageenabled:
        cls.testdata['disk_offering']['storagetype'] = 'local'
        cls.disk_offering_local1 = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
        cls._cleanup.append(cls.disk_offering_local1)
    cls.windows_template = get_windows_template(cls.apiclient, cls.zone.id, ostype_desc='Windows Server 2012 (64-bit)', template_type='USER', hypervisor='VMware', template_filter='all')
    cls.testdata['vgpu']['Windows Server 2012 (64-bit)']['url'] = 'http://10.147.28.7/templates/Windows2012/WindowsServer2012.ova'
    cls.testdata['vgpu']['Windows Server 2012 (64-bit)']['format'] = 'OVA'
    if (cls.windows_template == FAILED):
        if ('http://pleaseupdateURL/dummy.vhd' in cls.testdata['vgpu']['Windows Server 2012 (64-bit)']['url']):
            raise unittest.SkipTest('Check Test Data file if it has the valid template URL')
        cls.windows_template = Template.register(cls.apiclient, cls.testdata['vgpu']['Windows Server 2012 (64-bit)'], hypervisor='VMware', zoneid=cls.zone.id)
        timeout = cls.testdata['vgpu']['timeout']
        while True:
            time.sleep(cls.testdata['vgpu']['sleep'])
            list_template_response = Template.list(cls.apiclient, templatefilter=cls.testdata['templatefilter'], id=cls.windows_template.id)
            if (isinstance(list_template_response, list) is not True):
                raise unittest.SkipTest('Check list template api response returns a valid list')
            if (len(list_template_response) is None):
                raise unittest.SkipTest('Check template registered is in List Templates')
            template_response = list_template_response[0]
            if template_response.isready:
                break
            if (timeout == 0):
                cls.debug('Failed to download windows template, we will be skipping windows related tests below')
            timeout = (timeout - 1)
    return
