{
  SearchBuilder<StoragePoolVO> hostSearch=createSearchBuilder();
  SearchBuilder<StoragePoolHostVO> hostPoolSearch=_hostDao.createSearchBuilder();
  SearchBuilder<StoragePoolDetailVO> tagPoolSearch=_detailsDao.createSearchBuilder();
  ;
  hostPoolSearch.and("hostId",hostPoolSearch.entity().getHostId(),Op.EQ);
  hostSearch.and("scope",hostSearch.entity().getScope(),Op.EQ);
  hostSearch.and("removed",hostSearch.entity().getRemoved(),Op.NULL);
  hostSearch.and("status",hostSearch.entity().getStatus(),Op.EQ);
  hostSearch.join("hostJoin",hostPoolSearch,hostSearch.entity().getId(),hostPoolSearch.entity().getPoolId(),JoinBuilder.JoinType.INNER);
  if (!(tags == null || tags.length == 0)) {
    tagPoolSearch.and("name",tagPoolSearch.entity().getName(),Op.EQ);
    tagPoolSearch.and("value",tagPoolSearch.entity().getValue(),Op.EQ);
    hostSearch.join("tagJoin",tagPoolSearch,hostSearch.entity().getId(),tagPoolSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<StoragePoolVO> sc=hostSearch.create();
  sc.setJoinParameters("hostJoin","hostId",hostId);
  sc.setParameters("scope",ScopeType.HOST.toString());
  sc.setParameters("status",Status.Up.toString());
  if (!(tags == null || tags.length == 0)) {
    Map<String,String> details=tagsToDetails(tags);
    for (    Map.Entry<String,String> detail : details.entrySet()) {
      sc.setJoinParameters("tagJoin","name",detail.getKey());
      sc.setJoinParameters("tagJoin","value",detail.getValue());
    }
  }
  return listBy(sc);
}
