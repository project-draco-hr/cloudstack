{
  StringBuilder sql=new StringBuilder(DetailsSqlPrefix);
  if (clusterId != null) {
    sql.append("storage_pool.cluster_id = ? OR storage_pool.cluster_id IS NULL) AND (");
  }
  for (  Map.Entry<String,String> detail : details.entrySet()) {
    sql.append("((storage_pool_details.name='").append(detail.getKey()).append("') AND (storage_pool_details.value='").append(detail.getValue()).append("')) OR ");
  }
  sql.delete(sql.length() - 4,sql.length());
  sql.append(DetailsSqlSuffix);
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try (PreparedStatement pstmt=txn.prepareStatement(sql.toString())){
    List<StoragePoolVO> pools=new ArrayList<StoragePoolVO>();
    int i=1;
    pstmt.setLong(i++,dcId);
    pstmt.setLong(i++,podId);
    pstmt.setString(i++,scope.toString());
    if (clusterId != null) {
      pstmt.setLong(i++,clusterId);
    }
    pstmt.setInt(i++,details.size());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        pools.add(toEntityBean(rs,false));
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Unable to execute :" + e.getMessage(),e);
    }
    return pools;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to execute :" + e.getMessage(),e);
  }
}
