{
  List<StoragePoolVO> storagePools=null;
  if (tags == null || tags.length == 0) {
    SearchCriteria2<StoragePoolVO,StoragePoolVO> sc=SearchCriteria2.create(StoragePoolVO.class);
    sc.addAnd(sc.getEntity().getDataCenterId(),Op.EQ,dcId);
    sc.addAnd(sc.getEntity().getStatus(),Op.EQ,Status.Up);
    sc.addAnd(sc.getEntity().getScope(),Op.EQ,ScopeType.ZONE);
    return sc.list();
  }
 else {
    Map<String,String> details=tagsToDetails(tags);
    StringBuilder sql=new StringBuilder(ZoneWideDetailsSqlPrefix);
    for (    Map.Entry<String,String> detail : details.entrySet()) {
      sql.append("((storage_pool_details.name='").append(detail.getKey()).append("') AND (storage_pool_details.value='").append(detail.getValue()).append("')) OR ");
    }
    sql.delete(sql.length() - 4,sql.length());
    sql.append(ZoneWideDetailsSqlSuffix);
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql.toString());
      int i=1;
      pstmt.setLong(i++,dcId);
      pstmt.setString(i++,ScopeType.ZONE.toString());
      pstmt.setInt(i++,details.size());
      ResultSet rs=pstmt.executeQuery();
      List<StoragePoolVO> pools=new ArrayList<StoragePoolVO>();
      while (rs.next()) {
        pools.add(toEntityBean(rs,false));
      }
      return pools;
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Unable to execute " + pstmt,e);
    }
  }
}
