{
  boolean sharedSourceNat=offering.getSharedSourceNat();
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (!sharedSourceNat && _networkModel.areServicesSupportedInNetwork(network.getId(),Service.SourceNat) && (network.getGuestType() == Network.GuestType.Isolated || (network.getGuestType() == Network.GuestType.Shared && zone.getNetworkType() == NetworkType.Advanced))) {
    List<IPAddressVO> ips=null;
    Account owner=_entityMgr.findById(Account.class,network.getAccountId());
    if (network.getVpcId() != null) {
      ips=_ipAddressDao.listByAssociatedVpc(network.getVpcId(),true);
      if (ips.isEmpty()) {
        Vpc vpc=_vpcMgr.getActiveVpc(network.getVpcId());
        logger.debug("Creating a source nat ip for vpc " + vpc);
        _vpcMgr.assignSourceNatIpAddressToVpc(owner,vpc);
      }
    }
 else {
      ips=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
      if (ips.isEmpty()) {
        logger.debug("Creating a source nat ip for network " + network);
        _ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner,network);
      }
    }
  }
  List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  NetworkElement element : networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
        throw new CloudRuntimeException("Service provider " + element.getProvider().getName() + " either doesn't exist or is not enabled in physical network id: "+ network.getPhysicalNetworkId());
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Asking " + element.getName() + " to implemenet "+ network);
      }
      if (!element.implement(network,offering,dest,context)) {
        CloudRuntimeException ex=new CloudRuntimeException("Failed to implement provider " + element.getProvider().getName() + " for network with specified id");
        ex.addProxyObject(network.getUuid(),"networkId");
        throw ex;
      }
    }
  }
  for (  NetworkElement element : networkElements) {
    if ((element instanceof AggregatedCommandExecutor) && (providersToImplement.contains(element.getProvider()))) {
      ((AggregatedCommandExecutor)element).prepareAggregatedExecution(network,dest);
    }
  }
  try {
    logger.debug("Reprogramming network " + network + " as a part of network implement");
    if (!reprogramNetworkRules(network.getId(),CallContext.current().getCallingAccount(),network)) {
      logger.warn("Failed to re-program the network as a part of network " + network + " implement");
      ResourceUnavailableException ex=new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
      ex.addProxyObject(_entityMgr.findById(DataCenter.class,network.getDataCenterId()).getUuid());
      throw ex;
    }
    for (    NetworkElement element : networkElements) {
      if ((element instanceof AggregatedCommandExecutor) && (providersToImplement.contains(element.getProvider()))) {
        if (!((AggregatedCommandExecutor)element).completeAggregatedExecution(network,dest)) {
          logger.warn("Failed to re-program the network as a part of network " + network + " implement due to aggregated commands execution failure!");
          ResourceUnavailableException ex=new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
          ex.addProxyObject(_entityMgr.findById(DataCenter.class,network.getDataCenterId()).getUuid());
          throw ex;
        }
      }
    }
  }
  finally {
    for (    NetworkElement element : networkElements) {
      if ((element instanceof AggregatedCommandExecutor) && (providersToImplement.contains(element.getProvider()))) {
        ((AggregatedCommandExecutor)element).cleanupAggregatedExecution(network,dest);
      }
    }
  }
}
