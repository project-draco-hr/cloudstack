{
  NetworkVO network=_networksDao.findById(networkId);
  if (network.getState() == Network.State.Allocated) {
    s_logger.debug("Network is already shutdown: " + network);
    return true;
  }
  if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Shutdown) {
    s_logger.debug("Network is not implemented: " + network);
    return false;
  }
  try {
    network=_networksDao.acquireInLockTable(networkId,NetworkLockTimeout.value());
    if (network == null) {
      s_logger.warn("Unable to acquire lock for the network " + network + " as a part of network shutdown");
      return false;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Lock is acquired for network " + network + " as a part of network shutdown");
    }
    if (network.getState() == Network.State.Allocated) {
      s_logger.debug("Network is already shutdown: " + network);
      return true;
    }
    if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Shutdown) {
      s_logger.debug("Network is not implemented: " + network);
      return false;
    }
    if (isSharedNetworkWithServices(network)) {
      network.setState(Network.State.Shutdown);
      _networksDao.update(network.getId(),network);
    }
 else {
      try {
        stateTransitTo(network,Event.DestroyNetwork);
      }
 catch (      final NoTransitionException e) {
        network.setState(Network.State.Shutdown);
        _networksDao.update(network.getId(),network);
      }
    }
    final boolean success=shutdownNetworkElementsAndResources(context,cleanupElements,network);
    final NetworkVO networkFinal=network;
    final boolean result=Transaction.execute(new TransactionCallback<Boolean>(){
      @Override public Boolean doInTransaction(      final TransactionStatus status){
        boolean result=false;
        if (success) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Network id=" + networkId + " is shutdown successfully, cleaning up corresponding resources now.");
          }
          final NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,networkFinal.getGuruName());
          final NetworkProfile profile=convertNetworkToNetworkProfile(networkFinal.getId());
          guru.shutdown(profile,_networkOfferingDao.findById(networkFinal.getNetworkOfferingId()));
          applyProfileToNetwork(networkFinal,profile);
          final DataCenterVO zone=_dcDao.findById(networkFinal.getDataCenterId());
          if (isSharedNetworkOfferingWithServices(networkFinal.getNetworkOfferingId()) && zone.getNetworkType() == NetworkType.Advanced) {
            networkFinal.setState(Network.State.Setup);
          }
 else {
            try {
              stateTransitTo(networkFinal,Event.OperationSucceeded);
            }
 catch (            final NoTransitionException e) {
              networkFinal.setState(Network.State.Allocated);
              networkFinal.setRestartRequired(false);
            }
          }
          _networksDao.update(networkFinal.getId(),networkFinal);
          _networksDao.clearCheckForGc(networkId);
          result=true;
        }
 else {
          try {
            stateTransitTo(networkFinal,Event.OperationFailed);
          }
 catch (          final NoTransitionException e) {
            networkFinal.setState(Network.State.Implemented);
            _networksDao.update(networkFinal.getId(),networkFinal);
          }
          result=false;
        }
        return result;
      }
    }
);
    return result;
  }
  finally {
    if (network != null) {
      _networksDao.releaseFromLockTable(network.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Lock is released for network " + network + " as a part of network shutdown");
      }
    }
  }
}
