{
  final Integer networkRate=_networkModel.getNetworkRate(network.getId(),vmProfile.getId());
  final NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
  final NicVO nic=_nicDao.findById(nicId);
  NicProfile profile=null;
  if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {
    nic.setState(Nic.State.Reserving);
    nic.setReservationId(context.getReservationId());
    _nicDao.update(nic.getId(),nic);
    URI broadcastUri=nic.getBroadcastUri();
    if (broadcastUri == null) {
      broadcastUri=network.getBroadcastUri();
    }
    final URI isolationUri=nic.getIsolationUri();
    profile=new NicProfile(nic,network,broadcastUri,isolationUri,networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.reserve(profile,network,vmProfile,dest,context);
    nic.setIPv4Address(profile.getIPv4Address());
    nic.setAddressFormat(profile.getFormat());
    nic.setIPv6Address(profile.getIPv6Address());
    nic.setMacAddress(profile.getMacAddress());
    nic.setIsolationUri(profile.getIsolationUri());
    nic.setBroadcastUri(profile.getBroadCastUri());
    nic.setReserver(guru.getName());
    nic.setState(Nic.State.Reserved);
    nic.setIPv4Netmask(profile.getIPv4Netmask());
    nic.setIPv4Gateway(profile.getIPv4Gateway());
    if (profile.getReservationStrategy() != null) {
      nic.setReservationStrategy(profile.getReservationStrategy());
    }
    updateNic(nic,network.getId(),1);
  }
 else {
    profile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.updateNicProfile(profile,network);
    nic.setState(Nic.State.Reserved);
    updateNic(nic,network.getId(),1);
  }
  final List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  final NetworkElement element : networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
        throw new CloudRuntimeException("Service provider " + element.getProvider().getName() + " either doesn't exist or is not enabled in physical network id: "+ network.getPhysicalNetworkId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Asking " + element.getName() + " to prepare for "+ nic);
      }
      if (!prepareElement(element,network,profile,vmProfile,dest,context)) {
        throw new InsufficientAddressCapacityException("unable to configure the dhcp service, due to insufficiant address capacity",Network.class,network.getId());
      }
    }
  }
  profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));
  guru.updateNicProfile(profile,network);
  return profile;
}
