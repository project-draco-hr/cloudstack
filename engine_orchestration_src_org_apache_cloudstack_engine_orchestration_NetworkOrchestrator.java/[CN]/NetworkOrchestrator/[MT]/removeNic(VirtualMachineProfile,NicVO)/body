{
  if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start && nic.getState() != Nic.State.Allocated) {
    try {
      releaseNic(vm,nic.getId());
    }
 catch (    Exception ex) {
      s_logger.warn("Failed to release nic: " + nic.toString() + " as part of remove operation due to",ex);
    }
  }
  nic.setState(Nic.State.Deallocating);
  _nicDao.update(nic.getId(),nic);
  NetworkVO network=_networksDao.findById(nic.getNetworkId());
  NicProfile profile=new NicProfile(nic,network,null,null,null,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vm.getHypervisorType(),network));
  if (nic.getReservationStrategy() == Nic.ReservationStrategy.Create) {
    List<Provider> providersToImplement=getNetworkProviders(network.getId());
    for (    NetworkElement element : networkElements) {
      if (providersToImplement.contains(element.getProvider())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Asking " + element.getName() + " to release "+ nic);
        }
        try {
          element.release(network,profile,vm,null);
        }
 catch (        ConcurrentOperationException ex) {
          s_logger.warn("release failed during the nic " + nic.toString() + " removeNic due to ",ex);
        }
catch (        ResourceUnavailableException ex) {
          s_logger.warn("release failed during the nic " + nic.toString() + " removeNic due to ",ex);
        }
      }
    }
  }
  if (vm.getType() == Type.User && _networkModel.areServicesSupportedInNetwork(network.getId(),Service.Dhcp) && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestType.Shared && isLastNicInSubnet(nic)) {
    DhcpServiceProvider dhcpServiceProvider=getDhcpServiceProvider(network);
    if (dhcpServiceProvider != null && isDhcpAccrossMultipleSubnetsSupported(dhcpServiceProvider)) {
      removeDhcpServiceInSubnet(nic);
    }
  }
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
  guru.deallocate(network,profile,vm);
  _nicDao.remove(nic.getId());
  s_logger.debug("Removed nic id=" + nic.getId());
  if (!removeVmSecondaryIpsOfNic(nic.getId())) {
    s_logger.debug("Removing nic " + nic.getId() + " secondary ip addreses failed");
  }
}
