{
  List<Provider> providersToShutdown=getNetworkProviders(network.getId());
  boolean cleanupResult=true;
  boolean cleanupNeeded=false;
  try {
    for (    Provider provider : providersToShutdown) {
      if (provider.cleanupNeededOnShutdown()) {
        cleanupNeeded=true;
        break;
      }
    }
    if (cleanupNeeded) {
      cleanupResult=shutdownNetworkResources(network.getId(),context.getAccount(),context.getCaller().getId());
    }
  }
 catch (  Exception ex) {
    s_logger.warn("shutdownNetworkRules failed during the network " + network + " shutdown due to ",ex);
  }
 finally {
    if (!cleanupResult) {
      s_logger.warn("Failed to cleanup network id=" + network.getId() + " resources as a part of shutdownNetwork");
    }
  }
  boolean success=true;
  for (  NetworkElement element : networkElements) {
    if (providersToShutdown.contains(element.getProvider())) {
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Sending network shutdown to " + element.getName());
        }
        if (!element.shutdown(network,context,cleanupElements)) {
          s_logger.warn("Unable to complete shutdown of the network elements due to element: " + element.getName());
          success=false;
        }
      }
 catch (      ResourceUnavailableException e) {
        s_logger.warn("Unable to complete shutdown of the network elements due to element: " + element.getName(),e);
        success=false;
      }
catch (      ConcurrentOperationException e) {
        s_logger.warn("Unable to complete shutdown of the network elements due to element: " + element.getName(),e);
        success=false;
      }
catch (      Exception e) {
        s_logger.warn("Unable to complete shutdown of the network elements due to element: " + element.getName(),e);
        success=false;
      }
    }
  }
  return success;
}
