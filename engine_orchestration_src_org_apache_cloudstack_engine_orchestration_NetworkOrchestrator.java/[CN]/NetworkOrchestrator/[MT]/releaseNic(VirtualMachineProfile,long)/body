{
  final Pair<Network,NicProfile> networkToRelease=Transaction.execute(new TransactionCallback<Pair<Network,NicProfile>>(){
    @Override public Pair<Network,NicProfile> doInTransaction(    final TransactionStatus status){
      final NicVO nic=_nicDao.lockRow(nicId,true);
      if (nic == null) {
        throw new ConcurrentOperationException("Unable to acquire lock on nic " + nic);
      }
      final Nic.State originalState=nic.getState();
      final NetworkVO network=_networksDao.findById(nic.getNetworkId());
      if (originalState == Nic.State.Reserved || originalState == Nic.State.Reserving) {
        if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {
          final NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
          nic.setState(Nic.State.Releasing);
          _nicDao.update(nic.getId(),nic);
          final NicProfile profile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),null,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
          if (guru.release(profile,vmProfile,nic.getReservationId())) {
            applyProfileToNicForRelease(nic,profile);
            nic.setState(Nic.State.Allocated);
            if (originalState == Nic.State.Reserved) {
              updateNic(nic,network.getId(),-1);
            }
 else {
              _nicDao.update(nic.getId(),nic);
            }
          }
          return new Pair<Network,NicProfile>(network,profile);
        }
 else {
          nic.setState(Nic.State.Allocated);
          updateNic(nic,network.getId(),-1);
        }
      }
      return null;
    }
  }
);
  if (vmProfile.getType().equals(VirtualMachine.Type.User)) {
    final NicVO nic=_nicDao.findById(nicId);
    if (nic != null) {
      final NetworkVO vmNetwork=_networksDao.findById(nic.getNetworkId());
      final VMNetworkMapVO vno=_vmNetworkMapDao.findByVmAndNetworkId(vmProfile.getVirtualMachine().getId(),vmNetwork.getId());
      if (vno != null) {
        _vmNetworkMapDao.remove(vno.getId());
      }
    }
  }
  if (networkToRelease != null) {
    final Network network=networkToRelease.first();
    final NicProfile profile=networkToRelease.second();
    final List<Provider> providersToImplement=getNetworkProviders(network.getId());
    for (    final NetworkElement element : networkElements) {
      if (providersToImplement.contains(element.getProvider())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Asking " + element.getName() + " to release "+ profile);
        }
        element.release(network,profile,vmProfile,null);
      }
    }
  }
}
