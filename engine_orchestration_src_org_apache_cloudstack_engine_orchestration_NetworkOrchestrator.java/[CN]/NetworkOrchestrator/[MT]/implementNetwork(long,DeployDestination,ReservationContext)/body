{
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.findById(networkId);
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
  if (isNetworkImplemented(network)) {
    logger.debug("Network id=" + networkId + " is already implemented");
    implemented.set(guru,network);
    return implemented;
  }
  network=_networksDao.acquireInLockTable(networkId,NetworkLockTimeout.value());
  if (network == null) {
    ConcurrentOperationException ex=new ConcurrentOperationException("Unable to acquire network configuration");
    ex.addProxyObject(_entityMgr.findById(Network.class,networkId).getUuid());
    throw ex;
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Lock is acquired for network id " + networkId + " as a part of network implement");
  }
  try {
    if (isNetworkImplemented(network)) {
      logger.debug("Network id=" + networkId + " is already implemented");
      implemented.set(guru,network);
      return implemented;
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Asking " + guru.getName() + " to implement "+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setReservationId(context.getReservationId());
    if (isSharedNetworkWithServices(network)) {
      network.setState(Network.State.Implementing);
    }
 else {
      stateTransitTo(network,Event.ImplementNetwork);
    }
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setMode(result.getMode());
    network.setPhysicalNetworkId(result.getPhysicalNetworkId());
    _networksDao.update(networkId,network);
    implementNetworkElementsAndResources(dest,context,network,offering);
    if (isSharedNetworkWithServices(network)) {
      network.setState(Network.State.Implemented);
    }
 else {
      stateTransitTo(network,Event.OperationSucceeded);
    }
    network.setRestartRequired(false);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
 catch (  NoTransitionException e) {
    logger.error(e.getMessage());
    return null;
  }
 finally {
    if (implemented.first() == null) {
      logger.debug("Cleaning up because we're unable to implement the network " + network);
      try {
        if (isSharedNetworkWithServices(network)) {
          network.setState(Network.State.Shutdown);
          _networksDao.update(networkId,network);
        }
 else {
          stateTransitTo(network,Event.OperationFailed);
        }
      }
 catch (      NoTransitionException e) {
        logger.error(e.getMessage());
      }
      try {
        shutdownNetwork(networkId,context,false);
      }
 catch (      Exception e) {
        logger.error("Exception caught while shutting down a network as part of a failed implementation",e);
      }
    }
    _networksDao.releaseFromLockTable(networkId);
    if (logger.isDebugEnabled()) {
      logger.debug("Lock is released for network id " + networkId + " as a part of network implement");
    }
  }
}
