{
  final Account callerAccount=context.getAccount();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug("Unable to find network with id: " + networkId);
    return false;
  }
  final List<UserVmVO> userVms=_userVmDao.listByNetworkIdAndStates(networkId);
  for (  final UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null)) {
      s_logger.warn("Can't delete the network, not all user vms are expunged. Vm " + vm + " is in "+ vm.getState()+ " state");
      return false;
    }
  }
  final int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    s_logger.debug("The network id=" + networkId + " has active Nics, but shouldn't.");
    _networksDao.changeActiveNicsBy(networkId,-1 * nicCount);
  }
  final DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (zone.getNetworkType() == NetworkType.Basic) {
    final List<VMInstanceVO> systemVms=_vmDao.listNonRemovedVmsByTypeAndNetwork(network.getId(),Type.ConsoleProxy,Type.SecondaryStorageVm);
    if (systemVms != null && !systemVms.isEmpty()) {
      s_logger.warn("Can't delete the network, not all consoleProxy/secondaryStorage vms are expunged");
      return false;
    }
  }
  shutdownNetwork(networkId,context,false);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup && !forced) {
    s_logger.debug("Network is not not in the correct state to be destroyed: " + network.getState());
    return false;
  }
  boolean success=true;
  if (!cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId())) {
    s_logger.warn("Unable to delete network id=" + networkId + ": failed to cleanup network resources");
    return false;
  }
  final List<Provider> providersToDestroy=getNetworkProviders(network.getId());
  for (  final NetworkElement element : networkElements) {
    if (providersToDestroy.contains(element.getProvider())) {
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Sending destroy to " + element);
        }
        if (!element.destroy(network,context)) {
          success=false;
          s_logger.warn("Unable to complete destroy of the network: failed to destroy network element " + element.getName());
        }
      }
 catch (      final ResourceUnavailableException e) {
        s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
        success=false;
      }
catch (      final ConcurrentOperationException e) {
        s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
        success=false;
      }
catch (      final Exception e) {
        s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
        success=false;
      }
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Network id=" + networkId + " is destroyed successfully, cleaning up corresponding resources now.");
    }
    final NetworkVO networkFinal=network;
    try {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        final TransactionStatus status){
          final NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,networkFinal.getGuruName());
          guru.trash(networkFinal,_networkOfferingDao.findById(networkFinal.getNetworkOfferingId()));
          if (!deleteVlansInNetwork(networkFinal.getId(),context.getCaller().getId(),callerAccount)) {
            s_logger.warn("Failed to delete network " + networkFinal + "; was unable to cleanup corresponding ip ranges");
            throw new CloudRuntimeException("Failed to delete network " + networkFinal + "; was unable to cleanup corresponding ip ranges");
          }
 else {
            try {
              stateTransitTo(networkFinal,Event.DestroyNetwork);
            }
 catch (            final NoTransitionException e) {
              s_logger.debug(e.getMessage());
            }
            if (_networksDao.remove(networkFinal.getId())) {
              final NetworkDomainVO networkDomain=_networkDomainDao.getDomainNetworkMapByNetworkId(networkFinal.getId());
              if (networkDomain != null) {
                _networkDomainDao.remove(networkDomain.getId());
              }
              final NetworkAccountVO networkAccount=_networkAccountDao.getAccountNetworkMapByNetworkId(networkFinal.getId());
              if (networkAccount != null) {
                _networkAccountDao.remove(networkAccount.getId());
              }
            }
            final NetworkOffering ntwkOff=_entityMgr.findById(NetworkOffering.class,networkFinal.getNetworkOfferingId());
            final boolean updateResourceCount=resourceCountNeedsUpdate(ntwkOff,networkFinal.getAclType());
            if (updateResourceCount) {
              _resourceLimitMgr.decrementResourceCount(networkFinal.getAccountId(),ResourceType.network,networkFinal.getDisplayNetwork());
            }
          }
        }
      }
);
      if (_networksDao.findById(network.getId()) == null) {
        final Pair<Class<?>,Long> networkMsg=new Pair<Class<?>,Long>(Network.class,networkFinal.getId());
        _messageBus.publish(_name,EntityManager.MESSAGE_REMOVE_ENTITY_EVENT,PublishScope.LOCAL,networkMsg);
      }
      return true;
    }
 catch (    final CloudRuntimeException e) {
      s_logger.error("Failed to delete network",e);
      return false;
    }
  }
  return success;
}
