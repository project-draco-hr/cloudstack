{
  List<NicVO> result=null;
  if (nicId == null && networkId == null) {
    result=_nicDao.listByVmId(vmId);
  }
 else {
    result=_nicDao.listByVmIdAndNicIdAndNtwkId(vmId,nicId,networkId);
  }
  for (  NicVO nic : result) {
    if (_networkModel.isProviderForNetwork(Provider.NiciraNvp,nic.getNetworkId())) {
      s_logger.info("Listing NSX logical switch and logical switch por for each nic");
      NetworkVO network=_networksDao.findById(nic.getNetworkId());
      NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
      NetworkGuruAdditionalFunctions guruFunctions=(NetworkGuruAdditionalFunctions)guru;
      Map<String,? extends Object> nsxParams=guruFunctions.listAdditionalNicParams(nic.getUuid());
      if (nsxParams != null) {
        String lswitchUuuid=(nsxParams.containsKey(NetworkGuruAdditionalFunctions.NSX_LSWITCH_UUID)) ? (String)nsxParams.get(NetworkGuruAdditionalFunctions.NSX_LSWITCH_UUID) : null;
        String lswitchPortUuuid=(nsxParams.containsKey(NetworkGuruAdditionalFunctions.NSX_LSWITCHPORT_UUID)) ? (String)nsxParams.get(NetworkGuruAdditionalFunctions.NSX_LSWITCHPORT_UUID) : null;
        nic.setNsxLogicalSwitchUuid(lswitchUuuid);
        nic.setNsxLogicalSwitchPortUuid(lswitchPortUuuid);
      }
    }
  }
  return result;
}
