{
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws InsufficientCapacityException {
      int deviceId=0;
      int size=0;
      for (      Network ntwk : networks.keySet()) {
        List<? extends NicProfile> profiles=networks.get(ntwk);
        if (profiles != null && !profiles.isEmpty()) {
          size=size + profiles.size();
        }
 else {
          size=size + 1;
        }
      }
      boolean[] deviceIds=new boolean[size];
      Arrays.fill(deviceIds,false);
      List<NicProfile> nics=new ArrayList<NicProfile>(size);
      NicProfile defaultNic=null;
      for (      Map.Entry<? extends Network,List<? extends NicProfile>> network : networks.entrySet()) {
        Network config=network.getKey();
        List<? extends NicProfile> requestedProfiles=network.getValue();
        if (requestedProfiles == null) {
          requestedProfiles=new ArrayList<NicProfile>();
        }
        if (requestedProfiles.isEmpty()) {
          requestedProfiles.add(null);
        }
        for (        NicProfile requested : requestedProfiles) {
          Boolean isDefaultNic=false;
          if (vm != null && (requested != null && requested.isDefaultNic())) {
            isDefaultNic=true;
          }
          while (deviceIds[deviceId] && deviceId < deviceIds.length) {
            deviceId++;
          }
          Pair<NicProfile,Integer> vmNicPair=allocateNic(requested,config,isDefaultNic,deviceId,vm);
          NicProfile vmNic=null;
          if (vmNicPair != null) {
            vmNic=vmNicPair.first();
            if (vmNic == null) {
              continue;
            }
            deviceId=vmNicPair.second();
          }
          int devId=vmNic.getDeviceId();
          if (devId > deviceIds.length) {
            throw new IllegalArgumentException("Device id for nic is too large: " + vmNic);
          }
          if (deviceIds[devId]) {
            throw new IllegalArgumentException("Conflicting device id for two different nics: " + vmNic);
          }
          deviceIds[devId]=true;
          if (vmNic.isDefaultNic()) {
            if (defaultNic != null) {
              throw new IllegalArgumentException("You cannot specify two nics as default nics: nic 1 = " + defaultNic + "; nic 2 = "+ vmNic);
            }
            defaultNic=vmNic;
          }
          nics.add(vmNic);
          vm.addNic(vmNic);
        }
      }
      if (nics.size() != size) {
        s_logger.warn("Number of nics " + nics.size() + " doesn't match number of requested nics "+ size);
        throw new CloudRuntimeException("Number of nics " + nics.size() + " doesn't match number of requested networks "+ size);
      }
      if (nics.size() == 1) {
        nics.get(0).setDefaultNic(true);
      }
    }
  }
);
}
