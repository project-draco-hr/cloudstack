{
  final VirtualMachine vm=vmProfile.getVirtualMachine();
  final DataCenter dc=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  final Host host=_hostDao.findById(vm.getHostId());
  final DeployDestination dest=new DeployDestination(dc,null,null,host);
  NicProfile nic=getNicProfileForVm(network,requested,vm);
  if (nic == null || vmProfile.getType() == VirtualMachine.Type.User) {
    final int deviceId=_nicDao.getFreeDeviceId(vm.getId());
    nic=allocateNic(requested,network,false,deviceId,vmProfile).first();
    if (nic == null) {
      throw new CloudRuntimeException("Failed to allocate nic for vm " + vm + " in network "+ network);
    }
    if (vmProfile.getType() == VirtualMachine.Type.User) {
      final VMNetworkMapVO vno=new VMNetworkMapVO(vm.getId(),network.getId());
      _vmNetworkMapDao.persist(vno);
    }
    s_logger.debug("Nic is allocated successfully for vm " + vm + " in network "+ network);
  }
  if (prepare) {
    final Pair<NetworkGuru,NetworkVO> implemented=implementNetwork(nic.getNetworkId(),dest,context,vmProfile.getVirtualMachine().getType() == Type.DomainRouter);
    if (implemented == null || implemented.first() == null) {
      s_logger.warn("Failed to implement network id=" + nic.getNetworkId() + " as a part of preparing nic id="+ nic.getId());
      throw new CloudRuntimeException("Failed to implement network id=" + nic.getNetworkId() + " as a part preparing nic id="+ nic.getId());
    }
    nic=prepareNic(vmProfile,dest,context,nic.getId(),implemented.second());
    s_logger.debug("Nic is prepared successfully for vm " + vm + " in network "+ network);
  }
  return nic;
}
