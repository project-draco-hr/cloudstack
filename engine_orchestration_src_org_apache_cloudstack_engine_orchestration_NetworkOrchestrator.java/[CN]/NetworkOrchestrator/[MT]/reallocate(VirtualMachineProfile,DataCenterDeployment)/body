{
  final VMInstanceVO vmInstance=_vmDao.findById(vm.getId());
  final DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == NetworkType.Basic) {
    final List<NicVO> nics=_nicDao.listByVmId(vmInstance.getId());
    final NetworkVO network=_networksDao.findById(nics.get(0).getNetworkId());
    final LinkedHashMap<Network,List<? extends NicProfile>> profiles=new LinkedHashMap<Network,List<? extends NicProfile>>();
    profiles.put(network,new ArrayList<NicProfile>());
    Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>(){
      @Override public void doInTransactionWithoutResult(      final TransactionStatus status) throws InsufficientCapacityException {
        cleanupNics(vm);
        allocate(vm,profiles);
      }
    }
);
  }
  return true;
}
