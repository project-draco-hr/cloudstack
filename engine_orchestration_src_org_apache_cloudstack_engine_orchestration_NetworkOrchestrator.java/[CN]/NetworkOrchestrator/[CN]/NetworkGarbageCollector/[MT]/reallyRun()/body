{
  try {
    final List<Long> shutdownList=new ArrayList<Long>();
    final long currentTime=System.currentTimeMillis() / 1000;
    final HashMap<Long,Long> stillFree=new HashMap<Long,Long>();
    final List<Long> networkIds=_networksDao.findNetworksToGarbageCollect();
    final int netGcWait=NumbersUtil.parseInt(_configDao.getValue(NetworkGcWait.key()),1);
    for (    final Long networkId : networkIds) {
      if (!_networkModel.isNetworkReadyForGc(networkId)) {
        continue;
      }
      final Long time=_lastNetworkIdsToFree.remove(networkId);
      if (time == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("We found network " + networkId + " to be free for the first time.  Adding it to the list: "+ currentTime);
        }
        stillFree.put(networkId,currentTime);
      }
 else       if (time > currentTime - netGcWait) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Network " + networkId + " is still free but it's not time to shutdown yet: "+ time);
        }
        stillFree.put(networkId,time);
      }
 else {
        shutdownList.add(networkId);
      }
    }
    _lastNetworkIdsToFree=stillFree;
    final CallContext cctx=CallContext.current();
    for (    final Long networkId : shutdownList) {
      if (_networksDao.findById(networkId) == null) {
        s_logger.debug("Network id=" + networkId + " is removed, so clearing up corresponding gc check");
        _networksDao.clearCheckForGc(networkId);
      }
 else {
        try {
          final User caller=cctx.getCallingUser();
          final Account owner=cctx.getCallingAccount();
          final ReservationContext context=new ReservationContextImpl(null,null,caller,owner);
          shutdownNetwork(networkId,context,false);
        }
 catch (        final Exception e) {
          s_logger.warn("Unable to shutdown network: " + networkId);
        }
      }
    }
  }
 catch (  final Exception e) {
    s_logger.warn("Caught exception while running network gc: ",e);
  }
}
