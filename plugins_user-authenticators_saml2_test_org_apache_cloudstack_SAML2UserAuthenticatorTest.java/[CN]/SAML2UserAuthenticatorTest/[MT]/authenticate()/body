{
  SAML2UserAuthenticator authenticator=new SAML2UserAuthenticator();
  Field daoField=SAML2UserAuthenticator.class.getDeclaredField("_userAccountDao");
  daoField.setAccessible(true);
  daoField.set(authenticator,userAccountDao);
  Field userDaoField=SAML2UserAuthenticator.class.getDeclaredField("_userDao");
  userDaoField.setAccessible(true);
  userDaoField.set(authenticator,userDao);
  UserAccountVO account=new UserAccountVO();
  account.setPassword("5f4dcc3b5aa765d61d8327deb882cf99");
  account.setId(1L);
  UserVO user=new UserVO();
  user.setUuid(SAMLUtils.createSAMLId("someUID"));
  Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(),Mockito.anyLong())).thenReturn(account);
  Mockito.when(userDao.getUser(Mockito.anyLong())).thenReturn(user);
  Pair<Boolean,ActionOnFailedAuthentication> pair1=authenticator.authenticate(SAMLUtils.createSAMLId("user1234"),"random",1l,null);
  Assert.assertFalse(pair1.first());
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.put(SAMLUtils.SAML_RESPONSE,new Object[]{});
  Pair<Boolean,ActionOnFailedAuthentication> pair2=authenticator.authenticate(SAMLUtils.createSAMLId("user1234"),"random",1l,params);
  Assert.assertTrue(pair2.first());
}
