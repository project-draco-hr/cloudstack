@attr(tags=['advanced'], required_hardware='true')
def test1_attach_volume_ide(self):
    '\n        @desc: Exception when attaching data disk to RHEL VM on vSphere\n        Step1: Confirm that vmware.root.disk.controller = "ide" in Global Settings.\n        Step2: Register RHEl 6.0 template and deploy a VM.\n        Step3: Note that the root disk is attached to IDE.\n        Step4: Create new DATA disk and attempt to attach it to the VM.\n        Verify that step4 succeeds without any exception\n        '
    self.hypervisor = str(get_hypervisor_type(self.api_client)).lower()
    if (self.hypervisor != 'vmware'):
        self.skipTest('This test can be run only on vmware')
    cmd = listConfigurations.listConfigurationsCmd()
    cmd.name = 'vmware.root.disk.controller'
    cmd.listAll = True
    try:
        config_descs = self.api_client.listConfigurations(cmd)
    except Exception as e:
        raise Exception(('Failed to fetch configurations: %s' % e))
    if (not isinstance(config_descs, list)):
        raise Exception("List configs didn't returned a valid data")
    config_desc = config_descs[0]
    if (str(config_desc.value).lower() != 'ide'):
        self.skipTest('This test is invalid if {} is not set to ide'.format(config_desc.name))
    '\n        Register RHEL 6.0 template and deploy vm\n        '
    template = Template.register(self.userapiclient, self.services['rhel60template'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, hypervisor=self.hypervisor)
    self.assertIsNotNone(template, 'Failed to register Rhel6 template')
    self.debug('Registered a template with format {} and id {}'.format(self.services['rhel60template']['format'], template.id))
    template.download(self.userapiclient)
    self.cleanup.append(template)
    vm = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, templateid=template.id, zoneid=self.zone.id)
    self.assertIsNotNone(vm, 'Failed to deploy virtual machine')
    self.cleanup.append(vm)
    response = VirtualMachine.list(self.userapiclient, id=vm.id)
    status = validateList(response)
    self.assertEqual(status[0], PASS, 'list vm response returned invalid list')
    '\n        list root disk of the vm created above and make sure that device type is ide\n        '
    volume_res = Volume.list(self.userapiclient, virtualmachineid=vm.id, type='root', listAll='true')
    self.assertEqual(validateList(volume_res)[0], PASS, 'list vm response returned invalid list')
    chaininfo = volume_res[0].chaininfo
    device_Bus = literal_eval(chaininfo)['diskDeviceBusName']
    if ('ide' not in device_Bus):
        self.fail('Root disk is not created with device type IDE')
    disk = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(disk, 'Failed to create custom volume')
    self.cleanup.append(disk)
    try:
        vm.attach_volume(self.userapiclient, disk)
        list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=disk.id)
        attached_volume = list_volumes[0]
        self.assertEqual(disk.id, attached_volume.id, 'list volume response does not match with the volume created and attached to vm')
    except Exception as e:
        self.fail('Failed to attach data disk to RHEL vm whose root disk type is IDE')
    return
