{
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long type=(Long)params.get(BaseCmd.Properties.ACCOUNT_TYPE.getName());
  String state=(String)params.get(BaseCmd.Properties.STATE.getName());
  Boolean needCleanup=(Boolean)params.get(BaseCmd.Properties.IS_CLEANUP_REQUIRED.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  boolean isAdmin=false;
  Long accountId=null;
  String accountName=null;
  if ((account == null) || isAdmin(account.getType())) {
    accountName=(String)params.get(BaseCmd.Properties.NAME.getName());
    isAdmin=true;
    if (domainId == null) {
      domainId=((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
    }
 else     if (account != null) {
      if (!getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid domain id (" + domainId + ") given, unable to list accounts");
      }
    }
  }
 else {
    accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
    accountId=account.getId();
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  if (isAdmin == true) {
    c.addCriteria(Criteria.ID,id);
    if (keyword == null) {
      c.addCriteria(Criteria.ACCOUNTNAME,accountName);
      c.addCriteria(Criteria.DOMAINID,domainId);
      c.addCriteria(Criteria.TYPE,type);
      c.addCriteria(Criteria.STATE,state);
      c.addCriteria(Criteria.ISCLEANUPREQUIRED,needCleanup);
    }
 else {
      c.addCriteria(Criteria.KEYWORD,keyword);
    }
  }
 else {
    c.addCriteria(Criteria.ID,accountId);
  }
  List<AccountVO> accounts=getManagementServer().searchForAccounts(c);
  List<Pair<String,Object>> accountTags=new ArrayList<Pair<String,Object>>();
  Object[] aTag=new Object[accounts.size()];
  int i=0;
  for (  AccountVO accountO : accounts) {
    boolean accountIsAdmin=(accountO.getType() == Account.ACCOUNT_TYPE_ADMIN);
    if ((accountO.getRemoved() == null) && (accountO.getId() != 1)) {
      List<Pair<String,Object>> accountData=new ArrayList<Pair<String,Object>>();
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.valueOf(accountO.getId()).toString()));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),accountO.getAccountName()));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT_TYPE.getName(),Short.valueOf(accountO.getType()).toString()));
      Domain domain=getManagementServer().findDomainIdById(accountO.getDomainId());
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),Long.toString(domain.getId())));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),domain.getName()));
      List<UserStatisticsVO> stats=getManagementServer().listUserStatsBy(accountO.getId());
      if (stats == null) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error searching for user stats");
      }
      long bytesSent=0;
      long bytesReceived=0;
      for (      UserStatisticsVO stat : stats) {
        long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
        long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
        bytesReceived=bytesReceived + Long.valueOf(rx);
        bytesSent=bytesSent + Long.valueOf(tx);
      }
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.BYTES_RECEIVED.getName(),Long.valueOf(bytesReceived).toString()));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.BYTES_SENT.getName(),Long.valueOf(bytesSent).toString()));
      long vmLimit=getManagementServer().findCorrectResourceLimit(ResourceType.user_vm,accountO.getId());
      String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit);
      long vmTotal=getManagementServer().getResourceCount(ResourceType.user_vm,accountO.getId());
      String vmAvail=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit - vmTotal);
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VM_LIMIT.getName(),vmLimitDisplay));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VM_TOTAL.getName(),vmTotal));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VM_AVAIL.getName(),vmAvail));
      long ipLimit=getManagementServer().findCorrectResourceLimit(ResourceType.public_ip,accountO.getId());
      String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? "Unlimited" : String.valueOf(ipLimit);
      long ipTotal=getManagementServer().getResourceCount(ResourceType.public_ip,accountO.getId());
      String ipAvail=(accountIsAdmin || ipLimit == -1) ? "Unlimited" : String.valueOf(ipLimit - ipTotal);
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.IP_LIMIT.getName(),ipLimitDisplay));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.IP_TOTAL.getName(),ipTotal));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.IP_AVAIL.getName(),ipAvail));
      long volumeLimit=getManagementServer().findCorrectResourceLimit(ResourceType.volume,accountO.getId());
      String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit);
      long volumeTotal=getManagementServer().getResourceCount(ResourceType.volume,accountO.getId());
      String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit - volumeTotal);
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_LIMIT.getName(),volumeLimitDisplay));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_TOTAL.getName(),volumeTotal));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_AVAIL.getName(),volumeAvail));
      long snapshotLimit=getManagementServer().findCorrectResourceLimit(ResourceType.snapshot,accountO.getId());
      String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit);
      long snapshotTotal=getManagementServer().getResourceCount(ResourceType.snapshot,accountO.getId());
      String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit - snapshotTotal);
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.SNAPSHOT_LIMIT.getName(),snapshotLimitDisplay));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.SNAPSHOT_TOTAL.getName(),snapshotTotal));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.SNAPSHOT_AVAIL.getName(),snapshotAvail));
      long templateLimit=getManagementServer().findCorrectResourceLimit(ResourceType.template,accountO.getId());
      String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit);
      long templateTotal=getManagementServer().getResourceCount(ResourceType.template,accountO.getId());
      String templateAvail=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit - templateTotal);
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_LIMIT.getName(),templateLimitDisplay));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_TOTAL.getName(),templateTotal));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_AVAIL.getName(),templateAvail));
      int vmStopped=0;
      int vmRunning=0;
      Long[] accountIds=new Long[1];
      accountIds[0]=accountO.getId();
      Criteria c1=new Criteria();
      c1.addCriteria(Criteria.ACCOUNTID,accountIds);
      List<? extends UserVm> virtualMachines=getManagementServer().searchForUserVMs(c1);
      for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
        UserVm vm=iter.next();
        if (vm.getState() == State.Stopped) {
          vmStopped++;
        }
 else         if (vm.getState() == State.Running) {
          vmRunning++;
        }
      }
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VM_STOPPED.getName(),vmStopped));
      accountData.add(new Pair<String,Object>(BaseCmd.Properties.VM_RUNNING.getName(),vmRunning));
      if (isAdmin == true) {
        accountData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),accountO.getState()));
        accountData.add(new Pair<String,Object>(BaseCmd.Properties.IS_CLEANUP_REQUIRED.getName(),Boolean.valueOf(accountO.getNeedsCleanup()).toString()));
      }
      aTag[i++]=accountData;
    }
  }
  Pair<String,Object> accountTag=new Pair<String,Object>("account",aTag);
  accountTags.add(accountTag);
  return accountTags;
}
