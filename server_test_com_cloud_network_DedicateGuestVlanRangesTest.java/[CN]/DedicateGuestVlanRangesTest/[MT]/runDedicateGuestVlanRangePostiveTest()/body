{
  TransactionLegacy txn=TransactionLegacy.open("runDedicateGuestVlanRangePostiveTest");
  Field dedicateVlanField=_dedicateGuestVlanRangeClass.getDeclaredField("vlan");
  dedicateVlanField.setAccessible(true);
  dedicateVlanField.set(dedicateGuestVlanRangesCmd,"2-5");
  PhysicalNetworkVO physicalNetwork=new PhysicalNetworkVO(1L,1L,"2-5","200",1L,null,"testphysicalnetwork");
  physicalNetwork.addIsolationMethod("VLAN");
  AccountGuestVlanMapVO accountGuestVlanMapVO=new AccountGuestVlanMapVO(1L,1L);
  when(networkService._physicalNetworkDao.findById(anyLong())).thenReturn(physicalNetwork);
  when(networkService._datacneterVnet.listAllocatedVnetsInRange(anyLong(),anyLong(),anyInt(),anyInt())).thenReturn(null);
  when(networkService._accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(anyLong())).thenReturn(null);
  when(networkService._accountGuestVlanMapDao.persist(any(AccountGuestVlanMapVO.class))).thenReturn(accountGuestVlanMapVO);
  when(networkService._datacneterVnet.update(anyLong(),any(DataCenterVnetVO.class))).thenReturn(true);
  List<DataCenterVnetVO> dataCenterVnetList=new ArrayList<DataCenterVnetVO>();
  DataCenterVnetVO dataCenterVnetVO=new DataCenterVnetVO("2-5",1L,1L);
  dataCenterVnetList.add(dataCenterVnetVO);
  when(networkService._datacneterVnet.findVnet(anyLong(),anyString())).thenReturn(dataCenterVnetList);
  try {
    GuestVlan result=networkService.dedicateGuestVlanRange(dedicateGuestVlanRangesCmd);
    Assert.assertNotNull(result);
  }
 catch (  Exception e) {
    s_logger.info("exception in testing runDedicateGuestVlanRangePostiveTest message: " + e.toString());
  }
 finally {
    txn.close("runDedicateGuestRangePostiveTest");
  }
}
