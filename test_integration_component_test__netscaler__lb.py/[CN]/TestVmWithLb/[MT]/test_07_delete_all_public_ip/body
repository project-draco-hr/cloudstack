@attr(tags=['advancedns'])
def test_07_delete_all_public_ip(self):
    'Test delete all public Ip with LB rules'
    self.debug(('Deleting public IP: %s from network: %s' % (self.public_ip_1.ipaddress.ipaddress, self.network.name)))
    self.public_ip_1.delete(self.apiclient)
    self.debug(('Public Ip: %s is deleted!' % self.public_ip_1.ipaddress.ipaddress))
    lb_rules = LoadBalancerRule.list(self.apiclient, publicipid=self.public_ip_1.ipaddress.id, listall=True)
    self.assertEqual(lb_rules, None, 'LB rules associated with the public Ip should get deleted')
    self.debug('SSH into Netscaler to verify other resources are deleted')
    try:
        ssh_client = remoteSSHClient(self.services['netscaler']['ipaddress'], self.services['netscaler']['port'], self.services['netscaler']['username'], self.services['netscaler']['password'])
        cmd = ('show lb vserver Cloud-VirtualServer-%s-%s' % (self.public_ip_1.ipaddress.ipaddress, self.lb_rule_1.publicport))
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count('ERROR: No such resource'), 1, 'Virtual server should get deleted after removing LB rule')
        cmd = 'show ip'
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(self.public_ip_1.ipaddress.ipaddress), 0, 'Virtual server should get deleted after removing LB rule')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
