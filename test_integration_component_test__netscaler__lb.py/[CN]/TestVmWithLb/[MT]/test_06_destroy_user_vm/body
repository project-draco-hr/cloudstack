@attr(tags=['advancedns'])
def test_06_destroy_user_vm(self):
    'Test destroy user VM with LB'
    self.debug(('Destroying VM instance: %s' % self.vm_2.name))
    self.vm_2.delete(self.apiclient)
    self.debug(('Destroying VM: %s' % self.vm_2.name))
    try:
        self.debug('Verifying request served by only running instances')
        hostnames = []
        ssh = self.vm_1.get_ssh_client(ipaddress=self.public_ip_1.ipaddress.ipaddress)
        self.debug('Command: hostname')
        result = ssh.execute('hostname')
        self.debug(('Output: %s' % result))
        hostnames.append(result)
        ssh = self.vm_1.get_ssh_client(ipaddress=self.public_ip_1.ipaddress.ipaddress, reconnect=True)
        self.debug('Command: hostname')
        result = ssh.execute('hostname')
        self.debug(('Output: %s' % result))
        hostnames.append(result)
        self.debug(('Hostnames: %s' % str(hostnames)))
        self.assertEqual(hostnames[0], hostnames[1], 'Both request should be served by same instance')
    except Exception as e:
        self.fail(('Exception occured during SSH: %s - %s' % (self.public_ip_1.ipaddress.ipaddress, e)))
    delay = Configurations.list(self.apiclient, name='expunge.delay')
    wait = Configurations.list(self.apiclient, name='expunge.interval')
    time.sleep((int(delay[0].value) + int(wait[0].value)))
    self.debug('SSH into Netscaler to rules still persist')
    try:
        ssh_client = SshClient(self.services['netscaler']['ipaddress'], self.services['netscaler']['port'], self.services['netscaler']['username'], self.services['netscaler']['password'])
        cmd = 'show server'
        self.debug(('command: %s' % cmd))
        res = ssh_client.execute(cmd)
        result = str(res)
        self.debug(('Output: %s' % result))
        self.assertEqual(result.count(self.vm_2.ipaddress), 0, 'The server should not be present in netscaler after destroy')
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.services['netscaler']['ipaddress'], e)))
    return
