@attr(tags=['advancedns'])
def test_lb_on_non_source_nat(self):
    'Test Create LB rule for non-sourceNat IP address\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Deploying another VM in account: %s' % self.account.name))
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_2.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_2.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Associating public IP for network: %s' % self.network.id))
    ip_with_lb_rule = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id)
    self.debug(('Associated %s with network %s' % (ip_with_lb_rule.ipaddress.ipaddress, self.network.id)))
    self.debug(('Creating LB rule for IP address: %s' % ip_with_lb_rule.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ip_with_lb_rule.ipaddress.id, accountid=self.account.name, networkid=self.network.id)
    self.debug(('Trying to create PF rule on IP with LB rule: %s' % ip_with_lb_rule.ipaddress.ipaddress))
    lb_rules = LoadBalancerRule.list(self.apiclient, id=lb_rule.id, listall=True)
    self.assertEqual(isinstance(lb_rules, list), True, 'List LB rules should return a newly created LB rule')
    return
