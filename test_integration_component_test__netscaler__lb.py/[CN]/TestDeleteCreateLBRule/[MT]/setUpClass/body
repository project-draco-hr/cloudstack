@classmethod
def setUpClass(cls):
    cls._cleanup = []
    cls.api_client = super(TestDeleteCreateLBRule, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    try:
        cls.netscaler = add_netscaler(cls.api_client, cls.zone.id, cls.services['netscaler'])
        cls._cleanup.append(cls.netscaler)
        cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=True)
        cls.network_offering.update(cls.api_client, state='Enabled')
        cls.services['virtual_machine']['zoneid'] = cls.zone.id
        cls.services['virtual_machine']['template'] = cls.template.id
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
        cls._cleanup.insert(0, cls.account)
        cls.network = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.domainid, networkofferingid=cls.network_offering.id, zoneid=cls.zone.id)
        cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network.id)])
        cls.public_ip = PublicIPAddress.create(cls.api_client, accountid=cls.account.name, zoneid=cls.zone.id, domainid=cls.account.domainid, networkid=cls.network.id)
    except Exception as e:
        cls.tearDownClass()
        raise Exception(('Warning: Exception in setUpClass: %s' % e))
    return
