{
  if ((dnldStatus == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) || (dnldStatus == Status.ABANDONED)) {
    VolumeHostVO volumeHost=new VolumeHostVO(host.getId(),volume.getId());
synchronized (_listenerVolumeMap) {
      _listenerVolumeMap.remove(volumeHost);
    }
  }
  VolumeHostVO volumeHost=_volumeHostDao.findByHostVolume(host.getId(),volume.getId());
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (dnldStatus == Status.DOWNLOADED) {
    try {
      _storageMgr.stateTransitTo(volume,Event.UploadSucceeded);
    }
 catch (    NoTransitionException e) {
      e.printStackTrace();
    }
    long size=-1;
    if (volumeHost != null) {
      size=volumeHost.getPhysicalSize();
    }
 else {
      s_logger.warn("Failed to get size for volume" + volume.getName());
    }
    String eventType=EventTypes.EVENT_VOLUME_UPLOAD;
    if (volume.getAccountId() != Account.ACCOUNT_ID_SYSTEM) {
      UsageEventVO usageEvent=new UsageEventVO(eventType,volume.getAccountId(),host.getDataCenterId(),volume.getId(),volume.getName(),null,0l,size);
      _usageEventDao.persist(usageEvent);
    }
  }
 else   if (dnldStatus == Status.DOWNLOAD_ERROR) {
    try {
      _storageMgr.stateTransitTo(volume,Volume.Event.OperationFailed);
    }
 catch (    NoTransitionException e) {
      throw new CloudRuntimeException("Unable to update the failure on a volume: " + volume,e);
    }
    _resourceLimitMgr.decrementResourceCount(volume.getAccountId(),com.cloud.configuration.Resource.ResourceType.volume);
  }
  txn.commit();
}
