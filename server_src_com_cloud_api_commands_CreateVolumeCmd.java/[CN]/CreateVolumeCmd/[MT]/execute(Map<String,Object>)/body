{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long diskOfferingId=(Long)params.get(BaseCmd.Properties.DISK_OFFERING_ID.getName());
  Long snapshotId=(Long)params.get(BaseCmd.Properties.SNAPSHOT_ID.getName());
  if (account == null) {
    if ((accountName == null) || (domainId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Account and domainId must be passed in.");
    }
    account=getManagementServer().findActiveAccount(accountName,domainId);
    if (account == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account with name: " + accountName + " and domain ID: "+ domainId);
  }
 else {
    if (isAdmin(account.getType())) {
      if (domainId != null) {
        if (!getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create volume in domain " + domainId + ", permission denied.");
        }
        if (accountName != null) {
          account=getManagementServer().findActiveAccount(accountName,domainId);
          if (account == null)           throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account with name: " + accountName + " and domain ID: "+ domainId);
        }
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(Account.ACCOUNT_ID_SYSTEM);
  }
  boolean useSnapshot=false;
  if (snapshotId == null) {
    if ((zoneId == null) || (diskOfferingId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Missing parameter(s), both zoneid and diskofferingid must be specified.");
    }
  }
 else {
    useSnapshot=true;
    Snapshot snapshotCheck=getManagementServer().findSnapshotById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a snapshot with id " + snapshotId);
    }
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=getManagementServer().findAccountById(snapshotCheck.getAccountId());
        if (!getManagementServer().isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create volume from snapshot with id " + snapshotId + ", permission denied.");
        }
      }
 else       if (account.getId().longValue() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,"unable to find a snapshot with id " + snapshotId + " for this account");
      }
    }
  }
  try {
    long jobId=0;
    if (useSnapshot) {
      jobId=getManagementServer().createVolumeFromSnapshotAsync(userId,account.getId(),snapshotId,name);
    }
 else {
      jobId=getManagementServer().createVolumeAsync(userId,account.getId(),name,zoneId,diskOfferingId);
    }
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for CreateVolume command");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("CreateVolume command has been accepted, job id: " + jobId);
    }
    long volumeId=waitInstanceCreation(jobId);
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),Long.valueOf(volumeId)));
    return returnValues;
  }
 catch (  Exception ex) {
    s_logger.error("Failed to create volume " + (useSnapshot ? ("from snapshot " + snapshotId) : ("in zone " + zoneId + " with disk offering "+ diskOfferingId)),ex);
    if (useSnapshot) {
      throw new ServerApiException(BaseCmd.CREATE_VOLUME_FROM_SNAPSHOT_ERROR,"Unable to create a volume from snapshot with id " + snapshotId + " for this account.");
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to create volume: " + ex.getMessage());
    }
  }
}
