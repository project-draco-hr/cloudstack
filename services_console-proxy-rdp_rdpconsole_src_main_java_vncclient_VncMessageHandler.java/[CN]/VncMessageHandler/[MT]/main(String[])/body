{
  System.setProperty("streamer.Element.debug","true");
  Element source=new MockSource("source"){
{
      bufs=ByteBuffer.convertByteArraysToByteBuffers(new byte[]{RfbConstants.SERVER_BELL,RfbConstants.SERVER_CUT_TEXT,0,0,0,0,0,0,4},new byte[]{'t','e','s','t',RfbConstants.SERVER_FRAMEBUFFER_UPDATE,0,0,3},new byte[]{0,0,0,0,0,4,0,4,(byte)((RfbConstants.ENCODING_DESKTOP_SIZE >> 24) & 0xff),(byte)((RfbConstants.ENCODING_DESKTOP_SIZE >> 16) & 0xff),(byte)((RfbConstants.ENCODING_DESKTOP_SIZE >> 8) & 0xff),(byte)((RfbConstants.ENCODING_DESKTOP_SIZE >> 0) & 0xff)},new byte[]{0,0,0,0,0,4,0,4,(byte)((RfbConstants.ENCODING_RAW >> 24) & 0xff),(byte)((RfbConstants.ENCODING_RAW >> 16) & 0xff),(byte)((RfbConstants.ENCODING_RAW >> 8) & 0xff),(byte)((RfbConstants.ENCODING_RAW >> 0) & 0xff),1,2,3,4,5,6,7,8,9,10},new byte[]{11,12,13,14,15,16,0,0,0,0,0,2,0,2,(byte)((RfbConstants.ENCODING_COPY_RECT >> 24) & 0xff),(byte)((RfbConstants.ENCODING_COPY_RECT >> 16) & 0xff),(byte)((RfbConstants.ENCODING_COPY_RECT >> 8) & 0xff),(byte)((RfbConstants.ENCODING_COPY_RECT >> 0) & 0xff),0,2,0,2});
    }
  }
;
  ScreenDescription screen=new ScreenDescription(){
{
      this.bytesPerPixel=1;
    }
  }
;
  final Element handler=new VncMessageHandler("handler",screen);
  ByteBuffer[] emptyBuf=ByteBuffer.convertByteArraysToByteBuffers(new byte[]{});
  Element fburSink=new MockSink("fbur",ByteBuffer.convertByteArraysToByteBuffers(new byte[]{},new byte[]{}));
  Element bellSink=new MockSink("bell",emptyBuf);
  Element clipboardSink=new MockSink("clipboard",emptyBuf);
  Element desktopSizeChangeSink=new MockSink("desktop_size",emptyBuf);
  Element pixelsSink=new MockSink("pixels",ByteBuffer.convertByteArraysToByteBuffers(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}));
  Element copyRectSink=new MockSink("copy_rect",emptyBuf);
  Pipeline pipeline=new PipelineImpl("test");
  pipeline.addAndLink(source,handler);
  pipeline.add(fburSink,bellSink,clipboardSink,desktopSizeChangeSink,pixelsSink,copyRectSink);
  pipeline.link("handler >" + FRAME_BUFFER_UPDATE_REQUEST_ADAPTER_PAD,"fbur");
  pipeline.link("handler >" + SERVER_BELL_ADAPTER_PAD,"bell");
  pipeline.link("handler >" + SERVER_CLIPBOARD_ADAPTER_PAD,"clipboard");
  pipeline.link("handler >" + PIXEL_ADAPTER_PAD,"pixels");
  pipeline.runMainLoop("source",STDOUT,false,false);
}
