{
  if (!cap(buf,3,UNLIMITED,link,true))   return false;
  buf.skipBytes(1);
  int numberOfRectangles=buf.readUnsignedShort();
  if (verbose)   System.out.println("[" + this + "] INFO: Frame buffer update. Number of rectangles: "+ numberOfRectangles+ ".");
  if (!cap(buf,12 * numberOfRectangles,UNLIMITED,link,true))   return false;
  int numberOfProcessedRectangles=(buf.getMetadata(NUM_OF_PROCESSED_RECTANGLES) != null) ? (Integer)buf.getMetadata(NUM_OF_PROCESSED_RECTANGLES) : 0;
  if (buf.getMetadata(SAVED_CURSOR_POSITION) != null)   buf.cursor=(Integer)buf.getMetadata(SAVED_CURSOR_POSITION);
  if (verbose && numberOfProcessedRectangles > 0)   System.out.println("[" + this + "] INFO: Restarting from saved point. Number of already processed rectangles: "+ numberOfRectangles+ ", cursor: "+ buf.cursor+ ".");
  for (int i=numberOfProcessedRectangles; i < numberOfRectangles; i++) {
    if (!cap(buf,12,UNLIMITED,link,true))     return false;
    int x=buf.readUnsignedShort();
    int y=buf.readUnsignedShort();
    int width=buf.readUnsignedShort();
    int height=buf.readUnsignedShort();
    int encodingType=buf.readSignedInt();
switch (encodingType) {
case RfbConstants.ENCODING_RAW:
{
        if (!handleRawRectangle(buf,link,x,y,width,height))         return false;
        break;
      }
case RfbConstants.ENCODING_COPY_RECT:
{
      if (!handleCopyRect(buf,link,x,y,width,height))       return false;
      break;
    }
case RfbConstants.ENCODING_DESKTOP_SIZE:
{
    if (!handleScreenSizeChangeRect(buf,link,x,y,width,height))     return false;
    break;
  }
default :
throw new RuntimeException("Unsupported ecnoding: " + encodingType + ".");
}
buf.putMetadata(NUM_OF_PROCESSED_RECTANGLES,++numberOfProcessedRectangles);
buf.putMetadata(SAVED_CURSOR_POSITION,buf.cursor);
}
return true;
}
