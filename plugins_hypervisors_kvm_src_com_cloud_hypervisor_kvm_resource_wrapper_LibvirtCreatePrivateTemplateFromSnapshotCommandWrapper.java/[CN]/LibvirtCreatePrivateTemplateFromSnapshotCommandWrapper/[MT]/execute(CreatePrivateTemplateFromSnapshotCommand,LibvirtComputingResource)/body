{
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
  final String templateFolder=command.getAccountId() + File.separator + command.getNewTemplateId();
  final String templateInstallFolder="template/tmpl/" + templateFolder;
  final String tmplName=libvirtUtilitiesHelper.generatereUUIDName();
  final String tmplFileName=tmplName + ".qcow2";
  KVMStoragePool secondaryPool=null;
  KVMStoragePool snapshotPool=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    String snapshotPath=command.getSnapshotUuid();
    final int index=snapshotPath.lastIndexOf("/");
    snapshotPath=snapshotPath.substring(0,index);
    snapshotPool=storagePoolMgr.getStoragePoolByURI(command.getSecondaryStorageUrl() + snapshotPath);
    secondaryPool=storagePoolMgr.getStoragePoolByURI(command.getSecondaryStorageUrl());
    final KVMPhysicalDisk snapshot=snapshotPool.getPhysicalDisk(command.getSnapshotName());
    final String templatePath=secondaryPool.getLocalPath() + File.separator + templateInstallFolder;
    final StorageLayer storage=libvirtComputingResource.getStorage();
    storage.mkdirs(templatePath);
    final String tmplPath=templateInstallFolder + File.separator + tmplFileName;
    final String createTmplPath=libvirtComputingResource.createTmplPath();
    final int cmdsTimeout=libvirtComputingResource.getCmdsTimeout();
    final Script scriptCommand=new Script(createTmplPath,cmdsTimeout,s_logger);
    scriptCommand.add("-t",templatePath);
    scriptCommand.add("-n",tmplFileName);
    scriptCommand.add("-f",snapshot.getPath());
    scriptCommand.execute();
    final Processor qcow2Processor=libvirtUtilitiesHelper.buildQCOW2Processor(storage);
    final FormatInfo info=qcow2Processor.process(templatePath,null,tmplName);
    final TemplateLocation loc=libvirtUtilitiesHelper.buildTemplateLocation(storage,templatePath);
    loc.create(1,true,tmplName);
    loc.addFormat(info);
    loc.save();
    return new CreatePrivateTemplateAnswer(command,true,"",tmplPath,info.virtualSize,info.size,tmplName,info.format);
  }
 catch (  final ConfigurationException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
  }
catch (  final InternalErrorException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
  }
catch (  final IOException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
  }
catch (  final CloudRuntimeException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
  }
 finally {
    if (secondaryPool != null) {
      storagePoolMgr.deleteStoragePool(secondaryPool.getType(),secondaryPool.getUuid());
    }
    if (snapshotPool != null) {
      storagePoolMgr.deleteStoragePool(snapshotPool.getType(),snapshotPool.getUuid());
    }
  }
}
