def read_config(get_attr, set_attr, config_file):
    global config_fields, config_dir
    if (not os.path.exists(config_dir)):
        os.makedirs(config_dir)
    config_options = reduce((lambda x, y: (x + y)), map((lambda x: config_fields[x].keys()), config_fields.keys()))
    if os.path.exists(config_file):
        config = ConfigParser()
        try:
            with open(config_file, 'r') as cfg:
                config.readfp(cfg)
        except IOError as e:
            print 'Error: config_file not found', e
    else:
        config = write_config(get_attr, config_file, True)
        print 'Welcome! Using `set` configure the necessary settings:'
        print ' '.join(sorted(config_options))
        print 'Config file:', config_file
        print 'After setting up, run the `sync` command to sync apis\n'
    missing_keys = []
    for section in config_fields.keys():
        for key in config_fields[section].keys():
            try:
                if (key == 'tabularize'):
                    print '\ntabularize config parameter is deprecated:',
                    print 'please switch to display =',
                    print '[default,json,tabularize]\n'
                set_attr(key, config.get(section, key))
            except Exception:
                if (key == 'tabularize'):
                    set_attr(key, 'false')
                elif (key == 'display'):
                    config = write_config(get_attr, config_file, True)
                    set_attr(key, 'default')
                else:
                    missing_keys.append(key)
    if (len(missing_keys) > 0):
        print ('Please fix `%s` in %s' % (', '.join(missing_keys), config_file))
        sys.exit()
    return config_options
