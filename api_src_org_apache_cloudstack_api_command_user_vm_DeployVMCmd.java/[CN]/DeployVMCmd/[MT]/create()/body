{
  try {
    if (getIp6Address() != null) {
      throw new InvalidParameterValueException("Cannot support specified IPv6 address!");
    }
    Account owner=_accountService.getActiveAccountById(getEntityOwnerId());
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException("Unable to find zone by id=" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException("Unable to find service offering: " + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException("Unable to use template " + templateId);
    }
    DiskOffering diskOffering=null;
    if (diskOfferingId != null) {
      diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException("Unable to find disk offering " + diskOfferingId);
      }
    }
    if (!zone.isLocalStorageEnabled()) {
      if (serviceOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException("Zone is not configured to use local storage but service offering " + serviceOffering.getName() + " uses it");
      }
      if (diskOffering != null && diskOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException("Zone is not configured to use local storage but disk offering " + diskOffering.getName() + " uses it");
      }
    }
    UserVm vm=null;
    IpAddresses addrs=new IpAddresses(ipAddress,getIp6Address());
    if (zone.getNetworkType() == NetworkType.Basic) {
      if (getNetworkIds() != null) {
        throw new InvalidParameterValueException("Can't specify network Ids in Basic zone");
      }
 else {
        vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,keyboard);
      }
    }
 else {
      if (zone.isSecurityGroupEnabled()) {
        vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,keyboard);
      }
 else {
        if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
          throw new InvalidParameterValueException("Can't create vm with security groups; security group feature is not enabled per zone");
        }
        vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,keyboard);
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
      setEntityUuid(vm.getUuid());
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,"Failed to deploy vm");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex.getMessage(),ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
}
