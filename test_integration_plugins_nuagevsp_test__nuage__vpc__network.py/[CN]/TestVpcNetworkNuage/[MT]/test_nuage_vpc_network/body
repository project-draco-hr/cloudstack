@attr(tags=['advanced', 'nuagevsp'], required_hardware='false')
def test_nuage_vpc_network(self):
    ' Test Basic VPC Network Functionality with NuageVsp network Plugin\n        '
    self.debug('Creating Nuage VSP VPC offering...')
    vpc_offering = self.create_VpcOffering(self.test_data['nuage_vsp_services']['vpc_offering'])
    self.validate_vpc_offering(vpc_offering, state='Enabled')
    self.debug('Creating a VPC with Nuage VSP VPC offering...')
    vpc = self.create_Vpc(vpc_offering, cidr='10.1.0.0/16')
    self.validate_vpc(vpc, state='Enabled')
    self.debug('Creating Nuage Vsp VPC Network offering...')
    network_offering = self.create_NetworkOffering(self.test_data['nuage_vsp_services']['vpc_network_offering'])
    self.validate_network_offering(network_offering, state='Enabled')
    acl_list = self.create_network_acl_list(name='acl', description='acl', vpc=vpc)
    acl_item = self.create_network_acl_rule(self.test_data['ingress_rule'], acl_list=acl_list)
    self.debug('Creating a VPC network with Nuage Vsp VPC Network offering...')
    vpc_network = self.create_Network(network_offering, gateway='10.1.1.1', vpc=vpc, acl_list=acl_list)
    self.validate_network(vpc_network, state='Implemented')
    vr = self.get_network_router(vpc_network)
    self.check_router_state(vr, state='Running')
    vm = self.create_VM_in_Network(vpc_network)
    self.check_vm_state(vm, state='Running')
    self.verify_vsp_network(self.domain.id, vpc_network, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(vm)
    self.verify_vsp_firewall_rule(acl_item)
