{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  if (getSyncSource() == null) {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    asyncMgr.syncAsyncJobExecution(job.getId(),"Volume",param.getVolumeId());
    return true;
  }
 else {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    boolean success=false;
    String eventType=null;
    String failureDescription="";
    try {
      VolumeVO volume=null;
      VolumeOp op=param.getOp();
      if (op == VolumeOp.Create) {
        eventType=EventTypes.EVENT_VOLUME_CREATE;
        failureDescription="Failed to create volume";
        volume=asyncMgr.getExecutorContext().getManagementServer().allocVolume(param.getUserId(),param.getAccountId(),param.getName(),param.getZoneId(),param.getDiskOfferingId(),param.getEventId(),param.getSize());
        if (volume.getStatus() == AsyncInstanceCreateStatus.Corrupted) {
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"Failed to create volume.");
        }
 else {
          success=true;
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeResultObject(volume,param));
        }
      }
 else       if (op == VolumeOp.Attach) {
        eventType=EventTypes.EVENT_VOLUME_ATTACH;
        failureDescription="Failed to attach volume";
        asyncMgr.getExecutorContext().getManagementServer().attachVolumeToVM(param.getVmId(),param.getVolumeId(),param.getDeviceId(),param.getEventId());
        UserVm vmInstance=asyncMgr.getExecutorContext().getManagementServer().findUserVMInstanceById(param.getVmId());
        VolumeVO vol=asyncMgr.getExecutorContext().getManagementServer().findVolumeById(param.getVolumeId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeAttachResultObject(vmInstance,vol));
      }
 else       if (op == VolumeOp.Detach) {
        eventType=EventTypes.EVENT_VOLUME_DETACH;
        failureDescription="Failed to detach volume";
        asyncMgr.getExecutorContext().getManagementServer().detachVolumeFromVM(param.getVolumeId(),param.getEventId(),param.getDeviceId(),param.getVmId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,null);
      }
 else {
        throw new Exception("Invalid Volume Operation. Valid Operations are: CreateVolume, AttachVolume, and DetachVolume.");
      }
    }
 catch (    InternalErrorException e) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
catch (    Exception e) {
      s_logger.warn("Unhandled Exception executing volume operation " + param.getOp(),e);
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
 finally {
      if (!success) {
        asyncMgr.getExecutorContext().getManagementServer().saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,eventType,failureDescription,null,param.getEventId());
      }
    }
    return true;
  }
}
