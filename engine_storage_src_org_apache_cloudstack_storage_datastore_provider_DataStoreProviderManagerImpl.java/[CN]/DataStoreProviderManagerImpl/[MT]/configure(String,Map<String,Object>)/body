{
  Map<String,Object> copyParams=new HashMap<String,Object>(params);
  for (  DataStoreProvider provider : providers) {
    String providerName=provider.getName();
    if (providerMap.get(providerName) != null) {
      s_logger.debug("Failed to register data store provider, provider name: " + providerName + " is not unique");
      return false;
    }
    s_logger.debug("registering data store provider:" + provider.getName());
    providerMap.put(providerName,provider);
    try {
      boolean registrationResult=provider.configure(copyParams);
      if (!registrationResult) {
        providerMap.remove(providerName);
        s_logger.debug("Failed to register data store provider: " + providerName);
        return false;
      }
      Set<DataStoreProviderType> types=provider.getTypes();
      if (types.contains(DataStoreProviderType.PRIMARY)) {
        primaryDataStoreProviderMgr.registerDriver(provider.getName(),(PrimaryDataStoreDriver)provider.getDataStoreDriver());
        primaryDataStoreProviderMgr.registerHostListener(provider.getName(),provider.getHostListener());
      }
 else       if (types.contains(DataStoreProviderType.IMAGE)) {
        imageDataStoreProviderMgr.registerDriver(provider.getName(),(ImageStoreDriver)provider.getDataStoreDriver());
      }
    }
 catch (    Exception e) {
      s_logger.debug("configure provider failed",e);
      providerMap.remove(providerName);
      return false;
    }
  }
  return true;
}
