{
  Map<String,Object> copyParams=new HashMap<String,Object>(params);
  List<DataStoreProviderVO> providerVos=providerDao.listAll();
  for (  DataStoreProvider provider : providers) {
    boolean existingProvider=false;
    DataStoreProviderVO providerVO=null;
    for (    DataStoreProviderVO prov : providerVos) {
      if (prov.getName().equalsIgnoreCase(provider.getName())) {
        existingProvider=true;
        providerVO=prov;
        break;
      }
    }
    String uuid=null;
    if (!existingProvider) {
      uuid=UUID.nameUUIDFromBytes(provider.getName().getBytes()).toString();
      providerVO=new DataStoreProviderVO();
      providerVO.setName(provider.getName());
      providerVO.setUuid(uuid);
      providerVO=providerDao.persist(providerVO);
    }
 else {
      uuid=providerVO.getUuid();
    }
    copyParams.put("uuid",uuid);
    copyParams.put("id",providerVO.getId());
    providerMap.put(uuid,provider);
    try {
      boolean registrationResult=provider.configure(copyParams);
      if (!registrationResult) {
        providerMap.remove(uuid);
      }
    }
 catch (    Exception e) {
      s_logger.debug("configure provider failed",e);
      providerMap.remove(uuid);
    }
  }
  return true;
}
