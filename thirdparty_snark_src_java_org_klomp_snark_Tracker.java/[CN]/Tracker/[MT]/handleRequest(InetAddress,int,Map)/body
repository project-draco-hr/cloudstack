{
  log.log(Level.FINE,"TrackerReq " + address + ":"+ port+ " -> "+ params);
  String info_hash_value=(String)params.get("info_hash");
  if (info_hash_value == null) {
    return failure("No info_hash given");
  }
  info_hash_value=info_hash_value.replace("%","");
  boolean found=false;
  for (  String hash : info_hashes) {
    if (hash.equals(info_hash_value)) {
      found=true;
    }
  }
  if (!found) {
    return failure("Tracker doesn't handle given info_hash");
  }
  byte[] peer_id;
  String peer_id_value=(String)params.get("peer_id");
  if (peer_id_value == null) {
    return failure("No peer_id given");
  }
  peer_id=urldecode(peer_id_value);
  if (peer_id.length != 20) {
    return failure("peer_id must be 20 bytes long");
  }
  int peer_port;
  String peer_port_value=(String)params.get("port");
  if (peer_port_value == null) {
    return failure("No port given");
  }
  try {
    peer_port=Integer.parseInt(peer_port_value);
  }
 catch (  NumberFormatException nfe) {
    return failure("port not a number: " + nfe);
  }
  PeerID peer=new PeerID(peer_id,address,peer_port);
  Map<String,Object> response=new HashMap<String,Object>();
  Set<PeerID> peerset=peers.get(info_hash_value);
synchronized (peerset) {
    String event=(String)params.get("event");
    if ("stopped".equals(event)) {
      peerset.remove(peer);
    }
 else {
      peerset.add(peer);
    }
    response.put("interval",new Integer(INTERVAL_SEC));
    List<Map<String,Object>> peerList=new ArrayList<Map<String,Object>>();
    Iterator it=peerset.iterator();
    while (it.hasNext()) {
      PeerID peerID=(PeerID)it.next();
      Map<String,Object> m=new HashMap<String,Object>();
      m.put("peer id",peerID.getID());
      m.put("ip",peerID.getAddress().getHostAddress());
      m.put("port",new Integer(peerID.getPort()));
      peerList.add(m);
    }
    response.put("peers",peerList);
  }
  log.log(Level.FINE,"Tracker response: " + response);
  return BEncoder.bencode(response);
}
