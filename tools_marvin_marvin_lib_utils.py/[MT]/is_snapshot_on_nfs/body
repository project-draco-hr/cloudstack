def is_snapshot_on_nfs(apiclient, dbconn, config, zoneid, snapshotid):
    '\n    Checks whether a snapshot with id (not UUID) `snapshotid` is present on the nfs storage\n\n    @param apiclient: api client connection\n    @param @dbconn:  connection to the cloudstack db\n    @param config: marvin configuration file\n    @param zoneid: uuid of the zone on which the secondary nfs storage pool is mounted\n    @param snapshotid: uuid of the snapshot\n    @return: True if snapshot is found, False otherwise\n    '
    snapshot_extensions = {'vmware': '.ovf', 'kvm': '', 'xenserver': '.vhd', 'simulator': '', }
    qresultset = dbconn.execute(("select id from snapshots where uuid = '%s';" % str(snapshotid)))
    if (len(qresultset) == 0):
        raise Exception(('No snapshot found in cloudstack with id %s' % snapshotid))
    snapshotid = qresultset[0][0]
    qresultset = dbconn.execute(("select install_path,store_id from snapshot_store_ref where snapshot_id='%s' and store_role='Image';" % snapshotid))
    assert isinstance(qresultset, list), ('Invalid db query response for snapshot %s' % snapshotid)
    if (len(qresultset) == 0):
        return False
    from base import ImageStore
    secondaryStores = ImageStore.list(apiclient, zoneid=zoneid, id=int(qresultset[0][1]))
    assert isinstance(secondaryStores, list), 'Not a valid response for listImageStores'
    assert (len(secondaryStores) != 0), ('No image stores found in zone %s' % zoneid)
    secondaryStore = secondaryStores[0]
    if (str(secondaryStore.providername).lower() != 'nfs'):
        raise Exception(('is_snapshot_on_nfs works only against nfs secondary storage. found %s' % str(secondaryStore.providername)))
    hypervisor = get_hypervisor_type(apiclient)
    snapshotPath = (str(qresultset[0][0]) + snapshot_extensions[str(hypervisor).lower()])
    nfsurl = secondaryStore.url
    from urllib2 import urlparse
    parse_url = urlparse.urlsplit(nfsurl, scheme='nfs')
    (host, path) = (str(parse_url.netloc), str(parse_url.path))
    if (not config.mgtSvr):
        raise Exception('Your marvin configuration does not contain mgmt server credentials')
    (mgtSvr, user, passwd) = (config.mgtSvr[0].mgtSvrIp, config.mgtSvr[0].user, config.mgtSvr[0].passwd)
    try:
        ssh_client = SshClient(mgtSvr, 22, user, passwd)
        pathSeparator = ''
        if (not host.endswith(':')):
            pathSeparator = ':'
        cmds = ['mkdir -p %s /mnt/tmp', ('mount -t %s %s%s%s /mnt/tmp' % ('nfs', host, pathSeparator, path)), ("test -f %s && echo 'snapshot exists'" % os.path.join('/mnt/tmp', snapshotPath))]
        for c in cmds:
            result = ssh_client.execute(c)
        cmds = ['cd', 'umount /mnt/tmp']
        for c in cmds:
            ssh_client.execute(c)
    except Exception as e:
        raise Exception(('SSH failed for management server: %s - %s' % (config.mgtSvr[0].mgtSvrIp, e)))
    return ('snapshot exists' in result)
