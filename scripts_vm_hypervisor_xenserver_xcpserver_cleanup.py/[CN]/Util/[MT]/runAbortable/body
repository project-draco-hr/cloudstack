def runAbortable(func, ret, ns, abortTest, pollInterval, timeOut):
    'execute func in a separate thread and kill it if abortTest signals\n        so'
    resultFlag = IPCFlag(ns)
    pid = os.fork()
    if pid:
        startTime = time.time()
        while True:
            if resultFlag.test('success'):
                Util.log('  Child process completed successfully')
                resultFlag.clear('success')
                return
            if resultFlag.test('failure'):
                resultFlag.clear('failure')
                raise util.SMException('Child process exited with error')
            if abortTest():
                os.killpg(pid, signal.SIGKILL)
                raise AbortException('Aborting due to signal')
            if (timeOut and ((time.time() - startTime) > timeOut)):
                os.killpg(pid, signal.SIGKILL)
                raise util.SMException('Timed out')
            time.sleep(pollInterval)
    else:
        os.setpgrp()
        try:
            if (func() == ret):
                resultFlag.set('success')
            else:
                resultFlag.set('failure')
        except:
            resultFlag.set('failure')
        os._exit(0)
