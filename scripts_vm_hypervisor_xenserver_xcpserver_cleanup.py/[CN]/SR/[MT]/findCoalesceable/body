def findCoalesceable(self):
    'Find a coalesceable VDI. Return a vdi that should be coalesced\n        (choosing one among all coalesceable candidates according to some\n        criteria) or None if there is no VDI that could be coalesced'
    journals = self.journaler.getAll(VDI.JRN_RELINK)
    for uuid in journals.iterkeys():
        vdi = self.getVDI(uuid)
        if (vdi and (vdi not in self._failedCoalesceTargets)):
            return vdi
    candidates = []
    for vdi in self.vdis.values():
        if (vdi.isCoalesceable() and (vdi not in self._failedCoalesceTargets)):
            candidates.append(vdi)
    treeHeight = dict()
    for c in candidates:
        height = c.getTreeRoot().getTreeHeight()
        if treeHeight.get(height):
            treeHeight[height].append(c)
        else:
            treeHeight[height] = [c]
    freeSpace = self.getFreeSpace()
    heights = treeHeight.keys()
    heights.sort(reverse=True)
    for h in heights:
        for c in treeHeight[h]:
            spaceNeeded = c._calcExtraSpaceForCoalescing()
            if (spaceNeeded <= freeSpace):
                Util.log(('Coalesce candidate: %s (tree height %d)' % (c.toString(), h)))
                return c
            else:
                Util.log(('No space to coalesce %s (free space: %d)' % (c.toString(), freeSpace)))
    return None
