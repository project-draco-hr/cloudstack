def _increaseSizeVirt(self, size, atomic=True):
    "ensure the virtual size of 'self' is at least 'size'. Note that \n        resizing a VHD must always be offline and atomically: the file must\n        not be open by anyone and no concurrent operations may take place.\n        Thus we use the Agent API call for performing paused atomic \n        operations. If the caller is already in the atomic context, it must\n        call with atomic = False"
    if (self.sizeVirt >= size):
        return
    Util.log(('  Expanding VHD virt size for VDI %s: %s -> %s' % (self.toString(), Util.num2str(self.sizeVirt), Util.num2str(size))))
    msize = ((vhdutil.getMaxResizeSize(self.path) * 1024) * 1024)
    if (size <= msize):
        vhdutil.setSizeVirtFast(self.path, size)
    elif atomic:
        args = self._resizeArgs(size)
        vdiList = self._getAllSubtree()
        if (not self.sr.xapi.atomicOp(vdiList, 'resize', args)):
            raise util.SMException('Failed to resize atomically')
    else:
        self._setSizeVirt(size)
    self.sizeVirt = vhdutil.getSizeVirt(self.path)
