def _increaseSizeVirt(self, size, atomic=True):
    "ensure the virtual size of 'self' is at least 'size'"
    self._activate()
    if (not self.raw):
        VDI._increaseSizeVirt(self, size, atomic)
        return
    offset = self.sizeLV
    if (self.sizeVirt < size):
        oldSize = self.sizeLV
        self.sizeLV = util.roundup(lvutil.LVM_SIZE_INCREMENT, size)
        Util.log(('  Growing %s: %d->%d' % (self.path, oldSize, self.sizeLV)))
        self.sr.lvmCache.setSize(self.lvName, self.sizeLV)
        offset = oldSize
    unfinishedZero = False
    jval = self.sr.journaler.get(self.JRN_ZERO, self.uuid)
    if jval:
        unfinishedZero = True
        offset = int(jval)
    length = (self.sizeLV - offset)
    if (not length):
        return
    if unfinishedZero:
        Util.log('  ==> Redoing unfinished zeroing out')
    else:
        self.sr.journaler.create(self.JRN_ZERO, self.uuid, str(offset))
    Util.log(('  Zeroing %s: from %d, %dB' % (self.path, offset, length)))
    abortTest = (lambda : IPCFlag(self.sr.uuid).test(FLAG_TYPE_ABORT))
    func = (lambda : util.zeroOut(self.path, offset, length))
    Util.runAbortable(func, True, self.sr.uuid, abortTest, VDI.POLL_INTERVAL, 0)
    self.sr.journaler.remove(self.JRN_ZERO, self.uuid)
