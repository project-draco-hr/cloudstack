@classmethod
def setUpClass(cls):
    cls.services = Services().services
    cls.apiclient = super(TestDeployVM, cls).getClsTestClient().getApiClient()
    domain = get_domain(cls.apiclient, cls.services)
    zone = get_zone(cls.apiclient, cls.services)
    cls.services['mode'] = zone.networktype
    if (zone.localstorageenabled == True):
        cls.services['service_offerings']['tiny']['storagetype'] = 'local'
        cls.services['service_offerings']['small']['storagetype'] = 'local'
        cls.services['service_offerings']['medium']['storagetype'] = 'local'
    template = get_template(cls.apiclient, zone.id, cls.services['ostype'])
    cls.services['small']['zoneid'] = zone.id
    cls.services['small']['template'] = template.id
    cls.services['medium']['zoneid'] = zone.id
    cls.services['medium']['template'] = template.id
    cls.services['iso']['zoneid'] = zone.id
    cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=domain.id)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings']['tiny'])
    cls.virtual_machine = VirtualMachine.create(cls.apiclient, cls.services['small'], accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls.cleanup = [cls.service_offering, cls.account]
