{
  if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {
    s_logger.debug("Username or Password cannot be empty");
    return new Pair<Boolean,ActionOnFailedAuthentication>(false,null);
  }
  boolean result=false;
  ActionOnFailedAuthentication action=null;
  if (_ldapManager.isLdapEnabled()) {
    LdapTrustMapVO ldapTrustMapVO=_ldapManager.getDomainLinkedToLdap(domainId);
    if (ldapTrustMapVO != null) {
      try {
        LdapUser ldapUser=_ldapManager.getUser(username,ldapTrustMapVO.getType(),ldapTrustMapVO.getName());
        if (!ldapUser.isDisabled()) {
          result=_ldapManager.canAuthenticate(ldapUser.getPrincipal(),password);
          if (result) {
            final UserAccount user=_userAccountDao.getUserAccount(username,domainId);
            if (user == null) {
              createCloudStackUserAccount(ldapUser,domainId);
            }
          }
        }
 else {
          disableUserInCloudStack(ldapUser,domainId);
        }
      }
 catch (      NoLdapUserMatchingQueryException e) {
        s_logger.debug(e.getMessage());
      }
    }
 else {
      final UserAccount user=_userAccountDao.getUserAccount(username,domainId);
      if (user != null) {
        try {
          LdapUser ldapUser=_ldapManager.getUser(username);
          if (!ldapUser.isDisabled()) {
            result=_ldapManager.canAuthenticate(ldapUser.getPrincipal(),password);
          }
 else {
            s_logger.debug("user with principal " + ldapUser.getPrincipal() + " is disabled in ldap");
          }
        }
 catch (        NoLdapUserMatchingQueryException e) {
          s_logger.debug(e.getMessage());
        }
      }
    }
  }
  if (!result) {
    action=ActionOnFailedAuthentication.INCREMENT_INCORRECT_LOGIN_ATTEMPT_COUNT;
  }
  return new Pair<Boolean,ActionOnFailedAuthentication>(result,action);
}
