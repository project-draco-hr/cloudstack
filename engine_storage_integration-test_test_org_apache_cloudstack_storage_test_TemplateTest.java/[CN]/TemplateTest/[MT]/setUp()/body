{
  ComponentContext.initComponentsLifeCycle();
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  imageStore=new ImageStoreVO();
  imageStore.setName("test");
  imageStore.setDataCenterId(dcId);
  imageStore.setProviderName(DataStoreProvider.NFS_IMAGE);
  imageStore.setRole(DataStoreRole.Image);
  imageStore.setUrl(this.getSecondaryStorage());
  imageStore.setUuid(UUID.randomUUID().toString());
  imageStore.setProtocol("nfs");
  imageStore=imageStoreDao.persist(imageStore);
  VMTemplateVO image=new VMTemplateVO();
  image.setTemplateType(TemplateType.USER);
  image.setUrl(this.getTemplateUrl());
  image.setUniqueName(UUID.randomUUID().toString());
  image.setName(UUID.randomUUID().toString());
  image.setPublicTemplate(true);
  image.setFeatured(true);
  image.setRequiresHvm(true);
  image.setBits(64);
  image.setFormat(Storage.ImageFormat.VHD);
  image.setEnablePassword(true);
  image.setEnableSshKey(true);
  image.setGuestOSId(1);
  image.setBootable(true);
  image.setPrepopulate(true);
  image.setCrossZones(true);
  image.setExtractable(true);
  image=templateDao.persist(image);
  templateId=image.getId();
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Mockito.any(DataObject.class))).thenReturn(ep);
  Mockito.when(epSelector.select(Mockito.any(DataStore.class))).thenReturn(ep);
}
