{
  s_logger.debug("ZoneWideStoragePoolAllocator to find storage pool");
  if (dskCh.useLocalStorage()) {
    return null;
  }
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  List<StoragePoolVO> storagePools=_storagePoolDao.findZoneWideStoragePoolsByTags(plan.getDataCenterId(),dskCh.getTags());
  if (storagePools == null) {
    storagePools=new ArrayList<StoragePoolVO>();
  }
  List<StoragePoolVO> anyHypervisorStoragePools=new ArrayList<StoragePoolVO>();
  for (  StoragePoolVO storagePool : storagePools) {
    if (HypervisorType.Any.equals(storagePool.getHypervisor())) {
      anyHypervisorStoragePools.add(storagePool);
    }
  }
  List<StoragePoolVO> storagePoolsByHypervisor=_storagePoolDao.findZoneWideStoragePoolsByHypervisor(plan.getDataCenterId(),dskCh.getHypervisorType());
  storagePools.retainAll(storagePoolsByHypervisor);
  storagePools.addAll(anyHypervisorStoragePools);
  List<StoragePoolVO> allPools=_storagePoolDao.findZoneWideStoragePoolsByTags(plan.getDataCenterId(),null);
  allPools.removeAll(storagePools);
  for (  StoragePoolVO pool : allPools) {
    avoid.addPool(pool.getId());
  }
  for (  StoragePoolVO storage : storagePools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool storagePool=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(storage.getId());
    if (filter(avoid,storagePool,dskCh,plan)) {
      suitablePools.add(storagePool);
    }
 else {
      avoid.addPool(storagePool.getId());
    }
  }
  return suitablePools;
}
