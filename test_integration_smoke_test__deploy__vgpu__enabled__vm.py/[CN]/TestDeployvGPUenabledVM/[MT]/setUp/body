def setUp(self):
    self.testdata = self.testClient.getParsedTestDataConfig()['vgpu']
    self.apiclient = self.testClient.getApiClient()
    self.dbclient = self.testClient.getDbConnection()
    if (self.noSuitableHost or self.unsupportedHypervisor):
        self.hypervisor = get_hypervisor_type(self.apiclient)
        if (self.hypervisor.lower() not in ['vmware']):
            self.skipTest('Skipping test because suitable hypervisor/host not        \t            present')
        self.testdata = self.testClient.getParsedTestDataConfig()
    self.cleanup = []
    self.domain = get_domain(self.apiclient)
    self.zone = get_zone(self.apiclient, self.testClient.getZoneForTests())
    self.account = Account.create(self.apiclient, self.testdata['account'], domainid=self.domain.id)
    if (self.hypervisor.lower() in ['xenserver']):
        self.template = get_template(self.apiclient, self.zone.id, self.testdata['ostype'])
        self.cleanup.append(self.template)
        self.testdata['mode'] = self.zone.networktype
        if (self.template == FAILED):
            assert False, ('get_template() failed to return template with description %s' % self.testdata['ostype'])
        self.testdata['small']['zoneid'] = self.zone.id
        self.testdata['small']['template'] = self.template.id
        self.testdata['service_offerings']['vgpu260qwin']['serviceofferingdetails'] = [{'pciDevice': 'Group of NVIDIA Corporation GK107GL [GRID K1] GPUs', }, {'vgpuType': 'GRID K120Q', }]
        self.service_offering = ServiceOffering.create(self.apiclient, self.testdata['service_offerings']['vgpu260qwin'])
        self.cleanup.append(self.service_offering)
    elif (self.hypervisor.lower() in ['vmware']):
        self.testdata['isolated_network']['zoneid'] = self.zone.id
        self.userapiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.service_offering = ServiceOffering.create(self.apiclient, self.testdata['service_offering'])
        self.isolated_network_offering = NetworkOffering.create(self.apiclient, self.testdata['isolated_network_offering'])
        self.isolated_network_offering.update(self.apiclient, state='Enabled')
        self.template = Template.register(self.userapiclient, self.testdata['configurableData']['vmxnet3template'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, details=[{'mks.enable3d': 'true', 'mks.use3dRenderer': 'automatic', 'svga.autodetect': 'false', 'svga.vramSize': '131072', }])
