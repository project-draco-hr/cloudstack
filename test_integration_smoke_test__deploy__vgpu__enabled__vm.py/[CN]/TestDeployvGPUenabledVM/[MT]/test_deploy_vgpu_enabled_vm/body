@attr(tags=['advanced', 'basic', 'vgpu'], required_hardware='true')
def test_deploy_vgpu_enabled_vm(self):
    'Test Deploy Virtual Machine\n\n        # Validate the following:\n        # 1. Virtual Machine is accessible via SSH\n        # 2. Virtual Machine is vGPU enabled (via SSH)\n        # 3. listVirtualMachines returns accurate information\n        '
    if (self.hypervisor.lower() not in ['xenserver']):
        self.cleanup.append(self.account)
        self.skipTest('This test case is written specifically                    for XenServer hypervisor')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, mode=self.testdata['mode'])
    self.cleanup.append(self.virtual_machine)
    list_vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.assertEqual(isinstance(list_vms, list), True, 'List VM response was not a valid list')
    self.assertNotEqual(len(list_vms), 0, 'List VM response was empty')
    vm = list_vms[0]
    self.assertEqual(vm.id, self.virtual_machine.id, 'Virtual Machine ids do not match')
    self.assertEqual(vm.name, self.virtual_machine.name, 'Virtual Machine names do not match')
    self.assertEqual(vm.state, 'Running', msg='VM is not in Running state')
    hosts = list_hosts(self.apiclient, id=vm.hostid)
    hostip = hosts[0].ipaddress
    try:
        sshClient = SshClient(host=hostip, port=self.testdata['configurableData']['host']['publicport'], user=self.testdata['configurableData']['host']['username'], passwd=self.testdata['configurableData']['host']['password'])
        res = sshClient.execute(('xe vgpu-list vm-name-label=%s params=type-uuid %s' % vm.instancename))
        self.debug(('SSH result: %s' % res))
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (hostip, e)))
    result = str(res)
    self.assertEqual(result.count('type-uuid'), 1, 'VM is vGPU enabled.')
    self.cleanup.append(self.account)
