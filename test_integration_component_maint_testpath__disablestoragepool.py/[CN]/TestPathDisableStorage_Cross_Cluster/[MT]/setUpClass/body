@classmethod
def setUpClass(cls):
    testClient = super(TestPathDisableStorage_Cross_Cluster, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient)
    cls.testdata['mode'] = cls.zone.networktype
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls.testdata['template']['ostypeid'] = cls.template.ostypeid
    if (cls.template == FAILED):
        cls.fail(('get_template() failed to return template with description %s' % cls.testdata['ostype']))
    cls._cleanup = []
    cls.disabled_list = []
    cls.maint_list = []
    cls.testdata['template_2']['zoneid'] = cls.zone.id
    cls.testdata['template_2']['ostypeid'] = cls.template.ostypeid
    cls.hypervisor = testClient.getHypervisorInfo()
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], admin=True)
        cls.debug('Creating account')
        cls._cleanup.append(cls.account)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
        cls.resized_disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['resized_disk_offering'])
        cls._cleanup.append(cls.disk_offering)
        cls.userapiclient = testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
        response = User.login(cls.userapiclient, username=cls.account.name, password=cls.testdata['account']['password'])
        assert (response.sessionkey is not None)
    except Exception as e:
        cls.tearDownClass()
        raise e
