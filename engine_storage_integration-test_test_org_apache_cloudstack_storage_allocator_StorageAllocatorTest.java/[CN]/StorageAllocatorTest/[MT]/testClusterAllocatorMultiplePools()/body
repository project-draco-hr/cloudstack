{
  Long newStorageId=null;
  try {
    createDb();
    DataStoreProvider provider=providerMgr.getDataStoreProvider("cloudstack primary data store provider");
    storage=new StoragePoolVO();
    storage.setDataCenterId(dcId);
    storage.setPodId(podId);
    storage.setPoolType(StoragePoolType.NetworkFilesystem);
    storage.setClusterId(clusterId);
    storage.setStatus(StoragePoolStatus.Up);
    storage.setScope(ScopeType.CLUSTER);
    storage.setAvailableBytes(1000);
    storage.setCapacityBytes(20000);
    storage.setHostAddress(UUID.randomUUID().toString());
    storage.setPath(UUID.randomUUID().toString());
    storage.setStorageProviderName(provider.getName());
    StoragePoolVO newStorage=storagePoolDao.persist(storage);
    newStorageId=newStorage.getId();
    DiskProfile profile=new DiskProfile(volume,diskOffering,HypervisorType.XenServer);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        Assert.assertEquals(pools.size(),1);
        foundAcct++;
      }
    }
    if (foundAcct > 1 || foundAcct == 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    if (newStorageId != null) {
      storagePoolDao.remove(newStorageId);
    }
    Assert.fail();
  }
}
