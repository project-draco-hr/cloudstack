{
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),dc.getId(),"255.255.255.255","",8,"test");
  pod=podDao.persist(pod);
  podId=pod.getId();
  ClusterVO cluster=new ClusterVO(dc.getId(),pod.getId(),"devcloud cluster");
  cluster.setHypervisorType(HypervisorType.XenServer.toString());
  cluster.setClusterType(ClusterType.CloudManaged);
  cluster.setManagedState(ManagedState.Managed);
  cluster=clusterDao.persist(cluster);
  clusterId=cluster.getId();
  DataStoreProvider provider=providerMgr.getDataStoreProvider("cloudstack primary data store provider");
  storage=new StoragePoolVO();
  storage.setDataCenterId(dcId);
  storage.setPodId(podId);
  storage.setPoolType(StoragePoolType.NetworkFilesystem);
  storage.setClusterId(clusterId);
  storage.setStatus(StoragePoolStatus.Up);
  storage.setScope(ScopeType.CLUSTER);
  storage.setAvailableBytes(1000);
  storage.setCapacityBytes(20000);
  storage.setHostAddress(UUID.randomUUID().toString());
  storage.setPath(UUID.randomUUID().toString());
  storage.setStorageProviderName(provider.getName());
  storage=storagePoolDao.persist(storage);
  storagePoolId=storage.getId();
  storageMgr.createCapacityEntry(storage.getId());
  diskOffering=new DiskOfferingVO();
  diskOffering.setDiskSize(500);
  diskOffering.setName("test-disk");
  diskOffering.setSystemUse(false);
  diskOffering.setUseLocalStorage(false);
  diskOffering.setCustomized(false);
  diskOffering.setRecreatable(false);
  diskOffering=diskOfferingDao.persist(diskOffering);
  diskOfferingId=diskOffering.getId();
  volume=new VolumeVO(Volume.Type.ROOT,"volume",dcId,1,1,diskOffering.getId(),diskOffering.getDiskSize());
  volume=volumeDao.persist(volume);
  volumeId=volume.getId();
}
