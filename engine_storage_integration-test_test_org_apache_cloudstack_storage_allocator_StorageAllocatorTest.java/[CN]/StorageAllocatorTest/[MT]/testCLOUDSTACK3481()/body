{
  try {
    createDb();
    StoragePoolVO pool=storagePoolDao.findById(storagePoolId);
    pool.setHypervisor(HypervisorType.KVM);
    pool.setScope(ScopeType.ZONE);
    pool.setClusterId(null);
    pool.setPodId(null);
    storagePoolDao.update(pool.getId(),pool);
    DiskProfile profile=new DiskProfile(volume,diskOffering,HypervisorType.KVM);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Account account=Mockito.mock(Account.class);
    Mockito.when(account.getAccountId()).thenReturn(1L);
    Mockito.when(vmProfile.getHypervisorType()).thenReturn(HypervisorType.KVM);
    Mockito.when(vmProfile.getOwner()).thenReturn(account);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    Mockito.when(storageMgr.storagePoolHasEnoughIops(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        Assert.assertEquals(pools.get(0).getId(),storage.getId());
        foundAcct++;
      }
    }
    if (foundAcct > 1 || foundAcct == 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    Assert.fail();
  }
}
