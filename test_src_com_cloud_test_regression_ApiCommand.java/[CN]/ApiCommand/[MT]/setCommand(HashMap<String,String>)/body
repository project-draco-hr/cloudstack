{
  if (this.getCommandType() == CommandType.SCRIPT) {
    String temp="bash xen/" + this.commandName;
    Set<?> c=this.urlParam.entrySet();
    Iterator<?> it=c.iterator();
    while (it.hasNext()) {
      Map.Entry<?,?> me=(Map.Entry<?,?>)it.next();
      String key=(String)me.getKey();
      String value=(String)me.getValue();
      try {
        temp=temp + " -" + key+ " "+ value;
      }
 catch (      Exception ex) {
        s_logger.error("Unable to set parameter " + key + " for the command "+ this.getName());
      }
    }
    this.command=temp;
  }
 else   if (this.getCommandType() == CommandType.MYSQL) {
    String temp=this.commandName + " where ";
    Set<?> c=this.urlParam.entrySet();
    Iterator<?> it=c.iterator();
    while (it.hasNext()) {
      Map.Entry<?,?> me=(Map.Entry<?,?>)it.next();
      String key=(String)me.getKey();
      String value=(String)me.getValue();
      try {
        temp=temp + key + "="+ value;
      }
 catch (      Exception ex) {
        s_logger.error("Unable to set parameter " + key + " for the command "+ this.getName());
      }
    }
    this.command=temp;
    s_logger.info("The command is " + this.command);
  }
 else {
    if ((param.get("apikey") == null) || (param.get("secretkey") == null) || (this.isUserCommand == false)) {
      String temp=this.host + ":8096/?command=" + this.commandName;
      Set<?> c=this.urlParam.entrySet();
      Iterator<?> it=c.iterator();
      while (it.hasNext()) {
        Map.Entry<?,?> me=(Map.Entry<?,?>)it.next();
        String key=(String)me.getKey();
        String value=(String)me.getValue();
        try {
          temp=temp + "&" + key+ "="+ URLEncoder.encode(value,"UTF-8");
        }
 catch (        Exception ex) {
          s_logger.error("Unable to set parameter " + key + " for the command "+ this.getName());
        }
      }
      this.command=temp;
    }
 else     if (isUserCommand == true) {
      String apiKey=param.get("apikey");
      String secretKey=param.get("secretkey");
      String temp="";
      this.urlParam.put("apikey",apiKey);
      this.urlParam.put("command",this.commandName);
      Set<?> c=this.urlParam.entrySet();
      Iterator<?> it=c.iterator();
      while (it.hasNext()) {
        Map.Entry<?,?> me=(Map.Entry<?,?>)it.next();
        String key=(String)me.getKey();
        String value=(String)me.getValue();
        try {
          temp=temp + key + "="+ URLEncoder.encode(value,"UTF-8")+ "&";
        }
 catch (        Exception ex) {
          s_logger.error("Unable to set parameter " + value + " for the command "+ this.getName());
        }
      }
      temp=temp.substring(0,temp.length() - 1);
      String requestToSign=temp.toLowerCase();
      String signature=UtilsForTest.signRequest(requestToSign,secretKey);
      String encodedSignature="";
      try {
        encodedSignature=URLEncoder.encode(signature,"UTF-8");
      }
 catch (      Exception ex) {
        s_logger.error(ex);
      }
      this.command=this.host + ":8080/client/api/?" + temp+ "&signature="+ encodedSignature;
    }
  }
}
