{
  final StringTokenizer messageSplitter=new StringTokenizer(logMessage,_pairDelimiter);
  while (messageSplitter.hasMoreTokens()) {
    final String pairToken=messageSplitter.nextToken();
    final StringTokenizer pairSplitter=new StringTokenizer(pairToken,_keyValueDelimiter);
    String keyToken;
    String valueToken;
    if (pairSplitter.hasMoreTokens()) {
      keyToken=pairSplitter.nextToken().trim();
    }
 else {
      break;
    }
    if (pairSplitter.hasMoreTokens()) {
      valueToken=pairSplitter.nextToken().trim();
    }
 else {
      break;
    }
    if (keyToken.equalsIgnoreCase("alertType") && !valueToken.equalsIgnoreCase("null")) {
      alertType=Short.parseShort(valueToken);
    }
 else     if (keyToken.equalsIgnoreCase("dataCenterId") && !valueToken.equalsIgnoreCase("null")) {
      dataCenterId=Long.parseLong(valueToken);
    }
 else     if (keyToken.equalsIgnoreCase("podId") && !valueToken.equalsIgnoreCase("null")) {
      podId=Long.parseLong(valueToken);
    }
 else     if (keyToken.equalsIgnoreCase("clusterId") && !valueToken.equalsIgnoreCase("null")) {
      clusterId=Long.parseLong(valueToken);
    }
 else     if (keyToken.equalsIgnoreCase("message") && !valueToken.equalsIgnoreCase("null")) {
      sysMessage=getSyslogMessage(logMessage);
    }
  }
}
