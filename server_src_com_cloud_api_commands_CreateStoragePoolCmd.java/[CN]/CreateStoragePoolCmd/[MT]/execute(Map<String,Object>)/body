{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("CreateStoragePoolCmd Params @ " + params.toString());
  }
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  String poolName=(String)params.get(BaseCmd.Properties.NAME.getName());
  String storageUri=(String)params.get(BaseCmd.Properties.URL.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  String tags=(String)params.get(BaseCmd.Properties.TAGS.getName());
  Map ds=(Map)params.get(BaseCmd.Properties.DETAILS.getName());
  Long clusterId=(Long)params.get(BaseCmd.Properties.CLUSTER_ID.getName());
  if (clusterId != null && podId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Cluster id requires pod id");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  DataCenterVO zone=getManagementServer().findDataCenterById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find zone by id " + zoneId);
  }
  try {
    URI uri=new URI(storageUri);
    if (uri.getScheme() == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,"scheme is null " + storageUri + ", add nfs:// as a prefix");
 else     if (uri.getScheme().equalsIgnoreCase("nfs")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"host or path is null, should be nfs://hostname/path");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,storageUri + " is not a valid uri");
  }
  s_logger.debug("CreateStoragePoolCmd - Input parameters verified ");
  StoragePoolVO storagePool=null;
  try {
    storagePool=getManagementServer().addPool(zoneId,podId,clusterId,poolName,storageUri,tags,details);
  }
 catch (  ResourceInUseException e) {
    throw new ServerApiException(BaseCmd.STORAGE_RESOURCE_IN_USE,e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,storageUri + " is not a valid uri");
  }
catch (  IllegalArgumentException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
  }
catch (  UnknownHostException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
  }
catch (  ResourceAllocationException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
  }
  if (storagePool == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to create storage pool");
  }
  s_logger.debug("Successfully created storagePool " + storagePool.toString());
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(storagePool.getId())));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),storagePool.getDataCenterId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().getDataCenterBy(storagePool.getDataCenterId()).getName()));
  if (storagePool.getPodId() != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_ID.getName(),storagePool.getPodId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.POD_NAME.getName(),getManagementServer().getPodBy(storagePool.getPodId()).getName()));
  }
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),storagePool.getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.IP_ADDRESS.getName(),storagePool.getHostAddress()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PATH.getName(),storagePool.getPath()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(storagePool.getCreated())));
  if (storagePool.getPoolType() != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),storagePool.getPoolType().toString()));
  }
  if (storagePool.getClusterId() != null) {
    ClusterVO cluster=getManagementServer().findClusterById(storagePool.getClusterId());
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_ID.getName(),cluster.getId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CLUSTER_NAME.getName(),cluster.getName()));
  }
  StorageStats stats=getManagementServer().getStoragePoolStatistics(storagePool.getId());
  long capacity=storagePool.getCapacityBytes();
  long available=storagePool.getAvailableBytes();
  long used=capacity - available;
  if (stats != null) {
    used=stats.getByteUsed();
    available=capacity - used;
  }
  s_logger.debug("Successfully recieved the storagePool statistics. TotalDiskSize - " + capacity + " AllocatedDiskSize - "+ used);
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_TOTAL.getName(),Long.valueOf(storagePool.getCapacityBytes()).toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE_ALLOCATED.getName(),Long.valueOf(used).toString()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),getManagementServer().getStoragePoolTags(storagePool.getId())));
  List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
  embeddedObject.add(new Pair<String,Object>("storagepool",new Object[]{returnValues}));
  return embeddedObject;
}
