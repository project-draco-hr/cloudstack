{
  assert(name != null);
  assert(aliasForCertificateInStore != null);
  assert(storePassword != null);
  KeystoreVO ksVo=_ksDao.findByName(name);
  if (ksVo == null)   throw new CloudRuntimeException("Unable to find keystore " + name);
  try {
    return CertificateHelper.buildAndSaveKeystore(aliasForCertificateInStore,ksVo.getCertificate(),getKeyContent(ksVo.getKey()),storePassword);
  }
 catch (  KeyStoreException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to KeyStoreException");
  }
catch (  CertificateException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to CertificateException");
  }
catch (  NoSuchAlgorithmException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to NoSuchAlgorithmException");
  }
catch (  InvalidKeySpecException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to InvalidKeySpecException");
  }
catch (  IOException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to IOException");
  }
  return null;
}
