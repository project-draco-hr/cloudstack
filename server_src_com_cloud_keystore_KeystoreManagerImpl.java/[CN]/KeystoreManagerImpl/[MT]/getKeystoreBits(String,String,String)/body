{
  assert(name != null);
  assert(aliasForCertificateInStore != null);
  assert(storePassword != null);
  KeystoreVO ksVo=_ksDao.findByName(name);
  if (ksVo == null)   throw new CloudRuntimeException("Unable to find keystore " + name);
  List<Ternary<String,String,String>> certs=new ArrayList<Ternary<String,String,String>>();
  List<KeystoreVO> certChains=_ksDao.findCertChain();
  for (  KeystoreVO ks : certChains) {
    Ternary<String,String,String> cert=new Ternary<String,String,String>(ks.getName(),ks.getCertificate(),null);
    certs.add(cert);
  }
  Ternary<String,String,String> cert=new Ternary<String,String,String>(ksVo.getName(),ksVo.getCertificate(),getKeyContent(ksVo.getKey()));
  certs.add(cert);
  try {
    return CertificateHelper.buildAndSaveKeystore(certs,storePassword);
  }
 catch (  KeyStoreException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to KeyStoreException");
  }
catch (  CertificateException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to CertificateException");
  }
catch (  NoSuchAlgorithmException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to NoSuchAlgorithmException");
  }
catch (  InvalidKeySpecException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to InvalidKeySpecException");
  }
catch (  IOException e) {
    s_logger.warn("Unable to build keystore for " + name + " due to IOException");
  }
  return null;
}
