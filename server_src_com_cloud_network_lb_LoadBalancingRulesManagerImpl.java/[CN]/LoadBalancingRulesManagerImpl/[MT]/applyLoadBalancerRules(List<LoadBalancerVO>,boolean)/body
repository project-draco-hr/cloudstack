{
  List<LoadBalancingRule> rules=new ArrayList<LoadBalancingRule>();
  for (  LoadBalancerVO lb : lbs) {
    rules.add(getLoadBalancerRuleToApply(lb));
  }
  if (!applyLbRules(rules,false)) {
    s_logger.debug("LB rules are not completely applied");
    return false;
  }
  if (updateRulesInDB) {
    for (    final LoadBalancerVO lb : lbs) {
      boolean checkForReleaseElasticIp=Transaction.execute(new TransactionCallback<Boolean>(){
        @Override public Boolean doInTransaction(        TransactionStatus status){
          boolean checkForReleaseElasticIp=false;
          if (lb.getState() == FirewallRule.State.Revoke) {
            removeLBRule(lb);
            s_logger.debug("LB " + lb.getId() + " is successfully removed");
            checkForReleaseElasticIp=true;
          }
 else           if (lb.getState() == FirewallRule.State.Add) {
            lb.setState(FirewallRule.State.Active);
            s_logger.debug("LB rule " + lb.getId() + " state is set to Active");
            _lbDao.persist(lb);
          }
          List<LoadBalancerVMMapVO> lbVmMaps=_lb2VmMapDao.listByLoadBalancerId(lb.getId(),true);
          List<Long> instanceIds=new ArrayList<Long>();
          for (          LoadBalancerVMMapVO lbVmMap : lbVmMaps) {
            instanceIds.add(lbVmMap.getInstanceId());
            _lb2VmMapDao.remove(lb.getId(),lbVmMap.getInstanceId(),lbVmMap.getInstanceIp(),null);
            s_logger.debug("Load balancer rule id " + lb.getId() + " is removed for vm "+ lbVmMap.getInstanceId()+ " instance ip "+ lbVmMap.getInstanceIp());
          }
          if (_lb2VmMapDao.listByLoadBalancerId(lb.getId()).isEmpty()) {
            lb.setState(FirewallRule.State.Add);
            _lbDao.persist(lb);
            s_logger.debug("LB rule " + lb.getId() + " state is set to Add as there are no more active LB-VM mappings");
          }
          List<LBStickinessPolicyVO> stickinesspolicies=_lb2stickinesspoliciesDao.listByLoadBalancerId(lb.getId(),true);
          if (!stickinesspolicies.isEmpty()) {
            _lb2stickinesspoliciesDao.remove(lb.getId(),true);
            s_logger.debug("Load balancer rule id " + lb.getId() + " is removed stickiness policies");
          }
          List<LBHealthCheckPolicyVO> healthCheckpolicies=_lb2healthcheckDao.listByLoadBalancerId(lb.getId(),true);
          if (!healthCheckpolicies.isEmpty()) {
            _lb2healthcheckDao.remove(lb.getId(),true);
            s_logger.debug("Load balancer rule id " + lb.getId() + " is removed health check monitors policies");
          }
          LoadBalancerCertMapVO lbCertMap=_lbCertMapDao.findByLbRuleId(lb.getId());
          if (lbCertMap != null && lbCertMap.isRevoke()) {
            _lbCertMapDao.remove(lbCertMap.getId());
            s_logger.debug("Load balancer rule id " + lb.getId() + " removed certificate mapping");
          }
          return checkForReleaseElasticIp;
        }
      }
);
      if (checkForReleaseElasticIp && lb.getSourceIpAddressId() != null) {
        boolean success=true;
        long count=_firewallDao.countRulesByIpId(lb.getSourceIpAddressId());
        if (count == 0) {
          try {
            success=handleSystemLBIpRelease(lb);
          }
 catch (          Exception ex) {
            s_logger.warn("Failed to release system ip as a part of lb rule " + lb + " deletion due to exception ",ex);
            success=false;
          }
 finally {
            if (!success) {
              s_logger.warn("Failed to release system ip as a part of lb rule " + lb + " deletion");
            }
          }
        }
      }
      if (lb.getSourceIpAddressId() != null) {
        IpAddress ip=_ipAddressDao.findById(lb.getSourceIpAddressId());
        _vpcMgr.unassignIPFromVpcNetwork(ip.getId(),lb.getNetworkId());
      }
    }
  }
  return true;
}
