{
  Transaction txn=Transaction.currentTxn();
  List<LoadBalancingRule> rules=new ArrayList<LoadBalancingRule>();
  for (  LoadBalancerVO lb : lbs) {
    List<LbDestination> dstList=getExistingDestinations(lb.getId());
    List<LbStickinessPolicy> policyList=getStickinessPolicies(lb.getId());
    LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList);
    rules.add(loadBalancing);
  }
  if (!_networkMgr.applyRules(rules,false)) {
    s_logger.debug("LB rules are not completely applied");
    return false;
  }
  if (updateRulesInDB) {
    for (    LoadBalancerVO lb : lbs) {
      txn.start();
      if (lb.getState() == FirewallRule.State.Revoke) {
        _lbDao.remove(lb.getId());
        s_logger.warn("LB " + lb.getId() + " is successfully removed");
      }
 else       if (lb.getState() == FirewallRule.State.Add) {
        lb.setState(FirewallRule.State.Active);
        s_logger.warn("LB rule " + lb.getId() + " state is set to Active");
        _lbDao.persist(lb);
      }
      List<LoadBalancerVMMapVO> lbVmMaps=_lb2VmMapDao.listByLoadBalancerId(lb.getId(),true);
      List<Long> instanceIds=new ArrayList<Long>();
      for (      LoadBalancerVMMapVO lbVmMap : lbVmMaps) {
        instanceIds.add(lbVmMap.getInstanceId());
      }
      if (!instanceIds.isEmpty()) {
        _lb2VmMapDao.remove(lb.getId(),instanceIds,null);
        s_logger.debug("Load balancer rule id " + lb.getId() + " is removed for vms "+ instanceIds);
      }
      if (_lb2VmMapDao.listByLoadBalancerId(lb.getId()).isEmpty()) {
        lb.setState(FirewallRule.State.Add);
        _lbDao.persist(lb);
        s_logger.debug("LB rule " + lb.getId() + " state is set to Add as there are no more active LB-VM mappings");
      }
      List<LBStickinessPolicyVO> stickinesspolicies=_lb2stickinesspoliciesDao.listByLoadBalancerId(lb.getId(),true);
      if (!stickinesspolicies.isEmpty()) {
        _lb2stickinesspoliciesDao.remove(lb.getId(),true);
        s_logger.debug("Load balancer rule id " + lb.getId() + " is removed stickiness policies");
      }
      txn.commit();
    }
  }
  return true;
}
