{
  LoadBalancerVO lb=_lbDao.findById(loadBalancerId);
  Transaction txn=Transaction.currentTxn();
  boolean generateUsageEvent=false;
  boolean success=true;
  txn.start();
  if (lb.getState() == FirewallRule.State.Staged) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found a rule that is still in stage state so just removing it: " + lb);
    }
    generateUsageEvent=true;
  }
 else   if (lb.getState() == FirewallRule.State.Add || lb.getState() == FirewallRule.State.Active) {
    lb.setState(FirewallRule.State.Revoke);
    _lbDao.persist(lb);
    generateUsageEvent=true;
  }
  List<LoadBalancerVMMapVO> maps=_lb2VmMapDao.listByLoadBalancerId(loadBalancerId);
  if (maps != null) {
    for (    LoadBalancerVMMapVO map : maps) {
      map.setRevoke(true);
      _lb2VmMapDao.persist(map);
      s_logger.debug("Set load balancer rule for revoke: rule id " + loadBalancerId + ", vmId "+ map.getInstanceId());
    }
  }
  if (generateUsageEvent) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_DELETE,lb.getAccountId(),0,lb.getId(),null);
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  if (apply) {
    try {
      if (!applyLoadBalancerConfig(loadBalancerId)) {
        s_logger.warn("Unable to apply the load balancer config");
        return false;
      }
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
      return false;
    }
  }
  FirewallRuleVO relatedRule=_firewallDao.findByRelatedId(lb.getId());
  if (relatedRule != null) {
    s_logger.warn("Unable to remove firewall rule id=" + lb.getId() + " as it has related firewall rule id="+ relatedRule.getId()+ "; leaving it in Revoke state");
    success=false;
  }
 else {
    _firewallDao.remove(lb.getId());
  }
  _elbMgr.handleDeleteLoadBalancerRule(lb,callerUserId,caller);
  if (success) {
    Network guestNetwork=_networkMgr.getNetwork(lb.getNetworkId());
    NetworkOffering off=_configMgr.getNetworkOffering(guestNetwork.getNetworkOfferingId());
    if (off.getElasticLb()) {
      long rulesCount=_firewallDao.countRulesByIpId(lb.getSourceIpAddressId());
      if (rulesCount > 0) {
        s_logger.warn("Unable to release elastic ip address id=" + lb.getSourceIpAddressId() + " as it has "+ rulesCount+ " firewall rules");
        success=false;
      }
 else {
        if (!_networkMgr.releasePublicIpAddress(lb.getSourceIpAddressId(),UserContext.current().getCallerUserId(),caller)) {
          s_logger.warn("Unable to release elastic ip address id=" + lb.getSourceIpAddressId() + " as a part of delete lb rule");
          success=false;
        }
 else {
          s_logger.warn("Successfully released elastic ip address id=" + lb.getSourceIpAddressId() + " as a part of delete lb rule");
        }
      }
    }
  }
  if (success) {
    s_logger.debug("Load balancer with id " + lb.getId() + " is removed successfully");
  }
  return success;
}
