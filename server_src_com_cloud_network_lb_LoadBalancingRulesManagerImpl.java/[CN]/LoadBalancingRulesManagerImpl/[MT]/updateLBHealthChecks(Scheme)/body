{
  List<LoadBalancerVO> rules=_lbDao.listAll();
  List<NetworkVO> networks=_networkDao.listAll();
  List<LoadBalancerTO> stateRules=null;
  boolean isHandled=false;
  for (  NetworkVO ntwk : networks) {
    Network network=_networkDao.findById(ntwk.getId());
    String capability=getLBCapability(network.getId(),Capability.HealthCheckPolicy.getName());
    if (capability != null && capability.equalsIgnoreCase("true")) {
      rules=_lbDao.listByNetworkIdAndScheme(network.getId(),scheme);
      if (rules != null && rules.size() > 0) {
        List<LoadBalancingRule> lbrules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : rules) {
          List<LbDestination> dstList=getExistingDestinations(lb.getId());
          List<LbHealthCheckPolicy> hcPolicyList=getHealthCheckPolicies(lb.getId());
          if (hcPolicyList != null && hcPolicyList.size() > 0) {
            Ip sourceIp=getSourceIp(lb);
            LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,null,hcPolicyList,sourceIp,null,lb.getLbProtocol());
            lbrules.add(loadBalancing);
          }
        }
        if (lbrules.size() > 0) {
          isHandled=false;
          for (          LoadBalancingServiceProvider lbElement : _lbProviders) {
            stateRules=lbElement.updateHealthChecks(network,lbrules);
            if (stateRules != null && stateRules.size() > 0) {
              for (              LoadBalancerTO lbto : stateRules) {
                LoadBalancerVO ulb=_lbDao.findByUuid(lbto.getUuid());
                List<LoadBalancerVMMapVO> lbVmMaps=_lb2VmMapDao.listByLoadBalancerId(ulb.getId());
                for (                LoadBalancerVMMapVO lbVmMap : lbVmMaps) {
                  UserVm vm=_vmDao.findById(lbVmMap.getInstanceId());
                  Nic nic=_nicDao.findByInstanceIdAndNetworkIdIncludingRemoved(ulb.getNetworkId(),vm.getId());
                  String dstIp=lbVmMap.getInstanceIp() == null ? nic.getIPv4Address() : lbVmMap.getInstanceIp();
                  for (int i=0; i < lbto.getDestinations().length; i++) {
                    LoadBalancerTO.DestinationTO des=lbto.getDestinations()[i];
                    if (dstIp.equalsIgnoreCase(lbto.getDestinations()[i].getDestIp())) {
                      lbVmMap.setState(des.getMonitorState());
                      _lb2VmMapDao.persist(lbVmMap);
                      s_logger.debug("Updating the LB VM Map table with the service state");
                    }
                  }
                }
              }
              isHandled=true;
            }
            if (isHandled) {
              break;
            }
          }
        }
      }
    }
 else {
    }
  }
}
