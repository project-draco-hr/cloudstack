{
  Account caller=UserContext.current().getCaller();
  Long lbRuleId=cmd.getId();
  String name=cmd.getLoadBalancerName();
  String description=cmd.getDescription();
  String algorithm=cmd.getAlgorithm();
  LoadBalancerVO lb=_lbDao.findById(lbRuleId);
  LoadBalancerVO lbBackup=_lbDao.findById(lbRuleId);
  if (lb == null) {
    throw new InvalidParameterValueException("Unable to find lb rule by id=" + lbRuleId);
  }
  _accountMgr.checkAccess(caller,null,true,lb);
  if (name != null) {
    lb.setName(name);
  }
  if (description != null) {
    lb.setDescription(description);
  }
  if (algorithm != null) {
    lb.setAlgorithm(algorithm);
  }
  boolean success=_lbDao.update(lbRuleId,lb);
  if (algorithm != null) {
    try {
      lb.setState(FirewallRule.State.Add);
      _lbDao.persist(lb);
      applyLoadBalancerConfig(lbRuleId);
    }
 catch (    ResourceUnavailableException e) {
      if (isRollBackAllowedForProvider(lb)) {
        if (lbBackup.getName() != null) {
          lb.setName(lbBackup.getName());
        }
        if (lbBackup.getDescription() != null) {
          lb.setDescription(lbBackup.getDescription());
        }
        if (lbBackup.getAlgorithm() != null) {
          lb.setAlgorithm(lbBackup.getAlgorithm());
        }
        lb.setState(lbBackup.getState());
        _lbDao.update(lb.getId(),lb);
        _lbDao.persist(lb);
        s_logger.debug("LB Rollback rule id: " + lbRuleId + " while updating LB rule.");
      }
      s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
      success=false;
    }
  }
  if (!success) {
    throw new CloudRuntimeException("Failed to update load balancer rule: " + lbRuleId);
  }
  return lb;
}
