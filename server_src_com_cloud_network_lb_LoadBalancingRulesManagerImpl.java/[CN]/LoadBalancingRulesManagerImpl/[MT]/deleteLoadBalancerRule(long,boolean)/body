{
  UserContext caller=UserContext.current();
  LoadBalancerVO loadBalancerLock=null;
  LoadBalancerVO lb=_lbDao.findById(loadBalancerId);
  if (lb == null) {
    throw new InvalidParameterException("Invalid load balancer value: " + loadBalancerId);
  }
  _accountMgr.checkAccess(caller.getCaller(),lb);
  loadBalancerLock=_lbDao.acquireInLockTable(loadBalancerId);
  if (loadBalancerLock == null) {
    s_logger.warn("Failed to acquire lock to delete load balance rule id " + loadBalancerId);
    return false;
  }
  lb.setState(FirewallRule.State.Revoke);
  _lbDao.persist(lb);
  List<LoadBalancerVMMapVO> maps=_lb2VmMapDao.listByLoadBalancerId(loadBalancerId);
  if (maps != null) {
    for (    LoadBalancerVMMapVO map : maps) {
      map.setRevoke(true);
      _lb2VmMapDao.persist(map);
      s_logger.debug("Set load balancer rule for revoke: rule id " + loadBalancerId + ", vmId "+ map.getInstanceId());
    }
  }
  if (apply) {
    try {
      applyLoadBalancerConfig(loadBalancerId);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
      return false;
    }
 finally {
      if (loadBalancerLock != null)       _lbDao.releaseFromLockTable(loadBalancerId);
    }
  }
  _rulesDao.remove(lb.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_DELETE,lb.getAccountId(),0,lb.getId(),null);
  _usageEventDao.persist(usageEvent);
  s_logger.debug("Load balancer with id " + lb.getId() + " is removed successfully");
  return true;
}
