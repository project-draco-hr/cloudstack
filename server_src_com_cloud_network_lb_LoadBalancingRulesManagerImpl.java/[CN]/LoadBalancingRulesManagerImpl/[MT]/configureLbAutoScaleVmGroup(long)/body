{
  AutoScaleVmGroupVO vmGroup=_autoScaleVmGroupDao.findById(vmGroupid);
  boolean success=false;
  LoadBalancerVO loadBalancer=_lbDao.findById(vmGroup.getLoadBalancerId());
  FirewallRule.State backupState=loadBalancer.getState();
  if (vmGroup.getState().equals(AutoScaleVmGroup.State_New)) {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
  }
 else   if (loadBalancer.getState() == FirewallRule.State.Active && vmGroup.getState().equals(AutoScaleVmGroup.State_Revoke)) {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
  }
  try {
    LbAutoScaleVmGroup lbAutoScaleVmGroup=getLbAutoScaleVmGroup(vmGroup);
    LoadBalancingRule rule=new LoadBalancingRule(loadBalancer,null,null);
    rule.setAutoScaleVmGroup(lbAutoScaleVmGroup);
    success=applyAutoScaleConfig(loadBalancer,rule);
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to configure AutoScaleVmGroup to the lb rule: " + loadBalancer.getId() + " because resource is unavaliable:",e);
  }
 finally {
    if (!success) {
      s_logger.warn("Failed to configure LB Auto Scale Vm Group with Id:" + vmGroupid);
      if (isRollBackAllowedForProvider(loadBalancer)) {
        loadBalancer.setState(backupState);
        _lbDao.persist(loadBalancer);
        s_logger.debug("LB Rollback rule id: " + loadBalancer.getId() + " lb state rolback while creating AutoscaleVmGroup");
      }
    }
  }
  if (success) {
    if (vmGroup.getState().equals(AutoScaleVmGroup.State_New)) {
      Transaction.currentTxn().start();
      loadBalancer.setState(FirewallRule.State.Active);
      s_logger.debug("LB rule " + loadBalancer.getId() + " state is set to Active");
      _lbDao.persist(loadBalancer);
      vmGroup.setState(AutoScaleVmGroup.State_Enabled);
      _autoScaleVmGroupDao.persist(vmGroup);
      s_logger.debug("LB Auto Scale Vm Group with Id: " + vmGroupid + " is set to Enabled state.");
      Transaction.currentTxn().commit();
    }
    s_logger.info("Successfully configured LB Autoscale Vm Group with Id: " + vmGroupid);
  }
  return success;
}
