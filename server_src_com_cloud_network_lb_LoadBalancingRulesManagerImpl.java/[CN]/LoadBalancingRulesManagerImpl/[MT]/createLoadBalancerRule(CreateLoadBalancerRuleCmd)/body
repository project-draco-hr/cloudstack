{
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException("publicPort is an invalid value: " + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException("Public port range is an invalid value: " + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException("Public port range is an invalid value: " + srcPortStart + "-"+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException("privatePort is an invalid value: " + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException("privatePort is an invalid value: " + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException("private port range is invalid: " + defPortStart + "-"+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException("Invalid algorithm: " + lb.getAlgorithm());
  }
  Long ipId=lb.getSourceIpAddressId();
  if (ipId == null) {
    return _elbMgr.handleCreateLoadBalancerRule(lb,caller.getCaller());
  }
 else {
    return createLoadBalancer(lb);
  }
}
