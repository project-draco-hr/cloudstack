{
  UserContext caller=UserContext.current();
  Transaction txn=Transaction.currentTxn();
  LoadBalancerVO loadBalancer=_lbDao.findById(Long.valueOf(loadBalancerId));
  if (loadBalancer == null) {
    throw new InvalidParameterException("Invalid load balancer value: " + loadBalancerId);
  }
  _accountMgr.checkAccess(caller.getCaller(),loadBalancer);
  try {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
    for (    long instanceId : instanceIds) {
      LoadBalancerVMMapVO map=_lb2VmMapDao.findByLoadBalancerIdAndVmId(loadBalancerId,instanceId);
      map.setRevoke(true);
      _lb2VmMapDao.persist(map);
      s_logger.debug("Set load balancer rule for revoke: rule id " + loadBalancerId + ", vmId "+ instanceId);
    }
    if (applyLoadBalancerConfig(loadBalancerId)) {
      txn.start();
      _lb2VmMapDao.remove(loadBalancerId,instanceIds,null);
      s_logger.debug("Load balancer rule id " + loadBalancerId + " is removed for vms "+ instanceIds);
      if (_lb2VmMapDao.listByLoadBalancerId(loadBalancerId).isEmpty()) {
        loadBalancer.setState(FirewallRule.State.Add);
        _lbDao.persist(loadBalancer);
        s_logger.debug("LB rule " + loadBalancerId + " state is set to Add as there are no more active LB-VM mappings");
      }
      txn.commit();
    }
 else {
      s_logger.warn("Failed to remove load balancer rule id " + loadBalancerId + " for vms "+ instanceIds);
      throw new CloudRuntimeException("Failed to remove load balancer rule id " + loadBalancerId + " for vms "+ instanceIds);
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
    return false;
  }
  return true;
}
