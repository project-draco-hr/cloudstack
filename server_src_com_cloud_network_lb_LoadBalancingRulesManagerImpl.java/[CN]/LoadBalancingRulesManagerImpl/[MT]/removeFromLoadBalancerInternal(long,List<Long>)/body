{
  UserContext caller=UserContext.current();
  LoadBalancerVO loadBalancer=_lbDao.findById(Long.valueOf(loadBalancerId));
  if (loadBalancer == null) {
    throw new InvalidParameterException("Invalid load balancer value: " + loadBalancerId);
  }
  _accountMgr.checkAccess(caller.getCaller(),null,true,loadBalancer);
  boolean success=false;
  try {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
    for (    long instanceId : instanceIds) {
      LoadBalancerVMMapVO map=_lb2VmMapDao.findByLoadBalancerIdAndVmId(loadBalancerId,instanceId);
      map.setRevoke(true);
      _lb2VmMapDao.persist(map);
      s_logger.debug("Set load balancer rule for revoke: rule id " + loadBalancerId + ", vmId "+ instanceId);
    }
    if (!applyLoadBalancerConfig(loadBalancerId)) {
      s_logger.warn("Failed to remove load balancer rule id " + loadBalancerId + " for vms "+ instanceIds);
      throw new CloudRuntimeException("Failed to remove load balancer rule id " + loadBalancerId + " for vms "+ instanceIds);
    }
    success=true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
  }
  if (!success) {
    throw new CloudRuntimeException("Failed to remove load balancer rule id " + loadBalancerId + " for vms "+ instanceIds);
  }
  return success;
}
