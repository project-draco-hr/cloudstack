{
  Account lbOwner=_accountMgr.getAccount(lb.getEntityOwnerId());
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException("privatePort is an invalid value: " + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException("private port range is invalid: " + defPortStart + "-"+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException("Invalid algorithm: " + lb.getAlgorithm());
  }
  Long ipAddrId=lb.getSourceIpAddressId();
  IPAddressVO ipVO=null;
  if (ipAddrId != null) {
    ipVO=_ipAddressDao.findById(ipAddrId);
  }
  Network network=_networkModel.getNetwork(lb.getNetworkId());
  LoadBalancer result=null;
  if (result == null) {
    IpAddress systemIp=null;
    NetworkOffering off=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
    if (off.getElasticLb() && ipVO == null && network.getVpcId() == null) {
      systemIp=_networkMgr.assignSystemIp(lb.getNetworkId(),lbOwner,true,false);
      lb.setSourceIpAddressId(systemIp.getId());
      ipVO=_ipAddressDao.findById(systemIp.getId());
    }
    if (ipVO == null) {
      throw new InvalidParameterValueException("Unable to create load balance rule; can't find/allocate source IP");
    }
 else     if (ipVO.isOneToOneNat()) {
      throw new NetworkRuleConflictException("Can't do load balance on ip address: " + ipVO.getAddress());
    }
    boolean performedIpAssoc=false;
    try {
      if (ipVO.getAssociatedWithNetworkId() == null) {
        boolean assignToVpcNtwk=network.getVpcId() != null && ipVO.getVpcId() != null && ipVO.getVpcId().longValue() == network.getVpcId();
        if (assignToVpcNtwk) {
          _networkModel.checkIpForService(ipVO,Service.Lb,lb.getNetworkId());
          s_logger.debug("The ip is not associated with the VPC network id=" + lb.getNetworkId() + " so assigning");
          ipVO=_networkMgr.associateIPToGuestNetwork(ipAddrId,lb.getNetworkId(),false);
          performedIpAssoc=true;
        }
      }
 else {
        _networkModel.checkIpForService(ipVO,Service.Lb,null);
      }
      if (ipVO.getAssociatedWithNetworkId() == null) {
        throw new InvalidParameterValueException("Ip address " + ipVO + " is not assigned to the network "+ network);
      }
      if (lb.getSourceIpAddressId() == null) {
        throw new CloudRuntimeException("No ip address is defined to assign the LB to");
      }
      result=createLoadBalancer(lb,openFirewall);
    }
 catch (    Exception ex) {
      s_logger.warn("Failed to create load balancer due to ",ex);
      if (ex instanceof NetworkRuleConflictException) {
        throw (NetworkRuleConflictException)ex;
      }
    }
 finally {
      if (result == null && systemIp != null) {
        s_logger.debug("Releasing system IP address " + systemIp + " as corresponding lb rule failed to create");
        _networkMgr.handleSystemIpRelease(systemIp);
      }
      if (performedIpAssoc) {
        ipVO=_ipAddressDao.findById(ipVO.getId());
        _vpcMgr.unassignIPFromVpcNetwork(ipVO.getId(),lb.getNetworkId());
      }
    }
  }
  if (result == null) {
    throw new CloudRuntimeException("Failed to create load balancer rule: " + lb.getName());
  }
  return result;
}
