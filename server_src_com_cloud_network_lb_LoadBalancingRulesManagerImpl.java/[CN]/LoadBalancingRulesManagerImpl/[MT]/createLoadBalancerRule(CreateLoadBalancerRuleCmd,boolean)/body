{
  UserContext caller=UserContext.current();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException("privatePort is an invalid value: " + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException("private port range is invalid: " + defPortStart + "-"+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException("Invalid algorithm: " + lb.getAlgorithm());
  }
  Long ipAddrId=lb.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException("Unable to create load balance rule; ip id=" + ipAddrId + " doesn't exist in the system");
  }
 else   if (ipAddress.isOneToOneNat()) {
    throw new NetworkRuleConflictException("Can't do load balance on ip address: " + ipAddress.getAddress());
  }
  _networkMgr.checkIpForService(ipAddress,Service.Lb);
  LoadBalancer result=_elbMgr.handleCreateLoadBalancerRule(lb,caller.getCaller());
  if (result == null) {
    result=createLoadBalancer(lb,openFirewall);
  }
  if (result == null) {
    throw new CloudRuntimeException("Failed to create load balancer rule: " + lb.getName());
  }
  return result;
}
