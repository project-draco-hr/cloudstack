{
  CallContext caller=CallContext.current();
  LoadBalancerVO loadBalancer=_lbDao.findById(Long.valueOf(lbRuleId));
  if (loadBalancer == null) {
    throw new InvalidParameterException("Invalid load balancer id: " + lbRuleId);
  }
  SslCertVO certVO=_entityMgr.findById(SslCertVO.class,certId);
  if (certVO == null) {
    throw new InvalidParameterException("Invalid certificate id: " + certId);
  }
  _accountMgr.checkAccess(caller.getCallingAccount(),null,loadBalancer);
  if (loadBalancer.getAccountId() != certVO.getAccountId()) {
    throw new InvalidParameterValueException("Access denied for account " + certVO.getAccountId());
  }
  String capability=getLBCapability(loadBalancer.getNetworkId(),Capability.SslTermination.getName());
  if (capability == null) {
    throw new InvalidParameterValueException("Ssl termination not supported by the loadbalancer");
  }
  LoadBalancerCertMapVO certMapRule=_lbCertMapDao.findByLbRuleId(loadBalancer.getId());
  if (certMapRule != null)   throw new InvalidParameterValueException("Another certificate is already bound to the LB");
  if (loadBalancer.getLbProtocol() == null || !(loadBalancer.getLbProtocol().equals(NetUtils.SSL_PROTO)))   throw new InvalidParameterValueException("Bad LB protocol: Expected ssl got " + loadBalancer.getLbProtocol());
  boolean success=false;
  FirewallRule.State backupState=loadBalancer.getState();
  try {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
    LoadBalancerCertMapVO certMap=new LoadBalancerCertMapVO(lbRuleId,certId,false);
    _lbCertMapDao.persist(certMap);
    applyLoadBalancerConfig(loadBalancer.getId());
    success=true;
  }
 catch (  ResourceUnavailableException e) {
    if (isRollBackAllowedForProvider(loadBalancer)) {
      loadBalancer.setState(backupState);
      _lbDao.persist(loadBalancer);
      LoadBalancerCertMapVO certMap=_lbCertMapDao.findByLbRuleId(lbRuleId);
      _lbCertMapDao.remove(certMap.getId());
      s_logger.debug("LB Rollback rule id: " + loadBalancer.getId() + " while adding cert");
    }
    s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
  }
  return success;
}
