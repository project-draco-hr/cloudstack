{
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  LoadBalancerVO loadBalancer=_lbDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException("Failed to assign to load balancer " + loadBalancerId + ", the load balancer was not found.");
  }
  List<LoadBalancerVMMapVO> mappedInstances=_lb2VmMapDao.listByLoadBalancerId(loadBalancerId,false);
  Set<Long> mappedInstanceIds=new HashSet<Long>();
  for (  LoadBalancerVMMapVO mappedInstance : mappedInstances) {
    mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
  }
  List<UserVm> vmsToAdd=new ArrayList<UserVm>();
  for (  Long instanceId : instanceIds) {
    if (mappedInstanceIds.contains(instanceId)) {
      throw new InvalidParameterValueException("VM " + instanceId + " is already mapped to load balancer.");
    }
    UserVm vm=_vmDao.findById(instanceId);
    if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Invalid instance id specified");
      String tablename=AnnotationHelper.getTableName(vm);
      if (tablename != null) {
        ex.addProxyObject(tablename,instanceId,"instanceId");
      }
 else {
        s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
      }
      throw ex;
    }
    _rulesMgr.checkRuleAndUserVm(loadBalancer,vm,caller);
    if (vm.getAccountId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException("Cannot add virtual machines that do not belong to the same owner.");
    }
    List<? extends Nic> nics=_networkMgr.getNics(vm.getId());
    Nic nicInSameNetwork=null;
    for (    Nic nic : nics) {
      if (nic.getNetworkId() == loadBalancer.getNetworkId()) {
        nicInSameNetwork=nic;
        break;
      }
    }
    if (nicInSameNetwork == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException("VM " + instanceId + " cannot be added because it doesn't belong in the same network.");
      String tablename=AnnotationHelper.getTableName(vm);
      if (tablename != null) {
        ex.addProxyObject(tablename,instanceId,"instanceId");
      }
 else {
        s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
      }
      throw ex;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Adding " + vm + " to the load balancer pool");
    }
    vmsToAdd.add(vm);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  UserVm vm : vmsToAdd) {
    LoadBalancerVMMapVO map=new LoadBalancerVMMapVO(loadBalancer.getId(),vm.getId(),false);
    map=_lb2VmMapDao.persist(map);
  }
  txn.commit();
  boolean success=false;
  FirewallRule.State backupState=loadBalancer.getState();
  try {
    loadBalancer.setState(FirewallRule.State.Add);
    _lbDao.persist(loadBalancer);
    applyLoadBalancerConfig(loadBalancerId);
    success=true;
  }
 catch (  ResourceUnavailableException e) {
    if (isRollBackAllowedForProvider(loadBalancer)) {
      List<Long> vmInstanceIds=new ArrayList<Long>();
      txn=Transaction.currentTxn();
      txn.start();
      for (      UserVm vm : vmsToAdd) {
        vmInstanceIds.add(vm.getId());
      }
      txn.commit();
      if (!vmInstanceIds.isEmpty()) {
        _lb2VmMapDao.remove(loadBalancer.getId(),vmInstanceIds,null);
        s_logger.debug("LB Rollback rule id: " + loadBalancer.getId() + "  while attaching VM: "+ vmInstanceIds);
      }
      loadBalancer.setState(backupState);
      _lbDao.persist(loadBalancer);
    }
    s_logger.warn("Unable to apply the load balancer config because resource is unavaliable.",e);
  }
  if (!success) {
    CloudRuntimeException ex=new CloudRuntimeException("Failed to add specified loadbalancerruleid for vms " + instanceIds);
    String tablename=AnnotationHelper.getTableName(loadBalancer);
    if (tablename != null) {
      ex.addProxyObject(tablename,loadBalancerId,"loadBalancerId");
    }
 else {
      s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
    }
    throw ex;
  }
  return success;
}
