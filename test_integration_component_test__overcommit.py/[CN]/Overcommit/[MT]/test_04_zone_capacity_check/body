@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'], required_hardware='false')
def test_04_zone_capacity_check(self):
    'change cpu/mem.overprovisioning.factor at cluster level for\n           all cluster in a zone  and  verify capacity at zone level '
    list_cluster = Cluster.list(self.apiclient, zoneid=self.zone.id)
    self.assertEqual(validateList(list_cluster)[0], PASS, ('check list cluster response for zone id  %s' % self.zone.id))
    k = len(list_cluster)
    for id in xrange(k):
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='mem.overprovisioning.factor', value=1)
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='cpu.overprovisioning.factor', value=1)
    time.sleep(self.wait_time)
    capacity = Capacities.list(self.apiclient, zoneid=self.zone.id)
    self.assertEqual(validateList(capacity)[0], PASS, ('check list capacity response for zone id %s' % self.zone.id))
    (cpu, mem) = capacity_parser(capacity)
    for id in xrange(k):
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='mem.overprovisioning.factor', value=2)
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='cpu.overprovisioning.factor', value=2)
    time.sleep(self.wait_time)
    capacity1 = Capacities.list(self.apiclient, zoneid=self.zone.id)
    self.assertEqual(validateList(capacity1)[0], PASS, ('check list capacity for zone id %s' % self.zone.id))
    (cpu1, mem1) = capacity_parser(capacity1)
    self.assertEqual((2 * cpu[0]), cpu1[0], 'check total capacity ')
    self.assertEqual((2 * cpu[1]), cpu1[1], 'check capacity used')
    self.assertEqual(cpu[2], cpu1[2], 'check capacity % used')
    self.assertEqual((2 * mem[0]), mem1[0], 'check mem total capacity ')
    self.assertEqual((2 * mem[1]), mem1[1], 'check mem capacity used')
    self.assertEqual(mem[2], mem1[2], 'check mem capacity % used')
    for id in xrange(k):
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='mem.overprovisioning.factor', value=1)
        Configurations.update(self.apiclient, clusterid=list_cluster[id].id, name='cpu.overprovisioning.factor', value=1)
