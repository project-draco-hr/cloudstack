@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'], required_hardware='false')
def test_01_cluster_settings(self):
    'change cpu/mem.overprovisioning.factor at cluster level and\n         verify the change '
    listHost = Host.list(self.apiclient, id=self.deployVmResponse.hostid)
    self.assertEqual(validateList(listHost)[0], PASS, ('check list host response for host id %s' % self.deployVmResponse.hostid))
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=2)
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='cpu.overprovisioning.factor', value=3)
    list_cluster = Cluster.list(self.apiclient, id=listHost[0].clusterid)
    self.assertEqual(validateList(list_cluster)[0], PASS, ('check list cluster response for cluster id %s' % listHost[0].clusterid))
    self.assertEqual(int(list_cluster[0].cpuovercommitratio), 3, 'check the cpu overcommit value at cluster level ')
    self.assertEqual(int(list_cluster[0].memoryovercommitratio), 2, 'check memory overcommit value at cluster level')
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=1)
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='cpu.overprovisioning.factor', value=1)
    list_cluster1 = Cluster.list(self.apiclient, id=listHost[0].clusterid)
    self.assertEqual(validateList(list_cluster1)[0], PASS, ('check the list cluster response for id %s' % listHost[0].clusterid))
    self.assertEqual(int(list_cluster1[0].cpuovercommitratio), 1, 'check the cpu overcommit value at cluster level ')
    self.assertEqual(int(list_cluster1[0].memoryovercommitratio), 1, 'check memory overcommit value at cluster level')
