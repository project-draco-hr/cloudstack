@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'], required_hardware='true')
def test_02_Overcommit_factor(self):
    'change mem.overprovisioning.factor and verify vm memory '
    listHost = Host.list(self.apiclient, id=self.deployVmResponse.hostid)
    self.assertEqual(validateList(listHost)[0], PASS, ('check list host for host id %s' % self.deployVmResponse.hostid))
    if (listHost[0].hypervisor.lower() not in ['kvm', 'xenserver']):
        self.skipTest(('Skiping test because of not supported hypervisor type %s' % listHost[0].hypervisor))
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=1)
    self.deployVmResponse.stop(self.apiclient)
    self.deployVmResponse.start(self.apiclient)
    if (listHost[0].hypervisor.lower() == 'xenserver'):
        k = ssh_xen_host(self.testdata['configurableData']['password'], listHost[0].ipaddress, self.deployVmResponse.instancename)
    elif (listHost[0].hypervisor.lower() == 'kvm'):
        k = ssh_kvm_host(self.testdata['configurableData']['password'], listHost[0].ipaddress, self.deployVmResponse.instancename)
    self.assertEqual(k[0], k[1], 'Check static max ,min on host for overcommit 1 ')
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=2)
    self.deployVmResponse.stop(self.apiclient)
    self.deployVmResponse.start(self.apiclient)
    if (listHost[0].hypervisor.lower() == 'xenserver'):
        k1 = ssh_xen_host(self.testdata['configurableData']['password'], listHost[0].ipaddress, self.deployVmResponse.instancename)
    elif (listHost[0].hypervisor.lower() == 'kvm'):
        time.sleep(200)
        k1 = ssh_kvm_host(self.testdata['configurableData']['password'], listHost[0].ipaddress, self.deployVmResponse.instancename)
    self.assertEqual(k1[0], (2 * k1[1]), 'Check static max ,min on  host for overcommit 2')
