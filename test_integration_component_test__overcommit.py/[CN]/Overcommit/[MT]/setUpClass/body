@classmethod
def setUpClass(cls):
    testClient = super(Overcommit, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient)
    cls.testdata['mode'] = cls.zone.networktype
    cls.testdata['configurableData']['password'] = 'xenroot'
    cls.hypervisor = testClient.getHypervisorInfo()
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls.testdata['template']['ostypeid'] = cls.template.ostypeid
    list_conf = Configurations.list(cls.apiclient, name='capacity.check.period')
    cls.wait_time = (5 + (int(list_conf[0].value) / 1000))
    if (cls.template == FAILED):
        cls.fail(('get_template() failed to return template with description                 %s' % cls.testdata['ostype']))
    cls._cleanup = []
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offerings']['small'])
        cls._cleanup.append(cls.service_offering)
        cls.deployVmResponse = VirtualMachine.create(cls.apiclient, services=cls.testdata['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, templateid=cls.template.id, zoneid=cls.zone.id)
    except Exception as e:
        cls.tearDownClass()
        raise e
    return
