@attr(tags=['simulator', 'devcloud', 'basic', 'advanced'], required_hardware='false')
def test_03_cluste_capacity_check(self):
    'change cpu/mem.overprovisioning.factor at cluster level and\n           verify cluster capacity '
    listHost = Host.list(self.apiclient, id=self.deployVmResponse.hostid)
    self.assertEqual(validateList(listHost)[0], PASS, ('check list host for host id %s' % self.deployVmResponse.hostid))
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=1)
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='cpu.overprovisioning.factor', value=1)
    time.sleep(self.wait_time)
    capacity = Capacities.list(self.apiclient, clusterid=listHost[0].clusterid)
    self.assertEqual(validateList(capacity)[0], PASS, ('check list capacity response for cluster id %s' % listHost[0].clusterid))
    (cpu, mem) = capacity_parser(capacity)
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='mem.overprovisioning.factor', value=2)
    Configurations.update(self.apiclient, clusterid=listHost[0].clusterid, name='cpu.overprovisioning.factor', value=2)
    time.sleep(self.wait_time)
    capacity1 = Capacities.list(self.apiclient, clusterid=listHost[0].clusterid)
    self.assertEqual(validateList(capacity1)[0], PASS, ('check list capacity response for cluster id %s' % listHost[0].clusterid))
    (cpu1, mem1) = capacity_parser(capacity1)
    self.assertEqual((2 * cpu[0]), cpu1[0], 'check total capacity ')
    self.assertEqual((2 * cpu[1]), cpu1[1], 'check capacity used')
    self.assertEqual(cpu[2], cpu1[2], 'check capacity % used')
    self.assertEqual((2 * mem[0]), mem1[0], 'check mem total capacity ')
    self.assertEqual((2 * mem[1]), mem1[1], 'check mem capacity used')
    self.assertEqual(mem[2], mem1[2], 'check mem capacity % used')
