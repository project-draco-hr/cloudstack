def test_rebootvm(self):
    driver = self.driver
    self.driver.implicitly_wait(30)
    print 'Verify this test manually for now'
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(vmLifeAndNetwork.Server_Ip, username='root', password='password')
    print (((('\n' + '\n') + 'Before Reboot ...Executing command date ... ') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('date')
    print stdout.readlines()
    print (((('\n' + '\n') + 'Before Reboot ...Executing command last reboot | head -1 ...') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('last reboot | head -1')
    print (((('\n' + '\n') + 'Before Reboot ...Executing command uptime...') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('uptime')
    print stdout.readlines()
    ssh.close()
    driver.refresh()
    driver.find_element_by_xpath(Global_Locators.instances_xpath).click()
    linkclass = None
    linkclass = driver.find_elements_by_xpath(Global_Locators.instances_table_xpath)
    count = 1
    while (count > 0):
        for link in linkclass:
            if (link.text == 'Auto-VM'):
                print (('found VM in table ..  Rebooting now...' + '\n') + '\n')
                link.click()
    driver.find_element_by_css_selector(Global_Locators.rebootinstance_css).click()
    driver.find_element_by_xpath(Global_Locators.actionconfirm_xpath).click()
    time.sleep(300)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(vmLifeAndNetwork.Server_Ip, username='root', password='password')
    print (((('\n' + '\n') + 'After Reboot ...Executing command date ... ') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('date')
    print stdout.readlines()
    print (((('\n' + '\n') + 'After Reboot ...Executing command last reboot | head -1 ...') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('last reboot | head -1')
    print (((('\n' + '\n') + 'After Reboot ...Executing command uptime...') + '\n') + '\n')
    (stdin, stdout, stderr) = ssh.exec_command('uptime')
    print stdout.readlines()
    ssh.close()
