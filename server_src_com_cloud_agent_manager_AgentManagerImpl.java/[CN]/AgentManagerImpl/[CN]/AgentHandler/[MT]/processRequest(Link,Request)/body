{
  AgentAttache attache=(AgentAttache)link.attachment();
  final Command[] cmds=request.getCommands();
  Command cmd=cmds[0];
  boolean logD=true;
  Response response=null;
  if (attache == null) {
    request.logD("Processing the first command ");
    if (!(cmd instanceof StartupCommand)) {
      s_logger.warn("Throwing away a request because it came through as the first command on a connect: " + request);
      return;
    }
    StartupCommand startup=(StartupCommand)cmd;
    try {
      StartupCommand[] startups=new StartupCommand[cmds.length];
      for (int i=0; i < cmds.length; i++) {
        startups[i]=(StartupCommand)cmds[i];
      }
      attache=handleConnectedAgent(link,startups);
    }
 catch (    final IllegalArgumentException e) {
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,0,new Long(0),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect due to "+ e.getMessage(),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect with "+ request+ " because of "+ e.getMessage());
      s_logger.warn("Unable to create attache for agent: " + request,e);
      response=new Response(request,new StartupAnswer((StartupCommand)cmd,e.getMessage()),_nodeId,-1);
    }
catch (    ConnectionException e) {
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,0,new Long(0),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect due to "+ e.getMessage(),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect with "+ request+ " because of "+ e.getMessage());
      s_logger.warn("Unable to create attache for agent: " + request,e);
      response=new Response(request,new StartupAnswer((StartupCommand)cmd,e.getMessage()),_nodeId,-1);
    }
catch (    final CloudRuntimeException e) {
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,0,new Long(0),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect due to "+ e.getMessage(),"Agent from " + startup.getPrivateIpAddress() + " is unable to connect with "+ request+ " because of "+ e.getMessage());
      s_logger.warn("Unable to create attache for agent: " + request,e);
    }
    if (attache == null) {
      if (response == null) {
        s_logger.warn("Unable to create attache for agent: " + request);
        response=new Response(request,new StartupAnswer((StartupCommand)request.getCommand(),"Unable to register this agent"),_nodeId,-1);
      }
      try {
        link.send(response.toBytes(),true);
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn("Response was not sent: " + response);
      }
      return;
    }
  }
  final long hostId=attache.getId();
  if (s_logger.isDebugEnabled()) {
    if (cmd instanceof PingRoutingCommand) {
      final PingRoutingCommand ping=(PingRoutingCommand)cmd;
      if (ping.getNewStates().size() > 0) {
        s_logger.debug("SeqA " + hostId + "-"+ request.getSequence()+ ": Processing "+ request);
      }
 else {
        logD=false;
        s_logger.debug("Ping from " + hostId);
        s_logger.trace("SeqA " + hostId + "-"+ request.getSequence()+ ": Processing "+ request);
      }
    }
 else     if (cmd instanceof PingCommand) {
      logD=false;
      s_logger.debug("Ping from " + hostId);
      s_logger.trace("SeqA " + attache.getId() + "-"+ request.getSequence()+ ": Processing "+ request);
    }
 else {
      s_logger.debug("SeqA " + attache.getId() + "-"+ request.getSequence()+ ": Processing "+ request);
    }
  }
  final Answer[] answers=new Answer[cmds.length];
  for (int i=0; i < cmds.length; i++) {
    cmd=cmds[i];
    Answer answer=null;
    try {
      if (cmd instanceof StartupRoutingCommand) {
        final StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
        answer=new StartupAnswer(startup,attache.getId(),getPingInterval());
      }
 else       if (cmd instanceof StartupProxyCommand) {
        final StartupProxyCommand startup=(StartupProxyCommand)cmd;
        answer=new StartupAnswer(startup,attache.getId(),getPingInterval());
      }
 else       if (cmd instanceof StartupSecondaryStorageCommand) {
        final StartupSecondaryStorageCommand startup=(StartupSecondaryStorageCommand)cmd;
        answer=new StartupAnswer(startup,attache.getId(),getPingInterval());
      }
 else       if (cmd instanceof StartupStorageCommand) {
        final StartupStorageCommand startup=(StartupStorageCommand)cmd;
        answer=new StartupAnswer(startup,attache.getId(),getPingInterval());
      }
 else       if (cmd instanceof ShutdownCommand) {
        final ShutdownCommand shutdown=(ShutdownCommand)cmd;
        final String reason=shutdown.getReason();
        s_logger.info("Host " + attache.getId() + " has informed us that it is shutting down with reason "+ reason+ " and detail "+ shutdown.getDetail());
        if (reason.equals(ShutdownCommand.Update)) {
          disconnectWithoutInvestigation(attache,Event.UpdateNeeded);
        }
 else         if (reason.equals(ShutdownCommand.Requested)) {
          disconnectWithoutInvestigation(attache,Event.ShutdownRequested);
        }
        return;
      }
 else       if (cmd instanceof AgentControlCommand) {
        answer=handleControlCommand(attache,(AgentControlCommand)cmd);
      }
 else {
        handleCommands(attache,request.getSequence(),new Command[]{cmd});
        if (cmd instanceof PingCommand) {
          long cmdHostId=((PingCommand)cmd).getHostId();
          if (cmd instanceof PingRoutingCommand) {
            boolean gatewayAccessible=((PingRoutingCommand)cmd).isGatewayAccessible();
            HostVO host=_hostDao.findById(Long.valueOf(cmdHostId));
            if (!gatewayAccessible) {
              DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
              HostPodVO podVO=_podDao.findById(host.getPodId());
              String hostDesc="name: " + host.getName() + " (id:"+ host.getId()+ "), availability zone: "+ dcVO.getName()+ ", pod: "+ podVO.getName();
              _alertMgr.sendAlert(AlertManager.ALERT_TYPE_ROUTING,host.getDataCenterId(),host.getPodId(),"Host lost connection to gateway, " + hostDesc,"Host [" + hostDesc + "] lost connection to gateway (default route) and is possibly having network connection issues.");
            }
 else {
              _alertMgr.clearAlert(AlertManager.ALERT_TYPE_ROUTING,host.getDataCenterId(),host.getPodId());
            }
          }
          answer=new PingAnswer((PingCommand)cmd);
        }
 else         if (cmd instanceof ReadyAnswer) {
          HostVO host=_hostDao.findById(attache.getId());
          if (host == null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Cant not find host " + attache.getId());
            }
          }
          answer=new Answer(cmd);
        }
 else {
          answer=new Answer(cmd);
        }
      }
    }
 catch (    final Throwable th) {
      s_logger.warn("Caught: ",th);
      answer=new Answer(cmd,false,th.getMessage());
    }
    answers[i]=answer;
  }
  response=new Response(request,answers,_nodeId,attache.getId());
  if (s_logger.isDebugEnabled()) {
    if (logD) {
      s_logger.debug("SeqA " + attache.getId() + "-"+ response.getSequence()+ ": Sending "+ response);
    }
 else {
      s_logger.trace("SeqA " + attache.getId() + "-"+ response.getSequence()+ ": Sending "+ response);
    }
  }
  try {
    link.send(response.toBytes());
  }
 catch (  final ClosedChannelException e) {
    s_logger.warn("Unable to send response because connection is closed: " + response);
  }
}
