{
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException("Can't find zone by id " + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException("Can't find pod by id " + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException("Pod " + podId + " doesn't belong to the zone "+ dcId);
    }
  }
  if ((username == null) && (_hostDao.findSecondaryStorageHost(dcId) != null)) {
    throw new InvalidParameterValueException("A secondary storage host already exists in the specified zone");
  }
  if (clusterName != null && clusterId != null) {
    throw new InvalidParameterValueException("Can't specify cluster by both id and name");
  }
  if ((clusterName != null || clusterId != null) && podId == null) {
    throw new InvalidParameterValueException("Can't specify cluster without specifying the pod");
  }
  if (clusterId != null) {
    if (_clusterDao.findById(clusterId) == null) {
      throw new InvalidParameterValueException("Can't find cluster by id " + clusterId);
    }
  }
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException("Unable to create cluster " + clusterName + " in pod "+ podId+ " and data center "+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  try {
    uri=new URI(url);
    if (uri.getScheme() == null)     throw new InvalidParameterValueException("uri.scheme is null " + url + ", add nfs:// as a prefix");
 else     if (uri.getScheme().equalsIgnoreCase("nfs")) {
      if (uri.getHost() == null || uri.getHost().equalsIgnoreCase("") || uri.getPath() == null || uri.getPath().equalsIgnoreCase("")) {
        throw new InvalidParameterValueException("Your host and/or path is wrong.  Make sure it's of the format nfs://hostname/path");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + " is not a valid uri");
  }
  List<HostVO> hosts=new ArrayList<HostVO>();
  s_logger.info("Trying to add a new host at " + url + " in data center "+ dcId);
  Enumeration<Discoverer> en=_discoverers.enumeration();
  while (en.hasMoreElements()) {
    Discoverer discoverer=en.nextElement();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info("Exception in host discovery process with discoverer: " + discoverer.getName() + ", skip to another discoverer if there is any");
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        AgentAttache attache=simulateStart(resource,entry.getValue(),true);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info("server resources successfully discovered by " + discoverer.getName());
      return hosts;
    }
  }
  s_logger.warn("Unable to find the server resources at " + url);
  throw new DiscoveryException("Unable to add the host");
}
