{
  Transaction txn=Transaction.currentTxn();
  try {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Host: " + hostId + " does not even exist.  Delete call is ignored.");
      }
      return true;
    }
    if (host.getType() == Type.SecondaryStorage) {
      return deleteSecondaryStorageHost(host);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Delete Host: " + hostId + " Guid:"+ host.getGuid());
    }
    if (host.getType() == Type.Routing && host.getHypervisorType() == HypervisorType.XenServer) {
      if (host.getClusterId() != null) {
        List<HostVO> hosts=_hostDao.listBy(Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
        boolean success=true;
        for (        HostVO thost : hosts) {
          long thostId=thost.getId();
          if (thostId == hostId) {
            continue;
          }
          PoolEjectCommand eject=new PoolEjectCommand(host.getGuid());
          Answer answer=easySend(thostId,eject);
          if (answer != null && answer.getResult()) {
            s_logger.debug("Eject Host: " + hostId + " from "+ thostId+ " Succeed");
            success=true;
            break;
          }
 else {
            success=false;
            s_logger.debug("Eject Host: " + hostId + " from "+ thostId+ " failed due to "+ (answer != null ? answer.getDetails() : "no answer"));
          }
        }
        if (!success) {
          throw new CloudRuntimeException("Unable to delete host " + hostId + " due to unable to eject it from pool");
        }
      }
    }
    txn.start();
    _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
    AgentAttache attache=findAttache(hostId);
    if (attache != null) {
      handleDisconnect(attache,Status.Event.Remove,false);
    }
    _hostDetailsDao.deleteDetails(hostId);
    host.setGuid(null);
    Long clusterId=host.getClusterId();
    host.setClusterId(null);
    _hostDao.update(host.getId(),host);
    _hostDao.remove(hostId);
    if (clusterId != null) {
      List<HostVO> hosts=_hostDao.listByCluster(clusterId);
      if (hosts.size() == 0) {
        ClusterVO cluster=_clusterDao.findById(clusterId);
        cluster.setGuid(null);
        _clusterDao.update(clusterId,cluster);
      }
    }
    ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
    _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
    if (_storagePoolHostDao == null) {
      throw new ConfigurationException("Unable to get storage pool host dao: " + StoragePoolHostDao.class);
    }
    ArrayList<Long> pool_ids=_storagePoolHostDao.getPoolIds(hostId);
    _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
    for (    Long poolId : pool_ids) {
      StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
      if (storagePool.isLocal()) {
        storagePool.setUuid(null);
        storagePool.setClusterId(null);
        _storagePoolDao.update(poolId,storagePool);
        _storagePoolDao.remove(poolId);
      }
    }
    txn.commit();
    return true;
  }
 catch (  Throwable t) {
    s_logger.error("Unable to delete host: " + hostId,t);
    return false;
  }
}
