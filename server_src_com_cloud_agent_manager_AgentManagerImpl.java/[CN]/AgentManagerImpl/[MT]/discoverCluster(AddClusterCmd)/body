{
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException("Can't find zone by id " + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException("Can't find pod by id " + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException("Pod " + podId + " doesn't belong to the zone "+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException("Please specify cluster name");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException("Please specify a hypervisor");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.valueOf(cmd.getHypervisor());
  if (hypervisorType == null) {
    throw new InvalidParameterValueException("Please specify a valid hypervisor name");
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException("Please specify a valid hypervisor");
  }
  long clusterId=0;
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    cluster.setHypervisorType(cmd.getHypervisor());
    cluster.setClusterType(clusterType);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException("Unable to create cluster " + clusterName + " in pod "+ podId+ " and data center "+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    return _hostDao.listByCluster(clusterId);
  }
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException("uri.scheme is null " + url + ", add http:// as a prefix");
      }
 else       if (uri.getScheme().equalsIgnoreCase("http")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase("") || uri.getPath() == null || uri.getPath().equalsIgnoreCase("")) {
          throw new InvalidParameterValueException("Your host and/or path is wrong.  Make sure it's of the format http://hostname/path");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + " is not a valid uri");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info("Exception in external cluster discovery process with discoverer: " + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        AgentAttache attache=simulateStart(resource,entry.getValue(),true);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info("External cluster has been successfully discovered by " + discoverer.getName());
      success=true;
      return hosts;
    }
    s_logger.warn("Unable to find the server resources at " + url);
    throw new DiscoveryException("Unable to add the external cluster");
  }
  finally {
    if (!success) {
      _clusterDao.remove(clusterId);
    }
  }
}
