{
  boolean initialized=false;
  ServerResource resource=null;
  try {
    String resourceName=host.getResource();
    try {
      Class<?> clazz=Class.forName(resourceName);
      Constructor constructor=clazz.getConstructor();
      resource=(ServerResource)constructor.newInstance();
    }
 catch (    ClassNotFoundException e) {
      s_logger.warn("Unable to find class " + host.getResource(),e);
      return false;
    }
catch (    InstantiationException e) {
      s_logger.warn("Unablet to instantiate class " + host.getResource(),e);
      return false;
    }
catch (    IllegalAccessException e) {
      s_logger.warn("Illegal access " + host.getResource(),e);
      return false;
    }
catch (    SecurityException e) {
      s_logger.warn("Security error on " + host.getResource(),e);
      return false;
    }
catch (    NoSuchMethodException e) {
      s_logger.warn("NoSuchMethodException error on " + host.getResource(),e);
      return false;
    }
catch (    IllegalArgumentException e) {
      s_logger.warn("IllegalArgumentException error on " + host.getResource(),e);
      return false;
    }
catch (    InvocationTargetException e) {
      s_logger.warn("InvocationTargetException error on " + host.getResource(),e);
      return false;
    }
    _hostDao.loadDetails(host);
    HashMap<String,Object> params=new HashMap<String,Object>(host.getDetails().size() + 5);
    params.putAll(host.getDetails());
    params.put("guid",host.getGuid());
    params.put("zone",Long.toString(host.getDataCenterId()));
    if (host.getPodId() != null) {
      params.put("pod",Long.toString(host.getPodId()));
    }
    if (host.getClusterId() != null) {
      params.put("cluster",Long.toString(host.getClusterId()));
      String guid=null;
      ClusterVO cluster=_clusterDao.findById(host.getClusterId());
      if (cluster.getGuid() == null) {
        guid=host.getDetail("pool");
      }
 else {
        guid=cluster.getGuid();
      }
      if (guid != null && !guid.isEmpty()) {
        params.put("pool",guid);
      }
    }
    params.put("ipaddress",host.getPrivateIpAddress());
    params.put("secondary.storage.vm","false");
    params.put("max.template.iso.size",_configDao.getValue(Config.MaxTemplateAndIsoSize.toString()));
    params.put("migratewait",_configDao.getValue(Config.MigrateWait.toString()));
    try {
      resource.configure(host.getName(),params);
    }
 catch (    ConfigurationException e) {
      s_logger.warn("Unable to configure resource due to ",e);
      return false;
    }
    if (!resource.start()) {
      s_logger.warn("Unable to start the resource");
      return false;
    }
    initialized=true;
  }
  finally {
    if (!initialized) {
      if (host != null) {
        agentStatusTransitTo(host,Event.AgentDisconnected,_nodeId);
      }
    }
  }
  if (forRebalance) {
    Host h=_resourceMgr.createHostAndAgent(host.getId(),resource,host.getDetails(),false,null,null,true);
    return (h == null ? false : true);
  }
 else {
    _executor.execute(new SimulateStartTask(host.getId(),resource,host.getDetails(),null));
    return true;
  }
}
