@attr(tags=['advanced'], required_hardware='false')
def test_03_deploy_vm_project_limit_reached(self):
    'Test TTry to deploy VM with admin account where account has not used\n        the resources but @ project they are not available\n\n        # Validate the following\n        # 1. Try to register template with admin account where account has not used the\n        #    resources but @ project they are not available\n        # 2. Template registration should error out saying  ResourceAllocationException\n        #    with "resource limit exceeds'
    response = self.setupAccounts()
    self.assertEqual(response[0], PASS, response[1])
    response = self.registerTemplate(inProject=True)
    self.assertEqual(response[0], PASS, response[1])
    try:
        projects = Project.list(self.apiclient, id=self.project.id, listall=True)
    except Exception as e:
        self.fail(('failed to get projects list: %s' % e))
    self.assertEqual(validateList(projects)[0], PASS, 'projects list validation failed')
    self.assertEqual(self.templateSize, projects[0].secondarystoragetotal, ('Resource count %s                 not matching with the expcted count: %s' % (projects[0].secondarystoragetotal, self.templateSize)))
    projectLimit = self.templateSize
    response = self.updateSecondaryStorageLimits(projectLimit=projectLimit)
    self.assertEqual(response[0], PASS, response[1])
    with self.assertRaises(Exception):
        template = Template.register(self.apiclient, self.services['template_2'], zoneid=self.zone.id, projectid=self.project.id)
    return
