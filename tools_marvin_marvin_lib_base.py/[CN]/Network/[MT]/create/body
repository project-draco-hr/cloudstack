@classmethod
def create(cls, apiclient, services, accountid=None, domainid=None, networkofferingid=None, projectid=None, subdomainaccess=None, zoneid=None, gateway=None, netmask=None, vpcid=None, aclid=None, vlan=None):
    'Create Network for account'
    cmd = createNetwork.createNetworkCmd()
    cmd.name = services['name']
    cmd.displaytext = services['displaytext']
    if networkofferingid:
        cmd.networkofferingid = networkofferingid
    elif ('networkoffering' in services):
        cmd.networkofferingid = services['networkoffering']
    if zoneid:
        cmd.zoneid = zoneid
    elif ('zoneid' in services):
        cmd.zoneid = services['zoneid']
    if (subdomainaccess is not None):
        cmd.subdomainaccess = subdomainaccess
    if gateway:
        cmd.gateway = gateway
    elif ('gateway' in services):
        cmd.gateway = services['gateway']
    if netmask:
        cmd.netmask = netmask
    elif ('netmask' in services):
        cmd.netmask = services['netmask']
    if ('startip' in services):
        cmd.startip = services['startip']
    if ('endip' in services):
        cmd.endip = services['endip']
    if vlan:
        cmd.vlan = vlan
    elif ('vlan' in services):
        cmd.vlan = services['vlan']
    if ('acltype' in services):
        cmd.acltype = services['acltype']
    if accountid:
        cmd.account = accountid
    if domainid:
        cmd.domainid = domainid
    if projectid:
        cmd.projectid = projectid
    if vpcid:
        cmd.vpcid = vpcid
    if aclid:
        cmd.aclid = aclid
    return Network(apiclient.createNetwork(cmd).__dict__)
