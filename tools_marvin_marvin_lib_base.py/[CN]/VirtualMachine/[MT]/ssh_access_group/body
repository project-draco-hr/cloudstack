@classmethod
def ssh_access_group(cls, apiclient, cmd):
    '\n        Programs the security group with SSH access before deploying virtualmachine\n        @return:\n        '
    zone_list = Zone.list(apiclient, id=(cmd.zoneid if cmd.zoneid else None), domainid=(cmd.domainid if cmd.domainid else None))
    zone = zone_list[0]
    if zone.securitygroupsenabled:
        list_security_groups = SecurityGroup.list(apiclient, account=cmd.account, domainid=cmd.domainid, listall=True, securitygroupname='basic_sec_grp')
        if (not isinstance(list_security_groups, list)):
            basic_mode_security_group = SecurityGroup.create(apiclient, {'name': 'basic_sec_grp', }, cmd.account, cmd.domainid)
            sec_grp_services = {'protocol': 'TCP', 'startport': 22, 'endport': 22, 'cidrlist': '0.0.0.0/0', }
            basic_mode_security_group.authorize(apiclient, sec_grp_services, account=cmd.account, domainid=cmd.domainid)
        else:
            basic_mode_security_group = list_security_groups[0]
        if isinstance(cmd.securitygroupids, list):
            cmd.securitygroupids.append(basic_mode_security_group.id)
        else:
            cmd.securitygroupids = [basic_mode_security_group.id]
