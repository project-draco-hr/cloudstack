@classmethod
def create(cls, apiclient, services, domainid=None, **kwargs):
    'Create Service offering'
    cmd = createServiceOffering.createServiceOfferingCmd()
    cmd.cpunumber = services['cpunumber']
    cmd.cpuspeed = services['cpuspeed']
    cmd.displaytext = services['displaytext']
    cmd.memory = services['memory']
    cmd.name = services['name']
    if ('storagetype' in services):
        cmd.storagetype = services['storagetype']
    if ('systemvmtype' in services):
        cmd.systemvmtype = services['systemvmtype']
    if ('issystem' in services):
        cmd.issystem = services['issystem']
    if ('tags' in services):
        cmd.tags = services['tags']
    if ('hosttags' in services):
        cmd.hosttags = services['hosttags']
    if ('deploymentplanner' in services):
        cmd.deploymentplanner = services['deploymentplanner']
    if ('serviceofferingdetails' in services):
        count = 1
        for i in services['serviceofferingdetails']:
            for (key, value) in i.items():
                setattr(cmd, ('serviceofferingdetails[%d].key' % count), key)
                setattr(cmd, ('serviceofferingdetails[%d].value' % count), value)
            count = (count + 1)
    if ('isvolatile' in services):
        cmd.isvolatile = services['isvolatile']
    if ('miniops' in services):
        cmd.miniops = services['miniops']
    if ('maxiops' in services):
        cmd.maxiops = services['maxiops']
    if ('customizediops' in services):
        cmd.customizediops = services['customizediops']
    if ('offerha' in services):
        cmd.offerha = services['offerha']
    if domainid:
        cmd.domainid = domainid
    [setattr(cmd, k, v) for (k, v) in kwargs.items()]
    return ServiceOffering(apiclient.createServiceOffering(cmd).__dict__)
