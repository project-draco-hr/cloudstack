@classmethod
def getState(cls, apiclient, poolid, state, timeout=600):
    'List StoragePools and check if its  state is as expected\n        @returnValue - List[Result, Reason]\n                       1) Result - FAIL if there is any exception\n                       in the operation or pool state does not change\n                       to expected state in given time else PASS\n                       2) Reason - Reason for failure'
    returnValue = [FAIL, ('VM state not trasited to %s,                        operation timed out' % state)]
    while (timeout > 0):
        try:
            pools = StoragePool.list(apiclient, id=poolid, listAll=True)
            validationresult = validateList(pools)
            if (validationresult[0] == FAIL):
                raise Exception(('Pool list validation failed: %s' % validationresult[2]))
            elif (str(pools[0].state).lower().decode('string_escape') == str(state).lower()):
                returnValue = [PASS, None]
                break
        except Exception as e:
            returnValue = [FAIL, e]
            break
        time.sleep(60)
        timeout -= 60
    return returnValue
