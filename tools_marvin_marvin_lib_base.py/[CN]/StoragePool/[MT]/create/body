@classmethod
def create(cls, apiclient, services, scope=None, clusterid=None, zoneid=None, podid=None, provider=None, tags=None, capacityiops=None, capacitybytes=None, hypervisor=None):
    'Create Storage pool (Primary Storage)'
    cmd = createStoragePool.createStoragePoolCmd()
    cmd.name = services['name']
    if podid:
        cmd.podid = podid
    elif ('podid' in services):
        cmd.podid = services['podid']
    cmd.url = services['url']
    if clusterid:
        cmd.clusterid = clusterid
    elif ('clusterid' in services):
        cmd.clusterid = services['clusterid']
    if zoneid:
        cmd.zoneid = zoneid
    else:
        cmd.zoneid = services['zoneid']
    if scope:
        cmd.scope = scope
    elif ('scope' in services):
        cmd.scope = services['scope']
    if provider:
        cmd.provider = provider
    elif ('provider' in services):
        cmd.provider = services['provider']
    if tags:
        cmd.tags = tags
    elif ('tags' in services):
        cmd.tags = services['tags']
    if capacityiops:
        cmd.capacityiops = capacityiops
    elif ('capacityiops' in services):
        cmd.capacityiops = services['capacityiops']
    if capacitybytes:
        cmd.capacitybytes = capacitybytes
    elif ('capacitybytes' in services):
        cmd.capacitybytes = services['capacitybytes']
    if hypervisor:
        cmd.hypervisor = hypervisor
    elif ('hypervisor' in services):
        cmd.hypervisor = services['hypervisor']
    return StoragePool(apiclient.createStoragePool(cmd).__dict__)
