@classmethod
def create_from_snapshot(cls, apiclient, snapshot, services, random_name=True):
    'Create Template from snapshot'
    cmd = createTemplate.createTemplateCmd()
    cmd.displaytext = services['displaytext']
    cmd.name = ('-'.join([services['name'], random_gen()]) if random_name else services['name'])
    if ('ispublic' in services):
        cmd.ispublic = services['ispublic']
    if ('ostypeid' in services):
        cmd.ostypeid = services['ostypeid']
    elif ('ostype' in services):
        sub_cmd = listOsTypes.listOsTypesCmd()
        sub_cmd.description = services['ostype']
        ostypes = apiclient.listOsTypes(sub_cmd)
        if (not isinstance(ostypes, list)):
            raise Exception(('Unable to find Ostype id with desc: %s' % services['ostype']))
        cmd.ostypeid = ostypes[0].id
    else:
        raise Exception('Unable to find Ostype is required for creating template')
    cmd.snapshotid = snapshot.id
    return Template(apiclient.createTemplate(cmd).__dict__)
