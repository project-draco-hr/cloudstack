@classmethod
def create(cls, apiclient, cluster, services, zoneid=None, podid=None, hypervisor=None):
    '\n        1. Creates the host based upon the information provided.\n        2. Verifies the output of the adding host and its state post addition\n           Returns FAILED in case of an issue, else an instance of Host\n        '
    try:
        cmd = addHost.addHostCmd()
        cmd.hypervisor = hypervisor
        cmd.url = services['url']
        cmd.clusterid = cluster.id
        if zoneid:
            cmd.zoneid = zoneid
        else:
            cmd.zoneid = services['zoneid']
        if podid:
            cmd.podid = podid
        else:
            cmd.podid = services['podid']
        if ('clustertype' in services):
            cmd.clustertype = services['clustertype']
        if ('username' in services):
            cmd.username = services['username']
        if ('password' in services):
            cmd.password = services['password']
        '\n            Adds a Host,\n            If response is valid and host is up return\n            an instance of Host.\n            If response is invalid, returns FAILED.\n            If host state is not up, verify through listHosts call\n            till host status is up and return accordingly. Max 3 retries\n            '
        host = apiclient.addHost(cmd)
        ret = validateList(host)
        if (ret[0] == PASS):
            if (str(host[0].state).lower() == 'up'):
                return Host(host[0].__dict__)
            retries = 3
            while retries:
                lh_resp = apiclient.listHosts(host[0].id)
                ret = validateList(lh_resp)
                if ((ret[0] == PASS) and (str(ret[1].state).lower() == 'up')):
                    return Host(host[0].__dict__)
                retries += (-1)
        return FAILED
    except Exception as e:
        print ('Exception Occurred Under Host.create : %s' % GetDetailExceptionInfo(e))
        return FAILED
