{
  try {
    Socket socket=serverSocket.accept();
    InputStream is=socket.getInputStream();
    OutputStream os=socket.getOutputStream();
    try {
      for (int i=0; i < packets.length && !shutdown; i++) {
        Packet packet=packets[i];
switch (packet.type) {
case CLIENT:
{
            byte actualData[]=new byte[packet.data.length];
            int actualDataLength=is.read(actualData);
            if (verbose)             System.out.println("[" + this + "] INFO: Data is read: {"+ Arrays.toString(Arrays.copyOf(actualData,actualDataLength))+ "}.");
            if (!packet.ignore) {
              if (actualDataLength != packet.data.length) {
                throw new AssertionError("Actual length of client request for packet #" + (i + 1) + " (\""+ packet.id+ "\")"+ " does not match length of expected client request. Actual length: "+ actualDataLength+ ", expected legnth: "+ packet.data.length+ ".");
              }
              for (int j=0; j < packet.data.length; j++) {
                if (packet.data[j] != actualData[j]) {
                  throw new AssertionError("Actual byte #" + (j + 1) + " of client request for packet #"+ (i + 1)+ " (\""+ packet.id+ "\")"+ " does not match corresponding byte of expected client request. Actual byte: "+ actualData[j]+ ", expected byte: "+ packet.data[j]+ ".");
                }
              }
            }
            break;
          }
case SERVER:
{
          os.write(packet.data);
          if (verbose)           System.out.println("[" + this + "] INFO: Data is written: {"+ Arrays.toString(packet.data)+ "}.");
          break;
        }
case UPGRADE_TO_SSL:
{
        final SSLSocketFactory sslSocketFactory=(SSLSocketFactory)SSLSocketFactory.getDefault();
        SSLSocket sslSocket=(SSLSocket)sslSocketFactory.createSocket(socket,null,serverSocket.getLocalPort(),true);
        sslSocket.setEnabledCipherSuites(sslSocket.getSupportedCipherSuites());
        sslSocket.setUseClientMode(false);
        sslSocket.startHandshake();
        is=sslSocket.getInputStream();
        os=sslSocket.getOutputStream();
        break;
      }
default :
    throw new RuntimeException("Unknown packet type: " + packet.type);
}
}
}
  finally {
try {
is.close();
}
 catch (Throwable e) {
}
try {
os.close();
}
 catch (Throwable e) {
}
try {
socket.close();
}
 catch (Throwable e) {
}
try {
serverSocket.close();
}
 catch (Throwable e) {
}
}
}
 catch (Throwable e) {
System.err.println("Error in mock server: " + e.getMessage());
e.printStackTrace(System.err);
exception=e;
}
shutdowned=true;
if (verbose) System.out.println("[" + this + "] INFO: Mock server shutdowned.");
}
