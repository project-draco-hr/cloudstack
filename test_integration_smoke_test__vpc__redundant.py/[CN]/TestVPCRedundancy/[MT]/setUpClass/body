@classmethod
def setUpClass(cls):
    socket.setdefaulttimeout(60)
    cls.testClient = super(TestVPCRedundancy, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.template = Template.register(cls.api_client, cls.services['template'][cls.hypervisor.lower()], cls.zone.id, hypervisor=cls.hypervisor.lower(), domainid=cls.domain.id)
    cls.template.download(cls.api_client)
    if (cls.template == FAILED):
        assert False, 'get_template() failed to return template'
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls._cleanup = [cls.service_offering, cls.template]
    cls.logger = logging.getLogger('TestVPCRedundancy')
    cls.stream_handler = logging.StreamHandler()
    cls.logger.setLevel(logging.DEBUG)
    cls.logger.addHandler(cls.stream_handler)
    return
