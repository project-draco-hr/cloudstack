{
  checkCharacterInkParams(params);
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get("command");
    if (command == null) {
      s_logger.error("invalid request, no command sent");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("dumping request parameters");
        for (        final Object key : params.keySet()) {
          final String keyStr=(String)key;
          final String[] value=(String[])params.get(key);
          s_logger.trace("   key: " + keyStr + ", value: "+ ((value == null) ? "'null'" : value[0]));
        }
      }
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,"Invalid request, no command sent");
    }
 else {
      if (_authManager.getAPIAuthenticator(command[0]) != null) {
        return null;
      }
      final Map<String,String> paramMap=new HashMap<String,String>();
      final Set keys=params.keySet();
      final Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        final String key=(String)keysIter.next();
        if ("command".equalsIgnoreCase(key)) {
          continue;
        }
        final String[] value=(String[])params.get(key);
        paramMap.put(key,value[0]);
      }
      Class<?> cmdClass=getCmdClass(command[0]);
      if (cmdClass != null) {
        APICommand annotation=cmdClass.getAnnotation(APICommand.class);
        if (annotation == null) {
          s_logger.error("No APICommand annotation found for class " + cmdClass.getCanonicalName());
          throw new CloudRuntimeException("No APICommand annotation found for class " + cmdClass.getCanonicalName());
        }
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj=ComponentContext.inject(cmdObj);
        cmdObj.configure();
        cmdObj.setFullUrlParams(paramMap);
        cmdObj.setResponseType(responseType);
        cmdObj.setHttpMethod(paramMap.get(ApiConstants.HTTPMETHOD).toString());
        response=queueCommand(cmdObj,paramMap);
        if (annotation.responseHasSensitiveInfo()) {
          buildAuditTrail(auditTrailSb,command[0],StringUtils.cleanString(response));
        }
 else         buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        final String errorString="Unknown API command: " + command[0];
        s_logger.warn(errorString);
        auditTrailSb.append(" " + errorString);
        throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,errorString);
      }
    }
  }
 catch (  final InvalidParameterValueException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  final IllegalArgumentException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  final PermissionDeniedException ex) {
    final ArrayList<ExceptionProxyObject> idList=ex.getIdProxyList();
    if (idList != null) {
      final StringBuffer buf=new StringBuffer();
      for (      final ExceptionProxyObject obj : idList) {
        buf.append(obj.getDescription());
        buf.append(":");
        buf.append(obj.getUuid());
        buf.append(" ");
      }
      s_logger.info("PermissionDenied: " + ex.getMessage() + " on objs: ["+ buf.toString()+ "]");
    }
 else {
      s_logger.info("PermissionDenied: " + ex.getMessage());
    }
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,ex.getMessage(),ex);
  }
catch (  final AccountLimitException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.ACCOUNT_RESOURCE_LIMIT_ERROR,ex.getMessage(),ex);
  }
catch (  final InsufficientCapacityException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (!_accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,errorMsg,ex);
  }
catch (  final ResourceAllocationException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR,ex.getMessage(),ex);
  }
catch (  final ResourceUnavailableException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (!_accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,errorMsg,ex);
  }
catch (  final ServerApiException ex) {
    s_logger.info(ex.getDescription());
    throw ex;
  }
catch (  final Exception ex) {
    s_logger.error("unhandled exception executing api command: " + ((command == null) ? "null" : command),ex);
    String errorMsg=ex.getMessage();
    if (!_accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg,ex);
  }
  return response;
}
