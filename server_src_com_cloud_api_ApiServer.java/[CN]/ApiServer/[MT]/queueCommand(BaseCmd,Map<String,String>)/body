{
  final CallContext ctx=CallContext.current();
  final Long callerUserId=ctx.getCallingUserId();
  final Account caller=ctx.getCallingAccount();
  String vmUUID=params.get(ApiConstants.VIRTUAL_MACHINE_ID);
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectUuid=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      final BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectUuid=createCmd.getEntityUuid();
      params.put("id",objectId.toString());
    }
 else {
      objectUuid=params.get(ApiConstants.ID);
      dispatchChainFactory.getStandardDispatchChain().dispatch(new DispatchTask(cmdObj,params));
    }
    final BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put("ctxUserId",callerUserId.toString());
    }
    if (caller != null) {
      params.put("ctxAccountId",String.valueOf(caller.getId()));
    }
    if (objectUuid != null) {
      params.put("uuid",objectUuid);
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    if (EventTypes.getEntityForEvent(asyncCmd.getEventType()) != null) {
      ctx.putContextParameter(EventTypes.getEntityForEvent(asyncCmd.getEventType()),objectUuid);
    }
    if (vmUUID != null) {
      ctx.putContextParameter(ReflectUtil.getEntityName(VirtualMachine.class),vmUUID);
    }
    final Long eventId=ActionEventUtils.onScheduledActionEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),asyncCmd.isDisplayResourceEnabled(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put("ctxStartEventId",String.valueOf(startEventId));
    params.put("cmdEventType",asyncCmd.getEventType().toString());
    Long instanceId=(objectId == null) ? asyncCmd.getInstanceId() : objectId;
    AsyncJobVO job=new AsyncJobVO("",callerUserId,caller.getId(),cmdObj.getClass().getName(),ApiGsonHelper.getBuilder().create().toJson(params),instanceId,asyncCmd.getInstanceType() != null ? asyncCmd.getInstanceType().toString() : null);
    job.setDispatcher(_asyncDispatcher.getName());
    final long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      final String errorMsg="Unable to schedule async job for command " + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      final String objUuid=(objectUuid == null) ? objectId.toString() : objectUuid;
      return getBaseAsyncCreateResponse(jobId,(BaseAsyncCreateCmd)asyncCmd,objUuid);
    }
 else {
      SerializationContext.current().setUuidTranslation(true);
      return getBaseAsyncResponse(jobId,asyncCmd);
    }
  }
 else {
    _dispatcher.dispatch(cmdObj,params,false);
    if (cmdObj instanceof BaseListCmd && !(cmdObj instanceof ListVMsCmd) && !(cmdObj instanceof ListRoutersCmd)&& !(cmdObj instanceof ListSecurityGroupsCmd)&& !(cmdObj instanceof ListTagsCmd)&& !(cmdObj instanceof ListEventsCmd)&& !(cmdObj instanceof ListVMGroupsCmd)&& !(cmdObj instanceof ListProjectsCmd)&& !(cmdObj instanceof ListProjectAccountsCmd)&& !(cmdObj instanceof ListProjectInvitationsCmd)&& !(cmdObj instanceof ListHostsCmd)&& !(cmdObj instanceof ListVolumesCmd)&& !(cmdObj instanceof ListUsersCmd)&& !(cmdObj instanceof ListAccountsCmd)&& !(cmdObj instanceof ListStoragePoolsCmd)&& !(cmdObj instanceof ListDiskOfferingsCmd)&& !(cmdObj instanceof ListServiceOfferingsCmd)&& !(cmdObj instanceof ListZonesByCmd)) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}
