{
  UserContext ctx=UserContext.current();
  Long userId=ctx.getCallerUserId();
  Account account=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      params.put("id",objectId.toString());
    }
 else {
      ApiDispatcher.setupParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (userId != null) {
      params.put("ctxUserId",userId.toString());
    }
    if (account != null) {
      params.put("ctxAccountId",String.valueOf(account.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((userId == null) ? User.UID_SYSTEM : userId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put("ctxStartEventId",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    AsyncJobVO job=new AsyncJobVO();
    job.setInstanceId((objectId == null) ? asyncCmd.getInstanceId() : objectId);
    job.setInstanceType(asyncCmd.getInstanceType());
    job.setUserId(userId);
    job.setAccountId(asyncCmd.getEntityOwnerId());
    job.setCmd(cmdObj.getClass().getName());
    job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg="Unable to schedule async job for command " + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objectId);
    }
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd) {
      validatePageSize((BaseListCmd)cmdObj);
      buildAsyncListResponse((BaseListCmd)cmdObj,account);
    }
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}
