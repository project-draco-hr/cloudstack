{
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get("command");
    if (command == null) {
      s_logger.error("invalid request, no command sent");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("dumping request parameters");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace("   key: " + keyStr + ", value: "+ ((value == null) ? "'null'" : value[0]));
        }
      }
      throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,"Invalid request, no command sent");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if ("command".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        String decodedValue=null;
        if (decode) {
          try {
            decodedValue=URLDecoder.decode(value[0],"UTF-8");
          }
 catch (          UnsupportedEncodingException usex) {
            s_logger.warn(key + " could not be decoded, value = " + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + " could not be decoded, received value " + value[0]);
          }
catch (          IllegalArgumentException iae) {
            s_logger.warn(key + " could not be decoded, value = " + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + " could not be decoded, received value " + value[0]+ " which contains illegal characters eg.%");
          }
        }
 else {
          decodedValue=value[0];
        }
        paramMap.put(key,decodedValue);
      }
      String cmdClassName=_apiCommands.getProperty(command[0]);
      if (cmdClassName != null) {
        Class<?> cmdClass=Class.forName(cmdClassName);
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj.setFullUrlParams(paramMap);
        cmdObj.setResponseType(responseType);
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        if (!command[0].equalsIgnoreCase("login") && !command[0].equalsIgnoreCase("logout")) {
          String errorString="Unknown API command: " + ((command == null) ? "null" : command[0]);
          s_logger.warn(errorString);
          auditTrailSb.append(" " + errorString);
          throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,errorString);
        }
      }
    }
  }
 catch (  Exception ex) {
    if (ex instanceof InvalidParameterValueException) {
      InvalidParameterValueException ref=(InvalidParameterValueException)ex;
      ServerApiException e=new ServerApiException(BaseCmd.PARAM_ERROR,ex.getMessage());
      IdentityProxy id=ref.getProxyObject();
      if (id != null) {
        e.setProxyObject(id.getTableName(),id.getidFieldName(),id.getValue());
      }
      throw e;
    }
 else     if (ex instanceof PermissionDeniedException) {
      PermissionDeniedException ref=(PermissionDeniedException)ex;
      ServerApiException e=new ServerApiException(BaseCmd.ACCOUNT_ERROR,ex.getMessage());
      IdentityProxy id=ref.getProxyObject();
      if (id != null) {
        e.setProxyObject(id.getTableName(),id.getidFieldName(),id.getValue());
      }
      throw e;
    }
 else     if (ex instanceof ServerApiException) {
      throw (ServerApiException)ex;
    }
 else {
      s_logger.error("unhandled exception executing api command: " + ((command == null) ? "null" : command[0]),ex);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal server error, unable to execute request.");
    }
  }
  return response;
}
