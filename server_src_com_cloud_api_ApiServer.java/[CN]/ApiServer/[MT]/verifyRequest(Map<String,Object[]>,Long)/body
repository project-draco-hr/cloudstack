{
  try {
    String apiKey=null;
    String secretKey=null;
    String signature=null;
    String unsignedRequest=null;
    final String[] command=(String[])requestParameters.get(ApiConstants.COMMAND);
    if (command == null) {
      logger.info("missing command, ignoring request...");
      return false;
    }
    final String commandName=command[0];
    if (userId != null) {
      final User user=ApiDBUtils.findUserById(userId);
      try {
        checkCommandAvailable(user,commandName);
      }
 catch (      final RequestLimitException ex) {
        logger.debug(ex.getMessage());
        throw new ServerApiException(ApiErrorCode.API_LIMIT_EXCEED,ex.getMessage());
      }
catch (      final PermissionDeniedException ex) {
        logger.debug("The given command:" + commandName + " does not exist or it is not available for user with id:"+ userId);
        throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,"The given command does not exist or it is not available for user");
      }
      return true;
    }
 else {
      if (!s_apiNameCmdClassMap.containsKey(commandName) && !commandName.equals("login") && !commandName.equals("logout")) {
        logger.debug("The given command:" + commandName + " does not exist or it is not available for user with id:"+ userId);
        throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,"The given command does not exist or it is not available for user");
      }
    }
    final List<String> parameterNames=new ArrayList<String>();
    for (    final Object paramNameObj : requestParameters.keySet()) {
      parameterNames.add((String)paramNameObj);
    }
    Collections.sort(parameterNames);
    String signatureVersion=null;
    String expires=null;
    for (    final String paramName : parameterNames) {
      final String paramValue=((String[])requestParameters.get(paramName))[0];
      if (ApiConstants.SIGNATURE.equalsIgnoreCase(paramName)) {
        signature=paramValue;
      }
 else {
        if (ApiConstants.API_KEY.equalsIgnoreCase(paramName)) {
          apiKey=paramValue;
        }
 else         if (ApiConstants.SIGNATURE_VERSION.equalsIgnoreCase(paramName)) {
          signatureVersion=paramValue;
        }
 else         if (ApiConstants.EXPIRES.equalsIgnoreCase(paramName)) {
          expires=paramValue;
        }
        if (unsignedRequest == null) {
          unsignedRequest=paramName + "=" + URLEncoder.encode(paramValue,HttpUtils.UTF_8).replaceAll("\\+","%20");
        }
 else {
          unsignedRequest=unsignedRequest + "&" + paramName+ "="+ URLEncoder.encode(paramValue,HttpUtils.UTF_8).replaceAll("\\+","%20");
        }
      }
    }
    if ((signature == null) || (apiKey == null)) {
      logger.debug("Expired session, missing signature, or missing apiKey -- ignoring request. Signature: " + signature + ", apiKey: "+ apiKey);
      return false;
    }
    Date expiresTS=null;
    if ("3".equals(signatureVersion)) {
      if (expires == null) {
        logger.debug("Missing Expires parameter -- ignoring request. Signature: " + signature + ", apiKey: "+ apiKey);
        return false;
      }
synchronized (DateFormatToUse) {
        try {
          expiresTS=DateFormatToUse.parse(expires);
        }
 catch (        final ParseException pe) {
          logger.debug("Incorrect date format for Expires parameter",pe);
          return false;
        }
      }
      final Date now=new Date(System.currentTimeMillis());
      if (expiresTS.before(now)) {
        logger.debug("Request expired -- ignoring ...sig: " + signature + ", apiKey: "+ apiKey);
        return false;
      }
    }
    final TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.CLOUD_DB);
    txn.close();
    User user=null;
    final Pair<User,Account> userAcctPair=_accountMgr.findUserByApiKey(apiKey);
    if (userAcctPair == null) {
      logger.debug("apiKey does not map to a valid user -- ignoring request, apiKey: " + apiKey);
      return false;
    }
    user=userAcctPair.first();
    final Account account=userAcctPair.second();
    if (user.getState() != Account.State.enabled || !account.getState().equals(Account.State.enabled)) {
      logger.info("disabled or locked user accessing the api, userid = " + user.getId() + "; name = "+ user.getUsername()+ "; state: "+ user.getState()+ "; accountState: "+ account.getState());
      return false;
    }
    try {
      checkCommandAvailable(user,commandName);
    }
 catch (    final RequestLimitException ex) {
      logger.debug(ex.getMessage());
      throw new ServerApiException(ApiErrorCode.API_LIMIT_EXCEED,ex.getMessage());
    }
catch (    final PermissionDeniedException ex) {
      logger.debug("The given command:" + commandName + " does not exist or it is not available for user");
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,"The given command:" + commandName + " does not exist or it is not available for user with id:"+ userId);
    }
    secretKey=user.getSecretKey();
    if (secretKey == null) {
      logger.info("User does not have a secret key associated with the account -- ignoring request, username: " + user.getUsername());
      return false;
    }
    unsignedRequest=unsignedRequest.toLowerCase();
    final Mac mac=Mac.getInstance("HmacSHA1");
    final SecretKeySpec keySpec=new SecretKeySpec(secretKey.getBytes(),"HmacSHA1");
    mac.init(keySpec);
    mac.update(unsignedRequest.getBytes());
    final byte[] encryptedBytes=mac.doFinal();
    final String computedSignature=Base64.encodeBase64String(encryptedBytes);
    final boolean equalSig=ConstantTimeComparator.compareStrings(signature,computedSignature);
    if (!equalSig) {
      logger.info("User signature: " + signature + " is not equaled to computed signature: "+ computedSignature);
    }
 else {
      CallContext.register(user,account);
    }
    return equalSig;
  }
 catch (  final ServerApiException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    logger.error("unable to verify request signature");
  }
  return false;
}
