{
  final StringBuffer sb=new StringBuffer();
  final HttpServerConnection connObj=(HttpServerConnection)context.getAttribute("http.connection");
  if (connObj instanceof SocketHttpServerConnection) {
    final InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + " -- ");
  }
  sb.append(StringUtils.cleanString(request.getRequestLine().toString()));
  try {
    List<NameValuePair> paramList=null;
    try {
      paramList=URLEncodedUtils.parse(new URI(request.getRequestLine().getUri()),"UTF-8");
    }
 catch (    final URISyntaxException e) {
      s_logger.error("Error parsing url request",e);
    }
    final Map parameterMap=new HashMap<String,String[]>();
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    for (    final NameValuePair param : paramList) {
      if (param.getName().equalsIgnoreCase("response")) {
        responseType=param.getValue();
        continue;
      }
      parameterMap.put(param.getName(),new String[]{param.getValue()});
    }
    parameterMap.put("httpmethod",new String[]{request.getRequestLine().getMethod()});
    if (!(responseType.equals(BaseCmd.RESPONSE_TYPE_JSON) || responseType.equals(BaseCmd.RESPONSE_TYPE_XML))) {
      responseType=BaseCmd.RESPONSE_TYPE_XML;
    }
    try {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      sb.insert(0,"(userId=" + User.UID_SYSTEM + " accountId="+ Account.ACCOUNT_ID_SYSTEM+ " sessionId="+ null+ ") ");
      final String responseText=handleRequest(parameterMap,responseType,sb);
      sb.append(" 200 " + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    final ServerApiException se) {
      final String responseText=getSerializedApiError(se,parameterMap,responseType);
      writeResponse(response,responseText,se.getErrorCode().getHttpCode(),responseType,se.getDescription());
      sb.append(" " + se.getErrorCode() + " "+ se.getDescription());
    }
catch (    final RuntimeException e) {
      s_logger.error("Unhandled exception, ",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    CallContext.unregister();
  }
}
