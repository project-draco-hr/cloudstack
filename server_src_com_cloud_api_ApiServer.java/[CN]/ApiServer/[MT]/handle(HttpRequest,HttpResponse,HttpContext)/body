{
  StringBuffer sb=new StringBuffer();
  HttpServerConnection connObj=(HttpServerConnection)context.getAttribute("http.connection");
  if (connObj instanceof SocketHttpServerConnection) {
    InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + " -- ");
  }
  sb.append(request.getRequestLine());
  try {
    String uri=request.getRequestLine().getUri();
    int requestParamsStartIndex=uri.indexOf('?');
    if (requestParamsStartIndex >= 0) {
      uri=uri.substring(requestParamsStartIndex + 1);
    }
    String[] paramArray=uri.split("&");
    if (paramArray.length < 1) {
      s_logger.info("no parameters received for request: " + uri + ", aborting...");
      return;
    }
    Map parameterMap=new HashMap<String,String[]>();
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    for (    String paramEntry : paramArray) {
      String[] paramValue=paramEntry.split("=");
      if (paramValue.length != 2) {
        s_logger.info("malformed parameter: " + paramEntry + ", skipping");
        continue;
      }
      if ("response".equalsIgnoreCase(paramValue[0])) {
        responseType=paramValue[1];
      }
 else {
        parameterMap.put(paramValue[0],new String[]{paramValue[1]});
      }
    }
    try {
      UserContext.registerContext(_systemUser.getId(),_systemAccount,null,true);
      sb.insert(0,"(userId=" + User.UID_SYSTEM + " accountId="+ Account.ACCOUNT_ID_SYSTEM+ " sessionId="+ null+ ") ");
      String responseText=handleRequest(parameterMap,true,responseType,sb);
      sb.append(" 200 " + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    ServerApiException se) {
      String responseText=getSerializedApiError(se.getErrorCode(),se.getDescription(),parameterMap,responseType,se);
      writeResponse(response,responseText,se.getErrorCode(),responseType,se.getDescription());
      sb.append(" " + se.getErrorCode() + " "+ se.getDescription());
    }
catch (    RuntimeException e) {
      s_logger.error("Unhandled exception, ",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    UserContext.unregisterContext();
  }
}
