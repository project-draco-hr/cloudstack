{
  BaseCmd.setComponents(new ApiResponseHelper());
  BaseListCmd.configure();
  _systemAccount=_accountMgr.getSystemAccount();
  _systemUser=_accountMgr.getSystemUser();
  _dispatcher=ApiDispatcher.getInstance();
  Integer apiPort=null;
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  SearchCriteria<ConfigurationVO> sc=configDao.createSearchCriteria();
  sc.addAnd("name",SearchCriteria.Op.EQ,"integration.api.port");
  List<ConfigurationVO> values=configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  Reflections reflections=new Reflections("org.apache.cloudstack");
  Set<Class<?>> cmdClasses=reflections.getTypesAnnotatedWith(APICommand.class);
  reflections=new Reflections("com.cloud.api");
  cmdClasses.addAll(reflections.getTypesAnnotatedWith(APICommand.class));
  for (  Class<?> cmdClass : cmdClasses) {
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (_apiNameCmdClassMap.containsKey(apiName)) {
      s_logger.error("Cmd class " + cmdClass.getName() + " conflicts on apiname"+ apiName);
    }
    _apiNameCmdClassMap.put(apiName,cmdClass);
  }
  encodeApiResponse=Boolean.valueOf(configDao.getValue(Config.EncodeApiResponse.key()));
  String jsonType=configDao.getValue(Config.JavaScriptDefaultContentType.key());
  if (jsonType != null) {
    jsonContentType=jsonType;
  }
  if (apiPort != null) {
    ListenerThread listenerThread=new ListenerThread(this,apiPort);
    listenerThread.start();
  }
}
