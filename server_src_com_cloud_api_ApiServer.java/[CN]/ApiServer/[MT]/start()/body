{
  Integer apiPort=null;
  SearchCriteria<ConfigurationVO> sc=_configDao.createSearchCriteria();
  sc.addAnd("name",SearchCriteria.Op.EQ,Config.IntegrationAPIPort.key());
  List<ConfigurationVO> values=_configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  Map<String,String> configs=_configDao.getConfiguration();
  String strSnapshotLimit=configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());
  if (strSnapshotLimit != null) {
    Long snapshotLimit=NumbersUtil.parseLong(strSnapshotLimit,1L);
    if (snapshotLimit.longValue() <= 0) {
      s_logger.debug("Global config parameter " + Config.ConcurrentSnapshotsThresholdPerHost.toString() + " is less or equal 0; defaulting to unlimited");
    }
 else {
      _dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);
    }
  }
  Set<Class<?>> cmdClasses=new HashSet<Class<?>>();
  for (  PluggableService pluggableService : _pluggableServices) {
    cmdClasses.addAll(pluggableService.getCommands());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Discovered plugin " + pluggableService.getClass().getSimpleName());
    }
  }
  for (  Class<?> cmdClass : cmdClasses) {
    APICommand at=cmdClass.getAnnotation(APICommand.class);
    if (at == null) {
      throw new CloudRuntimeException(String.format("%s is claimed as a API command, but it doesn't have @APICommand annotation",cmdClass.getName()));
    }
    String apiName=at.name();
    List<Class<?>> apiCmdList=_apiNameCmdClassMap.get(apiName);
    if (apiCmdList == null) {
      apiCmdList=new ArrayList<Class<?>>();
      _apiNameCmdClassMap.put(apiName,apiCmdList);
    }
    apiCmdList.add(cmdClass);
    boolean isReadCommand=false;
    BaseCmd cmdObj;
    try {
      cmdObj=(BaseCmd)cmdClass.newInstance();
      if (cmdObj instanceof BaseListCmd) {
        isReadCommand=true;
      }
    }
 catch (    Exception e) {
    }
    for (    RoleType role : at.authorized()) {
      AclPermissionVO apiPermission=null;
switch (role) {
case User:
        apiPermission=new AclPermissionVO(apiName,null,null,PermissionScope.ACCOUNT,null,Permission.Allow);
      break;
case Admin:
    apiPermission=new AclPermissionVO(apiName,null,null,PermissionScope.ALL,null,Permission.Allow);
  break;
case DomainAdmin:
apiPermission=new AclPermissionVO(apiName,null,null,PermissionScope.DOMAIN,null,Permission.Allow);
break;
case ResourceAdmin:
apiPermission=new AclPermissionVO(apiName,null,null,PermissionScope.DOMAIN,null,Permission.Allow);
break;
}
if (apiPermission != null) {
if (isReadCommand) {
apiPermission.setAccessType(AccessType.ListEntry);
}
_aclPermissionDao.persist(apiPermission);
AclPolicyPermissionMapVO policyPermMapEntry=new AclPolicyPermissionMapVO(role.ordinal() + 1,apiPermission.getId());
_aclPolicyPermissionMapDao.persist(policyPermMapEntry);
}
}
}
encodeApiResponse=Boolean.valueOf(_configDao.getValue(Config.EncodeApiResponse.key()));
String jsonType=_configDao.getValue(Config.JavaScriptDefaultContentType.key());
if (jsonType != null) {
jsonContentType=jsonType;
}
if (apiPort != null) {
ListenerThread listenerThread=new ListenerThread(this,apiPort);
listenerThread.start();
}
return true;
}
