{
  Integer apiPort=null;
  final SearchCriteria<ConfigurationVO> sc=_configDao.createSearchCriteria();
  sc.addAnd("name",SearchCriteria.Op.EQ,Config.IntegrationAPIPort.key());
  final List<ConfigurationVO> values=_configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    final ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  final Map<String,String> configs=_configDao.getConfiguration();
  final String strSnapshotLimit=configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());
  if (strSnapshotLimit != null) {
    final Long snapshotLimit=NumbersUtil.parseLong(strSnapshotLimit,1L);
    if (snapshotLimit.longValue() <= 0) {
      s_logger.debug("Global config parameter " + Config.ConcurrentSnapshotsThresholdPerHost.toString() + " is less or equal 0; defaulting to unlimited");
    }
 else {
      _dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);
    }
  }
  final Set<Class<?>> cmdClasses=new HashSet<Class<?>>();
  for (  final PluggableService pluggableService : _pluggableServices) {
    cmdClasses.addAll(pluggableService.getCommands());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Discovered plugin " + pluggableService.getClass().getSimpleName());
    }
  }
  for (  final Class<?> cmdClass : cmdClasses) {
    final APICommand at=cmdClass.getAnnotation(APICommand.class);
    if (at == null) {
      throw new CloudRuntimeException(String.format("%s is claimed as a API command, but it doesn't have @APICommand annotation",cmdClass.getName()));
    }
    String apiName=at.name();
    List<Class<?>> apiCmdList=s_apiNameCmdClassMap.get(apiName);
    if (apiCmdList == null) {
      apiCmdList=new ArrayList<Class<?>>();
      s_apiNameCmdClassMap.put(apiName,apiCmdList);
    }
    apiCmdList.add(cmdClass);
  }
  setEncodeApiResponse(Boolean.valueOf(_configDao.getValue(Config.EncodeApiResponse.key())));
  final String jsonType=_configDao.getValue(Config.JSONDefaultContentType.key());
  if (jsonType != null) {
    s_jsonContentType=jsonType;
  }
  final Boolean enableSecureSessionCookie=Boolean.valueOf(_configDao.getValue(Config.EnableSecureSessionCookie.key()));
  if (enableSecureSessionCookie != null) {
    s_enableSecureCookie=enableSecureSessionCookie;
  }
  if (apiPort != null) {
    final ListenerThread listenerThread=new ListenerThread(this,apiPort);
    listenerThread.start();
  }
  return true;
}
