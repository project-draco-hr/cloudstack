{
  Integer apiPort=null;
  SearchCriteria<ConfigurationVO> sc=_configDao.createSearchCriteria();
  sc.addAnd("name",SearchCriteria.Op.EQ,Config.IntegrationAPIPort.key());
  List<ConfigurationVO> values=_configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  Map<String,String> configs=_configDao.getConfiguration();
  String strSnapshotLimit=configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());
  if (strSnapshotLimit != null) {
    Long snapshotLimit=NumbersUtil.parseLong(strSnapshotLimit,1L);
    if (snapshotLimit.longValue() <= 0) {
      s_logger.debug("Global config parameter " + Config.ConcurrentSnapshotsThresholdPerHost.toString() + " is less or equal 0; defaulting to unlimited");
    }
 else {
      _dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);
    }
  }
  Set<Class<?>> cmdClasses=new HashSet<Class<?>>();
  for (  PluggableService pluggableService : _pluggableServices) {
    cmdClasses.addAll(pluggableService.getCommands());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Discovered plugin " + pluggableService.getClass().getSimpleName());
    }
  }
  SearchBuilder<AclPolicyPermissionVO> sb=_aclPermissionDao.createSearchBuilder();
  sb.and("policyId",sb.entity().getAclPolicyId(),SearchCriteria.Op.EQ);
  sb.and("scope",sb.entity().getScope(),SearchCriteria.Op.EQ);
  sb.done();
  SearchCriteria<AclPolicyPermissionVO> permissionSC=sb.create();
  for (  RoleType role : RoleType.values()) {
    permissionSC.setParameters("policyId",role.ordinal() + 1);
switch (role) {
case User:
      permissionSC.setParameters("scope",PermissionScope.ACCOUNT.toString());
    break;
case Admin:
  permissionSC.setParameters("scope",PermissionScope.ALL.toString());
break;
case DomainAdmin:
permissionSC.setParameters("scope",PermissionScope.DOMAIN.toString());
break;
case ResourceAdmin:
permissionSC.setParameters("scope",PermissionScope.DOMAIN.toString());
break;
}
_aclPermissionDao.expunge(permissionSC);
}
for (Class<?> cmdClass : cmdClasses) {
APICommand at=cmdClass.getAnnotation(APICommand.class);
if (at == null) {
throw new CloudRuntimeException(String.format("%s is claimed as a API command, but it doesn't have @APICommand annotation",cmdClass.getName()));
}
String apiName=at.name();
List<Class<?>> apiCmdList=_apiNameCmdClassMap.get(apiName);
if (apiCmdList == null) {
apiCmdList=new ArrayList<Class<?>>();
_apiNameCmdClassMap.put(apiName,apiCmdList);
}
apiCmdList.add(cmdClass);
if (!commandsPropertiesOverrides.contains(apiName)) {
for (RoleType role : at.authorized()) {
addDefaultAclPolicyPermission(apiName,cmdClass,role);
}
}
}
for (String apiName : commandsPropertiesOverrides) {
Class<?> cmdClass=getCmdClass(apiName);
for (RoleType role : RoleType.values()) {
if (commandsPropertiesRoleBasedApisMap.get(role).contains(apiName)) {
addDefaultAclPolicyPermission(apiName,cmdClass,role);
}
}
}
encodeApiResponse=Boolean.valueOf(_configDao.getValue(Config.EncodeApiResponse.key()));
String jsonType=_configDao.getValue(Config.JavaScriptDefaultContentType.key());
if (jsonType != null) {
jsonContentType=jsonType;
}
if (apiPort != null) {
ListenerThread listenerThread=new ListenerThread(this,apiPort);
listenerThread.start();
}
return true;
}
