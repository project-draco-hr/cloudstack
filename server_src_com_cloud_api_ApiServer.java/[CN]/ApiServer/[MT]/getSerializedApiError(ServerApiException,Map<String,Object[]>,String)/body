{
  String responseName=null;
  Class<?> cmdClass=null;
  String responseText=null;
  if (ex == null) {
    return getSerializedApiError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"Some internal error happened",apiCommandParams,responseType);
  }
  try {
    if (ex.getErrorCode() == ApiErrorCode.UNSUPPORTED_ACTION_ERROR || apiCommandParams == null || apiCommandParams.isEmpty()) {
      responseName="errorresponse";
    }
 else {
      Object cmdObj=apiCommandParams.get("command");
      if (cmdObj != null) {
        String cmdName=((String[])cmdObj)[0];
        cmdClass=getCmdClass(cmdName);
        if (cmdClass != null) {
          responseName=((BaseCmd)cmdClass.newInstance()).getCommandName();
        }
 else {
          responseName="errorresponse";
        }
      }
    }
    ExceptionResponse apiResponse=new ExceptionResponse();
    apiResponse.setErrorCode(ex.getErrorCode().getHttpCode());
    apiResponse.setErrorText(ex.getDescription());
    apiResponse.setResponseName(responseName);
    ArrayList<ExceptionProxyObject> idList=ex.getIdProxyList();
    if (idList != null) {
      for (int i=0; i < idList.size(); i++) {
        apiResponse.addProxyObject(idList.get(i));
      }
    }
    apiResponse.setCSErrorCode(ex.getCSErrorCode());
    SerializationContext.current().setUuidTranslation(true);
    responseText=ApiResponseSerializer.toSerializedString(apiResponse,responseType);
  }
 catch (  Exception e) {
    s_logger.error("Exception responding to http request",e);
  }
  return responseText;
}
