@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_02_update_vpncustomergateways(self):
    '\n        @Desc: Test to update VPN Customer Gateways pagination\n        @steps:\n        Step1: Listing all the VPN Customer Gateways for a user\n        Step2: Verifying that no VPN Customer Gateways are listed\n        Step3: Creating a VPN Customer Gateways\n        Step4: Listing all the VPN Customer Gateways again for a user\n        Step5: Verifying that list size is 1\n        Step6: Updating the VPN Customer Gateways created in step3\n        Step7: Listing the VPN customer gateway by id\n        Step8: Verifying that list size is 1\n        Step9: Verifying the details of the listed VPN customer gateway are same as updated in step6\n        '
    list_vpncustomergateways_before = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vpncustomergateways_before, 'VPN Customer Gateways listed for newly created User')
    vpncustomergateway_created = VpnCustomerGateway.create(self.userapiclient, self.services['vpncustomergateway'], name='VPNCustGateway', gateway='10.102.153.90', cidrlist='10.0.0.0/24', account=self.account.name, domainid=self.domain.id)
    self.assertIsNotNone(vpncustomergateway_created, 'VPN Customer Gateway creation failed')
    self.cleanup.append(vpncustomergateway_created)
    list_vpncustomergateways_after = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vpncustomergateways_after)
    self.assertEquals(PASS, status[0], 'VPN Customer Gateway creation failed')
    self.assertEquals(1, len(list_vpncustomergateways_after), 'Failed to create VPN Customer Gateways')
    vpncustomergateway_updated = VpnCustomerGateway.update(vpncustomergateway_created, self.userapiclient, self.services['vpncustomergateway'], name='NewVPNCustGateway', gateway='10.102.153.90', cidrlist='10.0.0.0/24')
    self.assertIsNotNone(vpncustomergateway_updated, 'Updation of VPN Customer Gateway failed')
    list_vpncustomergateway = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'], id=vpncustomergateway_created.id)
    status = validateList(list_vpncustomergateway)
    self.assertEquals(PASS, status[0], 'Failed to list VPN Customer Gateways by Id')
    self.assertEquals(1, len(list_vpncustomergateway), 'Size of VPN Customer Gateways by id is not matching')
    expected_dict = {'name': vpncustomergateway_updated.name, 'id': vpncustomergateway_updated.id, 'account': vpncustomergateway_updated.account, 'domainid': vpncustomergateway_updated.domainid, 'gateway': vpncustomergateway_updated.gateway, 'cidrlist': vpncustomergateway_updated.cidrlist, 'seckey': vpncustomergateway_updated.ipsecpsk, 'ikepolicy': vpncustomergateway_updated.ikepolicy, 'ikelifetime': vpncustomergateway_updated.ikelifetime, 'esppolicy': vpncustomergateway_updated.esppolicy, 'esplifetime': vpncustomergateway_updated.esplifetime, }
    actual_dict = {'name': list_vpncustomergateway[0].name, 'id': list_vpncustomergateway[0].id, 'account': list_vpncustomergateway[0].account, 'domainid': list_vpncustomergateway[0].domainid, 'gateway': list_vpncustomergateway[0].gateway, 'cidrlist': list_vpncustomergateway[0].cidrlist, 'seckey': list_vpncustomergateway[0].ipsecpsk, 'ikepolicy': list_vpncustomergateway[0].ikepolicy, 'ikelifetime': list_vpncustomergateway[0].ikelifetime, 'esppolicy': list_vpncustomergateway[0].esppolicy, 'esplifetime': list_vpncustomergateway[0].esplifetime, }
    vpncustomergateway_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, vpncustomergateway_status, 'Listed VPN Customer Gateway details are not as Updated')
    return
