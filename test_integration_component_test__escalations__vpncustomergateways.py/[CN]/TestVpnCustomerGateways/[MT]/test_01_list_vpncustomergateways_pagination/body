@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_list_vpncustomergateways_pagination(self):
    '\n        @Desc: Test to List VPN Customer Gateways pagination\n        @steps:\n        Step1: Listing all the VPN Customer Gateways for a user\n        Step2: Verifying that no VPN Customer Gateways are listed\n        Step3: Creating (page size + 1) number of VPN Customer Gateways\n        Step4: Listing all the VPN Customer Gateways again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the VPN Customer Gateways in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the VPN Customer Gateways in page2\n        Step9: Verifying that list size is 1\n        Step10: Deleting the VPN Customer Gateways present in page 2\n        Step11: Listing all the VPN Customer Gateways in page2\n        Step12: Verifying that no VPN Customer Gateways are listed\n        '
    list_vpncustomergateways_before = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vpncustomergateways_before, 'VPN Customer Gateways listed for newly created User')
    for i in range(0, (self.services['pagesize'] + 1)):
        vpncustomergateway_created = VpnCustomerGateway.create(self.userapiclient, self.services['vpncustomergateway'], name=('VPNCustGateway' + str((i + 1))), gateway=('10.102.153.' + str((i + 1))), cidrlist='10.0.0.0/24', account=self.account.name, domainid=self.domain.id)
        self.assertIsNotNone(vpncustomergateway_created, 'VPN Customer Gateway creation failed')
        if (i < (self.services['pagesize'] + 1)):
            self.cleanup.append(vpncustomergateway_created)
    list_vpncustomergateways_after = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vpncustomergateways_after)
    self.assertEquals(PASS, status[0], 'VPN Customer Gateway creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_vpncustomergateways_after), 'Failed to create pagesize + 1 number of VPN Customer Gateways')
    list_vpncustomergateways_page1 = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_vpncustomergateways_page1)
    self.assertEquals(PASS, status[0], 'Failed to list VPN Customer Gateways in page 1')
    self.assertEquals(self.services['pagesize'], len(list_vpncustomergateways_page1), 'Size of VPN Customer Gateways in page 1 is not matching')
    list_vpncustomergateways_page2 = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_vpncustomergateways_page2)
    self.assertEquals(PASS, status[0], 'Failed to list VPN Customer Gateways in page 2')
    self.assertEquals(1, len(list_vpncustomergateways_page2), 'Size of VPN Customer Gateways in page 2 is not matching')
    VpnCustomerGateway.delete(vpncustomergateway_created, self.userapiclient)
    self.cleanup.remove(vpncustomergateway_created)
    list_vpncustomergateways_page2 = VpnCustomerGateway.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_vpncustomergateways_page2, 'VPN Customer Gateways not deleted from page 2')
    return
