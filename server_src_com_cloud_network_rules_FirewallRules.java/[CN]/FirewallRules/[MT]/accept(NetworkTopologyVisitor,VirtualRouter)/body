{
  this.router=router;
  purpose=rules.get(0).getPurpose();
  if (purpose == Purpose.LoadBalancing) {
    final List<LoadBalancerVO> lbs=loadBalancerDao.listByNetworkIdAndScheme(network.getId(),Scheme.Public);
    loadbalancingRules=new ArrayList<LoadBalancingRule>();
    for (    final LoadBalancerVO lb : lbs) {
      final List<LbDestination> dstList=lbMgr.getExistingDestinations(lb.getId());
      final List<LbStickinessPolicy> policyList=lbMgr.getStickinessPolicies(lb.getId());
      final List<LbHealthCheckPolicy> hcPolicyList=lbMgr.getHealthCheckPolicies(lb.getId());
      final LbSslCert sslCert=lbMgr.getLbSslCert(lb.getId());
      final Ip sourceIp=networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();
      final LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,policyList,hcPolicyList,sourceIp,sslCert,lb.getLbProtocol());
      loadbalancingRules.add(loadBalancing);
    }
  }
  return visitor.visit(this);
}
