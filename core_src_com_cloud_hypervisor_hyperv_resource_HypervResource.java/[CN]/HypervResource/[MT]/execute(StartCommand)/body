{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource StartCommand: " + _gson.toJson(cmd));
  }
  VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  String vmName=vmSpec.getName();
  State state=State.Stopped;
  String scriptFileName=vmName + ".ps1";
  String newLine=System.getProperty("line.separator");
  String bootArgsDiskName=vmName + "-bootparams.vhd";
  String bootArgsDiskPath="C:\\ProgramData\\Virtual Machine Manager Library Files\\VHDs\\" + bootArgsDiskName;
  try {
synchronized (_vms) {
      _vms.put(vmName,State.Starting);
{
        String diskpartScriptName=vmName + "-Diskpart.txt";
        StringBuilder cmdDiskpart=new StringBuilder("create vdisk file=\"");
        cmdDiskpart.append(bootArgsDiskPath.toCharArray());
        cmdDiskpart.append("\" maximum=10 type=expandable" + newLine);
        cmdDiskpart.append("select vdisk file=\"");
        cmdDiskpart.append(bootArgsDiskPath.toCharArray());
        cmdDiskpart.append("\"" + newLine);
        cmdDiskpart.append("attach vdisk" + newLine);
        cmdDiskpart.append("create partition primary" + newLine);
        cmdDiskpart.append("format fs=ntfs label=\"test vhd\" quick" + newLine);
        cmdDiskpart.append("assign letter=" + vmName.toCharArray()[0] + newLine);
        cmdDiskpart.append("attach vdisk" + newLine);
        File f=new File(diskpartScriptName);
        FileOutputStream fop=new FileOutputStream(f);
        fop.write(cmdDiskpart.toString().getBytes());
        fop.flush();
        fop.close();
        s_logger.info("Running diskpart attach command");
        Process p=Runtime.getRuntime().exec("cmd.exe /c diskpart.exe /s " + diskpartScriptName);
        p.getOutputStream().close();
        InputStreamReader temperrReader=new InputStreamReader(new BufferedInputStream(p.getErrorStream()));
        BufferedReader errreader=new BufferedReader(temperrReader);
        if (errreader.ready()) {
          String errorOutput=new String("");
          while (true) {
            String errline=errreader.readLine();
            if (errline == null) {
              break;
            }
            errorOutput=errorOutput + errline;
          }
          s_logger.info("errors found while running diskpart command: " + errorOutput);
        }
        p.getErrorStream().close();
        InputStreamReader tempReader=new InputStreamReader(new BufferedInputStream(p.getInputStream()));
        BufferedReader reader=new BufferedReader(tempReader);
        String output=new String("");
        while (true) {
          String line=reader.readLine();
          if (line == null) {
            break;
          }
          output=output + line;
        }
        p.getInputStream().close();
        s_logger.info("diskpart detahc command output: " + output);
      }
      Thread.sleep(60000);
      String bootArgs=vmSpec.getBootArgs();
      String Drive=vmName.substring(0,1);
      File fBootargs=new File(Drive + ":\\cmdline");
      FileOutputStream fopBoot=new FileOutputStream(fBootargs);
      fopBoot.write(bootArgs.toString().getBytes());
      fopBoot.flush();
      fopBoot.close();
{
        String diskpartDetachScriptName=vmName + "-Detach-Diskpart.txt";
        StringBuilder cmdDetachDiskpart=new StringBuilder("select vdisk file=\"");
        cmdDetachDiskpart.append(bootArgsDiskPath.toCharArray());
        cmdDetachDiskpart.append("\"" + newLine);
        cmdDetachDiskpart.append("detach vdisk" + newLine);
        File fd=new File(diskpartDetachScriptName);
        FileOutputStream fdop=new FileOutputStream(fd);
        fdop.write(cmdDetachDiskpart.toString().getBytes());
        fdop.flush();
        fdop.close();
        s_logger.info("Running diskpart detach command");
        Process pd=Runtime.getRuntime().exec("cmd.exe /c diskpart.exe /s " + diskpartDetachScriptName);
        pd.getOutputStream().close();
        InputStreamReader temperrReader1=new InputStreamReader(new BufferedInputStream(pd.getErrorStream()));
        BufferedReader errreader1=new BufferedReader(temperrReader1);
        if (errreader1.ready()) {
          String errorOutput=new String("");
          while (true) {
            String errline=errreader1.readLine();
            if (errline == null) {
              break;
            }
            errorOutput=errorOutput + errline;
          }
          s_logger.info("errors found while running diskpart detach command: " + errorOutput);
        }
        pd.getErrorStream().close();
        InputStreamReader tempReader1=new InputStreamReader(new BufferedInputStream(pd.getInputStream()));
        BufferedReader reader1=new BufferedReader(tempReader1);
        String output1=new String("");
        while (true) {
          String line=reader1.readLine();
          if (line == null) {
            break;
          }
          output1=output1 + line;
        }
        pd.getInputStream().close();
        s_logger.info("diskpart detach command output: " + output1);
      }
    }
    UUID id=UUID.randomUUID();
    String hwProfileId=id.toString();
    StringBuilder cmdStr=new StringBuilder("Add-PSSnapin Microsoft.SystemCenter.VirtualMachineManager;" + newLine);
    cmdStr.append("Get-VMMServer -ComputerName localhost;" + newLine);
    cmdStr.append("$JobGroupId = [Guid]::NewGuid().ToString();" + newLine);
    cmdStr.append("$hwProfileId = [Guid]::NewGuid().ToString(); " + newLine);
    cmdStr.append("$CPUType = Get-CPUType -VMMServer localhost | where {$_.Name -eq " + "'1.20 GHz Athlon MP'}; " + newLine);
    cmdStr.append("$ISO =  Get-ISO -VMMServer localhost | where { $_.Name -match  \"systemvm\" }; " + newLine);
    cmdStr.append("$VMHost = Get-VMHost -VMMServer localhost | where {$_.Name -eq \"HYPERVHOST.hypervdc.intranet.lab.vmops.com\"}; " + newLine);
    cmdStr.append("$VNetwork = Get-VirtualNetwork  -VMHost $VMHost  -Name \"public\"; " + newLine);
    cmdStr.append("New-VirtualNetworkAdapter -VMMServer localhost -JobGroup $JobGroupID -PhysicalAddressType Dynamic -VirtualNetwork $vnetwork; " + newLine);
    cmdStr.append("New-VirtualNetworkAdapter -VMMServer localhost -JobGroup $JobGroupID -PhysicalAddressType Dynamic -VirtualNetwork $vnetwork; " + newLine);
    cmdStr.append("New-VirtualNetworkAdapter -VMMServer localhost -JobGroup $JobGroupID -PhysicalAddressType Dynamic -VirtualNetwork $vnetwork; " + newLine);
    cmdStr.append("New-VirtualDVDDrive -VMMServer localhost -JobGroup $JobGroupID -Bus 1 -LUN 0 -ISO $ISO ; " + newLine);
    cmdStr.append("New-HardwareProfile -VMMServer localhost -JobGroup $JobGroupID -Owner \"HYPERVDC\\Administrator\" -CPUType $CPUType  -Name $hwProfileId");
    cmdStr.append(" -Description \"Profile used to create a VM/Template\"" + " -CPUCount 1 -MemoryMB 512 -RelativeWeight 100 -HighlyAvailable $true -NumLock $false -BootOrder \"CD\", " + "\"IdeHardDrive\", \"PxeBoot\", \"Floppy\" -LimitCPUFunctionality $false -LimitCPUForMigration $false; "+ newLine);
    cmdStr.append("$JobGroupId = [Guid]::NewGuid().ToString(); " + newLine);
    cmdStr.append("$share = Get-LibraryShare;" + newLine);
    cmdStr.append("Refresh-LibraryShare -LibraryShare $share;" + newLine);
    cmdStr.append("$VirtualHardDisk1 = Get-VirtualHardDisk -VMMServer localhost | where {$_.Location -eq \"\\\\scvmm.hypervdc.intranet.lab.vmops.com\\MSSCVMMLibrary\\VHDs\\systemvm.vhd\"} | where {$_.HostName -eq \"scvmm.hypervdc.intranet.lab.vmops.com\"}" + newLine);
    cmdStr.append("New-VirtualDiskDrive -VMMServer localhost -JobGroup $JobGroupID -IDE -Bus 0 -LUN 0 -VirtualHardDisk $VirtualHardDisk1 -Filename \"");
    cmdStr.append(vmName.toCharArray());
    cmdStr.append("-systemvm.vhd\"; " + newLine);
    cmdStr.append("$VirtualHardDisk2 = Get-VirtualHardDisk -VMMServer localhost " + " | where {$_.Location -eq \"\\\\scvmm.hypervdc.intranet.lab.vmops.com\\MSSCVMMLibrary\\VHDs\\");
    cmdStr.append(bootArgsDiskName.toCharArray());
    cmdStr.append("\" } | where {$_.HostName -eq \"scvmm.hypervdc.intranet.lab.vmops.com\"}" + newLine);
    cmdStr.append("New-VirtualDiskDrive -VMMServer localhost -JobGroup $JobGroupID -IDE -Bus 0 -LUN 1 -VirtualHardDisk $VirtualHardDisk2 -Filename \"");
    cmdStr.append(bootArgsDiskName.toCharArray());
    cmdStr.append("\";" + newLine);
    cmdStr.append("$HardwareProfile = Get-HardwareProfile -VMMServer localhost | where {$_.Name -eq  $hwProfileId};" + newLine);
    cmdStr.append("$OperatingSystem = Get-OperatingSystem -VMMServer localhost | where {$_.Name -eq 'Other Linux (32 bit)'};" + newLine);
    cmdStr.append("New-VM -VMMServer localhost -Name \"");
    cmdStr.append(vmName.toCharArray());
    cmdStr.append("\" -Description \"\" -Owner \"HYPERVDC\\Administrator\" -VMHost $VMHost -Path \"C:\\ClusterStorage\\Volume1\" -HardwareProfile $HardwareProfile " + " -JobGroup $JobGroupID" + " -OperatingSystem $OperatingSystem -RunAsSystem -StartVM -StartAction NeverAutoTurnOnVM -StopAction SaveVM;"+ newLine);
    File f=new File(scriptFileName);
    FileOutputStream fop=new FileOutputStream(f);
    fop.write(cmdStr.toString().getBytes());
    fop.flush();
    fop.close();
    s_logger.info("Running command: " + cmdStr);
    Process p=Runtime.getRuntime().exec("cmd.exe /c Powershell -Command \" & '.\\" + scriptFileName + "'\"");
    p.getOutputStream().close();
    InputStreamReader temperrReader=new InputStreamReader(new BufferedInputStream(p.getErrorStream()));
    BufferedReader errreader=new BufferedReader(temperrReader);
    if (errreader.ready()) {
      String errorOutput=new String("");
      while (true) {
        String errline=errreader.readLine();
        if (errline == null) {
          break;
        }
        errorOutput=errorOutput + errline;
      }
      s_logger.info("errors found while running cmdlet to create VM: " + errorOutput);
    }
    p.getErrorStream().close();
    InputStreamReader tempReader=new InputStreamReader(new BufferedInputStream(p.getInputStream()));
    BufferedReader reader=new BufferedReader(tempReader);
    String output=new String("");
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      output=output + line;
    }
    p.getInputStream().close();
    s_logger.info("vm create cmmdlet output: " + output);
    if (output.contains("FullyQualifiedErrorId") || output.contains("Error") || output.contains("Exception")) {
      s_logger.info("No errors found in running cmdlet " + cmdStr.toString());
      return new StartAnswer(cmd,"Failed to start VM");
    }
    state=State.Running;
    return new StartAnswer(cmd);
  }
 catch (  Exception e) {
    return new StartAnswer(cmd,"Failed to start VM");
  }
 finally {
synchronized (_vms) {
      if (state != State.Stopped) {
        _vms.put(vmName,state);
      }
 else {
        _vms.remove(vmName);
      }
    }
  }
}
