{
  Connection conn=null;
  try {
    s_logger.debug("Checking to see if the database is at a version before it was the version table is created");
    conn=Transaction.getStandaloneConnection();
    PreparedStatement pstmt=conn.prepareStatement("SHOW TABLES LIKE 'version'");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      rs.close();
      pstmt.close();
      pstmt=conn.prepareStatement("SHOW TABLES LIKE 'nics'");
      rs=pstmt.executeQuery();
      if (!rs.next()) {
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("SELECT domain_id FROM account_vlan_map LIMIT 1");
        try {
          pstmt.executeQuery();
          return "2.1.8";
        }
 catch (        SQLException e) {
          s_logger.debug("Assuming the exception means domain_id is not there.");
          s_logger.debug("No version table and no nics table, returning 2.1.7");
          return "2.1.7";
        }
 finally {
          pstmt.close();
        }
      }
 else {
        rs.close();
        pstmt.close();
        s_logger.debug("No version table but has nics table, returning 2.2.1");
        return "2.2.1";
      }
    }
    SearchCriteria<String> sc=CurrentVersionSearch.create();
    sc.setParameters("step",Step.Complete);
    Filter filter=new Filter(VersionVO.class,"id",false,0l,1l);
    List<String> upgradedVersions=customSearch(sc,filter);
    if (upgradedVersions.isEmpty()) {
      filter=new Filter(VersionVO.class,"id",false,0l,1l);
      sc=CurrentVersionSearch.create();
      List<String> vers=customSearch(sc,filter);
      if (!vers.isEmpty()) {
        throw new CloudRuntimeException("Version table contains records for which upgrade wasn't completed");
      }
      try {
        s_logger.debug("Version table exists, but it's empty; have to confirm that version is 2.2.2");
        pstmt=conn.prepareStatement("SHOW TABLES LIKE 'nics'");
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException("Unable to determine the current version, version table exists and empty, nics table doesn't exist");
        }
 else {
          pstmt=conn.prepareStatement("SELECT is_static_nat from firewall_rules");
          pstmt.executeQuery();
          throw new CloudRuntimeException("Unable to determine the current version, version table exists and empty, nics table doesn't exist, is_static_nat field exists in firewall_rules table");
        }
      }
 catch (      SQLException e) {
        s_logger.debug("Assuming the exception means static_nat field doesn't exist in firewall_rules table, returning version 2.2.2");
        return "2.2.2";
      }
 finally {
        rs.close();
        pstmt.close();
      }
    }
 else {
      return upgradedVersions.get(0);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to get the current version",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}
