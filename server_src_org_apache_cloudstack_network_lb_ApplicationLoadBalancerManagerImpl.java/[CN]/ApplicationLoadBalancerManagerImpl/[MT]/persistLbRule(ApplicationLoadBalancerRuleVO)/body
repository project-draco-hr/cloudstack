{
  boolean success=true;
  ApplicationLoadBalancerRuleVO newRule=null;
  try {
    newRule=Transaction.execute(new TransactionCallbackWithException<ApplicationLoadBalancerRuleVO,NetworkRuleConflictException>(){
      @Override public ApplicationLoadBalancerRuleVO doInTransaction(      TransactionStatus status) throws NetworkRuleConflictException {
        ApplicationLoadBalancerRuleVO newRule=_lbDao.persist(newRuleFinal);
        detectLbRulesConflicts(newRule);
        if (!_firewallDao.setStateToAdd(newRule)) {
          throw new CloudRuntimeException("Unable to update the state to add for " + newRule);
        }
        logger.debug("Load balancer " + newRule.getId() + " for Ip address "+ newRule.getSourceIp().addr()+ ", source port "+ newRule.getSourcePortStart().intValue()+ ", instance port "+ newRule.getDefaultPortStart()+ " is added successfully.");
        CallContext.current().setEventDetails("Load balancer Id: " + newRule.getId());
        Network ntwk=_networkModel.getNetwork(newRule.getNetworkId());
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_LOAD_BALANCER_CREATE,newRule.getAccountId(),ntwk.getDataCenterId(),newRule.getId(),null,LoadBalancingRule.class.getName(),newRule.getUuid());
        return newRule;
      }
    }
);
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException("Unable to add lb rule for ip address " + newRuleFinal.getSourceIpAddressId(),e);
  }
 finally {
    if (!success && newRule != null) {
      _lbMgr.removeLBRule(newRule);
    }
  }
}
