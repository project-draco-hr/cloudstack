@classmethod
def setUpClass(cls):
    ' \n\tCreate the following domain tree and accounts that are reqiured for executing listVirtualMachine test cases:\n\tUnder ROOT - create 2 domaind D1 and D2\n        Under D1 - Create 2 subdomain D11 and D12\n        Under D11 - Create subdimain D111\n\n        Under each of the domain create 1 admin user and couple of regular users.\n\n        As each of these users , deploy Virtual machines.\n\n\t'
    cls.testclient = super(TestVMList, cls).getClsTestClient()
    cls.apiclient = cls.testclient.getApiClient()
    cls.testdata = cls.testClient.getParsedTestDataConfig()
    cls.acldata = cls.testdata['acl']
    cls.domain_1 = None
    cls.domain_2 = None
    cls.cleanup = []
    try:
        cls.default_apikey = cls.apiclient.connection.apiKey
        cls.default_secretkey = cls.apiclient.connection.securityKey
        cls.domain_1 = Domain.create(cls.apiclient, cls.acldata['domain1'])
        cls.domain_11 = Domain.create(cls.apiclient, cls.acldata['domain11'], parentdomainid=cls.domain_1.id)
        cls.domain_111 = Domain.create(cls.apiclient, cls.acldata['domain111'], parentdomainid=cls.domain_11.id)
        cls.domain_12 = Domain.create(cls.apiclient, cls.acldata['domain12'], parentdomainid=cls.domain_1.id)
        cls.domain_2 = Domain.create(cls.apiclient, cls.acldata['domain2'])
        cls.account_d1 = Account.create(cls.apiclient, cls.acldata['accountD1'], admin=True, domainid=cls.domain_1.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d1)
        cls.user_d1_apikey = user.apikey
        cls.user_d1_secretkey = user.secretkey
        cls.account_d1a = Account.create(cls.apiclient, cls.acldata['accountD1A'], admin=False, domainid=cls.domain_1.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d1a)
        cls.user_d1a_apikey = user.apikey
        cls.user_d1a_secretkey = user.secretkey
        cls.account_d1b = Account.create(cls.apiclient, cls.acldata['accountD1B'], admin=False, domainid=cls.domain_1.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d1b)
        cls.user_d1b_apikey = user.apikey
        cls.user_d1b_secretkey = user.secretkey
        cls.account_d11 = Account.create(cls.apiclient, cls.acldata['accountD11'], admin=True, domainid=cls.domain_11.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d11)
        cls.user_d11_apikey = user.apikey
        cls.user_d11_secretkey = user.secretkey
        cls.account_d11a = Account.create(cls.apiclient, cls.acldata['accountD11A'], admin=False, domainid=cls.domain_11.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d11a)
        cls.user_d11a_apikey = user.apikey
        cls.user_d11a_secretkey = user.secretkey
        cls.account_d11b = Account.create(cls.apiclient, cls.acldata['accountD11B'], admin=False, domainid=cls.domain_11.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d11b)
        cls.user_d11b_apikey = user.apikey
        cls.user_d11b_secretkey = user.secretkey
        cls.account_d111a = Account.create(cls.apiclient, cls.acldata['accountD111A'], admin=False, domainid=cls.domain_111.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d111a)
        cls.user_d111a_apikey = user.apikey
        cls.user_d111a_secretkey = user.secretkey
        cls.account_d12a = Account.create(cls.apiclient, cls.acldata['accountD12A'], admin=False, domainid=cls.domain_12.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d12a)
        cls.user_d12a_apikey = user.apikey
        cls.user_d12a_secretkey = user.secretkey
        cls.account_d12b = Account.create(cls.apiclient, cls.acldata['accountD12B'], admin=False, domainid=cls.domain_12.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d12b)
        cls.user_d12b_apikey = user.apikey
        cls.user_d12b_secretkey = user.secretkey
        cls.account_d2a = Account.create(cls.apiclient, cls.acldata['accountD2'], admin=False, domainid=cls.domain_2.id)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_d2a)
        cls.user_d2a_apikey = user.apikey
        cls.user_d2a_secretkey = user.secretkey
        cls.account_a = Account.create(cls.apiclient, cls.acldata['accountROOTA'], admin=True)
        user = cls.generateKeysForUser(cls.apiclient, cls.account_a)
        cls.user_a_apikey = user.apikey
        cls.user_a_secretkey = user.secretkey
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.acldata['service_offering']['small'])
        cls.zone = get_zone(cls.apiclient, cls.testclient.getZoneForTests())
        cls.acldata['mode'] = cls.zone.networktype
        cls.template = get_template(cls.apiclient, cls.zone.id, cls.acldata['ostype'])
        cls.apiclient.connection.apiKey = cls.user_d1_apikey
        cls.apiclient.connection.securityKey = cls.user_d1_secretkey
        cls.vm_d1 = VirtualMachine.create(cls.apiclient, cls.acldata['vmD1'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d1a_apikey
        cls.apiclient.connection.securityKey = cls.user_d1a_secretkey
        cls.vm_d1a = VirtualMachine.create(cls.apiclient, cls.acldata['vmD1A'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d1b_apikey
        cls.apiclient.connection.securityKey = cls.user_d1b_secretkey
        cls.vm_d1b = VirtualMachine.create(cls.apiclient, cls.acldata['vmD1B'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d11_apikey
        cls.apiclient.connection.securityKey = cls.user_d11_secretkey
        cls.vm_d11 = VirtualMachine.create(cls.apiclient, cls.acldata['vmD11'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d11a_apikey
        cls.apiclient.connection.securityKey = cls.user_d11a_secretkey
        cls.vm_d11a = VirtualMachine.create(cls.apiclient, cls.acldata['vmD11A'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d11b_apikey
        cls.apiclient.connection.securityKey = cls.user_d11b_secretkey
        cls.vm_d11b = VirtualMachine.create(cls.apiclient, cls.acldata['vmD11B'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d111a_apikey
        cls.apiclient.connection.securityKey = cls.user_d111a_secretkey
        cls.vm_d111a = VirtualMachine.create(cls.apiclient, cls.acldata['vmD111A'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d12a_apikey
        cls.apiclient.connection.securityKey = cls.user_d12a_secretkey
        cls.vm_d12a = VirtualMachine.create(cls.apiclient, cls.acldata['vmD12A'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d12b_apikey
        cls.apiclient.connection.securityKey = cls.user_d12b_secretkey
        cls.vm_d12b = VirtualMachine.create(cls.apiclient, cls.acldata['vmD12B'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_d2a_apikey
        cls.apiclient.connection.securityKey = cls.user_d2a_secretkey
        cls.vm_d2 = VirtualMachine.create(cls.apiclient, cls.acldata['vmD2A'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.apiclient.connection.apiKey = cls.user_a_apikey
        cls.apiclient.connection.securityKey = cls.user_a_secretkey
        cls.vm_a = VirtualMachine.create(cls.apiclient, cls.acldata['vmROOTA'], zoneid=cls.zone.id, serviceofferingid=cls.service_offering.id, templateid=cls.template.id)
        cls.cleanup = [cls.account_a, cls.service_offering]
    except Exception as e:
        cls.domain_2.delete(cls.apiclient, cleanup='true')
        cls.domain_1.delete(cls.apiclient, cleanup='true')
        cleanup_resources(cls.apiclient, cls.cleanup)
        raise Exception(('Failed to create the setup required to execute the test cases: %s' % e))
