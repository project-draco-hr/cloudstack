{
  Account adminAccount=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  if ((adminAccount != null) && !getManagementServer().isChildDomain(adminAccount.getDomainId(),domainId)) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Failed to enable account " + accountName + " in domain "+ domainId+ ", permission denied.");
  }
  Account account=getManagementServer().findActiveAccount(accountName,domainId);
  if (account == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find active account with name " + accountName + " in domain "+ domainId);
  }
  if (account.getId().longValue() == Account.ACCOUNT_ID_SYSTEM) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"can not enable system account");
  }
  boolean success=true;
  try {
    success=getManagementServer().enableAccount(account.getId().longValue());
  }
 catch (  Exception ex) {
    s_logger.error("error enabling account " + accountName + " in domain "+ domainId,ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error enabling account " + accountName + " in domain "+ domainId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),Boolean.valueOf(success).toString()));
  return returnValues;
}
