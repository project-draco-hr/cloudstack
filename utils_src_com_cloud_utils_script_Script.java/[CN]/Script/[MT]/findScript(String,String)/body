{
  s_logger.debug("Looking for " + script + " in the classpath");
  URL url=ClassLoader.getSystemResource(script);
  s_logger.debug("System resource: " + url);
  File file=null;
  if (url != null) {
    file=new File(url.getFile());
    s_logger.debug("Absolute path =  " + file.getAbsolutePath());
    return file.getAbsolutePath();
  }
  if (path == null) {
    s_logger.warn("No search path specified, unable to look for " + script);
    return null;
  }
  path=path.replace("/",File.separator);
  if (path.endsWith(File.separator)) {
    url=Script.class.getClassLoader().getResource(path + script);
  }
 else {
    url=Script.class.getClassLoader().getResource(path + File.separator + script);
  }
  s_logger.debug("Classpath resource: " + url);
  if (url != null) {
    try {
      file=new File(new URI(url.toString()).getPath());
      s_logger.debug("Absolute path =  " + file.getAbsolutePath());
      return file.getAbsolutePath();
    }
 catch (    URISyntaxException e) {
      s_logger.warn("Unable to convert " + url.toString() + " to a URI");
    }
  }
  if (path.endsWith(File.separator)) {
    path=path.substring(0,path.lastIndexOf(File.separator));
  }
  if (path.startsWith(File.separator)) {
    file=new File(path + File.separator + script);
    return file.exists() ? file.getAbsolutePath() : null;
  }
  s_logger.debug("Looking for " + script);
  String search=null;
  for (int i=0; i < 3; i++) {
    if (i == 0) {
      String cp=Script.class.getResource(Script.class.getSimpleName() + ".class").toExternalForm();
      int begin=cp.indexOf(File.separator);
      if (begin < 0)       begin=cp.indexOf('/');
      int endBang=cp.lastIndexOf("!");
      int end=cp.lastIndexOf(File.separator,endBang);
      if (end < 0)       end=cp.lastIndexOf('/',endBang);
      if (end < 0)       cp=cp.substring(begin);
 else       cp=cp.substring(begin,end);
      s_logger.debug("Current binaries reside at " + cp);
      search=cp;
    }
 else     if (i == 1) {
      s_logger.debug("Searching in environment.properties");
      try {
        final File propsFile=PropertiesUtil.findConfigFile("environment.properties");
        if (propsFile == null) {
          s_logger.debug("environment.properties could not be opened");
        }
 else {
          final FileInputStream finputstream=new FileInputStream(propsFile);
          final Properties props=new Properties();
          props.load(finputstream);
          finputstream.close();
          search=props.getProperty("paths.script");
        }
      }
 catch (      IOException e) {
        s_logger.debug("environment.properties could not be opened");
        continue;
      }
      s_logger.debug("environment.properties says scripts should be in " + search);
    }
 else {
      s_logger.debug("Searching in the current directory");
      search=".";
    }
    search+=File.separatorChar + path + File.separator;
    do {
      search=search.substring(0,search.lastIndexOf(File.separator));
      file=new File(search + File.separator + script);
      s_logger.debug("Looking for " + script + " in "+ file.getAbsolutePath());
    }
 while (!file.exists() && search.lastIndexOf(File.separator) != -1);
    if (file.exists()) {
      return file.getAbsolutePath();
    }
  }
  search=System.getProperty("paths.script");
  search+=File.separatorChar + path + File.separator;
  do {
    search=search.substring(0,search.lastIndexOf(File.separator));
    file=new File(search + File.separator + script);
    s_logger.debug("Looking for " + script + " in "+ file.getAbsolutePath());
  }
 while (!file.exists() && search.lastIndexOf(File.separator) != -1);
  if (file.exists()) {
    return file.getAbsolutePath();
  }
  s_logger.warn("Unable to find script " + script);
  return null;
}
