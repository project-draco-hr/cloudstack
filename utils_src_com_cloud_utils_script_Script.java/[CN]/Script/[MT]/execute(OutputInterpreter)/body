{
  String[] command=_command.toArray(new String[_command.size()]);
  if (_logger.isDebugEnabled()) {
    _logger.debug("Executing: " + buildCommandLine(command));
  }
  try {
    ProcessBuilder pb=new ProcessBuilder(command);
    pb.redirectErrorStream(true);
    if (_workDir != null)     pb.directory(new File(_workDir));
    _process=pb.start();
    if (_process == null) {
      _logger.warn("Unable to execute: " + buildCommandLine(command));
      return "Unable to execute the command: " + command[0];
    }
    BufferedReader ir=new BufferedReader(new InputStreamReader(_process.getInputStream()));
    _thread=Thread.currentThread();
    ScheduledFuture<String> future=null;
    if (_timeout > 0) {
      future=s_executors.schedule(this,_timeout,TimeUnit.MILLISECONDS);
    }
    Task task=null;
    if (interpreter.drain()) {
      task=new Task(interpreter,ir);
      s_executors.execute(task);
    }
    try {
      if (_process.waitFor() == 0) {
        _logger.debug("Execution is successful.");
        return interpreter.drain() ? task.getResult() : interpreter.interpret(ir);
      }
    }
 catch (    InterruptedException e) {
      TimedOutLogger log=new TimedOutLogger(_process);
      Task timedoutTask=new Task(log,ir);
      timedoutTask.run();
      if (!_passwordCommand) {
        _logger.warn("Timed out: " + buildCommandLine(command) + ".  Output is: "+ timedoutTask.getResult());
      }
 else {
        _logger.warn("Timed out: " + buildCommandLine(command));
      }
      return ERR_TIMEOUT;
    }
 finally {
      if (future != null) {
        future.cancel(false);
      }
      Thread.interrupted();
    }
    _logger.debug("Exit value is " + _process.exitValue());
    BufferedReader reader=new BufferedReader(new InputStreamReader(_process.getInputStream()),128);
    String error=interpreter.processError(reader);
    if (_logger.isDebugEnabled()) {
      _logger.debug(error);
    }
    return error;
  }
 catch (  SecurityException ex) {
    _logger.warn("Security Exception....not running as root?",ex);
    StringWriter writer=new StringWriter();
    ex.printStackTrace(new PrintWriter(writer));
    return writer.toString();
  }
catch (  Exception ex) {
    _logger.warn("Exception: " + buildCommandLine(command),ex);
    StringWriter writer=new StringWriter();
    ex.printStackTrace(new PrintWriter(writer));
    return writer.toString();
  }
 finally {
    if (_process != null) {
      try {
        _process.getErrorStream().close();
      }
 catch (      IOException ex) {
      }
      try {
        _process.getOutputStream().close();
      }
 catch (      IOException ex) {
      }
      try {
        _process.getInputStream().close();
      }
 catch (      IOException ex) {
      }
      _process.destroy();
    }
  }
}
