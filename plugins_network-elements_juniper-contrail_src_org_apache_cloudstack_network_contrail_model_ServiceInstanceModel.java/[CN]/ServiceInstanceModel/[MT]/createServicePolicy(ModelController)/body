{
  NetworkPolicy policy=new NetworkPolicy();
  policy.setParent(_serviceInstance.getParent());
  policy.setName(_serviceInstance.getName());
  PolicyEntriesType policy_map=new PolicyEntriesType();
  List<PolicyRuleType.AddressType> srcList=new ArrayList<PolicyRuleType.AddressType>();
  srcList.add(new PolicyRuleType.AddressType(null,_leftName,null));
  List<PolicyRuleType.AddressType> dstList=new ArrayList<PolicyRuleType.AddressType>();
  dstList.add(new PolicyRuleType.AddressType(null,_rightName,null));
  List<String> siList=new ArrayList<String>();
  siList.add(StringUtils.join(_serviceInstance.getQualifiedName(),':'));
  List<PolicyRuleType.PortType> portAny=new ArrayList<PolicyRuleType.PortType>();
  portAny.add(new PolicyRuleType.PortType(0,65535));
  PolicyRuleType rule=new PolicyRuleType(new PolicyRuleType.SequenceType(1,0),null,"<>","any",srcList,portAny,null,dstList,portAny,new PolicyRuleType.ActionListType("pass","in-network",siList,null));
  policy_map.addPolicyRule(rule);
  policy.setEntries(policy_map);
  try {
    ApiConnector api=controller.getApiAccessor();
    if (!api.create(policy)) {
      throw new CloudRuntimeException("Unable to create network-policy");
    }
  }
 catch (  IOException ex) {
    throw new CloudRuntimeException("Unable to create network-policy",ex);
  }
  return policy;
}
