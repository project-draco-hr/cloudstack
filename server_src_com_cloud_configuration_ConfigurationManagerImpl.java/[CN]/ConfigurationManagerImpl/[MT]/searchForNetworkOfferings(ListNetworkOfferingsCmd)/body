{
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue("sortkey.algorithm"));
  isAscending=isAscending == null ? Boolean.TRUE : isAscending;
  final Filter searchFilter=new Filter(NetworkOfferingVO.class,"sortKey",isAscending,null,null);
  final Account caller=CallContext.current().getCallingAccount();
  final SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  final Long id=cmd.getId();
  final Object name=cmd.getNetworkOfferingName();
  final Object displayText=cmd.getDisplayText();
  final Object trafficType=cmd.getTrafficType();
  final Object isDefault=cmd.getIsDefault();
  final Object specifyVlan=cmd.getSpecifyVlan();
  final Object availability=cmd.getAvailability();
  final Object state=cmd.getState();
  final Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  final Long networkId=cmd.getNetworkId();
  final String guestIpType=cmd.getGuestIpType();
  final List<String> supportedServicesStr=cmd.getSupportedServices();
  final Object specifyIpRanges=cmd.getSpecifyIpRanges();
  final String tags=cmd.getTags();
  final Boolean isTagged=cmd.isTagged();
  final Boolean forVpc=cmd.getForVpc();
  if (zoneId != null) {
    zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException("Unable to find the zone by id=" + zoneId);
    }
  }
  final Object keyword=cmd.getKeyword();
  if (keyword != null) {
    final SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr("displayText",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.LIKE,"%" + name + "%");
  }
  if (guestIpType != null) {
    sc.addAnd("guestType",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd("displayText",SearchCriteria.Op.LIKE,"%" + displayText + "%");
  }
  if (trafficType != null) {
    sc.addAnd("trafficType",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd("isDefault",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd("specifyVlan",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd("availability",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd("state",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd("specifyIpRanges",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  sc.addAnd("systemOnly",SearchCriteria.Op.EQ,false);
  Network network=null;
  if (networkId != null) {
    network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find the network by id=" + networkId);
    }
    final NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException("Can't update system networks");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    final List<Long> offeringIds=_networkModel.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd("id",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  if (id != null) {
    sc.addAnd("id",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd("tags",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd("tags",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd("tags",SearchCriteria.Op.NULL);
    }
  }
  final List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  final Boolean sourceNatSupported=cmd.getSourceNatSupported();
  final List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    final List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      final PhysicalNetworkVO pNtwk : pNtwks) {
        final List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException("Tags are not defined for physical network in the zone id=" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  final boolean listBySupportedServices=supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();
  final boolean checkIfProvidersAreEnabled=zoneId != null;
  final boolean parseOfferings=listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;
  if (parseOfferings) {
    final List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      final String supportedServiceStr : supportedServicesStr) {
        final Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException("Invalid service specified " + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    final NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkModel.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkModel.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported;
      }
      if (forVpc != null) {
        addOffering=addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();
      }
 else       if (network != null) {
        addOffering=addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    final List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(supportedOfferings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      final Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(supportedOfferings,supportedOfferings.size());
  }
 else {
    final List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(offerings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      final Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(offerings,offerings.size());
  }
}
