{
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue("sortkey.algorithm"));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,"sortKey",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=UserContext.current().getCaller();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  String tags=cmd.getTags();
  Boolean isTagged=cmd.isTagged();
  if (zoneId != null) {
    zone=getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException("Unable to find the zone by id=" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr("displayText",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.LIKE,"%" + name + "%");
  }
  if (guestIpType != null) {
    sc.addAnd("guestType",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd("displayText",SearchCriteria.Op.LIKE,"%" + displayText + "%");
  }
  if (trafficType != null) {
    sc.addAnd("trafficType",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd("isDefault",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd("specifyVlan",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd("availability",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd("state",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd("specifyIpRanges",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new ArrayList<NetworkOffering>();
    }
  }
  sc.addAnd("systemOnly",SearchCriteria.Op.EQ,false);
  if (networkId != null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find the network by id=" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException("Can't update system networks");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkMgr.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd("id",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new ArrayList<NetworkOffering>();
    }
  }
  if (id != null) {
    sc.addAnd("id",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd("tags",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd("tags",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd("tags",SearchCriteria.Op.NULL);
    }
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      PhysicalNetworkVO pNtwk : pNtwks) {
        List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException("Tags are not defined for physical network in the zone id=" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException("Invalid service specified " + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkMgr.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkMgr.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    return supportedOfferings;
  }
 else {
    return offerings;
  }
}
