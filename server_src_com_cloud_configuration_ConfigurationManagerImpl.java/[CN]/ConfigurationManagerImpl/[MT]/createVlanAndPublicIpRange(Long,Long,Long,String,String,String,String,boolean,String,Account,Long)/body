{
  if (podId != null && ((_podDao.findById(podId)) == null)) {
    throw new InvalidParameterValueException("Please specify a valid pod.");
  }
  if (podId != null && _podDao.findById(podId).getDataCenterId() != zoneId) {
    throw new InvalidParameterValueException("Pod id=" + podId + " doesn't belong to zone id="+ zoneId);
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  if (zone.getNetworkType() == NetworkType.Advanced && vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork) {
    throw new InvalidParameterValueException("Direct untagged network is not supported for the zone " + zone.getId() + " of type "+ zone.getNetworkType());
  }
 else   if (zone.getNetworkType() == NetworkType.Basic && !(vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork)) {
    throw new InvalidParameterValueException("Only direct untagged network is supported in the zone " + zone.getId() + " of type "+ zone.getNetworkType());
  }
  if (zone.getVnet() == null && forVirtualNetwork) {
    throw new InvalidParameterValueException("Can't add virtual network to the zone id=" + zone.getId() + " as zone doesn't have guest vlan configured");
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  checkAccess(account,zone);
  boolean associateIpRangeToAccount=false;
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(" IPResourceLimit " + ipResourceLimit + " accountIpRange "+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(" Public IP Resource Limit is set to " + ipResourceLimit + " which is less than the IP range of "+ accountIpRange+ " provided");
      }
      associateIpRangeToAccount=true;
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (account != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException("Direct Attached IP ranges for an account must be tagged.");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException("Zone " + zone.getName() + " already has pod-wide IP ranges. A zone may contain either pod-wide IP ranges or account-wide IP ranges, but not both.");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException("Direct Attached IP ranges for a pod must be untagged.");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException("Zone " + zone.getName() + " already has account-wide IP ranges. A zone may contain either pod-wide IP ranges or account-wide IP ranges, but not both.");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException("Please specify a valid IP range type. Valid types are: " + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException("Please specify a valid gateway");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException("Please specify a valid netmask");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  if (guestNetworkCidr != null) {
    String[] cidrPair=guestNetworkCidr.split("\\/");
    String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
    long guestCidrSize=Long.parseLong(cidrPair[1]);
    long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
    long cidrSizeToUse=-1;
    if (vlanCidrSize < guestCidrSize) {
      cidrSizeToUse=vlanCidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
    if (newVlanSubnet.equals(guestSubnet)) {
      throw new InvalidParameterValueException("The new IP range you have specified has the same subnet as the guest network in zone: " + zone.getName() + ". Please specify a different gateway/netmask.");
    }
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split("\\-");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet) && !allowIpRangeOverlap(vlan,forVirtualNetwork,networkId)) {
      throw new InvalidParameterValueException("The IP range with tag: " + vlan.getVlanTag() + " in zone "+ zone.getName()+ " has the same subnet. Please specify a different gateway/netmask.");
    }
    if (vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException("The IP range with tag: " + vlan.getVlanTag() + " already has IPs that overlap with the new range. Please specify a different start IP/end IP.");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException("The IP range with tag: " + vlan.getVlanTag() + " has already been added with gateway "+ otherVlanGateway+ ". Please specify a different tag.");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException("The VLAN tag " + vlanId + " is already being used for the guest network in zone "+ zone.getName());
  }
  if (zone.getNetworkType() == NetworkType.Basic && vlanId.equalsIgnoreCase(Vlan.UNTAGGED) && podId != null) {
    List<VlanVO> podVlans=_vlanDao.listVlansForPodByType(podId,VlanType.DirectAttached);
    if (podVlans != null && !podVlans.isEmpty()) {
      VlanVO podVlan=podVlans.get(0);
      if (!podVlan.getVlanNetmask().equals(vlanNetmask)) {
        throw new InvalidParameterValueException("Vlan netmask is different from the netmask of Untagged vlan id=" + podVlan.getId() + " existing in the pod "+ podId);
      }
 else       if (!podVlan.getVlanGateway().equals(vlanGateway)) {
        throw new InvalidParameterValueException("Vlan gateway is different from the gateway of Untagged vlan id=" + podVlan.getId() + " existing in the pod "+ podId);
      }
    }
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+="-" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId);
  vlan=_vlanDao.persist(vlan);
  if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId(),networkId)) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new CloudRuntimeException("Failed to save IP range. Please contact Cloud Support.");
  }
  if (account != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(account.getId(),vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg="Successfully created new IP range (tag = " + vlanId + ", gateway = "+ vlanGateway+ ", netmask = "+ vlanNetmask+ ", start IP = "+ startIP;
  if (endIP != null) {
    eventMsg+=", end IP = " + endIP;
  }
  eventMsg+=".";
  if (associateIpRangeToAccount) {
    _networkMgr.associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId());
  }
  return vlan;
}
