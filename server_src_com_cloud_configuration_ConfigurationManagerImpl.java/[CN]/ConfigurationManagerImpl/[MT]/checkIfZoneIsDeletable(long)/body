{
  final List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  final List<String> host=new ArrayList<String>();
  host.add(0,"host");
  host.add(1,"data_center_id");
  host.add(2,"there are servers running in this zone");
  tablesToCheck.add(host);
  final List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,"host_pod_ref");
  hostPodRef.add(1,"data_center_id");
  hostPodRef.add(2,"there are pods in this zone");
  tablesToCheck.add(hostPodRef);
  final List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,"op_dc_ip_address_alloc");
  privateIP.add(1,"data_center_id");
  privateIP.add(2,"there are private IP addresses allocated for this zone");
  tablesToCheck.add(privateIP);
  final List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,"user_ip_address");
  publicIP.add(1,"data_center_id");
  publicIP.add(2,"there are public IP addresses allocated for this zone");
  tablesToCheck.add(publicIP);
  final List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,"vm_instance");
  vmInstance.add(1,"data_center_id");
  vmInstance.add(2,"there are virtual machines running in this zone");
  tablesToCheck.add(vmInstance);
  final List<String> volumes=new ArrayList<String>();
  volumes.add(0,"volumes");
  volumes.add(1,"data_center_id");
  volumes.add(2,"there are storage volumes for this zone");
  tablesToCheck.add(volumes);
  final List<String> physicalNetworks=new ArrayList<String>();
  physicalNetworks.add(0,"physical_network");
  physicalNetworks.add(1,"data_center_id");
  physicalNetworks.add(2,"there are physical networks in this zone");
  tablesToCheck.add(physicalNetworks);
  final List<String> vmwareDcs=new ArrayList<String>();
  vmwareDcs.add(0,"vmware_data_center_zone_map");
  vmwareDcs.add(1,"zone_id");
  vmwareDcs.add(2,"there are VMware datacenters associated with this zone. Remove VMware DC from this zone.");
  tablesToCheck.add(vmwareDcs);
  for (  final List<String> table : tablesToCheck) {
    final String tableName=table.get(0);
    final String column=table.get(1);
    final String errorMsg=table.get(2);
    final String dbName="cloud";
    String selectSql="SELECT * FROM `" + dbName + "`.`"+ tableName+ "` WHERE "+ column+ " = ?";
    if (tableName.equals("op_dc_vnet_alloc")) {
      selectSql+=" AND taken IS NOT NULL";
    }
    if (tableName.equals("user_ip_address")) {
      selectSql+=" AND state!='Free'";
    }
    if (tableName.equals("op_dc_ip_address_alloc")) {
      selectSql+=" AND taken IS NOT NULL";
    }
    if (tableName.equals("host_pod_ref") || tableName.equals("host") || tableName.equals("volumes")|| tableName.equals("physical_network")) {
      selectSql+=" AND removed is NULL";
    }
    if (tableName.equals("vm_instance")) {
      selectSql+=" AND state != '" + VirtualMachine.State.Expunging.toString() + "' AND removed IS NULL";
    }
    final TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      final PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      final ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException("The zone is not deletable because " + errorMsg);
      }
    }
 catch (    final SQLException ex) {
      throw new CloudRuntimeException("The Management Server failed to detect if zone is deletable. Please contact Cloud Support.");
    }
  }
}
