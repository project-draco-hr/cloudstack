{
  final String multicastRateStr=_configDao.getValue("multicast.throttling.rate");
  final int multicastRate=multicastRateStr == null ? 10 : Integer.parseInt(multicastRateStr);
  tags=StringUtils.cleanupTags(tags);
  if (!specifyVlan && type == GuestType.Shared) {
    throw new InvalidParameterValueException("SpecifyVlan should be true if network offering's type is " + type);
  }
  if (specifyIpRanges) {
    if (type == GuestType.Isolated) {
      if (serviceProviderMap.containsKey(Service.SourceNat)) {
        throw new InvalidParameterValueException("SpecifyIpRanges can only be true for Shared network offerings and Isolated with no SourceNat service");
      }
    }
  }
 else {
    if (type == GuestType.Shared) {
      throw new InvalidParameterValueException("SpecifyIpRanges should always be true for Shared network offerings");
    }
  }
  if (isPersistent && type == GuestType.Shared) {
    throw new InvalidParameterValueException("isPersistent should be false if network offering's type is " + type);
  }
  if (availability == NetworkOffering.Availability.Required) {
    final boolean canOffBeRequired=type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat);
    if (!canOffBeRequired) {
      throw new InvalidParameterValueException("Availability can be " + NetworkOffering.Availability.Required + " only for networkOfferings of type "+ GuestType.Isolated+ " and with "+ Service.SourceNat.getName()+ " enabled");
    }
    final List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (!offerings.isEmpty()) {
      throw new InvalidParameterValueException("System already has network offering id=" + offerings.get(0).getId() + " with availability "+ Availability.Required);
    }
  }
  boolean dedicatedLb=false;
  boolean elasticLb=false;
  boolean sharedSourceNat=false;
  boolean redundantRouter=false;
  boolean elasticIp=false;
  boolean associatePublicIp=false;
  boolean inline=false;
  boolean publicLb=false;
  boolean internalLb=false;
  boolean strechedL2Subnet=false;
  if (serviceCapabilityMap != null && !serviceCapabilityMap.isEmpty()) {
    final Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
    if (lbServiceCapabilityMap != null && !lbServiceCapabilityMap.isEmpty()) {
      final String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
      if (isolationCapability != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.SupportedLBIsolation,isolationCapability);
        dedicatedLb=isolationCapability.contains("dedicated");
      }
 else {
        dedicatedLb=true;
      }
      final String param=lbServiceCapabilityMap.get(Capability.ElasticLb);
      if (param != null) {
        elasticLb=param.contains("true");
      }
      final String inlineMode=lbServiceCapabilityMap.get(Capability.InlineMode);
      if (inlineMode != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.InlineMode,inlineMode);
        inline=inlineMode.contains("true");
      }
 else {
        inline=false;
      }
      final String publicLbStr=lbServiceCapabilityMap.get(Capability.LbSchemes);
      if (serviceProviderMap.containsKey(Service.Lb)) {
        if (publicLbStr != null) {
          _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.LbSchemes,publicLbStr);
          internalLb=publicLbStr.contains("internal");
          publicLb=publicLbStr.contains("public");
        }
      }
    }
    if (publicLb && internalLb) {
      throw new InvalidParameterValueException("Public lb and internal lb can't be enabled at the same time on the offering");
    }
    final Map<Capability,String> sourceNatServiceCapabilityMap=serviceCapabilityMap.get(Service.SourceNat);
    if (sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
      final String sourceNatType=sourceNatServiceCapabilityMap.get(Capability.SupportedSourceNatTypes);
      if (sourceNatType != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.SupportedSourceNatTypes,sourceNatType);
        sharedSourceNat=sourceNatType.contains("perzone");
      }
      final String param=sourceNatServiceCapabilityMap.get(Capability.RedundantRouter);
      if (param != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.RedundantRouter,param);
        redundantRouter=param.contains("true");
      }
    }
    final Map<Capability,String> staticNatServiceCapabilityMap=serviceCapabilityMap.get(Service.StaticNat);
    if (staticNatServiceCapabilityMap != null && !staticNatServiceCapabilityMap.isEmpty()) {
      final String param=staticNatServiceCapabilityMap.get(Capability.ElasticIp);
      if (param != null) {
        elasticIp=param.contains("true");
        final String associatePublicIP=staticNatServiceCapabilityMap.get(Capability.AssociatePublicIP);
        if (associatePublicIP != null) {
          associatePublicIp=associatePublicIP.contains("true");
        }
      }
    }
    final Map<Capability,String> connectivityServiceCapabilityMap=serviceCapabilityMap.get(Service.Connectivity);
    if (connectivityServiceCapabilityMap != null && !connectivityServiceCapabilityMap.isEmpty()) {
      final String value=connectivityServiceCapabilityMap.get(Capability.StretchedL2Subnet);
      if ("true".equalsIgnoreCase(value)) {
        strechedL2Subnet=true;
      }
    }
  }
  if (serviceProviderMap != null && serviceProviderMap.containsKey(Service.Lb) && !internalLb && !publicLb) {
    publicLb=true;
  }
  final NetworkOfferingVO offeringFinal=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,isDefault,availability,tags,type,conserveMode,dedicatedLb,sharedSourceNat,redundantRouter,elasticIp,elasticLb,specifyIpRanges,inline,isPersistent,associatePublicIp,publicLb,internalLb,egressDefaultPolicy,strechedL2Subnet);
  if (serviceOfferingId != null) {
    offeringFinal.setServiceOfferingId(serviceOfferingId);
  }
  if (details != null) {
    validateNtwkOffDetails(details,serviceProviderMap);
  }
  return Transaction.execute(new TransactionCallback<NetworkOfferingVO>(){
    @Override public NetworkOfferingVO doInTransaction(    final TransactionStatus status){
      NetworkOfferingVO offering=offeringFinal;
      logger.debug("Adding network offering " + offering);
      offering.setConcurrentConnections(maxconn);
      offering.setKeepAliveEnabled(enableKeepAlive);
      offering=_networkOfferingDao.persist(offering,details);
      if (serviceProviderMap != null) {
        for (        final Network.Service service : serviceProviderMap.keySet()) {
          final Set<Provider> providers=serviceProviderMap.get(service);
          if (providers != null && !providers.isEmpty()) {
            boolean vpcOff=false;
            for (            final Network.Provider provider : providers) {
              if (provider == Provider.VPCVirtualRouter) {
                vpcOff=true;
              }
              final NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
              _ntwkOffServiceMapDao.persist(offService);
              logger.trace("Added service for the network offering: " + offService + " with provider "+ provider.getName());
            }
            if (vpcOff) {
              final List<Service> supportedSvcs=new ArrayList<Service>();
              supportedSvcs.addAll(serviceProviderMap.keySet());
              _vpcMgr.validateNtwkOffForVpc(offering,supportedSvcs);
            }
          }
 else {
            final NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,null);
            _ntwkOffServiceMapDao.persist(offService);
            logger.trace("Added service for the network offering: " + offService + " with null provider");
          }
        }
      }
      return offering;
    }
  }
);
}
