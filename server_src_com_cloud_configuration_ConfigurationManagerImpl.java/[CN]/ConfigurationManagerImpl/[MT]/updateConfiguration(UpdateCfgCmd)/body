{
  final Long userId=CallContext.current().getCallingUserId();
  final String name=cmd.getCfgName();
  String value=cmd.getValue();
  final Long zoneId=cmd.getZoneId();
  final Long clusterId=cmd.getClusterId();
  final Long storagepoolId=cmd.getStoragepoolId();
  final Long accountId=cmd.getAccountId();
  final Long imageStoreId=cmd.getImageStoreId();
  CallContext.current().setEventDetails(" Name: " + name + " New Value: "+ (name.toLowerCase().contains("password") ? "*****" : value == null ? "" : value));
  final ConfigurationVO config=_configDao.findByName(name);
  String catergory=null;
  if (config == null) {
    if (_configDepot.get(name) == null) {
      s_logger.warn("Probably the component manager where configuration variable " + name + " is defined needs to implement Configurable interface");
      throw new InvalidParameterValueException("Config parameter with name " + name + " doesn't exist");
    }
    catergory=_configDepot.get(name).category();
  }
 else {
    catergory=config.getCategory();
  }
  if (value == null) {
    return _configDao.findByName(name);
  }
  value=value.trim();
  if (value.isEmpty() || value.equals("null")) {
    value=null;
  }
  String scope=null;
  Long id=null;
  int paramCountCheck=0;
  if (zoneId != null) {
    scope=ConfigKey.Scope.Zone.toString();
    id=zoneId;
    paramCountCheck++;
  }
  if (clusterId != null) {
    scope=ConfigKey.Scope.Cluster.toString();
    id=clusterId;
    paramCountCheck++;
  }
  if (accountId != null) {
    scope=ConfigKey.Scope.Account.toString();
    id=accountId;
    paramCountCheck++;
  }
  if (storagepoolId != null) {
    scope=ConfigKey.Scope.StoragePool.toString();
    id=storagepoolId;
    paramCountCheck++;
  }
  if (imageStoreId != null) {
    scope=ConfigKey.Scope.ImageStore.toString();
    id=imageStoreId;
    paramCountCheck++;
  }
  if (paramCountCheck > 1) {
    throw new InvalidParameterValueException("cannot handle multiple IDs, provide only one ID corresponding to the scope");
  }
  final String updatedValue=updateConfiguration(userId,name,catergory,value,scope,id);
  if (value == null && updatedValue == null || updatedValue.equalsIgnoreCase(value)) {
    return _configDao.findByName(name);
  }
 else {
    throw new CloudRuntimeException("Unable to update configuration parameter " + name);
  }
}
