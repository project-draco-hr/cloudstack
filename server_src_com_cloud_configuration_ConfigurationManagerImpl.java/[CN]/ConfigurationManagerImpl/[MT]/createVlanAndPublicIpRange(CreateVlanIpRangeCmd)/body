{
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String vlanGateway=cmd.getGateway();
  String vlanNetmask=cmd.getNetmask();
  Long userId=UserContext.current().getCallerUserId();
  String vlanId=cmd.getVlan();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Long networkId=cmd.getNetworkID();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  String accountName=cmd.getAccountName();
  Long projectId=cmd.getProjectId();
  Long domainId=cmd.getDomainId();
  String startIPv6=cmd.getStartIpv6();
  String endIPv6=cmd.getEndIpv6();
  String ip6Gateway=cmd.getIp6Gateway();
  String ip6Cidr=cmd.getIp6Cidr();
  Account vlanOwner=null;
  boolean ipv4=(startIP != null);
  boolean ipv6=(startIPv6 != null);
  if (!ipv4 && !ipv6) {
    throw new InvalidParameterValueException("StartIP or StartIPv6 is missing in the parameters!");
  }
  if (ipv4) {
    if (endIP == null && startIP != null) {
      endIP=startIP;
    }
  }
  if (ipv6) {
    if (endIPv6 == null && startIPv6 != null) {
      endIPv6=startIPv6;
    }
  }
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException("Account and projectId are mutually exclusive");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
    if (vlanOwner == null) {
      throw new InvalidParameterValueException("Please specify a valid account.");
    }
  }
  Network network=null;
  if (networkId != null) {
    network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkId);
    }
 else {
      zoneId=network.getDataCenterId();
      physicalNetworkId=network.getPhysicalNetworkId();
    }
  }
 else   if (ipv6) {
    throw new InvalidParameterValueException("Only support IPv6 on extending existed network");
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (ipv6) {
    if (network.getGuestType() != GuestType.Shared || zone.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException("Only support IPv6 on extending existed share network without SG");
    }
  }
  PhysicalNetworkVO pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException("Unable to find Physical Network with id=" + physicalNetworkId);
    }
    if (zoneId == null) {
      zoneId=pNtwk.getDataCenterId();
    }
  }
 else {
    if (zoneId == null) {
      throw new InvalidParameterValueException("");
    }
    if (network != null && network.getPhysicalNetworkId() != null) {
      physicalNetworkId=network.getPhysicalNetworkId();
    }
 else {
      if (forVirtualNetwork) {
        physicalNetworkId=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Public).getId();
      }
 else {
        if (zone.getNetworkType() == DataCenter.NetworkType.Basic) {
          physicalNetworkId=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Guest).getId();
        }
 else         if (zone.getNetworkType() == DataCenter.NetworkType.Advanced) {
          if (zone.isSecurityGroupEnabled()) {
            physicalNetworkId=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Guest).getId();
          }
 else {
            throw new InvalidParameterValueException("Physical Network Id is null, please provide the Network id for Direct vlan creation ");
          }
        }
      }
    }
  }
  Account caller=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (zone.isSecurityGroupEnabled() && zone.getNetworkType() != DataCenter.NetworkType.Basic && forVirtualNetwork) {
    throw new InvalidParameterValueException("Can't add virtual ip range into a zone with security group enabled");
  }
  if (forVirtualNetwork) {
    if (network == null) {
      networkId=_networkModel.getSystemNetworkByZoneAndTrafficType(zoneId,TrafficType.Public).getId();
      network=_networkModel.getNetwork(networkId);
    }
 else     if (network.getGuestType() != null || network.getTrafficType() != TrafficType.Public) {
      throw new InvalidParameterValueException("Can't find Public network by id=" + networkId);
    }
  }
 else {
    if (network == null) {
      if (zone.getNetworkType() == DataCenter.NetworkType.Basic) {
        networkId=_networkModel.getExclusiveGuestNetwork(zoneId).getId();
        network=_networkModel.getNetwork(networkId);
      }
 else {
        network=_networkModel.getNetworkWithSecurityGroupEnabled(zoneId);
        if (network == null) {
          throw new InvalidParameterValueException("Nework id is required for Direct vlan creation ");
        }
        networkId=network.getId();
        zoneId=network.getDataCenterId();
      }
    }
 else     if (network.getGuestType() == null || network.getGuestType() == Network.GuestType.Isolated) {
      throw new InvalidParameterValueException("Can't create direct vlan for network id=" + networkId + " with type: "+ network.getGuestType());
    }
  }
  if (!network.getSpecifyIpRanges()) {
    throw new InvalidParameterValueException("Network " + network + " doesn't support adding ip ranges");
  }
  if (zone.getNetworkType() == DataCenter.NetworkType.Advanced) {
    if (network.getTrafficType() == TrafficType.Guest) {
      if (network.getGuestType() != GuestType.Shared) {
        throw new InvalidParameterValueException("Can execute createVLANIpRanges on shared guest network, but type of this guest network " + network.getId() + " is "+ network.getGuestType());
      }
      List<VlanVO> vlans=_vlanDao.listVlansByNetworkId(network.getId());
      if (vlans != null && vlans.size() > 0) {
        VlanVO vlan=vlans.get(0);
        if (vlanId == null) {
          vlanId=vlan.getVlanTag();
        }
 else         if (vlan.getVlanTag() != vlanId) {
          throw new InvalidParameterValueException("there is already one vlan " + vlan.getVlanTag() + " on network :"+ +network.getId()+ ", only one vlan is allowed on guest network");
        }
        if (ipv4) {
          vlanGateway=vlan.getVlanGateway();
          vlanNetmask=vlan.getVlanNetmask();
          if (!NetUtils.sameSubnet(startIP,vlanGateway,vlanNetmask)) {
            throw new InvalidParameterValueException("Start ip is not in vlan range!");
          }
          if (!NetUtils.sameSubnet(endIP,vlanGateway,vlanNetmask)) {
            throw new InvalidParameterValueException("End ip is not in vlan range!");
          }
        }
        if (ipv6) {
          if (ip6Gateway != null && !ip6Gateway.equals(network.getIp6Gateway())) {
            throw new InvalidParameterValueException("The input gateway " + ip6Gateway + " is not same as network gateway "+ network.getIp6Gateway());
          }
          if (ip6Cidr != null && !ip6Cidr.equals(network.getIp6Cidr())) {
            throw new InvalidParameterValueException("The input cidr " + ip6Cidr + " is not same as network ciddr "+ network.getIp6Cidr());
          }
          ip6Gateway=network.getIp6Gateway();
          ip6Cidr=network.getIp6Cidr();
          _networkModel.checkIp6Parameters(startIPv6,endIPv6,ip6Gateway,ip6Cidr);
        }
      }
    }
 else     if (network.getTrafficType() == TrafficType.Management) {
      throw new InvalidParameterValueException("Cannot execute createVLANIpRanges on management network");
    }
  }
  if (zoneId == null || (ipv4 && (vlanGateway == null || vlanNetmask == null)) || (ipv6 && (ip6Gateway == null || ip6Cidr == null))) {
    throw new InvalidParameterValueException("Gateway, netmask and zoneId have to be passed in for virtual and direct untagged networks");
  }
  boolean associateIpRangeToAccount=false;
  if (forVirtualNetwork) {
    if (vlanOwner != null) {
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      _resourceLimitMgr.checkResourceLimit(vlanOwner,ResourceType.public_ip,accountIpRange);
      associateIpRangeToAccount=true;
    }
  }
  if (ipv4) {
    checkOverlapPrivateIpRange(zoneId,startIP,endIP);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Vlan vlan=createVlanAndPublicIpRange(zoneId,networkId,physicalNetworkId,forVirtualNetwork,podId,startIP,endIP,vlanGateway,vlanNetmask,vlanId,vlanOwner,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
  if (associateIpRangeToAccount) {
    _networkMgr.associateIpAddressListToAccount(userId,vlanOwner.getId(),zoneId,vlan.getId(),null);
  }
  txn.commit();
  if (associateIpRangeToAccount) {
    if (network.getState() == Network.State.Implemented) {
      s_logger.debug("Applying ip associations for vlan id=" + vlanId + " in network "+ network);
      if (!_networkMgr.applyIpAssociations(network,false)) {
        s_logger.warn("Failed to apply ip associations for vlan id=1 as a part of add vlan range for account id=" + vlanOwner.getId());
      }
    }
 else {
      s_logger.trace("Network id=" + network.getId() + " is not Implemented, no need to apply ipAssociations");
    }
  }
  return vlan;
}
