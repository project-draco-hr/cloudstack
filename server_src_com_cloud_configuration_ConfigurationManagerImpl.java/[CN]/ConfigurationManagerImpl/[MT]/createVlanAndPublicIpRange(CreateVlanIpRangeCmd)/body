{
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String vlanGateway=cmd.getGateway();
  String vlanNetmask=cmd.getNetmask();
  Long userId=UserContext.current().getCallerUserId();
  String vlanId=cmd.getVlan();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Long networkId=cmd.getNetworkID();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account account=null;
  if ((accountName != null) && (domainId != null)) {
    account=_accountDao.findActiveAccount(accountName,domainId);
    if (account == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid account.");
    }
  }
  Network network=null;
  if (networkId != null) {
    network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkId);
    }
 else {
      zoneId=network.getDataCenterId();
    }
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (forVirtualNetwork) {
    if (network == null) {
      networkId=_networkMgr.getSystemNetworkByZoneAndTrafficType(zoneId,TrafficType.Public).getId();
    }
 else     if (network.getGuestType() != null || network.getTrafficType() != TrafficType.Public) {
      throw new InvalidParameterValueException("Can't find Public network by id=" + networkId);
    }
  }
 else {
    if (network == null) {
      if (zone.getNetworkType() == DataCenter.NetworkType.Basic) {
        networkId=_networkMgr.getSystemNetworkByZoneAndTrafficType(zoneId,TrafficType.Guest).getId();
      }
 else {
        throw new InvalidParameterValueException("Nework id is required for Direct vlan creation ");
      }
    }
 else     if (network.getGuestType() == null || network.getGuestType() == GuestIpType.Virtual) {
      throw new InvalidParameterValueException("Can't create direct vlan for network id=" + networkId + " with GuestType: "+ network.getGuestType());
    }
  }
  if (endIP == null && startIP != null) {
    endIP=startIP;
  }
  if (forVirtualNetwork || zone.getNetworkType() == DataCenter.NetworkType.Basic) {
    if (vlanGateway == null || vlanNetmask == null || zoneId == null) {
      throw new InvalidParameterValueException("Gateway, netmask and zoneId have to be passed in for virtual and direct untagged networks");
    }
  }
 else {
    String networkCidr=network.getCidr();
    String networkGateway=network.getGateway();
    Long networkZoneId=network.getDataCenterId();
    String networkNetmask=NetUtils.getCidrNetmask(networkCidr);
    if (!NetUtils.sameSubnet(startIP,networkGateway,networkNetmask)) {
      throw new InvalidParameterValueException("Start ip is not in network cidr: " + networkCidr);
    }
    if (endIP != null) {
      if (!NetUtils.sameSubnet(endIP,networkGateway,networkNetmask)) {
        throw new InvalidParameterValueException("End ip is not in network cidr: " + networkCidr);
      }
    }
    vlanGateway=networkGateway;
    vlanNetmask=networkNetmask;
    zoneId=networkZoneId;
    URI uri=network.getBroadcastUri();
    if (uri != null) {
      String[] vlan=uri.toString().split("vlan:\\/\\/");
      vlanId=vlan[1];
    }
  }
  boolean associateIpRangeToAccount=false;
  if (forVirtualNetwork) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(" IPResourceLimit " + ipResourceLimit + " accountIpRange "+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(" Public IP Resource Limit is set to " + ipResourceLimit + " which is less than the IP range of "+ accountIpRange+ " provided");
      }
      associateIpRangeToAccount=true;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Vlan vlan=createVlanAndPublicIpRange(userId,zoneId,podId,startIP,endIP,vlanGateway,vlanNetmask,forVirtualNetwork,vlanId,account,networkId);
  if (associateIpRangeToAccount) {
    _networkMgr.associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId(),network);
    if (network == null) {
      List<? extends Network> networks=_networkMgr.getVirtualNetworksOwnedByAccountInZone(account.getAccountName(),account.getDomainId(),zoneId);
      network=networks.get(0);
    }
    if (network == null) {
      throw new CloudRuntimeException("Failed to associate vlan to the account id=" + account.getId() + ", default network failed to create");
    }
  }
  txn.commit();
  if (associateIpRangeToAccount) {
    if (network.getState() == Network.State.Implemented) {
      s_logger.debug("Applying ip associations for vlan id=" + vlanId + " in network "+ network);
      if (!_networkMgr.applyIpAssociations(network,false)) {
        s_logger.warn("Failed to apply ip associations for vlan id=1 as a part of add vlan range for account id=" + account.getId());
      }
    }
 else {
      s_logger.trace("Network id=" + network.getId() + " is not Implemented, no need to apply ipAssociations");
    }
  }
  return vlan;
}
