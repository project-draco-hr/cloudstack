{
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get("key");
      String value=(String)detail.get("value");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException("Invalid Zone Detail specified, fields 'key' and 'value' cannot be null, please specify details in the form:  details[0].key=XXX&details[0].value=YYY");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException("Invalid network domain suffixes. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,","));
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("unable to find zone by id " + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException("A zone with ID: " + zoneId + " does not exist.");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setDomain(networkDomain);
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException("Failed to edit zone. Please contact Cloud Support.");
  }
  txn.commit();
  return zone;
}
