{
  final Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String ip6Dns1=cmd.getIp6Dns1();
  String ip6Dns2=cmd.getIp6Dns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String guestCidr=cmd.getGuestCidrAddress();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  final Boolean isPublic=cmd.isPublic();
  final String allocationStateStr=cmd.getAllocationState();
  final String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Boolean localStorageEnabled=cmd.getLocalStorageEnabled();
  final Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get("key");
      String value=(String)detail.get("value");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException("Invalid Zone Detail specified, fields 'key' and 'value' cannot be null, please specify details in the form:  details[0].key=XXX&details[0].value=YYY");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException("Invalid network domain suffixes. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,","));
  }
  final DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("unable to find zone by id " + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException("Please enter a valid guest cidr");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException("A zone with ID: " + zoneId + " does not exist.");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (ip6Dns1 == null) {
    ip6Dns1=zone.getIp6Dns1();
  }
  if (ip6Dns2 == null) {
    ip6Dns2=zone.getIp6Dns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (internalDns2 == null) {
    internalDns2=zone.getInternalDns2();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr,ip6Dns1,ip6Dns2);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setIp6Dns1(ip6Dns1);
  zone.setIp6Dns2(ip6Dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (localStorageEnabled != null) {
    zone.setLocalStorageEnabled(localStorageEnabled.booleanValue());
  }
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      zone.setDomain(null);
    }
 else {
      zone.setDomain(networkDomain);
    }
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      Map<String,String> updatedDetails=new HashMap<String,String>();
      _zoneDao.loadDetails(zone);
      if (zone.getDetails() != null) {
        updatedDetails.putAll(zone.getDetails());
      }
      updatedDetails.putAll(newDetails);
      zone.setDetails(updatedDetails);
      if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
        Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
        if (allocationState == Grouping.AllocationState.Enabled) {
          try {
            PhysicalNetwork mgmtPhyNetwork;
            mgmtPhyNetwork=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Management);
            if (NetworkType.Advanced == zone.getNetworkType() && !zone.isSecurityGroupEnabled()) {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Public);
            }
            try {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Storage);
            }
 catch (            InvalidParameterValueException noStorage) {
              PhysicalNetworkTrafficTypeVO mgmtTraffic=_trafficTypeDao.findBy(mgmtPhyNetwork.getId(),TrafficType.Management);
              _networkSvc.addTrafficTypeToPhysicalNetwork(mgmtPhyNetwork.getId(),TrafficType.Storage.toString(),"vlan",mgmtTraffic.getXenNetworkLabel(),mgmtTraffic.getKvmNetworkLabel(),mgmtTraffic.getVmwareNetworkLabel(),mgmtTraffic.getSimulatorNetworkLabel(),mgmtTraffic.getVlan(),mgmtTraffic.getHypervNetworkLabel(),mgmtTraffic.getOvm3NetworkLabel());
              s_logger.info("No storage traffic type was specified by admin, create default storage traffic on physical network " + mgmtPhyNetwork.getId() + " with same configure of management traffic type");
            }
          }
 catch (          InvalidParameterValueException ex) {
            throw new InvalidParameterValueException("Cannot enable this Zone since: " + ex.getMessage());
          }
        }
        zone.setAllocationState(allocationState);
      }
      if (dhcpProvider != null) {
        zone.setDhcpProvider(dhcpProvider);
      }
      if (isPublic != null && isPublic) {
        zone.setDomainId(null);
        zone.setDomain(null);
        DedicatedResourceVO resource=_dedicatedDao.findByZoneId(zoneId);
        Long resourceId=null;
        if (resource != null) {
          resourceId=resource.getId();
          if (!_dedicatedDao.remove(resourceId)) {
            throw new CloudRuntimeException("Failed to delete dedicated Zone Resource " + resourceId);
          }
          List<DedicatedResourceVO> resourcesInGroup=_dedicatedDao.listByAffinityGroupId(resource.getAffinityGroupId());
          if (resourcesInGroup.isEmpty()) {
            _affinityGroupService.deleteAffinityGroup(resource.getAffinityGroupId(),null,null,null);
          }
        }
      }
      if (!_zoneDao.update(zoneId,zone)) {
        throw new CloudRuntimeException("Failed to edit zone. Please contact Cloud Support.");
      }
    }
  }
);
  return zone;
}
