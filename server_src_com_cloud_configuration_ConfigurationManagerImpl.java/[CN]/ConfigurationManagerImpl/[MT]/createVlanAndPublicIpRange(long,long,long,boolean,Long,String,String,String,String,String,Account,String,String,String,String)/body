{
  final Network network=_networkModel.getNetwork(networkId);
  boolean ipv4=false, ipv6=false;
  if (startIP != null) {
    ipv4=true;
  }
  if (startIPv6 != null) {
    ipv6=true;
  }
  if (!ipv4 && !ipv6) {
    throw new InvalidParameterValueException("Please specify IPv4 or IPv6 address.");
  }
  final DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  checkZoneAccess(CallContext.current().getCallingAccount(),zone);
  if (_physicalNetworkDao.findById(physicalNetworkId) == null) {
    throw new InvalidParameterValueException("Please specify a valid physical network id");
  }
  if (podId != null) {
    final Pod pod=_podDao.findById(podId);
    if (pod == null) {
      throw new InvalidParameterValueException("Please specify a valid pod.");
    }
    if (pod.getDataCenterId() != zoneId) {
      throw new InvalidParameterValueException("Pod id=" + podId + " doesn't belong to zone id="+ zoneId);
    }
    if (zone.getNetworkType() != NetworkType.Basic || network.getTrafficType() != TrafficType.Guest) {
      throw new InvalidParameterValueException("Pod id can be specified only for the networks of type " + TrafficType.Guest + " in zone of type "+ NetworkType.Basic);
    }
  }
  if (network.getTrafficType() == TrafficType.Guest) {
    String networkVlanId=null;
    final URI uri=network.getBroadcastUri();
    if (uri != null) {
      final String[] vlan=uri.toString().split("vlan:\\/\\/");
      networkVlanId=vlan[1];
      networkVlanId=networkVlanId.split("-")[0];
    }
    if (vlanId != null) {
      if (networkVlanId != null && !NetUtils.isSameIsolationId(networkVlanId,vlanId)) {
        throw new InvalidParameterValueException("Vlan doesn't match vlan of the network");
      }
    }
 else {
      vlanId=networkVlanId;
    }
  }
 else   if (network.getTrafficType() == TrafficType.Public && vlanId == null) {
    throw new InvalidParameterValueException("Unable to determine vlan id or untagged vlan for public network");
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  final VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  if (vlanOwner != null && zone.getNetworkType() != NetworkType.Advanced) {
    throw new InvalidParameterValueException("Vlan owner can be defined only in the zone of type " + NetworkType.Advanced);
  }
  if (ipv4) {
    if (!NetUtils.isValidIp(vlanGateway)) {
      throw new InvalidParameterValueException("Please specify a valid gateway");
    }
    if (!NetUtils.isValidNetmask(vlanNetmask)) {
      throw new InvalidParameterValueException("Please specify a valid netmask");
    }
  }
  if (ipv6) {
    if (!NetUtils.isValidIpv6(vlanIp6Gateway)) {
      throw new InvalidParameterValueException("Please specify a valid IPv6 gateway");
    }
    if (!NetUtils.isValidIp6Cidr(vlanIp6Cidr)) {
      throw new InvalidParameterValueException("Please specify a valid IPv6 CIDR");
    }
  }
  if (ipv4) {
    final String newCidr=NetUtils.getCidrFromGatewayAndNetmask(vlanGateway,vlanNetmask);
    if (!NetUtils.isIpWithtInCidrRange(vlanGateway,newCidr) || !NetUtils.isIpWithtInCidrRange(startIP,newCidr) || !NetUtils.isIpWithtInCidrRange(endIP,newCidr)) {
      throw new InvalidParameterValueException("Please specify a valid IP range or valid netmask or valid gateway");
    }
    final String guestNetworkCidr=zone.getGuestNetworkCidr();
    if (guestNetworkCidr != null) {
      if (NetUtils.isNetworksOverlap(newCidr,guestNetworkCidr)) {
        throw new InvalidParameterValueException("The new IP range you have specified has  overlapped with the guest network in zone: " + zone.getName() + ". Please specify a different gateway/netmask.");
      }
    }
    checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
    checkConflictsWithPortableIpRange(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
    final List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
    for (    final VlanVO vlan : vlans) {
      final String otherVlanGateway=vlan.getVlanGateway();
      final String otherVlanNetmask=vlan.getVlanNetmask();
      if (otherVlanGateway == null || otherVlanNetmask == null) {
        continue;
      }
      if (vlan.getNetworkId() == null) {
        continue;
      }
      final String otherCidr=NetUtils.getCidrFromGatewayAndNetmask(otherVlanGateway,otherVlanNetmask);
      if (!NetUtils.isNetworksOverlap(newCidr,otherCidr)) {
        continue;
      }
      if (!vlanId.equals(vlan.getVlanTag())) {
        boolean overlapped=false;
        if (network.getTrafficType() == TrafficType.Public) {
          overlapped=true;
        }
 else {
          final Long nwId=vlan.getNetworkId();
          if (nwId != null) {
            final Network nw=_networkModel.getNetwork(nwId);
            if (nw != null && nw.getTrafficType() == TrafficType.Public) {
              overlapped=true;
            }
          }
        }
        if (overlapped) {
          throw new InvalidParameterValueException("The IP range with tag: " + vlan.getVlanTag() + " in zone "+ zone.getName()+ " has overlapped with the subnet. Please specify a different gateway/netmask.");
        }
      }
 else {
        final String[] otherVlanIpRange=vlan.getIpRange().split("\\-");
        final String otherVlanStartIP=otherVlanIpRange[0];
        String otherVlanEndIP=null;
        if (otherVlanIpRange.length > 1) {
          otherVlanEndIP=otherVlanIpRange[1];
        }
        if (!vlanGateway.equals(otherVlanGateway) || !vlanNetmask.equals(vlan.getVlanNetmask())) {
          throw new InvalidParameterValueException("The IP range has already been added with gateway " + otherVlanGateway + " ,and netmask "+ otherVlanNetmask+ ", Please specify the gateway/netmask if you want to extend ip range");
        }
        if (!NetUtils.is31PrefixCidr(newCidr)) {
          if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
            throw new InvalidParameterValueException("The IP range already has IPs that overlap with the new range." + " Please specify a different start IP/end IP.");
          }
        }
      }
    }
  }
  String ipv6Range=null;
  if (ipv6) {
    ipv6Range=startIPv6;
    if (endIPv6 != null) {
      ipv6Range+="-" + endIPv6;
    }
    final List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
    for (    final VlanVO vlan : vlans) {
      if (vlan.getIp6Gateway() == null) {
        continue;
      }
      if (NetUtils.isSameIsolationId(vlanId,vlan.getVlanTag())) {
        if (NetUtils.isIp6RangeOverlap(ipv6Range,vlan.getIp6Range())) {
          throw new InvalidParameterValueException("The IPv6 range with tag: " + vlan.getVlanTag() + " already has IPs that overlap with the new range. Please specify a different start IP/end IP.");
        }
        if (!vlanIp6Gateway.equals(vlan.getIp6Gateway())) {
          throw new InvalidParameterValueException("The IP range with tag: " + vlan.getVlanTag() + " has already been added with gateway "+ vlan.getIp6Gateway()+ ". Please specify a different tag.");
        }
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,physicalNetworkId,vlanId).size() > 0) {
    throw new InvalidParameterValueException("The VLAN tag " + vlanId + " is already being used for dynamic vlan allocation for the guest network in zone "+ zone.getName());
  }
  String ipRange=null;
  if (ipv4) {
    ipRange=startIP;
    if (endIP != null) {
      ipRange+="-" + endIP;
    }
  }
  final VlanVO vlan=commitVlanAndIpRange(zoneId,networkId,physicalNetworkId,podId,startIP,endIP,vlanGateway,vlanNetmask,vlanId,vlanOwner,vlanIp6Gateway,vlanIp6Cidr,ipv4,zone,vlanType,ipv6Range,ipRange);
  return vlan;
}
