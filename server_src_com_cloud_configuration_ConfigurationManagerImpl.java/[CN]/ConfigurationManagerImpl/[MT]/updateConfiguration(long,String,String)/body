{
  if (value != null && (value.trim().isEmpty() || value.equals("null"))) {
    value=null;
  }
  String validationMsg=validateConfigurationValue(name,value);
  if (validationMsg != null) {
    s_logger.error("Invalid configuration option, name: " + name + ", value:"+ value);
    throw new InvalidParameterValueException(validationMsg);
  }
  if (!_configDao.update(name,value)) {
    s_logger.error("Failed to update configuration option, name: " + name + ", value:"+ value);
    throw new CloudRuntimeException("Failed to update configuration value. Please contact Cloud Support.");
  }
  if (Config.XenGuestNetwork.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,DBEncryptionUtil.encrypt(value));
      pstmt.setString(2,"guest.network.device");
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
    }
catch (    Throwable e) {
    }
  }
 else   if (Config.XenPrivateNetwork.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,DBEncryptionUtil.encrypt(value));
      pstmt.setString(2,"private.network.device");
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
    }
catch (    Throwable e) {
    }
  }
 else   if (Config.XenPublicNetwork.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,DBEncryptionUtil.encrypt(value));
      pstmt.setString(2,"public.network.device");
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
    }
catch (    Throwable e) {
    }
  }
 else   if (Config.XenStorageNetwork1.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,DBEncryptionUtil.encrypt(value));
      pstmt.setString(2,"storage.network.device1");
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
    }
catch (    Throwable e) {
    }
  }
 else   if (Config.XenStorageNetwork2.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    Transaction txn=Transaction.currentTxn();
    PreparedStatement pstmt=null;
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,DBEncryptionUtil.encrypt(value));
      pstmt.setString(2,"storage.network.device2");
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
    }
catch (    Throwable e) {
    }
  }
 else   if (Config.SystemVMUseLocalStorage.key().equalsIgnoreCase(name)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Config 'system.vm.use.local.storage' changed to value:" + value + ", need to update System VM offerings");
    }
    boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
    ServiceOfferingVO serviceOffering=_serviceOfferingDao.findByName("Cloud.com-ConsoleProxy");
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        s_logger.error("Failed to update ConsoleProxy offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
    serviceOffering=_serviceOfferingDao.findByName("Cloud.Com-SoftwareRouter");
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        s_logger.error("Failed to update SoftwareRouter offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
    serviceOffering=_serviceOfferingDao.findByName("Cloud.com-SecondaryStorage");
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        s_logger.error("Failed to update SecondaryStorage offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
  }
}
