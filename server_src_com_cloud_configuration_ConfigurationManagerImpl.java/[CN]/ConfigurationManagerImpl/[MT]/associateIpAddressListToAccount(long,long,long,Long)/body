{
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  try {
    account=_accountDao.acquireInLockTable(accountId);
    if (account == null) {
      s_logger.warn("Unable to lock account: " + accountId);
      throw new ConcurrentOperationException("Unable to acquire account lock");
    }
    s_logger.debug("Associate IP address lock acquired");
    DomainRouterVO router=_domrDao.findBy(accountId,zoneId);
    if (router == null) {
      s_logger.debug("No router found for account: " + account.getAccountName() + ".");
      return;
    }
    if (router.getState() == State.Running) {
      List<VlanVO> vlansForAccount=new ArrayList<VlanVO>();
      if (vlanId == null) {
        vlansForAccount.addAll(_vlanDao.listVlansForAccountByType(zoneId,account.getId(),VlanType.VirtualNetwork));
        s_logger.debug("vlansForAccount " + vlansForAccount);
      }
 else {
        vlansForAccount.add(_vlanDao.findById(vlanId));
      }
      txn.start();
      List<String> ipAddrsList=new ArrayList<String>();
      for (      VlanVO vlan : vlansForAccount) {
        ipAddrsList.addAll(_publicIpAddressDao.assignAcccountSpecificIps(accountId,account.getDomainId(),vlan.getId(),false));
        long size=ipAddrsList.size();
        _accountMgr.incrementResourceCount(accountId,ResourceType.public_ip,size);
        s_logger.debug("Assigning new ip addresses " + ipAddrsList);
      }
      if (ipAddrsList.isEmpty()) {
        return;
      }
      boolean success=_networkMgr.associateIP(router,ipAddrsList,true,0);
      String errorMsg="Unable to assign public IP address pool";
      if (!success) {
        s_logger.debug(errorMsg);
        for (        String ip : ipAddrsList) {
          EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_NET_IP_ASSIGN,"Unable to assign public IP " + ip);
        }
        throw new CloudRuntimeException(errorMsg);
      }
      txn.commit();
      for (      String ip : ipAddrsList) {
        EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,EventTypes.EVENT_NET_IP_ASSIGN,"Successfully assigned account IP " + ip);
      }
    }
  }
 catch (  CloudRuntimeException iee) {
    s_logger.error("Associate IP threw an CloudRuntimeException.",iee);
    throw iee;
  }
catch (  Throwable t) {
    s_logger.error("Associate IP address threw an exception.",t);
    throw new CloudRuntimeException("Associate IP address exception");
  }
 finally {
    if (account != null) {
      _accountDao.releaseFromLockTable(accountId);
      s_logger.debug("Associate IP address lock released");
    }
  }
}
