{
  String multicastRateStr=_configDao.getValue("multicast.throttling.rate");
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  if (!specifyVlan && type == GuestType.Shared) {
    throw new InvalidParameterValueException("SpecifyVlan should be true if network offering's type is " + type);
  }
  if (specifyIpRanges) {
    if (type == GuestType.Isolated) {
      if (serviceProviderMap.containsKey(Service.SourceNat)) {
        throw new InvalidParameterValueException("SpecifyIpRanges can only be true for Shared network offerings and Isolated with no SourceNat service");
      }
    }
  }
 else {
    if (type == GuestType.Shared) {
      throw new InvalidParameterValueException("SpecifyIpRanges should always be true for Shared network offerings");
    }
  }
  if (isPersistent && type == GuestType.Shared) {
    throw new InvalidParameterValueException("isPersistent should be false if network offering's type is " + type);
  }
  if (availability == NetworkOffering.Availability.Required) {
    boolean canOffBeRequired=(type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat));
    if (!canOffBeRequired) {
      throw new InvalidParameterValueException("Availability can be " + NetworkOffering.Availability.Required + " only for networkOfferings of type "+ GuestType.Isolated+ " and with "+ Service.SourceNat.getName()+ " enabled");
    }
    List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (!offerings.isEmpty()) {
      throw new InvalidParameterValueException("System already has network offering id=" + offerings.get(0).getId() + " with availability "+ Availability.Required);
    }
  }
  boolean dedicatedLb=false;
  boolean elasticLb=false;
  boolean sharedSourceNat=false;
  boolean redundantRouter=false;
  boolean elasticIp=false;
  boolean associatePublicIp=false;
  boolean inline=false;
  if (serviceCapabilityMap != null && !serviceCapabilityMap.isEmpty()) {
    Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
    if ((lbServiceCapabilityMap != null) && (!lbServiceCapabilityMap.isEmpty())) {
      String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
      if (isolationCapability != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.SupportedLBIsolation,isolationCapability);
        dedicatedLb=isolationCapability.contains("dedicated");
      }
 else {
        dedicatedLb=true;
      }
      String param=lbServiceCapabilityMap.get(Capability.ElasticLb);
      if (param != null) {
        elasticLb=param.contains("true");
      }
      String inlineMode=lbServiceCapabilityMap.get(Capability.InlineMode);
      if (inlineMode != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.InlineMode,inlineMode);
        inline=inlineMode.contains("true");
      }
 else {
        inline=false;
      }
    }
    Map<Capability,String> sourceNatServiceCapabilityMap=serviceCapabilityMap.get(Service.SourceNat);
    if ((sourceNatServiceCapabilityMap != null) && (!sourceNatServiceCapabilityMap.isEmpty())) {
      String sourceNatType=sourceNatServiceCapabilityMap.get(Capability.SupportedSourceNatTypes);
      if (sourceNatType != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.SupportedSourceNatTypes,sourceNatType);
        sharedSourceNat=sourceNatType.contains("perzone");
      }
      String param=sourceNatServiceCapabilityMap.get(Capability.RedundantRouter);
      if (param != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.RedundantRouter,param);
        redundantRouter=param.contains("true");
      }
    }
    Map<Capability,String> staticNatServiceCapabilityMap=serviceCapabilityMap.get(Service.StaticNat);
    if ((staticNatServiceCapabilityMap != null) && (!staticNatServiceCapabilityMap.isEmpty())) {
      String param=staticNatServiceCapabilityMap.get(Capability.ElasticIp);
      if (param != null) {
        elasticIp=param.contains("true");
        String associatePublicIP=staticNatServiceCapabilityMap.get(Capability.AssociatePublicIP);
        if (associatePublicIP != null) {
          associatePublicIp=associatePublicIP.contains("true");
        }
      }
    }
  }
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,isDefault,availability,tags,type,conserveMode,dedicatedLb,sharedSourceNat,redundantRouter,elasticIp,elasticLb,specifyIpRanges,inline,isPersistent,associatePublicIp);
  if (serviceOfferingId != null) {
    offering.setServiceOfferingId(serviceOfferingId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug("Adding network offering " + offering);
  offering=_networkOfferingDao.persist(offering);
  if (serviceProviderMap != null) {
    for (    Network.Service service : serviceProviderMap.keySet()) {
      Set<Provider> providers=serviceProviderMap.get(service);
      if (providers != null && !providers.isEmpty()) {
        boolean vpcOff=false;
        for (        Network.Provider provider : providers) {
          if (provider == Provider.VPCVirtualRouter) {
            vpcOff=true;
          }
          NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
          _ntwkOffServiceMapDao.persist(offService);
          s_logger.trace("Added service for the network offering: " + offService + " with provider "+ provider.getName());
        }
        if (vpcOff) {
          List<Service> supportedSvcs=new ArrayList<Service>();
          supportedSvcs.addAll(serviceProviderMap.keySet());
          _vpcMgr.validateNtwkOffForVpc(offering,supportedSvcs);
        }
      }
 else {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,null);
        _ntwkOffServiceMapDao.persist(offService);
        s_logger.trace("Added service for the network offering: " + offService + " with null provider");
      }
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(" Id: " + offering.getId() + " Name: "+ name);
  return offering;
}
