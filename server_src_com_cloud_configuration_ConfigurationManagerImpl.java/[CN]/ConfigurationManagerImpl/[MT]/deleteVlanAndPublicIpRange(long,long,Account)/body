{
  VlanVO vlanRange=_vlanDao.findById(vlanDbId);
  if (vlanRange == null) {
    throw new InvalidParameterValueException("Please specify a valid IP range id.");
  }
  boolean isAccountSpecific=false;
  final List<AccountVlanMapVO> acctVln=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanRange.getId());
  if (acctVln != null && !acctVln.isEmpty()) {
    isAccountSpecific=true;
  }
  boolean isDomainSpecific=false;
  List<DomainVlanMapVO> domainVln=_domainVlanMapDao.listDomainVlanMapsByVlan(vlanRange.getId());
  if (domainVln != null && !domainVln.isEmpty()) {
    isDomainSpecific=true;
  }
  final List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  if (isAccountSpecific) {
    int resourceCountToBeDecrement=0;
    try {
      vlanRange=_vlanDao.acquireInLockTable(vlanDbId,30);
      if (vlanRange == null) {
        throw new CloudRuntimeException("Unable to acquire vlan configuration: " + vlanDbId);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("lock vlan " + vlanDbId + " is acquired");
      }
      for (      final IPAddressVO ip : ips) {
        boolean success=true;
        if (ip.isOneToOneNat()) {
          throw new InvalidParameterValueException("Can't delete account specific vlan " + vlanDbId + " as ip "+ ip+ " belonging to the range is used for static nat purposes. Cleanup the rules first");
        }
        if (ip.isSourceNat()) {
          throw new InvalidParameterValueException("Can't delete account specific vlan " + vlanDbId + " as ip "+ ip+ " belonging to the range is a source nat ip for the network id="+ ip.getSourceNetworkId()+ ". IP range with the source nat ip address can be removed either as a part of Network, or account removal");
        }
        if (_firewallDao.countRulesByIpId(ip.getId()) > 0) {
          throw new InvalidParameterValueException("Can't delete account specific vlan " + vlanDbId + " as ip "+ ip+ " belonging to the range has firewall rules applied. Cleanup the rules first");
        }
        if (ip.getAllocatedTime() != null) {
          success=_ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller);
        }
        if (!success) {
          s_logger.warn("Some ip addresses failed to be released as a part of vlan " + vlanDbId + " removal");
        }
 else {
          resourceCountToBeDecrement++;
          UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlanRange.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
        }
      }
    }
  finally {
      _vlanDao.releaseFromLockTable(vlanDbId);
      if (resourceCountToBeDecrement > 0) {
        _resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(resourceCountToBeDecrement));
      }
    }
  }
 else {
    final NicIpAliasVO ipAlias=_nicIpAliasDao.findByGatewayAndNetworkIdAndState(vlanRange.getVlanGateway(),vlanRange.getNetworkId(),NicIpAlias.state.active);
    if (ipAlias != null && vlanDbId == _publicIpAddressDao.findByIpAndSourceNetworkId(vlanRange.getNetworkId(),ipAlias.getIp4Address()).getVlanId()) {
      throw new InvalidParameterValueException("Cannot delete vlan range " + vlanDbId + " as "+ ipAlias.getIp4Address()+ "is being used for providing dhcp service in this subnet. Delete all VMs in this subnet and try again");
    }
    final long allocIpCount=_publicIpAddressDao.countIPs(vlanRange.getDataCenterId(),vlanDbId,true);
    if (allocIpCount > 0) {
      throw new InvalidParameterValueException(allocIpCount + "  Ips are in use. Cannot delete this vlan");
    }
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    final TransactionStatus status){
      _publicIpAddressDao.deletePublicIPRange(vlanDbId);
      _vlanDao.remove(vlanDbId);
    }
  }
);
  return true;
}
