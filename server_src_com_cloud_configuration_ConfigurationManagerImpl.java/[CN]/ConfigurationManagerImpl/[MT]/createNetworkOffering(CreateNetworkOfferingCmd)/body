{
  Long userId=UserContext.current().getCallerUserId();
  String name=cmd.getNetworkOfferingName();
  String displayText=cmd.getDisplayText();
  String tags=cmd.getTags();
  String trafficTypeString=cmd.getTraffictype();
  boolean specifyVlan=cmd.getSpecifyVlan();
  String availabilityStr=cmd.getAvailability();
  Integer networkRate=cmd.getNetworkRate();
  TrafficType trafficType=null;
  Availability availability=null;
  Network.GuestType guestType=null;
  for (  TrafficType tType : TrafficType.values()) {
    if (tType.name().equalsIgnoreCase(trafficTypeString)) {
      trafficType=tType;
      break;
    }
  }
  if (trafficType == null) {
    throw new InvalidParameterValueException("Invalid value for traffictype. Supported traffic types: Public, Management, Control, Guest, Vlan or Storage");
  }
  if (trafficType != TrafficType.Guest) {
    throw new InvalidParameterValueException("Only traffic type " + TrafficType.Guest + " is supported in the current release");
  }
  for (  Network.GuestType offType : Network.GuestType.values()) {
    if (offType.name().equalsIgnoreCase(cmd.getGuestIpType())) {
      guestType=offType;
      break;
    }
  }
  if (guestType == null) {
    throw new InvalidParameterValueException("Invalid \"type\" parameter is given; can have Shared and Isolated values");
  }
  for (  Availability avlb : Availability.values()) {
    if (avlb.name().equalsIgnoreCase(availabilityStr)) {
      availability=avlb;
    }
  }
  if (availability == null) {
    throw new InvalidParameterValueException("Invalid value for Availability. Supported types: " + Availability.Required + ", "+ Availability.Optional);
  }
  Long serviceOfferingId=cmd.getServiceOfferingId();
  if (serviceOfferingId != null) {
    ServiceOfferingVO offering=_serviceOfferingDao.findById(serviceOfferingId);
    if (offering == null) {
      throw new InvalidParameterValueException("Cannot find specified service offering: " + serviceOfferingId);
    }
    if (!VirtualMachine.Type.DomainRouter.toString().equalsIgnoreCase(offering.getSystemVmType())) {
      throw new InvalidParameterValueException("The specified service offering " + serviceOfferingId + " cannot be used by virtual router!");
    }
  }
  Map<Network.Service,Set<Network.Provider>> serviceProviderMap=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.defaultProvider);
  for (  String serviceName : cmd.getSupportedServices()) {
    Service service=Network.Service.getService(serviceName);
    if (service == null || service == Service.Gateway) {
      throw new InvalidParameterValueException("Invalid service " + serviceName);
    }
    if (service == Service.SecurityGroup) {
      if (guestType != GuestType.Shared) {
        throw new InvalidParameterValueException("Secrity group service is supported for network offerings with guest ip type " + GuestType.Shared);
      }
      Set<Network.Provider> sgProviders=new HashSet<Network.Provider>();
      sgProviders.add(Provider.SecurityGroupProvider);
      serviceProviderMap.put(Network.Service.SecurityGroup,sgProviders);
      continue;
    }
    serviceProviderMap.put(service,defaultProviders);
  }
  Set<Provider> sourceNatServiceProviders=serviceProviderMap.get(Service.SourceNat);
  if (sourceNatServiceProviders != null && !sourceNatServiceProviders.isEmpty()) {
    serviceProviderMap.put(Service.Gateway,sourceNatServiceProviders);
  }
  Map<Provider,Set<Service>> providerCombinationToVerify=new HashMap<Provider,Set<Service>>();
  Map<String,List<String>> svcPrv=cmd.getServiceProviders();
  if (svcPrv != null) {
    for (    String serviceStr : svcPrv.keySet()) {
      Network.Service service=Network.Service.getService(serviceStr);
      if (serviceProviderMap.containsKey(service)) {
        Set<Provider> providers=new HashSet<Provider>();
        if (svcPrv.get(serviceStr) != null && svcPrv.get(serviceStr).size() > 1) {
          throw new InvalidParameterValueException("In the current release only one provider can be specified for the service");
        }
        for (        String prvNameStr : svcPrv.get(serviceStr)) {
          Network.Provider provider;
          provider=Network.Provider.getProvider(prvNameStr);
          if (provider == null) {
            throw new InvalidParameterValueException("Invalid service provider: " + prvNameStr);
          }
          providers.add(provider);
          Set<Service> serviceSet=null;
          if (providerCombinationToVerify.get(provider) == null) {
            serviceSet=new HashSet<Service>();
          }
 else {
            serviceSet=providerCombinationToVerify.get(provider);
          }
          serviceSet.add(service);
          providerCombinationToVerify.put(provider,serviceSet);
        }
        serviceProviderMap.put(service,providers);
      }
 else {
        throw new InvalidParameterValueException("Service " + serviceStr + " is not enabled for the network offering, can't add a provider to it");
      }
    }
  }
  _networkMgr.canProviderSupportServices(providerCombinationToVerify);
  Map<Capability,String> lbServiceCapabilityMap=cmd.getServiceCapabilities(Service.Lb);
  if (!serviceProviderMap.containsKey(Service.Lb) && lbServiceCapabilityMap != null && !lbServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for LB service can be specifed only when LB service is enabled for network offering.");
  }
  validateLoadBalancerServiceCapabilities(lbServiceCapabilityMap);
  Map<Capability,String> sourceNatServiceCapabilityMap=cmd.getServiceCapabilities(Service.SourceNat);
  if (!serviceProviderMap.containsKey(Service.SourceNat) && sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for source NAT service can be specifed only when source NAT service is enabled for network offering.");
  }
  validateSourceNatServiceCapablities(sourceNatServiceCapabilityMap);
  Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  serviceCapabilityMap.put(Service.Lb,lbServiceCapabilityMap);
  serviceCapabilityMap.put(Service.SourceNat,sourceNatServiceCapabilityMap);
  return createNetworkOffering(userId,name,displayText,trafficType,tags,specifyVlan,availability,networkRate,serviceProviderMap,false,guestType,false,serviceOfferingId,serviceCapabilityMap);
}
