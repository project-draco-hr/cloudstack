{
  final String name=cmd.getNetworkOfferingName();
  final String displayText=cmd.getDisplayText();
  final String tags=cmd.getTags();
  final String trafficTypeString=cmd.getTraffictype();
  final boolean specifyVlan=cmd.getSpecifyVlan();
  final boolean conserveMode=cmd.getConserveMode();
  final String availabilityStr=cmd.getAvailability();
  Integer networkRate=cmd.getNetworkRate();
  TrafficType trafficType=null;
  Availability availability=null;
  Network.GuestType guestType=null;
  final boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  final boolean isPersistent=cmd.getIsPersistent();
  final Map<String,String> detailsStr=cmd.getDetails();
  final Boolean egressDefaultPolicy=cmd.getEgressDefaultPolicy();
  Integer maxconn=null;
  boolean enableKeepAlive=false;
  for (  final TrafficType tType : TrafficType.values()) {
    if (tType.name().equalsIgnoreCase(trafficTypeString)) {
      trafficType=tType;
      break;
    }
  }
  if (trafficType == null) {
    throw new InvalidParameterValueException("Invalid value for traffictype. Supported traffic types: Public, Management, Control, Guest, Vlan or Storage");
  }
  if (trafficType != TrafficType.Guest) {
    throw new InvalidParameterValueException("Only traffic type " + TrafficType.Guest + " is supported in the current release");
  }
  for (  final Network.GuestType offType : Network.GuestType.values()) {
    if (offType.name().equalsIgnoreCase(cmd.getGuestIpType())) {
      guestType=offType;
      break;
    }
  }
  if (guestType == null) {
    throw new InvalidParameterValueException("Invalid \"type\" parameter is given; can have Shared and Isolated values");
  }
  for (  final Availability avlb : Availability.values()) {
    if (avlb.name().equalsIgnoreCase(availabilityStr)) {
      availability=avlb;
    }
  }
  if (availability == null) {
    throw new InvalidParameterValueException("Invalid value for Availability. Supported types: " + Availability.Required + ", "+ Availability.Optional);
  }
  if (networkRate != null && networkRate < 0) {
    networkRate=0;
  }
  final Long serviceOfferingId=cmd.getServiceOfferingId();
  if (serviceOfferingId != null) {
    final ServiceOfferingVO offering=_serviceOfferingDao.findById(serviceOfferingId);
    if (offering == null) {
      throw new InvalidParameterValueException("Cannot find specified service offering: " + serviceOfferingId);
    }
    if (!VirtualMachine.Type.DomainRouter.toString().equalsIgnoreCase(offering.getSystemVmType())) {
      throw new InvalidParameterValueException("The specified service offering " + serviceOfferingId + " cannot be used by virtual router!");
    }
  }
  final Map<Network.Service,Set<Network.Provider>> serviceProviderMap=new HashMap<Network.Service,Set<Network.Provider>>();
  final Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  for (  final String serviceName : cmd.getSupportedServices()) {
    final Service service=Network.Service.getService(serviceName);
    if (service == null || service == Service.Gateway) {
      throw new InvalidParameterValueException("Invalid service " + serviceName);
    }
    if (service == Service.SecurityGroup) {
      if (guestType != GuestType.Shared) {
        throw new InvalidParameterValueException("Secrity group service is supported for network offerings with guest ip type " + GuestType.Shared);
      }
      final Set<Network.Provider> sgProviders=new HashSet<Network.Provider>();
      sgProviders.add(Provider.SecurityGroupProvider);
      serviceProviderMap.put(Network.Service.SecurityGroup,sgProviders);
      continue;
    }
    serviceProviderMap.put(service,defaultProviders);
  }
  final Set<Provider> sourceNatServiceProviders=serviceProviderMap.get(Service.SourceNat);
  if (sourceNatServiceProviders != null && !sourceNatServiceProviders.isEmpty()) {
    serviceProviderMap.put(Service.Gateway,sourceNatServiceProviders);
  }
  final Map<Provider,Set<Service>> providerCombinationToVerify=new HashMap<Provider,Set<Service>>();
  final Map<String,List<String>> svcPrv=cmd.getServiceProviders();
  Provider firewallProvider=null;
  Provider dhcpProvider=null;
  Boolean IsVrUserdataProvider=false;
  if (svcPrv != null) {
    for (    final String serviceStr : svcPrv.keySet()) {
      final Network.Service service=Network.Service.getService(serviceStr);
      if (serviceProviderMap.containsKey(service)) {
        final Set<Provider> providers=new HashSet<Provider>();
        if (!serviceStr.equalsIgnoreCase(Service.Lb.getName()) && svcPrv.get(serviceStr) != null && svcPrv.get(serviceStr).size() > 1) {
          throw new InvalidParameterValueException("In the current release only one provider can be " + "specified for the service if the service is not LB");
        }
        for (        final String prvNameStr : svcPrv.get(serviceStr)) {
          final Network.Provider provider=Network.Provider.getProvider(prvNameStr);
          if (provider == null) {
            throw new InvalidParameterValueException("Invalid service provider: " + prvNameStr);
          }
          if (provider == Provider.JuniperSRX || provider == Provider.CiscoVnmc) {
            firewallProvider=provider;
          }
          if (provider == Provider.PaloAlto) {
            firewallProvider=Provider.PaloAlto;
          }
          if ((service == Service.PortForwarding || service == Service.StaticNat) && provider == Provider.VirtualRouter) {
            firewallProvider=Provider.VirtualRouter;
          }
          if (service == Service.Dhcp) {
            dhcpProvider=provider;
          }
          if (service == Service.UserData && provider == Provider.VirtualRouter) {
            IsVrUserdataProvider=true;
          }
          providers.add(provider);
          Set<Service> serviceSet=null;
          if (providerCombinationToVerify.get(provider) == null) {
            serviceSet=new HashSet<Service>();
          }
 else {
            serviceSet=providerCombinationToVerify.get(provider);
          }
          serviceSet.add(service);
          providerCombinationToVerify.put(provider,serviceSet);
        }
        serviceProviderMap.put(service,providers);
      }
 else {
        throw new InvalidParameterValueException("Service " + serviceStr + " is not enabled for the network "+ "offering, can't add a provider to it");
      }
    }
  }
  if (dhcpProvider == null && IsVrUserdataProvider) {
    logger.debug("User data provider VR can't be selected without VR as dhcp provider. In this case VM fails to contact the DHCP server for userdata");
    throw new InvalidParameterValueException("Without VR as dhcp provider, User data can't selected for VR. Please select VR as DHCP provider ");
  }
  _networkModel.canProviderSupportServices(providerCombinationToVerify);
  final Map<Capability,String> lbServiceCapabilityMap=cmd.getServiceCapabilities(Service.Lb);
  if (!serviceProviderMap.containsKey(Service.Lb) && lbServiceCapabilityMap != null && !lbServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for LB service can be specifed only when LB service is enabled for network offering.");
  }
  validateLoadBalancerServiceCapabilities(lbServiceCapabilityMap);
  if (lbServiceCapabilityMap != null && !lbServiceCapabilityMap.isEmpty()) {
    maxconn=cmd.getMaxconnections();
    if (maxconn == null) {
      maxconn=Integer.parseInt(_configDao.getValue(Config.NetworkLBHaproxyMaxConn.key()));
    }
  }
  if (cmd.getKeepAliveEnabled() != null && cmd.getKeepAliveEnabled()) {
    enableKeepAlive=true;
  }
  final Map<Capability,String> sourceNatServiceCapabilityMap=cmd.getServiceCapabilities(Service.SourceNat);
  if (!serviceProviderMap.containsKey(Service.SourceNat) && sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for source NAT service can be specifed only when source NAT service is enabled for network offering.");
  }
  validateSourceNatServiceCapablities(sourceNatServiceCapabilityMap);
  final Map<Capability,String> staticNatServiceCapabilityMap=cmd.getServiceCapabilities(Service.StaticNat);
  if (!serviceProviderMap.containsKey(Service.StaticNat) && sourceNatServiceCapabilityMap != null && !staticNatServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for static NAT service can be specifed only when static NAT service is enabled for network offering.");
  }
  validateStaticNatServiceCapablities(staticNatServiceCapabilityMap);
  final Map<Capability,String> connectivityServiceCapabilityMap=cmd.getServiceCapabilities(Service.Connectivity);
  if (!serviceProviderMap.containsKey(Service.Connectivity) && connectivityServiceCapabilityMap != null && !connectivityServiceCapabilityMap.isEmpty()) {
    throw new InvalidParameterValueException("Capabilities for 'Connectivity' service can be specified " + "only when Connectivity service is enabled for network offering.");
  }
  validateConnectivityServiceCapablities(serviceProviderMap.get(Service.Connectivity),connectivityServiceCapabilityMap);
  final Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  serviceCapabilityMap.put(Service.Lb,lbServiceCapabilityMap);
  serviceCapabilityMap.put(Service.SourceNat,sourceNatServiceCapabilityMap);
  serviceCapabilityMap.put(Service.StaticNat,staticNatServiceCapabilityMap);
  serviceCapabilityMap.put(Service.Connectivity,connectivityServiceCapabilityMap);
  if (firewallProvider != null) {
    logger.debug("Adding Firewall service with provider " + firewallProvider.getName());
    final Set<Provider> firewallProviderSet=new HashSet<Provider>();
    firewallProviderSet.add(firewallProvider);
    serviceProviderMap.put(Service.Firewall,firewallProviderSet);
    if (!(firewallProvider.getName().equals(Provider.JuniperSRX.getName()) || firewallProvider.getName().equals(Provider.PaloAlto.getName()) || firewallProvider.getName().equals(Provider.VirtualRouter.getName())) && egressDefaultPolicy == false) {
      throw new InvalidParameterValueException("Firewall egress with default policy " + egressDefaultPolicy + " is not supported by the provider "+ firewallProvider.getName());
    }
  }
  final Map<NetworkOffering.Detail,String> details=new HashMap<NetworkOffering.Detail,String>();
  if (detailsStr != null) {
    for (    final String detailStr : detailsStr.keySet()) {
      NetworkOffering.Detail offDetail=null;
      for (      final NetworkOffering.Detail supportedDetail : NetworkOffering.Detail.values()) {
        if (detailStr.equalsIgnoreCase(supportedDetail.toString())) {
          offDetail=supportedDetail;
          break;
        }
      }
      if (offDetail == null) {
        throw new InvalidParameterValueException("Unsupported detail " + detailStr);
      }
      details.put(offDetail,detailsStr.get(detailStr));
    }
  }
  final NetworkOffering offering=createNetworkOffering(name,displayText,trafficType,tags,specifyVlan,availability,networkRate,serviceProviderMap,false,guestType,false,serviceOfferingId,conserveMode,serviceCapabilityMap,specifyIpRanges,isPersistent,details,egressDefaultPolicy,maxconn,enableKeepAlive);
  CallContext.current().setEventDetails(" Id: " + offering.getId() + " Name: "+ name);
  return offering;
}
