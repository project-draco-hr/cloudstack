{
  Long userId=UserContext.current().getCallerUserId();
  String name=cmd.getNetworkOfferingName();
  String displayText=cmd.getDisplayText();
  String tags=cmd.getTags();
  String trafficTypeString=cmd.getTraffictype();
  Boolean specifyVlan=cmd.getSpecifyVlan();
  String availabilityStr=cmd.getAvailability();
  String guestIpTypeString=cmd.getGuestIpType();
  Boolean isSecurityGroupEnabled=cmd.getSecurityGroupEnabled();
  Integer networkRate=cmd.getNetworkRate();
  TrafficType trafficType=null;
  GuestIpType guestIpType=null;
  Availability availability=null;
  for (  TrafficType tType : TrafficType.values()) {
    if (tType.name().equalsIgnoreCase(trafficTypeString)) {
      trafficType=tType;
      break;
    }
  }
  if (trafficType == null) {
    throw new InvalidParameterValueException("Invalid value for traffictype. Supported traffic types: Public, Management, Control, Guest, Vlan or Storage");
  }
  for (  GuestIpType gType : GuestIpType.values()) {
    if (gType.name().equalsIgnoreCase(guestIpTypeString)) {
      guestIpType=gType;
      break;
    }
  }
  if (guestIpType == null) {
    throw new InvalidParameterValueException("Invalid guest IP type; can have Direct or Virtual value");
  }
  for (  Availability avlb : Availability.values()) {
    if (avlb.name().equalsIgnoreCase(availabilityStr)) {
      availability=avlb;
    }
  }
  if (availability == null) {
    throw new InvalidParameterValueException("Invalid value for Availability. Supported types: " + Availability.Required + ", "+ Availability.Optional+ ", "+ Availability.Unavailable);
  }
  Integer maxConnections=cmd.getMaxconnections();
  Map<Network.Service,Network.Provider> serviceProviderMap=new HashMap<Network.Service,Network.Provider>();
  if (cmd.getDhcpService()) {
    serviceProviderMap.put(Network.Service.Dhcp,null);
  }
 else   if (cmd.getDnsService()) {
    serviceProviderMap.put(Network.Service.Dns,null);
  }
 else   if (cmd.getFirewallService()) {
    serviceProviderMap.put(Network.Service.Firewall,null);
  }
 else   if (cmd.getGatewayService()) {
    serviceProviderMap.put(Network.Service.Gateway,null);
  }
 else   if (cmd.getLbService()) {
    serviceProviderMap.put(Network.Service.Lb,null);
  }
 else   if (cmd.getSourceNatService()) {
    serviceProviderMap.put(Network.Service.SourceNat,null);
  }
 else   if (cmd.getUserdataService()) {
    serviceProviderMap.put(Network.Service.UserData,null);
  }
 else   if (cmd.getVpnService()) {
    serviceProviderMap.put(Network.Service.Vpn,null);
  }
  Map<String,String> svcPrv=(Map<String,String>)cmd.getServiceProviderList();
  for (  String serviceStr : svcPrv.keySet()) {
    if (serviceProviderMap.containsKey(serviceStr)) {
      Network.Service service=Network.Service.getService(serviceStr);
      Network.Provider provider;
      String prvNameStr=svcPrv.get(serviceStr);
      provider=Network.Provider.getProvider(prvNameStr);
      if (provider == null) {
        throw new InvalidParameterValueException("Invalid service provider: " + prvNameStr);
      }
      serviceProviderMap.put(service,provider);
    }
 else {
      throw new InvalidParameterValueException("Service " + serviceStr + " is not enabled for the network offering, can't add a provider to it");
    }
  }
  return createNetworkOffering(userId,name,displayText,trafficType,tags,maxConnections,specifyVlan,availability,guestIpType,networkRate,serviceProviderMap,false,isSecurityGroupEnabled);
}
