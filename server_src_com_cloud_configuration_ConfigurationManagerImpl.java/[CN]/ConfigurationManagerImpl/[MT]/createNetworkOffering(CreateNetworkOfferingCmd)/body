{
  Long userId=UserContext.current().getCallerUserId();
  String name=cmd.getNetworkOfferingName();
  String displayText=cmd.getDisplayText();
  String tags=cmd.getTags();
  String trafficTypeString=cmd.getTraffictype();
  Boolean specifyVlan=cmd.getSpecifyVlan();
  String availabilityStr=cmd.getAvailability();
  Integer networkRate=cmd.getNetworkRate();
  TrafficType trafficType=null;
  Availability availability=null;
  Network.GuestType guestType=null;
  for (  TrafficType tType : TrafficType.values()) {
    if (tType.name().equalsIgnoreCase(trafficTypeString)) {
      trafficType=tType;
      break;
    }
  }
  if (trafficType == null) {
    throw new InvalidParameterValueException("Invalid value for traffictype. Supported traffic types: Public, Management, Control, Guest, Vlan or Storage");
  }
  for (  Network.GuestType offType : Network.GuestType.values()) {
    if (offType.name().equalsIgnoreCase(cmd.getGuestIpType())) {
      guestType=offType;
      break;
    }
  }
  if (guestType == null) {
    throw new InvalidParameterValueException("Invalid \"type\" parameter is given; can have Shared and Isolated values");
  }
  for (  Availability avlb : Availability.values()) {
    if (avlb.name().equalsIgnoreCase(availabilityStr)) {
      availability=avlb;
    }
  }
  if (availability == null) {
    throw new InvalidParameterValueException("Invalid value for Availability. Supported types: " + Availability.Required + ", "+ Availability.Optional+ ", "+ Availability.Unavailable);
  }
  Integer maxConnections=cmd.getMaxconnections();
  Map<Network.Service,Set<Network.Provider>> serviceProviderMap=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.defaultProvider);
  if (cmd.getDhcpService()) {
    serviceProviderMap.put(Network.Service.Dhcp,defaultProviders);
  }
  if (cmd.getDnsService()) {
    serviceProviderMap.put(Network.Service.Dns,defaultProviders);
  }
  if (cmd.getFirewallService()) {
    serviceProviderMap.put(Network.Service.Firewall,defaultProviders);
  }
  if (cmd.getGatewayService()) {
    serviceProviderMap.put(Network.Service.Gateway,defaultProviders);
  }
  if (cmd.getLbService()) {
    serviceProviderMap.put(Network.Service.Lb,defaultProviders);
  }
  if (cmd.getSourceNatService()) {
    if (guestType == GuestType.Shared) {
      throw new InvalidParameterValueException("Source nat service is is not supported for network offerings with guest ip type " + GuestType.Shared);
    }
    serviceProviderMap.put(Network.Service.SourceNat,defaultProviders);
  }
  if (cmd.getStaticNatService()) {
    serviceProviderMap.put(Network.Service.StaticNat,defaultProviders);
  }
  if (cmd.getPortForwardingService()) {
    serviceProviderMap.put(Network.Service.PortForwarding,defaultProviders);
  }
  if (cmd.getUserdataService()) {
    serviceProviderMap.put(Network.Service.UserData,defaultProviders);
  }
  if (cmd.getVpnService()) {
    serviceProviderMap.put(Network.Service.Vpn,defaultProviders);
  }
  if (cmd.getSecurityGroupService()) {
    if (guestType != GuestType.Shared) {
      throw new InvalidParameterValueException("Secrity group service is supported for network offerings with guest ip type " + GuestType.Shared);
    }
    Set<Network.Provider> sgProviders=new HashSet<Network.Provider>();
    sgProviders.add(Provider.SecurityGroupProvider);
    serviceProviderMap.put(Network.Service.SecurityGroup,sgProviders);
  }
  Map<String,List<String>> svcPrv=(Map<String,List<String>>)cmd.getServiceProviders();
  if (svcPrv != null) {
    for (    String serviceStr : svcPrv.keySet()) {
      Network.Service service=Network.Service.getService(serviceStr);
      if (serviceProviderMap.containsKey(service)) {
        serviceProviderMap.clear();
        Set<Provider> providers=new HashSet<Provider>();
        for (        String prvNameStr : svcPrv.get(serviceStr)) {
          Network.Provider provider;
          provider=Network.Provider.getProvider(prvNameStr);
          if (provider == null) {
            throw new InvalidParameterValueException("Invalid service provider: " + prvNameStr);
          }
          providers.add(provider);
        }
        serviceProviderMap.put(service,providers);
      }
 else {
        throw new InvalidParameterValueException("Service " + serviceStr + " is not enabled for the network offering, can't add a provider to it");
      }
    }
  }
  return createNetworkOffering(userId,name,displayText,trafficType,tags,maxConnections,specifyVlan,availability,networkRate,serviceProviderMap,false,guestType,false);
}
