{
  final Long userId=CallContext.current().getCallingUserId();
  final String name=cmd.getServiceOfferingName();
  if (name == null || name.length() == 0) {
    throw new InvalidParameterValueException("Failed to create service offering: specify the name that has non-zero length");
  }
  final String displayText=cmd.getDisplayText();
  if (displayText == null || displayText.length() == 0) {
    throw new InvalidParameterValueException("Failed to create service offering " + name + ": specify the display text that has non-zero length");
  }
  final Integer cpuNumber=cmd.getCpuNumber();
  final Integer cpuSpeed=cmd.getCpuSpeed();
  final Integer memory=cmd.getMemory();
  if (cpuNumber == null || cpuSpeed == null || memory == null) {
    if (cpuNumber != null || cpuSpeed != null || memory != null) {
      throw new InvalidParameterValueException("For creating a custom compute offering cpu, cpu speed and memory all should be null");
    }
  }
  if (cpuNumber != null && (cpuNumber.intValue() <= 0 || cpuNumber.longValue() > Integer.MAX_VALUE)) {
    throw new InvalidParameterValueException("Failed to create service offering " + name + ": specify the cpu number value between 1 and "+ Integer.MAX_VALUE);
  }
  if (cpuSpeed != null && (cpuSpeed.intValue() < 0 || cpuSpeed.longValue() > Integer.MAX_VALUE)) {
    throw new InvalidParameterValueException("Failed to create service offering " + name + ": specify the cpu speed value between 0 and "+ Integer.MAX_VALUE);
  }
  if (memory != null && (memory.intValue() < 32 || memory.longValue() > Integer.MAX_VALUE)) {
    throw new InvalidParameterValueException("Failed to create service offering " + name + ": specify the memory value between 32 and "+ Integer.MAX_VALUE+ " MB");
  }
  if (cmd.getDomainId() != null && _domainDao.findById(cmd.getDomainId()) == null) {
    throw new InvalidParameterValueException("Please specify a valid domain id");
  }
  final Boolean offerHA=cmd.getOfferHa();
  boolean localStorageRequired=false;
  final String storageType=cmd.getStorageType();
  if (storageType != null) {
    if (storageType.equalsIgnoreCase(ServiceOffering.StorageType.local.toString())) {
      if (offerHA) {
        throw new InvalidParameterValueException("HA offering with local storage is not supported. ");
      }
      localStorageRequired=true;
    }
 else     if (!storageType.equalsIgnoreCase(ServiceOffering.StorageType.shared.toString())) {
      throw new InvalidParameterValueException("Invalid storage type " + storageType + " specified, valid types are: 'local' and 'shared'");
    }
  }
  final Boolean limitCpuUse=cmd.GetLimitCpuUse();
  final Boolean volatileVm=cmd.getVolatileVm();
  final String vmTypeString=cmd.getSystemVmType();
  VirtualMachine.Type vmType=null;
  boolean allowNetworkRate=false;
  Boolean isCustomizedIops;
  if (cmd.getIsSystem()) {
    if (vmTypeString == null || VirtualMachine.Type.DomainRouter.toString().toLowerCase().equals(vmTypeString)) {
      vmType=VirtualMachine.Type.DomainRouter;
      allowNetworkRate=true;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.toString().toLowerCase().equals(vmTypeString)) {
      vmType=VirtualMachine.Type.ConsoleProxy;
    }
 else     if (VirtualMachine.Type.SecondaryStorageVm.toString().toLowerCase().equals(vmTypeString)) {
      vmType=VirtualMachine.Type.SecondaryStorageVm;
    }
 else     if (VirtualMachine.Type.InternalLoadBalancerVm.toString().toLowerCase().equals(vmTypeString)) {
      vmType=VirtualMachine.Type.InternalLoadBalancerVm;
    }
 else {
      throw new InvalidParameterValueException("Invalid systemVmType. Supported types are: " + VirtualMachine.Type.DomainRouter + ", "+ VirtualMachine.Type.ConsoleProxy+ ", "+ VirtualMachine.Type.SecondaryStorageVm);
    }
    if (cmd.isCustomizedIops() != null) {
      throw new InvalidParameterValueException("Customized IOPS is not a valid parameter for a system VM.");
    }
    isCustomizedIops=false;
    if (cmd.getHypervisorSnapshotReserve() != null) {
      throw new InvalidParameterValueException("Hypervisor snapshot reserve is not a valid parameter for a system VM.");
    }
  }
 else {
    allowNetworkRate=true;
    isCustomizedIops=cmd.isCustomizedIops();
  }
  if (cmd.getNetworkRate() != null) {
    if (!allowNetworkRate) {
      throw new InvalidParameterValueException("Network rate can be specified only for non-System offering and system offerings having \"domainrouter\" systemvmtype");
    }
    if (cmd.getNetworkRate().intValue() < 1) {
      throw new InvalidParameterValueException("Failed to create service offering " + name + ": specify the network rate value more than 0");
    }
  }
  if (cmd.getDeploymentPlanner() != null) {
    final List<String> planners=_mgr.listDeploymentPlanners();
    if (planners != null && !planners.isEmpty()) {
      if (!planners.contains(cmd.getDeploymentPlanner())) {
        throw new InvalidParameterValueException("Invalid name for Deployment Planner specified, please use listDeploymentPlanners to get the valid set");
      }
    }
 else {
      throw new InvalidParameterValueException("No deployment planners found");
    }
  }
  return createServiceOffering(userId,cmd.getIsSystem(),vmType,cmd.getServiceOfferingName(),cpuNumber,memory,cpuSpeed,cmd.getDisplayText(),cmd.getProvisioningType(),localStorageRequired,offerHA,limitCpuUse,volatileVm,cmd.getTags(),cmd.getDomainId(),cmd.getHostTag(),cmd.getNetworkRate(),cmd.getDeploymentPlanner(),cmd.getDetails(),isCustomizedIops,cmd.getMinIops(),cmd.getMaxIops(),cmd.getBytesReadRate(),cmd.getBytesWriteRate(),cmd.getIopsReadRate(),cmd.getIopsWriteRate(),cmd.getHypervisorSnapshotReserve());
}
