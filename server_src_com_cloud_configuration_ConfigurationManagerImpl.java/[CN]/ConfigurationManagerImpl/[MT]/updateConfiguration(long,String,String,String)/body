{
  String validationMsg=validateConfigurationValue(name,value);
  if (validationMsg != null) {
    s_logger.error("Invalid configuration option, name: " + name + ", value:"+ value);
    throw new InvalidParameterValueException(validationMsg);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (!_configDao.update(name,category,value)) {
    s_logger.error("Failed to update configuration option, name: " + name + ", value:"+ value);
    throw new CloudRuntimeException("Failed to update configuration value. Please contact Cloud Support.");
  }
  PreparedStatement pstmt=null;
  if (Config.XenGuestNetwork.key().equalsIgnoreCase(name)) {
    String sql="update host_details set value=? where name=?";
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,value);
      pstmt.setString(2,"guest.network.device");
      pstmt.executeUpdate();
    }
 catch (    Throwable e) {
      throw new CloudRuntimeException("Failed to update guest.network.device in host_details due to exception ",e);
    }
  }
 else   if (Config.XenPrivateNetwork.key().equalsIgnoreCase(name)) {
    String sql="update host_details set value=? where name=?";
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,value);
      pstmt.setString(2,"private.network.device");
      pstmt.executeUpdate();
    }
 catch (    Throwable e) {
      throw new CloudRuntimeException("Failed to update private.network.device in host_details due to exception ",e);
    }
  }
 else   if (Config.XenPublicNetwork.key().equalsIgnoreCase(name)) {
    String sql="update host_details set value=? where name=?";
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,value);
      pstmt.setString(2,"public.network.device");
      pstmt.executeUpdate();
    }
 catch (    Throwable e) {
      throw new CloudRuntimeException("Failed to update public.network.device in host_details due to exception ",e);
    }
  }
 else   if (Config.XenStorageNetwork1.key().equalsIgnoreCase(name)) {
    String sql="update host_details set value=? where name=?";
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,value);
      pstmt.setString(2,"storage.network.device1");
      pstmt.executeUpdate();
    }
 catch (    Throwable e) {
      throw new CloudRuntimeException("Failed to update storage.network.device1 in host_details due to exception ",e);
    }
  }
 else   if (Config.XenStorageNetwork2.key().equals(name)) {
    String sql="update host_details set value=? where name=?";
    try {
      pstmt=txn.prepareAutoCloseStatement(sql);
      pstmt.setString(1,value);
      pstmt.setString(2,"storage.network.device2");
      pstmt.executeUpdate();
    }
 catch (    Throwable e) {
      throw new CloudRuntimeException("Failed to update storage.network.device2 in host_details due to exception ",e);
    }
  }
 else   if (Config.SystemVMUseLocalStorage.key().equalsIgnoreCase(name)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Config 'system.vm.use.local.storage' changed to value:" + value + ", need to update System VM offerings");
    }
    boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
    ServiceOfferingVO serviceOffering=_serviceOfferingDao.findByName(ServiceOffering.consoleProxyDefaultOffUniqueName);
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        throw new CloudRuntimeException("Failed to update ConsoleProxy offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
    serviceOffering=_serviceOfferingDao.findByName(ServiceOffering.routerDefaultOffUniqueName);
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        throw new CloudRuntimeException("Failed to update SoftwareRouter offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
    serviceOffering=_serviceOfferingDao.findByName(ServiceOffering.ssvmDefaultOffUniqueName);
    if (serviceOffering != null) {
      serviceOffering.setUseLocalStorage(useLocalStorage);
      if (!_serviceOfferingDao.update(serviceOffering.getId(),serviceOffering)) {
        throw new CloudRuntimeException("Failed to update SecondaryStorage offering's use_local_storage option to value:" + useLocalStorage);
      }
    }
  }
  txn.commit();
}
