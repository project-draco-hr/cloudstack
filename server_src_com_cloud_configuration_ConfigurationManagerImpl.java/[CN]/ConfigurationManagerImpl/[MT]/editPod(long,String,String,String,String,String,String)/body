{
  final HostPodVO pod=_podDao.findById(id);
  if (pod == null) {
    throw new InvalidParameterValueException("Unable to find pod by id " + id);
  }
  String[] existingPodIpRange=pod.getDescription().split("-");
  String[] leftRangeToAdd=null;
  String[] rightRangeToAdd=null;
  boolean allowToDownsize=false;
  if (podHasAllocatedPrivateIPs(id)) {
    if (netmask != null) {
      long newCidr=NetUtils.getCidrSize(netmask);
      long oldCidr=pod.getCidrSize();
      if (newCidr > oldCidr) {
        throw new CloudRuntimeException("The specified pod has allocated private IP addresses, so its IP address range can be extended only");
      }
    }
    if (startIp != null && !startIp.equals(existingPodIpRange[0])) {
      if (NetUtils.ipRangesOverlap(startIp,null,existingPodIpRange[0],existingPodIpRange[1])) {
        throw new CloudRuntimeException("The specified pod has allocated private IP addresses, so its IP address range can be extended only");
      }
 else {
        leftRangeToAdd=new String[2];
        long endIpForUpdate=NetUtils.ip2Long(existingPodIpRange[0]) - 1;
        leftRangeToAdd[0]=startIp;
        leftRangeToAdd[1]=NetUtils.long2Ip(endIpForUpdate);
      }
    }
    if (endIp != null && !endIp.equals(existingPodIpRange[1])) {
      if (NetUtils.ipRangesOverlap(endIp,endIp,existingPodIpRange[0],existingPodIpRange[1])) {
        throw new CloudRuntimeException("The specified pod has allocated private IP addresses, so its IP address range can be extended only");
      }
 else {
        rightRangeToAdd=new String[2];
        long startIpForUpdate=NetUtils.ip2Long(existingPodIpRange[1]) + 1;
        rightRangeToAdd[0]=NetUtils.long2Ip(startIpForUpdate);
        rightRangeToAdd[1]=endIp;
      }
    }
  }
 else {
    allowToDownsize=true;
  }
  if (gateway == null) {
    gateway=pod.getGateway();
  }
  if (netmask == null) {
    netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
  }
  String oldPodName=pod.getName();
  if (name == null) {
    name=oldPodName;
  }
  if (gateway == null) {
    gateway=pod.getGateway();
  }
  if (startIp == null) {
    startIp=existingPodIpRange[0];
  }
  if (endIp == null) {
    endIp=existingPodIpRange[1];
  }
  if (allocationStateStr == null) {
    allocationStateStr=pod.getAllocationState().toString();
  }
  final String cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  boolean checkForDuplicates=!oldPodName.equals(name);
  checkPodAttributes(id,name,pod.getDataCenterId(),gateway,cidr,startIp,endIp,allocationStateStr,checkForDuplicates,false);
  try {
    final String[] existingPodIpRangeFinal=existingPodIpRange;
    final String[] leftRangeToAddFinal=leftRangeToAdd;
    final String[] rightRangeToAddFinal=rightRangeToAdd;
    final boolean allowToDownsizeFinal=allowToDownsize;
    final String allocationStateStrFinal=allocationStateStr;
    final String startIpFinal=startIp;
    final String endIpFinal=endIp;
    final String nameFinal=name;
    final String gatewayFinal=gateway;
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        long zoneId=pod.getDataCenterId();
        String startIp=startIpFinal;
        String endIp=endIpFinal;
        if (!allowToDownsizeFinal) {
          if (leftRangeToAddFinal != null) {
            _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),leftRangeToAddFinal[0],leftRangeToAddFinal[1]);
          }
          if (rightRangeToAddFinal != null) {
            _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),rightRangeToAddFinal[0],rightRangeToAddFinal[1]);
          }
        }
 else {
          _zoneDao.deletePrivateIpAddressByPod(pod.getId());
          if (startIp == null) {
            startIp=existingPodIpRangeFinal[0];
          }
          if (endIp == null) {
            endIp=existingPodIpRangeFinal[1];
          }
          _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),startIp,endIp);
        }
        pod.setName(nameFinal);
        pod.setDataCenterId(zoneId);
        pod.setGateway(gatewayFinal);
        pod.setCidrAddress(getCidrAddress(cidr));
        pod.setCidrSize(getCidrSize(cidr));
        String ipRange=startIp + "-" + endIp;
        pod.setDescription(ipRange);
        Grouping.AllocationState allocationState=null;
        if (allocationStateStrFinal != null && !allocationStateStrFinal.isEmpty()) {
          allocationState=Grouping.AllocationState.valueOf(allocationStateStrFinal);
          pod.setAllocationState(allocationState);
        }
        _podDao.update(id,pod);
      }
    }
);
  }
 catch (  Exception e) {
    s_logger.error("Unable to edit pod due to " + e.getMessage(),e);
    throw new CloudRuntimeException("Failed to edit pod. Please contact Cloud Support.");
  }
  return pod;
}
