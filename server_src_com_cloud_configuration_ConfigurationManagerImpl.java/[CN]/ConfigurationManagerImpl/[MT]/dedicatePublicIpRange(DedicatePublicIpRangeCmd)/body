{
  Long vlanDbId=cmd.getId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long projectId=cmd.getProjectId();
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException("accountName and projectId are mutually exclusive");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
    if (vlanOwner == null) {
      throw new InvalidParameterValueException("Unable to find account by name " + accountName);
    }
 else     if (vlanOwner.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException("Please specify a valid account. Cannot dedicate IP range to system account");
    }
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException("Unable to find vlan by id " + vlanDbId);
  }
  List<AccountVlanMapVO> maps=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanDbId);
  if (maps != null && !maps.isEmpty()) {
    throw new InvalidParameterValueException("Specified Public IP range has already been dedicated");
  }
  Long zoneId=vlan.getDataCenterId();
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException("Public IP range can be dedicated to an account only in the zone of type " + NetworkType.Advanced);
  }
  int accountPublicIpRange=_publicIpAddressDao.countIPs(zoneId,vlanDbId,false);
  _resourceLimitMgr.checkResourceLimit(vlanOwner,ResourceType.public_ip,accountPublicIpRange);
  List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  for (  IPAddressVO ip : ips) {
    Long allocatedToAccountId=ip.getAllocatedToAccountId();
    if (allocatedToAccountId != null) {
      Account accountAllocatedTo=_accountMgr.getActiveAccountById(allocatedToAccountId);
      if (!accountAllocatedTo.getAccountName().equalsIgnoreCase(accountName))       throw new InvalidParameterValueException(ip.getAddress() + " Public IP address in range is allocated to another account ");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(vlanOwner.getId(),vlan.getId());
  _accountVlanMapDao.persist(accountVlanMapVO);
  txn.commit();
  for (  IPAddressVO ip : ips) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_ASSIGN,vlanOwner.getId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
  }
  return vlan;
}
