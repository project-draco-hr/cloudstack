{
  final Long offeringId=cmd.getId();
  Long userId=CallContext.current().getCallingUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  final ServiceOfferingVO offering=_serviceOfferingDao.findById(offeringId);
  if (offering == null) {
    throw new InvalidParameterValueException("unable to find service offering " + offeringId);
  }
  if (offering.getDefaultUse()) {
    throw new InvalidParameterValueException("Default service offerings cannot be deleted");
  }
  final User user=_userDao.findById(userId);
  if (user == null || user.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find active user by id " + userId);
  }
  final Account account=_accountDao.findById(user.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    if (offering.getDomainId() == null) {
      throw new InvalidParameterValueException("Unable to delete public service offering by id " + userId + " because it is domain-admin");
    }
    if (!_domainDao.isChildDomain(account.getDomainId(),offering.getDomainId())) {
      throw new InvalidParameterValueException("Unable to delete service offering by another domain admin with id " + userId);
    }
  }
 else   if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    throw new InvalidParameterValueException("Unable to delete service offering by id " + userId + " because it is not root-admin or domain-admin");
  }
  offering.setState(DiskOffering.State.Inactive);
  if (_serviceOfferingDao.update(offeringId,offering)) {
    CallContext.current().setEventDetails("Service offering id=" + offeringId);
    return true;
  }
 else {
    return false;
  }
}
