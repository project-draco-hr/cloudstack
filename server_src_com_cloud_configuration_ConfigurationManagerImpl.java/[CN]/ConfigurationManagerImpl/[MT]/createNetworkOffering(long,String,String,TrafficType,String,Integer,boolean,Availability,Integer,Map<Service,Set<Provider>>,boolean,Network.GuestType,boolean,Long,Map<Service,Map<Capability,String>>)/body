{
  String multicastRateStr=_configDao.getValue("multicast.throttling.rate");
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
  boolean dedicatedLb=true;
  if ((lbServiceCapabilityMap != null) && (!lbServiceCapabilityMap.isEmpty())) {
    String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
    dedicatedLb=isolationCapability.contains("dedicated");
  }
  Map<Capability,String> fwServiceCapabilityMap=serviceCapabilityMap.get(Service.Firewall);
  boolean sharedSourceNat=false;
  if ((fwServiceCapabilityMap != null) && (!fwServiceCapabilityMap.isEmpty())) {
    String sourceNatType=fwServiceCapabilityMap.get(Capability.SupportedSourceNatTypes.getName());
    sharedSourceNat=sourceNatType.contains("perzone");
  }
  Map<Capability,String> gwServiceCapabilityMap=serviceCapabilityMap.get(Service.Gateway);
  boolean redundantRouter=false;
  if ((gwServiceCapabilityMap != null) && (!gwServiceCapabilityMap.isEmpty())) {
    String param=gwServiceCapabilityMap.get(Capability.RedundantRouter);
    if (param != null) {
      redundantRouter=param.contains("true");
    }
  }
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,maxConnections,isDefault,availability,tags,type,dedicatedLb,sharedSourceNat,redundantRouter);
  if (serviceOfferingId != null) {
    offering.setServiceOfferingId(serviceOfferingId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug("Adding network offering " + offering);
  offering=_networkOfferingDao.persist(offering);
  if (serviceProviderMap != null) {
    for (    Network.Service service : serviceProviderMap.keySet()) {
      for (      Network.Provider provider : serviceProviderMap.get(service)) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
        _ntwkOffServiceMapDao.persist(offService);
        s_logger.trace("Added service for the network offering: " + offService);
      }
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(" Id: " + offering.getId() + " Name: "+ name);
  return offering;
}
