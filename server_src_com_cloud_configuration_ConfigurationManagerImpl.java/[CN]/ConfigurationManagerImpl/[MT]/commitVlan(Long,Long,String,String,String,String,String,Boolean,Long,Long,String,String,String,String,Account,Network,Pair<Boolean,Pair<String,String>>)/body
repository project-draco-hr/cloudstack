{
  return Transaction.execute(new TransactionCallback<Vlan>(){
    @Override public Vlan doInTransaction(    final TransactionStatus status){
      String newVlanNetmask=newVlanNetmaskFinal;
      String newVlanGateway=newVlanGatewayFinal;
      if ((sameSubnet == null || sameSubnet.first() == false) && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestType.Shared && _vlanDao.listVlansByNetworkId(networkId) != null) {
        final Map<Capability,String> dhcpCapabilities=_networkSvc.getNetworkOfferingServiceCapabilities(_networkOfferingDao.findById(network.getNetworkOfferingId()),Service.Dhcp);
        final String supportsMultipleSubnets=dhcpCapabilities.get(Capability.DhcpAccrossMultipleSubnets);
        if (supportsMultipleSubnets == null || !Boolean.valueOf(supportsMultipleSubnets)) {
          throw new InvalidParameterValueException("The Dhcp serivice provider for this network dose not support the dhcp  across multiple subnets");
        }
        s_logger.info("adding a new subnet to the network " + network.getId());
      }
 else       if (sameSubnet != null) {
        newVlanGateway=sameSubnet.second().first();
        newVlanNetmask=sameSubnet.second().second();
      }
      final Vlan vlan=createVlanAndPublicIpRange(zoneId,networkId,physicalNetworkId,forVirtualNetwork,podId,startIP,endIP,newVlanGateway,newVlanNetmask,vlanId,vlanOwner,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
      return vlan;
    }
  }
);
}
