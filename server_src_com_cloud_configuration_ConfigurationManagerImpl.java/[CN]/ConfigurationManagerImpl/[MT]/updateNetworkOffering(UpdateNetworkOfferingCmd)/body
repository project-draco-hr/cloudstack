{
  final String displayText=cmd.getDisplayText();
  final Long id=cmd.getId();
  final String name=cmd.getNetworkOfferingName();
  final String availabilityStr=cmd.getAvailability();
  final Integer sortKey=cmd.getSortKey();
  final Integer maxconn=cmd.getMaxconnections();
  Availability availability=null;
  final String state=cmd.getState();
  CallContext.current().setEventDetails(" Id: " + id);
  final NetworkOfferingVO offeringToUpdate=_networkOfferingDao.findById(id);
  if (offeringToUpdate == null) {
    throw new InvalidParameterValueException("unable to find network offering " + id);
  }
  if (offeringToUpdate.isSystemOnly()) {
    throw new InvalidParameterValueException("Can't update system network offerings");
  }
  final NetworkOfferingVO offering=_networkOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (sortKey != null) {
    offering.setSortKey(sortKey);
  }
  if (state != null) {
    boolean validState=false;
    for (    final NetworkOffering.State st : NetworkOffering.State.values()) {
      if (st.name().equalsIgnoreCase(state)) {
        validState=true;
        offering.setState(st);
      }
    }
    if (!validState) {
      throw new InvalidParameterValueException("Incorrect state value: " + state);
    }
  }
  if (availabilityStr != null) {
    for (    final Availability avlb : Availability.values()) {
      if (avlb.name().equalsIgnoreCase(availabilityStr)) {
        availability=avlb;
      }
    }
    if (availability == null) {
      throw new InvalidParameterValueException("Invalid value for Availability. Supported types: " + Availability.Required + ", "+ Availability.Optional);
    }
 else {
      if (availability == NetworkOffering.Availability.Required) {
        final boolean canOffBeRequired=offeringToUpdate.getGuestType() == GuestType.Isolated && _networkModel.areServicesSupportedByNetworkOffering(offeringToUpdate.getId(),Service.SourceNat);
        if (!canOffBeRequired) {
          throw new InvalidParameterValueException("Availability can be " + NetworkOffering.Availability.Required + " only for networkOfferings of type "+ GuestType.Isolated+ " and with "+ Service.SourceNat.getName()+ " enabled");
        }
        final List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {
          throw new InvalidParameterValueException("System already has network offering id=" + offerings.get(0).getId() + " with availability "+ Availability.Required);
        }
      }
      offering.setAvailability(availability);
    }
  }
  if (_ntwkOffServiceMapDao.areServicesSupportedByNetworkOffering(offering.getId(),Service.Lb)) {
    if (maxconn != null) {
      offering.setConcurrentConnections(maxconn);
    }
  }
  if (_networkOfferingDao.update(id,offering)) {
    return _networkOfferingDao.findById(id);
  }
 else {
    return null;
  }
}
