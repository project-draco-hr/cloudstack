{
  DataCenterVO dcVo=_zoneDao.findById(dcId);
  String guestNetworkCidr=dcVo.getGuestNetworkCidr();
  String guestIpNetwork=null;
  Long guestCidrSize=null;
  if (guestNetworkCidr != null) {
    String[] cidrTuple=guestNetworkCidr.split("\\/");
    guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1]));
    guestCidrSize=Long.parseLong(cidrTuple[1]);
  }
  String zoneName=getZoneName(dcId);
  for (  Long podId : currentPodCidrSubnets.keySet()) {
    String podName;
    if (podId.longValue() == -1) {
      podName="newPod";
    }
 else {
      podName=getPodName(podId.longValue());
    }
    List<Object> cidrPair=currentPodCidrSubnets.get(podId);
    String cidrAddress=(String)cidrPair.get(0);
    long cidrSize=((Long)cidrPair.get(1)).longValue();
    long cidrSizeToUse=-1;
    if (guestCidrSize == null || cidrSize < guestCidrSize) {
      cidrSizeToUse=cidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String cidrSubnet=NetUtils.getCidrSubNet(cidrAddress,cidrSizeToUse);
    if (guestNetworkCidr != null) {
      String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
      if (cidrSubnet.equals(guestSubnet)) {
        if (podName.equals("newPod")) {
          throw new InvalidParameterValueException("The subnet of the pod you are adding conflicts with the subnet of the Guest IP Network. Please specify a different CIDR.");
        }
 else {
          throw new InvalidParameterValueException("Warning: The subnet of pod " + podName + " in zone "+ zoneName+ " conflicts with the subnet of the Guest IP Network. Please change either the pod's CIDR or the Guest IP Network's subnet, and re-run install-vmops-management.");
        }
      }
    }
    for (    Long otherPodId : currentPodCidrSubnets.keySet()) {
      if (podId.equals(otherPodId)) {
        continue;
      }
      List<Object> otherCidrPair=currentPodCidrSubnets.get(otherPodId);
      String otherCidrAddress=(String)otherCidrPair.get(0);
      long otherCidrSize=((Long)otherCidrPair.get(1)).longValue();
      if (cidrSize < otherCidrSize) {
        cidrSizeToUse=cidrSize;
      }
 else {
        cidrSizeToUse=otherCidrSize;
      }
      cidrSubnet=NetUtils.getCidrSubNet(cidrAddress,cidrSizeToUse);
      String otherCidrSubnet=NetUtils.getCidrSubNet(otherCidrAddress,cidrSizeToUse);
      if (cidrSubnet.equals(otherCidrSubnet)) {
        String otherPodName=getPodName(otherPodId.longValue());
        if (podName.equals("newPod")) {
          throw new InvalidParameterValueException("The subnet of the pod you are adding conflicts with the subnet of pod " + otherPodName + " in zone "+ zoneName+ ". Please specify a different CIDR.");
        }
 else {
          throw new InvalidParameterValueException("Warning: The pods " + podName + " and "+ otherPodName+ " in zone "+ zoneName+ " have conflicting CIDR subnets. Please change the CIDR of one of these pods.");
        }
      }
    }
  }
}
