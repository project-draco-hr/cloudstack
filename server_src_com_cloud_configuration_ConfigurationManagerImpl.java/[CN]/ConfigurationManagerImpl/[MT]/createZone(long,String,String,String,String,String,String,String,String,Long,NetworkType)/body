{
  int vnetStart=0;
  int vnetEnd=0;
  if (vnetRange != null) {
    String[] tokens=vnetRange.split("-");
    try {
      vnetStart=Integer.parseInt(tokens[0]);
      if (tokens.length == 1) {
        vnetEnd=vnetStart;
      }
 else {
        vnetEnd=Integer.parseInt(tokens[1]);
      }
    }
 catch (    NumberFormatException e) {
      throw new InvalidParameterValueException("Please specify valid integers for the vlan range.");
    }
  }
  if ((guestCidr != null) && !NetUtils.isValidCIDR(guestCidr)) {
    throw new InvalidParameterValueException("Please enter a valid guest cidr");
  }
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,true,domainId);
  Transaction txn=Transaction.currentTxn();
  try {
    DataCenterVO zone=new DataCenterVO(zoneName,null,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domain,domainId,zoneType);
    zone=_zoneDao.persist(zone);
    if (vnetRange != null) {
      _zoneDao.addVnet(zone.getId(),vnetStart,vnetEnd);
    }
    if (zone != null && zone.getNetworkType() == NetworkType.Basic) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      List<NetworkOfferingVO> networkOffering=_networkOfferingDao.findByType(GuestIpType.DirectPodBased);
      if (networkOffering == null || networkOffering.isEmpty()) {
        throw new CloudRuntimeException("No default DirectPodBased network offering is found");
      }
      List<NetworkVO> networks=_networkMgr.setupNetworkConfiguration(systemAccount,networkOffering.get(0),userNetwork,plan,null,null,true);
      if (networks == null || networks.isEmpty()) {
        txn.rollback();
        throw new CloudRuntimeException("Fail to create a network");
      }
    }
    if (vnetRange != null) {
      saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_CREATE,"Successfully created new zone with name: " + zoneName + ".","dcId=" + zone.getId(),"dns1=" + dns1,"dns2=" + dns2,"internalDns1=" + internalDns1,"internalDns2=" + internalDns2,"vnetRange=" + vnetRange,"guestCidr=" + guestCidr);
    }
 else {
      saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_CREATE,"Successfully created new zone with name: " + zoneName + ".","dcId=" + zone.getId(),"dns1=" + dns1,"dns2=" + dns2,"internalDns1=" + internalDns1,"internalDns2=" + internalDns2,"guestCidr=" + guestCidr);
    }
    txn.commit();
    return zone;
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.warn("Exception: ",ex);
    throw new CloudRuntimeException("Fail to create a network");
  }
 finally {
    txn.close();
  }
}
