{
  int vnetStart=0;
  int vnetEnd=0;
  if (vnetRange != null) {
    String[] tokens=vnetRange.split("-");
    try {
      vnetStart=Integer.parseInt(tokens[0]);
      if (tokens.length == 1) {
        vnetEnd=vnetStart;
      }
 else {
        vnetEnd=Integer.parseInt(tokens[1]);
      }
    }
 catch (    NumberFormatException e) {
      throw new InvalidParameterValueException("Please specify valid integers for the vlan range.");
    }
    if ((vnetStart > vnetEnd) || (vnetStart < 0) || (vnetEnd > 4096)) {
      s_logger.warn("Invalid vnet range: start range:" + vnetStart + " end range:"+ vnetEnd);
      throw new InvalidParameterValueException("Vnet range should be between 0-4096 and start range should be lesser than or equal to end range");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException("Please enter a valid guest cidr");
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,true,domainId,allocationStateStr);
  byte[] bytes=(zoneName + System.currentTimeMillis()).getBytes();
  String zoneToken=UUID.nameUUIDFromBytes(bytes).toString();
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    DataCenterVO zone=new DataCenterVO(zoneName,null,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domain,domainId,zoneType,isSecurityGroupEnabled,zoneToken,networkDomain);
    if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
      Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
      zone.setAllocationState(allocationState);
    }
    zone=_zoneDao.persist(zone);
    if (vnetRange != null) {
      _zoneDao.addVnet(zone.getId(),vnetStart,vnetEnd);
    }
    createDefaultNetworks(zone.getId(),isSecurityGroupEnabled);
    txn.commit();
    return zone;
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.warn("Exception: ",ex);
    throw new CloudRuntimeException("Fail to create a network");
  }
 finally {
    txn.close();
  }
}
