{
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  final DataCenterVO zone=_zoneDao.findById(zoneId);
  final Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  final String cidrAddress=getCidrAddress(cidr);
  final int cidrSize=getCidrSize(cidr);
  if (startIp != null) {
    if (endIp == null) {
      endIp=NetUtils.getIpRangeEndIpFromCidr(cidrAddress,cidrSize);
    }
  }
  checkPodAttributes(-1,podName,zoneId,gateway,cidr,startIp,endIp,allocationStateStr,true,skipGatewayOverlapCheck);
  String ipRange;
  if (startIp != null) {
    ipRange=startIp + "-" + endIp;
  }
 else {
    throw new InvalidParameterValueException("Start ip is required parameter");
  }
  final HostPodVO podFinal=new HostPodVO(podName,zoneId,gateway,cidrAddress,cidrSize,ipRange);
  Grouping.AllocationState allocationState=null;
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    podFinal.setAllocationState(allocationState);
  }
  final String endIpFinal=endIp;
  return Transaction.execute(new TransactionCallback<HostPodVO>(){
    @Override public HostPodVO doInTransaction(    final TransactionStatus status){
      final HostPodVO pod=_podDao.persist(podFinal);
      if (startIp != null) {
        _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),startIp,endIpFinal);
      }
      final String[] linkLocalIpRanges=getLinkLocalIPRange();
      if (linkLocalIpRanges != null) {
        _zoneDao.addLinkLocalIpAddress(zoneId,pod.getId(),linkLocalIpRanges[0],linkLocalIpRanges[1]);
      }
      return pod;
    }
  }
);
}
