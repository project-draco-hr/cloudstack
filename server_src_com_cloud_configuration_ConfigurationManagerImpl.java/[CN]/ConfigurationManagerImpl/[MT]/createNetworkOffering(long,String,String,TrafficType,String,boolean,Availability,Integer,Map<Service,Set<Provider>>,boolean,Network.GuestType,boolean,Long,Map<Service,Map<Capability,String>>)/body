{
  String multicastRateStr=_configDao.getValue("multicast.throttling.rate");
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  if (availability == NetworkOffering.Availability.Required) {
    boolean canOffBeRequired=(type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat));
    if (!canOffBeRequired) {
      throw new InvalidParameterValueException("Availability can be " + NetworkOffering.Availability.Required + " only for networkOfferings of type "+ GuestType.Isolated+ " and with "+ Service.SourceNat.getName()+ " enabled");
    }
    List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (!offerings.isEmpty()) {
      throw new InvalidParameterValueException("System already has network offering id=" + offerings.get(0).getId() + " with availability "+ Availability.Required);
    }
  }
  Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
  boolean dedicatedLb=false;
  if ((lbServiceCapabilityMap != null) && (!lbServiceCapabilityMap.isEmpty())) {
    String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
    if (isolationCapability != null) {
      dedicatedLb=isolationCapability.contains("dedicated");
    }
 else {
      dedicatedLb=true;
    }
  }
  Map<Capability,String> sourceNatServiceCapabilityMap=serviceCapabilityMap.get(Service.SourceNat);
  boolean sharedSourceNat=false;
  boolean redundantRouter=false;
  if ((sourceNatServiceCapabilityMap != null) && (!sourceNatServiceCapabilityMap.isEmpty())) {
    String sourceNatType=sourceNatServiceCapabilityMap.get(Capability.SupportedSourceNatTypes.getName());
    if (sourceNatType != null) {
      sharedSourceNat=sourceNatType.contains("perzone");
    }
 else {
      sharedSourceNat=false;
    }
    String param=sourceNatServiceCapabilityMap.get(Capability.RedundantRouter);
    if (param != null) {
      redundantRouter=param.contains("true");
    }
 else {
      redundantRouter=false;
    }
  }
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,isDefault,availability,tags,type,dedicatedLb,sharedSourceNat,redundantRouter);
  if (serviceOfferingId != null) {
    offering.setServiceOfferingId(serviceOfferingId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug("Adding network offering " + offering);
  offering=_networkOfferingDao.persist(offering);
  if (serviceProviderMap != null) {
    for (    Network.Service service : serviceProviderMap.keySet()) {
      for (      Network.Provider provider : serviceProviderMap.get(service)) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
        _ntwkOffServiceMapDao.persist(offService);
        s_logger.trace("Added service for the network offering: " + offService);
      }
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(" Id: " + offering.getId() + " Name: "+ name);
  return offering;
}
