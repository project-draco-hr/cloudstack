{
  return Transaction.execute(new TransactionCallback<VlanVO>(){
    @Override public VlanVO doInTransaction(    final TransactionStatus status){
      VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId,physicalNetworkId,vlanIp6Gateway,vlanIp6Cidr,ipv6Range);
      logger.debug("Saving vlan range " + vlan);
      vlan=_vlanDao.persist(vlan);
      if (ipv4) {
        if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId(),networkId,physicalNetworkId)) {
          throw new CloudRuntimeException("Failed to save IPv4 range. Please contact Cloud Support.");
        }
      }
      if (vlanOwner != null) {
        final AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(vlanOwner.getId(),vlan.getId());
        _accountVlanMapDao.persist(accountVlanMapVO);
        final List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlan.getId());
        for (        final IPAddressVO ip : ips) {
          UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_ASSIGN,vlanOwner.getId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
        }
        _resourceLimitMgr.incrementResourceCount(vlanOwner.getId(),ResourceType.public_ip,new Long(ips.size()));
      }
 else       if (podId != null) {
        final PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
        _podVlanMapDao.persist(podVlanMapVO);
      }
      return vlan;
    }
  }
);
}
