{
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException("There are private IP addresses allocated for this pod");
  }
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,"volumes");
  volumes.add(1,"pod_id");
  volumes.add(2,"there are storage volumes for this pod");
  tablesToCheck.add(volumes);
  List<String> host=new ArrayList<String>();
  host.add(0,"host");
  host.add(1,"pod_id");
  host.add(2,"there are servers running in this pod");
  tablesToCheck.add(host);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,"vm_instance");
  vmInstance.add(1,"pod_id");
  vmInstance.add(2,"there are virtual machines running in this pod");
  tablesToCheck.add(vmInstance);
  List<String> cluster=new ArrayList<String>();
  cluster.add(0,"cluster");
  cluster.add(1,"pod_id");
  cluster.add(2,"there are clusters in this pod");
  tablesToCheck.add(cluster);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals("event") || tableName.equals("cloud_usage") || tableName.equals("usage_vm_instance")|| tableName.equals("usage_ip_address")|| tableName.equals("usage_network")|| tableName.equals("usage_job")|| tableName.equals("account")|| tableName.equals("user_statistics")) {
      dbName="cloud_usage";
    }
 else {
      dbName="cloud";
    }
    String selectSql="SELECT * FROM `" + dbName + "`.`"+ tableName+ "` WHERE "+ column+ " = ?";
    if (tableName.equals("host")) {
      selectSql+=" and removed IS NULL";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException("The pod cannot be deleted because " + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException("The Management Server failed to detect if pod is deletable. Please contact Cloud Support.");
    }
  }
}
