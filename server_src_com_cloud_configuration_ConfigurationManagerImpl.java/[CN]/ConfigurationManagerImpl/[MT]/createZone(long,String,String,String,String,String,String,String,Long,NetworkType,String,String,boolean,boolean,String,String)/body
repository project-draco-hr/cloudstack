{
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException("Please enter a valid guest cidr");
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,true,domainId,allocationStateStr,ip6Dns1,ip6Dns2);
  byte[] bytes=(zoneName + System.currentTimeMillis()).getBytes();
  String zoneToken=UUID.nameUUIDFromBytes(bytes).toString();
  final DataCenterVO zoneFinal=new DataCenterVO(zoneName,null,dns1,dns2,internalDns1,internalDns2,guestCidr,domain,domainId,zoneType,zoneToken,networkDomain,isSecurityGroupEnabled,isLocalStorageEnabled,ip6Dns1,ip6Dns2);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zoneFinal.setAllocationState(allocationState);
  }
 else {
    zoneFinal.setAllocationState(Grouping.AllocationState.Disabled);
  }
  return Transaction.execute(new TransactionCallback<DataCenterVO>(){
    @Override public DataCenterVO doInTransaction(    TransactionStatus status){
      DataCenterVO zone=_zoneDao.persist(zoneFinal);
      if (domainId != null) {
        AffinityGroup group=createDedicatedAffinityGroup(null,domainId,null);
        DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(zone.getId(),null,null,null,domainId,null,group.getId());
        _dedicatedDao.persist(dedicatedResource);
      }
      createDefaultSystemNetworks(zone.getId());
      return zone;
    }
  }
);
}
