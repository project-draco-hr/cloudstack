{
  long startIPLong=NetUtils.ip2Long(startIP);
  long endIPLong=NetUtils.ip2Long(endIP);
  Transaction txn=Transaction.currentTxn();
  String deleteSql="DELETE FROM `cloud`.`op_dc_ip_address_alloc` WHERE ip_address = ? AND pod_id = ? AND data_center_id = ?";
  String isPrivateIPAllocatedSelectSql="SELECT * FROM `cloud`.`op_dc_ip_address_alloc` WHERE ip_address = ? AND data_center_id = ? AND pod_id = ?";
  List<String> problemIPs=new ArrayList<String>();
  PreparedStatement deleteIPStmt=null;
  PreparedStatement isAllocatedStmt=null;
  txn.start();
  try {
    deleteIPStmt=txn.prepareAutoCloseStatement(deleteSql);
    isAllocatedStmt=txn.prepareAutoCloseStatement(isPrivateIPAllocatedSelectSql);
  }
 catch (  SQLException e) {
    return null;
  }
  while (startIPLong <= endIPLong) {
    if (!isPrivateIPAllocated(NetUtils.long2Ip(startIPLong),podId,zoneId,isAllocatedStmt)) {
      try {
        deleteIPStmt.clearParameters();
        deleteIPStmt.setString(1,NetUtils.long2Ip(startIPLong));
        deleteIPStmt.setLong(2,podId);
        deleteIPStmt.setLong(3,zoneId);
        deleteIPStmt.executeUpdate();
      }
 catch (      Exception ex) {
      }
    }
 else {
      problemIPs.add(NetUtils.long2Ip(startIPLong));
    }
    startIPLong+=1;
  }
  txn.commit();
  return problemIPs;
}
