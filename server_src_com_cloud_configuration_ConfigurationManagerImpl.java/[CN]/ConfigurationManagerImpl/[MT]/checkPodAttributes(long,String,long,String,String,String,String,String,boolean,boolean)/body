{
  if (checkForDuplicates) {
    if (validPod(podName,zoneId)) {
      throw new InvalidParameterValueException("A pod with name: " + podName + " already exists in zone "+ zoneId+ ". Please specify a different pod name. ");
    }
  }
  String cidrAddress;
  long cidrSize;
  if (NetUtils.isValidCIDR(cidr)) {
    cidrAddress=getCidrAddress(cidr);
    cidrSize=getCidrSize(cidr);
  }
 else {
    throw new InvalidParameterValueException("Please enter a valid CIDR for pod: " + podName);
  }
  checkIpRange(startIp,endIp,cidrAddress,cidrSize);
  checkOverlapPublicIpRange(zoneId,startIp,endIp);
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException("The gateway is not a valid IP address.");
  }
  if (!NetUtils.getCidrSubNet(gateway,cidrSize).equalsIgnoreCase(NetUtils.getCidrSubNet(cidrAddress,cidrSize))) {
    throw new InvalidParameterValueException("The gateway is not in the CIDR subnet.");
  }
  if (!skipGatewayOverlapCheck) {
    if (NetUtils.ipRangesOverlap(startIp,endIp,gateway,gateway)) {
      throw new InvalidParameterValueException("The gateway shouldn't overlap start/end ip addresses");
    }
  }
  final String checkPodCIDRs=_configDao.getValue("check.pod.cidrs");
  if (checkPodCIDRs == null || checkPodCIDRs.trim().isEmpty() || Boolean.parseBoolean(checkPodCIDRs)) {
    checkPodCidrSubnets(zoneId,podId,cidr);
  }
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    try {
      Grouping.AllocationState.valueOf(allocationStateStr);
    }
 catch (    final IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve Allocation State '" + allocationStateStr + "' to a supported state");
    }
  }
}
