{
  Long podId=cmd.getId();
  Long userId=1L;
  if (UserContext.current() != null) {
    userId=UserContext.current().getCallerUserId();
  }
  if (!validPod(podId)) {
    throw new InvalidParameterValueException("A pod with ID: " + podId + " does not exist.");
  }
  checkIfPodIsDeletable(podId);
  HostPodVO pod=_podDao.findById(podId);
  DataCenterVO zone=_zoneDao.findById(pod.getDataCenterId());
  List<DataCenterIpAddressVO> privateIps=_privateIpAddressDao.listByPodIdDcId(Long.valueOf(podId),pod.getDataCenterId());
  if (privateIps != null && privateIps.size() != 0) {
    if (!(_privateIpAddressDao.deleteIpAddressByPod(podId))) {
      throw new CloudRuntimeException("Failed to cleanup private ip addresses for pod " + podId);
    }
  }
  if (!(_LinkLocalIpAllocDao.deleteIpAddressByPod(podId))) {
    throw new CloudRuntimeException("Failed to cleanup private ip addresses for pod " + podId);
  }
  List<? extends Vlan> vlans=_networkMgr.listPodVlans(podId);
  if (vlans != null && !vlans.isEmpty()) {
    for (    Vlan vlan : vlans) {
      _vlanDao.remove(vlan.getId());
    }
  }
  if (!(_podDao.expunge(podId))) {
    throw new CloudRuntimeException("Failed to delete pod " + podId);
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_POD_DELETE,"Successfully deleted pod with name: " + pod.getName() + " in zone: "+ zone.getName()+ ".","podId=" + podId,"dcId=" + zone.getId());
  return true;
}
