{
  Config c=Config.getConfig(name);
  if (c == null) {
    s_logger.error("Missing configuration variable " + name + " in configuration table");
    return "Invalid configuration variable.";
  }
  String configScope=c.getScope();
  if (scope != null) {
    if (!configScope.contains(scope)) {
      s_logger.error("Invalid scope id provided for the parameter " + name);
      return "Invalid scope id provided for the parameter " + name;
    }
  }
  Class<?> type=c.getType();
  if (value == null) {
    if (type.equals(Boolean.class)) {
      return "Please enter either 'true' or 'false'.";
    }
    if (overprovisioningFactorsForValidation.contains(name)) {
      String msg="value cannot be null for the parameter " + name;
      s_logger.error(msg);
      return msg;
    }
    return null;
  }
  value=value.trim();
  try {
    if (overprovisioningFactorsForValidation.contains(name) && (Float.parseFloat(value) < 1f)) {
      String msg=name + " should be greater than or equal to 1";
      s_logger.error(msg);
      throw new InvalidParameterValueException(msg);
    }
  }
 catch (  NumberFormatException e) {
    String msg="There was an error trying to parse the float value for: " + name;
    s_logger.error(msg);
    throw new InvalidParameterValueException(msg);
  }
  if (type.equals(Boolean.class)) {
    if (!(value.equals("true") || value.equals("false"))) {
      s_logger.error("Configuration variable " + name + " is expecting true or false instead of "+ value);
      return "Please enter either 'true' or 'false'.";
    }
    return null;
  }
  if (type.equals(Integer.class) && configValuesForValidation.contains(name)) {
    try {
      int val=Integer.parseInt(value);
      if (val <= 0) {
        throw new InvalidParameterValueException("Please enter a positive value for the configuration parameter:" + name);
      }
    }
 catch (    NumberFormatException e) {
      s_logger.error("There was an error trying to parse the integer value for:" + name);
      throw new InvalidParameterValueException("There was an error trying to parse the integer value for:" + name);
    }
  }
  if (type.equals(Float.class)) {
    try {
      Float val=Float.parseFloat(value);
      if (weightBasedParametersForValidation.contains(name) && (val < 0f || val > 1f)) {
        throw new InvalidParameterValueException("Please enter a value between 0 and 1 for the configuration parameter: " + name);
      }
    }
 catch (    NumberFormatException e) {
      s_logger.error("There was an error trying to parse the float value for:" + name);
      throw new InvalidParameterValueException("There was an error trying to parse the float value for:" + name);
    }
  }
  String range=c.getRange();
  if (range == null) {
    return null;
  }
  if (type.equals(String.class)) {
    if (range.equals("privateip")) {
      try {
        if (!NetUtils.isSiteLocalAddress(value)) {
          s_logger.error("privateip range " + value + " is not a site local address for configuration variable "+ name);
          return "Please enter a site local IP address.";
        }
      }
 catch (      NullPointerException e) {
        s_logger.error("Error parsing ip address for " + name);
        throw new InvalidParameterValueException("Error parsing ip address");
      }
    }
 else     if (range.equals("netmask")) {
      if (!NetUtils.isValidNetmask(value)) {
        s_logger.error("netmask " + value + " is not a valid net mask for configuration variable "+ name);
        return "Please enter a valid netmask.";
      }
    }
 else     if (range.equals("hypervisorList")) {
      String[] hypervisors=value.split(",");
      if (hypervisors == null) {
        return "Please enter hypervisor list, separated by comma";
      }
      for (      String hypervisor : hypervisors) {
        if (HypervisorType.getType(hypervisor) == HypervisorType.Any || HypervisorType.getType(hypervisor) == HypervisorType.None) {
          return "Please enter a valid hypervisor type";
        }
      }
    }
 else     if (range.equalsIgnoreCase("instanceName")) {
      if (!NetUtils.verifyInstanceName(value)) {
        return "Instance name can not contain hyphen, space or plus sign";
      }
    }
 else     if (range.equals("routes")) {
      String[] routes=value.split(",");
      for (      String route : routes) {
        if (route != null) {
          String routeToVerify=route.trim();
          if (!NetUtils.isValidCIDR(routeToVerify)) {
            throw new InvalidParameterValueException("Invalid value for blacklisted route: " + route + ". Valid format is list"+ " of cidrs separated by coma. Example: 10.1.1.0/24,192.168.0.0/24");
          }
        }
      }
    }
 else {
      String[] options=range.split(",");
      for (      String option : options) {
        if (option.trim().equalsIgnoreCase(value)) {
          return null;
        }
      }
      s_logger.error("configuration value for " + name + " is invalid");
      return "Please enter : " + range;
    }
  }
 else   if (type.equals(Integer.class)) {
    String[] options=range.split("-");
    if (options.length != 2) {
      String msg="configuration range " + range + " for "+ name+ " is invalid";
      s_logger.error(msg);
      return msg;
    }
    int min=Integer.parseInt(options[0]);
    int max=Integer.parseInt(options[1]);
    int val=Integer.parseInt(value);
    if (val < min || val > max) {
      s_logger.error("configuration value for " + name + " is invalid");
      return "Please enter : " + range;
    }
  }
  return null;
}
