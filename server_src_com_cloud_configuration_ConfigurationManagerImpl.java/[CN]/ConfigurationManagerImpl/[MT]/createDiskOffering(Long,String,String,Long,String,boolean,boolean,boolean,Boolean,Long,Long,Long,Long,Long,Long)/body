{
  long diskSize=0;
  if (numGibibytes != null && (numGibibytes <= 0)) {
    throw new InvalidParameterValueException("Please specify a disk size of at least 1 Gb.");
  }
 else   if (numGibibytes != null && (numGibibytes > _maxVolumeSizeInGb)) {
    throw new InvalidParameterValueException("The maximum size for a disk is " + _maxVolumeSizeInGb + " Gb.");
  }
  if (numGibibytes != null) {
    diskSize=numGibibytes * 1024 * 1024* 1024;
  }
  if (diskSize == 0) {
    isCustomized=true;
  }
  if (isCustomizedIops != null) {
    bytesReadRate=null;
    bytesWriteRate=null;
    iopsReadRate=null;
    iopsWriteRate=null;
    if (isCustomizedIops) {
      minIops=null;
      maxIops=null;
    }
 else {
      if (minIops == null && maxIops == null) {
        minIops=0L;
        maxIops=0L;
      }
 else {
        if (minIops == null || minIops <= 0) {
          throw new InvalidParameterValueException("The min IOPS must be greater than 0.");
        }
        if (maxIops == null) {
          maxIops=0L;
        }
        if (minIops > maxIops) {
          throw new InvalidParameterValueException("The min IOPS must be less than or equal to the max IOPS.");
        }
      }
    }
  }
 else {
    minIops=null;
    maxIops=null;
  }
  tags=StringUtils.cleanupTags(tags);
  DiskOfferingVO newDiskOffering=new DiskOfferingVO(domainId,name,description,diskSize,tags,isCustomized,isCustomizedIops,minIops,maxIops);
  newDiskOffering.setUseLocalStorage(localStorageRequired);
  newDiskOffering.setDisplayOffering(isDisplayOfferingEnabled);
  if (bytesReadRate != null && (bytesReadRate > 0))   newDiskOffering.setBytesReadRate(bytesReadRate);
  if (bytesWriteRate != null && (bytesWriteRate > 0))   newDiskOffering.setBytesWriteRate(bytesWriteRate);
  if (iopsReadRate != null && (iopsReadRate > 0))   newDiskOffering.setIopsReadRate(iopsReadRate);
  if (iopsWriteRate != null && (iopsWriteRate > 0))   newDiskOffering.setIopsWriteRate(iopsWriteRate);
  CallContext.current().setEventDetails("Disk offering id=" + newDiskOffering.getId());
  DiskOfferingVO offering=_diskOfferingDao.persist(newDiskOffering);
  if (offering != null) {
    CallContext.current().setEventDetails("Disk offering id=" + newDiskOffering.getId());
    return offering;
  }
 else {
    return null;
  }
}
