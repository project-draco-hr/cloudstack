@attr(tags=['advanced', 'advancedns'])
def test_deployVM_isolatedAndShared(self):
    ' Test VM deployment in shared and isolated networks '
    self.admin_account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.account.id, liistall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Admin type account created: %s' % self.admin_account.name))
    self.services['network_offering']['specifyVlan'] = 'True'
    self.services['network_offering']['specifyIpRanges'] = 'True'
    self.shared_network_offering = NetworkOffering.create(self.api_client, self.services['network_offering'], conservemode=False)
    self.cleanup.append(self.shared_network_offering)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be bydefault disabled.')
    self.debug(('Shared Network offering created: %s' % self.shared_network_offering.id))
    network_offering_update_response = NetworkOffering.update(self.shared_network_offering, self.api_client, id=self.shared_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    self.isolated_network_offering = NetworkOffering.create(self.api_client, self.services['isolated_network_offering'], conservemode=False)
    self.cleanup.append(self.isolated_network_offering)
    network_offering_update_response = NetworkOffering.update(self.isolated_network_offering, self.api_client, id=self.isolated_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.isolated_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The isolated network offering state should get updated to Enabled.')
    self.debug(('Isolated Network Offering created: %s' % self.isolated_network_offering.id))
    list_physical_networks_response = PhysicalNetwork.list(self.api_client, zoneid=self.zone.id)
    self.assertEqual(isinstance(list_physical_networks_response, list), True, 'listPhysicalNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_physical_networks_response), 0, 'listPhysicalNetworks should return at least one physical network.')
    physical_network = list_physical_networks_response[0]
    self.services['network']['acltype'] = 'domain'
    self.services['network']['networkofferingid'] = self.shared_network_offering.id
    self.services['network']['physicalnetworkid'] = physical_network.id
    self.shared_network = Network.create(self.api_client, self.services['network'], domainid=self.admin_account.account.domainid, networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.shared_network)
    list_networks_response = Network.list(self.api_client, id=self.shared_network.id)
    self.assertEqual(isinstance(list_networks_response, list), True, 'listNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_networks_response), 0, 'listNetworks returned empty list.')
    self.assertEqual(list_networks_response[0].specifyipranges, True, 'The network is created with ip range but the flag is set to False.')
    self.debug(('Shared Network created: %s' % self.shared_network.id))
    self.isolated_network = Network.create(self.api_client, self.services['isolated_network'], accountid=self.admin_account.name, domainid=self.admin_account.account.domainid, networkofferingid=self.isolated_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.isolated_network)
    list_networks_response = Network.list(self.api_client, id=self.isolated_network.id)
    self.assertEqual(isinstance(list_networks_response, list), True, 'listNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_networks_response), 0, 'listNetworks returned empty list.')
    self.debug(('Isolated Network created: %s' % self.isolated_network.id))
    self.shared_network_admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.account.domainid, networkids=self.shared_network.id, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.api_client, id=self.shared_network_admin_account_virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    self.debug(('Virtual Machine created: %s' % self.shared_network_admin_account_virtual_machine.id))
    self.assertTrue((self.shared_network_admin_account_virtual_machine.nic[0].ipaddress is not None), 'ip should be assigned to running virtual machine')
    self.isolated_network_admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.account.domainid, networkids=self.isolated_network.id, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.api_client, id=self.isolated_network_admin_account_virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    self.debug(('Virtual Machine created: %s' % self.isolated_network_admin_account_virtual_machine.id))
    self.assertTrue((self.isolated_network_admin_account_virtual_machine.nic[0].ipaddress is not None), 'ip should be assigned to running virtual machine')
    self.debug(('Associating public IP for account: %s' % self.admin_account.name))
    self.public_ip = PublicIPAddress.create(self.api_client, accountid=self.admin_account.name, zoneid=self.zone.id, domainid=self.admin_account.account.domainid, networkid=self.isolated_network.id)
    self.debug(('Associated %s with network %s' % (self.public_ip.ipaddress.ipaddress, self.isolated_network.id)))
    self.debug(('Creating PF rule for IP address: %s' % self.public_ip.ipaddress.ipaddress))
    public_ip = self.public_ip.ipaddress
    StaticNATRule.enable(self.api_client, public_ip.id, self.isolated_network_admin_account_virtual_machine.id)
    self.debug(('Enabled static NAT for public IP ID: %s' % public_ip.id))
    fw_rule = FireWallRule.create(self.api_client, ipaddressid=self.public_ip.ipaddress, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug(('Created firewall rule: %s' % fw_rule.id))
    fw_rules = FireWallRule.list(self.api_client, id=fw_rule.id)
    self.assertEqual(isinstance(fw_rules, list), True, 'List fw rules should return a valid firewall rules')
    self.assertNotEqual(len(fw_rules), 0, 'Length of fw rules response should not be zero')
    try:
        self.debug(('SSH into VM: %s' % self.isolated_network_admin_account_virtual_machine.id))
        ssh = self.isolated_network_admin_account_virtual_machine.get_ssh_client(ipaddress=self.public_ip.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.isolated_network_admin_account_virtual_machine.ipaddress, e)))
