@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_createSharedNetwork_domainSpecific(self):
    ' Test Shared Network with scope domain '
    self.admin_account = Account.create(self.api_client, self.testdata['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Admin type account created: %s' % self.admin_account.id))
    self.dom_domain = Domain.create(self.api_client, self.testdata['domain'])
    self.cleanup_domains.append(self.dom_domain)
    list_domains_response = Domain.list(self.api_client, id=self.dom_domain.id)
    self.assertEqual(isinstance(list_domains_response, list), True, 'listDomains returned invalid object in response.')
    self.assertNotEqual(len(list_domains_response), 0, 'listDomains returned empty list.')
    self.debug(('Domain created: %s' % self.dom_domain.id))
    self.domain_admin_account = Account.create(self.api_client, self.testdata['account'], admin=True, domainid=self.dom_domain.id)
    self.cleanup_accounts.append(self.domain_admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.domain_admin_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The domain admin account created is not enabled.')
    self.debug(('Domain admin account created: %s' % self.domain_admin_account.id))
    self.domain_user_account = Account.create(self.api_client, self.testdata['account'], admin=False, domainid=self.dom_domain.id)
    self.cleanup_accounts.append(self.domain_user_account)
    list_accounts_response = Account.list(self.api_client, id=self.domain_user_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The domain user account created is not enabled.')
    self.debug(('Domain user account created: %s' % self.domain_user_account.id))
    (physical_network, shared_vlan) = get_free_vlan(self.api_client, self.zone.id)
    if (shared_vlan is None):
        self.fail('Failed to get free vlan id for shared network')
    self.debug(('Physical Network found: %s' % physical_network.id))
    self.testdata['shared_network_offering']['specifyVlan'] = 'True'
    self.testdata['shared_network_offering']['specifyIpRanges'] = 'True'
    self.shared_network_offering = NetworkOffering.create(self.api_client, self.testdata['shared_network_offering'], conservemode=False)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be by default disabled.')
    self.debug(('Shared Network Offering created: %s' % self.shared_network_offering.id))
    NetworkOffering.update(self.shared_network_offering, self.api_client, id=self.shared_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    self.testdata['shared_network']['acltype'] = 'domain'
    self.testdata['shared_network']['networkofferingid'] = self.shared_network_offering.id
    self.testdata['shared_network']['physicalnetworkid'] = physical_network.id
    self.testdata['shared_network']['vlan'] = shared_vlan
    self.network = Network.create(self.api_client, self.testdata['shared_network'], accountid=self.domain_admin_account.name, domainid=self.dom_domain.id, networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.network)
    list_networks_response = Network.list(self.api_client, id=self.network.id, listall=True)
    self.assertEqual(isinstance(list_networks_response, list), True, 'listNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_networks_response), 0, 'listNetworks returned empty list.')
    self.assertEqual(list_networks_response[0].specifyipranges, True, 'The network is created with ip range but the flag is                    set to False.')
    self.debug(('Shared Network created: %s' % self.network.id))
    try:
        self.admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.testdata['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.domainid, networkids=self.network.id, serviceofferingid=self.service_offering.id)
        self.fail('Virtual Machine got created in admin account with network                 specified but the network used is of scope domain and admin                 account is not part of this domain.')
    except Exception as e:
        self.debug(('Virtual Machine creation failed as network used have scoped                only for DOM domain. Exception: %s' % e))
    self.domain_user_account_virtual_machine = VirtualMachine.create(self.api_client, self.testdata['virtual_machine'], accountid=self.domain_user_account.name, domainid=self.domain_user_account.domainid, networkids=self.network.id, serviceofferingid=self.service_offering.id)
    self.cleanup_vms.append(self.domain_user_account_virtual_machine)
    vms = VirtualMachine.list(self.api_client, id=self.domain_user_account_virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    ip_range = list(netaddr.iter_iprange(unicode(self.testdata['shared_network']['startip']), unicode(self.testdata['shared_network']['endip'])))
    if (netaddr.IPAddress(unicode(vms[0].nic[0].ipaddress)) not in ip_range):
        self.fail('Virtual machine ip should be from the ip range                        assigned to network created.')
    self.domain_admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.testdata['virtual_machine'], accountid=self.domain_admin_account.name, domainid=self.domain_admin_account.domainid, networkids=self.network.id, serviceofferingid=self.service_offering.id)
    self.cleanup_vms.append(self.domain_admin_account_virtual_machine)
    vms = VirtualMachine.list(self.api_client, id=self.domain_admin_account_virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    ip_range = list(netaddr.iter_iprange(unicode(self.testdata['shared_network']['startip']), unicode(self.testdata['shared_network']['endip'])))
    if (netaddr.IPAddress(unicode(vms[0].nic[0].ipaddress)) not in ip_range):
        self.fail('Virtual machine ip should be from the ip range assigne                 to network created.')
