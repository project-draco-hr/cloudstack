@attr(tags=['advanced', 'advancedns'])
def test_createSharedNetwork_projectSpecific(self):
    ' Test Shared Network with scope project  '
    self.admin_account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Admin account created: %s' % self.admin_account.id))
    self.services['project']['name'] = 'proj-SADJKS'
    self.services['project']['displaytext'] = 'proj-SADJKS'
    self.project1 = Project.create(self.api_client, self.services['project'], account=self.admin_account.name, domainid=self.admin_account.domainid)
    self.cleanup_projects.append(self.project1)
    list_projects_response = Project.list(self.api_client, id=self.project1.id, listall=True)
    self.assertEqual(isinstance(list_projects_response, list), True, 'listProjects returned invalid object in response.')
    self.assertNotEqual(len(list_projects_response), 0, 'listProjects should return at least one.')
    self.debug(('Project created: %s' % self.project1.id))
    self.services['project']['name'] = 'proj-SLDJK'
    self.services['project']['displaytext'] = 'proj-SLDJK'
    self.project2 = Project.create(self.api_client, self.services['project'], account=self.admin_account.name, domainid=self.admin_account.domainid)
    self.cleanup_projects.append(self.project2)
    list_projects_response = Project.list(self.api_client, id=self.project2.id, listall=True)
    self.assertEqual(isinstance(list_projects_response, list), True, 'listProjects returned invalid object in response.')
    self.assertNotEqual(len(list_projects_response), 0, 'listProjects should return at least one.')
    self.debug(('Project2 created: %s' % self.project2.id))
    (physical_network, shared_vlan) = self.getFreeVlan(self.api_client, self.zone.id)
    self.debug(('Physical Network found: %s' % physical_network.id))
    self.services['network_offering']['specifyVlan'] = 'True'
    self.services['network_offering']['specifyIpRanges'] = 'True'
    self.shared_network_offering = NetworkOffering.create(self.api_client, self.services['network_offering'], conservemode=False)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be by default disabled.')
    NetworkOffering.update(self.shared_network_offering, self.api_client, id=self.shared_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    self.debug(('Shared Network found: %s' % self.shared_network_offering.id))
    self.services['network']['acltype'] = 'account'
    self.services['network']['networkofferingid'] = self.shared_network_offering.id
    self.services['network']['physicalnetworkid'] = physical_network.id
    self.services['network']['vlan'] = shared_vlan
    self.network = Network.create(self.api_client, self.services['network'], projectid=self.project1.id, domainid=self.admin_account.domainid, networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.network)
    list_networks_response = Network.list(self.api_client, id=self.network.id, projectid=self.project1.id, listall=True)
    self.assertEqual(isinstance(list_networks_response, list), True, 'listNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_networks_response), 0, 'listNetworks returned empty list.')
    self.assertEqual(list_networks_response[0].specifyipranges, True, 'The network is created with ip range but the flag is set to False.')
    self.debug(('Shared Network created: %s' % self.network.id))
    try:
        self.project2_admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.domainid, networkids=self.network.id, projectid=self.project2.id, serviceofferingid=self.service_offering.id)
        self.fail('Virtual Machine got created in admin account with network specified but the network used is of scope project and the project2 is not assigned for the network.')
    except Exception as e:
        self.debug(('Virtual Machine creation failed as network used have scoped only for project project1. Exception: %s' % e))
    self.project1_admin_account_virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.domainid, networkids=self.network.id, projectid=self.project1.id, serviceofferingid=self.service_offering.id)
    vms = VirtualMachine.list(self.api_client, id=self.project1_admin_account_virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'listVirtualMachines returned invalid object in response.')
    self.assertNotEqual(len(vms), 0, 'listVirtualMachines returned empty list.')
    ip_range = list(netaddr.iter_iprange(unicode(self.services['network']['startip']), unicode(self.services['network']['endip'])))
    if (netaddr.IPAddress(unicode(vms[0].nic[0].ipaddress)) not in ip_range):
        self.fail('Virtual machine ip should be from the ip range assigned to network created.')
