@attr(tags=['advanced', 'advancedns'])
def test_createSharedNetwork_usedVlan2(self):
    ' Test Shared Network with used vlan 02 '
    self.admin_account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Admin account created: %s' % self.admin_account.id))
    (physical_network, shared_ntwk_vlan) = self.getFreeVlan(self.api_client, self.zone.id)
    self.debug(('Physical Network found: %s' % physical_network.id))
    self.services['network_offering']['specifyVlan'] = 'True'
    self.services['network_offering']['specifyIpRanges'] = 'True'
    self.shared_network_offering = NetworkOffering.create(self.api_client, self.services['network_offering'], conservemode=False)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be bydefault disabled.')
    self.debug(('Shared Network Offering created: %s' % self.shared_network_offering.id))
    network_offering_update_response = NetworkOffering.update(self.shared_network_offering, self.api_client, id=self.shared_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    self.services['network']['acltype'] = 'Domain'
    self.services['network']['networkofferingid'] = self.shared_network_offering.id
    self.services['network']['physicalnetworkid'] = physical_network.id
    self.services['network']['vlan'] = shared_ntwk_vlan
    self.debug(('Creating a shared network in non-cloudstack VLAN %s' % shared_ntwk_vlan))
    self.network = Network.create(self.api_client, self.services['network'], networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.network)
    list_networks_response = Network.list(self.api_client, id=self.network.id)
    self.assertEqual(isinstance(list_networks_response, list), True, 'listNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_networks_response), 0, 'listNetworks returned empty list.')
    self.assertEqual(list_networks_response[0].specifyipranges, True, 'The network is created with ip range but the flag is set to False.')
    self.debug(('Network created: %s' % self.network.id))
    self.services['network1']['vlan'] = self.services['network']['vlan']
    self.services['network1']['acltype'] = 'domain'
    self.services['network1']['networkofferingid'] = self.shared_network_offering.id
    self.services['network1']['physicalnetworkid'] = physical_network.id
    try:
        self.network1 = Network.create(self.api_client, self.services['network'], networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
        self.cleanup_networks.append(self.network1)
        self.fail('Network got created with used vlan id, which is invalid')
    except Exception as e:
        self.debug('Network creation failed because the valn id being used by another network.')
