@data(True, False)
@attr(tags=['advanced', 'advancedns', 'dvs'], required_hardware='false')
def test_restart_network(self, cleanup):
    ' Test restart shared Network\n\n        # Steps\n        # 1. Create a shared network in an account\n        # 2. Deploy a VM in the network\n        # 3. Restart the network with cleanup true and false\n        # 4. List the router for the network and verify that publicip of\n             the router remain the same\n        '
    account = Account.create(self.api_client, self.services['account'], domainid=self.domain.id)
    self.cleanup_accounts.append(account)
    (physical_network, shared_vlan) = get_free_vlan(self.api_client, self.zone.id)
    if (shared_vlan is None):
        self.fail('Failed to get free vlan id for shared network')
    self.debug(('Physical network found: %s' % physical_network.id))
    self.services['network_offering']['specifyVlan'] = 'True'
    self.services['network_offering']['specifyIpRanges'] = 'True'
    shared_network_offering = NetworkOffering.create(self.api_client, self.services['network_offering'], conservemode=False)
    NetworkOffering.update(shared_network_offering, self.api_client, id=shared_network_offering.id, state='enabled')
    self.services['network']['acltype'] = 'Domain'
    self.services['network']['networkofferingid'] = shared_network_offering.id
    self.services['network']['physicalnetworkid'] = physical_network.id
    self.services['network']['vlan'] = shared_vlan
    shared_network = Network.create(self.api_client, self.services['network'], networkofferingid=shared_network_offering.id, zoneid=self.zone.id)
    self.cleanup_networks.append(shared_network)
    self.debug(('Shared Network created for scope domain: %s' % shared_network.id))
    VirtualMachine.create(self.api_client, self.services['virtual_machine'], networkids=shared_network.id, serviceofferingid=self.service_offering.id)
    list_router_response = Router.list(self.api_client, networkid=shared_network.id, listall=True)
    self.assertEqual(validateList(list_router_response)[0], PASS, 'Router list validation failed')
    router = list_router_response[0]
    old_publicip = router.publicip
    shared_network.restart(self.api_client, cleanup=cleanup)
    list_router_response = Router.list(self.api_client, networkid=shared_network.id, listall=True)
    self.assertEqual(validateList(list_router_response)[0], PASS, 'Router list validation failed')
    router = list_router_response[0]
    self.assertEqual(router.publicip, old_publicip, 'Public IP of the router should remain same after network restart')
    return
