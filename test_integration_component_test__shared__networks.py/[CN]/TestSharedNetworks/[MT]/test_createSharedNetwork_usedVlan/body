@unittest.skip('skipped - This is a redundant case and also this                is causing issue for rest fo the cases ')
@attr(tags=['advanced', 'advancedns', 'NA'])
def test_createSharedNetwork_usedVlan(self):
    ' Test Shared Network with used vlan 01 '
    self.admin_account = Account.create(self.api_client, self.testdata['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Domain admin account created: %s' % self.admin_account.id))
    (physical_network, shared_vlan) = get_free_vlan(self.api_client, self.zone.id)
    if (shared_vlan is None):
        self.fail('Failed to get free vlan id for shared network')
    self.testdata['shared_network_offering']['specifyVlan'] = 'True'
    self.testdata['shared_network_offering']['specifyIpRanges'] = 'True'
    self.shared_network_offering = NetworkOffering.create(self.api_client, self.testdata['shared_network_offering'], conservemode=False)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be bydefault disabled.')
    self.debug(('Shared Network Offering created: %s' % self.shared_network_offering.id))
    NetworkOffering.update(self.shared_network_offering, self.api_client, id=self.shared_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.shared_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    self.testdata['shared_network']['vlan'] = str.split(str(physical_network.vlan), '-')[0]
    self.testdata['shared_network']['acltype'] = 'domain'
    self.testdata['shared_network']['networkofferingid'] = self.shared_network_offering.id
    self.testdata['shared_network']['physicalnetworkid'] = physical_network.id
    self.testdata['shared_network']['vlan'] = shared_vlan
    try:
        self.network = Network.create(self.api_client, self.testdata['shared_network'], networkofferingid=self.shared_network_offering.id, zoneid=self.zone.id)
        self.fail(('Network created with used vlan %s id, which is invalid' % shared_vlan))
    except Exception as e:
        self.debug(('Network creation failed because the valn id being used by                 another network. Exception: %s' % e))
