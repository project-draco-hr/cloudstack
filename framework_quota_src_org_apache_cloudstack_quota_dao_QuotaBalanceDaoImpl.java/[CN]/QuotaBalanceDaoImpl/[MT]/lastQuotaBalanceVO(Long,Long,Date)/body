{
  return Transaction.execute(TransactionLegacy.USAGE_DB,new TransactionCallback<List<QuotaBalanceVO>>(){
    @Override public List<QuotaBalanceVO> doInTransaction(    final TransactionStatus status){
      List<QuotaBalanceVO> quotaUsageRecords=null;
      List<QuotaBalanceVO> trimmedRecords=new ArrayList<QuotaBalanceVO>();
      Filter filter=new Filter(QuotaBalanceVO.class,"updatedOn",false,0L,100L);
      QueryBuilder<QuotaBalanceVO> qb=QueryBuilder.create(QuotaBalanceVO.class);
      if (accountId != null) {
        qb.and(qb.entity().getAccountId(),SearchCriteria.Op.EQ,accountId);
      }
      if (domainId != null) {
        qb.and(qb.entity().getDomainId(),SearchCriteria.Op.EQ,domainId);
      }
      if ((pivotDate != null)) {
        qb.and(qb.entity().getUpdatedOn(),SearchCriteria.Op.LTEQ,pivotDate);
      }
      quotaUsageRecords=search(qb.create(),filter);
      for (      QuotaBalanceVO entry : quotaUsageRecords) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("FindQuotaBalIance Entry=" + entry);
        }
        if (entry.getCreditsId() > 0) {
          trimmedRecords.add(entry);
        }
 else {
          trimmedRecords.add(entry);
          break;
        }
      }
      return trimmedRecords;
    }
  }
);
}
