{
  return Transaction.execute(TransactionLegacy.USAGE_DB,new TransactionCallback<List<QuotaBalanceVO>>(){
    @Override public List<QuotaBalanceVO> doInTransaction(    final TransactionStatus status){
      if ((lastbalancedate != null) && (beforeThis != null) && lastbalancedate.before(beforeThis)) {
        Filter filter=new Filter(QuotaBalanceVO.class,"updatedOn",true,0L,Long.MAX_VALUE);
        QueryBuilder<QuotaBalanceVO> qb=QueryBuilder.create(QuotaBalanceVO.class);
        qb.and(qb.entity().getAccountId(),SearchCriteria.Op.EQ,accountId);
        qb.and(qb.entity().getDomainId(),SearchCriteria.Op.EQ,domainId);
        qb.and(qb.entity().getCreditsId(),SearchCriteria.Op.GT,0);
        qb.and(qb.entity().getUpdatedOn(),SearchCriteria.Op.BETWEEN,lastbalancedate,beforeThis);
        return search(qb.create(),filter);
      }
 else {
        return new ArrayList<QuotaBalanceVO>();
      }
    }
  }
);
}
