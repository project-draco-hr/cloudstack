{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String ipAddress=(String)params.get(BaseCmd.Properties.IP_ADDRESS.getName());
  boolean result=false;
  Account accountByIp=getManagementServer().findAccountByIpAddress(ipAddress);
  if (accountByIp == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account owner for ip " + ipAddress);
  }
  Long accountId=accountByIp.getId();
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId().longValue() != accountId.longValue()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"account " + account.getAccountName() + " doesn't own ip address "+ ipAddress);
      }
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),accountByIp.getDomainId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to disassociate IP address " + ipAddress + ", permission denied.");
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  try {
    result=getManagementServer().disassociateIpAddress(userId.longValue(),accountId.longValue(),ipAddress);
  }
 catch (  PermissionDeniedException ex) {
    throw new ServerApiException(BaseCmd.NET_INVALID_PARAM_ERROR,ex.getMessage());
  }
catch (  IllegalArgumentException ex1) {
    throw new ServerApiException(BaseCmd.NET_INVALID_PARAM_ERROR,ex1.getMessage());
  }
catch (  Exception ex2) {
    throw new ServerApiException(BaseCmd.NET_IP_DIASSOC_ERROR,"unable to disassociate ip address");
  }
  if (result == false) {
    throw new ServerApiException(BaseCmd.NET_IP_DIASSOC_ERROR,"unable to disassociate ip address");
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),Boolean.valueOf(result).toString()));
  return returnValues;
}
