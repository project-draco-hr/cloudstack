{
  UserVmVO userVm=_userVMDao.findById(vmId);
  if (userVm == null) {
    throw new InvalidParameterValueException("Create vm to snapshot failed due to vm: " + vmId + " is not found");
  }
  VMSnapshotVO vmSnapshot=_vmSnapshotDao.findById(vmSnapshotId);
  if (vmSnapshot == null) {
    throw new CloudRuntimeException("VM snapshot id: " + vmSnapshotId + " can not be found");
  }
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateCreateVMSnapshot(vmId,vmSnapshotId,quiescevm);
  }
 else {
    Outcome<VMSnapshot> outcome=createVMSnapshotThroughJobQueue(vmId,vmSnapshotId,quiescevm);
    VMSnapshot result=null;
    try {
      result=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
    }
    return result;
  }
}
