{
  VMSnapshotVO vmSnapshotVo=_vmSnapshotDao.findById(vmSnapshotId);
  if (vmSnapshotVo == null) {
    throw new InvalidParameterValueException("unable to find the vm snapshot with id " + vmSnapshotId);
  }
  Long vmId=vmSnapshotVo.getVmId();
  UserVmVO userVm=_userVMDao.findById(vmId);
  if (userVm == null) {
    throw new InvalidParameterValueException("Revert vm to snapshot: " + vmSnapshotId + " failed due to vm: "+ vmId+ " is not found");
  }
  if (hasActiveVMSnapshotTasks(vmId)) {
    throw new InvalidParameterValueException("There is other active vm snapshot tasks on the instance, please try again later");
  }
  Account caller=getCaller();
  _accountMgr.checkAccess(caller,null,true,vmSnapshotVo);
  if (userVm.getState() != VirtualMachine.State.Running && userVm.getState() != VirtualMachine.State.Stopped) {
    throw new InvalidParameterValueException("VM Snapshot reverting failed due to vm is not in the state of Running or Stopped.");
  }
  if (vmSnapshotVo.getState() != VMSnapshot.State.Ready) {
    throw new InvalidParameterValueException("VM Snapshot reverting failed due to vm snapshot is not in the state of Created.");
  }
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    placeHolder=createPlaceHolderWork(vmSnapshotVo.getVmId());
    try {
      return orchestrateRevertToVMSnapshot(vmSnapshotId);
    }
  finally {
      _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VMSnapshot> outcome=revertToVMSnapshotThroughJobQueue(vmSnapshotVo.getVmId(),vmSnapshotId);
    VMSnapshot result=null;
    try {
      result=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobResult;
 else       if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
    }
    return userVm;
  }
}
