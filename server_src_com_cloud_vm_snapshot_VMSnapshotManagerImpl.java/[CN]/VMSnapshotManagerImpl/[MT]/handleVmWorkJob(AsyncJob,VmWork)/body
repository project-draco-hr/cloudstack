{
  if (work instanceof VmWorkCreateVMSnapshot) {
    VmWorkCreateVMSnapshot createWork=(VmWorkCreateVMSnapshot)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Create-VM-Snapshot within VM work job context. vmId: " + createWork.getVmId() + ", VM snapshotId: "+ createWork.getVmSnapshotId()+ "quiesce: "+ createWork.isQuiesceVm());
    VMSnapshot vmSnapshot=orchestrateCreateVMSnapshot(createWork.getVmId(),createWork.getVmSnapshotId(),createWork.isQuiesceVm());
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Create-VM-Snapshot within VM work job context. vmId: " + createWork.getVmId() + ", VM snapshotId: "+ createWork.getVmSnapshotId()+ "quiesce: "+ createWork.isQuiesceVm());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Long(vmSnapshot.getId())));
  }
 else   if (work instanceof VmWorkDeleteVMSnapshot) {
    VmWorkDeleteVMSnapshot deleteWork=(VmWorkDeleteVMSnapshot)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Delete-VM-Snapshot within VM work job context. vmId: " + deleteWork.getVmId() + ", VM snapshotId: "+ deleteWork.getVmSnapshotId());
    boolean result=orchestrateDeleteVMSnapshot(deleteWork.getVmSnapshotId());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Delete-VM-Snapshot within VM work job context. vmId: " + deleteWork.getVmId() + ", VM snapshotId: "+ deleteWork.getVmSnapshotId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Boolean(result)));
  }
 else   if (work instanceof VmWorkRevertToVMSnapshot) {
    VmWorkRevertToVMSnapshot revertWork=(VmWorkRevertToVMSnapshot)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Revert-VM-Snapshot within VM work job context. vmId: " + revertWork.getVmId() + ", VM snapshotId: "+ revertWork.getVmSnapshotId());
    orchestrateRevertToVMSnapshot(revertWork.getVmSnapshotId());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Revert-VM-Snapshot within VM work job context. vmId: " + revertWork.getVmId() + ", VM snapshotId: "+ revertWork.getVmSnapshotId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkDeleteAllVMSnapshots) {
    VmWorkDeleteAllVMSnapshots deleteAllWork=(VmWorkDeleteAllVMSnapshots)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Delete-All-VM-Snapshot within VM work job context. vmId: " + deleteAllWork.getVmId());
    boolean result=orchestrateDeleteAllVMSnapshots(deleteAllWork.getVmId(),deleteAllWork.getSnapshotType());
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Delete-All-VM-Snapshot within VM work job context. vmId: " + deleteAllWork.getVmId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Boolean(result)));
  }
 else {
    RuntimeException e=new RuntimeException("Unsupported VM work command: " + job.getCmd());
    String exceptionJson=JobSerializerHelper.toSerializedString(e);
    s_logger.error("Serialize exception object into json: " + exceptionJson);
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,exceptionJson);
  }
}
