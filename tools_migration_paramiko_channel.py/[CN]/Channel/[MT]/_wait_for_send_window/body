def _wait_for_send_window(self, size):
    '\n        (You are already holding the lock.)\n        Wait for the send window to open up, and allocate up to C{size} bytes\n        for transmission.  If no space opens up before the timeout, a timeout\n        exception is raised.  Returns the number of bytes available to send\n        (may be less than requested).\n        '
    if (self.closed or self.eof_sent):
        return 0
    if (self.out_window_size == 0):
        if (self.timeout == 0.0):
            raise socket.timeout()
        timeout = self.timeout
        while (self.out_window_size == 0):
            if (self.closed or self.eof_sent):
                return 0
            then = time.time()
            self.out_buffer_cv.wait(timeout)
            if (timeout != None):
                timeout -= (time.time() - then)
                if (timeout <= 0.0):
                    raise socket.timeout()
    if (self.closed or self.eof_sent):
        return 0
    if (self.out_window_size < size):
        size = self.out_window_size
    if ((self.out_max_packet_size - 64) < size):
        size = (self.out_max_packet_size - 64)
    self.out_window_size -= size
    if self.ultra_debug:
        self._log(DEBUG, ('window down to %d' % self.out_window_size))
    return size
