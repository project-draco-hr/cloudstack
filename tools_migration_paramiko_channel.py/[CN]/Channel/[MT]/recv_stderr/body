def recv_stderr(self, nbytes):
    "\n        Receive data from the channel's stderr stream.  Only channels using\n        L{exec_command} or L{invoke_shell} without a pty will ever have data\n        on the stderr stream.  The return value is a string representing the\n        data received.  The maximum amount of data to be received at once is\n        specified by C{nbytes}.  If a string of length zero is returned, the\n        channel stream has closed.\n\n        @param nbytes: maximum number of bytes to read.\n        @type nbytes: int\n        @return: data.\n        @rtype: str\n        \n        @raise socket.timeout: if no data is ready before the timeout set by\n            L{settimeout}.\n        \n        @since: 1.1\n        "
    try:
        out = self.in_stderr_buffer.read(nbytes, self.timeout)
    except PipeTimeout as e:
        raise socket.timeout()
    ack = self._check_add_window(len(out))
    if (ack > 0):
        m = Message()
        m.add_byte(chr(MSG_CHANNEL_WINDOW_ADJUST))
        m.add_int(self.remote_chanid)
        m.add_int(ack)
        self.transport._send_user_message(m)
    return out
