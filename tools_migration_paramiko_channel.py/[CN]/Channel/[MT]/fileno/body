def fileno(self):
    "\n        Returns an OS-level file descriptor which can be used for polling, but\n        but I{not} for reading or writing.  This is primaily to allow python's\n        C{select} module to work.\n\n        The first time C{fileno} is called on a channel, a pipe is created to\n        simulate real OS-level file descriptor (FD) behavior.  Because of this,\n        two OS-level FDs are created, which will use up FDs faster than normal.\n        (You won't notice this effect unless you have hundreds of channels\n        open at the same time.)\n\n        @return: an OS-level file descriptor\n        @rtype: int\n        \n        @warning: This method causes channel reads to be slightly less\n            efficient.\n        "
    self.lock.acquire()
    try:
        if (self._pipe is not None):
            return self._pipe.fileno()
        self._pipe = pipe.make_pipe()
        (p1, p2) = pipe.make_or_pipe(self._pipe)
        self.in_buffer.set_event(p1)
        self.in_stderr_buffer.set_event(p2)
        return self._pipe.fileno()
    finally:
        self.lock.release()
