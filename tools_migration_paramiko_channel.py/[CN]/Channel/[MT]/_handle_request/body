def _handle_request(self, m):
    key = m.get_string()
    want_reply = m.get_boolean()
    server = self.transport.server_object
    ok = False
    if (key == 'exit-status'):
        self.exit_status = m.get_int()
        self.status_event.set()
        ok = True
    elif (key == 'xon-xoff'):
        ok = True
    elif (key == 'pty-req'):
        term = m.get_string()
        width = m.get_int()
        height = m.get_int()
        pixelwidth = m.get_int()
        pixelheight = m.get_int()
        modes = m.get_string()
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_pty_request(self, term, width, height, pixelwidth, pixelheight, modes)
    elif (key == 'shell'):
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_shell_request(self)
    elif (key == 'exec'):
        cmd = m.get_string()
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_exec_request(self, cmd)
    elif (key == 'subsystem'):
        name = m.get_string()
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_subsystem_request(self, name)
    elif (key == 'window-change'):
        width = m.get_int()
        height = m.get_int()
        pixelwidth = m.get_int()
        pixelheight = m.get_int()
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_window_change_request(self, width, height, pixelwidth, pixelheight)
    elif (key == 'x11-req'):
        single_connection = m.get_boolean()
        auth_proto = m.get_string()
        auth_cookie = m.get_string()
        screen_number = m.get_int()
        if (server is None):
            ok = False
        else:
            ok = server.check_channel_x11_request(self, single_connection, auth_proto, auth_cookie, screen_number)
    else:
        self._log(DEBUG, ('Unhandled channel request "%s"' % key))
        ok = False
    if want_reply:
        m = Message()
        if ok:
            m.add_byte(chr(MSG_CHANNEL_SUCCESS))
        else:
            m.add_byte(chr(MSG_CHANNEL_FAILURE))
        m.add_int(self.remote_chanid)
        self.transport._send_user_message(m)
