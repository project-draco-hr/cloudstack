def request_x11(self, screen_number=0, auth_protocol=None, auth_cookie=None, single_connection=False, handler=None):
    '\n        Request an x11 session on this channel.  If the server allows it,\n        further x11 requests can be made from the server to the client,\n        when an x11 application is run in a shell session.\n        \n        From RFC4254::\n\n            It is RECOMMENDED that the \'x11 authentication cookie\' that is\n            sent be a fake, random cookie, and that the cookie be checked and\n            replaced by the real cookie when a connection request is received.\n        \n        If you omit the auth_cookie, a new secure random 128-bit value will be\n        generated, used, and returned.  You will need to use this value to\n        verify incoming x11 requests and replace them with the actual local\n        x11 cookie (which requires some knoweldge of the x11 protocol).\n        \n        If a handler is passed in, the handler is called from another thread\n        whenever a new x11 connection arrives.  The default handler queues up\n        incoming x11 connections, which may be retrieved using\n        L{Transport.accept}.  The handler\'s calling signature is::\n        \n            handler(channel: Channel, (address: str, port: int))\n        \n        @param screen_number: the x11 screen number (0, 10, etc)\n        @type screen_number: int\n        @param auth_protocol: the name of the X11 authentication method used;\n            if none is given, C{"MIT-MAGIC-COOKIE-1"} is used\n        @type auth_protocol: str\n        @param auth_cookie: hexadecimal string containing the x11 auth cookie;\n            if none is given, a secure random 128-bit value is generated\n        @type auth_cookie: str\n        @param single_connection: if True, only a single x11 connection will be\n            forwarded (by default, any number of x11 connections can arrive\n            over this session)\n        @type single_connection: bool\n        @param handler: an optional handler to use for incoming X11 connections\n        @type handler: function\n        @return: the auth_cookie used\n        '
    if (self.closed or self.eof_received or self.eof_sent or (not self.active)):
        raise SSHException('Channel is not open')
    if (auth_protocol is None):
        auth_protocol = 'MIT-MAGIC-COOKIE-1'
    if (auth_cookie is None):
        auth_cookie = binascii.hexlify(self.transport.randpool.get_bytes(16))
    m = Message()
    m.add_byte(chr(MSG_CHANNEL_REQUEST))
    m.add_int(self.remote_chanid)
    m.add_string('x11-req')
    m.add_boolean(True)
    m.add_boolean(single_connection)
    m.add_string(auth_protocol)
    m.add_string(auth_cookie)
    m.add_int(screen_number)
    self._event_pending()
    self.transport._send_user_message(m)
    self._wait_for_event()
    self.transport._set_x11_handler(handler)
    return auth_cookie
