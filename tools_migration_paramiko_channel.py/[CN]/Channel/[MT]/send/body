def send(self, s):
    '\n        Send data to the channel.  Returns the number of bytes sent, or 0 if\n        the channel stream is closed.  Applications are responsible for\n        checking that all data has been sent: if only some of the data was\n        transmitted, the application needs to attempt delivery of the remaining\n        data.\n\n        @param s: data to send\n        @type s: str\n        @return: number of bytes actually sent\n        @rtype: int\n\n        @raise socket.timeout: if no data could be sent before the timeout set\n            by L{settimeout}.\n        '
    size = len(s)
    self.lock.acquire()
    try:
        size = self._wait_for_send_window(size)
        if (size == 0):
            return 0
        m = Message()
        m.add_byte(chr(MSG_CHANNEL_DATA))
        m.add_int(self.remote_chanid)
        m.add_string(s[:size])
    finally:
        self.lock.release()
    self.transport._send_user_message(m)
    return size
