def recv(self, nbytes):
    '\n        Receive data from the channel.  The return value is a string\n        representing the data received.  The maximum amount of data to be\n        received at once is specified by C{nbytes}.  If a string of length zero\n        is returned, the channel stream has closed.\n\n        @param nbytes: maximum number of bytes to read.\n        @type nbytes: int\n        @return: data.\n        @rtype: str\n        \n        @raise socket.timeout: if no data is ready before the timeout set by\n            L{settimeout}.\n        '
    try:
        out = self.in_buffer.read(nbytes, self.timeout)
    except PipeTimeout as e:
        raise socket.timeout()
    ack = self._check_add_window(len(out))
    if (ack > 0):
        m = Message()
        m.add_byte(chr(MSG_CHANNEL_WINDOW_ADJUST))
        m.add_int(self.remote_chanid)
        m.add_int(ack)
        self.transport._send_user_message(m)
    return out
