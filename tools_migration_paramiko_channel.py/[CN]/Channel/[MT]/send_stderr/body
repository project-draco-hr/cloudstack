def send_stderr(self, s):
    '\n        Send data to the channel on the "stderr" stream.  This is normally\n        only used by servers to send output from shell commands -- clients\n        won\'t use this.  Returns the number of bytes sent, or 0 if the channel\n        stream is closed.  Applications are responsible for checking that all\n        data has been sent: if only some of the data was transmitted, the\n        application needs to attempt delivery of the remaining data.\n        \n        @param s: data to send.\n        @type s: str\n        @return: number of bytes actually sent.\n        @rtype: int\n        \n        @raise socket.timeout: if no data could be sent before the timeout set\n            by L{settimeout}.\n        \n        @since: 1.1\n        '
    size = len(s)
    self.lock.acquire()
    try:
        size = self._wait_for_send_window(size)
        if (size == 0):
            return 0
        m = Message()
        m.add_byte(chr(MSG_CHANNEL_EXTENDED_DATA))
        m.add_int(self.remote_chanid)
        m.add_int(1)
        m.add_string(s[:size])
    finally:
        self.lock.release()
    self.transport._send_user_message(m)
    return size
