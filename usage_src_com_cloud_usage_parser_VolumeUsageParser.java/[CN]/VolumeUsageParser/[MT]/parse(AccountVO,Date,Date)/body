{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Parsing all Volume usage events for account: " + account.getId());
  }
  if ((endDate == null) || endDate.after(new Date())) {
    endDate=new Date();
  }
  List<UsageVolumeVO> usageUsageVols=m_usageVolumeDao.getUsageRecords(account.getId(),account.getDomainId(),startDate,endDate,false,0);
  if (usageUsageVols.isEmpty()) {
    s_logger.debug("No volume usage events for this period");
    return true;
  }
  Map<String,Pair<Long,Long>> usageMap=new HashMap<String,Pair<Long,Long>>();
  Map<String,VolInfo> diskOfferingMap=new HashMap<String,VolInfo>();
  for (  UsageVolumeVO usageVol : usageUsageVols) {
    long volId=usageVol.getId();
    Long doId=usageVol.getDiskOfferingId();
    long zoneId=usageVol.getZoneId();
    Long templateId=usageVol.getTemplateId();
    long size=usageVol.getSize();
    String key="" + volId;
    diskOfferingMap.put(key,new VolInfo(volId,zoneId,doId,templateId,size));
    Date volCreateDate=usageVol.getCreated();
    Date volDeleteDate=usageVol.getDeleted();
    if ((volDeleteDate == null) || volDeleteDate.after(endDate)) {
      volDeleteDate=endDate;
    }
    if (volCreateDate.before(startDate)) {
      volCreateDate=startDate;
    }
    long currentDuration=(volDeleteDate.getTime() - volCreateDate.getTime()) + 1;
    updateVolUsageData(usageMap,key,usageVol.getId(),currentDuration);
  }
  for (  String volIdKey : usageMap.keySet()) {
    Pair<Long,Long> voltimeInfo=usageMap.get(volIdKey);
    long useTime=voltimeInfo.second().longValue();
    if (useTime > 0L) {
      VolInfo info=diskOfferingMap.get(volIdKey);
      createUsageRecord(UsageTypes.VOLUME,useTime,startDate,endDate,account,info.getVolumeId(),info.getZoneId(),info.getDiskOfferingId(),info.getTemplateId(),info.getSize());
    }
  }
  return true;
}
