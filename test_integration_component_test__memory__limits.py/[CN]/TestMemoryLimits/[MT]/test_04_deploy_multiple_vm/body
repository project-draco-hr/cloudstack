@attr(tags=['advanced', 'advancedns', 'simulator'])
def test_04_deploy_multiple_vm(self):
    'Test Deploy multiple VM with specified RAM & verify the usage'
    account_list = Account.list(self.apiclient, id=self.account.id)
    self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
    resource_count = account_list[0].memorytotal
    expected_resource_count = int(self.services['service_offering']['memory'])
    self.assertEqual(resource_count, expected_resource_count, 'Resource count should match with the expected resource count')
    self.debug(('Creating two instances with service offering: %s' % self.service_offering.name))
    vm_1 = self.createInstance(service_off=self.service_offering)
    self.createInstance(service_off=self.service_offering)
    account_list = Account.list(self.apiclient, id=self.account.id)
    self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
    resource_count_new = account_list[0].memorytotal
    expected_resource_count = (int(self.services['service_offering']['memory']) * 3)
    self.assertEqual(resource_count_new, expected_resource_count, 'Resource count should match with the expected resource count')
    self.debug(('Destroying instance: %s' % vm_1.name))
    try:
        vm_1.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete instance: %s' % e))
    account_list = Account.list(self.apiclient, id=self.account.id)
    self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
    resource_count_after_delete = account_list[0].memorytotal
    expected_resource_count -= int(self.services['service_offering']['memory'])
    self.assertEqual(resource_count_after_delete, expected_resource_count, 'Resource count should match with the expected resource count')
    return
