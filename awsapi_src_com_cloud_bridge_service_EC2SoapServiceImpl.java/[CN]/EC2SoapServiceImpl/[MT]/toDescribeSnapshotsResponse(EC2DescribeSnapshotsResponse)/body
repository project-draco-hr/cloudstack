{
  DescribeSnapshotsResponse response=new DescribeSnapshotsResponse();
  DescribeSnapshotsResponseType param1=new DescribeSnapshotsResponseType();
  DescribeSnapshotsSetResponseType param2=new DescribeSnapshotsSetResponseType();
  EC2Snapshot[] snaps=engineResponse.getSnapshotSet();
  for (  EC2Snapshot snap : snaps) {
    DescribeSnapshotsSetItemResponseType param3=new DescribeSnapshotsSetItemResponseType();
    param3.setSnapshotId(snap.getId());
    param3.setVolumeId(snap.getVolumeId());
    if (snap.getState().equalsIgnoreCase("backedup")) {
      param3.setStatus("completed");
      param3.setProgress("100%");
    }
 else     if (snap.getState().equalsIgnoreCase("creating")) {
      param3.setStatus("pending");
      param3.setProgress("33%");
    }
 else     if (snap.getState().equalsIgnoreCase("backingup")) {
      param3.setStatus("pending");
      param3.setProgress("66%");
    }
 else {
      param3.setStatus("error");
      param3.setProgress("0%");
    }
    String ownerId=snap.getDomainId() + ":" + snap.getAccountName();
    Calendar cal=snap.getCreated();
    if (null == cal) {
      cal=Calendar.getInstance();
      cal.set(1970,1,1);
    }
    param3.setStartTime(cal);
    param3.setOwnerId(ownerId);
    param3.setVolumeSize(snap.getVolumeSize().toString());
    param3.setDescription(snap.getName());
    param3.setOwnerAlias(snap.getAccountName());
    ResourceTagSetType param18=new ResourceTagSetType();
    ResourceTagSetItemType param19=new ResourceTagSetItemType();
    param19.setKey("");
    param19.setValue("");
    param18.addItem(param19);
    param3.setTagSet(param18);
    param2.addItem(param3);
  }
  param1.setSnapshotSet(param2);
  param1.setRequestId(UUID.randomUUID().toString());
  response.setDescribeSnapshotsResponse(param1);
  return response;
}
