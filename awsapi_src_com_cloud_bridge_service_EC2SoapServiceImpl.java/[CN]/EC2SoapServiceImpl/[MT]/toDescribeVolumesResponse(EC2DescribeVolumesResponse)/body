{
  DescribeVolumesResponse response=new DescribeVolumesResponse();
  DescribeVolumesResponseType param1=new DescribeVolumesResponseType();
  DescribeVolumesSetResponseType param2=new DescribeVolumesSetResponseType();
  EC2Volume[] volumes=engineResponse.getVolumeSet();
  for (  EC2Volume vol : volumes) {
    DescribeVolumesSetItemResponseType param3=new DescribeVolumesSetItemResponseType();
    param3.setVolumeId(vol.getId().toString());
    Long volSize=new Long(vol.getSize());
    param3.setSize(volSize.toString());
    String snapId=vol.getSnapshotId() != null ? vol.getSnapshotId().toString() : "";
    param3.setSnapshotId(snapId);
    param3.setAvailabilityZone(vol.getZoneName());
    param3.setStatus(vol.getState());
    Calendar cal=EC2RestAuth.parseDateString(vol.getCreated());
    if (cal == null) {
      cal=Calendar.getInstance();
      cal.set(1970,1,1);
    }
    param3.setCreateTime(cal);
    AttachmentSetResponseType param4=new AttachmentSetResponseType();
    if (null != vol.getInstanceId()) {
      AttachmentSetItemResponseType param5=new AttachmentSetItemResponseType();
      param5.setVolumeId(vol.getId().toString());
      param5.setInstanceId(vol.getInstanceId().toString());
      String devicePath=engine.cloudDeviceIdToDevicePath(vol.getHypervisor(),vol.getDeviceId());
      param5.setDevice(devicePath);
      param5.setStatus(toVolumeAttachmentState(vol.getInstanceId(),vol.getVMState()));
      param5.setAttachTime(cal);
      param5.setDeleteOnTermination(false);
      param4.addItem(param5);
    }
    param3.setAttachmentSet(param4);
    ResourceTagSetType param6=new ResourceTagSetType();
    ResourceTagSetItemType param7=new ResourceTagSetItemType();
    param7.setKey("");
    param7.setValue("");
    param6.addItem(param7);
    param3.setTagSet(param6);
    param2.addItem(param3);
  }
  param1.setVolumeSet(param2);
  param1.setRequestId(UUID.randomUUID().toString());
  response.setDescribeVolumesResponse(param1);
  return response;
}
