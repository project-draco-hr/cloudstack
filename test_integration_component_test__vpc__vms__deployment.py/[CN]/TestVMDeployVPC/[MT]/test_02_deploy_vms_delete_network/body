@attr(tags=['advanced', 'intervlan'], required_hardware='false')
def test_02_deploy_vms_delete_network(self):
    ' Test deploy VMs in VPC networks and delete one of the network\n        '
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    nw_off = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    nw_off.update(self.apiclient, state='Enabled')
    self._cleanup.append(nw_off)
    self.debug(('Creating network with network offering: %s' % nw_off.id))
    network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=nw_off.id, zoneid=self.zone.id, gateway='10.1.1.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_1.id))
    nw_off_no_lb = NetworkOffering.create(self.apiclient, self.services['network_offering_no_lb'], conservemode=False)
    nw_off_no_lb.update(self.apiclient, state='Enabled')
    self._cleanup.append(nw_off_no_lb)
    self.debug(('Creating network with network offering: %s' % nw_off_no_lb.id))
    network_2 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=nw_off_no_lb.id, zoneid=self.zone.id, gateway='10.1.2.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_2.id))
    self.debug(('Creating network with network offering: %s' % nw_off_no_lb.id))
    network_3 = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=nw_off_no_lb.id, zoneid=self.zone.id, gateway='10.1.3.1', vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network_3.id))
    self.debug(('deploying VMs in network: %s' % network_1.name))
    vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_1.id)])
    self.debug(('Deployed VM in network: %s' % network_1.id))
    self.debug(('deploying VMs in network: %s' % network_2.name))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_2.id)])
    self.debug(('Deployed VM in network: %s' % network_2.id))
    self.debug(('deploying VMs in network: %s' % network_3.name))
    vm_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network_3.id)])
    self.debug(('Deployed VM in network: %s' % network_3.id))
    self.debug('Check if deployed VMs are in running state?')
    vms = VirtualMachine.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return a valid response')
    for vm in vms:
        self.debug(('VM name: %s, VM state: %s' % (vm.name, vm.state)))
        self.assertEqual(vm.state, 'Running', 'Vm state should be running for each VM deployed')
    self.debug(('Finding the VPC virtual router for network: %s' % network_2.name))
    routers = Router.list(self.apiclient, networkid=network_2.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List routers should retirn a valid router for network2')
    router = routers[0]
    self.debug(('Deleting the virtual machine in network1: %s' % network_2.name))
    try:
        vm_2.delete(self.apiclient)
    except Exception as e:
        raise Exception(('Failed to delete Virtual machine: %s' % e))
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    wait_for_cleanup(self.apiclient, ['network.gc.interval', 'network.gc.wait'])
    self.debug(('Deleting the network: %s' % network_2.name))
    try:
        network_2.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to deleted network: %s' % e))
    self.debug(('Restarting the VPCVR: %s' % router.name))
    cmd = rebootRouter.rebootRouterCmd()
    cmd.id = router.id
    self.apiclient.rebootRouter(cmd)
    self.debug('Check status of router after reboot')
    routers = Router.list(self.apiclient, id=router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List routers should retirn a valid router for network2')
    router = routers[0]
    self.assertEqual(router.state, 'Running', 'Router state should be running after reboot')
    self.debug(('After deleting first network other VMs' + 'should still be accessible'))
    vms = VirtualMachine.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, state='Running', listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return a valid response')
    self.assertEqual(len(vms), 2, 'Only 2 VMs should be in running state as first nw is deleted')
    for vm in vms:
        self.debug(('VM name: %s, VM state: %s' % (vm.name, vm.state)))
        self.assertEqual(vm.state, 'Running', 'Vm state should be running for each VM deployed')
    return
