{
  LogicalSwitch logicalSwitch=new LogicalSwitch();
  logicalSwitch.setDisplayName("LogicalSwitch" + timestamp);
  logicalSwitch.setPortIsolationEnabled(true);
  logicalSwitch.setReplicationMode("service");
  logicalSwitch.setTags(new ArrayList<NiciraNvpTag>());
  logicalSwitch.getTags().add(new NiciraNvpTag("anto","hugo"));
  logicalSwitch=api.createLogicalSwitch(logicalSwitch);
  logicalSwitch.setDisplayName("UpdatedLogicalSwitch" + timestamp);
  api.updateLogicalSwitch(logicalSwitch,logicalSwitch.getUuid());
  List<LogicalSwitch> logicalSwitches=api.findLogicalSwitch();
  for (  final LogicalSwitch iLogicalSwitch : logicalSwitches) {
    if (iLogicalSwitch.getUuid().equalsIgnoreCase(logicalSwitch.getUuid())) {
      assertEquals("Read a LogicalSwitch different from the one just created and updated",logicalSwitch,iLogicalSwitch);
    }
  }
  logicalSwitches=api.findLogicalSwitch(logicalSwitch.getUuid());
  assertEquals("Read a LogicalSwitch different from the one just created and updated",logicalSwitch,logicalSwitches.get(0));
  assertEquals("Read a LogicalSwitch filtered by unique id (UUID) with more than one item",1,logicalSwitches.size());
  final List<NiciraNvpTag> tags=new ArrayList<NiciraNvpTag>();
  tags.add(new NiciraNvpTag("cs_account","OwnerName"));
  LogicalSwitchPort logicalSwitchPort=new LogicalSwitchPort("LSwitchPort" + timestamp,tags,true);
  logicalSwitchPort=api.createLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort);
  logicalSwitchPort.setDisplayName("UpdatedLSwitchPort" + timestamp);
  api.updateLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort);
  final List<LogicalSwitchPort> logicalSwitchePorts=api.findLogicalSwitchPortsByUuid(logicalSwitch.getUuid(),logicalSwitchPort.getUuid());
  for (  final LogicalSwitchPort iLSwitchPort : logicalSwitchePorts) {
    if (iLSwitchPort.getUuid().equalsIgnoreCase(logicalSwitchPort.getUuid())) {
      assertEquals("Read a LogicalSwitchPort different from the one just created and updated",logicalSwitchPort,iLSwitchPort);
    }
  }
  final String attachmentUuid=UUID.randomUUID().toString();
  final VifAttachment vifAttachment=new VifAttachment(attachmentUuid);
  api.updateLogicalSwitchPortAttachment(logicalSwitch.getUuid(),logicalSwitchPort.getUuid(),vifAttachment);
  assertEquals("Read a LogicalSwitchPort by vifAttachment different than expected",api.findLogicalSwitchPortUuidByVifAttachmentUuid(logicalSwitch.getUuid(),vifAttachment.getVifUuid()),logicalSwitchPort.getUuid());
  api.deleteLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort.getUuid());
  api.deleteLogicalSwitch(logicalSwitch.getUuid());
}
