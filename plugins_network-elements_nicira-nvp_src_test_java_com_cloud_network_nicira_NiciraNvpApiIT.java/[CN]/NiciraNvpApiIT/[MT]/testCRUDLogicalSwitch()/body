{
  LogicalSwitch logicalSwitch=new LogicalSwitch();
  logicalSwitch.setDisplayName("LogicalSwitch" + timestamp);
  logicalSwitch.setPortIsolationEnabled(true);
  logicalSwitch.setReplicationMode("service");
  logicalSwitch.setTags(new ArrayList<NiciraNvpTag>());
  logicalSwitch.getTags().add(new NiciraNvpTag("anto","hugo"));
  try {
    logicalSwitch=api.createLogicalSwitch(logicalSwitch);
    logicalSwitch.setDisplayName("UpdatedLogicalSwitch" + timestamp);
    api.updateLogicalSwitch(logicalSwitch,logicalSwitch.getUuid());
    NiciraNvpList<LogicalSwitch> logicalSwitches=api.findLogicalSwitch();
    for (    final LogicalSwitch iLogicalSwitch : logicalSwitches.getResults()) {
      if (iLogicalSwitch.getUuid().equalsIgnoreCase(logicalSwitch.getUuid())) {
        assertEquals("Read a LogicalSwitch different from the one just created and updated",logicalSwitch,iLogicalSwitch);
      }
    }
    logicalSwitches=api.findLogicalSwitch(logicalSwitch.getUuid());
    assertEquals("Read a LogicalSwitch different from the one just created and updated",logicalSwitch,logicalSwitches.getResults().get(0));
    assertEquals("Read a LogicalSwitch filtered by unique id (UUID) with more than one item",1,logicalSwitches.getResults().size());
    final List<NiciraNvpTag> tags=new ArrayList<NiciraNvpTag>();
    tags.add(new NiciraNvpTag("cs_account","OwnerName"));
    LogicalSwitchPort logicalSwitchPort=new LogicalSwitchPort("LSwitchPort" + timestamp,tags,true);
    logicalSwitchPort=api.createLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort);
    logicalSwitchPort.setDisplayName("UpdatedLSwitchPort" + timestamp);
    api.updateLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort);
    final NiciraNvpList<LogicalSwitchPort> logicalSwitchePorts=api.findLogicalSwitchPortsByUuid(logicalSwitch.getUuid(),logicalSwitchPort.getUuid());
    for (    final LogicalSwitchPort iLSwitchPort : logicalSwitchePorts.getResults()) {
      if (iLSwitchPort.getUuid().equalsIgnoreCase(logicalSwitchPort.getUuid())) {
        assertEquals("Read a LogicalSwitchPort different from the one just created and updated",logicalSwitchPort,iLSwitchPort);
      }
    }
    final String attachmentUuid=UUID.randomUUID().toString();
    final VifAttachment vifAttachment=new VifAttachment(attachmentUuid);
    api.updateLogicalSwitchPortAttachment(logicalSwitch.getUuid(),logicalSwitchPort.getUuid(),vifAttachment);
    assertEquals("Read a LogicalSwitchPort by vifAttachment different than expected",api.findLogicalSwitchPortUuidByVifAttachmentUuid(logicalSwitch.getUuid(),vifAttachment.getVifUuid()),logicalSwitchPort.getUuid());
    api.deleteLogicalSwitchPort(logicalSwitch.getUuid(),logicalSwitchPort.getUuid());
    api.deleteLogicalSwitch(logicalSwitch.getUuid());
  }
 catch (  final NiciraNvpApiException e) {
    e.printStackTrace();
    assertTrue("Errors in LogicalSwitch CRUD",false);
  }
}
