{
  SecurityProfile sProfile=new SecurityProfile();
  sProfile.setDisplayName("SecProfile" + timestamp);
  final List<SecurityRule> egressRules=new ArrayList<SecurityRule>();
  sProfile.setLogicalPortEgressRules(egressRules);
  egressRules.add(new SecurityRule(SecurityRule.ETHERTYPE_IPV4,"1.10.10.0",null,80,88,6));
  egressRules.add(new SecurityRule(SecurityRule.ETHERTYPE_IPV6,"2a80:34ac::1",null,90,98,6));
  final List<SecurityRule> ingressRules=new ArrayList<SecurityRule>();
  sProfile.setLogicalPortIngressRules(ingressRules);
  ingressRules.add(new SecurityRule(SecurityRule.ETHERTYPE_IPV4,"1.10.10.0",null,50,58,6));
  ingressRules.add(new SecurityRule(SecurityRule.ETHERTYPE_IPV6,"280a:3ac4::1",null,60,68,6));
  final List<NiciraNvpTag> tags=new ArrayList<NiciraNvpTag>();
  sProfile.setTags(tags);
  tags.add(new NiciraNvpTag("nvp","MyTag1"));
  tags.add(new NiciraNvpTag("nicira","MyTag2"));
  try {
    sProfile=api.createSecurityProfile(sProfile);
    sProfile.setDisplayName("UpdatedSecProfile" + timestamp);
    api.updateSecurityProfile(sProfile,sProfile.getUuid());
    List<SecurityProfile> profiles=api.findSecurityProfile();
    SecurityProfile scInList=null;
    for (    final SecurityProfile iProfile : profiles) {
      if (iProfile.getUuid().equalsIgnoreCase(sProfile.getUuid())) {
        scInList=iProfile;
      }
    }
    assertEquals("Read a Security Profile different from the one just created and updated",sProfile,scInList);
    profiles=api.findSecurityProfile(sProfile.getUuid());
    assertEquals("Read a Security Profile different from the one just created and updated",sProfile,profiles.get(0));
    assertEquals("Read a Security Profile filtered by unique id (UUID) with more than one item",1,profiles.size());
    api.deleteSecurityProfile(sProfile.getUuid());
  }
 catch (  final NiciraNvpApiException e) {
    e.printStackTrace();
    assertTrue("Errors in Security Profile CRUD",false);
  }
}
