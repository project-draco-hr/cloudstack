{
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error("Unable to get the configuration dao.");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  String emailAddressList=configs.get("alert.email.addresses");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(",");
  }
  String smtpHost=configs.get("alert.smtp.host");
  int smtpPort=NumbersUtil.parseInt(configs.get("alert.smtp.port"),25);
  String useAuthStr=configs.get("alert.smtp.useAuth");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get("alert.smtp.username");
  String smtpPassword=configs.get("alert.smtp.password");
  String emailSender=configs.get("alert.email.sender");
  String smtpDebugStr=configs.get("alert.smtp.debug");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  _emailAlert=null;
  String storageCapacityThreshold=configs.get("storage.capacity.threshold");
  String cpuCapacityThreshold=configs.get("cpu.capacity.threshold");
  String memoryCapacityThreshold=configs.get("memory.capacity.threshold");
  String storageAllocCapacityThreshold=configs.get("storage.allocated.capacity.threshold");
  String publicIPCapacityThreshold=configs.get("public.ip.capacity.threshold");
  String privateIPCapacityThreshold=configs.get("private.ip.capacity.threshold");
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    s_logger.error("Unable to get the host dao.");
    return false;
  }
  _vmDao=locator.getDao(VMInstanceDao.class);
  if (_vmDao == null) {
    s_logger.error("Unable to get the VM Instance dao.");
    return false;
  }
  _routerDao=locator.getDao(DomainRouterDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorgaeVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  if (_userVmDao == null) {
    s_logger.error("Unable to get the UserVm dao.");
    return false;
  }
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  if (_offeringsDao == null) {
    s_logger.error("Unable to get the ServiceOffering dao.");
    return false;
  }
  _capacityDao=locator.getDao(CapacityDao.class);
  if (_capacityDao == null) {
    s_logger.error("Unable to get the capacity dao.");
    return false;
  }
  _alertDao=locator.getDao(AlertDao.class);
  if (_alertDao == null) {
    s_logger.error("Unable to get the alert dao.");
    return false;
  }
  _dcDao=locator.getDao(DataCenterDao.class);
  if (_dcDao == null) {
    s_logger.error("Unable to get the DataCenter dao.");
    return false;
  }
  _podDao=locator.getDao(HostPodDao.class);
  if (_podDao == null) {
    s_logger.error("Unable to get the Pod dao.");
    return false;
  }
  _volumeDao=locator.getDao(VolumeDao.class);
  if (_volumeDao == null) {
    s_logger.error("Unable to get the Volume dao.");
    return false;
  }
  _publicIPAddressDao=locator.getDao(IPAddressDao.class);
  if (_publicIPAddressDao == null) {
    throw new ConfigurationException("Unable to get " + IPAddressDao.class.getName());
  }
  _privateIPAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  if (_privateIPAddressDao == null) {
    throw new ConfigurationException("Unable to get " + DataCenterIpAddressDaoImpl.class.getName());
  }
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  if (_storagePoolDao == null) {
    throw new ConfigurationException("Unable to get " + StoragePoolDao.class.getName());
  }
  String capacityCheckPeriodStr=configs.get("capacity.check.period");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
  }
  String overProvisioningFactorStr=configs.get("storage.overprovisioning.factor");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Integer.parseInt(overProvisioningFactorStr);
  }
  String cpuOverProvisioningFactorStr=configs.get("cpu.overprovisioning.factor");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer("CapacityChecker");
  return true;
}
