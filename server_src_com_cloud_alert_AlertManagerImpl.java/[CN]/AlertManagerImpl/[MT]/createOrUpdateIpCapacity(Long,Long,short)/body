{
  SearchCriteria<CapacityVO> capacitySC=_capacityDao.createSearchCriteria();
  List<CapacityVO> capacities=_capacityDao.search(capacitySC,null);
  capacitySC=_capacityDao.createSearchCriteria();
  capacitySC.addAnd("podId",SearchCriteria.Op.EQ,podId);
  capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,dcId);
  capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,capacityType);
  int totalIPs;
  int allocatedIPs;
  capacities=_capacityDao.search(capacitySC,null);
  if (capacityType == CapacityVO.CAPACITY_TYPE_PRIVATE_IP) {
    totalIPs=_privateIPAddressDao.countIPs(podId,dcId,false);
    allocatedIPs=_privateIPAddressDao.countIPs(podId,dcId,true);
  }
 else {
    totalIPs=_publicIPAddressDao.countIPsForDashboard(dcId,false);
    allocatedIPs=_publicIPAddressDao.countIPsForDashboard(dcId,true);
  }
  if (capacities.size() == 0) {
    CapacityVO newPublicIPCapacity=new CapacityVO(null,dcId,podId,null,allocatedIPs,totalIPs,capacityType);
    _capacityDao.persist(newPublicIPCapacity);
  }
 else   if (!(capacities.get(0).getUsedCapacity() == allocatedIPs && capacities.get(0).getTotalCapacity() == totalIPs)) {
    CapacityVO capacity=capacities.get(0);
    capacity.setUsedCapacity(allocatedIPs);
    capacity.setTotalCapacity(totalIPs);
    _capacityDao.update(capacity.getId(),capacity);
  }
}
