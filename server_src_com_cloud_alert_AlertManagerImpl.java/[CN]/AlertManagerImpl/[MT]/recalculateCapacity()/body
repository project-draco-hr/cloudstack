{
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("recalculating system capacity");
  }
  List<HostVO> hosts=_hostDao.listByType(Host.Type.Routing);
  for (  HostVO host : hosts) {
    _capacityMgr.updateCapacityForHost(host);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
  for (  StoragePoolVO pool : storagePools) {
    long disk=0l;
    Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
    disk=sizes.second();
    _storageMgr.createCapacityEntry(pool,disk);
  }
  try {
    List<DataCenterVO> datacenters=_dcDao.listAll();
    for (    DataCenterVO datacenter : datacenters) {
      long dcId=datacenter.getId();
      s_logger.trace("Executing public ip capacity update for Virtual Network");
      createOrUpdateIpCapacity(dcId,null,CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);
      s_logger.trace("Done with public ip capacity update for Virtual Network");
      s_logger.trace("Executing public ip capacity update for Direct Attached Network");
      createOrUpdateIpCapacity(dcId,null,CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);
      s_logger.trace("Done with public ip capacity update for Direct Attached Network");
      s_logger.trace("Executing VLAN capacity update");
      createOrUpdateVlanCapacity(dcId);
      s_logger.trace("Executing VLAN capacity update");
    }
    List<HostPodVO> pods=_podDao.listAll();
    for (    HostPodVO pod : pods) {
      long podId=pod.getId();
      long dcId=pod.getDataCenterId();
      s_logger.trace("Executing private ip capacity update");
      createOrUpdateIpCapacity(dcId,podId,CapacityVO.CAPACITY_TYPE_PRIVATE_IP);
      s_logger.trace("Done with private ip capacity update");
    }
  }
 catch (  Exception ex) {
    s_logger.error("Unable to start transaction for capacity update");
  }
}
