{
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("recalculating system capacity");
      s_logger.debug("Executing cpu/ram capacity update");
    }
    List<HostVO> hosts=_resourceMgr.listAllNotInMaintenanceHostsInOneZone(Host.Type.Routing,null);
    for (    HostVO host : hosts) {
      _capacityMgr.updateCapacityForHost(host);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Done executing cpu/ram capacity update");
      s_logger.debug("Executing storage capacity update");
    }
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      long disk=0l;
      Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
      disk=sizes.second();
      if (pool.isShared()) {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,disk);
      }
 else {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_LOCAL_STORAGE,disk);
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Done executing storage capacity update");
      s_logger.debug("Executing capacity updates public ip and Vlans");
    }
    List<DataCenterVO> datacenters=_dcDao.listAll();
    for (    DataCenterVO datacenter : datacenters) {
      long dcId=datacenter.getId();
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateIpCapacity(dcId,null,CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);
      }
      createOrUpdateIpCapacity(dcId,null,CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateVlanCapacity(dcId);
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Done capacity updates for public ip and Vlans");
      s_logger.debug("Executing capacity updates for private ip");
    }
    List<HostPodVO> pods=_podDao.listAll();
    for (    HostPodVO pod : pods) {
      long podId=pod.getId();
      long dcId=pod.getDataCenterId();
      createOrUpdateIpCapacity(dcId,podId,CapacityVO.CAPACITY_TYPE_PRIVATE_IP);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Done executing capacity updates for private ip");
      s_logger.debug("Done recalculating system capacity");
    }
  }
 catch (  Throwable t) {
    s_logger.error("Caught exception in recalculating capacity",t);
  }
}
