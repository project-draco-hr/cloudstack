import cloud_utils
from cloud_utils import Command
import logging
import sys
import os
import xml.dom.minidom
from optparse import OptionParser, OptionGroup, OptParseError, BadOptionError, OptionError, OptionConflictError, OptionValueError
iptables = Command('iptables')
bash = Command('/bin/bash')
virsh = Command('virsh')
ebtablessave = Command('ebtables-save')
ebtables = Command('ebtables')
augtool = Command('augtool')
'\ndef ipset(ipsetname, proto, start, end, ips):\n    try:\n        check_call([\'ipset\', \'-N\', ipsetname, \'iptreemap\'])\n    except:\n        logging.debug("ipset chain already exists" + ipsetname)\n\n    result = True\n    ipsettmp = \'\'.join(\'\'.join(ipsetname.split(\'-\')).split(\'_\')) + str(int(time.time()) % 1000)\n\n    try: \n        check_call([\'ipset\', \'-N\', ipsettmp, \'iptreemap\']) \n        for ip in ips:\n            try:\n                check_call([\'ipset\', \'-A\', ipsettmp, ip])\n            except CommandException, cex:\n                if cex.reason.rfind(\'already in set\') == -1:\n                   raise\n        check_call([\'ipset\', \'-W\', ipsettmp, ipsetname]) \n        check_call([\'ipset\', \'-X\', ipsettmp]) \n    except:\n        logging.debug("Failed to program ipset " + ipsetname)\n        result = False\n\n    return result\n'
if (__name__ == '__main__'):
    logging.basicConfig(filename='/var/log/cloud/security_group.log', format='%(asctime)s - %(message)s', level=logging.DEBUG)
    parser = OptionParser()
    parser.add_option('--vmname', dest='vmName')
    parser.add_option('--vmip', dest='vmIP')
    parser.add_option('--vmid', dest='vmID')
    parser.add_option('--vmmac', dest='vmMAC')
    parser.add_option('--vif', dest='vif')
    parser.add_option('--sig', dest='sig')
    parser.add_option('--seq', dest='seq')
    parser.add_option('--rules', dest='rules')
    parser.add_option('--brname', dest='brname')
    parser.add_option('--dhcpSvr', dest='dhcpSvr')
    parser.add_option('--hostIp', dest='hostIp')
    parser.add_option('--hostMacAddr', dest='hostMacAddr')
    (option, args) = parser.parse_args()
    cmd = args[0]
    if (cmd == 'can_bridge_firewall'):
        can_bridge_firewall(args[1])
    elif (cmd == 'default_network_rules'):
        default_network_rules(option.vmName, option.vmID, option.vmIP, option.vmMAC, option.vif, option.brname)
    elif (cmd == 'destroy_network_rules_for_vm'):
        destroy_network_rules_for_vm(option.vmName, option.vif)
    elif (cmd == 'default_network_rules_systemvm'):
        default_network_rules_systemvm(option.vmName, option.brname)
    elif (cmd == 'get_rule_logs_for_vms'):
        get_rule_logs_for_vms()
    elif (cmd == 'add_network_rules'):
        add_network_rules(option.vmName, option.vmID, option.vmIP, option.sig, option.seq, option.vmMAC, option.rules, option.vif, option.brname)
    elif (cmd == 'cleanup_rules'):
        cleanup_rules()
    elif (cmd == 'post_default_network_rules'):
        post_default_network_rules(option.vmName, option.vmID, option.vmIP, option.vmMAC, option.vif, option.brname, option.dhcpSvr, option.hostIp, option.hostMacAddr)
