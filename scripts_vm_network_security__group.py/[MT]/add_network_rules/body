def add_network_rules(vm_name, vm_id, vm_ip, signature, seqno, vmMac, rules, vif, brname, ruletype):
    try:
        vmName = vm_name
        domId = getvmId(vmName)
        if (ruletype == 'egress'):
            vmchain = (vm_name + '-egress')
        else:
            vmchain = vm_name
        changes = []
        changes = check_rule_log_for_vm(vmName, vm_id, vm_ip, domId, signature, seqno)
        if (not (1 in changes)):
            logging.debug(('Rules already programmed for vm ' + vm_name))
            return 'true'
        if (changes[0] or changes[1] or changes[2] or changes[3]):
            default_network_rules(vmName, vm_id, vm_ip, vmMac, vif, brname)
        if ((rules == '') or (rules == None)):
            lines = []
        else:
            lines = rules.split(';')[:(-1)]
        logging.debug(((('    programming network rules for  IP: ' + vm_ip) + ' vmname=') + vm_name))
        execute(('iptables -F ' + vmchain))
        for line in lines:
            tokens = line.split(':')
            if (len(tokens) != 4):
                continue
            protocol = tokens[0]
            start = tokens[1]
            end = tokens[2]
            cidrs = tokens.pop()
            ips = cidrs.split(',')
            ips.pop()
            allow_any = False
            if ('0.0.0.0/0' in ips):
                i = ips.index('0.0.0.0/0')
                del ips[i]
                allow_any = True
            range = ((start + ':') + end)
            if ips:
                if (protocol == 'all'):
                    for ip in ips:
                        if (ruletype == 'egress'):
                            execute((((('iptables -I ' + vmchain) + ' -m state --state NEW -d ') + ip) + ' -j ACCEPT'))
                        else:
                            execute((((('iptables -I ' + vmchain) + ' -m state --state NEW -s ') + ip) + ' -j ACCEPT'))
                elif (protocol != 'icmp'):
                    for ip in ips:
                        if (ruletype == 'egress'):
                            execute((((((((((('iptables -I ' + vmchain) + ' -p ') + protocol) + ' -m ') + protocol) + ' --dport ') + range) + ' -m state --state NEW -d ') + ip) + ' -j ACCEPT'))
                        else:
                            execute((((((((((('iptables -I ' + vmchain) + ' -p ') + protocol) + ' -m ') + protocol) + ' --dport ') + range) + ' -m state --state NEW -s ') + ip) + ' -j ACCEPT'))
                else:
                    range = ((start + '/') + end)
                    if (start == '-1'):
                        range = 'any'
                        for ip in ips:
                            if (ruletype == 'egress'):
                                execute((((((('iptables -I ' + vmchain) + ' -p icmp --icmp-type ') + range) + ' -d ') + ip) + ' -j ACCEPT'))
                            else:
                                execute((((((('iptables -I ' + vmchain) + ' -p icmp --icmp-type ') + range) + ' -s ') + ip) + ' -j ACCEPT'))
            if (allow_any and (protocol != 'all')):
                if (protocol != 'icmp'):
                    execute((((((((('iptables -I ' + vmchain) + ' -p ') + protocol) + ' -m ') + protocol) + ' --dport ') + range) + ' -m state --state NEW -j ACCEPT'))
                else:
                    range = ((start + '/') + end)
                    if (start == '-1'):
                        range = 'any'
                        execute((((('iptables -I ' + vmchain) + ' -p icmp --icmp-type ') + range) + ' -j ACCEPT'))
        iptables = (('iptables -A ' + vmchain) + ' -j DROP')
        execute(iptables)
        if (write_rule_log_for_vm(vmName, vm_id, vm_ip, domId, signature, seqno) == False):
            return 'false'
        return 'true'
    except:
        logging.debug(('Failed to network rule !: ' + sys.exc_type))
