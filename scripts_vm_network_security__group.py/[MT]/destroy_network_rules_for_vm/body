def destroy_network_rules_for_vm(vm_name, vif=None):
    vmchain = vm_name
    vmchain_egress = (vm_name + '-egress')
    vmchain_default = None
    delete_rules_for_vm_in_bridge_firewall_chain(vm_name)
    if (vm_name.startswith('i-') or vm_name.startswith('r-')):
        vmchain_default = ('-'.join(vm_name.split('-')[:(-1)]) + '-def')
    destroy_ebtables_rules(vmchain, vif)
    try:
        if (vmchain_default != None):
            execute(('iptables -F ' + vmchain_default))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain_default))
    try:
        if (vmchain_default != None):
            execute(('iptables -X ' + vmchain_default))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain_default))
    try:
        execute(('iptables -F ' + vmchain))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain))
    try:
        execute(('iptables -X ' + vmchain))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain))
    try:
        execute(('iptables -F ' + vmchain_egress))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain_egress))
    try:
        execute(('iptables -X ' + vmchain_egress))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vmchain_egress))
    if (vif is not None):
        try:
            dnats = execute((('iptables -t nat -S | grep ' + vif) + " | sed 's/-A/-D/'")).split('\n')
            for dnat in dnats:
                try:
                    execute(('iptables -t nat ' + dnat))
                except:
                    logging.debug(('Igoring failure to delete dnat: ' + dnat))
        except:
            pass
    remove_rule_log_for_vm(vm_name)
    if (1 in [vm_name.startswith(c) for c in ['r-', 's-', 'v-']]):
        return 'true'
    return 'true'
