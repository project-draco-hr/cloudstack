def destroy_network_rules_for_vm(vm_name, vif=None):
    vmchain = vm_name
    vmchain_egress = egress_chain_name(vm_name)
    vmchain_default = None
    delete_rules_for_vm_in_bridge_firewall_chain(vm_name)
    if vm_name.startswith('i-'):
        vmchain_default = ('-'.join(vm_name.split('-')[:(-1)]) + '-def')
    destroy_ebtables_rules(vmchain, vif)
    chains = [vmchain_default, vmchain, vmchain_egress]
    for chain in filter(None, chains):
        try:
            execute(('iptables -F ' + chain))
        except:
            logging.debug(('Ignoring failure to flush chain: ' + chain))
    for chain in filter(None, chains):
        try:
            execute(('iptables -X ' + chain))
        except:
            logging.debug(('Ignoring failure to delete chain: ' + chain))
    try:
        execute(('ipset -F ' + vm_name))
        execute(('ipset -X ' + vm_name))
    except:
        logging.debug(('Ignoring failure to delete ipset ' + vmchain))
    if (vif is not None):
        try:
            dnats = execute(('iptables -t nat -S | awk \'/%s/ { sub(/-A/, "-D", $1) ; print }\'' % vif)).split('\n')
            for dnat in filter(None, dnats):
                try:
                    execute(('iptables -t nat ' + dnat))
                except:
                    logging.debug(('Ignoring failure to delete dnat: ' + dnat))
        except:
            pass
    remove_rule_log_for_vm(vm_name)
    remove_secip_log_for_vm(vm_name)
    if (1 in [vm_name.startswith(c) for c in ['r-', 's-', 'v-']]):
        return 'true'
    return 'true'
