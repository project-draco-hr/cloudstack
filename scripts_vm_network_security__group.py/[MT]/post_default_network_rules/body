def post_default_network_rules(vm_name, vm_id, vm_ip, vm_mac, vif, brname, dhcpSvr, hostIp, hostMacAddr):
    vmchain_default = ('-'.join(vm_name.split('-')[:(-1)]) + '-def')
    vmchain_in = (vm_name + '-in')
    vmchain_out = (vm_name + '-out')
    domID = getvmId(vm_name)
    try:
        execute((((((('iptables -I ' + vmchain_default) + ' 4 -m physdev --physdev-is-bridged --physdev-in ') + vif) + ' --source ') + vm_ip) + ' -j ACCEPT'))
    except:
        pass
    try:
        execute((((((('iptables -t nat -A PREROUTING -p tcp -m physdev --physdev-in ' + vif) + ' -m tcp --dport 80 -d ') + dhcpSvr) + ' -j DNAT --to-destination ') + hostIp) + ':80'))
    except:
        pass
    try:
        execute(((((('ebtables -t nat -A PREROUTING -i ' + vif) + ' -p IPv4 --ip-protocol tcp --ip-destination-port 80 --ip-dst ') + dhcpSvr) + ' -j dnat --to-destination ') + hostMacAddr))
    except:
        pass
    try:
        execute((((('ebtables -t nat -I ' + vmchain_in) + ' 4 -p ARP --arp-ip-src ! ') + vm_ip) + ' -j DROP'))
    except:
        pass
    try:
        execute((((('ebtables -t nat -I ' + vmchain_out) + ' 2 -p ARP --arp-ip-dst ! ') + vm_ip) + ' -j DROP'))
    except:
        pass
    if (write_rule_log_for_vm(vm_name, vm_id, vm_ip, domID, '_initial_', '-1') == False):
        logging.debug('Failed to log default network rules, ignoring')
