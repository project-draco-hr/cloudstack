def default_network_rules(vm_name, vm_id, rules):
    vmName = vm_name
    domID = getvmId(vm_name)
    delete_rules_for_vm_in_bridge_firewall_chain(vmName)
    vmchain = vm_name
    vmchain_default = ('-'.join(vmchain.split('-')[:(-1)]) + '-def')
    destroy_ebtables_rules(vmName)
    try:
        execute(('iptables -N ' + vmchain))
    except:
        execute(('iptables -F ' + vmchain))
    try:
        execute(('iptables -N ' + vmchain_default))
    except:
        execute(('iptables -F ' + vmchain_default))
    rule = rules.split(';')[:(-1)]
    try:
        for r in rule:
            vif = r.split(',')[2]
            execute(((('iptables -A BRIDGE-FIREWALL -m physdev --physdev-is-bridged --physdev-out ' + vif) + ' -j ') + vmchain_default))
            execute(((('iptables -A BRIDGE-FIREWALL -m physdev --physdev-is-bridged --physdev-in ' + vif) + ' -j ') + vmchain_default))
        execute((('iptables -A  ' + vmchain_default) + ' -m state --state RELATED,ESTABLISHED -j ACCEPT'))
        for r in rule:
            vif = r.split(',')[2]
            execute((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-in ') + vif) + ' -p udp --dport 67 --sport 68 -j ACCEPT'))
            execute((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-out ') + vif) + ' -p udp --dport 68 --sport 67  -j ACCEPT'))
        for r in rule:
            vmip = r.split(',')[0]
            vif = r.split(',')[2]
            execute((((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-in ') + vif) + ' --source ') + vmip) + ' -j ACCEPT'))
        execute(((('iptables -A ' + vmchain_default) + ' -j ') + vmchain))
    except:
        logging.debug(('Failed to program default rules for vm ' + vm_name))
        return 'false'
    default_ebtables_rules(vmchain, rules)
    for r in rule:
        vm_ip = r.split(',')[0]
        if (write_rule_log_for_vm(vmName, vm_id, vm_ip, domID, '_initial_', '-1') == False):
            logging.debug('Failed to log default network rules, ignoring')
    logging.debug(('Programmed default rules for vm ' + vm_name))
    return 'true'
