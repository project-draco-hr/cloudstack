def default_network_rules(vm_name, vm_ip, vm_id, vm_mac):
    print vm_name
    print vm_ip
    print vm_mac
    vmName = vm_name
    domID = getvmId(vm_name)
    delete_rules_for_vm_in_bridge_firewall_chain(vmName)
    vmchain = vm_name
    vmchain_default = ('-'.join(vmchain.split('-')[:(-1)]) + '-def')
    destroy_ebtables_rules(vmName)
    vifs = getVifs(vmName)
    try:
        execute(('iptables -N ' + vmchain))
    except:
        execute(('iptables -F ' + vmchain))
    try:
        execute(('iptables -N ' + vmchain_default))
    except:
        execute(('iptables -F ' + vmchain_default))
    try:
        for v in vifs:
            execute(((('iptables -A BRIDGE-FIREWALL -m physdev --physdev-is-bridged --physdev-out ' + v) + ' -j ') + vmchain_default))
            execute(((('iptables -A BRIDGE-FIREWALL -m physdev --physdev-is-bridged --physdev-in ' + v) + ' -j ') + vmchain_default))
        execute((('iptables -A  ' + vmchain_default) + ' -m state --state RELATED,ESTABLISHED -j ACCEPT'))
        for v in vifs:
            execute((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-in ') + v) + ' -p udp --dport 67 --sport 68 -j ACCEPT'))
            execute((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-out ') + v) + ' -p udp --dport 68 --sport 67  -j ACCEPT'))
        for v in vifs:
            execute((((((('iptables -A ' + vmchain_default) + ' -m physdev --physdev-is-bridged --physdev-in ') + v) + ' --source ') + vm_ip) + ' -j RETURN'))
        execute(((('iptables -A ' + vmchain_default) + ' -j ') + vmchain))
    except:
        logging.debug(('Failed to program default rules for vm ' + vm_name))
        return 'false'
    for v in vifs:
        default_ebtables_rules(vmchain, v, vm_ip, vm_mac)
    if (write_rule_log_for_vm(vmName, vm_id, vm_ip, domID, '_initial_', '-1') == False):
        logging.debug('Failed to log default network rules, ignoring')
    logging.debug(('Programmed default rules for vm ' + vm_name))
    return 'true'
