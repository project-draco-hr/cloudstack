{
  while (_isRunning) {
    try {
      _selector.select();
      final Set<SelectionKey> readyKeys=_selector.selectedKeys();
      final Iterator<SelectionKey> i=readyKeys.iterator();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Keys Processing: " + readyKeys.size());
      }
      while (i.hasNext()) {
        final SelectionKey sk=i.next();
        i.remove();
        if (!sk.isValid()) {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Selection Key is invalid: " + sk.toString());
          }
          final Link link=(Link)sk.attachment();
          if (link != null) {
            link.terminated();
          }
 else {
            closeConnection(sk);
          }
        }
 else         if (sk.isReadable()) {
          read(sk);
        }
 else         if (sk.isWritable()) {
          write(sk);
        }
 else         if (sk.isAcceptable()) {
          accept(sk);
        }
 else         if (sk.isConnectable()) {
          connect(sk);
        }
      }
      s_logger.trace("Keys Done Processing.");
      processTodos();
    }
 catch (    final ClosedSelectorException e) {
    }
catch (    final IOException e) {
      s_logger.error("Agent will die due to this IOException!",e);
      throw new NioConnectionException(e.getMessage(),e);
    }
 finally {
      _selector.wakeup();
    }
  }
  _isStartup=false;
  return true;
}
