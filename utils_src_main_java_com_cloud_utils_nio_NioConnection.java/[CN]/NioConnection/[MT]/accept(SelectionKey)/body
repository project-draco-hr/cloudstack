{
  final ServerSocketChannel serverSocketChannel=(ServerSocketChannel)key.channel();
  final SocketChannel socketChannel=serverSocketChannel.accept();
  socketChannel.configureBlocking(false);
  final Socket socket=socketChannel.socket();
  socket.setKeepAlive(true);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Connection accepted for " + socket);
  }
  final SSLEngine sslEngine;
  try {
    final SSLContext sslContext=Link.initSSLContext(false);
    sslEngine=sslContext.createSSLEngine();
    sslEngine.setUseClientMode(false);
    sslEngine.setNeedClientAuth(false);
    sslEngine.setEnabledProtocols(SSLUtils.getSupportedProtocols(sslEngine.getEnabledProtocols()));
    final NioConnection nioConnection=this;
    _sslHandshakeExecutor.submit(new Runnable(){
      @Override public void run(){
        _selector.wakeup();
        try {
          sslEngine.beginHandshake();
          if (!Link.doHandshake(socketChannel,sslEngine,false)) {
            throw new IOException("SSL handshake timed out with " + socketChannel.getRemoteAddress());
          }
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("SSL: Handshake done");
          }
          final InetSocketAddress saddr=(InetSocketAddress)socket.getRemoteSocketAddress();
          final Link link=new Link(saddr,nioConnection);
          link.setSSLEngine(sslEngine);
          link.setKey(socketChannel.register(key.selector(),SelectionKey.OP_READ,link));
          final Task task=_factory.create(Task.Type.CONNECT,link,null);
          registerLink(saddr,link);
          _executor.submit(task);
        }
 catch (        IOException e) {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Connection closed due to failure: " + e.getMessage());
          }
          closeAutoCloseable(socket,"accepting socket");
          closeAutoCloseable(socketChannel,"accepting socketChannel");
        }
 finally {
          _selector.wakeup();
        }
      }
    }
);
  }
 catch (  final Exception e) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Connection closed due to failure: " + e.getMessage());
    }
    closeAutoCloseable(socket,"accepting socket");
    closeAutoCloseable(socketChannel,"accepting socketChannel");
  }
 finally {
    _selector.wakeup();
  }
}
