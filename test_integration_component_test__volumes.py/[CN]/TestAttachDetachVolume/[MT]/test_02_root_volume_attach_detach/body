@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_02_root_volume_attach_detach(self):
    'Test Root Volume attach/detach to VM\n        '
    if ((self.hypervisor.lower() == 'vmware') or (self.hypervisor.lower() == 'kvm') or (self.hypervisor.lower() == 'simulator') or (self.hypervisor.lower() == 'xenserver')):
        try:
            root_volume_response = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
            self.assertEqual(validateList(root_volume_response)[0], PASS, 'Invalid response returned for root volume list')
            root_volume = root_volume_response[0]
            self.debug(('Stopping the VM: %s' % self.virtual_machine.id))
            self.virtual_machine.stop(self.apiclient)
            vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
            self.assertEqual(validateList(vm_response)[0], PASS, 'Invalid response returned for vm_response list')
            vm = vm_response[0]
            self.assertEqual(vm.state, 'Stopped', 'Check the state of VM')
            self.virtual_machine.detach_volume(self.apiclient, root_volume)
            no_root_volume_response = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
            self.assertEqual(no_root_volume_response, None, 'Check if root volume exists in ListVolumes')
            self.virtual_machine.attach_volume(self.apiclient, root_volume, 0)
            new_root_volume_response = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='ROOT', listall=True)
            self.assertEqual(validateList(new_root_volume_response)[0], PASS, 'Invalid response returned for new_root_volume_response list')
            self.virtual_machine.start(self.apiclient)
            vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
            self.assertEqual(validateList(vm_response)[0], PASS, 'Invalid response returned for vm_response list during VM start up')
            vm = vm_response[0]
            self.assertEqual(vm.state, 'Running', 'Ensure the state of VM is running')
        except Exception as e:
            self.fail(('Exception occurred: %s' % e))
    else:
        self.skipTest(('Root Volume attach/detach is not supported on %s ' % self.hypervisor))
    return
