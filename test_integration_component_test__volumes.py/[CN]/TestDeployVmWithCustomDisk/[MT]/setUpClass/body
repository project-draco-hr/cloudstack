@classmethod
def setUpClass(cls):
    cls.testClient = super(TestDeployVmWithCustomDisk, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    if (cls.hypervisor.lower() == 'lxc'):
        if (not find_storage_pool_type(cls.apiclient, storagetype='rbd')):
            raise unittest.SkipTest('RBD storage type is required for data volumes for LXC')
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'], custom=True)
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = template.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls._cleanup = [cls.service_offering, cls.disk_offering, cls.account]
