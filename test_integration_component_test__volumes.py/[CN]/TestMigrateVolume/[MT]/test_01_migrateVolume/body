@attr(tags=['advanced', 'sg', 'advancedsg'], required_hardware='true')
def test_01_migrateVolume(self):
    '\n        @Desc:Volume is not retaining same uuid when migrating from one storage to another.\n        Step1:Create a volume/data disk\n        Step2:Verify UUID of the volume\n        Step3:Migrate the volume to another primary storage within the cluster\n        Step4:Migrating volume to new primary storage should succeed\n        Step5:volume UUID should not change even after migration\n        '
    vol = Volume.create(self.apiclient, self.services['volume'], diskofferingid=self.disk_offering.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.assertIsNotNone(vol, 'Failed to create volume')
    vol_res = Volume.list(self.apiclient, id=vol.id)
    self.assertEqual(validateList(vol_res)[0], PASS, 'Invalid response returned for list volumes')
    vol_uuid = vol_res[0].id
    try:
        self.virtual_machine.attach_volume(self.apiclient, vol)
    except Exception as e:
        self.fail(('Attaching data disk to vm failed with error %s' % e))
    pools = StoragePool.listForMigration(self.apiclient, id=vol.id)
    if (not pools):
        self.skipTest('No suitable storage pools found for volume migration. Skipping')
    self.assertEqual(validateList(pools)[0], PASS, 'invalid pool response from findStoragePoolsForMigration')
    pool = pools[0]
    self.debug(('Migrating Volume-ID: %s to Pool: %s' % (vol.id, pool.id)))
    try:
        Volume.migrate(self.apiclient, volumeid=vol.id, storageid=pool.id, livemigrate='true')
    except Exception as e:
        self.fail(('Volume migration failed with error %s' % e))
    migrated_vols = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, listall='true', type='DATADISK')
    self.assertEqual(validateList(migrated_vols)[0], PASS, 'invalid volumes response after migration')
    migrated_vol_uuid = migrated_vols[0].id
    self.assertEqual(vol_uuid, migrated_vol_uuid, 'Volume is not retaining same uuid when migrating from one storage to another')
    self.virtual_machine.detach_volume(self.apiclient, vol)
    self.cleanup.append(vol)
    return
