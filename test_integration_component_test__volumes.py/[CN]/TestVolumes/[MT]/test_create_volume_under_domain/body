@attr(tags=['advanced', 'advancedns', 'simulator', 'basic', 'eip', 'sg'], required_hardware='false')
def test_create_volume_under_domain(self):
    'Create a volume under a non-root domain as non-root-domain user\n\n        1. Create a domain under ROOT\n        2. Create a user within this domain\n        3. As user in step 2. create a volume with standard disk offering\n        4. Ensure the volume is created in the domain and available to the\n           user in his listVolumes call\n        '
    dom = Domain.create(self.apiclient, services={}, name='NROOT', parentdomainid=self.domain.id)
    self.cleanup.append(dom)
    self.assertTrue((dom is not None), msg='Domain creation failed')
    domuser = Account.create(apiclient=self.apiclient, services=self.services['account'], admin=False, domainid=dom.id)
    self.cleanup.insert((-2), domuser)
    self.assertTrue((domuser is not None))
    domapiclient = self.testClient.getUserApiClient(UserName=domuser.name, DomainName=dom.name)
    diskoffering = DiskOffering.list(self.apiclient)
    self.assertTrue(isinstance(diskoffering, list), msg='DiskOffering list is not a list?')
    self.assertTrue((len(diskoffering) > 0), 'no disk offerings in the deployment')
    vol = Volume.create(domapiclient, services=self.services['volume'], zoneid=self.zone.id, account=domuser.name, domainid=dom.id, diskofferingid=diskoffering[0].id)
    self.assertTrue((vol is not None), ('volume creation fails in domain %s as user %s' % (dom.name, domuser.name)))
    listed_vol = Volume.list(domapiclient, id=vol.id)
    self.assertTrue(((listed_vol is not None) and isinstance(listed_vol, list)), ('invalid response from listVolumes for volume %s' % vol.id))
    self.assertTrue((listed_vol[0].id == vol.id), ('Volume returned by list volumes %s not matching with queried                    volume %s in domain %s' % (listed_vol[0].id, vol.id, dom.name)))
