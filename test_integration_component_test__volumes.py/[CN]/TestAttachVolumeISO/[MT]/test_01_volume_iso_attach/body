@attr(tags=['advanced', 'advancedns'])
def test_01_volume_iso_attach(self):
    'Test Volumes and ISO attach\n        '
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest('attach ISO is not supported on LXC')
    for i in range(self.max_data_volumes):
        volume = Volume.create(self.apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id)
        self.debug(('Created volume: %s for account: %s' % (volume.id, self.account.name)))
        list_volume_response = Volume.list(self.apiclient, id=volume.id)
        self.assertNotEqual(list_volume_response, None, 'Check if volume exists in ListVolumes')
        self.assertEqual(isinstance(list_volume_response, list), True, 'Check list volumes response for valid list')
        self.virtual_machine.attach_volume(self.apiclient, volume)
    list_volume_response = Volume.list(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
    self.assertNotEqual(list_volume_response, None, 'Check if volume exists in ListVolumes')
    self.assertEqual(isinstance(list_volume_response, list), True, 'Check list volumes response for valid list')
    self.assertEqual(len(list_volume_response), self.max_data_volumes, ('Volumes attached to the VM %s. Expected %s' % (len(list_volume_response), self.max_data_volumes)))
    iso = Iso.create(self.apiclient, self.services['iso'], account=self.account.name, domainid=self.account.domainid)
    self.debug(('Created ISO with ID: %s for account: %s' % (iso.id, self.account.name)))
    try:
        self.debug(('Downloading ISO with ID: %s' % iso.id))
        iso.download(self.apiclient)
    except Exception as e:
        self.fail(('Exception while downloading ISO %s: %s' % (iso.id, e)))
    self.debug(('Attach ISO ID: %s to VM: %s' % (iso.id, self.virtual_machine.id)))
    cmd = attachIso.attachIsoCmd()
    cmd.id = iso.id
    cmd.virtualmachineid = self.virtual_machine.id
    self.apiclient.attachIso(cmd)
    vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM response for valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check VMs available in List VMs response')
    vm = vm_response[0]
    self.assertEqual(vm.isoid, iso.id, 'Check ISO is attached to VM or not')
    return
