{
  final String remoteAddress=req.getRemoteAddr();
  final StringBuilder auditTrailSb=new StringBuilder(128);
  auditTrailSb.append(" ").append(remoteAddress);
  auditTrailSb.append(" -- ").append(req.getMethod()).append(' ');
  String responseType=HttpUtils.RESPONSE_TYPE_XML;
  final Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  utf8Fixup(req,params);
  String reqStr="";
  if (s_logger.isDebugEnabled()) {
    reqStr=auditTrailSb.toString() + " " + StringUtils.cleanString(req.getQueryString());
    s_logger.debug("===START=== " + reqStr);
  }
  try {
    if (HttpUtils.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
      resp.setContentType(HttpUtils.JSON_CONTENT_TYPE);
    }
 else     if (HttpUtils.RESPONSE_TYPE_XML.equalsIgnoreCase(responseType)) {
      resp.setContentType(HttpUtils.XML_CONTENT_TYPE);
    }
    HttpSession session=req.getSession(false);
    final Object[] responseTypeParam=params.get(ApiConstants.RESPONSE);
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    final Object[] commandObj=params.get(ApiConstants.COMMAND);
    if (commandObj != null) {
      final String command=(String)commandObj[0];
      APIAuthenticator apiAuthenticator=_authManager.getAPIAuthenticator(command);
      if (apiAuthenticator != null) {
        auditTrailSb.append("command=");
        auditTrailSb.append(command);
        int httpResponseCode=HttpServletResponse.SC_OK;
        String responseString=null;
        if (apiAuthenticator.getAPIType() == APIAuthenticationType.LOGIN_API) {
          if (session != null) {
            try {
              session.invalidate();
            }
 catch (            final IllegalStateException ise) {
            }
          }
          session=req.getSession(true);
        }
        try {
          responseString=apiAuthenticator.authenticate(command,params,session,remoteAddress,responseType,auditTrailSb,resp);
        }
 catch (        ServerApiException e) {
          httpResponseCode=e.getErrorCode().getHttpCode();
          responseString=e.getMessage();
          s_logger.debug("Authentication failure: " + e.getMessage());
        }
        if (apiAuthenticator.getAPIType() == APIAuthenticationType.LOGOUT_API) {
          if (session != null) {
            final Long userId=(Long)session.getAttribute("userid");
            final Account account=(Account)session.getAttribute("accountobj");
            Long accountId=null;
            if (account != null) {
              accountId=account.getId();
            }
            auditTrailSb.insert(0,"(userId=" + userId + " accountId="+ accountId+ " sessionId="+ session.getId()+ ")");
            if (userId != null) {
              _apiServer.logoutUser(userId);
            }
            try {
              session.invalidate();
            }
 catch (            final IllegalStateException ignored) {
            }
          }
        }
        HttpUtils.writeHttpResponse(resp,responseString,httpResponseCode,responseType);
        return;
      }
    }
    auditTrailSb.append(StringUtils.cleanString(req.getQueryString()));
    final boolean isNew=((session == null) ? true : session.isNew());
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute("userid");
      final String account=(String)session.getAttribute("account");
      final Object accountObj=session.getAttribute("accountobj");
      final String sessionKey=(String)session.getAttribute("sessionkey");
      final String[] sessionKeyParam=(String[])params.get(ApiConstants.SESSIONKEY);
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        HttpUtils.writeHttpResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        final String[] command=(String[])params.get(ApiConstants.COMMAND);
        if (command == null) {
          s_logger.info("missing command, ignoring request...");
          auditTrailSb.append(" " + HttpServletResponse.SC_BAD_REQUEST + " "+ "no command specified");
          final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,"no command specified",params,responseType);
          HttpUtils.writeHttpResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        final User user=_entityMgr.findById(User.class,userId);
        CallContext.register(user,(Account)accountObj);
      }
 else {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        HttpUtils.writeHttpResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
 else {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,"(userId=" + CallContext.current().getCallingUserId() + " accountId="+ CallContext.current().getCallingAccount().getId()+ " sessionId="+ (session != null ? session.getId() : null)+ ")");
      params.put("httpmethod",new String[]{req.getMethod()});
      final String response=_apiServer.handleRequest(params,responseType,auditTrailSb);
      HttpUtils.writeHttpResponse(resp,response != null ? response : "",HttpServletResponse.SC_OK,responseType);
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
      }
      auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials and/or request signature");
      final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials and/or request signature",params,responseType);
      HttpUtils.writeHttpResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  final ServerApiException se) {
    final String serializedResponseText=_apiServer.getSerializedApiError(se,params,responseType);
    resp.setHeader("X-Description",se.getDescription());
    HttpUtils.writeHttpResponse(resp,serializedResponseText,se.getErrorCode().getHttpCode(),responseType);
    auditTrailSb.append(" " + se.getErrorCode() + " "+ se.getDescription());
  }
catch (  final Exception ex) {
    s_logger.error("unknown exception writing api response",ex);
    auditTrailSb.append(" unknown exception writing api response");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("===END=== " + reqStr);
    }
    CallContext.unregister();
  }
}
