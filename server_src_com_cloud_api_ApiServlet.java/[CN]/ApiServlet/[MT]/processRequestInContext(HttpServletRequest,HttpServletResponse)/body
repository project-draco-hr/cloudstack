{
  final StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(" " + req.getRemoteAddr());
  auditTrailSb.append(" -- " + req.getMethod() + " ");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  final Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  utf8Fixup(req,params);
  String reqStr="";
  if (s_logger.isDebugEnabled()) {
    reqStr=auditTrailSb.toString() + " " + StringUtils.cleanString(req.getQueryString());
    s_logger.debug("===START=== " + reqStr);
  }
  try {
    HttpSession session=req.getSession(false);
    final Object[] responseTypeParam=params.get(ApiConstants.RESPONSE);
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    final Object[] commandParam=params.get(ApiConstants.COMMAND);
    if (commandParam != null) {
      final String command=(String)commandParam[0];
      if ("logout".equalsIgnoreCase(command)) {
        if (session != null) {
          final Long userId=(Long)session.getAttribute("userid");
          final Account account=(Account)session.getAttribute("accountobj");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,"(userId=" + userId + " accountId="+ accountId+ " sessionId="+ session.getId()+ ")");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          final IllegalStateException ise) {
          }
        }
        auditTrailSb.append("command=logout");
        auditTrailSb.append(" " + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if ("login".equalsIgnoreCase(command)) {
        auditTrailSb.append("command=login");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          final IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        final String[] username=(String[])params.get(ApiConstants.USERNAME);
        final String[] password=(String[])params.get(ApiConstants.PASSWORD);
        String[] domainIdArr=(String[])params.get(ApiConstants.DOMAIN_ID);
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(ApiConstants.DOMAIN__ID);
        }
        final String[] domainName=(String[])params.get(ApiConstants.DOMAIN);
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=_apiServer.fetchDomainId(domainIdArr[0]);
            if (domainId == null) {
              domainId=new Long(Long.parseLong(domainIdArr[0]));
            }
            auditTrailSb.append(" domainid=" + domainId);
          }
 catch (          final NumberFormatException e) {
            s_logger.warn("Invalid domain id entered by user");
            auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "Invalid domain id entered, please enter a valid one");
            final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"Invalid domain id entered, please enter a valid one",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(" domain=" + domain);
          if (domain != null) {
            if (!domain.endsWith("/")) {
              domain+='/';
            }
            if (!domain.startsWith("/")) {
              domain="/" + domain;
            }
          }
        }
        if (username != null) {
          final String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,req.getRemoteAddr(),params);
            auditTrailSb.insert(0,"(userId=" + session.getAttribute("userid") + " accountId="+ ((Account)session.getAttribute("accountobj")).getId()+ " sessionId="+ session.getId()+ ")");
            final String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          final CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            final IllegalStateException ise) {
            }
            auditTrailSb.append(" " + ApiErrorCode.ACCOUNT_ERROR + " "+ ex.getMessage() != null ? ex.getMessage() : "failed to authenticate user, check if username/password are correct");
            final String serializedResponse=_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),ex.getMessage() != null ? ex.getMessage() : "failed to authenticate user, check if username/password are correct",params,responseType);
            writeResponse(resp,serializedResponse,ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    final boolean isNew=((session == null) ? true : session.isNew());
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute("userid");
      final String account=(String)session.getAttribute("account");
      final Object accountObj=session.getAttribute("accountobj");
      final String sessionKey=(String)session.getAttribute("sessionkey");
      final String[] sessionKeyParam=(String[])params.get(ApiConstants.SESSIONKEY);
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        if (commandParam == null || commandParam[0] == null) {
          s_logger.info("missing command, ignoring request...");
          auditTrailSb.append(" " + HttpServletResponse.SC_BAD_REQUEST + " "+ "no command specified");
          final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,"no command specified",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        final User user=_entityMgr.findById(User.class,userId);
        CallContext.register(user,(Account)accountObj);
      }
 else {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
 else {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,"(userId=" + CallContext.current().getCallingUserId() + " accountId="+ CallContext.current().getCallingAccount().getId()+ " sessionId="+ (session != null ? session.getId() : null)+ ")");
      params.put("httpmethod",new String[]{req.getMethod()});
      final String response=_apiServer.handleRequest(params,responseType,auditTrailSb);
      writeResponse(resp,response != null ? response : "",HttpServletResponse.SC_OK,responseType);
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        final IllegalStateException ise) {
        }
      }
      auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials and/or request signature");
      final String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials and/or request signature",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  final ServerApiException se) {
    final String serializedResponseText=_apiServer.getSerializedApiError(se,params,responseType);
    resp.setHeader("X-Description",se.getDescription());
    writeResponse(resp,serializedResponseText,se.getErrorCode().getHttpCode(),responseType);
    auditTrailSb.append(" " + se.getErrorCode() + " "+ se.getDescription());
  }
catch (  final Exception ex) {
    s_logger.error("unknown exception writing api response",ex);
    auditTrailSb.append(" unknown exception writing api response");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("===END=== " + reqStr);
    }
    CallContext.unregister();
  }
}
