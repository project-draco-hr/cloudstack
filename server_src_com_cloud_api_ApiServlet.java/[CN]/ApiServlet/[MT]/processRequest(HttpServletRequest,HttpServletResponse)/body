{
  try {
    Map<String,Object[]> params=new HashMap<String,Object[]>();
    params.putAll(req.getParameterMap());
    HttpSession session=req.getSession(false);
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    Object[] responseTypeParam=params.get("response");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get("command");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if ("logout".equalsIgnoreCase(command)) {
        if (session != null) {
          String userIdStr=(String)session.getAttribute("userId");
          if (userIdStr != null) {
            _apiServer.logoutUser(Long.parseLong(userIdStr));
          }
          session.invalidate();
        }
        writeResponse(resp,getLogoutSuccessResponse(responseType),false,responseType);
        return;
      }
 else       if ("login".equalsIgnoreCase(command)) {
        if (session != null)         session.invalidate();
        session=req.getSession(true);
        String[] username=(String[])params.get("username");
        String[] password=(String[])params.get("password");
        String[] domainIdArr=(String[])params.get("domainid");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get("domainId");
        }
        String[] domainName=(String[])params.get("domain");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
          }
 catch (          NumberFormatException e) {
            s_logger.warn("Invalid domain id entered by user");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Invalid domain id entered, please enter a valid one");
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          if (domain != null) {
            if (!domain.endsWith("/")) {
              domain+='/';
            }
            if (!domain.startsWith("/")) {
              domain="/" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          List<Pair<String,Object>> sessionParams=_apiServer.loginUser(username[0],pwd,domainId,domain,params);
          if (sessionParams != null) {
            for (            Pair<String,Object> sessionParam : sessionParams) {
              session.setAttribute(sessionParam.first(),sessionParam.second());
            }
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,false,responseType);
            return;
          }
 else {
            session.invalidate();
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,"failed to authenticated user, check username/password are correct");
            return;
          }
        }
      }
    }
    boolean isNew=((session == null) ? true : session.isNew());
    Object accountObj=null;
    String userId=null;
    String account=null;
    String domainId=null;
    if (!isNew) {
      userId=(String)session.getAttribute(BaseCmd.Properties.USER_ID.getName());
      account=(String)session.getAttribute(BaseCmd.Properties.ACCOUNT.getName());
      domainId=(String)session.getAttribute(BaseCmd.Properties.DOMAIN_ID.getName());
      accountObj=session.getAttribute(BaseCmd.Properties.ACCOUNT_OBJ.getName());
      String sessionKey=(String)session.getAttribute(BaseCmd.Properties.SESSION_KEY.getName());
      String[] sessionKeyParam=(String[])params.get(BaseCmd.Properties.SESSION_KEY.getName());
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials");
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(Long.valueOf(userId))) {
        String[] command=(String[])params.get("command");
        if (command == null) {
          s_logger.info("missing command, ignoring request...");
          resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"no command specified");
          return;
        }
      }
 else {
        userId=null;
        account=null;
        accountObj=null;
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials");
        return;
      }
    }
    UserContext.registerContext(null,null,null,false);
    if (_apiServer.verifyRequest(params,userId)) {
      if (accountObj != null) {
        Account userAccount=(Account)accountObj;
        if (userAccount.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          params.put(BaseCmd.Properties.USER_ID.getName(),new String[]{userId});
          params.put(BaseCmd.Properties.ACCOUNT.getName(),new String[]{account});
          params.put(BaseCmd.Properties.DOMAIN_ID.getName(),new String[]{domainId});
          params.put(BaseCmd.Properties.ACCOUNT_OBJ.getName(),new Object[]{accountObj});
        }
 else {
          params.put(BaseCmd.Properties.USER_ID.getName(),new String[]{userId});
          params.put(BaseCmd.Properties.ACCOUNT_OBJ.getName(),new Object[]{accountObj});
        }
      }
      updateUserContext(params,session != null ? session.getId() : null);
      try {
        String response=_apiServer.handleRequest(params,false,responseType);
        writeResponse(resp,response != null ? response : "",false,responseType);
      }
 catch (      ServerApiException se) {
        resp.sendError(se.getErrorCode(),se.getDescription());
      }
    }
 else {
      if (session != null) {
        session.invalidate();
      }
      resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials and/or request signature");
    }
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("exception processing request: " + ioex);
    }
  }
catch (  Exception ex) {
    s_logger.error("unknown exception writing api response",ex);
  }
 finally {
    UserContext.unregisterContext();
  }
}
