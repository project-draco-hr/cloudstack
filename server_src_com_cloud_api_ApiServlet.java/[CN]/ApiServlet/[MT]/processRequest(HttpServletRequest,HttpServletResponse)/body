{
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(" " + req.getRemoteAddr());
  auditTrailSb.append(" -- " + req.getMethod() + " ");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  try {
    HttpSession session=req.getSession(false);
    Object[] responseTypeParam=params.get("response");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get("command");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if ("logout".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute("userid");
          Account account=(Account)session.getAttribute("accountobj");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,"(userId=" + userId + " accountId="+ accountId+ " sessionId="+ session.getId()+ ")");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append("command=logout");
        auditTrailSb.append(" " + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if ("login".equalsIgnoreCase(command)) {
        auditTrailSb.append("command=login");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get("username");
        String[] password=(String[])params.get("password");
        String[] domainIdArr=(String[])params.get("domainid");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get("domainId");
        }
        String[] domainName=(String[])params.get("domain");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(" domainid=" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn("Invalid domain id entered by user");
            auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "Invalid domain id entered, please enter a valid one");
            String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"Invalid domain id entered, please enter a valid one",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(" domain=" + domain);
          if (domain != null) {
            if (!domain.endsWith("/")) {
              domain+='/';
            }
            if (!domain.startsWith("/")) {
              domain="/" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,"(userId=" + session.getAttribute("userid") + " accountId="+ ((Account)session.getAttribute("accountobj")).getId()+ " sessionId="+ session.getId()+ ")");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(" " + BaseCmd.ACCOUNT_ERROR + " "+ ex.getMessage() != null ? ex.getMessage() : "failed to authenticate user, check if username/password are correct");
            String serializedResponse=_apiServer.getSerializedApiError(BaseCmd.ACCOUNT_ERROR,ex.getMessage() != null ? ex.getMessage() : "failed to authenticate user, check if username/password are correct",params,responseType);
            writeResponse(resp,serializedResponse,BaseCmd.ACCOUNT_ERROR,responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount(),null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute("userid");
      String account=(String)session.getAttribute("account");
      Long domainId=(Long)session.getAttribute("domainid");
      Object accountObj=session.getAttribute("accountobj");
      String sessionKey=(String)session.getAttribute("sessionkey");
      String[] sessionKeyParam=(String[])params.get("sessionkey");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get("command");
        if (command == null) {
          s_logger.info("missing command, ignoring request...");
          auditTrailSb.append(" " + HttpServletResponse.SC_BAD_REQUEST + " "+ "no command specified");
          String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,"no command specified",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,"(userId=" + UserContext.current().getCallerUserId() + " accountId="+ UserContext.current().getCaller().getId()+ " sessionId="+ (session != null ? session.getId() : null)+ ")");
      try {
        String response=_apiServer.handleRequest(params,false,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : "",HttpServletResponse.SC_OK,responseType);
      }
 catch (      ServerApiException se) {
        String serializedResponseText=_apiServer.getSerializedApiError(se.getErrorCode(),se.getDescription(),params,responseType);
        resp.setHeader("X-Description",se.getDescription());
        writeResponse(resp,serializedResponseText,se.getErrorCode(),responseType);
        auditTrailSb.append(" " + se.getErrorCode() + " "+ se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(" " + HttpServletResponse.SC_UNAUTHORIZED + " "+ "unable to verify user credentials and/or request signature");
      String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,"unable to verify user credentials and/or request signature",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  InvalidParameterException ipe) {
    auditTrailSb.append(" " + HttpServletResponse.SC_NOT_FOUND + " "+ ipe.getMessage());
    String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage(),params,responseType);
    writeResponse(resp,serializedResponse,HttpServletResponse.SC_NOT_FOUND,responseType);
  }
catch (  Exception ex) {
    s_logger.error("unknown exception writing api response",ex);
    auditTrailSb.append(" unknown exception writing api response");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}
