def put(self, localpath, remotepath, callback=None):
    '\n        Copy a local file (C{localpath}) to the SFTP server as C{remotepath}.\n        Any exception raised by operations will be passed through.  This\n        method is primarily provided as a convenience.\n\n        The SFTP operations use pipelining for speed.\n\n        @param localpath: the local file to copy\n        @type localpath: str\n        @param remotepath: the destination path on the SFTP server\n        @type remotepath: str\n        @param callback: optional callback function that accepts the bytes\n            transferred so far and the total bytes to be transferred\n            (since 1.7.4)\n        @type callback: function(int, int)\n        @return: an object containing attributes about the given file\n            (since 1.7.4)\n        @rtype: SFTPAttributes\n\n        @since: 1.4\n        '
    file_size = os.stat(localpath).st_size
    fl = file(localpath, 'rb')
    try:
        fr = self.file(remotepath, 'wb')
        fr.set_pipelined(True)
        size = 0
        try:
            while True:
                data = fl.read(32768)
                if (len(data) == 0):
                    break
                fr.write(data)
                size += len(data)
                if (callback is not None):
                    callback(size, file_size)
        finally:
            fr.close()
    finally:
        fl.close()
    s = self.stat(remotepath)
    if (s.st_size != size):
        raise IOError(('size mismatch in put!  %d != %d' % (s.st_size, size)))
    return s
