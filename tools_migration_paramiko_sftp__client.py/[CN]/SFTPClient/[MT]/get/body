def get(self, remotepath, localpath, callback=None):
    '\n        Copy a remote file (C{remotepath}) from the SFTP server to the local\n        host as C{localpath}.  Any exception raised by operations will be\n        passed through.  This method is primarily provided as a convenience.\n\n        @param remotepath: the remote file to copy\n        @type remotepath: str\n        @param localpath: the destination path on the local host\n        @type localpath: str\n        @param callback: optional callback function that accepts the bytes\n            transferred so far and the total bytes to be transferred\n            (since 1.7.4)\n        @type callback: function(int, int)\n\n        @since: 1.4\n        '
    fr = self.file(remotepath, 'rb')
    file_size = self.stat(remotepath).st_size
    fr.prefetch()
    try:
        fl = file(localpath, 'wb')
        try:
            size = 0
            while True:
                data = fr.read(32768)
                if (len(data) == 0):
                    break
                fl.write(data)
                size += len(data)
                if (callback is not None):
                    callback(size, file_size)
        finally:
            fl.close()
    finally:
        fr.close()
    s = os.stat(localpath)
    if (s.st_size != size):
        raise IOError(('size mismatch in get!  %d != %d' % (s.st_size, size)))
