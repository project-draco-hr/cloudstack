def open(self, filename, mode='r', bufsize=(-1)):
    "\n        Open a file on the remote server.  The arguments are the same as for\n        python's built-in C{file} (aka C{open}).  A file-like object is\n        returned, which closely mimics the behavior of a normal python file\n        object.\n\n        The mode indicates how the file is to be opened: C{'r'} for reading,\n        C{'w'} for writing (truncating an existing file), C{'a'} for appending,\n        C{'r+'} for reading/writing, C{'w+'} for reading/writing (truncating an\n        existing file), C{'a+'} for reading/appending.  The python C{'b'} flag\n        is ignored, since SSH treats all files as binary.  The C{'U'} flag is\n        supported in a compatible way.\n\n        Since 1.5.2, an C{'x'} flag indicates that the operation should only\n        succeed if the file was created and did not previously exist.  This has\n        no direct mapping to python's file flags, but is commonly known as the\n        C{O_EXCL} flag in posix.\n\n        The file will be buffered in standard python style by default, but\n        can be altered with the C{bufsize} parameter.  C{0} turns off\n        buffering, C{1} uses line buffering, and any number greater than 1\n        (C{>1}) uses that specific buffer size.\n\n        @param filename: name of the file to open\n        @type filename: str\n        @param mode: mode (python-style) to open in\n        @type mode: str\n        @param bufsize: desired buffering (-1 = default buffer size)\n        @type bufsize: int\n        @return: a file object representing the open file\n        @rtype: SFTPFile\n\n        @raise IOError: if the file could not be opened.\n        "
    filename = self._adjust_cwd(filename)
    self._log(DEBUG, ('open(%r, %r)' % (filename, mode)))
    imode = 0
    if (('r' in mode) or ('+' in mode)):
        imode |= SFTP_FLAG_READ
    if (('w' in mode) or ('+' in mode) or ('a' in mode)):
        imode |= SFTP_FLAG_WRITE
    if ('w' in mode):
        imode |= (SFTP_FLAG_CREATE | SFTP_FLAG_TRUNC)
    if ('a' in mode):
        imode |= (SFTP_FLAG_CREATE | SFTP_FLAG_APPEND)
    if ('x' in mode):
        imode |= (SFTP_FLAG_CREATE | SFTP_FLAG_EXCL)
    attrblock = SFTPAttributes()
    (t, msg) = self._request(CMD_OPEN, filename, imode, attrblock)
    if (t != CMD_HANDLE):
        raise SFTPError('Expected handle')
    handle = msg.get_string()
    self._log(DEBUG, ('open(%r, %r) -> %s' % (filename, mode, hexlify(handle))))
    return SFTPFile(self, handle, mode, bufsize)
