{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Retrieving user: " + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug("Unable to find user with " + username + " in domain "+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
    env.put(Context.PROVIDER_URL,"ldap://" + url + ":"+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,"ssl");
    env.put(Context.SECURITY_PRINCIPAL,bindDN);
    env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll("\\%u",username);
    queryFilter=queryFilter.replaceAll("\\%n",user.getFirstname() + " " + user.getLastname());
    queryFilter=queryFilter.replaceAll("%e",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={"dn"};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info("DN from LDAP =" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
    env.put(Context.PROVIDER_URL,"ldap://" + url + ":"+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,"ssl");
    env.put(Context.SECURITY_PRINCIPAL,cn + "," + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn("Authentication failed due to " + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    s_logger.warn("Unknown error encountered " + e.getMessage());
    return false;
  }
  return true;
}
