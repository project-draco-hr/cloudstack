def query_async_job(self, apiclient, jobid):
    'Query the status for Async Job'
    try:
        asyncTimeout = 3600
        cmd = queryAsyncJobResult.queryAsyncJobResultCmd()
        cmd.jobid = jobid
        timeout = asyncTimeout
        async_response = FAILED
        while (timeout > 0):
            async_response = apiclient.queryAsyncJobResult(cmd)
            if (async_response != FAILED):
                job_status = async_response.jobstatus
                if (job_status in [JOB_CANCELLED, JOB_SUCCEEDED]):
                    break
                elif (job_status == JOB_FAILED):
                    raise Exception(('Job failed: %s' % async_response))
            time.sleep(5)
            timeout -= 5
            self.debug(('=== JobId: %s is Still Processing, Will TimeOut in: %s ====' % (str(jobid), str(timeout))))
        return async_response
    except Exception as e:
        self.debug(('==== Exception Occurred for Job: %s ====' % str(e)))
        return FAILED
