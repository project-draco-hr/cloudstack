@classmethod
def setUpClass(cls):
    testClient = super(TestMultipleVolumeAttach, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = testClient.getParsedTestDataConfig()
    cls._cleanup = []
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.hypervisor = testClient.getHypervisorInfo()
    cls.invalidStoragePoolType = False
    if (cls.hypervisor.lower() == 'lxc'):
        if (not find_storage_pool_type(cls.apiclient, storagetype='rbd')):
            cls.invalidStoragePoolType = True
            return
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.services['disk_offering'])
    template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['domainid'] = cls.domain.id
    cls.services['zoneid'] = cls.zone.id
    cls.services['template'] = template.id
    cls.services['diskofferingid'] = cls.disk_offering.id
    cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offering'])
    cls.virtual_machine = VirtualMachine.create(cls.apiclient, cls.services, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    if ((cls.hypervisor.lower() == 'lxc') and (cls.storage_pools.type.lower() != 'rbd')):
        raise unittest.SkipTest('Data Disk attach for NFS is not supported on LXC')
    cls.volume1 = Volume.create(cls.apiclient, cls.services, account=cls.account.name, domainid=cls.account.domainid)
    cls.volume2 = Volume.create(cls.apiclient, cls.services, account=cls.account.name, domainid=cls.account.domainid)
    cls.volume3 = Volume.create(cls.apiclient, cls.services, account=cls.account.name, domainid=cls.account.domainid)
    cls.volume4 = Volume.create(cls.apiclient, cls.services, account=cls.account.name, domainid=cls.account.domainid)
    cls._cleanup = [cls.service_offering, cls.disk_offering, cls.account]
