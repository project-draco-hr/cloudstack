@attr(tags=['advanced', 'advancedns', 'basic', 'bpk'], required_hardware='true')
def test_attach_multiple_volumes(self):
    'Attach multiple Volumes simultaneously to a Running VM\n        '
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume1.id, self.virtual_machine.id)))
    vol1_jobId = self.attach_volume(self.apiClient, self.virtual_machine.id, self.volume1)
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume2.id, self.virtual_machine.id)))
    vol2_jobId = self.attach_volume(self.apiClient, self.virtual_machine.id, self.volume2)
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume3.id, self.virtual_machine.id)))
    vol3_jobId = self.attach_volume(self.apiClient, self.virtual_machine.id, self.volume3)
    self.debug(('Attaching volume (ID: %s) to VM (ID: %s)' % (self.volume4.id, self.virtual_machine.id)))
    vol4_jobId = self.attach_volume(self.apiClient, self.virtual_machine.id, self.volume4)
    self.query_async_job(self.apiClient, vol1_jobId.jobid)
    self.query_async_job(self.apiClient, vol2_jobId.jobid)
    self.query_async_job(self.apiClient, vol3_jobId.jobid)
    self.query_async_job(self.apiClient, vol4_jobId.jobid)
    list_volume_response = Volume.list(self.apiClient, virtualmachineid=self.virtual_machine.id, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(validateList(list_volume_response)[0], PASS, 'Check list response returns a valid list')
    data_disks_list = [disk for disk in list_volume_response if (disk.type == 'DATADISK')]
    self.assertEqual(validateList(data_disks_list)[0], PASS, 'Check data disk check returns a valid list')
    self.assertEqual(len(data_disks_list), 4, 'All 4 data disks are not attached to VM Successfully')
    return
