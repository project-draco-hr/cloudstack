{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long serviceOfferingId=(Long)params.get(BaseCmd.Properties.SERVICE_OFFERING_ID.getName());
  Long diskOfferingId=(Long)params.get(BaseCmd.Properties.DISK_OFFERING_ID.getName());
  Long templateId=(Long)params.get(BaseCmd.Properties.TEMPLATE_ID.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  String displayName=(String)params.get(BaseCmd.Properties.DISPLAY_NAME.getName());
  String group=(String)params.get(BaseCmd.Properties.GROUP.getName());
  String userData=(String)params.get(BaseCmd.Properties.USER_DATA.getName());
  String networkGroupList=(String)params.get(BaseCmd.Properties.NETWORK_GROUP_LIST.getName());
  Long size=(Long)params.get(BaseCmd.Properties.SIZE.getName());
  String password=null;
  Long accountId=null;
  if (size == null)   size=Long.valueOf(0);
  VMTemplateVO template=getManagementServer().findTemplateById(templateId);
  if (template == null) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"Unable to find template with id " + templateId);
  }
  if (diskOfferingId != null) {
    DiskOfferingVO diskOffering=getManagementServer().findDiskOfferingById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"Disk offering with id " + diskOfferingId + " doesn't exist in the system");
    }
    if (diskOffering.getUseLocalStorage()) {
      boolean errFlag=getManagementServer().checkLocalStorageConfigVal();
      if (!errFlag)       throw new ServerApiException(BaseCmd.VM_DEPLOY_ERROR,"Please set the local storage flag to true as disk offering has local storage usage enabled");
    }
  }
  DataCenterVO zone=getManagementServer().findDataCenterById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"Zone with id " + zoneId + " doesn't exist in the system");
  }
  ServiceOfferingVO serviceOffering=getManagementServer().findServiceOfferingById(serviceOfferingId);
  if (serviceOffering == null) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"Service offering with id " + serviceOfferingId + " doesn't exist in the system");
  }
  if ((account == null) || isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid domain id (" + domainId + ") ");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((account != null) ? account.getId() : null);
    }
  }
 else {
    accountId=account.getId();
  }
  if (accountId == null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"No valid account specified for deploying a virtual machine.");
  }
  String[] groups=null;
  if (networkGroupList != null) {
    groups=networkGroupList.split(",");
    for (    String groupName : groups) {
      NetworkGroupVO groupVO=getManagementServer().findNetworkGroupByName(accountId,groupName);
      if (groupVO == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Network group not found: " + groupName);
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  password=getManagementServer().generateRandomPassword();
  ManagementServer mgr=getManagementServer();
  try {
    long jobId=mgr.deployVirtualMachineAsync(userId.longValue(),accountId.longValue(),zoneId.longValue(),serviceOfferingId.longValue(),templateId.longValue(),diskOfferingId,null,password,displayName,group,userData,groups,size);
    long vmId=0;
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for DeployVMAsync comamnd");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("DeployVMAsync command has been accepted, job id: " + jobId);
      vmId=waitInstanceCreation(jobId);
    }
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName(),Long.valueOf(vmId)));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    return returnValues;
  }
 catch (  Exception ex) {
    s_logger.error("Unhandled exception, ",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to create VM due to unhandled exception");
  }
}
