def _check_file(self, request_number, msg):
    handle = msg.get_string()
    alg_list = msg.get_list()
    start = msg.get_int64()
    length = msg.get_int64()
    block_size = msg.get_int()
    if (handle not in self.file_table):
        self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
        return
    f = self.file_table[handle]
    for x in alg_list:
        if (x in _hash_class):
            algname = x
            alg = _hash_class[x]
            break
    else:
        self._send_status(request_number, SFTP_FAILURE, 'No supported hash types found')
        return
    if (length == 0):
        st = f.stat()
        if (not issubclass(type(st), SFTPAttributes)):
            self._send_status(request_number, st, 'Unable to stat file')
            return
        length = (st.st_size - start)
    if (block_size == 0):
        block_size = length
    if (block_size < 256):
        self._send_status(request_number, SFTP_FAILURE, 'Block size too small')
        return
    sum_out = ''
    offset = start
    while (offset < (start + length)):
        blocklen = min(block_size, ((start + length) - offset))
        chunklen = min(blocklen, 65536)
        count = 0
        hash_obj = alg.new()
        while (count < blocklen):
            data = f.read(offset, chunklen)
            if (not (type(data) is str)):
                self._send_status(request_number, data, 'Unable to hash file')
                return
            hash_obj.update(data)
            count += len(data)
            offset += count
        sum_out += hash_obj.digest()
    msg = Message()
    msg.add_int(request_number)
    msg.add_string('check-file')
    msg.add_string(algname)
    msg.add_bytes(sum_out)
    self._send_packet(CMD_EXTENDED_REPLY, str(msg))
