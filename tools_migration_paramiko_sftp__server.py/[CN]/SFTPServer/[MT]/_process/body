def _process(self, t, request_number, msg):
    self._log(DEBUG, ('Request: %s' % CMD_NAMES[t]))
    if (t == CMD_OPEN):
        path = msg.get_string()
        flags = self._convert_pflags(msg.get_int())
        attr = SFTPAttributes._from_msg(msg)
        self._send_handle_response(request_number, self.server.open(path, flags, attr))
    elif (t == CMD_CLOSE):
        handle = msg.get_string()
        if (handle in self.folder_table):
            del self.folder_table[handle]
            self._send_status(request_number, SFTP_OK)
            return
        if (handle in self.file_table):
            self.file_table[handle].close()
            del self.file_table[handle]
            self._send_status(request_number, SFTP_OK)
            return
        self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
    elif (t == CMD_READ):
        handle = msg.get_string()
        offset = msg.get_int64()
        length = msg.get_int()
        if (handle not in self.file_table):
            self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
            return
        data = self.file_table[handle].read(offset, length)
        if (type(data) is str):
            if (len(data) == 0):
                self._send_status(request_number, SFTP_EOF)
            else:
                self._response(request_number, CMD_DATA, data)
        else:
            self._send_status(request_number, data)
    elif (t == CMD_WRITE):
        handle = msg.get_string()
        offset = msg.get_int64()
        data = msg.get_string()
        if (handle not in self.file_table):
            self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
            return
        self._send_status(request_number, self.file_table[handle].write(offset, data))
    elif (t == CMD_REMOVE):
        path = msg.get_string()
        self._send_status(request_number, self.server.remove(path))
    elif (t == CMD_RENAME):
        oldpath = msg.get_string()
        newpath = msg.get_string()
        self._send_status(request_number, self.server.rename(oldpath, newpath))
    elif (t == CMD_MKDIR):
        path = msg.get_string()
        attr = SFTPAttributes._from_msg(msg)
        self._send_status(request_number, self.server.mkdir(path, attr))
    elif (t == CMD_RMDIR):
        path = msg.get_string()
        self._send_status(request_number, self.server.rmdir(path))
    elif (t == CMD_OPENDIR):
        path = msg.get_string()
        self._open_folder(request_number, path)
        return
    elif (t == CMD_READDIR):
        handle = msg.get_string()
        if (handle not in self.folder_table):
            self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
            return
        folder = self.folder_table[handle]
        self._read_folder(request_number, folder)
    elif (t == CMD_STAT):
        path = msg.get_string()
        resp = self.server.stat(path)
        if issubclass(type(resp), SFTPAttributes):
            self._response(request_number, CMD_ATTRS, resp)
        else:
            self._send_status(request_number, resp)
    elif (t == CMD_LSTAT):
        path = msg.get_string()
        resp = self.server.lstat(path)
        if issubclass(type(resp), SFTPAttributes):
            self._response(request_number, CMD_ATTRS, resp)
        else:
            self._send_status(request_number, resp)
    elif (t == CMD_FSTAT):
        handle = msg.get_string()
        if (handle not in self.file_table):
            self._send_status(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
            return
        resp = self.file_table[handle].stat()
        if issubclass(type(resp), SFTPAttributes):
            self._response(request_number, CMD_ATTRS, resp)
        else:
            self._send_status(request_number, resp)
    elif (t == CMD_SETSTAT):
        path = msg.get_string()
        attr = SFTPAttributes._from_msg(msg)
        self._send_status(request_number, self.server.chattr(path, attr))
    elif (t == CMD_FSETSTAT):
        handle = msg.get_string()
        attr = SFTPAttributes._from_msg(msg)
        if (handle not in self.file_table):
            self._response(request_number, SFTP_BAD_MESSAGE, 'Invalid handle')
            return
        self._send_status(request_number, self.file_table[handle].chattr(attr))
    elif (t == CMD_READLINK):
        path = msg.get_string()
        resp = self.server.readlink(path)
        if (type(resp) is str):
            self._response(request_number, CMD_NAME, 1, resp, '', SFTPAttributes())
        else:
            self._send_status(request_number, resp)
    elif (t == CMD_SYMLINK):
        target_path = msg.get_string()
        path = msg.get_string()
        self._send_status(request_number, self.server.symlink(target_path, path))
    elif (t == CMD_REALPATH):
        path = msg.get_string()
        rpath = self.server.canonicalize(path)
        self._response(request_number, CMD_NAME, 1, rpath, '', SFTPAttributes())
    elif (t == CMD_EXTENDED):
        tag = msg.get_string()
        if (tag == 'check-file'):
            self._check_file(request_number, msg)
        else:
            self._send_status(request_number, SFTP_OP_UNSUPPORTED)
    else:
        self._send_status(request_number, SFTP_OP_UNSUPPORTED)
