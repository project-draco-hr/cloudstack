@classmethod
def setUpClass(cls):
    cls.testClient = super(TestTemplates, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.services = Services().services
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.domain = get_domain(cls.api_client)
    cls.services['mode'] = cls.zone.networktype
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.templateSupported = True
    cls._cleanup = []
    if (cls.hypervisor.lower() in ['lxc']):
        cls.templateSupported = False
        return
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    try:
        cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.services['account'] = cls.account.name
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
        cls.virtual_machine.stop(cls.api_client)
        listvolumes = Volume.list(cls.api_client, virtualmachineid=cls.virtual_machine.id, type='ROOT', listall=True)
        assert (validateList(listvolumes)[0] == PASS), 'volumes list is empty'
        cls.volume = listvolumes[0]
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Exception in setUpClass: %s' % e))
