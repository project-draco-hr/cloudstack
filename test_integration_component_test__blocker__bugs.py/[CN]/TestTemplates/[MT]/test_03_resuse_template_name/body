def test_03_resuse_template_name(self):
    'TS_BUG_011-Test Reusing deleted template name\n        '
    snapshot = Snapshot.create(self.apiclient, self.volume.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created snapshot with ID: %s' % snapshot.id))
    snapshots = Snapshot.list(self.apiclient, id=snapshot.id)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshots, None, 'Check if result exists in list snapshots call')
    self.assertEqual(snapshots[0].id, snapshot.id, 'Check snapshot id in list resources call')
    template = Template.create_from_snapshot(self.apiclient, snapshot, self.services['templates'], random_name=False)
    self.debug(('Created template from snapshot: %s' % template.id))
    templates = Template.list(self.apiclient, templatefilter=self.services['templates']['templatefilter'], id=template.id)
    self.assertEqual(isinstance(templates, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(templates, None, 'Check if result exists in list item call')
    self.assertEqual(templates[0].isready, True, 'Check new template state in list templates call')
    self.debug(('Deleting template: %s' % template.id))
    template.delete(self.apiclient)
    time.sleep(self.services['sleep'])
    self.debug(('Creating template from snapshot: %s with same name' % template.id))
    template = Template.create_from_snapshot(self.apiclient, snapshot, self.services['templates'], random_name=False)
    templates = Template.list(self.apiclient, templatefilter=self.services['templates']['templatefilter'], id=template.id)
    self.assertEqual(isinstance(templates, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(templates, None, 'Check if result exists in list item call')
    self.assertEqual(templates[0].name, self.services['templates']['name'], 'Check the name of the template')
    return
