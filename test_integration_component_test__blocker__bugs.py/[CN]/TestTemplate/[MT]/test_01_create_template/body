@attr(tags=['advanced', 'advancedns', 'basic', 'sg'])
def test_01_create_template(self):
    'TS_BUG_002-Test to create and deploy VM using password enabled template\n        '
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.services['template']['url'] = builtin_info[0]
    self.services['template']['hypervisor'] = builtin_info[1]
    self.services['template']['format'] = builtin_info[2]
    self.debug('Registering a new template')
    template = Template.register(self.apiclient, self.services['template'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.debug(('Registered a template of format: %s with ID: %s' % (self.services['template']['format'], template.id)))
    try:
        template.download(self.apiclient)
    except Exception as e:
        self.fail(('Exception while downloading template %s: %s' % (template.id, e)))
    self.cleanup.append(template)
    time.sleep(self.services['sleep'])
    list_template_response = Template.list(self.apiclient, templatefilter=self.services['template']['templatefilter'], id=template.id, zoneid=self.zone.id)
    self.assertEqual(isinstance(list_template_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_template_response), 0, 'Check template available in List Templates')
    template_response = list_template_response[0]
    self.assertEqual(template_response.isready, True, ('Template state is not ready, it is %s' % template_response.isready))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM with ID: %s ' % virtual_machine.id))
    self.assertEqual(hasattr(virtual_machine, 'password'), True, 'Check if the deployed VM returned a password')
    return
