@attr(tags=['advanced', 'selfservice'])
def test_01_firewall_rules_port_fw(self):
    '"Checking firewall rules deletion after static NAT disable'
    public_ip = self.public_ip.ipaddress
    StaticNATRule.enable(self.apiclient, public_ip.id, self.virtual_machine.id)
    self.debug(('Enabled static NAT for public IP ID: %s' % public_ip.id))
    nat_rule = StaticNATRule.create(self.apiclient, self.services['firewall_rule'], public_ip.id)
    self.debug(('Created Static NAT rule for public IP ID: %s' % public_ip.id))
    self.debug('Checking IP address')
    ip_response = PublicIPAddress.list(self.apiclient, id=public_ip.id)
    self.assertEqual(isinstance(ip_response, list), True, 'Check ip response returns a valid list')
    self.assertNotEqual(len(ip_response), 0, 'Check static NAT Rule is created')
    self.assertTrue(ip_response[0].isstaticnat, 'IP is not static nat enabled')
    self.assertEqual(ip_response[0].virtualmachineid, self.virtual_machine.id, 'IP is not binding with the VM')
    self.debug('Checking Firewall rule')
    firewall_response = FireWallRule.list(self.apiclient, ipaddressid=public_ip.id, listall=True)
    self.assertEqual(isinstance(firewall_response, list), True, 'Check firewall response returns a valid list')
    self.assertNotEqual(len(firewall_response), 0, 'Check firewall rule is created')
    self.assertEqual(firewall_response[0].state, 'Active', 'Firewall rule is not active')
    self.assertEqual(firewall_response[0].ipaddressid, public_ip.id, 'Firewall rule is not static nat related')
    self.assertEqual(firewall_response[0].startport, str(self.services['firewall_rule']['startport']), 'Firewall rule is not with specific port')
    self.debug('Removed the firewall rule')
    nat_rule.delete(self.apiclient)
    self.debug('Checking IP address, it should still existed')
    ip_response = PublicIPAddress.list(self.apiclient, id=public_ip.id)
    self.assertEqual(isinstance(ip_response, list), True, 'Check ip response returns a valid list')
    self.assertNotEqual(len(ip_response), 0, 'Check static NAT Rule is created')
    self.assertTrue(ip_response[0].isstaticnat, 'IP is not static nat enabled')
    self.assertEqual(ip_response[0].virtualmachineid, self.virtual_machine.id, 'IP is not binding with the VM')
    self.debug('Checking Firewall rule, it should be removed')
    firewall_response = FireWallRule.list(self.apiclient, ipaddressid=public_ip.id, listall=True)
    self.assertEqual(isinstance(firewall_response, list), True, 'Check firewall response returns a valid list')
    if (len(firewall_response) != 0):
        self.assertEqual(firewall_response[0].state, 'Deleting', 'Firewall rule should be deleted or in deleting state')
    return
