{
  final Network privateNetwork=_networkModel.getNetwork(privateGateway.getNetworkId());
  final PrivateIpVO ipVO=_privateIpDao.allocateIpAddress(privateNetwork.getDataCenterId(),privateNetwork.getId(),privateGateway.getIp4Address());
  final Nic privateNic=_nicDao.findByIp4AddressAndNetworkId(ipVO.getIpAddress(),privateNetwork.getId());
  NicProfile privateNicProfile=new NicProfile();
  if (privateNic != null) {
    final VirtualMachine vm=_vmDao.findById(privateNic.getInstanceId());
    privateNicProfile=new NicProfile(privateNic,privateNetwork,privateNic.getBroadcastUri(),privateNic.getIsolationUri(),_networkModel.getNetworkRate(privateNetwork.getId(),vm.getId()),_networkModel.isSecurityGroupSupportedInNetwork(privateNetwork),_networkModel.getNetworkTag(vm.getHypervisorType(),privateNetwork));
  }
 else {
    final String netmask=NetUtils.getCidrNetmask(privateNetwork.getCidr());
    final PrivateIpAddress ip=new PrivateIpAddress(ipVO,privateNetwork.getBroadcastUri().toString(),privateNetwork.getGateway(),netmask,NetUtils.long2Mac(NetUtils.createSequenceBasedMacAddress(ipVO.getMacAddress())));
    final URI netUri=BroadcastDomainType.fromString(ip.getBroadcastUri());
    privateNicProfile.setIPv4Address(ip.getIpAddress());
    privateNicProfile.setIPv4Gateway(ip.getGateway());
    privateNicProfile.setIPv4Netmask(ip.getNetmask());
    privateNicProfile.setIsolationUri(netUri);
    privateNicProfile.setBroadcastUri(netUri);
    privateNicProfile.setBroadcastType(BroadcastDomainType.getSchemeValue(netUri));
    privateNicProfile.setFormat(AddressFormat.Ip4);
    privateNicProfile.setReservationId(String.valueOf(ip.getBroadcastUri()));
    privateNicProfile.setMacAddress(ip.getMacAddress());
  }
  return privateNicProfile;
}
