{
  final Connection conn=getConnection();
  try {
    final Boolean alive=check_heartbeat(cmd.getHostGuid());
    if (alive == null) {
      s_logger.debug("Failed to check heartbeat,  so unable to fence");
      return new FenceAnswer(cmd,false,"Failed to check heartbeat, so unable to fence");
    }
    if (alive) {
      s_logger.debug("Heart beat is still going so unable to fence");
      return new FenceAnswer(cmd,false,"Heartbeat is still going on unable to fence");
    }
    final Set<VM> vms=VM.getByNameLabel(conn,cmd.getVmName());
    for (    final VM vm : vms) {
      final Set<VDI> vdis=new HashSet<VDI>();
      final Set<VBD> vbds=vm.getVBDs(conn);
      for (      final VBD vbd : vbds) {
        final VDI vdi=vbd.getVDI(conn);
        if (!isRefNull(vdi)) {
          vdis.add(vdi);
        }
      }
      s_logger.info("Fence command for VM " + cmd.getVmName());
      vm.powerStateReset(conn);
      vm.destroy(conn);
      for (      final VDI vdi : vdis) {
        final Map<String,String> smConfig=vdi.getSmConfig(conn);
        for (        final String key : smConfig.keySet()) {
          if (key.startsWith("host_")) {
            vdi.removeFromSmConfig(conn,key);
            break;
          }
        }
      }
    }
    return new FenceAnswer(cmd);
  }
 catch (  final XmlRpcException e) {
    s_logger.warn("Unable to fence",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
catch (  final XenAPIException e) {
    s_logger.warn("Unable to fence",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
}
