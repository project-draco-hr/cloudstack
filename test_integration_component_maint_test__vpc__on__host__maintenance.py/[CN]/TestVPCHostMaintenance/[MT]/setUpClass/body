@classmethod
def setUpClass(cls):
    cls.testClient = super(TestVPCHostMaintenance, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls._cleanup = []
    cls.hosts = []
    cls.vpcSupported = True
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    if (cls.hypervisor.lower() in ['hyperv']):
        cls.vpcSupported = False
        return
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.services['mode'] = cls.zone.networktype
    cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
    cls.vpc_off.update(cls.api_client, state='Enabled')
    cls.hosts = Host.list(cls.api_client, zoneid=cls.zone.id, listall=True, type='Routing')
    if isinstance(cls.hosts, list):
        for host in cls.hosts:
            Host.enableMaintenance(cls.api_client, id=host.id)
            timeout = cls.services['timeout']
            while True:
                time.sleep(cls.services['sleep'])
                hosts_states = Host.list(cls.api_client, id=host.id, listall=True)
                if (hosts_states[0].resourcestate == 'PrepareForMaintenance'):
                    time.sleep(cls.services['sleep'])
                elif (hosts_states[0].resourcestate == 'Maintenance'):
                    time.sleep(cls.services['sleep'])
                    break
                elif (timeout == 0):
                    raise unittest.SkipTest(('Failed to enable maintenance mode on %s' % host.name))
                timeout = (timeout - 1)
    cls._cleanup.append(cls.vpc_off)
    return
