def test_01_volume_usage(self):
    'Test Create/delete a volume and verify correct usage is recorded\n        '
    self.debug(('Stopping VM with ID: %s' % self.virtual_machine.id))
    self.virtual_machine.stop(self.apiclient)
    volume_response = list_volumes(self.apiclient, virtualmachineid=self.virtual_machine.id, type='DATADISK', listall=True)
    self.assertEqual(isinstance(volume_response, list), True, 'Check for valid list volumes response')
    data_volume = volume_response[0]
    self.debug(('Detaching volume ID: %s VM with ID: %s' % (data_volume.id, self.virtual_machine.id)))
    self.virtual_machine.detach_volume(self.apiclient, data_volume)
    self.debug(('Delete volume ID: %s' % data_volume.id))
    cmd = deleteVolume.deleteVolumeCmd()
    cmd.id = data_volume.id
    self.apiclient.deleteVolume(cmd)
    self.debug(("select id from account where uuid = '%s';" % self.account.account.id))
    qresultset = self.dbclient.execute(("select id from account where uuid = '%s';" % self.account.account.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select type from usage_event where account_id = '%s';" % account_id))
    qresultset = self.dbclient.execute(("select type from usage_event where account_id = '%s';" % account_id))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    qresult = str(qresultset)
    self.debug(('Query result: %s' % qresult))
    self.assertEqual(qresult.count('VOLUME.CREATE'), 2, 'Check VOLUME.CREATE event in events table')
    self.assertEqual(qresult.count('VOLUME.DELETE'), 1, 'Check VOLUME.DELETE in events table')
    return
