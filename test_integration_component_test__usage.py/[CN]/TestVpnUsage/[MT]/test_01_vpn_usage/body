def test_01_vpn_usage(self):
    'Test Create/Delete a VPN and verify correct usage is recorded\n        '
    self.debug(('Created VPN with public IP: %s' % self.public_ip.ipaddress.id))
    vpn = Vpn.create(self.apiclient, self.public_ip.ipaddress.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created VPN user for account: %s' % self.account.account.name))
    vpnuser = VpnUser.create(self.apiclient, self.services['vpn_user']['username'], self.services['vpn_user']['password'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Deleting VPN user: %s' % vpnuser.id))
    vpnuser.delete(self.apiclient)
    self.debug(('Deleting VPN: %s' % vpn.publicipid))
    vpn.delete(self.apiclient)
    self.debug(("select id from account where uuid = '%s';" % self.account.account.id))
    qresultset = self.dbclient.execute(("select id from account where uuid = '%s';" % self.account.account.id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = qresultset[0]
    account_id = qresult[0]
    self.debug(("select type from usage_event where account_id = '%s';" % account_id))
    qresultset = self.dbclient.execute(("select type from usage_event where account_id = '%s';" % account_id))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    qresult = str(qresultset)
    self.debug(('Query result: %s' % qresult))
    self.assertEqual(qresult.count('VPN.USER.ADD'), 1, 'Check VPN.USER.ADD event in events table')
    self.assertEqual(qresult.count('VPN.USER.ADD'), 1, 'Check VPN.USER.ADD in events table')
    return
