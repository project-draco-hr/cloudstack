{
  StringBuilder sql=new StringBuilder(DetailsSqlPrefix);
  if (clusterId != null) {
    sql.append("storage_pool.cluster_id = ? OR storage_pool.cluster_id IS NULL) AND (");
  }
  Set<Map.Entry<String,String>> entries=details.entrySet();
  for (  Map.Entry<String,String> detail : details.entrySet()) {
    sql.append("((storage_pool_details.name='").append(detail.getKey()).append("') AND (storage_pool_details.value='").append(detail.getValue()).append("')) OR ");
  }
  sql.delete(sql.length() - 4,sql.length());
  sql.append(DetailsSqlSuffix);
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    int i=1;
    pstmt.setLong(i++,dcId);
    pstmt.setLong(i++,podId);
    if (clusterId != null) {
      pstmt.setLong(i++,clusterId);
    }
    pstmt.setInt(i++,details.size());
    ResultSet rs=pstmt.executeQuery();
    List<StoragePoolVO> pools=new ArrayList<StoragePoolVO>();
    while (rs.next()) {
      pools.add(toEntityBean(rs,false));
    }
    return pools;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to execute " + pstmt.toString(),e);
  }
}
