{
  int error=0;
  Element rootElement=this.getInputFile().get(0).getDocumentElement();
  NodeList commandLst=rootElement.getElementsByTagName("command");
  for (int i=0; i < commandLst.getLength(); i++) {
    Node fstNode=commandLst.item(i);
    Element fstElmnt=(Element)fstNode;
    ApiCommand api=new ApiCommand(fstElmnt,this.getParam(),this.getCommands());
    api.sendCommand(this.getClient(),null);
  }
  ArrayList<String> port=new ArrayList<String>();
  for (int j=1; j < 1000; j++) {
    port.add(Integer.toString(j));
  }
  for (  String portValue : port) {
    try {
      s_logger.info("public port is " + portValue);
      String url="http://" + this.getParam().get("hostip") + ":8096/?command=createNetworkRule&publicPort="+ portValue+ "&privatePort=22&protocol=tcp&isForward=true&securityGroupId=1&account=admin";
      HttpClient client=new HttpClient();
      HttpMethod method=new GetMethod(url);
      int responseCode=client.executeMethod(method);
      if (responseCode != 200) {
        error++;
        s_logger.error("Can't create portForwarding network rule for the public port " + portValue + ". Request was sent with url "+ url);
      }
    }
 catch (    Exception ex) {
      s_logger.error(ex);
    }
  }
  if (error != 0)   return false;
 else   return true;
}
