{
  String bucketName=(String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY);
  String key=(String)request.getAttribute(S3Constants.OBJECT_ATTR_KEY);
  SBucketDao bucketDao=new SBucketDao();
  SBucket bucket=bucketDao.getByName(bucketName);
  String owner=null;
  if (null != bucket)   owner=bucket.getOwnerCanonicalId();
  if (null == owner) {
    logger.error("ACL update failed since " + bucketName + " does not exist");
    throw new IOException("ACL update failed");
  }
  if (null == key) {
    logger.error("ACL update failed since " + bucketName + " does not contain the expected key");
    throw new IOException("ACL update failed");
  }
  S3SetObjectAccessControlPolicyRequest engineRequest=new S3SetObjectAccessControlPolicyRequest();
  S3Grant grantRequest=new S3Grant();
  S3AccessControlList aclRequest=new S3AccessControlList();
  String aclRequestString=request.getHeader("x-amz-acl");
  OrderedPair<Integer,Integer> accessControlsForObjectOwner=SAcl.getCannedAccessControls(aclRequestString,"SObject");
  grantRequest.setPermission(accessControlsForObjectOwner.getFirst());
  grantRequest.setGrantee(accessControlsForObjectOwner.getSecond());
  grantRequest.setCanonicalUserID(owner);
  aclRequest.addGrant(grantRequest);
  engineRequest.setAcl(aclRequest);
  engineRequest.setBucketName(bucketName);
  engineRequest.setKey(key);
  S3Response engineResponse=ServiceProvider.getInstance().getS3Engine().handleRequest(engineRequest);
  response.setStatus(engineResponse.getResultCode());
}
