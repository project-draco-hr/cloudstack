{
  try {
    S3RestServlet.authenticateRequest(request,S3RestServlet.extractRequestHeaders(request));
  }
 catch (  Exception e) {
    throw new IOException(e.toString());
  }
  String bucket=(String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY);
  String key=(String)request.getAttribute(S3Constants.OBJECT_ATTR_KEY);
  S3MultipartPart[] parts=null;
  S3MetaDataEntry[] meta=null;
  String cannedAccess=null;
  int uploadId=-1;
  OutputStream outputStream=response.getOutputStream();
  outputStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>".getBytes());
  String temp=request.getParameter("uploadId");
  if (null != temp)   uploadId=Integer.parseInt(temp);
  try {
    MultipartLoadDao uploadDao=new MultipartLoadDao();
    if (null == uploadDao.multipartExits(uploadId)) {
      response.setStatus(404);
      returnErrorXML(404,"NotFound",outputStream);
      return;
    }
    String initiator=uploadDao.getInitiator(uploadId);
    if (null == initiator || !initiator.equals(UserContext.current().getAccessKey())) {
      response.setStatus(403);
      returnErrorXML(403,"Forbidden",outputStream);
      return;
    }
    parts=uploadDao.getParts(uploadId,10000,0);
    meta=uploadDao.getMeta(uploadId);
    cannedAccess=uploadDao.getCannedAccess(uploadId);
  }
 catch (  Exception e) {
    logger.error("executeCompleteMultipartUpload failed due to " + e.getMessage(),e);
    response.setStatus(500);
    returnErrorXML(500,"InternalError",outputStream);
    return;
  }
  OrderedPair<Integer,String> match=verifyParts(request.getInputStream(),parts);
  if (200 != match.getFirst().intValue()) {
    response.setStatus(match.getFirst().intValue());
    returnErrorXML(match.getFirst().intValue(),match.getSecond(),outputStream);
    return;
  }
  S3PutObjectInlineRequest engineRequest=new S3PutObjectInlineRequest();
  engineRequest.setBucketName(bucket);
  engineRequest.setKey(key);
  engineRequest.setMetaEntries(meta);
  engineRequest.setCannedAccess(cannedAccess);
  S3PutObjectInlineResponse engineResponse=ServiceProvider.getInstance().getS3Engine().concatentateMultipartUploads(response,engineRequest,parts,outputStream);
  int result=engineResponse.getResultCode();
  if (200 == result)   ServiceProvider.getInstance().getS3Engine().freeUploadParts(bucket,uploadId,false);
  if (200 == result) {
    StringBuffer xml=new StringBuffer();
    xml.append("<CompleteMultipartUploadResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">");
    xml.append("<Location>").append("http://" + bucket + ".s3.amazonaws.com/"+ key).append("</Location>");
    xml.append("<Bucket>").append(bucket).append("</Bucket>");
    xml.append("<Key>").append(key).append("</Key>");
    xml.append("<ETag>\"").append(engineResponse.getETag()).append("\"</ETag>");
    xml.append("</CompleteMultipartUploadResult>");
    String xmlString=xml.toString().replaceAll("^\\s+","");
    outputStream.write(xmlString.getBytes());
    outputStream.close();
  }
 else   returnErrorXML(result,null,outputStream);
}
