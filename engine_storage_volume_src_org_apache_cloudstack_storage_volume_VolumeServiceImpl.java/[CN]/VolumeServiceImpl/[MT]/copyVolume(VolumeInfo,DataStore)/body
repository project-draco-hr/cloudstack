{
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  VolumeApiResult res=new VolumeApiResult(srcVolume);
  try {
    if (!this.snapshotMgr.canOperateOnVolume(srcVolume)) {
      s_logger.debug("There are snapshots creating on this volume, can not move this volume");
      res.setResult("There are snapshots creating on this volume, can not move this volume");
      future.complete(res);
      return future;
    }
    VolumeVO destVol=duplicateVolumeOnAnotherStorage(srcVolume,(StoragePool)destStore);
    VolumeInfo destVolume=this.volFactory.getVolume(destVol.getId(),destStore);
    destVolume.processEvent(Event.CreateOnlyRequested);
    srcVolume.processEvent(Event.CopyingRequested);
    CopyVolumeContext<VolumeApiResult> context=new CopyVolumeContext<VolumeApiResult>(null,future,srcVolume,destVolume,destStore);
    AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().copyVolumeCallBack(null,null)).setContext(context);
    this.motionSrv.copyAsync(srcVolume,destVolume,caller);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to copy volume",e);
    res.setResult(e.toString());
    future.complete(res);
  }
  return future;
}
