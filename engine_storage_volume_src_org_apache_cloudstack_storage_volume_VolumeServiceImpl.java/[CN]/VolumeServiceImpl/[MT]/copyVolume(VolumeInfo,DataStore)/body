{
  if (srcVolume.getState() == Volume.State.Uploaded) {
    return copyVolumeFromImageToPrimary(srcVolume,destStore);
  }
  if (destStore.getRole() == DataStoreRole.Image) {
    return copyVolumeFromPrimaryToImage(srcVolume,destStore);
  }
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  VolumeApiResult res=new VolumeApiResult(srcVolume);
  try {
    if (!snapshotMgr.canOperateOnVolume(srcVolume)) {
      s_logger.debug("There are snapshots creating on this volume, can not move this volume");
      res.setResult("There are snapshots creating on this volume, can not move this volume");
      future.complete(res);
      return future;
    }
    VolumeVO destVol=duplicateVolumeOnAnotherStorage(srcVolume,(StoragePool)destStore);
    VolumeInfo destVolume=volFactory.getVolume(destVol.getId(),destStore);
    destVolume.processEvent(Event.MigrationCopyRequested);
    srcVolume.processEvent(Event.MigrationRequested);
    CopyVolumeContext<VolumeApiResult> context=new CopyVolumeContext<VolumeApiResult>(null,future,srcVolume,destVolume,destStore);
    AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().copyVolumeCallBack(null,null)).setContext(context);
    motionSrv.copyAsync(srcVolume,destVolume,caller);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to copy volume" + e);
    res.setResult(e.toString());
    future.complete(res);
  }
  return future;
}
