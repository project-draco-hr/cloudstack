{
  DataObject vo=context.vo;
  DataObject tmplOnPrimary=context.templateOnStore;
  CopyCommandResult result=callback.getResult();
  VolumeApiResult volResult=new VolumeApiResult((VolumeObject)vo);
  if (result.isSuccess()) {
    vo.processEvent(Event.OperationSuccessed,result.getAnswer());
  }
 else {
    vo.processEvent(Event.OperationFailed);
    volResult.setResult(result.getResult());
    Answer ans=result.getAnswer();
    if (ans != null && ans instanceof CopyCmdAnswer && ans.getDetails().contains("request template reload")) {
      if (tmplOnPrimary != null) {
        s_logger.info("Reset template_spool_ref entry so that vmware template can be reloaded in next try");
        VMTemplateStoragePoolVO templatePoolRef=_tmpltPoolDao.findByPoolTemplate(tmplOnPrimary.getDataStore().getId(),tmplOnPrimary.getId());
        if (templatePoolRef != null) {
          long templatePoolRefId=templatePoolRef.getId();
          templatePoolRef=_tmpltPoolDao.acquireInLockTable(templatePoolRefId,1200);
          try {
            if (templatePoolRef == null) {
              s_logger.warn("Reset Template State On Pool failed - unable to lock TemplatePoolRef " + templatePoolRefId);
            }
 else {
              templatePoolRef.setTemplateSize(0);
              templatePoolRef.setDownloadState(VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED);
              templatePoolRef.setState(ObjectInDataStoreStateMachine.State.Allocated);
              _tmpltPoolDao.update(templatePoolRefId,templatePoolRef);
            }
          }
  finally {
            _tmpltPoolDao.releaseFromLockTable(templatePoolRefId);
          }
        }
      }
    }
  }
  AsyncCallFuture<VolumeApiResult> future=context.getFuture();
  future.complete(volResult);
  return null;
}
