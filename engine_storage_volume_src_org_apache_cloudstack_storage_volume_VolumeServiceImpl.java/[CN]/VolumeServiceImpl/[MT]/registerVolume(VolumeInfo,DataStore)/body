{
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  DataObject volumeOnStore=store.create(volume);
  volumeOnStore.processEvent(Event.CreateOnlyRequested);
  try {
    CreateVolumeContext<VolumeApiResult> context=new CreateVolumeContext<VolumeApiResult>(null,volumeOnStore,future);
    AsyncCallbackDispatcher<VolumeServiceImpl,CreateCmdResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().registerVolumeCallback(null,null));
    caller.setContext(context);
    store.getDriver().createAsync(store,volumeOnStore,caller);
  }
 catch (  CloudRuntimeException ex) {
    VolumeDataStoreVO volStoreVO=_volumeStoreDao.findByStoreVolume(store.getId(),volume.getId());
    if (volStoreVO != null) {
      VolumeInfo volObj=volFactory.getVolume(volume,store);
      volObj.processEvent(ObjectInDataStoreStateMachine.Event.OperationFailed);
    }
    VolumeApiResult res=new VolumeApiResult((VolumeObject)volumeOnStore);
    res.setResult(ex.getMessage());
    future.complete(res);
  }
  return future;
}
