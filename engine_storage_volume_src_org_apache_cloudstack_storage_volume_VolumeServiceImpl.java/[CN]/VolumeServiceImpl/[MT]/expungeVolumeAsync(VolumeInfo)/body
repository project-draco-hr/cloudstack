{
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  VolumeApiResult result=new VolumeApiResult(volume);
  if (volume.getDataStore() == null) {
    s_logger.info("Expunge volume with no data store specified");
    if (canVolumeBeRemoved(volume.getId())) {
      s_logger.info("Volume " + volume.getId() + " is not referred anywhere, remove it from volumes table");
      volDao.remove(volume.getId());
    }
    future.complete(result);
    return future;
  }
  VolumeDataStoreVO volumeStore=_volumeStoreDao.findByVolume(volume.getId());
  if (volumeStore != null) {
    if (volumeStore.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS) {
      s_logger.debug("Volume: " + volume.getName() + " is currently being uploaded; cant' delete it.");
      future.complete(result);
      return future;
    }
  }
  VolumeVO vol=volDao.findById(volume.getId());
  String volumePath=vol.getPath();
  Long poolId=vol.getPoolId();
  if (poolId == null || volumePath == null || volumePath.trim().isEmpty()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Marking volume that was never created as destroyed: " + vol);
    }
    volDao.remove(vol.getId());
    future.complete(result);
    return future;
  }
  VolumeObject vo=(VolumeObject)volume;
  if (volume.getDataStore().getRole() == DataStoreRole.Image) {
    volume.processEvent(Event.DestroyRequested);
  }
 else   if (volume.getDataStore().getRole() == DataStoreRole.Primary) {
    volume.processEvent(Event.ExpungeRequested);
  }
  DeleteVolumeContext<VolumeApiResult> context=new DeleteVolumeContext<VolumeApiResult>(null,vo,future);
  AsyncCallbackDispatcher<VolumeServiceImpl,CommandResult> caller=AsyncCallbackDispatcher.create(this);
  caller.setCallback(caller.getTarget().deleteVolumeCallback(null,null)).setContext(context);
  volume.getDataStore().getDriver().deleteAsync(volume.getDataStore(),volume,caller);
  return future;
}
