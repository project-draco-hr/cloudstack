{
  if (store == null) {
    s_logger.warn("Huh? image store is null");
    return;
  }
  long storeId=store.getId();
  String lockString="volumesync.storeId:" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listUploadedVolumesByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=volDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn("Volume_store_ref shows that volume " + volumeStore.getVolumeId() + " is on image store "+ storeId+ ", but the volume is not found in volumes table, potentially some bugs in deleteVolume, so we just treat this volume to be deleted and mark it as destroyed");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info("Volume Sync found " + volume.getUuid() + " already in the volume image store table");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString("");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg="Volume " + volume.getUuid() + " is corrupted on image store ";
              volumeStore.setErrorString(msg);
              s_logger.info(msg);
              if (volumeStore.getDownloadUrl() == null) {
                msg="Volume (" + volume.getUuid() + ") with install path "+ volInfo.getInstallPath()+ "is corrupted, please check in image store: "+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info("Removing volume_store_ref entry for corrupted volume " + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                volDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info("Volume Sync did not find " + volume.getName() + " ready on image store "+ storeId+ ", will request download to start/resume shortly");
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info("Skip downloading volume " + volumeHost.getVolumeId() + " since no download url is specified.");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info("Skip sync volume for migration of previous NFS to object store");
                continue;
              }
            }
            s_logger.debug("Volume " + volumeHost.getVolumeId() + " needs to be downloaded to "+ store.getName());
            VolumeObject vol=(VolumeObject)volFactory.getVolume(volumeHost.getVolumeId());
            vol.processEvent(Event.OperationFailed);
            _volumeStoreDao.remove(volumeHost.getId());
            vol=(VolumeObject)volFactory.getVolume(volumeHost.getVolumeId());
            RegisterVolumePayload payload=new RegisterVolumePayload(volumeHost.getDownloadUrl(),volumeHost.getChecksum(),vol.getFormat().toString());
            vol.addPayload(payload);
            createVolumeAsync(vol,store);
          }
        }
        for (        Map.Entry<Long,TemplateProp> entry : volumeInfos.entrySet()) {
          Long uniqueName=entry.getKey();
          TemplateProp tInfo=entry.getValue();
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg="No remote endpoint to send command, check if host or ssvm is down?";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info("Failed to deleted volume at store: " + store.getName());
          }
 else {
            String description="Deleted volume " + tInfo.getTemplateName() + " on secondary storage "+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info("Couldn't get global lock on " + lockString + ", another thread may be doing volume sync on data store "+ storeId+ " now.");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}
