@attr(tags=['advanced'], required_hardware='true')
def test_19_create_list_reset_delete_vpnconnections(self):
    '\n        @Desc: Test to List Create Reset and Delete VPN Customer\n               Gateways pagination\n        @steps:\n        Step1: Create VPC\n        Step2: Create VPN gateway\n        Step3: Create VPN Customer Gateway\n        Step4: Listing all the VPN Connections for a user\n        Step5: Verifying No VPN Connection are listed\n        Step6: Create a VPN Connection using VPN Gateway and\n               VPN Customer Gateway\n        Step7: Listing all the VPN Connections by vpcid for a user\n        Step8: Verifying that list size is 1\n        Step9: Reset the vpn connection\n        Step10:List the Vpn connection by vpcid\n        Step11: Verify the details of VPN Connection after reset\n        Step12: Deleting the VPN Connection\n        Step13: Listing all the VPN Connection for a user\n        Step14: Verifying that no VPN Connection are listed\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, 'Vpc listed for newly created user')
    vpc_created = VPC.create(self.userapiclient, self.test_data['vpc'], self.vpc_offering.id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    self.cleanup.append(vpc_created)
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    list_vpngateway_before = Vpn.listVpnGateway(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_vpngateway_before, 'Vpn gateway listed for newly created user')
    vpngateway_created = Vpn.createVpnGateway(self.userapiclient, vpcid=vpc_created.id)
    self.assertIsNotNone(vpngateway_created, 'VPN Gateway creation failed')
    list_vpngateway_after = Vpn.listVpnGateway(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_vpngateway_after)
    self.assertEquals(PASS, status[0], 'List VPN Gateway not equal as expected')
    self.assertEquals(1, len(list_vpngateway_after), 'Failed to list vpn gateway')
    list_vpncustomergateways_before = VpnCustomerGateway.list(self.userapiclient, listall=self.test_data['listall'])
    self.assertIsNone(list_vpncustomergateways_before, 'VPN Customer Gateways listed for newly created User')
    vpncustomergateway_created = VpnCustomerGateway.create(self.userapiclient, self.test_data['vpncustomergateway'], name='VPNCustGateway', gateway='10.102.153.1', cidrlist='10.0.0.0/24', account=self.account.name, domainid=self.domain.id)
    self.assertIsNotNone(vpncustomergateway_created, 'VPN Customer Gateway creation failed')
    self.cleanup.append(vpncustomergateway_created)
    list_vpncustomergateways_after = VpnCustomerGateway.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(list_vpncustomergateways_after)
    self.assertEquals(PASS, status[0], 'VPN Customer Gateway list failed')
    self.assertEquals(1, len(list_vpncustomergateways_after), 'Failed to list VPN Customer Gateways')
    list_vpn_connection_before = Vpn.listVpnConnection(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_vpn_connection_before, 'Vpn connection listed for newly created user')
    vpnconnections_created = Vpn.createVpnConnection(self.userapiclient, s2scustomergatewayid=vpncustomergateway_created.id, s2svpngatewayid=vpngateway_created['id'])
    self.assertIsNotNone(vpnconnections_created, 'VPN Connection creation failed')
    list_vpn_connection_after = Vpn.listVpnConnection(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_vpn_connection_after)
    self.assertEquals(PASS, status[0], 'list VPN Connection not as expected')
    self.assertEquals(1, len(list_vpn_connection_after), 'list VPC Connection equal as expected')
    Vpn.resetVpnConnection(self.userapiclient, id=list_vpn_connection_after[0].id)
    list_vpn_connection_after_reset = Vpn.listVpnConnection(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_vpn_connection_after_reset)
    self.assertEquals(PASS, status[0], 'list VPN Connection not as expected')
    self.assertEquals(1, len(list_vpn_connection_after_reset), 'list VPN Connection not equal as expected')
    expected_dict = {'account': list_vpn_connection_after[0].account, 'cidrlist': list_vpn_connection_after[0].cidrlist, 'domain': list_vpn_connection_after[0].domain, 'dpd': list_vpn_connection_after[0].dpd, 'gateway': list_vpn_connection_after[0].gateway, 'id': list_vpn_connection_after[0].id, 'passive': list_vpn_connection_after[0].passive, 'publicip': list_vpn_connection_after[0].publicip, 's2scustomergatewayid': list_vpn_connection_after[0].s2scustomergatewayid, 's2svpngatewayid': list_vpn_connection_after[0].s2svpngatewayid, }
    actual_dict = {'account': list_vpn_connection_after_reset[0].account, 'cidrlist': list_vpn_connection_after_reset[0].cidrlist, 'domain': list_vpn_connection_after_reset[0].domain, 'dpd': list_vpn_connection_after_reset[0].dpd, 'gateway': list_vpn_connection_after_reset[0].gateway, 'id': list_vpn_connection_after_reset[0].id, 'passive': list_vpn_connection_after_reset[0].passive, 'publicip': list_vpn_connection_after_reset[0].publicip, 's2scustomergatewayid': list_vpn_connection_after_reset[0].s2scustomergatewayid, 's2svpngatewayid': list_vpn_connection_after_reset[0].s2svpngatewayid, }
    list_vpn_connection_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_vpn_connection_status, 'Listed VPN Connection details are not as expected')
    Vpn.deleteVpnConnection(self.userapiclient, id=list_vpn_connection_after[0].id)
    list_vpn_connection_after_delete = Vpn.listVpnConnection(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_vpn_connection_after_delete, 'Vpn connection listed for newly created user')
    return
