@attr(tags=['advanced'], required_hardware='true')
def test_17_restart_vpc(self):
    '\n        @summary: Test to restart VPC\n        @Steps\n        Step1: Listing the VPC  before creating a VPC for a user\n        Step2: Verifying No VPCs are listed\n        Step3: Creating a VPC\n        Step4: Listing the VPC  after creating a VPC for a user\n        Step5: Verifying the list VPC size is increased by 1\n        Step6: Restarting the VPC\n        Step7: Verifying the Restart function return true\n        Step8: Listing the VPC by specifying VPCID\n        Step9: Verfying state of vpc\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, 'Vpc listed for newly created user')
    vpc_created = VPC.create(self.userapiclient, self.test_data['vpc'], self.vpc_offering.id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    self.cleanup.append(vpc_created)
    vpc_restarted = VPC.restart(vpc_created, self.userapiclient)
    self.assertTrue(vpc_restarted, 'Restart fails')
    list_vpc_byid = VPC.list(self.userapiclient, id=vpc_created.id, listall=self.test_data['listall'])
    status = validateList(list_vpc_byid)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_byid), 'list VPC not equal as expected')
    self.assertEqual('Enabled', list_vpc_byid[0].state, 'Restarted VPC is not in Enabled state')
    return
