@attr(tags=['advanced'], required_hardware='true')
def test_16_create_list_delete_egressfirewallrule_bynetworkid(self):
    '\n        @summary: Test Create List Delete Egress Firewall Rule by Network ID\n        @Steps\n        Step1: Creating a Nerwork\n        Step2: Listing all the egressfirewall rule before creating a egressfirewall rule\n        Step3: Verifying no egressfirewall rule are listed\n        Step4: Creating a egressfirewall rule for a user\n        Step5: Listing the egressfirewall rule by specifying Network ID\n        Step7: Verifying the list egressfirewall rule size is 1\n        Step8: Verifying the details of the egressfirewall rule\n        Step9: Deleting the egressfirewall rule by network id\n        Step10: Verifying no egressfirewall rule is listed\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    self.assertIsNone(list_networks_before, 'Networks listed for newly created User')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat', zoneid=self.zone.id)
    self.assertIsNotNone(network_offerings_list, 'Isolated Network Offerings with sourceNat enabled are not found')
    network = Network.create(self.userapiclient, self.test_data['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    list_networks_after = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    status = validateList(list_networks_after)
    self.assertEquals(PASS, status[0], 'Network Creation Failed')
    self.assertEquals(1, len(list_networks_after), 'Network Creation Failed')
    list_egressfirewallrule_before = EgressFireWallRule.list(self.userapiclient, listall=self.test_data['listall'], networkid=network.id)
    self.assertIsNone(list_egressfirewallrule_before, 'Listed egressfirewall rule for a user')
    egressfirewallrule_created = EgressFireWallRule.create(self.userapiclient, networkid=network.id, protocol=self.test_data['ingress_rule']['protocol'], cidrlist=self.test_data['ingress_rule']['cidrlist'], startport=self.test_data['ingress_rule']['startport'], endport=self.test_data['ingress_rule']['endport'])
    self.assertIsNotNone(egressfirewallrule_created, 'EgressFirewall Rule Creation Failed')
    list_egressfirewallrule_bynetworkid = EgressFireWallRule.list(self.userapiclient, listall=self.test_data['listall'], networkid=network.id)
    status = validateList(list_egressfirewallrule_bynetworkid)
    self.assertEquals(PASS, status[0], 'list EgressFirewall Rule not as expected')
    self.assertEquals(1, len(list_egressfirewallrule_bynetworkid), 'list EgressFirewall Rule not equal as expected')
    expected_dict = {'cidrlist': self.test_data['ingress_rule']['cidrlist'], 'id': egressfirewallrule_created.id, 'networkid': egressfirewallrule_created.networkid, 'protocol': self.test_data['ingress_rule']['protocol'], }
    actual_dict = {'cidrlist': str(list_egressfirewallrule_bynetworkid[0].cidrlist), 'id': list_egressfirewallrule_bynetworkid[0].id, 'networkid': list_egressfirewallrule_bynetworkid[0].networkid, 'protocol': str(list_egressfirewallrule_bynetworkid[0].protocol).upper(), }
    list_egressfirewallrule_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_egressfirewallrule_status, 'Listed EgressFirewall Rule details are not as expected')
    egressfirewallrule_created.delete(self.userapiclient)
    list_deleted_egressfirewallrule_bynetworkid = EgressFireWallRule.list(self.userapiclient, listall=self.test_data['listall'], networkid=network.id)
    self.assertIsNone(list_deleted_egressfirewallrule_bynetworkid, 'EgressFirewall Rule deletion fails')
    return
