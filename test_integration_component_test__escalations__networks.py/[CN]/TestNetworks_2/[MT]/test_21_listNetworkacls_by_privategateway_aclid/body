@attr(tags=['advanced'], required_hardware='true')
def test_21_listNetworkacls_by_privategateway_aclid(self):
    "\n        @summary: Test to list Networkacllists by private gateway aclid\n        @Steps\n        Step1: Listing the Network acl's for a user\n        Step2: Verifying list is not none\n        Step3: Creating a VPC\n        Step4: Listing the privategateway for user\n        Step5: Verifying the no private gateway are listed for a user\n        Step6: Creating a private gateway using aclid\n        Step7: Listing private gateway for a user\n        Step8: Verifying list size is increased by 1\n        Step9: Listing Networkacllist by paymentgateway aclid\n        "
    list_networkacl = NetworkACLList.list(self.userapiclient)
    self.assertIsNotNone(list_networkacl, 'Failed to list network acl list')
    status = validateList(list_networkacl)
    self.assertEquals(PASS, status[0], 'Failed to list network acl list')
    list_vpc_offering = VpcOffering.list(self.userapiclient)
    status = validateList(list_vpc_offering)
    self.assertEquals(PASS, status[0], 'list vpc offering is none')
    vpc_created = VPC.create(self.userapiclient, self.test_data['vpc'], list_vpc_offering[0].id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    self.cleanup.append(vpc_created)
    list_private_gateways_before = PrivateGateway.list(self.apiClient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_private_gateways_before, 'Listed private gateways for newly created VPC ')
    private_gateway_created = PrivateGateway.create(self.apiClient, vpcid=vpc_created.id, gateway=self.test_data['private_gateway']['gateway'], ipaddress=self.test_data['private_gateway']['ipaddress'], netmask=self.test_data['private_gateway']['netmask'], vlan=self.test_data['private_gateway']['vlan'], aclid=list_networkacl[0].id)
    self.assertIsNotNone(private_gateway_created, 'Private Gateway Creation Failed')
    list_private_gateways_after = PrivateGateway.list(self.apiClient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_private_gateways_after)
    self.assertEquals(PASS, status[0], 'Failed to list Private Gateway')
    self.assertEquals(1, len(list_private_gateways_after), 'list Private Gateway not equal as expected')
    list = NetworkACLList.list(self.userapiclient, listall=self.test_data['listall'], id=private_gateway_created.aclid)
    expected_dict = {'description': list_networkacl[0].description, 'id': list_networkacl[0].id, 'name': list_networkacl[0].name, }
    actual_dict = {'description': list[0].description, 'id': list[0].id, 'name': list[0].name, }
    list_networkacl_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_networkacl_status, 'Listed Network acl list details are not as expected')
    return
