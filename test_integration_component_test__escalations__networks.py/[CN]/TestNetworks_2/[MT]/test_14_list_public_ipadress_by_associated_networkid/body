@attr(tags=['advanced'], required_hardware='true')
def test_14_list_public_ipadress_by_associated_networkid(self):
    '\n        @summary: Test List Public IPAddress with associatednetworkid\n        @Steps\n        Step1: Listing all the public ipadresses for a user before creating a public ipaddress\n        Step2: Verifying no Public ipaddress are listed\n        Step3: Creating a network\n        Step4: Associating public ipaddress for network created in step3\n        Step5: Listing the public ipaddress for a user after creating a public ipaddress\n        Step6: Verifying the list public ipaddress size is increased by 1\n        Step7: Listing the public ipaddress by specifying associatednetworkid\n        Step8: Verifying the list public ipaddress size is 1\n        Step9: Verifying the details of the public ipaddress\n        '
    list_public_ipadress_before = PublicIPAddress.list(self.userapiclient)
    self.assertIsNone(list_public_ipadress_before, 'Public ipaddresses listed for newly created user')
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedServices='SourceNat', zoneid=self.zone.id)
    self.assertIsNotNone(network_offerings_list, 'Isolated Network Offerings with sourceNat enabled are not found')
    network = Network.create(self.userapiclient, self.test_data['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    self.cleanup.append(network)
    public_ipaddress_created = PublicIPAddress.create(self.userapiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.domain.id, networkid=network.id)
    self.assertIsNotNone(public_ipaddress_created, 'Failed to Associate Public IpAddress for Network')
    list_public_ipaddress_after = PublicIPAddress.list(self.userapiclient)
    status = validateList(list_public_ipaddress_after)
    self.assertEquals(PASS, status[0], 'list Public IPAddress not as expected')
    self.assertEquals(1, len(list_public_ipaddress_after), 'list Public IPAddress not equal as expected')
    list_public_ipaddress_byid = PublicIPAddress.list(self.userapiclient, associatednetworkid=network.id, listall=self.test_data['listall'])
    status = validateList(list_public_ipaddress_byid)
    self.assertEquals(PASS, status[0], 'list public ipaddress not as expected')
    self.assertEquals(1, len(list_public_ipaddress_byid), 'list public ipaddress not equal as expected')
    expected_dict = {'account': public_ipaddress_created.ipaddress.account, 'associatednetworkid': public_ipaddress_created.ipaddress.associatednetworkid, 'associatednetworkname': public_ipaddress_created.ipaddress.associatednetworkname, 'domainid': public_ipaddress_created.ipaddress.domainid, 'forvirtualnetwork': public_ipaddress_created.ipaddress.forvirtualnetwork, 'id': public_ipaddress_created.ipaddress.id, 'ipaddress': public_ipaddress_created.ipaddress.ipaddress, 'isportable': public_ipaddress_created.ipaddress.isportable, 'issourcenat': public_ipaddress_created.ipaddress.issourcenat, 'isstatisnat': public_ipaddress_created.ipaddress.isstaticnat, 'issystem': public_ipaddress_created.ipaddress.issystem, 'networkid': public_ipaddress_created.ipaddress.network, 'physicalnetworkid': public_ipaddress_created.ipaddress.physicalnetworkid, 'zoneid': public_ipaddress_created.ipaddress.zoneid, }
    actual_dict = {'account': list_public_ipaddress_byid[0].account, 'associatednetworkid': list_public_ipaddress_byid[0].associatednetworkid, 'associatednetworkname': list_public_ipaddress_byid[0].associatednetworkname, 'domainid': list_public_ipaddress_byid[0].domainid, 'forvirtualnetwork': list_public_ipaddress_byid[0].forvirtualnetwork, 'id': list_public_ipaddress_byid[0].id, 'ipaddress': list_public_ipaddress_byid[0].ipaddress, 'isportable': list_public_ipaddress_byid[0].isportable, 'issourcenat': list_public_ipaddress_byid[0].issourcenat, 'isstatisnat': list_public_ipaddress_byid[0].isstaticnat, 'issystem': list_public_ipaddress_byid[0].issystem, 'networkid': list_public_ipaddress_byid[0].network, 'physicalnetworkid': list_public_ipaddress_byid[0].physicalnetworkid, 'zoneid': list_public_ipaddress_byid[0].zoneid, }
    list_public_ipaddress_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_public_ipaddress_status, 'Listed Public IPAddress details are not as expected')
    return
