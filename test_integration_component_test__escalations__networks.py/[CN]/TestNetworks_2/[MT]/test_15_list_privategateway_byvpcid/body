@attr(tags=['advanced'], required_hardware='true')
def test_15_list_privategateway_byvpcid(self):
    '\n        @summary: Test List PrivateGateway by vpcid\n        @Steps\n        Step1: Creating a VPC\n        Step2: Listing all the private gateway before creating a private gateway \n        Step3: Verifying no Private Gateway are listed\n        Step4: Listing the Private Gateway  after creating a Private Gateway\n        Step5: Verifying the list Private Gateway size is increased by 1\n        Step6: Listing the Private Gateway by specifying VPCID\n        Step7: Verifying the list Private Gateway size is 1\n        Step8: Verifying the details of the Private Gateway\n        '
    list_vpc_offering = VpcOffering.list(self.userapiclient)
    status = validateList(list_vpc_offering)
    self.assertEquals(PASS, status[0], 'list vpc offering is none')
    vpc_created = VPC.create(self.userapiclient, self.test_data['vpc'], list_vpc_offering[0].id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    self.cleanup.append(vpc_created)
    list_private_gateways_before = PrivateGateway.list(self.apiClient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_private_gateways_before, 'Listed private gateways for newly created VPC ')
    private_gateway_created = PrivateGateway.create(self.apiClient, vpcid=vpc_created.id, gateway=self.test_data['private_gateway']['gateway'], ipaddress=self.test_data['private_gateway']['ipaddress'], netmask=self.test_data['private_gateway']['netmask'], vlan=self.test_data['private_gateway']['vlan'])
    self.assertIsNotNone(private_gateway_created, 'Private Gateway Creation Failed')
    list_private_gateways_after = PrivateGateway.list(self.apiClient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_private_gateways_after)
    self.assertEquals(PASS, status[0], 'Private Gateway Creation Failed')
    self.assertEquals(1, len(list_private_gateways_after), 'list Private Gateway not equal as expected')
    list_privategateway_byvpcid = PrivateGateway.list(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_privategateway_byvpcid)
    self.assertEquals(PASS, status[0], 'list private gateway not as expected')
    self.assertEquals(1, len(list_privategateway_byvpcid), 'list private gateway not equal as expected')
    expected_dict = {'account': private_gateway_created.account, 'aclid': private_gateway_created.aclid, 'domainid': private_gateway_created.domainid, 'gateway': self.test_data['private_gateway']['gateway'], 'id': private_gateway_created.id, 'ipaddress': self.test_data['private_gateway']['ipaddress'], 'netmask': self.test_data['private_gateway']['netmask'], 'sourcenatsupported': private_gateway_created.sourcenatsupported, 'vlan': self.test_data['private_gateway']['vlan'], 'vpcid': private_gateway_created.vpcid, 'zoneid': private_gateway_created.zoneid, }
    actual_dict = {'account': list_privategateway_byvpcid[0].account, 'aclid': list_privategateway_byvpcid[0].aclid, 'domainid': list_privategateway_byvpcid[0].domainid, 'gateway': list_privategateway_byvpcid[0].gateway, 'id': list_privategateway_byvpcid[0].id, 'ipaddress': list_privategateway_byvpcid[0].ipaddress, 'netmask': list_privategateway_byvpcid[0].netmask, 'sourcenatsupported': list_privategateway_byvpcid[0].sourcenatsupported, 'vlan': list_privategateway_byvpcid[0].vlan, 'vpcid': list_privategateway_byvpcid[0].vpcid, 'zoneid': list_privategateway_byvpcid[0].zoneid, }
    list_private_gateway_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_private_gateway_status, 'Listed Private Gateway details are not as expected')
    return
