@attr(tags=['advanced', 'provisioning'])
def test_18_create_list_vpn_gateway(self):
    '\n        @Desc: Test to Create and list Vpn Gateway by VPCid\n        @steps:\n        Step1: Create VPC\n        Step2: Listing VPN gateways for user before creating any VPN gateway\n        Step3: Verifying No VPN Gateways are listed\n        Step4: Creating a VPN Gateway using the vpc\n        Step5: Listing VPN gateway for user by vpcid\n        Step6: Verifying the list size is increased by 1\n        Step7: Verifying the details of a VPN gateway\n         '
    list_vpc_before = VPC.list(self.userapiclient)
    self.assertIsNone(list_vpc_before, 'Vpc listed for newly created user')
    list_vpc_offering = VpcOffering.list(self.userapiclient)
    status = validateList(list_vpc_offering)
    self.assertEquals(PASS, status[0], 'list vpc offering is none')
    vpc_created = VPC.create(self.userapiclient, self.test_data['vpc'], list_vpc_offering[0].id, self.zone.id)
    self.assertIsNotNone(vpc_created, 'VPC Creation Failed')
    self.cleanup.append(vpc_created)
    list_vpc_after = VPC.list(self.userapiclient)
    status = validateList(list_vpc_after)
    self.assertEquals(PASS, status[0], 'list VPC not as expected')
    self.assertEquals(1, len(list_vpc_after), 'list VPC not equal as expected')
    list_vpngateway_before = Vpn.listVpnGateway(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    self.assertIsNone(list_vpngateway_before, 'Vpn gateway listed for newly created user')
    vpngateway_created = Vpn.createVpnGateway(self.userapiclient, vpcid=vpc_created.id)
    self.assertIsNotNone(vpngateway_created, 'VPN Gateway creation failed')
    list_vpngateway_after = Vpn.listVpnGateway(self.userapiclient, listall=self.test_data['listall'], vpcid=vpc_created.id)
    status = validateList(list_vpngateway_after)
    self.assertEquals(PASS, status[0], 'List VPN Gateway not equal as expected')
    self.assertEquals(1, len(list_vpngateway_after), 'Failed to list vpn gateway')
    expected_dict = {'account': vpngateway_created['account'], 'domainid': vpngateway_created['domainid'], 'id': vpngateway_created['id'], 'publicip': vpngateway_created['publicip'], 'vpcid': vpngateway_created['vpcid'], }
    actual_dict = {'account': list_vpngateway_after[0].account, 'domainid': list_vpngateway_after[0].domainid, 'id': list_vpngateway_after[0].id, 'publicip': list_vpngateway_after[0].publicip, 'vpcid': list_vpngateway_after[0].vpcid, }
    list_vpn_gateway_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_vpn_gateway_status, 'Listed VPN Gateway details are not as expected')
    return
