@attr(tags=['advanced'], required_hardware='true')
def test_04_create_vpc_with_networkdomain(self):
    '\n        @Desc: Test create vpc with network domain as parameter\n        @Steps\n        Step1    : List VPC Offering\n        Step2    : List VPCs for newly created user\n        Step3    : Create VPC\n        Step4    : List VPC and verify that count is increased by 1\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    vpc_offs_list = VpcOffering.list(self.userapiclient, isdefault='true')
    if (vpc_offs_list is None):
        self.fail('Default VPC offerings not found')
    else:
        vpc_offs = vpc_offs_list[0]
    vpc_list = VPC.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(vpc_list)
    self.assertEquals(FAIL, status[0], 'VPCs found for newly created user')
    vpc_count_before = 0
    vpc_1 = VPC.create(self.userapiclient, self.test_data['vpc_network_domain'], vpcofferingid=vpc_offs.id, zoneid=self.zone.id)
    self.assertIsNotNone(vpc_1, 'VPC is not created')
    self.cleanup.append(vpc_1)
    vpc_list = VPC.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(vpc_list)
    self.assertEquals(PASS, status[0], 'VPC is not created')
    self.assertEquals((vpc_count_before + 1), len(vpc_list), 'VPC is not created')
    return
