@attr(tags=['advanced'], required_hardware='true')
def test_11_update_vpc(self):
    '\n        @Desc: Test create vpc with network domain as parameter\n        @Steps\n        Step1    : List VPC Offering\n        Step2    : List VPCs for newly created user\n        Step3    : Create VPCs\n        Step4    : Verify count of VPCs created\n        Step5    : Update VPC name and display text\n        Step6    : Verify name and display text is updated\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    vpc_offs_list = VpcOffering.list(self.userapiclient, isdefault='true')
    if (vpc_offs_list is None):
        self.fail('Default VPC offerings not found')
    else:
        vpc_offs = vpc_offs_list[0]
    vpc_list = VPC.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(vpc_list)
    self.assertEquals(FAIL, status[0], 'VPCs found for newly created user')
    vpc_1 = VPC.create(self.userapiclient, self.test_data['vpc'], vpcofferingid=vpc_offs.id, zoneid=self.zone.id)
    self.assertIsNotNone(vpc_1, 'VPC is not created')
    self.cleanup.append(vpc_1)
    self.assertNotEquals((-1), vpc_1.name.find(self.test_data['vpc']['name']), 'VPC name not matched')
    self.assertEquals(self.zone.id, vpc_1.zoneid, 'Zone is not matching in the vpc created')
    vpc_count_after = VPC.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(vpc_count_after)
    self.assertEquals(PASS, status[0], 'VPC list count is null')
    self.assertEqual(1, len(vpc_count_after), 'Number of VPCs created is not matching expected')
    vpc_updated = VPC.update(vpc_1, self.userapiclient, name='NewVPCName', displaytext='NewVPCDisplayText')
    list_vpcs_after_update = VPC.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(list_vpcs_after_update)
    self.assertEquals(PASS, status[0], 'No vpcs found using list call')
    self.assertEqual(1, len(list_vpcs_after_update), 'Number of vpcs created is not matching expected')
    expected_dict = {'name': 'NewVPCName', 'displaytext': 'NewVPCDisplayText', }
    actual_dict = {'name': vpc_updated.name, 'displaytext': vpc_updated.displaytext, }
    vpc_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, vpc_status, 'Listed vpc details are not as expected')
    return
