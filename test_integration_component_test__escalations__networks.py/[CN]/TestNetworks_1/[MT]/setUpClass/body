@classmethod
def setUpClass(cls):
    try:
        cls._cleanup = []
        cls.testClient = super(TestNetworks_1, cls).getClsTestClient()
        cls.api_client = cls.testClient.getApiClient()
        cls.test_data = cls.testClient.getParsedTestDataConfig()
        cls.domain = get_domain(cls.api_client)
        cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
        cls.template = get_template(cls.api_client, cls.zone.id, cls.test_data['ostype'])
        if cls.zone.localstorageenabled:
            cls.storagetype = 'local'
            cls.test_data['service_offerings']['tiny']['storagetype'] = 'local'
        else:
            cls.storagetype = 'shared'
            cls.test_data['service_offerings']['tiny']['storagetype'] = 'shared'
        cls.test_data['mode'] = cls.zone.networktype
        cls.test_data['virtual_machine']['hypervisor'] = cls.testClient.getHypervisorInfo()
        cls.test_data['virtual_machine']['zoneid'] = cls.zone.id
        cls.test_data['virtual_machine']['template'] = cls.template.id
        cls.test_data['network_without_acl']['zoneid'] = cls.zone.id
        cls.network_offering = NetworkOffering.create(cls.api_client, cls.test_data['network_offering_vlan'])
        cls.network_offering.update(cls.api_client, state='Enabled')
        cls.test_data['network_without_acl']['networkoffering'] = cls.network_offering.id
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.test_data['service_offerings']['tiny'])
        cls.account = Account.create(cls.api_client, cls.test_data['account'], domainid=cls.domain.id)
        cls.user = cls.account.user[0]
        cls.userapiclient = cls.testClient.getUserApiClient(cls.user.username, cls.domain.name)
        cls.account_network = Network.create(cls.userapiclient, cls.test_data['network_without_acl'], cls.account.name, cls.account.domainid)
        cls._cleanup.append(cls.account_network)
        cls._cleanup.append(cls.account)
        cls._cleanup.append(cls.service_offering)
        cls._cleanup.append(cls.network_offering)
    except Exception as e:
        cls.tearDownClass()
        raise Exception(('Warning: Exception in setup : %s' % e))
    return
