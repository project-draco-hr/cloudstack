@attr(tags=['advanced', 'provisioning'])
def test_09_list_virtual_machines_single_network(self):
    '\n        @Desc: Test update network\n        @Steps\n        Step1    : Create Network\n        Step2    : Verify Network is created\n        Step3    : Create Virtual Machine as per page size\n        Step4    : Verify list Virtual machines and pagination\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.test_data['listall'])
    self.assertIsNotNone(list_networks_before, 'Network create failed at class level')
    list_instances_before = VirtualMachine.list(self.userapiclient, listall=self.test_data['listall'])
    self.assertIsNone(list_instances_before, 'Virtual Machine already exists for newly created user')
    for i in range(0, (self.test_data['pagesize'] + 1)):
        vm_created = VirtualMachine.create(self.userapiclient, self.test_data['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=list_networks_before[0].id, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'VM creation failed')
        if (i < self.test_data['pagesize']):
            self.cleanup.append(vm_created)
        self.assertEqual(self.test_data['virtual_machine']['displayname'], vm_created.displayname, 'Newly created VM name and the test data VM name are not matching')
    list_instances_after = VirtualMachine.list(self.userapiclient, listall=self.test_data['listall'], networkid=list_networks_before[0].id)
    status = validateList(list_instances_after)
    self.assertEquals(PASS, status[0], 'Listing of instances after creation failed')
    self.assertEqual(len(list_instances_after), (self.test_data['pagesize'] + 1), 'Number of instances created is not matching as expected')
    list_instances_page1 = VirtualMachine.list(self.userapiclient, listall=self.test_data['listall'], page=1, pagesize=self.test_data['pagesize'], networkid=list_networks_before[0].id)
    status = validateList(list_instances_page1)
    self.assertEquals(PASS, status[0], 'Listing of instances in page1 failed')
    self.assertEqual(self.test_data['pagesize'], len(list_instances_page1), 'List VM response is not matching with the page size length for page 1')
    list_instances_page2 = VirtualMachine.list(self.userapiclient, listall=self.test_data['listall'], page=2, pagesize=self.test_data['pagesize'], networkid=list_networks_before[0].id)
    status = validateList(list_instances_page2)
    self.assertEquals(PASS, status[0], 'Listing of instances in page2 failed')
    self.assertEqual(1, len(list_instances_page2), 'List VM response is not matching with the page size length for page 2')
    instance_page2 = list_instances_page2[0]
    VirtualMachine.delete(vm_created, self.userapiclient)
    list_instance_response = VirtualMachine.list(self.userapiclient, listall=self.test_data['listall'], page=2, pagesize=self.test_data['pagesize'], networkid=list_networks_before[0].id)
    self.assertEqual(list_instance_response, None, 'VM was not deleted')
    return
