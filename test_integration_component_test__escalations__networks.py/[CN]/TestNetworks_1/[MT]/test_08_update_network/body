@attr(tags=['advanced', 'provisioning'])
def test_08_update_network(self):
    '\n        @Desc: Test update network\n        @Steps\n        Step1    : Create Network\n        Step2    : Verify Network is created\n        Step3    : Update Network name, display text and network domain\n        Step4    : Verify network is updated\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    self.assertIsNotNone(list_networks_before, 'Network create failed at class level')
    self.assertEquals(1, len(list_networks_before), 'More than 1 network created at class level')
    network_offering_vpc_false_list = NetworkOffering.list(self.userapiclient, forvpc='false', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_false_list)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = false')
    network_created = Network.create(self.userapiclient, self.test_data['network_without_acl'], networkofferingid=network_offering_vpc_false_list[0].id)
    self.assertIsNotNone(network_created, 'Network is not created')
    self.cleanup.append(network_created)
    expected_dict = {'id': self.test_data['network_without_acl']['zoneid'], 'name': self.test_data['network_without_acl']['name'], }
    actual_dict = {'id': network_created.zoneid, 'name': network_created.name, }
    network_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, network_status, 'Listed network details are not as expected')
    list_networks_after = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    status = validateList(list_networks_after)
    self.assertEquals(PASS, status[0], 'No networks found using list call')
    self.assertEqual(2, len(list_networks_after), 'Number of networks created is not matching expected')
    network_updated = Network.update(network_created, self.userapiclient, name='NewNetworkName', displaytext='NewNetworkDisplayText', networkdomain='cs13cloud.internal.new')
    list_networks_after_update = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    status = validateList(list_networks_after_update)
    self.assertEquals(PASS, status[0], 'No networks found using list call')
    self.assertEqual(2, len(list_networks_after_update), 'Number of networks created is not matching expected')
    expected_dict = {'name': 'NewNetworkName', 'displaytext': 'NewNetworkDisplayText', 'networkdomain': 'cs13cloud.internal.new', }
    actual_dict = {'name': network_updated.name, 'displaytext': network_updated.displaytext, 'networkdomain': network_updated.networkdomain, }
    network_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, network_status, 'Listed network details are not as expected')
    return
