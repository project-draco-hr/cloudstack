@attr(tags=['advanced', 'provisioning'])
def test_01_list_networks_pagination(self):
    '\n        @Desc: Test List Networks pagination\n        @Steps\n        Step1    : Listing the networks for a user\n        Step2    : Verifying listed networks for account created at class level\n        Step3    : If number of networks is less than (pagesize  1), then creating them\n        Step4    : Listing the networks again\n        Step5    : Verifying for the length of the networks that it is (pagesize  1)\n        Step6    : Listing and verifying all the networks in page1\n        Step7    : Listing and verifying all the networks in page2\n        Step8    : Verifying that on page 2 only 1 network is present and the network on page 2 is not present in page1\n        '
    list_zones = Zone.list(self.userapiclient, id=self.zone.id)
    status = validateList(list_zones)
    self.assertEquals(PASS, status[0], 'No Zones found for a given id')
    self.test_data['network_without_acl']['zoneid'] = list_zones[0].id
    list_networks_before = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    if (list_networks_before is None):
        self.assertEqual(len(list_networks_before), 0, 'Network create failed at class level')
    elif (len(list_networks_before) == 1):
        for i in range(0, self.test_data['pagesize']):
            network_created = Network.create(self.userapiclient, self.test_data['network_without_acl'])
            self.cleanup.append(network_created)
            self.assertIsNotNone(network_created, 'Network is not created')
            expected_dict = {'id': list_zones[0].id, 'name': self.test_data['network_without_acl']['name'], }
            actual_dict = {'id': network_created.zoneid, 'name': network_created.name, }
            network_status = self.__verify_values(expected_dict, actual_dict)
            self.assertEqual(True, network_status, 'Listed network details are not as expected')
    else:
        self.assertEqual(len(list_networks_before), 1, 'more than 1 network created at class level')
    list_networks_after = Network.list(self.userapiclient, listall=self.test_data['listall'], type='Isolated')
    status = validateList(list_networks_after)
    self.assertEquals(PASS, status[0], 'No networks found using list call')
    self.assertEqual(len(list_networks_after), (self.test_data['pagesize'] + 1), 'Number of networks created is not matching expected')
    list_networks_page1 = Network.list(self.userapiclient, listall=self.test_data['listall'], page=1, pagesize=self.test_data['pagesize'], type='Isolated')
    status = validateList(list_networks_page1)
    self.assertEquals(PASS, status[0], 'No networks found at page 1')
    self.assertEqual(len(list_networks_page1), self.test_data['pagesize'], 'List network response is not matching with the page size length for page 1')
    list_networks_page2 = Network.list(self.userapiclient, listall=self.test_data['listall'], page=2, pagesize=self.test_data['pagesize'], type='Isolated')
    status = validateList(list_networks_page2)
    self.assertEquals(PASS, status[0], 'No networks found at page 2')
    self.assertEqual(len(list_networks_page2), 1, 'List network response is not matching with the page size length for page 2')
    network_page2 = list_networks_page2[0]
    for i in range(0, len(list_networks_page1)):
        network_page1 = list_networks_page1[i]
        self.assertNotEquals(network_page2.id, network_page1.id, 'Network listed in page 2 is also listed in page 1')
    return
