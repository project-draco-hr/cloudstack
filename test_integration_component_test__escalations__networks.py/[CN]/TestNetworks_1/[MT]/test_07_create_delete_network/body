@attr(tags=['advanced', 'provisioning'])
def test_07_create_delete_network(self):
    '\n        @Desc: Test delete network\n        @Steps\n        Step1    : Create Network\n        Step2    : Verify Network is created\n        Step3    : Delete Network\n        Step4    : Verify network is deleted\n        '
    list_networks_before = Network.list(self.userapiclient, listall=self.test_data['listall'])
    self.assertIsNotNone(list_networks_before, 'Network create failed at class level')
    network_offering_vpc_false_list = NetworkOffering.list(self.userapiclient, forvpc='false', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_false_list)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = false')
    if (len(list_networks_before) == 1):
        network_created = Network.create(self.userapiclient, self.test_data['network_without_acl'], networkofferingid=network_offering_vpc_false_list[0].id)
        self.assertIsNotNone(network_created, 'Network is not created')
        expected_dict = {'id': self.test_data['network_without_acl']['zoneid'], 'name': self.test_data['network_without_acl']['name'], }
        actual_dict = {'id': network_created.zoneid, 'name': network_created.name, }
        network_status = self.__verify_values(expected_dict, actual_dict)
        self.assertEqual(True, network_status, 'Listed network details are not as expected')
    else:
        self.assertEqual(len(list_networks_before), 1, 'more than 1 network created at class level')
    list_networks_after = Network.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(list_networks_after)
    self.assertEquals(PASS, status[0], 'No networks found using list call')
    self.assertEqual(2, len(list_networks_after), 'Number of networks created is not matching expected')
    Network.delete(network_created, self.userapiclient)
    list_networks_after_delete = Network.list(self.userapiclient, listall=self.test_data['listall'])
    status = validateList(list_networks_after_delete)
    self.assertEquals(PASS, status[0], 'No networks found using list call')
    self.assertEqual(1, len(list_networks_after_delete), 'Number of networks created is not matching expected')
    self.assertNotEquals(network_created.id, list_networks_after_delete[0].id, 'Deleted network present')
    return
