@attr(tags=['advanced'], required_hardware='true')
def test_05_list_network_offerings_with_and_without_vpc(self):
    '\n        @Desc: Test list network offerings for vpc true and false parameters\n        @Steps\n        Step1    : List network offering\n        Step2    : Create network offering with default setting of vpc = false\n        Step3    : List network offering\n        Step4    : Verify that count is incremented by 1\n        Step5    : List network offering with additional parameter of\n                   vpc = true\n        Step6    : Verify that its count is same as step 1\n        Step7    : List network offering with additional parameter of\n                   vpc = false\n        Step8    : Verify that its count is same as step 3\n        '
    network_offering_before_count = NetworkOffering.list(self.userapiclient)
    status = validateList(network_offering_before_count)
    self.assertEquals(PASS, status[0], 'Default network offering not present')
    network_offering_vpc_true_before_count = NetworkOffering.list(self.userapiclient, forvpc='true', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_true_before_count)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = true')
    network_offering_vpc_false_before_count = NetworkOffering.list(self.userapiclient, forvpc='false', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_false_before_count)
    self.assertEquals(PASS, status[0], 'Default network offering not present for vpc = false')
    network_offering = NetworkOffering.create(self.apiClient, self.test_data['network_offering_vlan'])
    self.assertIsNotNone(network_offering, 'Network offering is not created')
    network_offering.update(self.apiClient, state='Enabled')
    self.cleanup.append(network_offering)
    network_offering_after_count = NetworkOffering.list(self.userapiclient)
    status = validateList(network_offering_after_count)
    self.assertEquals(PASS, status[0], 'Network Offering list results in null')
    self.assertEquals((len(network_offering_before_count) + 1), len(network_offering_after_count), 'Network offering is not created')
    network_offering_vpc_true_after_count = NetworkOffering.list(self.userapiclient, forvpc='true', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_true_after_count)
    self.assertEquals(PASS, status[0], 'Network Offering list results in null')
    self.assertEquals(len(network_offering_vpc_true_before_count), len(network_offering_vpc_true_after_count), 'Default Network offering is created with vpc as true')
    network_offering_vpc_false_after_count = NetworkOffering.list(self.userapiclient, forvpc='false', zoneid=self.zone.id, guestiptype=self.test_data['network_offering_vlan']['guestiptype'], supportedServices='SourceNat', specifyvlan=self.test_data['network_offering_vlan']['specifyvlan'], state='Enabled')
    status = validateList(network_offering_vpc_false_after_count)
    self.assertEquals(PASS, status[0], 'Network Offering list results in null')
    self.assertEquals((len(network_offering_vpc_false_before_count) + 1), len(network_offering_vpc_false_after_count), 'Default Network offering is not created with vpc as false')
    return
