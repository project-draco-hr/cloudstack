{
  DataCenterVO mockDc=mock(DataCenterVO.class);
  VMInstanceVO vm=mock(VMInstanceVO.class);
  UserVmVO userVm=mock(UserVmVO.class);
  ServiceOfferingVO offering=mock(ServiceOfferingVO.class);
  AccountVO account=mock(AccountVO.class);
  when(account.getId()).thenReturn(accountId);
  when(account.getAccountId()).thenReturn(accountId);
  when(vmProfile.getOwner()).thenReturn(account);
  when(vmProfile.getVirtualMachine()).thenReturn(vm);
  when(vmProfile.getId()).thenReturn(12L);
  when(vmDao.findById(12L)).thenReturn(userVm);
  when(userVm.getAccountId()).thenReturn(accountId);
  when(vm.getDataCenterId()).thenReturn(dataCenterId);
  when(dcDao.findById(1L)).thenReturn(mockDc);
  when(avoids.shouldAvoid(mockDc)).thenReturn(false);
  when(plan.getDataCenterId()).thenReturn(dataCenterId);
  when(plan.getClusterId()).thenReturn(null);
  when(plan.getPodId()).thenReturn(null);
  when(vmProfile.getServiceOffering()).thenReturn(offering);
  when(offering.getId()).thenReturn(offeringId);
  when(vmProfile.getServiceOfferingId()).thenReturn(offeringId);
  when(offering.getCpu()).thenReturn(noOfCpusInOffering);
  when(offering.getSpeed()).thenReturn(cpuSpeedInOffering);
  when(offering.getRamSize()).thenReturn(ramInOffering);
  List<Long> clustersWithEnoughCapacity=new ArrayList<Long>();
  clustersWithEnoughCapacity.add(1L);
  clustersWithEnoughCapacity.add(2L);
  clustersWithEnoughCapacity.add(3L);
  clustersWithEnoughCapacity.add(4L);
  clustersWithEnoughCapacity.add(5L);
  clustersWithEnoughCapacity.add(6L);
  when(capacityDao.listClustersInZoneOrPodByHostCapacities(dataCenterId,noOfCpusInOffering * cpuSpeedInOffering,ramInOffering * 1024L * 1024L,Capacity.CAPACITY_TYPE_CPU,true)).thenReturn(clustersWithEnoughCapacity);
  Map<Long,Double> clusterCapacityMap=new HashMap<Long,Double>();
  clusterCapacityMap.put(1L,2048D);
  clusterCapacityMap.put(2L,2048D);
  clusterCapacityMap.put(3L,2048D);
  clusterCapacityMap.put(4L,2048D);
  clusterCapacityMap.put(5L,2048D);
  clusterCapacityMap.put(6L,2048D);
  Pair<List<Long>,Map<Long,Double>> clustersOrderedByCapacity=new Pair<List<Long>,Map<Long,Double>>(clustersWithEnoughCapacity,clusterCapacityMap);
  when(capacityDao.orderClustersByAggregateCapacity(dataCenterId,Capacity.CAPACITY_TYPE_CPU,true)).thenReturn(clustersOrderedByCapacity);
  List<Long> disabledClusters=new ArrayList<Long>();
  List<Long> clustersWithDisabledPods=new ArrayList<Long>();
  when(clusterDao.listDisabledClusters(dataCenterId,null)).thenReturn(disabledClusters);
  when(clusterDao.listClustersWithDisabledPods(dataCenterId)).thenReturn(clustersWithDisabledPods);
  List<Long> hostList0=new ArrayList<Long>();
  List<Long> hostList1=new ArrayList<Long>();
  List<Long> hostList2=new ArrayList<Long>();
  List<Long> hostList3=new ArrayList<Long>();
  List<Long> hostList4=new ArrayList<Long>();
  List<Long> hostList5=new ArrayList<Long>();
  List<Long> hostList6=new ArrayList<Long>();
  hostList0.add(new Long(1));
  hostList1.add(new Long(10));
  hostList2.add(new Long(11));
  hostList3.add(new Long(12));
  hostList4.add(new Long(13));
  hostList5.add(new Long(14));
  hostList6.add(new Long(15));
  String[] implicitHostTags={"GPU"};
  int ramInBytes=ramInOffering * 1024 * 1024;
  when(serviceOfferingDetailsDao.findDetail(Matchers.anyLong(),anyString())).thenReturn(null);
  when(hostGpuGroupsDao.listHostIds()).thenReturn(hostList0);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(1),Host.Type.Routing.toString())).thenReturn(hostList1);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(2),Host.Type.Routing.toString())).thenReturn(hostList2);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(3),Host.Type.Routing.toString())).thenReturn(hostList3);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(4),Host.Type.Routing.toString())).thenReturn(hostList4);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(5),Host.Type.Routing.toString())).thenReturn(hostList5);
  when(capacityDao.listHostsWithEnoughCapacity(noOfCpusInOffering * cpuSpeedInOffering,ramInBytes,new Long(6),Host.Type.Routing.toString())).thenReturn(hostList6);
  when(hostTagsDao.getDistinctImplicitHostTags(hostList1,implicitHostTags)).thenReturn(Arrays.asList("abc","pqr","xyz"));
  when(hostTagsDao.getDistinctImplicitHostTags(hostList2,implicitHostTags)).thenReturn(Arrays.asList("abc","123","pqr","456","xyz"));
  when(hostTagsDao.getDistinctImplicitHostTags(hostList3,implicitHostTags)).thenReturn(Arrays.asList("abc","pqr"));
  when(hostTagsDao.getDistinctImplicitHostTags(hostList4,implicitHostTags)).thenReturn(Arrays.asList("abc"));
  when(hostTagsDao.getDistinctImplicitHostTags(hostList5,implicitHostTags)).thenReturn(Arrays.asList("abc","pqr","xyz"));
  when(hostTagsDao.getDistinctImplicitHostTags(hostList6,implicitHostTags)).thenReturn(Arrays.asList("abc","123","pqr","xyz"));
}
