def startMarvin(self):
    '\n        @Name : startMarvin\n        @Desc : Initializes the Marvin\n                creates the test Client\n                creates the runlogger for logging\n                Parses the config and creates a parsedconfig\n                Creates a debugstream for tc debug log\n        '
    try:
        obj_marvininit = MarvinInit(self.__configFile, self.__deployDcFlag, None, self.__zoneForTests, self.__hypervisorType, self.__userLogPath)
        if (obj_marvininit and (obj_marvininit.init() == SUCCESS)):
            self.__testClient = obj_marvininit.getTestClient()
            self.__tcRunLogger = obj_marvininit.getLogger()
            self.__parsedConfig = obj_marvininit.getParsedConfig()
            self.__resultStream = obj_marvininit.getResultFile()
            self.__logFolderPath = obj_marvininit.getLogFolderPath()
            self.__testRunner = nose.core.TextTestRunner(stream=self.__resultStream, descriptions=True, verbosity=2, config=self.conf)
            return SUCCESS
        return FAILED
    except Exception as e:
        print ('Exception Occurred under startMarvin: %s' % GetDetailExceptionInfo(e))
        return FAILED
