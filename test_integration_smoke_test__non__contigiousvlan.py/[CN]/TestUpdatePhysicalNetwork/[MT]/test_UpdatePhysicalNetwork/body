def test_UpdatePhysicalNetwork(self):
    "\n        Let's start by defining the attributes of our VM that we will be\n        deploying on CloudStack. We will be assuming a single zone is available\n        and is configured and all templates are Ready\n\n        The hardcoded values are used only for brevity.\n        "
    listPhysicalNetworksCmd = listPhysicalNetworks.listPhysicalNetworksCmd()
    listPhysicalNetworksResponse = self.apiClient.listPhysicalNetworks(listPhysicalNetworksCmd)
    self.assertNotEqual(len(listPhysicalNetworksResponse), 0, 'Check if the list API                            returns a non-empty response')
    networkid = listPhysicalNetworksResponse[0].id
    updatePhysicalNetworkCmd = updatePhysicalNetwork.updatePhysicalNetworkCmd()
    updatePhysicalNetworkCmd.id = networkid
    updatePhysicalNetworkCmd.vlan = '4090-4091'
    updatePhysicalNetworkResponse = self.apiClient.updatePhysicalNetwork(updatePhysicalNetworkCmd)
    self.assertNotEqual(updatePhysicalNetworkResponse.len, 0, 'Check if the list API                            returns a non-empty response')
    updatePhysicalNetworkCmd = updatePhysicalNetwork.updatePhysicalNetworkCmd()
    updatePhysicalNetworkCmd.id = networkid
    updatePhysicalNetworkCmd.vlan = '4092-4096'
    updatePhysicalNetworkResponse = self.apiClient.updatePhysicalNetwork(updatePhysicalNetworkCmd)
    self.assertNotEqual(updatePhysicalNetworkResponse.len, 0, 'Check if the list API                                 returns a non-empty response')
    vlanranges = updatePhysicalNetworkResponse.vlan
    range = ''
    vlanranges = vlanranges.split(';')
    for vlan in vlanranges:
        if (vlan == '4090-4096'):
            range = vlan
    self.assertEqual(range, '4090-4096', 'check if adding the range is successful')
    updatePhysicalNetworkCmd = updatePhysicalNetwork.updatePhysicalNetworkCmd()
    updatePhysicalNetworkCmd.id = networkid
    updatePhysicalNetworkCmd.removevlan = '4090-4096'
    updatePhysicalNetworkResponse = self.apiClient.updatePhysicalNetwork(updatePhysicalNetworkCmd)
    self.assertNotEqual(updatePhysicalNetworkResponse.len, 0, 'Check if the list API                     returns a non-empty response')
    vlanranges = updatePhysicalNetworkResponse.vlan
    range = ''
    vlanranges = vlanranges.split(';')
    for vlan in vlanranges:
        if (vlan == '4090-4096'):
            range = vlan
    self.assertEqual(range, '', 'check if removing the range is successful')
