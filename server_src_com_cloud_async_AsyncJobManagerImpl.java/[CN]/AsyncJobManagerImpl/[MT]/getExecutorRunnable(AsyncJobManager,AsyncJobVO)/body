{
  return new Runnable(){
    @Override public void run(){
      try {
        long jobId=0;
        try {
          JmxUtil.registerMBean("AsyncJobManager","Active Job " + job.getId(),new AsyncJobMBeanImpl(job));
        }
 catch (        Exception e) {
          s_logger.warn("Unable to register active job [ " + job.getId() + " ] = [ "+ job.getUuid()+ " ] to JMX monitoring due to exception "+ ExceptionUtil.toString(e));
        }
        BaseAsyncCmd cmdObj=null;
        Transaction txn=Transaction.open(Transaction.CLOUD_DB);
        try {
          jobId=job.getId();
          String jobUuid=job.getUuid();
          NDC.push("job-" + jobId + " = [ "+ jobUuid+ " ]");
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Executing " + job.getCmd() + " for job-"+ jobId+ " = [ "+ jobUuid+ " ]");
          }
          Class<?> cmdClass=Class.forName(job.getCmd());
          cmdObj=(BaseAsyncCmd)cmdClass.newInstance();
          cmdObj=ComponentContext.inject(cmdObj);
          cmdObj.configure();
          cmdObj.setJob(job);
          Type mapType=new TypeToken<Map<String,String>>(){
          }
.getType();
          Gson gson=ApiGsonHelper.getBuilder().create();
          Map<String,String> params=gson.fromJson(job.getCmdInfo(),mapType);
          String userIdStr=params.get("ctxUserId");
          String acctIdStr=params.get("ctxAccountId");
          Long userId=null;
          Account accountObject=null;
          if (userIdStr != null) {
            userId=Long.parseLong(userIdStr);
          }
          if (acctIdStr != null) {
            accountObject=_accountDao.findById(Long.parseLong(acctIdStr));
          }
          UserContext.registerContext(userId,accountObject,null,false);
          try {
            _dispatcher.dispatch(cmdObj,params);
            completeAsyncJob(jobId,AsyncJobResult.STATUS_SUCCEEDED,0,cmdObj.getResponseObject());
          }
  finally {
            UserContext.unregisterContext();
          }
          if (job.getSyncSource() != null) {
            _queueMgr.purgeItem(job.getSyncSource().getId());
            checkQueue(job.getSyncSource().getQueueId());
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Done executing " + job.getCmd() + " for job-"+ job.getId()+ " = [ "+ jobUuid+ " ]");
          }
        }
 catch (        Throwable e) {
          if (e instanceof AsyncCommandQueued) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("job " + job.getCmd() + " for job-"+ jobId+ " = [ "+ job.getUuid()+ " ] was queued, processing the queue.");
            }
            checkQueue(((AsyncCommandQueued)e).getQueue().getId());
          }
 else {
            String errorMsg=null;
            int errorCode=ApiErrorCode.INTERNAL_ERROR.getHttpCode();
            if (!(e instanceof ServerApiException)) {
              s_logger.error("Unexpected exception while executing " + job.getCmd(),e);
              errorMsg=e.getMessage();
            }
 else {
              ServerApiException sApiEx=(ServerApiException)e;
              errorMsg=sApiEx.getDescription();
              errorCode=sApiEx.getErrorCode().getHttpCode();
            }
            ExceptionResponse response=new ExceptionResponse();
            response.setErrorCode(errorCode);
            response.setErrorText(errorMsg);
            response.setResponseName((cmdObj == null) ? "unknowncommandresponse" : cmdObj.getCommandName());
            completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,ApiErrorCode.INTERNAL_ERROR.getHttpCode(),response);
            try {
              if (job.getSyncSource() != null) {
                _queueMgr.purgeItem(job.getSyncSource().getId());
                checkQueue(job.getSyncSource().getQueueId());
              }
            }
 catch (            Throwable ex) {
              s_logger.fatal("Exception on exception, log it for record",ex);
            }
          }
        }
 finally {
          try {
            JmxUtil.unregisterMBean("AsyncJobManager","Active Job " + job.getId());
          }
 catch (          Exception e) {
            s_logger.warn("Unable to unregister active job [ " + job.getId() + " ] = [ "+ job.getUuid()+ " ] from JMX monitoring");
          }
          txn.close();
          NDC.pop();
        }
      }
 catch (      Throwable th) {
        try {
          s_logger.error("Caught: " + th);
        }
 catch (        Throwable th2) {
        }
      }
    }
  }
;
}
