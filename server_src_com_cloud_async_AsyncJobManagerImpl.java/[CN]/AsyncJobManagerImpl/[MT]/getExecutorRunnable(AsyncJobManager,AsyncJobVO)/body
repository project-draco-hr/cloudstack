{
  return new Runnable(){
    @Override public void run(){
      long jobId=0;
      BaseAsyncCmd cmdObj=null;
      Transaction txn=Transaction.open(Transaction.CLOUD_DB);
      try {
        jobId=job.getId();
        NDC.push("job-" + jobId);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Executing " + job.getCmd() + " for job-"+ jobId);
        }
        Class<?> cmdClass=Class.forName(job.getCmd());
        cmdObj=(BaseAsyncCmd)cmdClass.newInstance();
        cmdObj.setJob(job);
        Type mapType=new TypeToken<Map<String,String>>(){
        }
.getType();
        Gson gson=ApiGsonHelper.getBuilder().create();
        Map<String,String> params=gson.fromJson(job.getCmdInfo(),mapType);
        String userIdStr=params.get("ctxUserId");
        String acctIdStr=params.get("ctxAccountId");
        Long userId=null;
        Account accountObject=null;
        if (userIdStr != null) {
          userId=Long.parseLong(userIdStr);
        }
        if (acctIdStr != null) {
          accountObject=_accountDao.findById(Long.parseLong(acctIdStr));
        }
        UserContext.registerContext(userId,accountObject,null,false);
        _dispatcher.dispatch(cmdObj,params);
        completeAsyncJob(jobId,AsyncJobResult.STATUS_SUCCEEDED,0,cmdObj.getResponseObject());
        if (job.getSyncSource() != null) {
          _queueMgr.purgeItem(job.getSyncSource().getId());
          checkQueue(job.getSyncSource().getQueueId());
        }
        if (s_logger.isDebugEnabled())         s_logger.debug("Done executing " + job.getCmd() + " for job-"+ jobId);
      }
 catch (      Throwable e) {
        if (e instanceof AsyncCommandQueued) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("job " + job.getCmd() + " for job-"+ jobId+ " was queued, processing the queue.");
          }
          checkQueue(((AsyncCommandQueued)e).getQueue().getId());
        }
 else {
          String errorMsg=null;
          int errorCode=BaseCmd.INTERNAL_ERROR;
          if (!(e instanceof ServerApiException)) {
            s_logger.error("Unexpected exception while executing " + job.getCmd(),e);
            errorMsg=e.getMessage();
          }
 else {
            ServerApiException sApiEx=(ServerApiException)e;
            errorMsg=sApiEx.getDescription();
            errorCode=sApiEx.getErrorCode();
          }
          ExceptionResponse response=new ExceptionResponse();
          response.setErrorCode(errorCode);
          response.setErrorText(errorMsg);
          response.setResponseName((cmdObj == null) ? "unknowncommandresponse" : cmdObj.getName());
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,response);
          try {
            if (job.getSyncSource() != null) {
              _queueMgr.purgeItem(job.getSyncSource().getId());
              checkQueue(job.getSyncSource().getQueueId());
            }
          }
 catch (          Throwable ex) {
            s_logger.fatal("Exception on exception, log it for record",ex);
          }
        }
      }
 finally {
        StackMaid.current().exitCleanup();
        txn.close();
        NDC.pop();
      }
    }
  }
;
}
