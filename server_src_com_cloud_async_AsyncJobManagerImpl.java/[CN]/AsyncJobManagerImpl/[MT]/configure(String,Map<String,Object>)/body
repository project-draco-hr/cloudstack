{
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException("Unable to get the configuration dao.");
  }
  int expireMinutes=NumbersUtil.parseInt(configDao.getValue(Config.JobExpireMinutes.key()),24 * 60);
  _jobExpireSeconds=(long)expireMinutes * 60;
  _jobCancelThresholdSeconds=NumbersUtil.parseInt(configDao.getValue(Config.JobCancelThresholdMinutes.key()),60);
  _jobCancelThresholdSeconds*=60;
  _accountDao=locator.getDao(AccountDao.class);
  if (_accountDao == null) {
    throw new ConfigurationException("Unable to get " + AccountDao.class.getName());
  }
  _jobDao=locator.getDao(AsyncJobDao.class);
  if (_jobDao == null) {
    throw new ConfigurationException("Unable to get " + AsyncJobDao.class.getName());
  }
  _context=locator.getManager(AsyncJobExecutorContext.class);
  if (_context == null) {
    throw new ConfigurationException("Unable to get " + AsyncJobExecutorContext.class.getName());
  }
  _queueMgr=locator.getManager(SyncQueueManager.class);
  if (_queueMgr == null) {
    throw new ConfigurationException("Unable to get " + SyncQueueManager.class.getName());
  }
  _clusterMgr=locator.getManager(ClusterManager.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _dispatcher=ApiDispatcher.getInstance();
  try {
    final File dbPropsFile=PropertiesUtil.findConfigFile("db.properties");
    final Properties dbProps=new Properties();
    dbProps.load(new FileInputStream(dbPropsFile));
    final int cloudMaxActive=Integer.parseInt(dbProps.getProperty("db.cloud.maxActive"));
    int poolSize=(cloudMaxActive * 2) / 3;
    s_logger.info("Start AsyncJobManager thread pool in size " + poolSize);
    _executor=Executors.newFixedThreadPool(poolSize,new NamedThreadFactory("Job-Executor"));
  }
 catch (  final Exception e) {
    throw new ConfigurationException("Unable to load db.properties to configure AsyncJobManagerImpl");
  }
  return true;
}
