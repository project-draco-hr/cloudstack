{
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Query async-job status, job-" + jobId);
  }
  Transaction txt=Transaction.currentTxn();
  AsyncJobResult jobResult=new AsyncJobResult(jobId);
  try {
    txt.start();
    AsyncJobVO job=_jobDao.findById(jobId);
    if (job != null) {
      jobResult.setCmdOriginator(job.getCmdOriginator());
      jobResult.setJobStatus(job.getStatus());
      jobResult.setProcessStatus(job.getProcessStatus());
      jobResult.setResult(job.getResult());
      jobResult.setResultCode(job.getResultCode());
      if (job.getStatus() == AsyncJobResult.STATUS_SUCCEEDED || job.getStatus() == AsyncJobResult.STATUS_FAILED) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Async job-" + jobId + " completed");
        }
      }
 else {
        job.setLastPolled(DateUtil.currentGMTTime());
        _jobDao.update(jobId,job);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Async job-" + jobId + " does not exist, invalid job id?");
      }
      jobResult.setJobStatus(AsyncJobResult.STATUS_FAILED);
      jobResult.setResult("job-" + jobId + " does not exist");
    }
    txt.commit();
  }
 catch (  Exception e) {
    s_logger.error("Unexpected exception while querying async job-" + jobId + " status: ",e);
    jobResult.setJobStatus(AsyncJobResult.STATUS_FAILED);
    jobResult.setResult("Exception: " + e.toString());
    txt.rollback();
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Job status: " + jobResult.toString());
  }
  return jobResult;
}
