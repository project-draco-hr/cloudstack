@attr(tags=['advanced'], required_hardware='false')
def test_04_1_egress_fr4(self):
    'Test Create Egress rule and check the Firewall_Rules DB table\n        '
    self.create_vm(egress_policy=False)
    self.createEgressRule(cidr=TestEgressFWRules.zone.guestcidraddress)
    qresultset = self.dbclient.execute(("select purpose, traffic_type from firewall_rules where uuid='%s';" % self.egressruleid))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    self.assertEqual(qresultset[0][0], 'Firewall', ('DB results not matching, expected: Firewall found: %s ' % qresultset[0][0]))
    self.assertEqual(qresultset[0][1], 'Egress', ('DB results not matching, expected: Egress, found: %s' % qresultset[0][1]))
    qresultset = self.dbclient.execute(("select egress_default_policy from network_offerings where name='%s';" % self.network_offering.name))
    self.assertEqual(isinstance(qresultset, list), True, 'Check DB query result set for valid data')
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    self.assertEqual(qresultset[0][0], 0, ('DB results not matching, expected: 0, found: %s' % qresultset[0][0]))
