def create_vm(self, pfrule=False, egress_policy=True, RR=False):
    self.create_network_offering(egress_policy, RR)
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network.id))
    self.debug(('Deploying instance in the account: %s' % self.account.name))
    project = None
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.domain.id, serviceofferingid=self.service_offering.id, mode=(self.zone.networktype if pfrule else 'basic'), networkids=[str(self.network.id)], projectid=(project.id if project else None))
    self.debug(('Deployed instance %s in account: %s' % (self.virtual_machine.id, self.account.name)))
    self.vm_list = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(validateList(self.vm_list)[0], PASS, ('vm list validation failed, vm list is %s' % self.vm_list))
    self.assertEqual(str(self.vm_list[0].state).lower(), 'running', ('VM state should be running, it is %s' % self.vm_list[0].state))
    self.public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id)
    FireWallRule.create(self.apiclient, ipaddressid=self.public_ip.ipaddress.id, protocol=self.services['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    self.debug(('Creating NAT rule for VM ID: %s' % self.virtual_machine.id))
    NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], self.public_ip.ipaddress.id)
    return
