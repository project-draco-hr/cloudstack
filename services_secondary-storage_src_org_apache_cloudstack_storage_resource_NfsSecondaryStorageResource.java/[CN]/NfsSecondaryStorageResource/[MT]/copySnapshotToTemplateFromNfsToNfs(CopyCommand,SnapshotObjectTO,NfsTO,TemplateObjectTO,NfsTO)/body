{
  if (srcData.getHypervisorType() == HypervisorType.XenServer) {
    return copySnapshotToTemplateFromNfsToNfsXenserver(cmd,srcData,srcDataStore,destData,destDataStore);
  }
 else   if (srcData.getHypervisorType() == HypervisorType.KVM) {
    File srcFile=getFile(srcData.getPath(),srcDataStore.getUrl());
    File destFile=getFile(destData.getPath(),destDataStore.getUrl());
    String templateName=srcFile.getName();
    String destFileFullPath=destFile.getAbsolutePath() + File.separator + templateName+ "."+ ImageFormat.QCOW2.getFileExtension();
    s_logger.debug("copy snapshot " + srcFile.getAbsolutePath() + " to template "+ destFileFullPath);
    Script.runSimpleBashScript("cp " + srcFile.getAbsolutePath() + " "+ destFileFullPath);
    try {
      String metaFileName=destFile.getAbsolutePath() + File.separator + "template.properties";
      _storage.create(destFile.getAbsolutePath(),"template.properties");
      File metaFile=new File(metaFileName);
      FileWriter writer=new FileWriter(metaFile);
      BufferedWriter bufferWriter=new BufferedWriter(writer);
      bufferWriter.write("uniquename=" + destData.getName());
      bufferWriter.write("\n");
      bufferWriter.write("filename=" + templateName + "."+ ImageFormat.QCOW2.getFileExtension());
      bufferWriter.write("\n");
      long size=this._storage.getSize(destFileFullPath);
      bufferWriter.write("size=" + size);
      bufferWriter.close();
      writer.close();
      QCOW2Processor processor=new QCOW2Processor();
      Map<String,Object> params=new HashMap<String,Object>();
      params.put(StorageLayer.InstanceConfigKey,_storage);
      processor.configure("qcow2 processor",params);
      String destPath=destFile.getAbsolutePath();
      FormatInfo info=processor.process(destPath,null,templateName);
      TemplateLocation loc=new TemplateLocation(_storage,destPath);
      loc.create(1,true,srcFile.getName());
      loc.addFormat(info);
      loc.save();
      TemplateProp prop=loc.getTemplateInfo();
      TemplateObjectTO newTemplate=new TemplateObjectTO();
      newTemplate.setPath(destData.getPath() + File.separator + templateName+ "."+ ImageFormat.QCOW2.getFileExtension());
      newTemplate.setFormat(ImageFormat.QCOW2);
      newTemplate.setSize(prop.getSize());
      newTemplate.setPhysicalSize(prop.getPhysicalSize());
      return new CopyCmdAnswer(newTemplate);
    }
 catch (    ConfigurationException e) {
      s_logger.debug("Failed to create template:" + e.toString());
      return new CopyCmdAnswer(e.toString());
    }
catch (    IOException e) {
      s_logger.debug("Failed to create template:" + e.toString());
      return new CopyCmdAnswer(e.toString());
    }
  }
  return new CopyCmdAnswer("");
}
