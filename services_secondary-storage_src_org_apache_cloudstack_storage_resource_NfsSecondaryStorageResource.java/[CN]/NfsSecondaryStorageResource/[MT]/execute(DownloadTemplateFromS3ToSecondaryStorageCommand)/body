{
  final S3TO s3=cmd.getS3();
  final String storagePath=cmd.getStoragePath();
  final Long accountId=cmd.getAccountId();
  final Long templateId=cmd.getTemplateId();
  try {
    final File downloadDirectory=_storage.getFile(determineStorageTemplatePath(storagePath,accountId,templateId));
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=format("Unable to create directory " + "download directory %1$s for download of template id " + "%2$s from S3.",downloadDirectory.getName(),templateId);
      s_logger.error(errMsg);
      return new Answer(cmd,false,errMsg);
    }
    getDirectory(s3,s3.getBucketName(),determineS3TemplateDirectory(accountId,templateId),downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    return new Answer(cmd,true,format("Successfully downloaded " + "template id %1$s from S3 to directory %2$s",templateId,downloadDirectory.getName()));
  }
 catch (  Exception e) {
    final String errMsg=format("Failed to upload template id %1$s " + "due to $2%s",templateId,e.getMessage());
    s_logger.error(errMsg,e);
    return new Answer(cmd,false,errMsg);
  }
}
