{
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  DataStoreTO srcDataStore=srcData.getDataStore();
  DataStoreTO destDataStore=destData.getDataStore();
  if (srcDataStore.getRole() == DataStoreRole.Image || srcDataStore.getRole() == DataStoreRole.ImageCache) {
    if (!(srcDataStore instanceof NfsTO)) {
      s_logger.debug("only support nfs storage as src, when create template from snapshot");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (destDataStore instanceof NfsTO) {
      return copySnapshotToTemplateFromNfsToNfs(cmd,(SnapshotObjectTO)srcData,(NfsTO)srcDataStore,(TemplateObjectTO)destData,(NfsTO)destDataStore);
    }
 else     if (destDataStore instanceof SwiftTO) {
      CopyCmdAnswer answer=(CopyCmdAnswer)copySnapshotToTemplateFromNfsToNfs(cmd,(SnapshotObjectTO)srcData,(NfsTO)srcDataStore,(TemplateObjectTO)destData,(NfsTO)srcDataStore);
      if (!answer.getResult()) {
        return answer;
      }
      s_logger.debug("starting copy template to swift");
      DataTO newTemplate=answer.getNewData();
      File templateFile=getFile(newTemplate.getPath(),((NfsTO)srcDataStore).getUrl());
      SwiftTO swift=(SwiftTO)destDataStore;
      String containterName=SwiftUtil.getContainerName(destData.getObjectType().toString(),destData.getId());
      String swiftPath=SwiftUtil.putObject(swift,templateFile,containterName,templateFile.getName());
      File properties=new File(templateFile.getParent() + File.separator + _tmpltpp);
      if (properties.exists()) {
        SwiftUtil.putObject(swift,properties,containterName,_tmpltpp);
      }
      try {
        DeleteCommand deleteCommand=new DeleteCommand(newTemplate);
        execute(deleteCommand);
      }
 catch (      Exception e) {
        s_logger.debug("Failed to clean up staging area:",e);
      }
      TemplateObjectTO template=new TemplateObjectTO();
      template.setPath(swiftPath);
      template.setSize(templateFile.length());
      template.setPhysicalSize(template.getSize());
      SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
      template.setFormat(snapshot.getVolume().getFormat());
      return new CopyCmdAnswer(template);
    }
 else     if (destDataStore instanceof S3TO) {
      CopyCmdAnswer answer=(CopyCmdAnswer)copySnapshotToTemplateFromNfsToNfs(cmd,(SnapshotObjectTO)srcData,(NfsTO)srcDataStore,(TemplateObjectTO)destData,(NfsTO)srcDataStore);
      if (!answer.getResult()) {
        return answer;
      }
      TemplateObjectTO newTemplate=(TemplateObjectTO)answer.getNewData();
      newTemplate.setDataStore(srcDataStore);
      CopyCommand newCpyCmd=new CopyCommand(newTemplate,destData,cmd.getWait(),cmd.executeInSequence());
      Answer result=copyFromNfsToS3(newCpyCmd);
      try {
        DeleteCommand deleteCommand=new DeleteCommand(newTemplate);
        execute(deleteCommand);
      }
 catch (      Exception e) {
        s_logger.debug("Failed to clean up staging area:",e);
      }
      return result;
    }
  }
  s_logger.debug("Failed to create templat from snapshot");
  return new CopyCmdAnswer("Unsupported prototcol");
}
