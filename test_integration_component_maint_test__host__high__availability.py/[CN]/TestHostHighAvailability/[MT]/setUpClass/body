@classmethod
def setUpClass(cls):
    cls.testClient = super(TestHostHighAvailability, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    if (cls.hypervisor.lower() in ['lxc']):
        raise unittest.SkipTest('Template creation from root volume is not supported in LXC')
    clusterWithSufficientHosts = None
    clusters = Cluster.list(cls.api_client, zoneid=cls.zone.id)
    for cluster in clusters:
        cls.hosts = Host.list(cls.api_client, clusterid=cluster.id, type='Routing')
        if (len(cls.hosts) >= 3):
            clusterWithSufficientHosts = cluster
            break
    if (clusterWithSufficientHosts is None):
        raise unittest.SkipTest('No Cluster with 3 hosts found')
    configs = Configurations.list(cls.api_client, name='ha.tag')
    assert isinstance(configs, list), 'Config list not                retrieved for ha.tag'
    if (configs[0].value != 'ha'):
        raise unittest.SkipTest("Please set the global config                    value for ha.tag as 'ha'")
    Host.update(cls.api_client, id=cls.hosts[2].id, hosttags='ha')
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering_with_ha = ServiceOffering.create(cls.api_client, cls.services['service_offering_with_ha'], offerha=True)
    cls.service_offering_without_ha = ServiceOffering.create(cls.api_client, cls.services['service_offering_without_ha'], offerha=False)
    cls._cleanup = [cls.service_offering_with_ha, cls.service_offering_without_ha]
    return
