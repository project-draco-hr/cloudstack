@attr(configuration='ha.tag')
@attr(tags=['advanced', 'advancedns', 'sg', 'basic', 'eip', 'simulator', 'multihost'])
def test_03_cant_migrate_vm_to_host_with_ha_positive(self):
    ' Verify you can not migrate VMs to hosts with an ha.tag (positive) '
    virtual_machine_with_ha = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_with_ha.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_with_ha.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm = vms[0]
    self.debug(('Deployed VM on host: %s' % vm.hostid))
    list_hosts_response = list_hosts(self.apiclient, virtualmachineid=vm.id)
    self.assertEqual(isinstance(list_hosts_response, list), True, 'The listHosts API returned the invalid list')
    self.assertNotEqual(len(list_hosts_response), 0, 'The listHosts returned nothing.')
    suitableHost = None
    for host in list_hosts_response:
        if (host.suitableformigration and (host.hostid != vm.hostid)):
            suitableHost = host
            break
    self.assertTrue((suitableHost is not None), 'suitablehost should not be None')
    self.debug(('Migrating VM-ID: %s to Host: %s' % (vm.id, suitableHost.id)))
    cmd = migrateVirtualMachine.migrateVirtualMachineCmd()
    cmd.hostid = suitableHost.id
    cmd.virtualmachineid = vm.id
    self.apiclient.migrateVirtualMachine(cmd)
    list_vm_response = list_virtual_machines(self.apiclient, id=vm.id)
    self.assertEqual(isinstance(list_vm_response, list), True, 'The listVirtualMachines returned the invalid list.')
    self.assertNotEqual(list_vm_response, None, 'The listVirtualMachines API returned nothing.')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.id, vm.id, 'The virtual machine id and the the virtual machine from listVirtualMachines is not matching.')
    self.assertEqual(vm_response.hostid, suitableHost.id, 'The VM is not migrated to targeted suitable host.')
