{
  RuleFactory factory=RuleFactory.getInstance();
  Stack stack=new Stack();
  StringTokenizer tokenizer=new StringTokenizer(expression);
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if ((token.startsWith("'")) && (token.endsWith("'") && (token.length() > 2))) {
      token=token.substring(1,token.length() - 1);
    }
    if ((token.startsWith("'")) && (token.endsWith("'") && (token.length() == 2))) {
      token="";
    }
    boolean inText=token.startsWith("'");
    if (inText) {
      token=token.substring(1);
      while (inText && tokenizer.hasMoreTokens()) {
        token=token + " " + tokenizer.nextToken();
        inText=!(token.endsWith("'"));
      }
      if (token.length() > 0) {
        token=token.substring(0,token.length() - 1);
      }
    }
    if (factory.isRule(token)) {
      Rule r=factory.getRule(token,stack);
      stack.push(r);
    }
 else {
      if (token.length() > 0) {
        stack.push(token);
      }
    }
  }
  if ((stack.size() == 1) && (!(stack.peek() instanceof Rule))) {
    Object o=stack.pop();
    stack.push("MSG");
    stack.push(o);
    return factory.getRule("~=",stack);
  }
  if ((stack.size() != 1) || (!(stack.peek() instanceof Rule))) {
    throw new IllegalArgumentException("invalid expression: " + expression);
  }
 else {
    return (Rule)stack.pop();
  }
}
