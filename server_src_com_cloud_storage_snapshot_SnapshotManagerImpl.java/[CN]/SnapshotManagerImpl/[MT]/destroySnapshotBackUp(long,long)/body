{
  boolean success=false;
  String details=null;
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  VolumeVO volume=_volsDao.findByIdIncludingRemoved(snapshot.getVolumeId());
  if (volume == null) {
    throw new CloudRuntimeException("Destroying snapshot " + snapshotId + " backup failed due to unable to find volume "+ snapshot.getVolumeId());
  }
  String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
  String secondaryStoragePoolUrl=_storageMgr.getSecondaryStorageURL(volume.getDataCenterId());
  Long dcId=volume.getDataCenterId();
  Long accountId=volume.getAccountId();
  Long volumeId=volume.getId();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  if (backupOfSnapshot == null) {
    return true;
  }
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,snapshot.getName());
  snapshot.setBackupSnapshotId(null);
  _snapshotDao.update(snapshotId,snapshot);
  details="Failed to destroy snapshot id:" + snapshotId + " for volume: "+ volume.getId();
  Answer answer=sendToPool(volume,cmd);
  if ((answer != null) && answer.getResult()) {
    success=true;
    details="Successfully deleted snapshot " + snapshotId + " for volumeId: "+ volumeId+ " and policyId "+ policyId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    if (answer.getDetails() != null) {
      details=answer.getDetails();
    }
    s_logger.error(details);
  }
  if (success) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  return success;
}
