{
  Long volumeId=cmd.getVolumeId();
  String name=cmd.getSnapshotName();
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  String snapshotTypeStr=cmd.getSnapshotType();
  String intervalTypeStr=cmd.getIntervalType();
  Map<String,String> tags=cmd.getTags();
  Long zoneId=cmd.getZoneId();
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,volume);
    }
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listSnapshots");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SnapshotVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  sb.and("statusNEQ",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and("volumeId",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("snapshotTypeEQ",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and("snapshotTypeNEQ",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op("key" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and("value" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and("resourceType",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join("tagSearch",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  sc.setParameters("statusNEQ",Snapshot.State.Destroyed);
  if (volumeId != null) {
    sc.setParameters("volumeId",volumeId);
  }
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    sc.setJoinParameters("tagSearch","resourceType",ResourceObjectType.Snapshot.toString());
    for (    String key : tags.keySet()) {
      sc.setJoinParameters("tagSearch","key" + String.valueOf(count),key);
      sc.setJoinParameters("tagSearch","value" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType(snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException("Unsupported snapshot type " + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters("snapshotTypeEQ",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters("snapshotTypeEQ",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType(intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException("Unsupported snapstho interval type " + intervalTypeStr);
    }
    sc.setParameters("snapshotTypeEQ",type.ordinal());
  }
 else {
    sc.setParameters("snapshotTypeNEQ",Snapshot.Type.TEMPLATE.ordinal());
  }
  Pair<List<SnapshotVO>,Integer> result=_snapshotDao.searchAndCount(sc,searchFilter);
  return new Pair<List<? extends Snapshot>,Integer>(result.first(),result.second());
}
