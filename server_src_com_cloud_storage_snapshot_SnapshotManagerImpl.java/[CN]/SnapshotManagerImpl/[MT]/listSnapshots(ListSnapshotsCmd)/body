{
  Long volumeId=cmd.getVolumeId();
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
    }
  }
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || _accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Unable to list templates for domain " + domainId + ", permission denied.");
      }
    }
 else     if ((caller != null) && ((caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN))) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
    if (domainId != null && accountName != null) {
      Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (userAccount != null) {
        permittedAccounts.add(userAccount.getId());
      }
 else {
        throw new InvalidParameterValueException("Could not find account:" + accountName + " in domain:"+ domainId);
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Object name=cmd.getSnapshotName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object snapshotTypeStr=cmd.getSnapshotType();
  Object intervalTypeStr=cmd.getIntervalType();
  Filter searchFilter=new Filter(SnapshotVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  sb.and("status",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and("volumeId",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("accountId",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("snapshotTypeEQ",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and("snapshotTypeNEQ",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinType.INNER);
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    if (isRecursive) {
      domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    }
 else {
      domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    }
    accountSearch.join("domainSearch",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  if (volumeId != null) {
    sc.setParameters("volumeId",volumeId);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters("accountId",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    SearchCriteria<?> joinSearch=sc.getJoin("accountSearch");
    if (isRecursive) {
      joinSearch.setJoinParameters("domainSearch","path",domain.getPath() + "%");
    }
 else {
      joinSearch.setJoinParameters("domainSearch","path",domain.getPath());
    }
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException("Unsupported snapshot type " + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters("snapshotTypeEQ",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters("snapshotTypeEQ",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException("Unsupported snapstho interval type " + intervalTypeStr);
    }
    sc.setParameters("snapshotTypeEQ",type.ordinal());
  }
 else {
    sc.setParameters("snapshotTypeNEQ",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}
