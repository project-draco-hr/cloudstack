{
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException("Can not acquire lock for snapshot: " + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    HostVO secHost=getSecHost(volumeId,volume.getDataCenterId());
    String secondaryStoragePoolUrl=secHost.getStorageUrl();
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    SwiftTO swift=_swiftMgr.getSwiftTO();
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findByIdIncludingRemoved(prevSnapshotId);
      if (prevSnapshot.getBackupSnapshotId() != null && swift == null) {
        if (prevSnapshot.getVersion() != null && prevSnapshot.getVersion().equals("2.2")) {
          prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          prevSnapshotUuid=prevSnapshot.getPath();
        }
      }
 else       if (prevSnapshot.getSwiftId() != null && swift != null) {
        prevBackupUuid=prevSnapshot.getBackupSnapshotId();
        prevSnapshotUuid=prevSnapshot.getPath();
      }
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    StoragePoolVO srcPool=_storagePoolDao.findById(volume.getPoolId());
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,snapshot.getId(),volume.getPath(),srcPool,snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName,_backupsnapshotwait);
    if (swift != null) {
      backupSnapshotCommand.setSwift(swift);
    }
    String backedUpSnapshotUuid=null;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)sendToPool(volume,backupSnapshotCommand);
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (backedUp) {
      if (backupSnapshotCommand.getSwift() != null) {
        snapshot.setSwiftId(swift.getId());
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
 else {
        snapshot.setSecHostId(secHost.getId());
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
      if (answer.isFull()) {
        snapshot.setPrevSnapshotId(0);
      }
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
    }
 else {
      s_logger.warn("Failed to back up snapshot on secondary storage, deleting the record from the DB");
      _snapshotDao.remove(snapshotId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,0L);
      _usageEventDao.persist(usageEvent);
    }
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}
