{
  Long userId=UserContext.current().getUserId();
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException("Can not acquire lock for snapshot: " + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String secondaryStoragePoolUrl=_storageMgr.getSecondaryStorageURL(volume.getDataCenterId());
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findById(prevSnapshotId);
      prevSnapshotUuid=prevSnapshot.getPath();
      prevBackupUuid=prevSnapshot.getBackupSnapshotId();
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName);
    String backedUpSnapshotUuid=null;
    String basicErrMsg="Failed to backup snapshot id " + snapshot.getId() + " to secondary storage for volume: "+ volumeId;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),backupSnapshotCommand,basicErrMsg,_totalRetries,_pauseInterval,_shouldBeSnapshotCapable,volume.getInstanceId());
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(volume.getAccountId());
    event.setType(EventTypes.EVENT_SNAPSHOT_CREATE);
    String snapshotName=snapshot.getName();
    if (backedUp) {
      snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
      String eventParams="id=" + snapshotId + "\nssName="+ snapshotName+ "\nsize="+ volume.getSize()+ "\ndcId="+ volume.getDataCenterId();
      event.setDescription("Backed up snapshot id: " + snapshotId + " to secondary for volume "+ volumeId);
      event.setLevel(EventVO.LEVEL_INFO);
      event.setStartId(startEventId);
      event.setParameters(eventParams);
    }
 else {
      _snapshotDao.remove(snapshotId);
      event.setLevel(EventVO.LEVEL_ERROR);
      event.setDescription("Failed to backup snapshot id: " + snapshotId + " to secondary for volume "+ volumeId);
    }
    _eventDao.persist(event);
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}
