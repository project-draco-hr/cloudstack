{
  Long userId=UserContext.current().getUserId();
  long snapshotId=ss.getId();
  SnapshotVO snapshot=null;
  try {
    snapshot=_snapshotDao.acquireInLockTable(snapshotId);
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String secondaryStoragePoolUrl=_storageMgr.getSecondaryStorageURL(volume.getDataCenterId());
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findById(prevSnapshotId);
      prevSnapshotUuid=prevSnapshot.getPath();
      prevBackupUuid=prevSnapshot.getBackupSnapshotId();
    }
    String firstBackupUuid=volume.getFirstSnapshotBackupUuid();
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,firstBackupUuid,isVolumeInactive,vmName);
    String backedUpSnapshotUuid=null;
    String basicErrMsg="Failed to backup snapshot id " + snapshot.getId() + " to secondary storage for volume: "+ volumeId;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),backupSnapshotCommand,basicErrMsg,_totalRetries,_pauseInterval,_shouldBeSnapshotCapable,volume.getInstanceId());
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
        if (prevSnapshot != null && backedUpSnapshotUuid.equalsIgnoreCase(prevSnapshot.getBackupSnapshotId())) {
          s_logger.debug("Delete duplicate Snapshot id: " + prevSnapshotId);
          long pprevSnapshotId=prevSnapshot.getPrevSnapshotId();
          snapshot.setPrevSnapshotId(pprevSnapshotId);
          _snapshotDao.update(snapshot.getId(),snapshot);
          _snapshotDao.expunge(prevSnapshot.getId());
          EventVO event=new EventVO();
          String eventParams="id=" + prevSnapshot.getId() + "\nssName="+ prevSnapshot.getName();
          event.setType(EventTypes.EVENT_SNAPSHOT_DELETE);
          event.setState(EventState.Completed);
          event.setDescription("Delete snapshot id: " + prevSnapshot.getId() + " due to new snapshot is same as this one");
          event.setLevel(EventVO.LEVEL_INFO);
          event.setParameters(eventParams);
          _eventDao.persist(event);
          prevSnapshotId=pprevSnapshotId;
          if (prevSnapshotId == 0) {
            prevSnapshot=null;
            prevSnapshotUuid=null;
            prevBackupUuid=null;
          }
 else {
            prevSnapshot=_snapshotDao.findById(prevSnapshotId);
            prevSnapshotUuid=prevSnapshot.getPath();
            prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          }
        }
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    SnapshotVO snapshotVO=_snapshotDao.findById(snapshotId);
    snapshotVO.setBackupSnapshotId(backedUpSnapshotUuid);
    if (volume.getFirstSnapshotBackupUuid() == null) {
      volume.setFirstSnapshotBackupUuid(backedUpSnapshotUuid);
      _volsDao.update(volumeId,volume);
    }
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(volume.getAccountId());
    event.setType(EventTypes.EVENT_SNAPSHOT_CREATE);
    String snapshotName=snapshotVO.getName();
    if (backedUp) {
      snapshotVO.setStatus(Snapshot.Status.BackedUp);
      String eventParams="id=" + snapshotId + "\nssName="+ snapshotName+ "\nsize="+ volume.getSize()+ "\ndcId="+ volume.getDataCenterId();
      event.setDescription("Backed up snapshot id: " + snapshotId + " to secondary for volume "+ volumeId);
      event.setLevel(EventVO.LEVEL_INFO);
      event.setStartId(startEventId);
      event.setParameters(eventParams);
      _snapshotDao.update(snapshotId,snapshotVO);
    }
 else {
      _snapshotDao.remove(snapshotId);
      event.setLevel(EventVO.LEVEL_ERROR);
      event.setDescription("Failed to backup snapshot id: " + snapshotId + " to secondary for volume "+ volumeId);
    }
    _eventDao.persist(event);
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}
