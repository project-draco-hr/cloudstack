{
  boolean success=false;
  String details=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  VolumeVO volume=_volsDao.findById(snapshot.getVolumeId());
  String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
  String secondaryStoragePoolUrl=_storageMgr.getSecondaryStorageURL(volume.getDataCenterId());
  Long dcId=volume.getDataCenterId();
  Long accountId=volume.getAccountId();
  Long volumeId=volume.getId();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,snapshot.getName());
  details="Failed to destroy snapshot id:" + snapshotId + " for volume: "+ volume.getId();
  Answer answer=_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,details,_totalRetries,_pauseInterval,_shouldBeSnapshotCapable,volume.getInstanceId());
  if ((answer != null) && answer.getResult()) {
    postDeleteSnapshot(userId,snapshotId,policyId);
    success=true;
    details="Successfully deleted snapshot " + snapshotId + " for volumeId: "+ volumeId+ " and policyId "+ policyId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    if (answer.getDetails() != null) {
      details=answer.getDetails();
    }
    s_logger.error(details);
  }
  String eventParams="id=" + snapshotId;
  EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId((snapshot != null) ? snapshot.getAccountId() : 0);
  event.setType(EventTypes.EVENT_SNAPSHOT_DELETE);
  event.setDescription(details);
  event.setParameters(eventParams);
  event.setLevel(success ? EventVO.LEVEL_INFO : EventVO.LEVEL_ERROR);
  _eventDao.persist(event);
  return success;
}
