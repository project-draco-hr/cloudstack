{
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException("No such volume exist");
  }
  Account owner=_accountMgr.getAccount(volume.getAccountId());
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  try {
    if (volume != null && _volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
      UserVmVO uservm=_vmDao.findById(volume.getInstanceId());
      if (uservm != null) {
        UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
        if (vm == null) {
          throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " is being used, try it later ");
        }
      }
    }
    Long poolId=volume.getPoolId();
    if (poolId == null) {
      throw new CloudRuntimeException("You cannot take a snapshot of a volume until it has been attached to an instance");
    }
    if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
      StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
      ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
      List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(cluster.getId());
      if (hosts != null && !hosts.isEmpty()) {
        HostVO host=hosts.get(0);
        if (!hostSupportSnapsthot(host)) {
          _snapshotDao.expunge(snapshotId);
          throw new CloudRuntimeException("KVM Snapshot is not supported on cluster: " + host.getId());
        }
      }
    }
    if (volume.getInstanceId() != null) {
      UserVmVO userVm=_vmDao.findById(volume.getInstanceId());
      if (userVm != null) {
        if (userVm.getState().equals(State.Destroyed) || userVm.getState().equals(State.Expunging)) {
          _snapshotDao.expunge(snapshotId);
          throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " is associated with vm:"+ userVm.getInstanceName()+ " is in "+ userVm.getState().toString()+ " state");
        }
        if (userVm.getHypervisorType() == HypervisorType.VMware) {
          List<SnapshotVO> activeSnapshots=_snapshotDao.listByInstanceId(volume.getInstanceId(),Snapshot.Status.Creating,Snapshot.Status.CreatedOnPrimary,Snapshot.Status.BackingUp);
          if (activeSnapshots.size() > 1)           throw new CloudRuntimeException("There is other active snapshot tasks on the instance to which the volume is attached, please try again later");
        }
      }
    }
    boolean stateTransit=false;
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null) {
      if (snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
        backedUp=backupSnapshotToSecondaryStorage(snapshot);
      }
 else       if (snapshot.getStatus() == Snapshot.Status.BackedUp) {
        backedUp=true;
      }
 else {
        snapshot.setStatus(Status.Error);
        _snapshotDao.update(snapshot.getId(),snapshot);
        throw new CloudRuntimeException("Failed to create snapshot: " + snapshot + " on primary storage");
      }
      if (!backedUp) {
        snapshot.setStatus(Status.Error);
        _snapshotDao.update(snapshot.getId(),snapshot);
        throw new CloudRuntimeException("Created snapshot: " + snapshot + " on primary but failed to backup on secondary");
      }
    }
 else {
      throw new CloudRuntimeException("Failed to create snapshot: " + snapshot + " on primary storage");
    }
  }
  finally {
    if (snapshot != null) {
      postCreateSnapshot(volumeId,snapshot.getId(),policyId,backedUp);
      SnapshotVO freshSnapshot=_snapshotDao.findById(snapshot.getId());
      if ((freshSnapshot != null) && backedUp) {
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize());
        _usageEventDao.persist(usageEvent);
      }
      if (!backedUp) {
        snapshot.setStatus(Status.Error);
        _snapshotDao.update(snapshot.getId(),snapshot);
      }
 else {
        _resourceLimitMgr.incrementResourceCount(owner.getId(),ResourceType.snapshot);
      }
    }
 else {
      snapshot=_snapshotDao.findById(snapshotId);
      if (snapshot != null) {
        snapshot.setStatus(Status.Error);
        _snapshotDao.update(snapshotId,snapshot);
      }
    }
  }
  return snapshot;
}
