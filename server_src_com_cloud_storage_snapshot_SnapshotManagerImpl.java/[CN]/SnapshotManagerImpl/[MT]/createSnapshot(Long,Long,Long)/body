{
  VolumeVO v=_volsDao.findById(volumeId);
  Account owner=_accountMgr.getAccount(v.getAccountId());
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  boolean backedUp=false;
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,v);
  try {
    if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
      UserVmVO uservm=_vmDao.findById(v.getInstanceId());
      if (uservm != null) {
        UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
        if (vm == null) {
          throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " is being used, try it later ");
        }
      }
    }
    Long poolId=v.getPoolId();
    if (poolId == null) {
      throw new CloudRuntimeException("You cannot take a snapshot of a volume until it has been attached to an instance");
    }
    if (_volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
      StoragePoolVO storagePool=_storagePoolDao.findById(v.getPoolId());
      ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
      List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
      if (hosts != null && !hosts.isEmpty()) {
        HostVO host=hosts.get(0);
        if (!hostSupportSnapsthot(host)) {
          _snapshotDao.expunge(snapshotId);
          throw new CloudRuntimeException("KVM Snapshot is not supported on cluster: " + host.getId());
        }
      }
    }
    if (v.getInstanceId() != null) {
      UserVmVO userVm=_vmDao.findById(v.getInstanceId());
      if (userVm != null) {
        if (userVm.getState().equals(State.Destroyed) || userVm.getState().equals(State.Expunging)) {
          _snapshotDao.expunge(snapshotId);
          throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " is associated with vm:"+ userVm.getInstanceName()+ " is in "+ userVm.getState().toString()+ " state");
        }
      }
    }
    volume=_volsDao.acquireInLockTable(volumeId,10);
    if (volume == null) {
      _snapshotDao.expunge(snapshotId);
      volume=_volsDao.findById(volumeId);
      if (volume == null) {
        throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " doesn't exist");
      }
 else {
        volume=null;
        throw new CloudRuntimeException("Creating snapshot failed due to volume:" + volumeId + " is being used, try it later ");
      }
    }
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null) {
      if (snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
        backedUp=backupSnapshotToSecondaryStorage(snapshot);
      }
 else       if (snapshot.getStatus() == Snapshot.Status.BackedUp) {
        backedUp=true;
      }
      if (!backedUp) {
        throw new CloudRuntimeException("Created snapshot: " + snapshot + " on primary but failed to backup on secondary");
      }
    }
 else {
      throw new CloudRuntimeException("Failed to create snapshot: " + snapshot + " on primary storage");
    }
  }
  finally {
    if (snapshot != null) {
      postCreateSnapshot(volumeId,snapshot.getId(),policyId,backedUp);
      if (backedUp && (snapshot.getRemoved() == null)) {
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,v.getSize());
        _usageEventDao.persist(usageEvent);
      }
    }
 else     if (snapshot == null || !backedUp) {
      _accountMgr.decrementResourceCount(owner.getId(),ResourceType.snapshot);
    }
    if (volume != null) {
      _volsDao.releaseFromLockTable(volumeId);
    }
  }
  return snapshot;
}
