{
  Long volumeId=cmd.getVolumeId();
  Long policyId=cmd.getSnapshotPolicyId();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException("Failed to list snapshot schedule, unable to find a volume with id " + volumeId);
  }
  if (account != null) {
    long volAcctId=volume.getAccountId();
    if (isAdmin(account.getType())) {
      Account userAccount=_accountDao.findById(Long.valueOf(volAcctId));
      if (!_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException("Unable to list snapshot schedule for volume " + volumeId + ", permission denied.");
      }
    }
 else     if (account.getId() != volAcctId) {
      throw new PermissionDeniedException("Unable to list snapshot schedule, account " + account.getAccountName() + " does not own volume id "+ volAcctId);
    }
  }
  List<SnapshotScheduleVO> snapshotSchedules=new ArrayList<SnapshotScheduleVO>();
  if (policyId == null) {
    List<SnapshotPolicyVO> policyInstances=listPoliciesforVolume(volumeId);
    for (    SnapshotPolicyVO policyInstance : policyInstances) {
      SnapshotScheduleVO snapshotSchedule=_snapshotScheduleDao.getCurrentSchedule(volumeId,policyInstance.getId(),false);
      snapshotSchedules.add(snapshotSchedule);
    }
  }
 else {
    snapshotSchedules.add(_snapshotScheduleDao.getCurrentSchedule(volumeId,policyId,false));
  }
  return snapshotSchedules;
}
