{
  CreateSnapshotPayload payload=(CreateSnapshotPayload)volume.getpayload();
  Long snapshotId=payload.getSnapshotId();
  Account snapshotOwner=payload.getAccount();
  SnapshotInfo snapshot=snapshotFactory.getSnapshot(snapshotId,volume.getDataStore());
  snapshot.addPayload(payload);
  try {
    SnapshotStrategy snapshotStrategy=_storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.TAKE);
    if (snapshotStrategy == null) {
      throw new CloudRuntimeException("Can't find snapshot strategy to deal with snapshot:" + snapshotId);
    }
    snapshotStrategy.takeSnapshot(snapshot);
    try {
      postCreateSnapshot(volume.getId(),snapshotId,payload.getSnapshotPolicyId());
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
      SnapshotDataStoreVO snapshotStoreRef=_snapshotStoreDao.findBySnapshot(snapshotId,DataStoreRole.Image);
      _resourceLimitMgr.decrementResourceCount(snapshotOwner.getId(),ResourceType.secondary_storage,new Long(volume.getSize() - snapshotStoreRef.getSize()));
    }
 catch (    Exception e) {
      s_logger.debug("post process snapshot failed",e);
    }
  }
 catch (  Exception e) {
    s_logger.debug("Failed to create snapshot",e);
    _resourceLimitMgr.decrementResourceCount(snapshotOwner.getId(),ResourceType.snapshot);
    _resourceLimitMgr.decrementResourceCount(snapshotOwner.getId(),ResourceType.secondary_storage,new Long(volume.getSize()));
    throw new CloudRuntimeException("Failed to create snapshot",e);
  }
  return snapshot;
}
