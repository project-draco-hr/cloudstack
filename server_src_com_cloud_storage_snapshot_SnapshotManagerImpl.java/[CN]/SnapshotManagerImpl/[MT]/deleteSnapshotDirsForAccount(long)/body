{
  List<VolumeVO> volumes=_volsDao.findByAccount(accountId);
  boolean success=true;
  for (  VolumeVO volume : volumes) {
    if (volume.getPoolId() == null) {
      continue;
    }
    Long volumeId=volume.getId();
    Long dcId=volume.getDataCenterId();
    if (_snapshotDao.listByVolumeIdIncludingRemoved(volumeId).isEmpty()) {
      continue;
    }
    List<DataStore> ssHosts=dataStoreMgr.getImageStoresByScope(new ZoneScope(dcId));
    for (    DataStore ssHost : ssHosts) {
      String snapshotDir=TemplateConstants.DEFAULT_SNAPSHOT_ROOT_DIR + "/" + accountId+ "/"+ volumeId;
      DeleteSnapshotsDirCommand cmd=new DeleteSnapshotsDirCommand(ssHost.getTO(),snapshotDir);
      EndPoint ep=_epSelector.select(ssHost);
      Answer answer=null;
      if (ep == null) {
        String errMsg="No remote endpoint to send command, check if host or ssvm is down?";
        s_logger.error(errMsg);
        answer=new Answer(cmd,false,errMsg);
      }
 else {
        answer=ep.sendMessage(cmd);
      }
      if ((answer != null) && answer.getResult()) {
        s_logger.debug("Deleted all snapshots for volume: " + volumeId + " under account: "+ accountId);
      }
 else {
        success=false;
        if (answer != null) {
          s_logger.warn("Failed to delete all snapshot for volume " + volumeId + " on secondary storage "+ ssHost.getUri());
          s_logger.error(answer.getDetails());
        }
      }
    }
    List<SnapshotVO> snapshots=listSnapsforVolume(volumeId);
    for (    SnapshotVO snapshot : snapshots) {
      SnapshotStrategy snapshotStrategy=_storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.DELETE);
      if (snapshotStrategy == null) {
        s_logger.error("Unable to find snaphot strategy to handle snapshot with id '" + snapshot.getId() + "'");
        continue;
      }
      SnapshotDataStoreVO snapshotStoreRef=_snapshotStoreDao.findBySnapshot(snapshot.getId(),DataStoreRole.Image);
      if (snapshotStrategy.deleteSnapshot(snapshot.getId())) {
        if (snapshot.getRecurringType() == Type.MANUAL) {
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.snapshot);
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(snapshotStoreRef.getSize()));
        }
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshot.getId(),snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
      }
    }
  }
  return success;
}
