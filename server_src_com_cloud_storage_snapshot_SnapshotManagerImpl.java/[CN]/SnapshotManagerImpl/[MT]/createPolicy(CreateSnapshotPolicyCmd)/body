{
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException("Failed to create snapshot policy, unable to find a volume with id " + volumeId);
  }
  checkAccountPermissions(volume.getAccountId(),volume.getDomainId(),"volume",volumeId);
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(volume.getPoolId());
  if (storagePoolVO == null) {
    throw new InvalidParameterValueException("Failed to create snapshot policy, volumeId: " + volumeId + " does not have a valid storage pool. Is it destroyed?");
  }
  if (storagePoolVO.isLocal()) {
    throw new InvalidParameterValueException("Failed to create snapshot policy, cannot create a snapshot from a volume residing on a local storage pool, poolId: " + volume.getPoolId());
  }
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException("Failed to create snapshot policy, snapshots of volumes attached to System or router VM are not allowed");
    }
  }
  Long accountId=volume.getAccountId();
  Long userId=getSnapshotUserId();
  IntervalType type=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (type == null) {
    throw new InvalidParameterValueException("Unsupported interval type " + cmd.getIntervalType());
  }
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn("Using timezone: " + timezoneId + " for running this snapshot policy as an equivalent of "+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(type,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException("Invalid schedule: " + cmd.getSchedule() + " for interval type: "+ cmd.getIntervalType());
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException("maxSnaps exceeds limit: " + intervalMaxSnaps + " for interval type: "+ cmd.getIntervalType());
  }
  SnapshotPolicyVO policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,(short)type.ordinal(),intervalMaxSnaps);
  EventVO event=new EventVO();
  try {
    policy=_snapshotPolicyDao.persist(policy);
    event.setType(EventTypes.EVENT_SNAPSHOT_POLICY_CREATE);
    event.setDescription("Successfully created snapshot policy with Id: " + policy.getId());
  }
 catch (  EntityExistsException e) {
    policy=_snapshotPolicyDao.findOneByVolume(volumeId);
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)type.ordinal());
      policy.setMaxSnaps(intervalMaxSnaps);
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
    event.setType(EventTypes.EVENT_SNAPSHOT_POLICY_UPDATE);
    event.setDescription("Successfully updated snapshot policy with Id: " + policy.getId());
  }
  event.setAccountId(accountId);
  event.setUserId(userId);
  event.setLevel(EventVO.LEVEL_INFO);
  _eventDao.persist(event);
  _snapSchedMgr.scheduleNextSnapshotJob(policy);
  return policy;
}
