{
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException("Failed to create snapshot policy, unable to find a volume with id " + volumeId);
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException("VolumeId: " + volumeId + " is not in "+ Volume.State.Ready+ " state but "+ volume.getState()+ ". Cannot take snapshot.");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException("VolumeId: " + volumeId + " is for System VM , Creating snapshot against System VM volumes is not supported");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  DomainVO domain=_domainDao.findById(owner.getDomainId());
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException("Failed to create snapshot policy, snapshots of volumes attached to System or router VM are not allowed");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException("Unsupported interval type " + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn("Using timezone: " + timezoneId + " for running this snapshot policy as an equivalent of "+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException("Invalid schedule: " + cmd.getSchedule() + " for interval type: "+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException("maxSnaps should be greater than 0");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException("maxSnaps exceeds limit: " + intervalMaxSnaps + " for interval type: "+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner.getId(),ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(null,ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException("Max number of snapshots shouldn't exceed the domain/account level snapshot limit");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}
