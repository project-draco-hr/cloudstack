{
  Account caller=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException("Creating snapshot failed due to volume:" + volumeId + " doesn't exist");
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException("VolumeId: " + volumeId + " is not in "+ Volume.State.Ready+ " state but "+ volume.getState()+ ". Cannot take snapshot.");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException("VolumeId: " + volumeId + " is for System VM , Creating snapshot against System VM volumes is not supported");
    }
  }
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(volume.getPoolId());
  if (storagePoolVO == null) {
    throw new InvalidParameterValueException("VolumeId: " + volumeId + " please attach this volume to a VM before create snapshot for it");
  }
  ClusterVO cluster=_clusterDao.findById(storagePoolVO.getClusterId());
  if (cluster != null && cluster.getHypervisorType() == HypervisorType.Ovm) {
    throw new InvalidParameterValueException("Ovm won't support taking snapshot");
  }
  _accountMgr.checkAccess(caller,null,volume);
  Type snapshotType=getSnapshotType(policyId);
  Account owner=_accountMgr.getAccount(volume.getAccountId());
  try {
    _resourceLimitMgr.checkResourceLimit(owner,ResourceType.snapshot);
  }
 catch (  ResourceAllocationException e) {
    if (snapshotType != Type.MANUAL) {
      String msg="Snapshot resource limit exceeded for account id : " + owner.getId() + ". Failed to create recurring snapshots";
      s_logger.warn(msg);
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_UPDATE_RESOURCE_COUNT,0L,0L,msg,"Snapshot resource limit exceeded for account id : " + owner.getId() + ". Failed to create recurring snapshots; please use updateResourceLimit to increase the limit");
    }
    throw e;
  }
  String timeString=DateUtil.getDateDisplayString(DateUtil.GMT_TIMEZONE,new Date(),DateUtil.YYYYMMDD_FORMAT);
  VMInstanceVO vmInstance=_vmDao.findById(volume.getInstanceId());
  String vmDisplayName="detached";
  if (vmInstance != null) {
    vmDisplayName=vmInstance.getHostName();
  }
  String snapshotName=vmDisplayName + "_" + volume.getName()+ "_"+ timeString;
  HypervisorType hypervisorType=this._volsDao.getHypervisorType(volumeId);
  SnapshotVO snapshotVO=new SnapshotVO(volume.getDataCenterId(),volume.getAccountId(),volume.getDomainId(),volume.getId(),volume.getDiskOfferingId(),null,snapshotName,(short)snapshotType.ordinal(),snapshotType.name(),volume.getSize(),hypervisorType);
  SnapshotVO snapshot=_snapshotDao.persist(snapshotVO);
  if (snapshot == null) {
    throw new CloudRuntimeException("Failed to create snapshot for volume: " + volumeId);
  }
  return snapshot;
}
