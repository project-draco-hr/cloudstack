{
  String volumeFolder=String.valueOf(volumeId) + "/";
  VirtualMachineMO workerVm=null;
  VirtualMachineMO vmMo=null;
  String exportName=UUID.randomUUID().toString();
  try {
    ManagedObjectReference morDs=hyperHost.findDatastore(poolId);
    if (morDs == null) {
      String msg="Unable to find volumes's storage pool for copy volume operation";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      DatastoreMO dsMo=new DatastoreMO(hyperHost.getContext(),morDs);
      String workerVMName=UUID.randomUUID().toString().replaceAll("-","");
      VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
      vmConfig.setName(workerVMName);
      vmConfig.setMemoryMB((long)4);
      vmConfig.setNumCPUs(1);
      vmConfig.setGuestId(VirtualMachineGuestOsIdentifier._otherGuest.toString());
      VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
      fileInfo.setVmPathName(String.format("[%s]",dsMo.getName()));
      vmConfig.setFiles(fileInfo);
      VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
      scsiController.setSharedBus(VirtualSCSISharing.noSharing);
      scsiController.setBusNumber(0);
      scsiController.setKey(1);
      VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
      scsiControllerSpec.setDevice(scsiController);
      scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.add);
      vmConfig.setDeviceChange(new VirtualDeviceConfigSpec[]{scsiControllerSpec});
      hyperHost.createVm(vmConfig);
      workerVm=hyperHost.findVmOnHyperHost(workerVMName);
      if (workerVm == null) {
        String msg="Unable to create worker VM to execute CopyVolumeCommand";
        s_logger.error(msg);
        throw new Exception(msg);
      }
      String datastoreVolumePath=String.format("[%s] %s.vmdk",dsMo.getName(),volumePath);
      workerVm.attachDisk(new String[]{datastoreVolumePath},morDs);
      vmMo=workerVm;
    }
    vmMo.createSnapshot(exportName,"Temporary snapshot for copy-volume command",false,false);
    exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,"volumes/" + volumeFolder,exportName,workerVmName);
    return new Pair<String,String>(volumeFolder,exportName);
  }
  finally {
    vmMo.removeSnapshot(exportName,false);
    if (workerVm != null) {
      workerVm.detachAllDisks();
      workerVm.destroy();
    }
  }
}
