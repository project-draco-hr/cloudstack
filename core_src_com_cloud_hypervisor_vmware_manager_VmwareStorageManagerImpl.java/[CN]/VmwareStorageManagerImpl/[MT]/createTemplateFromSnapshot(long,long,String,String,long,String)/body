{
  String snapshotUuidName=UUID.randomUUID().toString();
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  String installPath=getTemplateRelativeDirInSecStorage(accountId,templateId);
  String installFullPath=secondaryMountPoint + "/" + installPath;
  String installFullName=installFullPath + "/" + snapshotUuidName+ ".ova";
  String snapshotFullName=secondaryMountPoint + "/" + getSnapshotRelativeDirInSecStorage(accountId,volumeId)+ "/"+ backedUpSnapshotUuid+ ".ova";
  String result;
  Script command;
synchronized (installPath.intern()) {
    command=new Script(false,"mkdir",_timeout,s_logger);
    command.add("-p");
    command.add(installFullPath);
    result=command.execute();
    if (result != null) {
      String msg="unable to prepare template directory: " + installPath + ", storage: "+ secStorageUrl+ ", error msg: "+ result;
      s_logger.error(msg);
      throw new Exception(msg);
    }
  }
  try {
    command=new Script(false,"cp",_timeout,s_logger);
    command.add(snapshotFullName);
    command.add(installFullName);
    result=command.execute();
    if (result != null) {
      String msg="unable to copy snapshot " + snapshotFullName + " to "+ installFullPath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    command=new Script("tar",0,s_logger);
    command.add("--no-same-owner");
    command.add("-xf",installFullName);
    command.setWorkDir(installFullPath);
    s_logger.info("Executing command: " + command.toString());
    result=command.execute();
    if (result != null) {
      String msg="unable to untar snapshot " + snapshotFullName + " to "+ installFullPath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    long physicalSize=new File(installFullPath + "/" + snapshotUuidName+ ".ova").length();
    VmdkProcessor processor=new VmdkProcessor();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,_storage);
    processor.configure("VMDK Processor",params);
    long virtualSize=processor.getTemplateVirtualSize(installFullPath,snapshotUuidName);
    postCreatePrivateTemplate(installFullPath,templateId,snapshotUuidName,physicalSize,virtualSize);
    return new Ternary<String,Long,Long>(installPath + "/" + snapshotUuidName+ ".ova",physicalSize,virtualSize);
  }
 catch (  Exception e) {
    throw e;
  }
}
