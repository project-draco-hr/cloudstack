{
  Long accountId=cmd.getAccountId();
  Long volumeId=cmd.getVolumeId();
  String secondaryStoragePoolURL=cmd.getSecondaryStoragePoolURL();
  String snapshotUuid=cmd.getSnapshotUuid();
  String prevSnapshotUuid=cmd.getPrevSnapshotUuid();
  String prevBackupUuid=cmd.getPrevBackupUuid();
  VirtualMachineMO workerVm=null;
  String workerVMName=null;
  String volumePath=cmd.getVolumePath();
  ManagedObjectReference morDs=null;
  String snapshotUUID=null;
  DatastoreMO dsMo=null;
  String details=null;
  boolean success=false;
  String snapshotBackupUuid=null;
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    morDs=hyperHost.findDatastore(cmd.getPool().getUuid());
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(cmd.getVmName());
    if (vmMo == null) {
      if (s_logger.isDebugEnabled())       s_logger.debug("Unable to find owner VM for BackupSnapshotCommand on host " + hyperHost.getHyperHostName() + ", will try within datacenter");
      vmMo=hyperHost.findVmOnPeerHyperHost(cmd.getVmName());
      if (vmMo == null) {
        dsMo=new DatastoreMO(hyperHost.getContext(),morDs);
        workerVMName=UUID.randomUUID().toString().replaceAll("-","");
        if (!hyperHost.createBlankVm(workerVMName,1,512,0,false,4,VirtualMachineGuestOsIdentifier._otherGuest.toString(),morDs,false)) {
          String msg="Unable to create worker VM to execute BackupSnapshotCommand";
          s_logger.error(msg);
          throw new Exception(msg);
        }
        vmMo=hyperHost.findVmOnHyperHost(workerVMName);
        if (vmMo == null) {
          throw new Exception("Failed to find the newly create or relocated VM. vmName: " + workerVMName);
        }
        workerVm=vmMo;
        String datastoreVolumePath=String.format("[%s] %s.vmdk",dsMo.getName(),volumePath);
        vmMo.attachDisk(new String[]{datastoreVolumePath},morDs);
        snapshotUUID=UUID.randomUUID().toString();
        if (!vmMo.createSnapshot(snapshotUUID,"Snapshot taken for " + cmd.getSnapshotName(),false,false)) {
          throw new Exception("Failed to take snapshot " + cmd.getSnapshotName() + " on vm: "+ cmd.getVmName());
        }
      }
    }
    snapshotBackupUuid=backupSnapshotToSecondaryStorage(vmMo,accountId,volumeId,cmd.getVolumePath(),snapshotUuid,secondaryStoragePoolURL,prevSnapshotUuid,prevBackupUuid,hostService.getWorkerName(context,cmd));
    success=(snapshotBackupUuid != null);
    if (success) {
      details="Successfully backedUp the snapshotUuid: " + snapshotUuid + " to secondary storage.";
      vmMo.removeAllSnapshots();
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error("Unexpecpted exception ",e);
    details="BackupSnapshotCommand exception: " + StringUtils.getExceptionStackInfo(e);
    return new BackupSnapshotAnswer(cmd,false,details,snapshotBackupUuid,true);
  }
 finally {
    try {
      if (workerVm != null) {
        workerVm.moveAllVmDiskFiles(dsMo,"",false);
        workerVm.detachAllDisks();
        workerVm.destroy();
      }
    }
 catch (    Throwable e) {
      s_logger.warn("Failed to destroy worker VM: " + workerVMName);
    }
  }
  return new BackupSnapshotAnswer(cmd,success,details,snapshotBackupUuid,true);
}
