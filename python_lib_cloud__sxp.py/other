"\nInput-driven parsing for s-expression (sxp) format.\nCreate a parser: pin = Parser();\nThen call pin.input(buf) with your input.\nCall pin.input_eof() when done.\nUse pin.read() to see if a value has been parsed, pin.get_val()\nto get a parsed value. You can call ready and get_val at any time -\nyou don't have to wait until after calling input_eof.\n\n"
from __future__ import generators
import sys
import types
import errno
import string
from StringIO import StringIO
__all__ = ['mime_type', 'ParseError', 'Parser', 'atomp', 'show', 'show_xml', 'elementp', 'name', 'attributes', 'attribute', 'children', 'child', 'child_at', 'child0', 'child1', 'child2', 'child3', 'child4', 'child_value', 'has_id', 'with_id', 'child_with_id', 'elements', 'merge', 'to_string', 'from_string', 'all_from_string', 'parse']
mime_type = 'application/sxp'
escapes = {'a': '\x07', 'b': '\x08', 't': '\t', 'n': '\n', 'v': '\x0b', 'f': '\x0c', 'r': '\r', '\\': '\\', "'": "'", '"': '"', }
k_list_open = '('
k_list_close = ')'
k_attr_open = '@'
k_eval = '!'
escapes_rev = {}
for k in escapes:
    escapes_rev[escapes[k]] = k
if (__name__ == '__main__'):
    print '>main'
    pin = Parser()
    while 1:
        buf = sys.stdin.read(1024)
        pin.input(buf)
        while pin.ready():
            val = pin.get_val()
            print 
            print '****** val=', val
        if (len(buf) == 0):
            break
