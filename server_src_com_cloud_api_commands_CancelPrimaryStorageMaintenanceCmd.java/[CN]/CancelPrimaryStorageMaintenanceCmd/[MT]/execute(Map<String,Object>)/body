{
  Long storagePoolId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  StoragePoolVO storagePool=getManagementServer().findPoolById(storagePoolId);
  if (storagePool == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Primary storage with id " + storagePoolId + " doesn't exist");
  }
  if (!storagePool.getStatus().equals(Status.Maintenance)) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Primary storage with id " + storagePoolId + " is not ready for migration, as the status is:"+ storagePool.getStatus().toString());
  }
  long jobId=0;
  try {
    jobId=getManagementServer().cancelPrimaryStorageMaintenanceAsync(storagePoolId);
  }
 catch (  InvalidParameterValueException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to cancel primary storage maintenance: " + e.getMessage());
  }
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for CancelPrimaryStorageMaintenance command");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("CancelPrimaryStorageMaintenance command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),Status.PrepareForMaintenance));
  return returnValues;
}
