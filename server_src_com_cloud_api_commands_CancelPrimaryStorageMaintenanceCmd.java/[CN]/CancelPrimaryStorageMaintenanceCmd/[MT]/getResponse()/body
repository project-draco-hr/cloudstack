{
  StoragePoolVO primaryStorage=(StoragePoolVO)getResponseObject();
  StoragePoolResponse response=new StoragePoolResponse();
  response.setId(primaryStorage.getId());
  response.setName(primaryStorage.getName());
  response.setType(primaryStorage.getPoolType().toString());
  response.setState(primaryStorage.getStatus().toString());
  response.setIpAddress(primaryStorage.getHostAddress());
  response.setZoneId(primaryStorage.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(primaryStorage.getDataCenterId()).getName());
  if (response.getPodId() != null && ApiDBUtils.findPodById(primaryStorage.getPodId()) != null) {
    response.setPodId(primaryStorage.getPodId());
    response.setPodName((ApiDBUtils.findPodById(primaryStorage.getPodId())).getName());
  }
  if (primaryStorage.getCreated() != null) {
    response.setCreated(primaryStorage.getCreated());
  }
  response.setDiskSizeTotal(primaryStorage.getCapacityBytes());
  StorageStats stats=ApiDBUtils.getStoragePoolStatistics(primaryStorage.getId());
  long capacity=primaryStorage.getCapacityBytes();
  long available=primaryStorage.getAvailableBytes();
  long used=capacity - available;
  if (stats != null) {
    used=stats.getByteUsed();
    available=capacity - used;
  }
  response.setDiskSizeAllocated(used);
  if (primaryStorage.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(primaryStorage.getClusterId());
    response.setClusterId(primaryStorage.getClusterId());
    response.setClusterName(cluster.getName());
  }
  response.setTags(ApiDBUtils.getStoragePoolTags(primaryStorage.getId()));
  response.setResponseName(getName());
  return response;
}
