{
  try {
    List<CloudStackTemplate> result=new ArrayList<CloudStackTemplate>();
    if (templateId != null) {
      List<CloudStackTemplate> template=getApi().listTemplates("executable",null,null,null,templateId,null,null,null);
      if (template != null) {
        result.addAll(template);
      }
    }
 else {
      List<CloudStackTemplate> selfExecutable=getApi().listTemplates("selfexecutable",null,null,null,null,null,null,null);
      if (selfExecutable != null) {
        result.addAll(selfExecutable);
      }
      List<CloudStackTemplate> featured=getApi().listTemplates("featured",null,null,null,null,null,null,null);
      if (featured != null) {
        result.addAll(featured);
      }
      List<CloudStackTemplate> sharedExecutable=getApi().listTemplates("sharedexecutable",null,null,null,null,null,null,null);
      if (sharedExecutable != null) {
        result.addAll(sharedExecutable);
      }
      List<CloudStackTemplate> community=getApi().listTemplates("community",null,null,null,null,null,null,null);
      if (community != null) {
        result.addAll(community);
      }
    }
    if (result != null && result.size() > 0) {
      for (      CloudStackTemplate temp : result) {
        EC2Image ec2Image=new EC2Image();
        ec2Image.setId(temp.getId().toString());
        ec2Image.setAccountName(temp.getAccount());
        ec2Image.setName(temp.getName());
        ec2Image.setDescription(temp.getDisplayText());
        ec2Image.setOsTypeId(temp.getOsTypeId().toString());
        ec2Image.setIsPublic(temp.getIsPublic());
        ec2Image.setState(temp.getIsReady() ? "available" : "pending");
        ec2Image.setDomainId(temp.getDomainId());
        if (temp.getHyperVisor().equalsIgnoreCase("xenserver"))         ec2Image.setHypervisor("xenserver");
 else         if (temp.getHyperVisor().equalsIgnoreCase("ovm"))         ec2Image.setHypervisor("ovm");
 else         ec2Image.setHypervisor("");
        if (temp.getDisplayText() == null)         ec2Image.setArchitecture("");
 else         if (temp.getDisplayText().indexOf("x86_64") != -1)         ec2Image.setArchitecture("x86_64");
 else         if (temp.getDisplayText().indexOf("i386") != -1)         ec2Image.setArchitecture("i386");
 else         ec2Image.setArchitecture("");
        List<CloudStackKeyValue> resourceTags=temp.getTags();
        for (        CloudStackKeyValue resourceTag : resourceTags) {
          EC2TagKeyValue param=new EC2TagKeyValue();
          param.setKey(resourceTag.getKey());
          if (resourceTag.getValue() != null)           param.setValue(resourceTag.getValue());
          ec2Image.addResourceTag(param);
        }
        images.addImage(ec2Image);
      }
    }
    return images;
  }
 catch (  Exception e) {
    logger.error("List Templates - ",e);
    throw new Exception(e.getMessage() != null ? e.getMessage() : e.toString());
  }
}
