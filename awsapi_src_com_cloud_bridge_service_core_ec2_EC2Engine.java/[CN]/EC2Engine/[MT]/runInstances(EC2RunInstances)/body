{
  EC2RunInstancesResponse instances=new EC2RunInstancesResponse();
  int createInstances=0;
  int canCreateInstances=-1;
  int countCreated=0;
  String groupIds=null;
  String groupNames=null;
  try {
    canCreateInstances=calculateAllowedInstances();
    if (-1 == canCreateInstances)     canCreateInstances=request.getMaxCount();
    if (canCreateInstances < request.getMinCount()) {
      logger.info("EC2 RunInstances - min count too big (" + request.getMinCount() + "), "+ canCreateInstances+ " left to allocate");
      throw new Exception("Min Count is greater than the number of instances left to allocate");
    }
    if (canCreateInstances < request.getMaxCount())     createInstances=request.getMinCount();
 else     createInstances=request.getMaxCount();
    String instanceType="m1.small";
    if (request.getInstanceType() != null) {
      instanceType=request.getInstanceType();
    }
    CloudStackServiceOfferingVO svcOffering=getCSServiceOfferingId(instanceType);
    if (svcOffering == null) {
      logger.info("No ServiceOffering found to be defined by name, please contact the administrator " + instanceType);
      throw new Exception("instanceType not found");
    }
    String zoneId=toZoneId(request.getZoneName(),null);
    List<CloudStackZone> zones=getApi().listZones(null,null,zoneId,null);
    if (zones == null || zones.size() == 0) {
      logger.info("EC2 RunInstances - zone [" + request.getZoneName() + "] not found!");
      throw new Exception("zone not found");
    }
    CloudStackZone zone=zones.get(0);
    String[] sgIdList=request.getSecurityGroupIdSet();
    String[] sgNameList=request.getSecurityGroupNameSet();
    if (sgIdList.length != 0 && sgNameList.length != 0)     throw new EC2ServiceException(ClientError.InvalidParameterCombination," for EC2 groups either a group ID or a group name is accepted");
    if (sgIdList.length != 0)     groupIds=constructList(sgIdList);
    if (sgNameList.length != 0)     groupNames=constructList(sgNameList);
    for (int i=0; i < createInstances; i++) {
      try {
        CloudStackUserVm resp=getApi().deployVirtualMachine(svcOffering.getId(),request.getTemplateId(),zoneId,null,null,null,null,null,null,null,request.getKeyName(),null,null,groupIds,groupNames,request.getSize().longValue(),request.getUserData());
        EC2Instance vm=new EC2Instance();
        vm.setId(resp.getId().toString());
        vm.setName(resp.getName());
        vm.setZoneName(resp.getZoneName());
        vm.setTemplateId(resp.getTemplateId().toString());
        if (resp.getSecurityGroupList() != null && resp.getSecurityGroupList().size() > 0) {
          List<CloudStackSecurityGroup> securityGroupList=resp.getSecurityGroupList();
          for (          CloudStackSecurityGroup securityGroup : securityGroupList) {
            EC2SecurityGroup param=new EC2SecurityGroup();
            param.setId(securityGroup.getId());
            param.setName(securityGroup.getName());
            vm.addGroupName(param);
          }
        }
        vm.setState(resp.getState());
        vm.setCreated(resp.getCreated());
        List<CloudStackNic> nicList=resp.getNics();
        for (        CloudStackNic nic : nicList) {
          if (nic.getIsDefault()) {
            vm.setPrivateIpAddress(nic.getIpaddress());
            break;
          }
        }
        vm.setIpAddress(resp.getIpAddress());
        vm.setAccountName(resp.getAccountName());
        vm.setDomainId(resp.getDomainId());
        vm.setHypervisor(mapToAmazonHypervisorType(resp.getHypervisor()));
        vm.setServiceOffering(svcOffering.getName());
        vm.setKeyPairName(resp.getKeyPairName());
        instances.addInstance(vm);
        countCreated++;
      }
 catch (      Exception e) {
        logger.error("Failed to deploy VM number: " + (i + 1) + " due to error: "+ e.getMessage());
        break;
      }
    }
    if (0 == countCreated) {
      throw new Exception("Insufficient Instance Capacity");
    }
    logger.debug("Could deploy " + countCreated + " VM's successfully");
  }
 catch (  Exception e) {
    logger.error("EC2 RunInstances - ",e);
    handleException(e);
  }
  return instances;
}
