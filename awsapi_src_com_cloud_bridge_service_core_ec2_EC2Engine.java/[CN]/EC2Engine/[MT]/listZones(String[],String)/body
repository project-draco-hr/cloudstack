{
  EC2DescribeAvailabilityZonesResponse zones=new EC2DescribeAvailabilityZonesResponse();
  List<CloudStackZone> cloudZones=getApi().listZones(true,domainId,null,null);
  if (cloudZones != null && cloudZones.size() > 0) {
    for (    CloudStackZone cloudZone : cloudZones) {
      boolean matched=false;
      if (interestedZones.length > 0) {
        for (        String zoneName : interestedZones) {
          if (zoneName.equalsIgnoreCase(cloudZone.getName())) {
            matched=true;
            break;
          }
        }
      }
 else {
        matched=true;
      }
      if (!matched)       continue;
      EC2AvailabilityZone ec2Zone=new EC2AvailabilityZone();
      ec2Zone.setId(cloudZone.getId().toString());
      ec2Zone.setMessage(cloudZone.getAllocationState());
      ec2Zone.setName(cloudZone.getName());
      zones.addAvailabilityZone(ec2Zone);
    }
  }
  return zones;
}
