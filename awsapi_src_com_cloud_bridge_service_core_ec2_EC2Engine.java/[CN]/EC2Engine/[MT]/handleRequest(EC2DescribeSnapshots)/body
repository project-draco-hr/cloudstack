{
  EC2SnapshotFilterSet sfs=request.getFilterSet();
  EC2TagKeyValue[] tagKeyValueSet=request.getResourceTagSet();
  try {
    EC2DescribeSnapshotsResponse response=listSnapshots(request.getSnapshotSet(),getResourceTags(tagKeyValueSet));
    if (response == null) {
      return new EC2DescribeSnapshotsResponse();
    }
    EC2Snapshot[] snapshots=response.getSnapshotSet();
    HashMap<String,Long> volumeIdSize=new HashMap<String,Long>();
    for (    EC2Snapshot snap : snapshots) {
      Boolean duplicateVolume=false;
      Long size=null;
      if (volumeIdSize.containsKey(snap.getVolumeId())) {
        size=volumeIdSize.get(snap.getVolumeId());
        duplicateVolume=true;
        break;
      }
      if (!duplicateVolume) {
        EC2DescribeVolumesResponse volumes=new EC2DescribeVolumesResponse();
        volumes=listVolumes(snap.getVolumeId(),null,volumes,null);
        EC2Volume[] volumeSet=volumes.getVolumeSet();
        if (volumeSet.length > 0)         size=volumeSet[0].getSize();
        volumeIdSize.put(snap.getVolumeId(),size);
      }
      snap.setVolumeSize(size);
    }
    if (null == sfs)     return response;
 else     return sfs.evaluate(response);
  }
 catch (  EC2ServiceException error) {
    logger.error("EC2 DescribeSnapshots - ",error);
    throw error;
  }
catch (  Exception e) {
    logger.error("EC2 DescribeSnapshots - ",e);
    throw new EC2ServiceException(ServerError.InternalError,"An unexpected error occurred.");
  }
}
