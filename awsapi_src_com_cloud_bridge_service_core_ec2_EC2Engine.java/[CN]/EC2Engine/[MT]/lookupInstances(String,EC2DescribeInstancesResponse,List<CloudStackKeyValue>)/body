{
  String instId=instanceId != null ? instanceId : null;
  List<CloudStackUserVm> vms=getApi().listVirtualMachines(null,null,true,null,null,null,null,instId,null,null,null,null,null,null,null,null,resourceTagSet);
  if (vms != null && vms.size() > 0) {
    for (    CloudStackUserVm cloudVm : vms) {
      EC2Instance ec2Vm=new EC2Instance();
      ec2Vm.setId(cloudVm.getId().toString());
      ec2Vm.setName(cloudVm.getName());
      ec2Vm.setZoneName(cloudVm.getZoneName());
      ec2Vm.setTemplateId(cloudVm.getTemplateId().toString());
      ec2Vm.setGroup(cloudVm.getGroup());
      ec2Vm.setState(cloudVm.getState());
      ec2Vm.setCreated(cloudVm.getCreated());
      ec2Vm.setIpAddress(cloudVm.getIpAddress());
      ec2Vm.setAccountName(cloudVm.getAccountName());
      ec2Vm.setDomainId(cloudVm.getDomainId());
      ec2Vm.setHypervisor(cloudVm.getHypervisor());
      ec2Vm.setRootDeviceType(cloudVm.getRootDeviceType());
      ec2Vm.setRootDeviceId(cloudVm.getRootDeviceId());
      ec2Vm.setServiceOffering(serviceOfferingIdToInstanceType(cloudVm.getServiceOfferingId().toString()));
      ec2Vm.setKeyPairName(cloudVm.getKeyPairName());
      List<CloudStackNic> nics=cloudVm.getNics();
      for (      CloudStackNic nic : nics) {
        if (nic.getIsDefault()) {
          ec2Vm.setPrivateIpAddress(nic.getIpaddress());
          break;
        }
      }
      List<CloudStackKeyValue> resourceTags=cloudVm.getTags();
      for (      CloudStackKeyValue resourceTag : resourceTags) {
        EC2TagKeyValue param=new EC2TagKeyValue();
        param.setKey(resourceTag.getKey());
        if (resourceTag.getValue() != null)         param.setValue(resourceTag.getValue());
        ec2Vm.addResourceTag(param);
      }
      if (cloudVm.getSecurityGroupList() != null && cloudVm.getSecurityGroupList().size() > 0) {
        List<CloudStackSecurityGroup> securityGroupList=cloudVm.getSecurityGroupList();
        for (        CloudStackSecurityGroup securityGroup : securityGroupList) {
          EC2SecurityGroup param=new EC2SecurityGroup();
          param.setId(securityGroup.getId());
          param.setName(securityGroup.getName());
          ec2Vm.addGroupName(param);
        }
      }
      instances.addInstance(ec2Vm);
    }
  }
 else {
    if (instanceId != null) {
      throw new EC2ServiceException(ServerError.InternalError,"Instance:" + instanceId + " not found");
    }
  }
  return instances;
}
