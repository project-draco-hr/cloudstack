{
  try {
    CloudStackAccount caller=getCurrentAccount();
    String snapshotId=request.getSnapshotId();
    Long size=request.getSize();
    String diskOfferingId=null;
    if (snapshotId == null) {
      List<CloudStackDiskOffering> disks=getApi().listDiskOfferings(null,null,null,null);
      for (      CloudStackDiskOffering offer : disks) {
        if (offer.isCustomized()) {
          diskOfferingId=offer.getId();
        }
      }
      if (diskOfferingId == null)       throw new EC2ServiceException(ServerError.InternalError,"No Customize Disk Offering Found");
    }
    CloudStackVolume vol=getApi().createVolume(UUID.randomUUID().toString(),null,diskOfferingId,null,size,snapshotId,toZoneId(request.getZoneName(),null));
    if (vol != null) {
      EC2Volume resp=new EC2Volume();
      resp.setAttached(vol.getAttached());
      resp.setCreated(vol.getCreated());
      resp.setDeviceId(vol.getDeviceId());
      resp.setHypervisor(vol.getHypervisor());
      resp.setId(vol.getId());
      resp.setInstanceId(vol.getVirtualMachineId());
      resp.setSize(vol.getSize());
      resp.setSnapshotId(vol.getSnapshotId());
      resp.setState(vol.getState());
      resp.setType(vol.getVolumeType());
      resp.setVMState(vol.getVirtualMachineState());
      resp.setZoneName(vol.getZoneName());
      return resp;
    }
    return null;
  }
 catch (  Exception e) {
    logger.error("EC2 CreateVolume - ",e);
    throw new EC2ServiceException(ServerError.InternalError,e.getMessage() != null ? e.getMessage() : "An unexpected error occurred.");
  }
}
