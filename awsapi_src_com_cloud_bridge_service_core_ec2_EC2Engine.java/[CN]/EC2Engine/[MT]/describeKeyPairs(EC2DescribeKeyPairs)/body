{
  try {
    EC2KeyPairFilterSet filterSet=request.getKeyFilterSet();
    String[] keyNames=request.getKeyNames();
    List<CloudStackKeyPair> keyPairs=getApi().listSSHKeyPairs(null,null,null);
    List<EC2SSHKeyPair> keyPairsList=new ArrayList<EC2SSHKeyPair>();
    if (keyPairs != null) {
      List<CloudStackKeyPair> matchedKeyPairs=new ArrayList<CloudStackKeyPair>();
      if (keyNames != null && keyNames.length > 0) {
        for (        CloudStackKeyPair keyPair : keyPairs) {
          boolean matched=false;
          for (          String keyName : keyNames) {
            if (keyPair.getName().equalsIgnoreCase(keyName)) {
              matched=true;
              break;
            }
          }
          if (matched) {
            matchedKeyPairs.add(keyPair);
          }
        }
        if (matchedKeyPairs.isEmpty()) {
          throw new EC2ServiceException(ServerError.InternalError,"No matching keypairs found");
        }
      }
 else {
        matchedKeyPairs=keyPairs;
      }
      for (      CloudStackKeyPair respKeyPair : matchedKeyPairs) {
        EC2SSHKeyPair ec2KeyPair=new EC2SSHKeyPair();
        ec2KeyPair.setFingerprint(respKeyPair.getFingerprint());
        ec2KeyPair.setKeyName(respKeyPair.getName());
        ec2KeyPair.setPrivateKey(respKeyPair.getPrivatekey());
        keyPairsList.add(ec2KeyPair);
      }
    }
    return filterSet.evaluate(keyPairsList);
  }
 catch (  Exception e) {
    logger.error("EC2 DescribeKeyPairs - ",e);
    throw new EC2ServiceException(ServerError.InternalError,e.getMessage());
  }
}
