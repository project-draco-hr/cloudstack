{
  if (null == request.getName())   throw new EC2ServiceException(ServerError.InternalError,"Name is a required parameter");
  EC2IpPermission[] items=request.getIpPermissionSet();
  try {
    for (    EC2IpPermission ipPerm : items) {
      EC2SecurityGroup[] groups=ipPerm.getUserSet();
      List<CloudStackKeyValue> secGroupList=new ArrayList<CloudStackKeyValue>();
      for (      EC2SecurityGroup group : groups) {
        CloudStackKeyValue pair=new CloudStackKeyValue();
        pair.setKeyValue(group.getAccount(),group.getName());
        secGroupList.add(pair);
      }
      CloudStackSecurityGroup resp=null;
      if (ipPerm.getProtocol().equalsIgnoreCase("icmp")) {
        resp=getApi().authorizeSecurityGroupIngress(null,constructList(ipPerm.getIpRangeSet()),null,null,ipPerm.getIcmpCode(),ipPerm.getIcmpType(),ipPerm.getProtocol(),null,request.getName(),null,secGroupList);
      }
 else {
        resp=getApi().authorizeSecurityGroupIngress(null,constructList(ipPerm.getIpRangeSet()),null,ipPerm.getToPort().longValue(),null,null,ipPerm.getProtocol(),null,request.getName(),ipPerm.getFromPort().longValue(),secGroupList);
      }
      if (resp != null) {
        List<CloudStackIngressRule> ingressRules=resp.getIngressRules();
        for (        CloudStackIngressRule ingressRule : ingressRules)         if (ingressRule.getRuleId() == null)         return false;
      }
 else {
        return false;
      }
    }
  }
 catch (  Exception e) {
    logger.error("EC2 AuthorizeSecurityGroupIngress - ",e);
    throw new EC2ServiceException(ServerError.InternalError,e.getMessage());
  }
  return true;
}
