{
  try {
    String[] groupSet=new String[1];
    groupSet[0]=request.getName();
    String ruleId=null;
    EC2IpPermission[] items=request.getIpPermissionSet();
    EC2DescribeSecurityGroupsResponse response=listSecurityGroups(groupSet);
    EC2SecurityGroup[] groups=response.getGroupSet();
    if (groups.length == 0) {
      throw new Exception("Unable to find security group name");
    }
    for (    EC2SecurityGroup group : groups) {
      EC2IpPermission[] perms=group.getIpPermissionSet();
      for (      EC2IpPermission perm : perms) {
        ruleId=doesRuleMatch(items[0],perm);
        if (ruleId != null)         break;
      }
    }
    if (null == ruleId)     throw new Exception("Specified Ip permission is invalid");
    CloudStackInfoResponse resp=getApi().revokeSecurityGroupIngress(ruleId);
    if (resp != null) {
      return resp.getSuccess();
    }
  }
 catch (  Exception e) {
    logger.error("EC2 revokeSecurityGroupIngress" + " - " + e.getMessage());
    handleException(e);
  }
  return false;
}
