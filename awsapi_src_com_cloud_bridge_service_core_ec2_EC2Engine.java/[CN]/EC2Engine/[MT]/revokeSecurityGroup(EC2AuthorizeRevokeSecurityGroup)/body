{
  if (null == request.getName())   throw new EC2ServiceException(ServerError.InternalError,"Name is a required parameter");
  try {
    String[] groupSet=new String[1];
    groupSet[0]=request.getName();
    String ruleId=null;
    EC2IpPermission[] items=request.getIpPermissionSet();
    EC2DescribeSecurityGroupsResponse response=listSecurityGroups(groupSet);
    EC2SecurityGroup[] groups=response.getGroupSet();
    for (    EC2SecurityGroup group : groups) {
      EC2IpPermission[] perms=group.getIpPermissionSet();
      for (      EC2IpPermission perm : perms) {
        ruleId=doesRuleMatch(items[0],perm);
        if (ruleId != null)         break;
      }
    }
    if (null == ruleId)     throw new EC2ServiceException(ClientError.InvalidGroup_NotFound,"Cannot find matching ruleid.");
    CloudStackInfoResponse resp=getApi().revokeSecurityGroupIngress(ruleId);
    if (resp != null && resp.getId() != null) {
      return resp.getSuccess();
    }
    return false;
  }
 catch (  Exception e) {
    logger.error("EC2 revokeSecurityGroupIngress" + " - " + e.getMessage());
    throw new EC2ServiceException(ServerError.InternalError,e.getMessage());
  }
}
