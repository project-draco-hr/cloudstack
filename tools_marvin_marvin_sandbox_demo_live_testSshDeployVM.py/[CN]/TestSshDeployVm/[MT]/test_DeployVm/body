def test_DeployVm(self):
    "\n        Let's start by defining the attributes of our VM that we will be\n        deploying on CloudStack. We will be assuming a single zone is available\n        and is configured and all templates are Ready\n\n        The hardcoded values are used only for brevity. \n        "
    deployVmCmd = deployVirtualMachine.deployVirtualMachineCmd()
    deployVmCmd.zoneid = self.zone.uuid
    deployVmCmd.templateid = self.template.uuid
    deployVmCmd.serviceofferingid = self.service_offering.uuid
    deployVmResponse = self.apiClient.deployVirtualMachine(deployVmCmd)
    self.debug(('VM %s was deployed in the job %s' % (deployVmResponse.id, deployVmResponse.jobid)))
    listVmCmd = listVirtualMachines.listVirtualMachinesCmd()
    listVmCmd.id = deployVmResponse.id
    listVmResponse = self.apiClient.listVirtualMachines(listVmCmd)
    self.assertNotEqual(len(listVmResponse), 0, 'Check if the list API                             returns a non-empty response')
    vm = listVmResponse[0]
    self.assertEqual(vm.state, 'Running', 'Check if VM has reached Running state in CS')
    hostname = vm.name
    nattedip = self.setUpNAT(vm.id)
    self.assertEqual(vm.id, deployVmResponse.id, 'Check if the VM returned                          is the same as the one we deployed')
    self.assertEqual(vm.state, 'Running', 'Check if VM has reached                          a state of running')
    self.debug(('Attempting to SSH into %s over %s of %s' % (nattedip, '22', vm.name)))
    ssh_client = remoteSSHClient(nattedip, '22', 'root', 'password')
    stdout = ssh_client.execute('hostname')
    self.assertEqual(hostname, stdout[0], 'cloudstack VM name and hostname                          do not match')
