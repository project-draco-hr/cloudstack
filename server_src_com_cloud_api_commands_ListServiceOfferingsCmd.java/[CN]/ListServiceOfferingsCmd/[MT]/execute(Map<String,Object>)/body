{
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("created",Boolean.FALSE,startIndex,Long.valueOf(pageSizeNum));
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.NAME,name);
  }
  if (vmId != null) {
    UserVmVO vmInstance=getManagementServer().findUserVMInstanceById(vmId.longValue());
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"unable to find a virtual machine with id " + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"unable to find a virtual machine with id " + vmId + " for this account");
      }
    }
    if (keyword == null)     c.addCriteria(Criteria.INSTANCEID,vmId);
  }
  List<ServiceOfferingVO> offerings=getManagementServer().searchForServiceOfferings(c);
  if (offerings == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"unable to find service offerings");
  }
  List<Pair<String,Object>> offeringTags=new ArrayList<Pair<String,Object>>();
  Object[] soTag=new Object[offerings.size()];
  int i=0;
  for (  ServiceOfferingVO offering : offerings) {
    List<Pair<String,Object>> offeringData=new ArrayList<Pair<String,Object>>();
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(offering.getId())));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),offering.getName()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),offering.getDisplayText()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_NUMBER.getName(),Integer.valueOf(offering.getCpu()).toString()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_SPEED.getName(),Integer.valueOf(offering.getSpeed()).toString()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY.getName(),Integer.valueOf(offering.getRamSize()).toString()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(offering.getCreated())));
    String storageType=offering.getUseLocalStorage() ? "local" : "shared";
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE_TYPE.getName(),storageType));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.OFFER_HA.getName(),offering.getOfferHA()));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.USE_VIRTUAL_NETWORK.getName(),(offering.getGuestIpType().equals(NetworkOffering.GuestIpType.Virtualized))));
    offeringData.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),(offering.getTags())));
    soTag[i++]=offeringData;
  }
  Pair<String,Object> offeringTag=new Pair<String,Object>("serviceoffering",soTag);
  offeringTags.add(offeringTag);
  return offeringTags;
}
