{
  KeystoreVO keyStoreVO=_ksDao.findByName(SAMLUtils.CERTIFICATE_NAME);
  if (keyStoreVO == null) {
    try {
      KeyPair keyPair=SAMLUtils.generateRandomKeyPair();
      _ksDao.save(SAMLUtils.CERTIFICATE_NAME,SAMLUtils.savePrivateKey(keyPair.getPrivate()),SAMLUtils.savePublicKey(keyPair.getPublic()),"saml-sp");
      keyStoreVO=_ksDao.findByName(SAMLUtils.CERTIFICATE_NAME);
    }
 catch (    NoSuchProviderException|NoSuchAlgorithmException e) {
      s_logger.error("Unable to create and save SAML keypair");
    }
  }
  if (keyStoreVO != null) {
    PrivateKey privateKey=SAMLUtils.loadPrivateKey(keyStoreVO.getCertificate());
    PublicKey publicKey=SAMLUtils.loadPublicKey(keyStoreVO.getKey());
    if (privateKey != null && publicKey != null) {
      spKeyPair=new KeyPair(publicKey,privateKey);
      try {
        spX509Key=SAMLUtils.generateRandomX509Certificate(spKeyPair);
      }
 catch (      NoSuchAlgorithmException|NoSuchProviderException|CertificateEncodingException|SignatureException|InvalidKeyException e) {
        s_logger.error("SAML Plugin won't be able to use X509 signed authentication");
      }
    }
  }
  this.serviceProviderId=_configDao.getValue(Config.SAMLServiceProviderID.key());
  this.identityProviderId=_configDao.getValue(Config.SAMLIdentityProviderID.key());
  this.spSingleSignOnUrl=_configDao.getValue(Config.SAMLServiceProviderSingleSignOnURL.key());
  this.spSingleLogOutUrl=_configDao.getValue(Config.SAMLServiceProviderSingleLogOutURL.key());
  String idpMetaDataUrl=_configDao.getValue(Config.SAMLIdentityProviderMetadataURL.key());
  int tolerance=30000;
  String timeout=_configDao.getValue(Config.SAMLTimeout.key());
  if (timeout != null) {
    tolerance=Integer.parseInt(timeout);
  }
  try {
    DefaultBootstrap.bootstrap();
    idpMetaDataProvider=new HTTPMetadataProvider(idpMetaDataUrl,tolerance);
    idpMetaDataProvider.setRequireValidMetadata(true);
    idpMetaDataProvider.setParserPool(new BasicParserPool());
    idpMetaDataProvider.initialize();
    EntityDescriptor idpEntityDescriptor=idpMetaDataProvider.getEntityDescriptor(this.identityProviderId);
    IDPSSODescriptor idpssoDescriptor=idpEntityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);
    if (idpssoDescriptor != null) {
      for (      SingleSignOnService ssos : idpssoDescriptor.getSingleSignOnServices()) {
        if (ssos.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) {
          this.idpSingleSignOnUrl=ssos.getLocation();
        }
      }
      for (      SingleLogoutService slos : idpssoDescriptor.getSingleLogoutServices()) {
        if (slos.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) {
          this.idpSingleLogOutUrl=slos.getLocation();
        }
      }
      for (      KeyDescriptor kd : idpssoDescriptor.getKeyDescriptors()) {
        if (kd.getUse() == UsageType.SIGNING) {
          try {
            this.idpSigningKey=KeyInfoHelper.getCertificates(kd.getKeyInfo()).get(0);
          }
 catch (          CertificateException ignored) {
          }
        }
        if (kd.getUse() == UsageType.ENCRYPTION) {
          try {
            this.idpEncryptionKey=KeyInfoHelper.getCertificates(kd.getKeyInfo()).get(0);
          }
 catch (          CertificateException ignored) {
          }
        }
      }
    }
 else {
      s_logger.warn("Provided IDP XML Metadata does not contain IDPSSODescriptor, SAML authentication may not work");
    }
  }
 catch (  MetadataProviderException e) {
    s_logger.error("Unable to read SAML2 IDP MetaData URL, error:" + e.getMessage());
    s_logger.error("SAML2 Authentication may be unavailable");
  }
catch (  ConfigurationException|FactoryConfigurationError e) {
    s_logger.error("OpenSAML bootstrapping failed: error: " + e.getMessage());
  }
  if (this.idpSingleLogOutUrl == null || this.idpSingleSignOnUrl == null) {
    s_logger.error("SAML based authentication won't work");
  }
  return true;
}
