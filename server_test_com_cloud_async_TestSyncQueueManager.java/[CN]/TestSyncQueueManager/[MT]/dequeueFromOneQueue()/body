{
  final SyncQueueManager mgr=ComponentLocator.getCurrentLocator().getManager(SyncQueueManager.class);
  final int totalRuns=5000;
  final SyncQueueVO queue=mgr.queue("vm_instance",1L,"Async-job",1);
  for (int i=1; i < totalRuns; i++)   mgr.queue("vm_instance",1L,"Async-job",i + 1);
  count=0;
  expectingCurrent=1;
  Thread thread1=new Thread(new Runnable(){
    public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info("Thread 1 process item: " + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info("Thread 2 process item: " + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  thread1.start();
  thread2.start();
  try {
    thread1.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    thread2.join();
  }
 catch (  InterruptedException e) {
  }
  Assert.assertEquals(totalRuns,count);
}
