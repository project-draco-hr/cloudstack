@data(ROOT_DOMAIN_ADMIN, CHILD_DOMAIN_ADMIN)
@attr(tags=['advanced'], required_hardware='false')
def test_02_create_template_snapshot(self, value):
    'Test create snapshot and templates from volume\n\n        # Validate the following\n        1. Create root domain/child domain admin account\n        2. Deploy VM in the account\n        3. Create snapshot from the virtual machine root volume\n        4. Create template from the snapshot\n        5. Verify that the secondary storage count of the account equals\n           the size of the template'
    response = self.setupAccount(value)
    self.assertEqual(response[0], PASS, response[1])
    self.virtualMachine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertNotEqual(self.virtualMachine, FAILED, 'VM deployment failed')
    apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    self.assertNotEqual(apiclient, FAILED, ('Failed to create api client for account: %s' % self.account.name))
    try:
        self.virtualMachine.stop(apiclient)
    except Exception as e:
        self.fail(('Failed to stop instance: %s' % e))
    self.debug(('Creating snapshot from ROOT volume: %s' % self.virtualMachine.name))
    response = createSnapshotFromVirtualMachineVolume(apiclient, self.account, self.virtualMachine.id)
    self.assertEqual(response[0], PASS, response[1])
    snapshot = response[1]
    try:
        template = Template.create_from_snapshot(apiclient, snapshot=snapshot, services=self.services['template_2'])
    except Exception as e:
        self.fail(('Failed to create template: %s' % e))
    templates = Template.list(apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
    self.assertEqual(validateList(templates)[0], PASS, 'templates list validation failed')
    templateSize = (templates[0].size / (1024 ** 3))
    response = matchResourceCount(self.apiclient, templateSize, resourceType=RESOURCE_SECONDARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    return
