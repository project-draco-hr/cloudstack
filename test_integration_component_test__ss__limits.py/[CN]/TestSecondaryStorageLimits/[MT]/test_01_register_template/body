@data(ROOT_DOMAIN_ADMIN, CHILD_DOMAIN_ADMIN)
@attr(tags=['advanced'], required_hardware='true')
def test_01_register_template(self, value):
    'Test register template\n        # Validate the following:\n        1. Create a root domain admin/ child domain admin account\n        2. Register and download a template according to hypervisor type\n        3. Verify that the template is listed\n        4. Verify that the secondary storage count for the account equals the size\n           of the template\n        5. Delete the template\n        6. Verify that the secondary storage resource count of the account equals 0\n       '
    response = self.setupAccount(value)
    self.assertEqual(response[0], PASS, response[1])
    apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.services['template_2']['url'] = builtin_info[0]
    self.services['template_2']['hypervisor'] = builtin_info[1]
    self.services['template_2']['format'] = builtin_info[2]
    try:
        template = Template.register(apiclient, self.services['template_2'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, hypervisor=self.hypervisor)
        template.download(apiclient)
    except Exception as e:
        self.fail(('Failed to register template: %s' % e))
    templates = Template.list(apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
    self.assertEqual(validateList(templates)[0], PASS, 'templates list validation failed')
    templateSize = (templates[0].size / (1024 ** 3))
    expectedCount = templateSize
    response = matchResourceCount(apiclient, expectedCount, RESOURCE_SECONDARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    try:
        template.delete(apiclient)
    except Exception as e:
        self.fail(('Failed to delete template: %s' % e))
    expectedCount = 0
    response = matchResourceCount(apiclient, expectedCount, RESOURCE_SECONDARY_STORAGE, accountid=self.account.id)
    self.assertEqual(response[0], PASS, response[1])
    return
