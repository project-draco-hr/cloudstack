{
  try {
    NiciraNvpList<NatRule> existingRules=_niciraNvpApi.findNatRulesByLogicalRouterUuid(cmd.getLogicalRouterUuid());
    for (    PortForwardingRuleTO rule : cmd.getRules()) {
      if (rule.isAlreadyAdded()) {
        continue;
      }
      String insideIp=rule.getDstIp();
      String insideCidr=rule.getDstIp() + "/32";
      String outsideIp=rule.getSrcIp();
      String outsideCidr=rule.getSrcIp() + "/32";
      NatRule incoming=null;
      NatRule outgoing=null;
      for (      NatRule storedRule : existingRules.getResults()) {
        if ("SourceNatRule".equals(storedRule.getType())) {
          if (outsideIp.equals(storedRule.getToSourceIpAddressMin()) && outsideIp.equals(storedRule.getToSourceIpAddressMax()) && storedRule.getToSourcePortMin() == rule.getSrcPortRange()[0] && storedRule.getToSourcePortMax() == rule.getSrcPortRange()[1]) {
            outgoing=storedRule;
          }
        }
 else         if ("DestinationNatRule".equals(storedRule.getType())) {
          if (insideIp.equals(storedRule.getToDestinationIpAddressMin()) && insideIp.equals(storedRule.getToDestinationIpAddressMax()) && storedRule.getToDestinationPort() == rule.getDstPortRange()[0]) {
            incoming=storedRule;
          }
        }
      }
      if (incoming != null && outgoing != null) {
        if (insideIp.equals(incoming.getToDestinationIpAddressMin())) {
          if (rule.revoked()) {
            s_logger.debug("Deleting incoming rule " + incoming.getUuid());
            _niciraNvpApi.deleteLogicalRouterNatRule(cmd.getLogicalRouterUuid(),incoming.getUuid());
            s_logger.debug("Deleting outgoing rule " + outgoing.getUuid());
            _niciraNvpApi.deleteLogicalRouterNatRule(cmd.getLogicalRouterUuid(),outgoing.getUuid());
          }
        }
 else {
          s_logger.debug("Updating outgoing rule " + outgoing.getUuid());
          outgoing.setToDestinationIpAddressMin(insideIp);
          outgoing.setToDestinationIpAddressMax(insideIp);
          outgoing.setToDestinationPort(rule.getDstPortRange()[0]);
          _niciraNvpApi.modifyLogicalRouterNatRule(cmd.getLogicalRouterUuid(),outgoing);
          s_logger.debug("Updating incoming rule " + outgoing.getUuid());
          incoming.setToSourceIpAddressMin(insideIp);
          incoming.setToSourceIpAddressMax(insideIp);
          incoming.setToSourcePortMin(rule.getSrcPortRange()[0]);
          incoming.setToSourcePortMax(rule.getSrcPortRange()[1]);
          _niciraNvpApi.modifyLogicalRouterNatRule(cmd.getLogicalRouterUuid(),incoming);
          break;
        }
      }
 else {
        if (rule.revoked()) {
          s_logger.warn("Tried deleting a rule that does not exist, " + rule.getSrcIp() + " -> "+ rule.getDstIp());
          break;
        }
        Match m=new Match();
        m.setDestinationIpAddresses(outsideCidr);
        if ("tcp".equals(rule.getProtocol())) {
          m.setProtocol(6);
        }
 else         if ("udp".equals(rule.getProtocol())) {
          m.setProtocol(17);
        }
        m.setDestinationPortMin(rule.getSrcPortRange()[0]);
        m.setDestinationPortMax(rule.getSrcPortRange()[1]);
        DestinationNatRule newDnatRule=new DestinationNatRule();
        newDnatRule.setMatch(m);
        newDnatRule.setToDestinationIpAddressMin(insideIp);
        newDnatRule.setToDestinationIpAddressMax(insideIp);
        newDnatRule.setToDestinationPort(rule.getDstPortRange()[0]);
        newDnatRule=(DestinationNatRule)_niciraNvpApi.createLogicalRouterNatRule(cmd.getLogicalRouterUuid(),newDnatRule);
        s_logger.debug("Created " + natRuleToString(newDnatRule));
        m=new Match();
        m.setSourceIpAddresses(insideIp + "/32");
        if ("tcp".equals(rule.getProtocol())) {
          m.setProtocol(6);
        }
 else         if ("udp".equals(rule.getProtocol())) {
          m.setProtocol(17);
        }
        m.setSourcePortMin(rule.getDstPortRange()[0]);
        m.setSourcePortMax(rule.getDstPortRange()[1]);
        SourceNatRule newSnatRule=new SourceNatRule();
        newSnatRule.setMatch(m);
        newSnatRule.setToSourceIpAddressMin(outsideIp);
        newSnatRule.setToSourceIpAddressMax(outsideIp);
        newSnatRule.setToSourcePortMin(rule.getSrcPortRange()[0]);
        newSnatRule.setToSourcePortMax(rule.getSrcPortRange()[1]);
        newSnatRule=(SourceNatRule)_niciraNvpApi.createLogicalRouterNatRule(cmd.getLogicalRouterUuid(),newSnatRule);
        s_logger.debug("Created " + natRuleToString(newSnatRule));
      }
    }
    return new ConfigurePortForwardingRulesOnLogicalRouterAnswer(cmd,true,cmd.getRules().size() + " PortForwarding rules applied");
  }
 catch (  NiciraNvpApiException e) {
    if (numRetries > 0) {
      return retry(cmd,--numRetries);
    }
 else {
      return new ConfigurePortForwardingRulesOnLogicalRouterAnswer(cmd,e);
    }
  }
}
