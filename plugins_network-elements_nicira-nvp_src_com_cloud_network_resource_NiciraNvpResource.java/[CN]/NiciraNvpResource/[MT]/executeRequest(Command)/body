{
  final NiciraNvpRequestWrapper wrapper=NiciraNvpRequestWrapper.getInstance();
  try {
    return wrapper.execute(cmd,this);
  }
 catch (  final Exception e) {
  }
  if (cmd instanceof UpdateLogicalSwitchPortCommand) {
    return executeRequest((UpdateLogicalSwitchPortCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof FindLogicalSwitchPortCommand) {
    return executeRequest((FindLogicalSwitchPortCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof CreateLogicalRouterCommand) {
    return executeRequest((CreateLogicalRouterCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof DeleteLogicalRouterCommand) {
    return executeRequest((DeleteLogicalRouterCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof ConfigureStaticNatRulesOnLogicalRouterCommand) {
    return executeRequest((ConfigureStaticNatRulesOnLogicalRouterCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof ConfigurePortForwardingRulesOnLogicalRouterCommand) {
    return executeRequest((ConfigurePortForwardingRulesOnLogicalRouterCommand)cmd,NUM_RETRIES);
  }
 else   if (cmd instanceof ConfigurePublicIpsOnLogicalRouterCommand) {
    return executeRequest((ConfigurePublicIpsOnLogicalRouterCommand)cmd,NUM_RETRIES);
  }
  s_logger.debug("Received unsupported command " + cmd.toString());
  return Answer.createUnsupportedCommandAnswer(cmd);
}
