{
  final String routerName=cmd.getName();
  final String gatewayServiceUuid=cmd.getGatewayServiceUuid();
  final String logicalSwitchUuid=cmd.getLogicalSwitchUuid();
  final List<NiciraNvpTag> tags=new ArrayList<NiciraNvpTag>();
  tags.add(new NiciraNvpTag("cs_account",cmd.getOwnerName()));
  final String publicNetworkNextHopIp=cmd.getPublicNextHop();
  final String publicNetworkIpAddress=cmd.getPublicIpCidr();
  final String internalNetworkAddress=cmd.getInternalIpCidr();
  s_logger.debug("Creating a logical router with external ip " + publicNetworkIpAddress + " and internal ip "+ internalNetworkAddress+ "on gateway service "+ gatewayServiceUuid);
  try {
    LogicalRouter lrc=new LogicalRouter();
    lrc.setDisplayName(truncate(routerName,NAME_MAX_LEN));
    lrc.setTags(tags);
    lrc.setRoutingConfig(new SingleDefaultRouteImplicitRoutingConfig(new RouterNextHop(publicNetworkNextHopIp)));
    lrc=niciraNvpApi.createLogicalRouter(lrc);
    LogicalSwitchPort lsp=null;
    try {
      LogicalRouterPort lrpo=new LogicalRouterPort();
      lrpo.setAdminStatusEnabled(true);
      lrpo.setDisplayName(truncate(routerName + "-outside-port",NAME_MAX_LEN));
      lrpo.setTags(tags);
      final List<String> outsideIpAddresses=new ArrayList<String>();
      outsideIpAddresses.add(publicNetworkIpAddress);
      lrpo.setIpAddresses(outsideIpAddresses);
      lrpo=niciraNvpApi.createLogicalRouterPort(lrc.getUuid(),lrpo);
      final L3GatewayAttachment attachment=new L3GatewayAttachment(gatewayServiceUuid);
      if (cmd.getVlanId() != 0) {
        attachment.setVlanId(cmd.getVlanId());
      }
      niciraNvpApi.updateLogicalRouterPortAttachment(lrc.getUuid(),lrpo.getUuid(),attachment);
      LogicalRouterPort lrpi=new LogicalRouterPort();
      lrpi.setAdminStatusEnabled(true);
      lrpi.setDisplayName(truncate(routerName + "-inside-port",NAME_MAX_LEN));
      lrpi.setTags(tags);
      final List<String> insideIpAddresses=new ArrayList<String>();
      insideIpAddresses.add(internalNetworkAddress);
      lrpi.setIpAddresses(insideIpAddresses);
      lrpi=niciraNvpApi.createLogicalRouterPort(lrc.getUuid(),lrpi);
      lsp=new LogicalSwitchPort(truncate(routerName + "-inside-port",NAME_MAX_LEN),tags,true);
      lsp=niciraNvpApi.createLogicalSwitchPort(logicalSwitchUuid,lsp);
      niciraNvpApi.updateLogicalRouterPortAttachment(lrc.getUuid(),lrpi.getUuid(),new PatchAttachment(lsp.getUuid()));
      niciraNvpApi.updateLogicalSwitchPortAttachment(logicalSwitchUuid,lsp.getUuid(),new PatchAttachment(lrpi.getUuid()));
      final SourceNatRule snr=new SourceNatRule();
      snr.setToSourceIpAddressMin(publicNetworkIpAddress.split("/")[0]);
      snr.setToSourceIpAddressMax(publicNetworkIpAddress.split("/")[0]);
      final Match match=new Match();
      match.setSourceIpAddresses(internalNetworkAddress);
      snr.setMatch(match);
      snr.setOrder(200);
      niciraNvpApi.createLogicalRouterNatRule(lrc.getUuid(),snr);
    }
 catch (    final NiciraNvpApiException e) {
      try {
        niciraNvpApi.deleteLogicalRouter(lrc.getUuid());
        if (lsp != null) {
          niciraNvpApi.deleteLogicalSwitchPort(logicalSwitchUuid,lsp.getUuid());
        }
      }
 catch (      final NiciraNvpApiException ex) {
      }
      throw e;
    }
    return new CreateLogicalRouterAnswer(cmd,true,"Logical Router created (uuid " + lrc.getUuid() + ")",lrc.getUuid());
  }
 catch (  final NiciraNvpApiException e) {
    if (numRetries > 0) {
      return retry(cmd,--numRetries);
    }
 else {
      return new CreateLogicalRouterAnswer(cmd,e);
    }
  }
}
