def make_request(self, cmd, response=None, raw=False):
    commandName = cmd.__class__.__name__.replace('Cmd', '')
    isAsync = 'false'
    requests = {}
    required = []
    for attribute in dir(cmd):
        if ((attribute != '__doc__') and (attribute != '__init__') and (attribute != '__module__')):
            if (attribute == 'isAsync'):
                isAsync = getattr(cmd, attribute)
            elif (attribute == 'required'):
                required = getattr(cmd, attribute)
            else:
                requests[attribute] = getattr(cmd, attribute)
    for requiredPara in required:
        if (requests[requiredPara] is None):
            raise cloudstackException.cloudstackAPIException(commandName, ('%s is required' % requiredPara))
    'remove none value'
    for (param, value) in requests.items():
        if (value is None):
            requests.pop(param)
        elif isinstance(value, list):
            if (len(value) == 0):
                requests.pop(param)
            elif (not isinstance(value[0], dict)):
                requests[param] = ','.join(value)
            else:
                requests.pop(param)
                i = 0
                for v in value:
                    for (key, val) in v.iteritems():
                        requests[('%s[%d].%s' % (param, i, key))] = val
                    i = (i + 1)
    if (self.logging is not None):
        self.logging.debug(('sending command: ' + str(requests)))
    result = None
    if self.auth:
        result = self.make_request_with_auth(commandName, requests)
    else:
        result = self.make_request_without_auth(commandName, requests)
    if (self.logging is not None):
        self.logging.debug(('got result: ' + result))
    if (result is None):
        return None
    result = jsonHelper.getResultObj(result, response)
    if (raw or (isAsync == 'false')):
        return result
    else:
        asynJobId = result.jobid
        result = self.pollAsyncJob(asynJobId, response)
        return result.jobresult
