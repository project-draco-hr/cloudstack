{
  Transaction __txn;
  __txn=Transaction.open("createInvalidlyHostedPrivateNetworkTest");
  try {
    networkService.createPrivateNetwork("bla","fake",1L,"vlan:1","10.1.1.2",null,"10.1.1.1","255.255.255.0",1L,1L,null);
    networkService.createPrivateNetwork("bla","fake",1L,"lswitch:3","10.1.1.2",null,"10.1.1.1","255.255.255.0",1L,1L,null);
    boolean invalid=false;
    boolean unsupported=false;
    try {
      networkService.createPrivateNetwork("bla","fake",1,"bla:2","10.1.1.2",null,"10.1.1.1","255.255.255.0",1,1L,null);
    }
 catch (    InvalidParameterValueException e) {
      Assert.assertEquals("unexpected parameter exception","unsupported type of broadcastUri specified: bla:2",e.getMessage());
      invalid=true;
    }
    try {
      networkService.createPrivateNetwork("bla","fake",1,"mido:4","10.1.1.2",null,"10.1.1.1","255.255.255.0",1,1L,null);
    }
 catch (    InvalidParameterValueException e) {
      Assert.assertEquals("unexpected parameter exception","unsupported type of broadcastUri specified: mido:4",e.getMessage());
      unsupported=true;
    }
    Assert.assertEquals("'bla' should not be accepted as scheme",true,invalid);
    Assert.assertEquals("'mido' should not yet be supported as scheme",true,unsupported);
  }
 catch (  ResourceAllocationException e) {
    s_logger.error("no resources",e);
    fail("no resources");
  }
catch (  ConcurrentOperationException e) {
    s_logger.error("another one is in the way",e);
    fail("another one is in the way");
  }
catch (  InsufficientCapacityException e) {
    s_logger.error("no capacity",e);
    fail("no capacity");
  }
 finally {
    __txn.close("createInvalidlyHostedPrivateNetworkTest");
  }
}
