{
  MockitoAnnotations.initMocks(this);
  networkService._accountMgr=_accountMgr;
  networkService._networkOfferingDao=_networkOfferingDao;
  networkService._physicalNetworkDao=_physicalNetworkDao;
  networkService._dcDao=_dcDao;
  networkService._networksDao=_networkDao;
  networkService._networkMgr=_networkMgr;
  networkService._privateIpDao=_privateIpDao;
  Account account=new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(networkService._accountMgr.getAccount(anyLong())).thenReturn(account);
  NetworkOfferingVO ntwkOff=new NetworkOfferingVO("offer","fakeOffer",TrafficType.Guest,true,true,null,null,false,null,null,GuestType.Isolated,false,false,false,false,false,false,false,false,false,false,false,false,false);
  when(networkService._networkOfferingDao.findById(anyLong())).thenReturn(ntwkOff);
  List<NetworkOfferingVO> netofferlist=new ArrayList<NetworkOfferingVO>();
  netofferlist.add(ntwkOff);
  when(networkService._networkOfferingDao.listSystemNetworkOfferings()).thenReturn(netofferlist);
  PhysicalNetworkVO physicalNetwork=new PhysicalNetworkVO(1L,1L,"2-5","200",1L,null,"testphysicalnetwork");
  when(networkService._physicalNetworkDao.findById(anyLong())).thenReturn(physicalNetwork);
  DataCenterVO dc=new DataCenterVO(1L,"hut","op de hei",null,null,null,null,"10.1.1.0/24","unreal.net",1L,NetworkType.Advanced,null,null);
  when(networkService._dcDao.lockRow(anyLong(),anyBoolean())).thenReturn(dc);
  when(networkService._networksDao.getPrivateNetwork(anyString(),anyString(),eq(1L),eq(1L),anyLong())).thenReturn(null);
  Network net=new NetworkVO(1L,TrafficType.Guest,Mode.None,BroadcastDomainType.Vlan,1L,1L,1L,1L,"bla","fake","eet.net",GuestType.Isolated,1L,1L,ACLType.Account,false,1L);
  when(networkService._networkMgr.createGuestNetwork(eq(ntwkOff.getId()),eq("bla"),eq("fake"),eq("10.1.1.1"),eq("10.1.1.0/24"),anyString(),anyString(),eq(account),anyLong(),eq(physicalNetwork),eq(physicalNetwork.getDataCenterId()),eq(ACLType.Account),anyBoolean(),eq(1L),anyString(),anyString(),anyBoolean(),anyString())).thenReturn(net);
  when(networkService._privateIpDao.findByIpAndSourceNetworkId(net.getId(),"10.1.1.2")).thenReturn(null);
  when(networkService._privateIpDao.findByIpAndSourceNetworkIdAndVpcId(eq(1L),anyString(),eq(1L))).thenReturn(null);
}
