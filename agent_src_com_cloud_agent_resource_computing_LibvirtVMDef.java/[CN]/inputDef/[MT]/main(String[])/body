{
  System.out.println("testing");
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setHvsType("kvm");
  vm.setDomainName("testing");
  vm.setDomUUID(UUID.randomUUID().toString());
  guestDef guest=new guestDef();
  guest.setGuestType(guestDef.guestType.KVM);
  guest.setGuestArch("x86_64");
  guest.setMachineType("pc-0.11");
  guest.setBootOrder(guestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  guestResourceDef grd=new guestResourceDef();
  grd.setMemorySize(512 * 1024);
  grd.setVcpuNum(1);
  vm.addComp(grd);
  featuresDef features=new featuresDef();
  features.addFeatures("pae");
  features.addFeatures("apic");
  features.addFeatures("acpi");
  vm.addComp(features);
  termPolicy term=new termPolicy();
  term.setCrashPolicy("destroy");
  term.setPowerOffPolicy("destroy");
  term.setRebootPolicy("destroy");
  vm.addComp(term);
  devicesDef devices=new devicesDef();
  devices.setEmulatorPath("/usr/bin/cloud-qemu-system-x86_64");
  diskDef hda=new diskDef();
  hda.defFileBasedDisk("/path/to/hda1","hda",diskDef.diskBus.IDE,diskDef.diskFmtType.QCOW2);
  devices.addDevice(hda);
  diskDef hdb=new diskDef();
  hdb.defFileBasedDisk("/path/to/hda2","hdb",diskDef.diskBus.IDE,diskDef.diskFmtType.QCOW2);
  devices.addDevice(hdb);
  interfaceDef pubNic=new interfaceDef();
  pubNic.defBridgeNet("cloudbr0","vnet1","00:16:3e:77:e2:a1",interfaceDef.nicModel.VIRTIO);
  devices.addDevice(pubNic);
  interfaceDef privNic=new interfaceDef();
  privNic.defPrivateNet("cloud-private",null,"00:16:3e:77:e2:a2",interfaceDef.nicModel.VIRTIO);
  devices.addDevice(privNic);
  interfaceDef vlanNic=new interfaceDef();
  vlanNic.defBridgeNet("vnbr1000","tap1","00:16:3e:77:e2:a2",interfaceDef.nicModel.VIRTIO);
  devices.addDevice(vlanNic);
  serialDef serial=new serialDef("pty",null,(short)0);
  devices.addDevice(serial);
  consoleDef console=new consoleDef("pty",null,null,(short)0);
  devices.addDevice(console);
  graphicDef grap=new graphicDef("vnc",(short)0,true,null,null,null);
  devices.addDevice(grap);
  inputDef input=new inputDef("tablet","usb");
  devices.addDevice(input);
  vm.addComp(devices);
  System.out.println(vm.toString());
}
