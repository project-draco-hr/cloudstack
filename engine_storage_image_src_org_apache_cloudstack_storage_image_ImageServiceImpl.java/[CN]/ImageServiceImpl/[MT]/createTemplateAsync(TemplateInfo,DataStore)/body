{
  TemplateObject to=(TemplateObject)template;
  AsyncCallFuture<CommandResult> future=new AsyncCallFuture<CommandResult>();
  try {
    to.stateTransit(TemplateEvent.CreateRequested);
  }
 catch (  NoTransitionException e) {
    s_logger.debug("Failed to transit state:",e);
    CommandResult result=new CommandResult();
    result.setResult(e.toString());
    future.complete(result);
    return future;
  }
  ObjectInDataStoreVO obj=objectInDataStoreMgr.findObject(template.getId(),template.getType(),store.getId(),store.getRole());
  TemplateInfo templateOnStore=null;
  if (obj == null) {
    templateOnStore=(TemplateInfo)objectInDataStoreMgr.create(template,store);
    obj=objectInDataStoreMgr.findObject(template.getId(),template.getType(),store.getId(),store.getRole());
  }
 else {
    CommandResult result=new CommandResult();
    result.setResult("duplicate template on the storage");
    future.complete(result);
    return future;
  }
  try {
    objectInDataStoreMgr.update(obj,Event.CreateOnlyRequested);
  }
 catch (  NoTransitionException e) {
    s_logger.debug("failed to transit",e);
    CommandResult result=new CommandResult();
    result.setResult(e.toString());
    future.complete(result);
    return future;
  }
  CreateTemplateContext<CommandResult> context=new CreateTemplateContext<CommandResult>(null,template,templateOnStore,future,obj);
  AsyncCallbackDispatcher<ImageServiceImpl,CreateCmdResult> caller=AsyncCallbackDispatcher.create(this);
  caller.setCallback(caller.getTarget().createTemplateCallback(null,null)).setContext(context);
  store.getDriver().createAsync(templateOnStore,caller);
  return future;
}
