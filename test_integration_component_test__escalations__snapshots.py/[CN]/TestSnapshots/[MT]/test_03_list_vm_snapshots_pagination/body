@attr(tags=['advanced', 'basic', 'provisioning'])
def test_03_list_vm_snapshots_pagination(self):
    '\n        @Desc: Test to List VM Snapshots pagination\n        @Steps:\n        Step1: Listing all the VM snapshots for a user\n        Step2: Verifying that list size is 0\n        Step3: Creating (page size + 1) number of VM snapshots\n        Step4: Listing all the VM snapshots again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the VM snapshots in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the VM snapshots in page2\n        Step9: Verifying that list size is 1\n        Step10: Deleting the VM snapshot present in page 2\n        Step11: Listing all the volume snapshots in page2\n        Step12: Verifying that list size is 0\n        '
    list_vm_snaps_before = VmSnapshot.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vm_snaps_before, 'VM snapshots exists for newly created user')
    for i in range(0, (self.services['pagesize'] + 1)):
        snapshot_created = VmSnapshot.create(self.userapiclient, self.virtual_machine.id)
        self.assertIsNotNone(snapshot_created, 'Snapshot creation failed')
    list_vm_snaps_after = VmSnapshot.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vm_snaps_after)
    self.assertEquals(PASS, status[0], 'VM snapshot creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_vm_snaps_after), 'Failed to create pagesize + 1 number of VM snapshots')
    list_vm_snaps_page1 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_vm_snaps_page1)
    self.assertEquals(PASS, status[0], 'Failed to list vm snapshots in page 1')
    self.assertEquals(self.services['pagesize'], len(list_vm_snaps_page1), 'Size of vm snapshots in page 1 is not matching')
    list_vm_snaps_page2 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_vm_snaps_page2)
    self.assertEquals(PASS, status[0], 'Failed to list vm snapshots in page 2')
    self.assertEquals(1, len(list_vm_snaps_page2), 'Size of vm snapshots in page 2 is not matching')
    VmSnapshot.deleteVMSnapshot(self.userapiclient, snapshot_created.id)
    list_vm_snaps_page2 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_vm_snaps_page2, 'VM snapshot not deleted from page 2')
    list_vm_snaps = VmSnapshot.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vm_snaps)
    self.assertEquals(PASS, status[0], 'All VM snapshots deleted')
    self.assertEquals(self.services['pagesize'], len(list_vm_snaps), 'VM Snapshots count is not matching')
    for i in range(0, len(list_vm_snaps)):
        VmSnapshot.deleteVMSnapshot(self.userapiclient, list_vm_snaps[i].id)
    return
