@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_02_list_volume_snapshots_byid(self):
    '\n        @Desc: Test to List Volume Snapshots by Id\n        @Steps:\n        Step1: Listing all the volume snapshots for a user\n        Step2: Verifying that list size is 0\n        Step3: Creating a volume snapshot\n        Step4: Listing all the volume snapshots again for a user\n        Step5: Verifying that list size is 1\n        Step6: Listing all the volume snapshots by specifying snapshot id\n        Step7: Verifying that list size is 1\n        Step8: Verifying details of the listed volume snapshot\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence, skipping the test')
    list_vol_snaps_before = Snapshot.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vol_snaps_before, 'Volume snapshots exists for newly created user')
    volumes_list = Volume.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(volumes_list)
    self.assertEquals(PASS, status[0], 'Root volume did not get created while deploying a VM')
    self.assertEquals(1, len(volumes_list), 'More than 1 root volume created for deployed VM')
    root_volume = volumes_list[0]
    snapshot_created = Snapshot.create(self.userapiclient, root_volume.id)
    self.assertIsNotNone(snapshot_created, 'Snapshot creation failed')
    self.cleanup.append(snapshot_created)
    list_vol_snaps_after = Snapshot.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vol_snaps_after)
    self.assertEquals(PASS, status[0], 'Volume snapshot creation failed')
    self.assertEquals(1, len(list_vol_snaps_after), 'Failed to create Volume snapshot')
    list_vol_snapshot = Snapshot.list(self.userapiclient, listall=self.services['listall'], id=snapshot_created.id)
    status = validateList(list_vol_snapshot)
    self.assertEquals(PASS, status[0], 'Failed to list Volume snapshot by Id')
    self.assertEquals(1, len(list_vol_snapshot), 'Size of the list volume snapshot by Id is not matching')
    expected_dict = {'id': snapshot_created.id, 'name': snapshot_created.name, 'state': snapshot_created.state, 'intervaltype': snapshot_created.intervaltype, 'account': snapshot_created.account, 'domain': snapshot_created.domainid, 'volume': snapshot_created.volumeid, }
    actual_dict = {'id': list_vol_snapshot[0].id, 'name': list_vol_snapshot[0].name, 'state': list_vol_snapshot[0].state, 'intervaltype': list_vol_snapshot[0].intervaltype, 'account': list_vol_snapshot[0].account, 'domain': list_vol_snapshot[0].domainid, 'volume': list_vol_snapshot[0].volumeid, }
    vol_snapshot_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, vol_snapshot_status, 'Listed Volume Snapshot details are not as expected')
    return
