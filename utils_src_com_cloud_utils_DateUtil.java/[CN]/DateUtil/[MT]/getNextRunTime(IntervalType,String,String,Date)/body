{
  String[] scheduleParts=schedule.split(":");
  final Calendar scheduleTime=Calendar.getInstance();
  scheduleTime.setTimeZone(TimeZone.getTimeZone(timezone));
  if (startDate == null) {
    startDate=new Date();
  }
  scheduleTime.setTime(startDate);
  scheduleTime.setLenient(false);
  int minutes=0;
  int hour=0;
  int day=0;
  Date execDate=null;
switch (type) {
case HOURLY:
    if (scheduleParts.length < 1) {
      throw new CloudRuntimeException("Incorrect schedule format: " + schedule + " for interval type:"+ type.toString());
    }
  minutes=Integer.parseInt(scheduleParts[0]);
scheduleTime.set(Calendar.MINUTE,minutes);
scheduleTime.set(Calendar.SECOND,0);
scheduleTime.set(Calendar.MILLISECOND,0);
execDate=scheduleTime.getTime();
if (execDate.before(new Date()) || !execDate.after(startDate)) {
scheduleTime.add(Calendar.HOUR_OF_DAY,1);
}
break;
case DAILY:
if (scheduleParts.length < 2) {
throw new CloudRuntimeException("Incorrect schedule format: " + schedule + " for interval type:"+ type.toString());
}
minutes=Integer.parseInt(scheduleParts[0]);
hour=Integer.parseInt(scheduleParts[1]);
scheduleTime.set(Calendar.HOUR_OF_DAY,hour);
scheduleTime.set(Calendar.MINUTE,minutes);
scheduleTime.set(Calendar.SECOND,0);
scheduleTime.set(Calendar.MILLISECOND,0);
execDate=scheduleTime.getTime();
if (execDate.before(new Date()) || !execDate.after(startDate)) {
scheduleTime.add(Calendar.DAY_OF_YEAR,1);
}
break;
case WEEKLY:
if (scheduleParts.length < 3) {
throw new CloudRuntimeException("Incorrect schedule format: " + schedule + " for interval type:"+ type.toString());
}
minutes=Integer.parseInt(scheduleParts[0]);
hour=Integer.parseInt(scheduleParts[1]);
day=Integer.parseInt(scheduleParts[2]);
scheduleTime.set(Calendar.DAY_OF_WEEK,day);
scheduleTime.set(Calendar.HOUR_OF_DAY,hour);
scheduleTime.set(Calendar.MINUTE,minutes);
scheduleTime.set(Calendar.SECOND,0);
scheduleTime.set(Calendar.MILLISECOND,0);
execDate=scheduleTime.getTime();
if (execDate.before(new Date()) || !execDate.after(startDate)) {
scheduleTime.add(Calendar.DAY_OF_WEEK,7);
}
;
break;
case MONTHLY:
if (scheduleParts.length < 3) {
throw new CloudRuntimeException("Incorrect schedule format: " + schedule + " for interval type:"+ type.toString());
}
minutes=Integer.parseInt(scheduleParts[0]);
hour=Integer.parseInt(scheduleParts[1]);
day=Integer.parseInt(scheduleParts[2]);
if (day > 28) {
throw new CloudRuntimeException("Day cannot be greater than 28 for monthly schedule");
}
scheduleTime.set(Calendar.DAY_OF_MONTH,day);
scheduleTime.set(Calendar.HOUR_OF_DAY,hour);
scheduleTime.set(Calendar.MINUTE,minutes);
scheduleTime.set(Calendar.SECOND,0);
scheduleTime.set(Calendar.MILLISECOND,0);
execDate=scheduleTime.getTime();
if (execDate.before(new Date()) || !execDate.after(startDate)) {
scheduleTime.add(Calendar.MONTH,1);
}
break;
default :
throw new CloudRuntimeException("Incorrect interval: " + type.toString());
}
return scheduleTime.getTime();
}
