{
  Account caller=CallContext.current().getCallingAccount();
  PortForwardingRuleVO rule=_portForwardingDao.findById(id);
  if (rule == null) {
    throw new InvalidParameterValueException("Unable to find " + id);
  }
  _accountMgr.checkAccess(caller,null,true,rule);
  if (customId != null) {
    rule.setUuid(customId);
  }
  if (forDisplay != null) {
    rule.setDisplay(forDisplay);
  }
  if (!rule.getSourcePortStart().equals(rule.getSourcePortEnd()) && privatePort != null) {
    throw new InvalidParameterValueException("Unable to update the private port of port forwarding rule as  the rule has port range : " + rule.getSourcePortStart() + " to "+ rule.getSourcePortEnd());
  }
  if (virtualMachineId == null && vmGuestIp != null) {
    throw new InvalidParameterValueException("vmguestip should be set along with virtualmachineid");
  }
  Ip dstIp=rule.getDestinationIpAddress();
  if (virtualMachineId != null) {
    Nic guestNic=_networkModel.getNicInNetwork(virtualMachineId,rule.getNetworkId());
    if (guestNic == null || guestNic.getIp4Address() == null) {
      throw new InvalidParameterValueException("Vm doesn't belong to network associated with ipAddress");
    }
 else {
      dstIp=new Ip(guestNic.getIp4Address());
    }
    if (vmGuestIp != null) {
      if (!dstIp.equals(vmGuestIp)) {
        NicSecondaryIp secondaryIp=_nicSecondaryDao.findByIp4AddressAndNicId(vmGuestIp.toString(),guestNic.getId());
        if (secondaryIp == null) {
          throw new InvalidParameterValueException("IP Address is not in the VM nic's network ");
        }
        dstIp=vmGuestIp;
      }
    }
  }
  List<PortForwardingRuleVO> rules=new ArrayList<PortForwardingRuleVO>();
  rule.setState(State.Revoke);
  _portForwardingDao.update(id,rule);
  rules.add(rule);
  try {
    if (!_firewallMgr.applyRules(rules,true,false)) {
      throw new CloudRuntimeException("Failed to revoke the existing port forwarding rule:" + id);
    }
  }
 catch (  ResourceUnavailableException ex) {
    throw new CloudRuntimeException("Failed to revoke the existing port forwarding rule:" + id + " due to ",ex);
  }
  rule=_portForwardingDao.findById(id);
  rule.setState(State.Add);
  if (privatePort != null) {
    rule.setDestinationPortStart(privatePort.intValue());
    rule.setDestinationPortEnd(privatePort.intValue());
  }
  if (virtualMachineId != null) {
    rule.setVirtualMachineId(virtualMachineId);
    rule.setDestinationIpAddress(dstIp);
  }
  _portForwardingDao.update(id,rule);
  if (!applyPortForwardingRules(rule.getSourceIpAddressId(),false,caller)) {
    throw new CloudRuntimeException("Failed to apply the new port forwarding rule:" + id);
  }
  return _portForwardingDao.findById(id);
}
