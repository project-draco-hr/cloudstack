{
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException("Ip address id=" + ipId + " not ready for port forwarding rules yet");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,"id",false,start,size);
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("ip",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and("purpose",sb.entity().getPurpose(),Op.EQ);
  sb.and("id",sb.entity().getId(),Op.EQ);
  if (vmId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and("associatedWithVmId",ipSearch.entity().getAssociatedWithVmId(),Op.EQ);
    sb.join("ipSearch",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters("purpose",Purpose.StaticNat);
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (ipId != null) {
    sc.setParameters("ip",ipId);
  }
  if (vmId != null) {
    sc.setJoinParameters("ipSearch","associatedWithVmId",vmId);
  }
  return _firewallDao.search(sc,filter);
}
