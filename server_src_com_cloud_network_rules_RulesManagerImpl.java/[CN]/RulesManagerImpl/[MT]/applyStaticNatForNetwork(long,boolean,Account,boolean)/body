{
  List<? extends IpAddress> staticNatIps=_ipAddressDao.listStaticNatPublicIps(networkId);
  List<StaticNat> staticNats=new ArrayList<StaticNat>();
  for (  IpAddress staticNatIp : staticNatIps) {
    staticNats.addAll(createStaticNatForIp(staticNatIp,caller,forRevoke));
  }
  if (staticNats != null && !staticNats.isEmpty()) {
    if (forRevoke) {
      s_logger.debug("Found " + staticNats.size() + " static nats to disable for network id "+ networkId);
    }
    try {
      if (!_ipAddrMgr.applyStaticNats(staticNats,continueOnError,forRevoke)) {
        return false;
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn("Failed to create static nat rule due to ",ex);
      return false;
    }
  }
 else {
    s_logger.debug("Found 0 static nat rules to apply for network id " + networkId);
  }
  return true;
}
