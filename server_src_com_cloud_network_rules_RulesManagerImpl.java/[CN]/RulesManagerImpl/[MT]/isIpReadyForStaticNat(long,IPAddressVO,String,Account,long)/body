{
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException("Can't enable static, ip address " + ipAddress + " is a sourceNat ip address");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipAddress.getId(),Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable static nat for the ip address " + ipAddress + " as it already has PortForwarding rules assigned");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipAddress.getId(),Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable static nat for the ip address " + ipAddress + " as it already has LoadBalancing rules assigned");
    }
  }
 else   if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
    throw new NetworkRuleConflictException("Failed to enable static for the ip address " + ipAddress + " and vm id="+ vmId+ " as it's already assigned to antoher vm");
  }
  IPAddressVO oldIP=_ipAddressDao.findByAssociatedVmIdAndVmIp(vmId,vmIp);
  if (oldIP != null) {
    Long networkId=oldIP.getAssociatedWithNetworkId();
    VMInstanceVO vm=_vmInstanceDao.findById(vmId);
    boolean reassignStaticNat=false;
    if (networkId != null) {
      Network guestNetwork=_networkModel.getNetwork(networkId);
      NetworkOffering offering=_entityMgr.findById(NetworkOffering.class,guestNetwork.getNetworkOfferingId());
      if (offering.getElasticIp()) {
        reassignStaticNat=true;
      }
    }
    if (!reassignStaticNat) {
      throw new InvalidParameterValueException("Failed to enable static nat on the  ip " + ipAddress.getAddress() + " with Id "+ ipAddress.getUuid()+ " as the vm "+ vm.getInstanceName()+ " with Id "+ vm.getUuid()+ " is already associated with another public ip "+ oldIP.getAddress()+ " with id "+ oldIP.getUuid());
    }
    s_logger.debug("Disassociating static nat for ip " + oldIP);
    if (!disableStaticNat(oldIP.getId(),caller,callerUserId,true)) {
      throw new CloudRuntimeException("Failed to disable old static nat rule for vm " + vm.getInstanceName() + " with id "+ vm.getUuid()+ "  and public ip "+ oldIP);
    }
  }
}
