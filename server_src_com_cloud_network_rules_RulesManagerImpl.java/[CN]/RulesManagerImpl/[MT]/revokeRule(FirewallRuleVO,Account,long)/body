{
  if (caller != null) {
    _accountMgr.checkAccess(caller,rule);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (rule.getState() == State.Staged) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found a rule that is still in stage state so just removing it: " + rule);
    }
    _firewallDao.remove(rule.getId());
  }
 else   if (rule.getState() == State.Add) {
    rule.setState(State.Revoke);
    _firewallDao.update(rule.getId(),rule);
  }
  if (NetUtils.NAT_PROTO.equals(rule.protocol) && rule.getSourcePortStart() == -1) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Removing one to one nat so setting the ip back to one to one nat is false: " + rule.getSourceIpAddress());
    }
    IPAddressVO ipAddress=_ipAddressDao.findById(rule.getSourceIpAddress().addr());
    ipAddress.setOneToOneNat(false);
    _ipAddressDao.update(ipAddress.getAddress(),ipAddress);
  }
  String ruleName=rule.getPurpose() == Purpose.Firewall ? "Firewall" : (rule.getProtocol().equals(NetUtils.NAT_PROTO) ? "ip forwarding" : "port forwarding");
  StringBuilder description=new StringBuilder("deleted ").append(ruleName).append(" rule [").append(rule.getSourceIpAddress()).append(":").append(rule.getSourcePortStart()).append("-").append(rule.getSourcePortEnd()).append("]");
  if (rule.getPurpose() == Purpose.PortForwarding) {
    PortForwardingRuleVO pfRule=(PortForwardingRuleVO)rule;
    description.append("->[").append(pfRule.getDestinationIpAddress()).append(":").append(pfRule.getDestinationPortStart()).append("-").append(pfRule.getDestinationPortEnd()).append("]");
  }
  description.append(" ").append(rule.getProtocol());
  EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(rule.getAccountId());
  event.setType(EventTypes.EVENT_NET_RULE_DELETE);
  event.setDescription(description.toString());
  event.setLevel(EventVO.LEVEL_INFO);
  _eventDao.persist(event);
}
