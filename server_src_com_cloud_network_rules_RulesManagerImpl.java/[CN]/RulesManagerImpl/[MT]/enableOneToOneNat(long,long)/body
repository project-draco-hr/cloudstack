{
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=null;
  vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("Can't enable one-to-one nat for the address " + ipAddress + ", invalid virtual machine id specified ("+ vmId+ ").");
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException("Can't enable one to one nat, ip address id=" + ipId + " is a sourceNat ip address");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> rules=_firewallDao.listByIpAndNotRevoked(ipId,Purpose.PortForwarding);
    if (rules != null && !rules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable one to one nat for the ip address id=" + ipAddress.getId() + " as it already has firewall rules assigned");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException("Failed to enable one to one nat for the ip address id=" + ipAddress.getId() + " and vm id="+ vmId+ " as it's already assigned to antoher vm");
    }
  }
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  return _ipAddressDao.update(ipAddress.getId(),ipAddress);
}
