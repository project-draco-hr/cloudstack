{
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("Can't enable static nat for the address id=" + ipId + ", invalid virtual machine id specified ("+ vmId+ ").");
  }
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException("Unable to find ip address by id " + ipId);
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException("Unable to enable static nat for the ipAddress id=" + ipId + " as ip is not associated with any network");
  }
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null) {
    throw new InvalidParameterValueException("Vm doesn't belong to the network " + networkId);
  }
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Firewall)) {
    throw new InvalidParameterValueException("Unable to create static nat rule; Firewall service is not supported in network id=" + networkId);
  }
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException("Can't enable static, ip address id=" + ipId + " is a sourceNat ip address");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> rules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.PortForwarding);
    if (rules != null && !rules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable static nat for the ip address id=" + ipId + " as it already has firewall rules assigned");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException("Failed to enable static for the ip address id=" + ipId + " and vm id="+ vmId+ " as it's already assigned to antoher vm");
    }
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  if (ip != null) {
    throw new InvalidParameterValueException("Failed to enable static nat for the ip address id=" + ipId + " as vm id="+ " is already associated with ip id="+ ip.getId());
  }
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
    List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
    FirewallRuleVO ruleVO=new FirewallRuleVO(null,ipAddress.getId(),0,0,"icmp",networkId,vm.getAccountId(),vm.getDomainId(),Purpose.StaticNat);
    staticNatRules.add(new StaticNatRuleImpl(ruleVO,guestNic.getIp4Address()));
    try {
      if (!applyRules(staticNatRules,true)) {
        return false;
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn("Failed to apply icmp firewall rules due to ",ex);
      return false;
    }
    return true;
  }
  return false;
}
