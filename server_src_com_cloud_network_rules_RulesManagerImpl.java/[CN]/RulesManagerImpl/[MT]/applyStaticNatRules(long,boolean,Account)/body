{
  List<? extends FirewallRule> rules=_firewallDao.listByIpAndPurpose(sourceIpId,Purpose.StaticNat);
  List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
  if (rules.size() == 0) {
    s_logger.debug("There are no firwall rules to apply for ip id=" + sourceIpId);
    return true;
  }
  for (  FirewallRule rule : rules) {
    IpAddress sourceIp=_ipAddressDao.findById(rule.getSourceIpAddressId());
    UserVmVO vm=_vmDao.findById(sourceIp.getAssociatedWithVmId());
    Long networkId=sourceIp.getAssociatedWithNetworkId();
    if (networkId == null) {
      throw new CloudRuntimeException("Ip address is not associated with any network");
    }
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new CloudRuntimeException("Unable to find ip address to map to in vm id=" + vm.getId());
    }
    Nic guestNic=_networkMgr.getNicInNetworkIncludingRemoved(vm.getId(),networkId);
    FirewallRuleVO ruleVO=_firewallDao.findById(rule.getId());
    staticNatRules.add(new StaticNatRuleImpl(ruleVO,guestNic.getIp4Address()));
  }
  if (caller != null) {
    _accountMgr.checkAccess(caller,null,staticNatRules.toArray(new StaticNatRule[staticNatRules.size()]));
  }
  try {
    if (!_firewallMgr.applyRules(staticNatRules,continueOnError,true)) {
      return false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to apply static nat rules due to ",ex);
    return false;
  }
  return true;
}
