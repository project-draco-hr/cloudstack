{
  List<FirewallRule> rules=new ArrayList<FirewallRule>();
  List<PortForwardingRuleVO> pfRules=_portForwardingDao.listByNetwork(networkId);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + pfRules.size() + " port forwarding rules for network id="+ networkId);
  }
  List<FirewallRuleVO> staticNatRules=_firewallDao.listByNetworkAndPurpose(networkId,Purpose.StaticNat);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + staticNatRules.size() + " static nat rules for network id="+ networkId);
  }
  for (  PortForwardingRuleVO rule : pfRules) {
    revokePortForwardingRuleInternal(rule.getId(),caller,userId,false);
  }
  for (  FirewallRuleVO rule : staticNatRules) {
    revokeStaticNatRuleInternal(rule.getId(),caller,userId,false);
  }
  boolean success=true;
  success=success && applyPortForwardingRulesForNetwork(networkId,true,caller);
  success=success && applyStaticNatRulesForNetwork(networkId,true,caller);
  rules.addAll(_portForwardingDao.listByNetworkAndNotRevoked(networkId));
  rules.addAll(_firewallDao.listByNetworkAndPurposeAndNotRevoked(networkId,Purpose.StaticNat));
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Successfully released rules for network id=" + networkId + " and # of rules now = "+ rules.size());
  }
  return success && rules.size() == 0;
}
