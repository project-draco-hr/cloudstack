{
  boolean success=true;
  List<? extends Nic> nics=_nicDao.listByVmId(vm.getId());
  for (  Nic nic : nics) {
    Network guestNetwork=_networkMgr.getNetwork(nic.getNetworkId());
    NetworkOffering offering=_configMgr.getNetworkOffering(guestNetwork.getNetworkOfferingId());
    if (offering.getElasticIp()) {
      if (_ipAddressDao.findByAssociatedVmId(vm.getId()) != null) {
        s_logger.debug("Vm " + vm + " already has elastic ip associated with it in guest network "+ guestNetwork);
        continue;
      }
      s_logger.debug("Allocating elastic ip and enabling static nat for it for the vm " + vm + " in guest network "+ guestNetwork);
      IpAddress ip=_networkMgr.assignElasticIp(guestNetwork.getId(),_accountMgr.getAccount(vm.getAccountId()),false,true);
      if (ip == null) {
        throw new CloudRuntimeException("Failed to allocate elastic ip for vm " + vm + " in guest network "+ guestNetwork);
      }
      s_logger.debug("Allocated elastic ip " + ip + ", now enabling static nat on it for vm "+ vm);
      try {
        enableStaticNat(ip.getId(),vm.getId());
      }
 catch (      NetworkRuleConflictException ex) {
        s_logger.warn("Failed to enable static nat as a part of enabling elasticIp and staticNat for vm " + vm + " in guest network "+ guestNetwork+ " due to exception ",ex);
        success=false;
      }
catch (      ResourceUnavailableException ex) {
        s_logger.warn("Failed to enable static nat as a part of enabling elasticIp and staticNat for vm " + vm + " in guest network "+ guestNetwork+ " due to exception ",ex);
        success=false;
      }
      if (!success) {
        s_logger.warn("Failed to enable static nat on elastic ip " + ip + " for the vm "+ vm+ ", releasing the ip...");
        _networkMgr.handleElasticIpRelease(ip);
      }
 else {
        s_logger.warn("Succesfully enabled static nat on elastic ip " + ip + " for the vm "+ vm);
      }
    }
  }
}
