{
  boolean success=true;
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  checkIpAndUserVm(ipAddress,null,caller);
  if (!ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException("One to one nat is not enabled for the ip id=" + ipId);
  }
  try {
    s_logger.debug("Revoking all " + Purpose.Firewall + "rules as a part of disabling static nat for public IP id="+ ipId);
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,callerUserId,caller)) {
      s_logger.warn("Unable to revoke all the firewall rules for ip id=" + ipId + " as a part of disable statis nat");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to revoke all firewall rules for ip id=" + ipId + " as a part of ip release",e);
    success=false;
  }
  if (!revokeAllPFAndStaticNatRulesForIp(ipId,callerUserId,caller)) {
    s_logger.warn("Unable to revoke all static nat rules for ip " + ipAddress);
    success=false;
  }
  if (success) {
    boolean isIpSystem=ipAddress.getSystem();
    ipAddress.setOneToOneNat(false);
    ipAddress.setAssociatedWithVmId(null);
    if (isIpSystem && !releaseIpIfElastic) {
      ipAddress.setSystem(false);
    }
    _ipAddressDao.update(ipAddress.getId(),ipAddress);
    if (isIpSystem && releaseIpIfElastic && !_networkMgr.handleSystemIpRelease(ipAddress)) {
      s_logger.warn("Failed to release system ip address " + ipAddress);
      success=false;
    }
    return true;
  }
 else {
    s_logger.warn("Failed to disable one to one nat for the ip address id" + ipId);
    return false;
  }
}
