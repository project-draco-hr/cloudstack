{
  final Account caller=CallContext.current().getCallingAccount();
  final Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException("Unable to create static nat rule; ip id=" + ipAddrId + " doesn't exist in the system");
  }
 else   if (ipAddress.isSourceNat() || !ipAddress.isOneToOneNat() || ipAddress.getAssociatedWithVmId() == null) {
    throw new NetworkRuleConflictException("Can't do static nat on ip address: " + ipAddress.getAddress());
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.StaticNat,FirewallRuleType.User,null,rule.getTrafficType());
  final Long networkId=ipAddress.getAssociatedWithNetworkId();
  final Long accountId=ipAddress.getAllocatedToAccountId();
  final Long domainId=ipAddress.getAllocatedInDomainId();
  _networkModel.checkIpForService(ipAddress,Service.StaticNat,null);
  Network network=_networkModel.getNetwork(networkId);
  NetworkOffering off=_entityMgr.findById(NetworkOffering.class,network.getNetworkOfferingId());
  if (off.getElasticIp()) {
    throw new InvalidParameterValueException("Can't create ip forwarding rules for the network where elasticIP service is enabled");
  }
  final String dstIp=ipAddress.getVmIp();
  return Transaction.execute(new TransactionCallbackWithException<StaticNatRule,NetworkRuleConflictException>(){
    @Override public StaticNatRule doInTransaction(    TransactionStatus status) throws NetworkRuleConflictException {
      FirewallRuleVO newRule=new FirewallRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,rule.getPurpose(),null,null,null,null,null);
      newRule=_firewallDao.persist(newRule);
      if (openFirewall) {
        _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId(),networkId);
      }
      try {
        _firewallMgr.detectRulesConflict(newRule);
        if (!_firewallDao.setStateToAdd(newRule)) {
          throw new CloudRuntimeException("Unable to update the state to add for " + newRule);
        }
        CallContext.current().setEventDetails("Rule Id: " + newRule.getId());
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),0,newRule.getId(),null,FirewallRule.class.getName(),newRule.getUuid());
        StaticNatRule staticNatRule=new StaticNatRuleImpl(newRule,dstIp);
        return staticNatRule;
      }
 catch (      Exception e) {
        if (newRule != null) {
          _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
          _firewallMgr.removeRule(newRule);
        }
        if (e instanceof NetworkRuleConflictException) {
          throw (NetworkRuleConflictException)e;
        }
        throw new CloudRuntimeException("Unable to add static nat rule for the ip id=" + newRule.getSourceIpAddressId(),e);
      }
    }
  }
);
}
