{
  Account caller=UserContext.current().getCaller();
  Long ipId=cmd.getIpAddressId();
  Pair<String,Long> accountDomainPair=_accountMgr.finalizeAccountDomainForList(caller,cmd.getAccountName(),cmd.getDomainId());
  String accountName=accountDomainPair.first();
  Long domainId=accountDomainPair.second();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException("Ip address id=" + ipId + " not ready for port forwarding rules yet");
    }
    _accountMgr.checkAccess(caller,ipAddressVO);
  }
  Filter filter=new Filter(PortForwardingRuleVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<PortForwardingRuleVO> sb=_forwardingDao.createSearchBuilder();
  sb.and("ip",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and("accountId",sb.entity().getAccountId(),Op.EQ);
  sb.and("domainId",sb.entity().getDomainId(),Op.EQ);
  sb.and("oneToOneNat",sb.entity().isOneToOneNat(),Op.EQ);
  SearchCriteria<PortForwardingRuleVO> sc=sb.create();
  if (ipId != null) {
    sc.setParameters("ip",ipId);
  }
  if (domainId != null) {
    sc.setParameters("domainId",domainId);
    if (accountName != null) {
      Account account=_accountMgr.getActiveAccount(accountName,domainId);
      sc.setParameters("accountId",account.getId());
    }
  }
  sc.setParameters("oneToOneNat",false);
  return _forwardingDao.search(sc,filter);
}
