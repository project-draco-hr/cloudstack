{
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  UserContext.current().setEventDetails("Ip Id: " + ipId);
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException("Unable to find ip address by id " + ipId);
  }
  boolean performedIpAssoc=false;
  boolean result=false;
  try {
    Network network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id");
    }
    Nic guestNic=_networkModel.getNicInNetwork(vmId,networkId);
    if (guestNic == null) {
      throw new InvalidParameterValueException("Vm doesn't belong to the network with specified id");
    }
    if (!_networkModel.areServicesSupportedInNetwork(network.getId(),Service.StaticNat)) {
      throw new InvalidParameterValueException("Unable to create static nat rule; StaticNat service is not " + "supported in network with specified id");
    }
    if (!isSystemVm) {
      UserVmVO vm=_vmDao.findById(vmId);
      if (vm == null) {
        throw new InvalidParameterValueException("Can't enable static nat for the address id=" + ipId + ", invalid virtual machine id specified ("+ vmId+ ").");
      }
      if (ipAddress.getAssociatedWithNetworkId() == null) {
        boolean assignToVpcNtwk=network.getVpcId() != null && ipAddress.getVpcId() != null && ipAddress.getVpcId().longValue() == network.getVpcId();
        if (assignToVpcNtwk) {
          _networkModel.checkIpForService(ipAddress,Service.StaticNat,networkId);
          s_logger.debug("The ip is not associated with the VPC network id=" + networkId + ", so assigning");
          try {
            ipAddress=_networkMgr.associateIPToGuestNetwork(ipId,networkId,false);
          }
 catch (          Exception ex) {
            s_logger.warn("Failed to associate ip id=" + ipId + " to VPC network id="+ networkId+ " as "+ "a part of enable static nat");
            return false;
          }
          performedIpAssoc=true;
        }
      }
 else {
        _networkModel.checkIpForService(ipAddress,Service.StaticNat,null);
      }
      if (ipAddress.getAssociatedWithNetworkId() == null) {
        throw new InvalidParameterValueException("Ip address " + ipAddress + " is not assigned to the network "+ network);
      }
      checkIpAndUserVm(ipAddress,vm,caller);
      isIpReadyForStaticNat(vmId,ipAddress,caller,ctx.getCallerUserId());
    }
    ipAddress.setOneToOneNat(true);
    ipAddress.setAssociatedWithVmId(vmId);
    if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
      s_logger.trace("Enabling static nat for ip address " + ipAddress + " and vm id="+ vmId+ " on the backend");
      if (applyStaticNatForIp(ipId,false,caller,false)) {
        result=true;
      }
 else {
        s_logger.warn("Failed to enable static nat rule for ip address " + ipId + " on the backend");
      }
    }
 else {
      s_logger.warn("Failed to update ip address " + ipAddress + " in the DB as a part of enableStaticNat");
    }
  }
  finally {
    if (!result) {
      ipAddress.setOneToOneNat(false);
      ipAddress.setAssociatedWithVmId(null);
      _ipAddressDao.update(ipAddress.getId(),ipAddress);
      if (performedIpAssoc) {
        IpAddress ip=_ipAddressDao.findById(ipAddress.getId());
        _vpcMgr.unassignIPFromVpcNetwork(ip.getId(),networkId);
      }
    }
  }
  return result;
}
