{
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException("Can't enable static, ip address " + ipAddress + " is a sourceNat ip address");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipAddress.getId(),Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable static nat for the ip address " + ipAddress + " as it already has PortForwarding rules assigned");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipAddress.getId(),Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException("Failed to enable static nat for the ip address " + ipAddress + " as it already has LoadBalancing rules assigned");
    }
  }
 else   if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
    throw new NetworkRuleConflictException("Failed to enable static for the ip address " + ipAddress + " and vm id="+ vmId+ " as it's already assigned to antoher vm");
  }
  IPAddressVO oldIP=_ipAddressDao.findByAssociatedVmId(vmId);
  if (oldIP != null) {
    Long networkId=oldIP.getAssociatedWithNetworkId();
    boolean reassignStaticNat=false;
    if (networkId != null) {
      Network guestNetwork=_networkMgr.getNetwork(networkId);
      NetworkOffering offering=_configMgr.getNetworkOffering(guestNetwork.getNetworkOfferingId());
      if (offering.getElasticIp()) {
        reassignStaticNat=true;
      }
    }
    if (!reassignStaticNat) {
      throw new InvalidParameterValueException("Failed to enable static nat for the ip address id=" + ipAddress.getId() + " as vm id="+ vmId+ " is already associated with ip id="+ oldIP.getId());
    }
    s_logger.debug("Disassociating static nat for ip " + oldIP);
    if (!disableStaticNat(oldIP.getId(),caller,callerUserId)) {
      throw new CloudRuntimeException("Failed to disable old static nat rule for vm id=" + vmId + " and ip "+ oldIP);
    }
  }
}
