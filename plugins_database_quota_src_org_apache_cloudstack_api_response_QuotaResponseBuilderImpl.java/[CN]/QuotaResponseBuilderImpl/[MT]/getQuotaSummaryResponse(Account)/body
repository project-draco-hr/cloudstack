{
  Calendar[] period=_statement.getCurrentStatementTime();
  if (account != null) {
    QuotaSummaryResponse qr=new QuotaSummaryResponse();
    DomainVO domain=_domainDao.findById(account.getDomainId());
    BigDecimal curBalance=_quotaBalanceDao.lastQuotaBalance(account.getAccountId(),account.getDomainId(),period[1].getTime());
    BigDecimal quotaUsage=_quotaUsageDao.findTotalQuotaUsage(account.getAccountId(),account.getDomainId(),null,period[0].getTime(),period[1].getTime());
    qr.setAccountId(account.getAccountId());
    qr.setAccountName(account.getAccountName());
    qr.setDomainId(account.getDomainId());
    qr.setDomainName(domain.getName());
    qr.setBalance(curBalance);
    qr.setQuotaUsage(quotaUsage);
    qr.setState(account.getState());
    qr.setStartDate(period[0].getTime());
    qr.setEndDate(period[1].getTime());
    qr.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());
    qr.setObjectName("summary");
    return qr;
  }
 else {
    throw new InvalidParameterValueException("Quota summary response for an account requires a valid account.");
  }
}
