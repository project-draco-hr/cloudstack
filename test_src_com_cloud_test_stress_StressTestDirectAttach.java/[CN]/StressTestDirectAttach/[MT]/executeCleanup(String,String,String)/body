{
  String userId=_userId.get().toString();
  String encodedUserId=URLEncoder.encode(userId,"UTF-8");
  String url=server + "?command=listUsers&id=" + encodedUserId;
  s_logger.info("Cleaning up resources for user: " + userId + " with url "+ url);
  HttpClient client=new HttpClient();
  HttpMethod method=new GetMethod(url);
  int responseCode=client.executeMethod(method);
  s_logger.info("get user response code: " + responseCode);
  if (responseCode == 200) {
    InputStream is=method.getResponseBodyAsStream();
    Map<String,String> userInfo=getSingleValueFromXML(is,new String[]{"username","id","account"});
    if (!username.equals(userInfo.get("username"))) {
      s_logger.error("get user failed to retrieve requested user, aborting cleanup test" + ". Following URL was sent: " + url);
      return -1;
    }
  }
 else {
    s_logger.error("get user failed with error code: " + responseCode + ". Following URL was sent: "+ url);
    return responseCode;
  }
{
    url=server + "?command=updateUser&id=" + userId+ "&firstname=delete&lastname=me";
    client=new HttpClient();
    method=new GetMethod(url);
    responseCode=client.executeMethod(method);
    s_logger.info("update user response code: " + responseCode);
    if (responseCode == 200) {
      InputStream is=method.getResponseBodyAsStream();
      Map<String,String> success=getSingleValueFromXML(is,new String[]{"success"});
      s_logger.info("update user..success? " + success.get("success"));
    }
 else {
      s_logger.error("update user failed with error code: " + responseCode + ". Following URL was sent: "+ url);
      return responseCode;
    }
  }
  String encodedApiKey=URLEncoder.encode(_apiKey.get(),"UTF-8");
  String requestToSign="apikey=" + encodedApiKey + "&command=rebootVirtualMachine&id="+ _linuxVmId.get();
  requestToSign=requestToSign.toLowerCase();
  String signature=signRequest(requestToSign,_secretKey.get());
  String encodedSignature=URLEncoder.encode(signature,"UTF-8");
  url=developerServer + "?command=rebootVirtualMachine&id=" + _linuxVmId.get()+ "&apikey="+ encodedApiKey+ "&signature="+ encodedSignature;
  client=new HttpClient();
  method=new GetMethod(url);
  responseCode=client.executeMethod(method);
  s_logger.info("Reboot VM response code: " + responseCode);
  if (responseCode == 200) {
    InputStream input=method.getResponseBodyAsStream();
    Element el=queryAsyncJobResult(server,input);
    Map<String,String> success=getSingleValueFromXML(el,new String[]{"success"});
    s_logger.info("VM was rebooted with the status: " + success.get("success"));
  }
 else {
    s_logger.error(" VM test failed with error code: " + responseCode + ". Following URL was sent: "+ url);
    return responseCode;
  }
  requestToSign="apikey=" + encodedApiKey + "&command=stopVirtualMachine&id="+ _linuxVmId.get();
  requestToSign=requestToSign.toLowerCase();
  signature=signRequest(requestToSign,_secretKey.get());
  encodedSignature=URLEncoder.encode(signature,"UTF-8");
  url=developerServer + "?command=stopVirtualMachine&id=" + _linuxVmId.get()+ "&apikey="+ encodedApiKey+ "&signature="+ encodedSignature;
  client=new HttpClient();
  method=new GetMethod(url);
  responseCode=client.executeMethod(method);
  s_logger.info("Stop VM response code: " + responseCode);
  if (responseCode == 200) {
    InputStream input=method.getResponseBodyAsStream();
    Element el=queryAsyncJobResult(server,input);
    Map<String,String> success=getSingleValueFromXML(el,new String[]{"success"});
    s_logger.info("VM was stopped with the status: " + success.get("success"));
  }
 else {
    s_logger.error("Stop VM test failed with error code: " + responseCode + ". Following URL was sent: "+ url);
    return responseCode;
  }
  requestToSign="apikey=" + encodedApiKey + "&command=startVirtualMachine&id="+ _linuxVmId.get();
  requestToSign=requestToSign.toLowerCase();
  signature=signRequest(requestToSign,_secretKey.get());
  encodedSignature=URLEncoder.encode(signature,"UTF-8");
  url=developerServer + "?command=startVirtualMachine&id=" + _linuxVmId.get()+ "&apikey="+ encodedApiKey+ "&signature="+ encodedSignature;
  client=new HttpClient();
  method=new GetMethod(url);
  responseCode=client.executeMethod(method);
  s_logger.info("Start VM response code: " + responseCode);
  if (responseCode == 200) {
    InputStream input=method.getResponseBodyAsStream();
    Element el=queryAsyncJobResult(server,input);
    Map<String,String> success=getSingleValueFromXML(el,new String[]{"id"});
    if (success.get("id") == null) {
      s_logger.info("Start linux vm response code: 401");
      return 401;
    }
 else {
      s_logger.info("Start vm response code: " + responseCode);
    }
    s_logger.info("VM was started with the status: " + success.get("success"));
  }
 else {
    s_logger.error("Start VM test failed with error code: " + responseCode + ". Following URL was sent: "+ url);
    return responseCode;
  }
{
    url=server + "?command=deleteUser&id=" + userId;
    client=new HttpClient();
    method=new GetMethod(url);
    responseCode=client.executeMethod(method);
    s_logger.info("delete user response code: " + responseCode);
    if (responseCode == 200) {
      InputStream input=method.getResponseBodyAsStream();
      Element el=queryAsyncJobResult(server,input);
      s_logger.info("Deleted user successfully");
    }
 else {
      s_logger.error("delete user failed with error code: " + responseCode + ". Following URL was sent: "+ url);
      return responseCode;
    }
  }
  return responseCode;
}
