{
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  int _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  Answer answer=null;
  DataObject cacheData=null;
  DataObject srcForCopy=srcData;
  try {
    if (needCacheStorage(srcData,destData)) {
      Scope destScope=pickCacheScopeForCopy(srcData,destData);
      srcForCopy=cacheData=cacheMgr.createCacheObject(srcData,destScope);
    }
    CopyCommand cmd=new CopyCommand(srcForCopy.getTO(),destData.getTO(),_primaryStorageDownloadWait,VirtualMachineManager.ExecuteInSequence.value());
    EndPoint ep=destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcForCopy,destData);
    if (ep == null) {
      String errMsg="No remote endpoint to send command, check if host or ssvm is down?";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (cacheData != null) {
      final Long cacheId=cacheData.getId();
      final String cacheType=cacheData.getType().toString();
      final String cacheUuid=cacheData.getUuid().toString();
      if (srcData.getType() == DataObjectType.VOLUME && (destData.getType() == DataObjectType.VOLUME || destData.getType() == DataObjectType.TEMPLATE)) {
        s_logger.debug("Delete " + cacheType + " cache(id: "+ cacheId+ ", uuid: "+ cacheUuid+ ")");
        cacheMgr.deleteCacheObject(srcForCopy);
      }
 else {
        if ((answer == null || !answer.getResult()) && srcForCopy.getRefCount() < 2) {
          s_logger.warn("Copy may not be handled correctly by agent(id: " + (ep != null ? ep.getId() : "\"unspecified\"") + ")."+ " Delete "+ cacheType+ " cache(id: "+ cacheId+ ", uuid: "+ cacheUuid+ ")");
          cacheMgr.deleteCacheObject(srcForCopy);
        }
 else {
          s_logger.debug("Decrease reference count of " + cacheType + " cache(id: "+ cacheId+ ", uuid: "+ cacheUuid+ ")");
          cacheMgr.releaseCacheObject(srcForCopy);
        }
      }
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug("copy object failed: ",e);
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    throw new CloudRuntimeException(e.toString());
  }
}
