{
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  Account owner=_accountMgr.getActiveAccountById(ownerId);
  Boolean displayVolume=cmd.getDisplayVolume();
  _accountMgr.checkAccess(caller,null,true,_accountMgr.getActiveAccountById(ownerId));
  if (displayVolume == null) {
    displayVolume=true;
  }
 else {
    if (!_accountMgr.isRootAdmin(caller.getId())) {
      throw new PermissionDeniedException("Cannot update parameter displayvolume, only admin permitted ");
    }
  }
  _resourceLimitMgr.checkResourceLimit(owner,ResourceType.volume,displayVolume);
  Long zoneId=cmd.getZoneId();
  Long diskOfferingId=null;
  DiskOfferingVO diskOffering=null;
  Storage.ProvisioningType provisioningType;
  Long size=null;
  Long minIops=null;
  Long maxIops=null;
  VolumeVO parentVolume=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException("Either disk Offering Id or snapshot Id must be passed whilst creating volume");
  }
  if (cmd.getSnapshotId() == null) {
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    Long sizeInGB=size;
    if (size != null) {
      if (size > 0) {
        size=size * 1024 * 1024* 1024;
      }
 else {
        throw new InvalidParameterValueException("Disk size must be larger than 0");
      }
    }
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException("Please specify a valid disk offering.");
    }
    if (diskOffering.isCustomized()) {
      if (size == null) {
        throw new InvalidParameterValueException("This disk offering requires a custom size specified");
      }
      Long customDiskOfferingMaxSize=_volumeMgr.CustomDiskOfferingMaxSize.value();
      Long customDiskOfferingMinSize=_volumeMgr.CustomDiskOfferingMinSize.value();
      if ((sizeInGB < customDiskOfferingMinSize) || (sizeInGB > customDiskOfferingMaxSize)) {
        throw new InvalidParameterValueException("Volume size: " + sizeInGB + "GB is out of allowed range. Max: "+ customDiskOfferingMaxSize+ " Min:"+ customDiskOfferingMinSize);
      }
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException("This disk offering does not allow custom size");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(caller,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    Boolean isCustomizedIops=diskOffering.isCustomizedIops();
    if (isCustomizedIops != null) {
      if (isCustomizedIops) {
        minIops=cmd.getMinIops();
        maxIops=cmd.getMaxIops();
        if (minIops == null && maxIops == null) {
          minIops=0L;
          maxIops=0L;
        }
 else {
          if (minIops == null || minIops <= 0) {
            throw new InvalidParameterValueException("The min IOPS must be greater than 0.");
          }
          if (maxIops == null) {
            maxIops=0L;
          }
          if (minIops > maxIops) {
            throw new InvalidParameterValueException("The min IOPS must be less than or equal to the max IOPS.");
          }
        }
      }
 else {
        minIops=diskOffering.getMinIops();
        maxIops=diskOffering.getMaxIops();
      }
    }
    provisioningType=diskOffering.getProvisioningType();
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException("Invalid size for custom volume creation: " + size + " ,max volume size is:"+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException("unable to find a snapshot with id " + snapshotId);
    }
    if (snapshotCheck.getState() != Snapshot.State.BackedUp) {
      throw new InvalidParameterValueException("Snapshot id=" + snapshotId + " is not in "+ Snapshot.State.BackedUp+ " state yet and can't be used for volume creation");
    }
    parentVolume=_volsDao.findByIdIncludingRemoved(snapshotCheck.getVolumeId());
    diskOfferingId=snapshotCheck.getDiskOfferingId();
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if (zoneId == null) {
      zoneId=snapshotCheck.getDataCenterId();
    }
    size=snapshotCheck.getSize();
    minIops=snapshotCheck.getMinIops();
    maxIops=snapshotCheck.getMaxIops();
    provisioningType=diskOffering.getProvisioningType();
    _accountMgr.checkAccess(caller,null,true,snapshotCheck);
    Long vmId=cmd.getVirtualMachineId();
    if (vmId != null) {
      UserVmVO vm=_userVmDao.findById(vmId);
      if (vm == null || vm.getType() != VirtualMachine.Type.User) {
        throw new InvalidParameterValueException("Please specify a valid User VM.");
      }
      if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
        throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
      }
      _accountMgr.checkAccess(caller,null,false,vm);
    }
  }
  _resourceLimitMgr.checkResourceLimit(owner,ResourceType.primary_storage,displayVolume,new Long(size));
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (!zone.isLocalStorageEnabled() && diskOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException("Zone is not configured to use local storage but volume's disk offering " + diskOffering.getName() + " uses it");
  }
  String userSpecifiedName=getVolumeNameFromCommand(cmd);
  VolumeVO volume=commitVolume(cmd,caller,owner,displayVolume,zoneId,diskOfferingId,provisioningType,size,minIops,maxIops,parentVolume,userSpecifiedName,_uuidMgr.generateUuid(Volume.class,cmd.getCustomId()));
  return volume;
}
