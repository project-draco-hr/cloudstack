{
  VolumeVO volume=_volsDao.findById(volumeId);
  UserVmVO userVm=_userVmDao.findById(volume.getInstanceId());
  StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
  boolean isManaged=storagePool.isManaged();
  long[] hosts=null;
  String instanceName="none";
  if (userVm != null) {
    instanceName=userVm.getInstanceName();
    if (userVm.getHostId() != null) {
      hosts=new long[]{userVm.getHostId()};
    }
 else     if (userVm.getLastHostId() != null) {
      hosts=new long[]{userVm.getLastHostId()};
    }
    final String errorMsg="The VM must be stopped or the disk detached in order to resize with the XenServer Hypervisor.";
    if (storagePool.isManaged() && storagePool.getHypervisor() == HypervisorType.Any && hosts != null && hosts.length > 0) {
      HostVO host=_hostDao.findById(hosts[0]);
      if (currentSize != newSize && host.getHypervisorType() == HypervisorType.XenServer && !userVm.getState().equals(State.Stopped)) {
        throw new InvalidParameterValueException(errorMsg);
      }
    }
    if (currentSize != newSize && _volsDao.getHypervisorType(volume.getId()) == HypervisorType.XenServer && !userVm.getState().equals(State.Stopped)) {
      throw new InvalidParameterValueException(errorMsg);
    }
  }
  ResizeVolumePayload payload=new ResizeVolumePayload(newSize,newMinIops,newMaxIops,newHypervisorSnapshotReserve,shrinkOk,instanceName,hosts,isManaged);
  try {
    VolumeInfo vol=volFactory.getVolume(volume.getId());
    vol.addPayload(payload);
    AsyncCallFuture<VolumeApiResult> future=volService.resize(vol);
    VolumeApiResult result=future.get();
    if (storagePool.isManaged() && currentSize != newSize) {
      if (hosts != null && hosts.length > 0) {
        volService.resizeVolumeOnHypervisor(volumeId,newSize,hosts[0],instanceName);
      }
      volume.setSize(newSize);
      _volsDao.update(volume.getId(),volume);
    }
    if (result.isFailed()) {
      s_logger.warn("Failed to resize the volume " + volume);
      String details="";
      if (result.getResult() != null && !result.getResult().isEmpty()) {
        details=result.getResult();
      }
      throw new CloudRuntimeException(details);
    }
    volume=_volsDao.findById(volume.getId());
    if (newDiskOfferingId != null) {
      volume.setDiskOfferingId(newDiskOfferingId);
    }
    if (currentSize != newSize) {
      volume.setSize(newSize);
    }
    _volsDao.update(volume.getId(),volume);
    if (!shrinkOk) {
      _resourceLimitMgr.incrementResourceCount(volume.getAccountId(),ResourceType.primary_storage,volume.isDisplayVolume(),new Long(newSize - currentSize));
    }
 else {
      _resourceLimitMgr.decrementResourceCount(volume.getAccountId(),ResourceType.primary_storage,volume.isDisplayVolume(),new Long(currentSize - newSize));
    }
    return volume;
  }
 catch (  InterruptedException e) {
    s_logger.warn("failed get resize volume result",e);
    throw new CloudRuntimeException(e.getMessage());
  }
catch (  ExecutionException e) {
    s_logger.warn("failed get resize volume result",e);
    throw new CloudRuntimeException(e.getMessage());
  }
catch (  Exception e) {
    s_logger.warn("failed get resize volume result",e);
    throw new CloudRuntimeException(e.getMessage());
  }
}
