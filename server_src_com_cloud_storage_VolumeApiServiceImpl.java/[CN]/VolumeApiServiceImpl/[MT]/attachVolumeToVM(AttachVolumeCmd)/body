{
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      placeHolder=createPlaceHolderWork(command.getVirtualMachineId());
    }
    try {
      return orchestrateAttachVolumeToVM(command.getVirtualMachineId(),command.getId(),command.getDeviceId());
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<Volume> outcome=attachVolumeToVmThroughJobQueue(command.getVirtualMachineId(),command.getId(),command.getDeviceId());
    Volume vol=null;
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
 else       if (jobResult instanceof Long) {
        vol=_volumeDao.findById((Long)jobResult);
      }
    }
    return vol;
  }
}
