{
  final CallContext context=CallContext.current();
  final User callingUser=context.getCallingUser();
  final Account callingAccount=context.getCallingAccount();
  final VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  VmWorkJobVO workJob=new VmWorkJobVO(context.getContextId());
  workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
  workJob.setCmd(VmWorkTakeVolumeSnapshot.class.getName());
  workJob.setAccountId(callingAccount.getId());
  workJob.setUserId(callingUser.getId());
  workJob.setStep(VmWorkJobVO.Step.Starting);
  workJob.setVmType(VirtualMachine.Type.Instance);
  workJob.setVmInstanceId(vm.getId());
  workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());
  VmWorkTakeVolumeSnapshot workInfo=new VmWorkTakeVolumeSnapshot(callingUser.getId(),accountId != null ? accountId : callingAccount.getId(),vm.getId(),VolumeApiServiceImpl.VM_WORK_JOB_HANDLER,volumeId,policyId,snapshotId,quiesceVm);
  workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
  _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());
  return new VmJobSnapshotOutcome(workJob,snapshotId);
}
