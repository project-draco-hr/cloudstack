{
  final CallContext context=CallContext.current();
  final User callingUser=context.getCallingUser();
  final Account callingAccount=context.getCallingAccount();
  final VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      VmWorkJobVO workJob=null;
      _vmInstanceDao.lockRow(vm.getId(),true);
      workJob=new VmWorkJobVO(context.getContextId());
      workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
      workJob.setCmd(VmWorkTakeVolumeSnapshot.class.getName());
      workJob.setAccountId(callingAccount.getId());
      workJob.setUserId(callingUser.getId());
      workJob.setStep(VmWorkJobVO.Step.Starting);
      workJob.setVmType(vm.getType());
      workJob.setVmInstanceId(vm.getId());
      VmWorkTakeVolumeSnapshot workInfo=new VmWorkTakeVolumeSnapshot(callingUser.getId(),accountId != null ? accountId : callingAccount.getId(),vm.getId(),VolumeApiServiceImpl.VM_WORK_JOB_HANDLER,volumeId,policyId,snapshotId,quiesceVm);
      workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
      _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
      context.putContextParameter("workJob",workJob);
      context.putContextParameter("jobId",new Long(workJob.getId()));
    }
  }
);
  final long jobId=(Long)context.getContextParameter("jobId");
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmJobSnapshotOutcome((VmWorkJobVO)context.getContextParameter("workJob"),snapshotId);
}
