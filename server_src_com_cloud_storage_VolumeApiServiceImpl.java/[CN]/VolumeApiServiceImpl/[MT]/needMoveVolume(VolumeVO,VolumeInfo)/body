{
  if (existingVolume == null || existingVolume.getPoolId() == null || newVolume.getPoolId() == null) {
    return false;
  }
  DataStore storeForExistingVol=dataStoreMgr.getPrimaryDataStore(existingVolume.getPoolId());
  DataStore storeForNewVol=dataStoreMgr.getPrimaryDataStore(newVolume.getPoolId());
  Scope storeForExistingStoreScope=storeForExistingVol.getScope();
  if (storeForExistingStoreScope == null) {
    throw new CloudRuntimeException("Can't get scope of data store: " + storeForExistingVol.getId());
  }
  Scope storeForNewStoreScope=storeForNewVol.getScope();
  if (storeForNewStoreScope == null) {
    throw new CloudRuntimeException("Can't get scope of data store: " + storeForNewVol.getId());
  }
  if (storeForNewStoreScope.getScopeType() == ScopeType.ZONE) {
    return false;
  }
  if (storeForExistingStoreScope.getScopeType() != storeForNewStoreScope.getScopeType()) {
    if (storeForNewStoreScope.getScopeType() == ScopeType.CLUSTER) {
      Long vmClusterId=null;
      if (storeForExistingStoreScope.getScopeType() == ScopeType.HOST) {
        HostScope hs=(HostScope)storeForExistingStoreScope;
        vmClusterId=hs.getClusterId();
      }
 else       if (storeForExistingStoreScope.getScopeType() == ScopeType.ZONE) {
        Long hostId=_vmInstanceDao.findById(existingVolume.getInstanceId()).getHostId();
        if (hostId != null) {
          HostVO host=_hostDao.findById(hostId);
          vmClusterId=host.getClusterId();
        }
      }
      if (storeForNewStoreScope.getScopeId().equals(vmClusterId)) {
        return false;
      }
    }
 else     if (storeForNewStoreScope.getScopeType() == ScopeType.HOST && (storeForExistingStoreScope.getScopeType() == ScopeType.CLUSTER || storeForExistingStoreScope.getScopeType() == ScopeType.ZONE)) {
      Long hostId=_vmInstanceDao.findById(existingVolume.getInstanceId()).getHostId();
      if (storeForNewStoreScope.getScopeId().equals(hostId)) {
        return false;
      }
    }
    throw new CloudRuntimeException("Can't move volume between scope: " + storeForNewStoreScope.getScopeType() + " and "+ storeForExistingStoreScope.getScopeType());
  }
  return !storeForExistingStoreScope.isSameScope(storeForNewStoreScope);
}
