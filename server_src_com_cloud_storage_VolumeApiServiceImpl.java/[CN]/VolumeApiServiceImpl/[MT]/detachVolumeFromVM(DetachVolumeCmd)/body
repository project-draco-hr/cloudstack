{
  Account caller=CallContext.current().getCallingAccount();
  if ((cmmd.getId() == null && cmmd.getDeviceId() == null && cmmd.getVirtualMachineId() == null) || (cmmd.getId() != null && (cmmd.getDeviceId() != null || cmmd.getVirtualMachineId() != null)) || (cmmd.getId() == null && (cmmd.getDeviceId() == null || cmmd.getVirtualMachineId() == null))) {
    throw new InvalidParameterValueException("Please provide either a volume id, or a tuple(device id, instance id)");
  }
  Long volumeId=cmmd.getId();
  VolumeVO volume=null;
  if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
  }
 else {
    volume=_volsDao.findByInstanceAndDeviceId(cmmd.getVirtualMachineId(),cmmd.getDeviceId()).get(0);
  }
  if (volume == null) {
    throw new InvalidParameterValueException("Unable to find volume with ID: " + volumeId);
  }
  Long vmId=null;
  if (cmmd.getVirtualMachineId() == null) {
    vmId=volume.getInstanceId();
  }
 else {
    vmId=cmmd.getVirtualMachineId();
  }
  _accountMgr.checkAccess(caller,null,true,volume);
  if (vmId == null) {
    throw new InvalidParameterValueException("The specified volume is not attached to a VM.");
  }
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm.getState() != State.Running && vm.getState() != State.Stopped && vm.getState() != State.Destroyed) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  if (volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException("Please specify volume of type " + Volume.Type.DATADISK.toString());
  }
  if (volume.getVolumeType() == Volume.Type.ROOT) {
    validateRootVolumeDetachAttach(volume,vm);
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0) {
    throw new InvalidParameterValueException("Unable to detach volume, please specify a VM that does not have VM snapshots");
  }
  AsyncJobExecutionContext asyncExecutionContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (asyncExecutionContext != null) {
    AsyncJob job=asyncExecutionContext.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Trying to attaching volume " + volumeId + "to vm instance:"+ vm.getId()+ ", update async job-"+ job.getId()+ " progress status");
    }
    _jobMgr.updateAsyncJobAttachment(job.getId(),"Volume",volumeId);
  }
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    placeHolder=createPlaceHolderWork(vmId);
    try {
      return orchestrateDetachVolumeFromVM(vmId,volumeId);
    }
  finally {
      _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<Volume> outcome=detachVolumeFromVmThroughJobQueue(vmId,volumeId);
    Volume vol=null;
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
 else       if (jobResult instanceof Long) {
        vol=_volsDao.findById((Long)jobResult);
      }
    }
    return vol;
  }
}
