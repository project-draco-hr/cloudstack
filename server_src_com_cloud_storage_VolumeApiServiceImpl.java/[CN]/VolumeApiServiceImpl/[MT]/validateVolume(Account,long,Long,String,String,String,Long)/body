{
  Account volumeOwner=_accountMgr.getActiveAccountById(ownerId);
  _accountMgr.checkAccess(caller,null,true,volumeOwner);
  _resourceLimitMgr.checkResourceLimit(volumeOwner,ResourceType.volume);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (url != null) {
    if (url.toLowerCase().contains("file://")) {
      throw new InvalidParameterValueException("File:// type urls are currently unsupported");
    }
    UriUtils.validateUrl(format,url);
    UriUtils.checkUrlExistence(url);
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage,UriUtils.getRemoteSize(url));
  }
 else {
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage);
  }
  try {
    ImageFormat.valueOf(format.toUpperCase());
  }
 catch (  IllegalArgumentException e) {
    logger.debug("ImageFormat IllegalArgumentException: " + e.getMessage());
    throw new IllegalArgumentException("Image format: " + format + " is incorrect. Supported formats are "+ EnumUtils.listValues(ImageFormat.values()));
  }
  if (diskOfferingId != null) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException("Please specify a valid disk offering.");
    }
    if (!diskOffering.isCustomized()) {
      throw new InvalidParameterValueException("Please specify a custom sized disk offering.");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(volumeOwner,diskOffering);
    }
  }
  return false;
}
