{
  Account volumeOwner=_accountMgr.getActiveAccountById(ownerId);
  _accountMgr.checkAccess(caller,null,true,volumeOwner);
  _resourceLimitMgr.checkResourceLimit(volumeOwner,ResourceType.volume);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id " + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (url.toLowerCase().contains("file://")) {
    throw new InvalidParameterValueException("File:// type urls are currently unsupported");
  }
  ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
  if (imgfmt == null) {
    throw new IllegalArgumentException("Image format is incorrect " + format + ". Supported formats are "+ EnumUtils.listValues(ImageFormat.values()));
  }
  String userSpecifiedName=volumeName;
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  UriUtils.validateUrl(format,url);
  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage,UriUtils.getRemoteSize(url));
  if (diskOfferingId != null) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException("Please specify a valid disk offering.");
    }
    if (!diskOffering.isCustomized()) {
      throw new InvalidParameterValueException("Please specify a custom sized disk offering.");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(volumeOwner,diskOffering);
    }
  }
  return false;
}
