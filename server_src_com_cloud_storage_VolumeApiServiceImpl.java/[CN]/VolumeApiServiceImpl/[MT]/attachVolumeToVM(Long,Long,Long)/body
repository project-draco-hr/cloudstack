{
  Account caller=CallContext.current().getCallingAccount();
  VolumeInfo volumeToAttach=volFactory.getVolume(volumeId);
  if (volumeToAttach == null || !(volumeToAttach.getVolumeType() == Volume.Type.DATADISK || volumeToAttach.getVolumeType() == Volume.Type.ROOT)) {
    throw new InvalidParameterValueException("Please specify a volume with the valid type: " + Volume.Type.ROOT.toString() + " or "+ Volume.Type.DATADISK.toString());
  }
  if (volumeToAttach.getInstanceId() != null) {
    throw new InvalidParameterValueException("Please specify a volume that is not attached to any VM.");
  }
  if (volumeToAttach.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException("Please specify a volume that is not destroyed.");
  }
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException("Please specify a valid User VM.");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  if (vm.getDataCenterId() != volumeToAttach.getDataCenterId()) {
    throw new InvalidParameterValueException("Please specify a VM that is in the same zone as the volume.");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      validateRootVolumeDetachAttach(_volsDao.findById(volumeToAttach.getId()),vm);
      if (!_volsDao.findByInstanceAndDeviceId(vm.getId(),0).isEmpty()) {
        throw new InvalidParameterValueException("Vm already has root volume attached to it");
      }
      if (volumeToAttach.getState() == Volume.State.Uploaded) {
        throw new InvalidParameterValueException("No support for Root volume attach in state " + Volume.State.Uploaded);
      }
    }
  }
  if (deviceId == null || deviceId.longValue() != 0) {
    List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
    int maxDataVolumesSupported=getMaxDataVolumesSupported(vm);
    if (existingDataVolumes.size() >= maxDataVolumesSupported) {
      throw new InvalidParameterValueException("The specified VM already has the maximum number of data disks (" + maxDataVolumesSupported + "). Please specify another VM.");
    }
  }
  DataCenterVO dataCenter=_dcDao.findById(volumeToAttach.getDataCenterId());
  if (!dataCenter.isLocalStorageEnabled()) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volumeToAttach.getDiskOfferingId());
    if (diskOffering.getUseLocalStorage()) {
      throw new InvalidParameterValueException("Zone is not configured to use local storage but volume's disk offering " + diskOffering.getName() + " uses it");
    }
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0) {
    throw new InvalidParameterValueException("Unable to attach volume, please specify a VM that does not have VM snapshots");
  }
  _accountMgr.checkAccess(caller,null,true,volumeToAttach,vm);
  if (!(Volume.State.Allocated.equals(volumeToAttach.getState()) || Volume.State.Ready.equals(volumeToAttach.getState()) || Volume.State.Uploaded.equals(volumeToAttach.getState()))) {
    throw new InvalidParameterValueException("Volume state must be in Allocated, Ready or in Uploaded state");
  }
  HypervisorType rootDiskHyperType=vm.getHypervisorType();
  HypervisorType volumeToAttachHyperType=_volsDao.getHypervisorType(volumeToAttach.getId());
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (volumeToAttachStoragePool != null && !volumeToAttachStoragePool.isManaged()) {
    if (volumeToAttachHyperType != HypervisorType.None && rootDiskHyperType != volumeToAttachHyperType) {
      throw new InvalidParameterValueException("Can't attach a volume created by: " + volumeToAttachHyperType + " to a "+ rootDiskHyperType+ " vm");
    }
  }
  AsyncJobExecutionContext asyncExecutionContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (asyncExecutionContext != null) {
    AsyncJob job=asyncExecutionContext.getJob();
    if (logger.isInfoEnabled()) {
      logger.info("Trying to attaching volume " + volumeId + " to vm instance:"+ vm.getId()+ ", update async job-"+ job.getId()+ " progress status");
    }
    _jobMgr.updateAsyncJobAttachment(job.getId(),"Volume",volumeId);
  }
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    placeHolder=createPlaceHolderWork(vmId);
    try {
      return orchestrateAttachVolumeToVM(vmId,volumeId,deviceId);
    }
  finally {
      _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<Volume> outcome=attachVolumeToVmThroughJobQueue(vmId,volumeId,deviceId);
    Volume vol=null;
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Operation is interrupted",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException("Execution excetion",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InvalidParameterValueException)       throw (InvalidParameterValueException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
 else       if (jobResult instanceof Long) {
        vol=_volsDao.findById((Long)jobResult);
      }
    }
    return vol;
  }
}
