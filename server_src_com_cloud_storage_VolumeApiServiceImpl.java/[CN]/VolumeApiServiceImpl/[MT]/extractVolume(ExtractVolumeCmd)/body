{
  Long volumeId=cmd.getId();
  Long zoneId=cmd.getZoneId();
  String mode=cmd.getMode();
  Account account=CallContext.current().getCallingAccount();
  if (!_accountMgr.isRootAdmin(account.getId()) && ApiDBUtils.isExtractionDisabled()) {
    throw new PermissionDeniedException("Extraction has been disabled by admin");
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find volume with specified volumeId");
    ex.addProxyObject(volumeId.toString(),"volumeId");
    throw ex;
  }
  _accountMgr.checkAccess(account,null,true,volume);
  if (_dcDao.findById(zoneId) == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  if (volume.getPoolId() == null) {
    throw new InvalidParameterValueException("The volume doesnt belong to a storage pool so cant extract it");
  }
  if (volume.getInstanceId() != null && ApiDBUtils.findVMInstanceById(volume.getInstanceId()).getState() != State.Stopped) {
    logger.debug("Invalid state of the volume with ID: " + volumeId + ". It should be either detached or the VM should be in stopped state.");
    PermissionDeniedException ex=new PermissionDeniedException("Invalid state of the volume with specified ID. It should be either detached or the VM should be in stopped state.");
    ex.addProxyObject(volume.getUuid(),"volumeId");
    throw ex;
  }
  if (volume.getVolumeType() != Volume.Type.DATADISK) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
    if (template != null) {
      boolean isExtractable=template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;
      if (!isExtractable && account != null && !_accountMgr.isRootAdmin(account.getId())) {
        PermissionDeniedException ex=new PermissionDeniedException("The volume with specified volumeId is not allowed to be extracted");
        ex.addProxyObject(volume.getUuid(),"volumeId");
        throw ex;
      }
    }
  }
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException("Please specify a valid extract Mode ");
  }
  VolumeDataStoreVO volumeStoreRef=_volumeStoreDao.findByVolume(volumeId);
  if (volumeStoreRef != null && volumeStoreRef.getExtractUrl() != null) {
    return volumeStoreRef.getExtractUrl();
  }
  VMInstanceVO vm=null;
  if (volume.getInstanceId() != null) {
    vm=_vmInstanceDao.findById(volume.getInstanceId());
  }
  if (vm != null) {
    AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
    if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
      VmWorkJobVO placeHolder=null;
      placeHolder=createPlaceHolderWork(vm.getId());
      try {
        return orchestrateExtractVolume(volume.getId(),zoneId);
      }
  finally {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
 else {
      Outcome<String> outcome=extractVolumeThroughJobQueue(vm.getId(),volume.getId(),zoneId);
      try {
        outcome.get();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("Operation is interrupted",e);
      }
catch (      java.util.concurrent.ExecutionException e) {
        throw new RuntimeException("Execution excetion",e);
      }
      Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
      if (jobResult != null) {
        if (jobResult instanceof ConcurrentOperationException)         throw (ConcurrentOperationException)jobResult;
 else         if (jobResult instanceof RuntimeException)         throw (RuntimeException)jobResult;
 else         if (jobResult instanceof Throwable)         throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
      }
      if (jobResult != null && jobResult instanceof String) {
        return (String)jobResult;
      }
      return null;
    }
  }
  return orchestrateExtractVolume(volume.getId(),zoneId);
}
