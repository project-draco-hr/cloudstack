{
  Long newSize=null;
  Long newMinIops=null;
  Long newMaxIops=null;
  boolean shrinkOk=cmd.getShrinkOk();
  VolumeVO volume=_volsDao.findById(cmd.getEntityId());
  if (volume == null) {
    throw new InvalidParameterValueException("No such volume");
  }
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,volume);
  if (volume.getInstanceId() != null) {
    if (_vmSnapshotDao.findByVm(volume.getInstanceId()).size() > 0) {
      throw new InvalidParameterValueException("Volume cannot be resized which is attached to VM with VM Snapshots");
    }
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  DiskOfferingVO newDiskOffering=null;
  if (cmd.getNewDiskOfferingId() != null && volume.getDiskOfferingId() != cmd.getNewDiskOfferingId()) {
    newDiskOffering=_diskOfferingDao.findById(cmd.getNewDiskOfferingId());
  }
  HypervisorType hypervisorType=_volsDao.getHypervisorType(volume.getId());
  if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.XenServer && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Any && hypervisorType != HypervisorType.None) {
    throw new InvalidParameterValueException("CloudStack currently supports volume resize only on KVM, VMware, or XenServer.");
  }
  if (volume.getState() != Volume.State.Ready && volume.getState() != Volume.State.Allocated) {
    throw new InvalidParameterValueException("Volume should be in ready or allocated state before attempting a resize. Volume " + volume.getUuid() + " is in state "+ volume.getState()+ ".");
  }
  if (newDiskOffering == null) {
    newSize=cmd.getSize();
    if (newSize != null) {
      if (!diskOffering.isCustomized() && !volume.getVolumeType().equals(Volume.Type.ROOT)) {
        throw new InvalidParameterValueException("To change a volume's size without providing a new disk offering, its current disk offering must be " + "customizable or it must be a root volume (if providing a disk offering, make sure it is different from the current disk offering).");
      }
      newSize=newSize << 30;
    }
 else {
      newSize=volume.getSize();
    }
    newMinIops=cmd.getMinIops();
    if (newMinIops != null) {
      if (diskOffering.isCustomizedIops() == null || !diskOffering.isCustomizedIops()) {
        throw new InvalidParameterValueException("The current disk offering does not support customization of the 'Min IOPS' parameter.");
      }
    }
 else {
      newMinIops=volume.getMinIops();
    }
    newMaxIops=cmd.getMaxIops();
    if (newMaxIops != null) {
      if (diskOffering.isCustomizedIops() == null || !diskOffering.isCustomizedIops()) {
        throw new InvalidParameterValueException("The current disk offering does not support customization of the 'Max IOPS' parameter.");
      }
    }
 else {
      newMaxIops=volume.getMaxIops();
    }
    validateIops(newMinIops,newMaxIops);
  }
 else {
    if (newDiskOffering.getRemoved() != null) {
      throw new InvalidParameterValueException("Requested disk offering has been removed.");
    }
    if (!DiskOfferingVO.Type.Disk.equals(newDiskOffering.getType())) {
      throw new InvalidParameterValueException("Requested disk offering type is invalid.");
    }
    if (diskOffering.getTags() != null) {
      if (!StringUtils.areTagsEqual(diskOffering.getTags(),newDiskOffering.getTags())) {
        throw new InvalidParameterValueException("The tags on the new and old disk offerings must match.");
      }
    }
 else     if (newDiskOffering.getTags() != null) {
      throw new InvalidParameterValueException("There are no tags on the current disk offering. The new disk offering needs to have no tags, as well.");
    }
    if (!areIntegersEqual(diskOffering.getHypervisorSnapshotReserve(),newDiskOffering.getHypervisorSnapshotReserve())) {
      throw new InvalidParameterValueException("The hypervisor snapshot reverse on the new and old disk offerings must be equal.");
    }
    if (newDiskOffering.getDomainId() != null) {
      _configMgr.checkDiskOfferingAccess(CallContext.current().getCallingAccount(),newDiskOffering);
    }
    if (newDiskOffering.isCustomized()) {
      newSize=cmd.getSize();
      if (newSize == null) {
        throw new InvalidParameterValueException("The new disk offering requires that a size be specified.");
      }
      newSize=newSize << 30;
    }
 else {
      newSize=newDiskOffering.getDiskSize();
    }
    if (!volume.getSize().equals(newSize) && !volume.getVolumeType().equals(Volume.Type.DATADISK)) {
      throw new InvalidParameterValueException("Only data volumes can be resized via a new disk offering.");
    }
    if (newDiskOffering.isCustomizedIops() != null && newDiskOffering.isCustomizedIops()) {
      newMinIops=cmd.getMinIops() != null ? cmd.getMinIops() : volume.getMinIops();
      newMaxIops=cmd.getMaxIops() != null ? cmd.getMaxIops() : volume.getMaxIops();
      validateIops(newMinIops,newMaxIops);
    }
 else {
      newMinIops=newDiskOffering.getMinIops();
      newMaxIops=newDiskOffering.getMaxIops();
    }
  }
  long currentSize=volume.getSize();
  if (currentSize != newSize) {
    if (!validateVolumeSizeRange(newSize)) {
      throw new InvalidParameterValueException("Requested size out of range");
    }
    if (currentSize > newSize && !shrinkOk) {
      throw new InvalidParameterValueException("Going from existing size of " + currentSize + " to size of "+ newSize+ " would shrink the volume."+ "Need to sign off by supplying the shrinkok parameter with value of true.");
    }
    if (newSize > currentSize) {
      _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),ResourceType.primary_storage,volume.isDisplayVolume(),new Long(newSize - currentSize).longValue());
    }
  }
  if (volume.getState() == Volume.State.Allocated) {
    s_logger.debug("Volume is in the allocated state, but has never been created. Simply updating database with new size and IOPS.");
    volume.setSize(newSize);
    volume.setMinIops(newMinIops);
    volume.setMaxIops(newMaxIops);
    if (newDiskOffering != null) {
      volume.setDiskOfferingId(cmd.getNewDiskOfferingId());
    }
    _volsDao.update(volume.getId(),volume);
    return volume;
  }
  UserVmVO userVm=_userVmDao.findById(volume.getInstanceId());
  if (userVm != null) {
    AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
    if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
      VmWorkJobVO placeHolder=null;
      placeHolder=createPlaceHolderWork(userVm.getId());
      try {
        return orchestrateResizeVolume(volume.getId(),currentSize,newSize,newMinIops,newMaxIops,newDiskOffering != null ? cmd.getNewDiskOfferingId() : null,shrinkOk);
      }
  finally {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
 else {
      Outcome<Volume> outcome=resizeVolumeThroughJobQueue(userVm.getId(),volume.getId(),currentSize,newSize,newMinIops,newMaxIops,newDiskOffering != null ? cmd.getNewDiskOfferingId() : null,shrinkOk);
      try {
        outcome.get();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("Operation was interrupted",e);
      }
catch (      java.util.concurrent.ExecutionException e) {
        throw new RuntimeException("Execution exception",e);
      }
      Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
      if (jobResult != null) {
        if (jobResult instanceof ConcurrentOperationException) {
          throw (ConcurrentOperationException)jobResult;
        }
 else         if (jobResult instanceof RuntimeException) {
          throw (RuntimeException)jobResult;
        }
 else         if (jobResult instanceof Throwable) {
          throw new RuntimeException("Unexpected exception",(Throwable)jobResult);
        }
 else         if (jobResult instanceof Long) {
          return _volsDao.findById((Long)jobResult);
        }
      }
      return volume;
    }
  }
  return orchestrateResizeVolume(volume.getId(),currentSize,newSize,newMinIops,newMaxIops,newDiskOffering != null ? cmd.getNewDiskOfferingId() : null,shrinkOk);
}
