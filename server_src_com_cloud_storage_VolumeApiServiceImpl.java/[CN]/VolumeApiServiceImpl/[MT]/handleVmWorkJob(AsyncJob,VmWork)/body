{
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info("Unable to find vm " + work.getVmId());
  }
  assert(vm != null);
  if (work instanceof VmWorkAttachVolume) {
    VmWorkAttachVolume attachWork=(VmWorkAttachVolume)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Attach-Volume within VM work job context. vmId: " + attachWork.getVmId() + ", volId: "+ attachWork.getVolumeId()+ ", deviceId: "+ attachWork.getDeviceId());
    orchestrateAttachVolumeToVM(attachWork.getVmId(),attachWork.getVolumeId(),attachWork.getDeviceId());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Attach-Volume within VM work job context. vmId: " + attachWork.getVmId() + ", volId: "+ attachWork.getVolumeId()+ ", deviceId: "+ attachWork.getDeviceId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkDetachVolume) {
    VmWorkDetachVolume detachWork=(VmWorkDetachVolume)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Detach-Volume within VM work job context. vmId: " + detachWork.getVmId() + ", volId: "+ detachWork.getVolumeId());
    orchestrateDetachVolumeFromVM(detachWork.getVmId(),detachWork.getVolumeId());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Detach-Volume within VM work job context. vmId: " + detachWork.getVmId() + ", volId: "+ detachWork.getVolumeId());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkResizeVolume) {
    VmWorkResizeVolume resizeWork=(VmWorkResizeVolume)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Resize-Volume within VM work job context. vmId: " + resizeWork.getVmId() + ", volId: "+ resizeWork.getVolumeId()+ ", size "+ resizeWork.getCurrentSize()+ " -> "+ resizeWork.getNewSize());
    orchestrateResizeVolume(resizeWork.getVolumeId(),resizeWork.getCurrentSize(),resizeWork.getNewSize(),resizeWork.getNewServiceOfferingId(),resizeWork.isShrinkOk());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Resize-Volume within VM work job context. vmId: " + resizeWork.getVmId() + ", volId: "+ resizeWork.getVolumeId()+ ", size "+ resizeWork.getCurrentSize()+ " -> "+ resizeWork.getNewSize());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
  }
 else   if (work instanceof VmWorkMigrateVolume) {
    VmWorkMigrateVolume migrateWork=(VmWorkMigrateVolume)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Migrate-Volume within VM work job context. vmId: " + migrateWork.getVmId() + ", volId: "+ migrateWork.getVolumeId()+ ", destPoolId: "+ migrateWork.getDestPoolId()+ ", live: "+ migrateWork.isLiveMigrate());
    Volume newVol=orchestrateMigrateVolume(migrateWork.getVolumeId(),migrateWork.getDestPoolId(),migrateWork.isLiveMigrate());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Migrate-Volume within VM work job context. vmId: " + migrateWork.getVmId() + ", volId: "+ migrateWork.getVolumeId()+ ", destPoolId: "+ migrateWork.getDestPoolId()+ ", live: "+ migrateWork.isLiveMigrate());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(new Long(newVol.getId())));
  }
 else   if (work instanceof VmWorkTakeVolumeSnapshot) {
    VmWorkTakeVolumeSnapshot snapshotWork=(VmWorkTakeVolumeSnapshot)work;
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute Take-Volume-Snapshot within VM work job context. vmId: " + snapshotWork.getVmId() + ", volId: "+ snapshotWork.getVolumeId()+ ", policyId: "+ snapshotWork.getPolicyId()+ ", quiesceVm: "+ snapshotWork.isQuiesceVm());
    Account account=_accountDao.findById(snapshotWork.getAccountId());
    orchestrateTakeVolumeSnapshot(snapshotWork.getVolumeId(),snapshotWork.getPolicyId(),snapshotWork.getSnapshotId(),account,snapshotWork.isQuiesceVm());
    if (s_logger.isDebugEnabled())     s_logger.debug("Done executing Take-Volume-Snapshot within VM work job context. vmId: " + snapshotWork.getVmId() + ", volId: "+ snapshotWork.getVolumeId()+ ", policyId: "+ snapshotWork.getPolicyId()+ ", quiesceVm: "+ snapshotWork.isQuiesceVm());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,JobSerializerHelper.toObjectSerializedString(snapshotWork.getSnapshotId()));
  }
 else {
    RuntimeException e=new RuntimeException("Unsupported VM work command: " + job.getCmd());
    String exceptionJson=JobSerializerHelper.toSerializedString(e);
    s_logger.error("Serialize exception object into json: " + exceptionJson);
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,exceptionJson);
  }
}
