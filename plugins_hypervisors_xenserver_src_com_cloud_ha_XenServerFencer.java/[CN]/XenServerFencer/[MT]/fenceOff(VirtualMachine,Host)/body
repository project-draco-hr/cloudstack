{
  if (host.getHypervisorType() != HypervisorType.XenServer) {
    logger.debug("Don't know how to fence non XenServer hosts " + host.getHypervisorType());
    return null;
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(host.getClusterId());
  FenceCommand fence=new FenceCommand(vm,host);
  for (  HostVO h : hosts) {
    if (h.getHypervisorType() == HypervisorType.XenServer) {
      if (h.getStatus() != Status.Up) {
        continue;
      }
      if (h.getId() == host.getId()) {
        continue;
      }
      FenceAnswer answer;
      try {
        Answer ans=_agentMgr.send(h.getId(),fence);
        if (!(ans instanceof FenceAnswer)) {
          logger.debug("Answer is not fenceanswer.  Result = " + ans.getResult() + "; Details = "+ ans.getDetails());
          continue;
        }
        answer=(FenceAnswer)ans;
      }
 catch (      AgentUnavailableException e) {
        if (logger.isDebugEnabled()) {
          logger.debug("Moving on to the next host because " + h.toString() + " is unavailable");
        }
        continue;
      }
catch (      OperationTimedoutException e) {
        if (logger.isDebugEnabled()) {
          logger.debug("Moving on to the next host because " + h.toString() + " is unavailable");
        }
        continue;
      }
      if (answer != null && answer.getResult()) {
        return true;
      }
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Unable to fence off " + vm.toString() + " on "+ host.toString());
  }
  return false;
}
