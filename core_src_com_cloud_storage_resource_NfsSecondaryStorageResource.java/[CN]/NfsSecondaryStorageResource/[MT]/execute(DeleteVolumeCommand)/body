{
  DataStoreTO dstore=cmd.getDataStore();
  if (dstore instanceof NfsTO) {
    NfsTO nfs=(NfsTO)dstore;
    String relativeVolumePath=cmd.getVolumePath();
    String parent=getRootDir(nfs.getUrl());
    if (relativeVolumePath.startsWith(File.separator)) {
      relativeVolumePath=relativeVolumePath.substring(1);
    }
    if (!parent.endsWith(File.separator)) {
      parent+=File.separator;
    }
    String absoluteVolumePath=parent + relativeVolumePath;
    File tmpltParent=new File(absoluteVolumePath).getParentFile();
    String details=null;
    if (!tmpltParent.exists()) {
      details="volume parent directory " + tmpltParent.getName() + " doesn't exist";
      s_logger.debug(details);
      return new Answer(cmd,true,details);
    }
    File[] tmpltFiles=tmpltParent.listFiles();
    if (tmpltFiles == null || tmpltFiles.length == 0) {
      details="No files under volume parent directory " + tmpltParent.getName();
      s_logger.debug(details);
    }
 else {
      boolean found=false;
      for (      File f : tmpltFiles) {
        if (!found && f.getName().equals("volume.properties")) {
          found=true;
        }
        if (!f.delete()) {
          return new Answer(cmd,false,"Unable to delete file " + f.getName() + " under Volume path "+ relativeVolumePath);
        }
      }
      if (!found) {
        details="Can not find volume.properties under " + tmpltParent.getName();
        s_logger.debug(details);
      }
    }
    if (!tmpltParent.delete()) {
      details="Unable to delete directory " + tmpltParent.getName() + " under Volume path "+ relativeVolumePath;
      s_logger.debug(details);
      return new Answer(cmd,false,details);
    }
    return new Answer(cmd,true,null);
  }
 else   if (dstore instanceof S3TO) {
    final S3TO s3=(S3TO)dstore;
    final String path=cmd.getVolumePath();
    final String bucket=s3.getBucketName();
    try {
      S3Utils.deleteDirectory(s3,bucket,path);
      return new Answer(cmd,true,String.format("Deleted volume %1%s from bucket %2$s.",path,bucket));
    }
 catch (    Exception e) {
      final String errorMessage=String.format("Failed to delete volume %1$s from bucket %2$s due to the following error: %3$s",path,bucket,e.getMessage());
      s_logger.error(errorMessage,e);
      return new Answer(cmd,false,errorMessage);
    }
  }
 else   if (dstore instanceof SwiftTO) {
    Long volumeId=cmd.getVolumeId();
    String path=cmd.getVolumePath();
    String filename=StringUtils.substringAfterLast(path,"/");
    String result=swiftDelete((SwiftTO)dstore,"V-" + volumeId.toString(),filename);
    if (result != null) {
      String errMsg="failed to delete volume " + filename + " , err="+ result;
      s_logger.warn(errMsg);
      return new Answer(cmd,false,errMsg);
    }
    return new Answer(cmd,false,"Swift is not currently support DeleteVolumeCommand");
  }
 else {
    return new Answer(cmd,false,"Unsupported image data store: " + dstore);
  }
}
