{
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    final File downloadDirectory=_storage.getFile(determineStorageTemplatePath(storagePath,destPath));
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=format("Unable to create directory " + "download directory %1$s for download from S3.",downloadDirectory.getName());
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
    List<File> files=getDirectory(s3,s3.getBucketName(),destPath,downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    File destFile=null;
    for (    File f : files) {
      if (!f.getName().endsWith(".properties")) {
        destFile=f;
        break;
      }
    }
    if (destFile == null) {
      return new CopyCmdAnswer("Can't find template");
    }
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(destPath + File.separator + destFile.getName());
      newTemplTO.setName(destFile.getName());
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer("not implemented yet");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format("Failed to download" + "due to $2%s",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}
