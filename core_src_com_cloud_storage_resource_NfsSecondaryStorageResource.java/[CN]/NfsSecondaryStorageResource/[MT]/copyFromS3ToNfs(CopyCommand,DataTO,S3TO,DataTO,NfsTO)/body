{
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath);
    final File downloadDirectory=_storage.getFile(downloadPath);
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=format("Unable to create directory " + "download directory %1$s for download from S3.",downloadDirectory.getName());
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
    List<File> files=getDirectory(s3,s3.getBucketName(),destPath,downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    File destFile=null;
    for (    File f : files) {
      if (!f.getName().endsWith(".properties")) {
        destFile=f;
        break;
      }
    }
    if (destFile == null) {
      return new CopyCmdAnswer("Can't find template");
    }
    String scriptsDir="scripts/storage/secondary";
    String createTmpltScr=Script.findScript(scriptsDir,"createtmplt.sh");
    if (createTmpltScr == null) {
      throw new ConfigurationException("Unable to find createtmplt.sh");
    }
    s_logger.info("createtmplt.sh found in " + createTmpltScr);
    String createVolScr=Script.findScript(scriptsDir,"createvolume.sh");
    if (createVolScr == null) {
      throw new ConfigurationException("Unable to find createvolume.sh");
    }
    s_logger.info("createvolume.sh found in " + createVolScr);
    String script=srcData.getObjectType() == DataObjectType.TEMPLATE ? createTmpltScr : createVolScr;
    int installTimeoutPerGig=180 * 60 * 1000;
    int imgSizeGigs=(int)Math.ceil(destFile.length() * 1.0d / (1024 * 1024 * 1024));
    imgSizeGigs++;
    long timeout=imgSizeGigs * installTimeoutPerGig;
    String origPath=destFile.getAbsolutePath();
    String extension=null;
    if (srcData.getObjectType() == DataObjectType.TEMPLATE) {
      extension=((TemplateObjectTO)srcData).getFormat().getFileExtension();
    }
 else {
      extension=((VolumeObjectTO)srcData).getDiskType().toString().toLowerCase();
    }
    String templateName=UUID.randomUUID().toString();
    String templateFilename=templateName + "." + extension;
    Script scr=new Script(script,timeout,s_logger);
    scr.add("-s",Integer.toString(imgSizeGigs));
    scr.add("-n",templateFilename);
    scr.add("-t",downloadPath);
    scr.add("-f",origPath);
    String result;
    result=scr.execute();
    if (result != null) {
      throw new CloudRuntimeException("Failed to run script " + script);
    }
    String finalFileName=templateFilename;
    String finalDownloadPath=destPath + File.separator + templateFilename;
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(finalDownloadPath);
      newTemplTO.setName(finalFileName);
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer("not implemented yet");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format("Failed to download" + "due to $2%s",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}
