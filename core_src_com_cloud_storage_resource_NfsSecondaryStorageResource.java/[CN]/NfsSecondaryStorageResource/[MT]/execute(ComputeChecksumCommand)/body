{
  String relativeTemplatePath=cmd.getTemplatePath();
  String parent=_parent;
  if (relativeTemplatePath.startsWith(File.separator)) {
    relativeTemplatePath=relativeTemplatePath.substring(1);
  }
  if (!parent.endsWith(File.separator)) {
    parent+=File.separator;
  }
  String absoluteTemplatePath=parent + relativeTemplatePath;
  MessageDigest digest;
  String checksum=null;
  File f=new File(absoluteTemplatePath);
  InputStream is=null;
  byte[] buffer=new byte[8192];
  int read=0;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("parent path " + parent + " relative template path "+ relativeTemplatePath);
  }
  try {
    digest=MessageDigest.getInstance("MD5");
    is=new FileInputStream(f);
    while ((read=is.read(buffer)) > 0) {
      digest.update(buffer,0,read);
    }
    byte[] md5sum=digest.digest();
    BigInteger bigInt=new BigInteger(1,md5sum);
    checksum=bigInt.toString(16);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Successfully calculated checksum for file " + absoluteTemplatePath + " - "+ checksum);
    }
  }
 catch (  IOException e) {
    String logMsg="Unable to process file for MD5 - " + absoluteTemplatePath;
    s_logger.error(logMsg);
    return new Answer(cmd,false,checksum);
  }
catch (  NoSuchAlgorithmException e) {
    return new Answer(cmd,false,checksum);
  }
 finally {
    try {
      is.close();
    }
 catch (    IOException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Could not close the file " + absoluteTemplatePath);
      }
      return new Answer(cmd,false,checksum);
    }
  }
  return new Answer(cmd,true,checksum);
}
