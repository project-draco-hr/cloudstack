{
  _eth1ip=(String)params.get("eth1ip");
  if (_eth1ip != null) {
    params.put("private.network.device","eth1");
  }
 else {
    s_logger.warn("Wait, what's going on? eth1ip is null!!");
  }
  String eth2ip=(String)params.get("eth2ip");
  if (eth2ip != null) {
    params.put("public.network.device","eth2");
  }
  _publicIp=(String)params.get("eth2ip");
  _hostname=(String)params.get("name");
  super.configure(name,params);
  _params=params;
  String value=(String)params.get("scripts.timeout");
  _timeout=NumbersUtil.parseInt(value,1440) * 1000;
  _storage=(StorageLayer)params.get(StorageLayer.InstanceConfigKey);
  if (_storage == null) {
    value=(String)params.get(StorageLayer.ClassConfigKey);
    if (value == null) {
      value="com.cloud.storage.JavaStorageLayer";
    }
    try {
      Class<?> clazz=Class.forName(value);
      _storage=(StorageLayer)ComponentLocator.inject(clazz);
      _storage.configure("StorageLayer",params);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException("Unable to find class " + value);
    }
  }
  _configSslScr=Script.findScript(getDefaultScriptsDir(),"config_ssl.sh");
  if (_configSslScr != null) {
    s_logger.info("config_ssl.sh found in " + _configSslScr);
  }
  _configAuthScr=Script.findScript(getDefaultScriptsDir(),"config_auth.sh");
  if (_configSslScr != null) {
    s_logger.info("config_auth.sh found in " + _configAuthScr);
  }
  _configIpFirewallScr=Script.findScript(getDefaultScriptsDir(),"ipfirewall.sh");
  if (_configIpFirewallScr != null) {
    s_logger.info("_configIpFirewallScr found in " + _configIpFirewallScr);
  }
  _role=(String)params.get("role");
  if (_role == null)   _role=SecondaryStorageVm.Role.templateProcessor.toString();
  s_logger.info("Secondary storage runs in role " + _role);
  _guid=(String)params.get("guid");
  if (_guid == null) {
    throw new ConfigurationException("Unable to find the guid");
  }
  _dc=(String)params.get("zone");
  if (_dc == null) {
    throw new ConfigurationException("Unable to find the zone");
  }
  _pod=(String)params.get("pod");
  _instance=(String)params.get("instance");
  _mountParent=(String)params.get("mount.parent");
  if (_mountParent == null) {
    _mountParent=File.separator + "mnt";
  }
  if (_instance != null) {
    _mountParent=_mountParent + File.separator + _instance;
  }
  _nfsPath=(String)params.get("mount.path");
  if (_nfsPath == null) {
    throw new ConfigurationException("Unable to find mount.path");
  }
  String inSystemVM=(String)params.get("secondary.storage.vm");
  if (inSystemVM == null || "true".equalsIgnoreCase(inSystemVM)) {
    _inSystemVM=true;
    _localgw=(String)params.get("localgw");
    if (_localgw != null) {
      _eth1mask=(String)params.get("eth1mask");
      String internalDns1=(String)params.get("dns1");
      String internalDns2=(String)params.get("dns2");
      if (internalDns1 == null) {
        s_logger.warn("No DNS entry found during configuration of NfsSecondaryStorage");
      }
 else {
        addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns1);
      }
      String mgmtHost=(String)params.get("host");
      String nfsHost=NfsUtils.getHostPart(_nfsPath);
      if (nfsHost == null) {
        s_logger.error("Invalid or corrupt nfs url " + _nfsPath);
        throw new CloudRuntimeException("Unable to determine host part of nfs path");
      }
      try {
        InetAddress nfsHostAddr=InetAddress.getByName(nfsHost);
        nfsHost=nfsHostAddr.getHostAddress();
      }
 catch (      UnknownHostException uhe) {
        s_logger.error("Unable to resolve nfs host " + nfsHost);
        throw new CloudRuntimeException("Unable to resolve nfs host to an ip address " + nfsHost);
      }
      addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,nfsHost);
      addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,mgmtHost);
      if (internalDns2 != null) {
        addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns2);
      }
    }
    String useSsl=(String)params.get("sslcopy");
    if (useSsl != null) {
      _sslCopy=Boolean.parseBoolean(useSsl);
      if (_sslCopy) {
        configureSSL();
      }
    }
    startAdditionalServices();
    _params.put("install.numthreads","50");
    _params.put("secondary.storage.vm","true");
  }
  _parent=mount(_nfsPath,_mountParent);
  if (_parent == null) {
    throw new ConfigurationException("Unable to create mount point");
  }
  s_logger.info("Mount point established at " + _parent);
  try {
    _params.put("template.parent",_parent);
    _params.put(StorageLayer.InstanceConfigKey,_storage);
    _dlMgr=new DownloadManagerImpl();
    _dlMgr.configure("DownloadManager",_params);
    _upldMgr=new UploadManagerImpl();
    _upldMgr.configure("UploadManager",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn("Caught problem while configuring DownloadManager",e);
    return false;
  }
  return true;
}
