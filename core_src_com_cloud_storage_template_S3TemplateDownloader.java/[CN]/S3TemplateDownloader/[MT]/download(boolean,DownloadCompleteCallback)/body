{
  if (!status.equals(Status.NOT_STARTED)) {
    LOGGER.debug("Template download is already started, not starting again. Template: " + downloadUrl);
    return 0;
  }
  int responseCode;
  if ((responseCode=HTTPUtils.executeMethod(httpClient,getMethod)) == -1) {
    errorString="Exception while executing HttpMethod " + getMethod.getName() + " on URL "+ downloadUrl;
    LOGGER.warn(errorString);
    status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
  if (!HTTPUtils.verifyResponseCode(responseCode)) {
    errorString="Response code for GetMethod of " + downloadUrl + " is incorrect, responseCode: "+ responseCode;
    LOGGER.warn(errorString);
    status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
  Header contentLengthHeader=getMethod.getResponseHeader("Content-Length");
  Header contentTypeHeader=getMethod.getResponseHeader("Content-Type");
  if (contentLengthHeader == null) {
    errorString="The ContentLengthHeader of " + downloadUrl + " isn't supplied";
    LOGGER.warn(errorString);
    status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
 else {
    remoteSize=Long.parseLong(contentLengthHeader.getValue());
  }
  if (remoteSize > maxTemplateSizeInByte) {
    errorString="Remote size is too large for template " + downloadUrl + " remote size is "+ remoteSize+ " max allowed is "+ maxTemplateSizeInByte;
    LOGGER.warn(errorString);
    status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
  InputStream inputStream;
  try {
    inputStream=new BufferedInputStream(getMethod.getResponseBodyAsStream());
  }
 catch (  IOException e) {
    errorString="Exception occurred while opening InputStream for template " + downloadUrl;
    LOGGER.warn(errorString);
    status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
  LOGGER.info("Starting download from " + downloadUrl + " to S3 bucket "+ s3TO.getBucketName()+ " and size "+ remoteSize+ " bytes");
  final Date start=new Date();
  ObjectMetadata objectMetadata=new ObjectMetadata();
  objectMetadata.setContentLength(remoteSize);
  if (contentTypeHeader.getValue() != null) {
    objectMetadata.setContentType(contentTypeHeader.getValue());
  }
  PutObjectRequest putObjectRequest=new PutObjectRequest(s3TO.getBucketName(),s3Key,inputStream,objectMetadata);
  if (s3TO.getEnableRRS()) {
    putObjectRequest.withStorageClass(StorageClass.ReducedRedundancy);
  }
  Upload upload=S3Utils.putObject(s3TO,putObjectRequest);
  upload.addProgressListener(new ProgressListener(){
    @Override public void progressChanged(    ProgressEvent progressEvent){
      totalBytes+=progressEvent.getBytesTransferred();
      LOGGER.trace("Template download from " + downloadUrl + " to S3 bucket "+ s3TO.getBucketName()+ " transferred  "+ totalBytes+ " in "+ ((new Date().getTime() - start.getTime()) / 1000)+ " seconds");
      if (progressEvent.getEventType() == ProgressEventType.TRANSFER_STARTED_EVENT) {
        status=Status.IN_PROGRESS;
      }
 else       if (progressEvent.getEventType() == ProgressEventType.TRANSFER_COMPLETED_EVENT) {
        status=Status.DOWNLOAD_FINISHED;
      }
 else       if (progressEvent.getEventType() == ProgressEventType.TRANSFER_CANCELED_EVENT) {
        status=Status.ABORTED;
      }
 else       if (progressEvent.getEventType() == ProgressEventType.TRANSFER_FAILED_EVENT) {
        status=Status.UNRECOVERABLE_ERROR;
      }
    }
  }
);
  try {
    upload.waitForCompletion();
  }
 catch (  InterruptedException e) {
    LOGGER.warn("Interruption occurred while waiting for upload of " + downloadUrl + " to complete");
  }
  downloadTime=new Date().getTime() - start.getTime();
  if (status == Status.DOWNLOAD_FINISHED) {
    LOGGER.info("Template download from " + downloadUrl + " to S3 bucket "+ s3TO.getBucketName()+ " transferred  "+ totalBytes+ " in "+ (downloadTime / 1000)+ " seconds, completed successfully!");
  }
 else {
    LOGGER.warn("Template download from " + downloadUrl + " to S3 bucket "+ s3TO.getBucketName()+ " transferred  "+ totalBytes+ " in "+ (downloadTime / 1000)+ " seconds, completed with status "+ status.toString());
  }
  getMethod.releaseConnection();
  if (callback != null) {
    callback.downloadComplete(status);
  }
  return totalBytes;
}
