{
  s3=storageLayer;
  this.downloadUrl=downloadUrl;
  this.installPath=installPath;
  status=TemplateDownloader.Status.NOT_STARTED;
  this.resourceType=resourceType;
  maxTemplateSizeInByte=maxTemplateSizeInBytes;
  totalBytes=0;
  client=new HttpClient(s_httpClientManager);
  myretryhandler=new HttpMethodRetryHandler(){
    @Override public boolean retryMethod(    final HttpMethod method,    final IOException exception,    int executionCount){
      if (executionCount >= 2) {
        return false;
      }
      if (exception instanceof NoHttpResponseException) {
        return true;
      }
      if (!method.isRequestSent()) {
        return true;
      }
      return false;
    }
  }
;
  try {
    request=new GetMethod(downloadUrl);
    request.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,myretryhandler);
    completionCallback=callback;
    Pair<String,Integer> hostAndPort=UriUtils.validateUrl(downloadUrl);
    fileName=StringUtils.substringAfterLast(downloadUrl,"/");
    if (proxy != null) {
      client.getHostConfiguration().setProxy(proxy.getHost(),proxy.getPort());
      if (proxy.getUserName() != null) {
        Credentials proxyCreds=new UsernamePasswordCredentials(proxy.getUserName(),proxy.getPassword());
        client.getState().setProxyCredentials(AuthScope.ANY,proxyCreds);
      }
    }
    if ((user != null) && (password != null)) {
      client.getParams().setAuthenticationPreemptive(true);
      Credentials defaultcreds=new UsernamePasswordCredentials(user,password);
      client.getState().setCredentials(new AuthScope(hostAndPort.first(),hostAndPort.second(),AuthScope.ANY_REALM),defaultcreds);
      s_logger.info("Added username=" + user + ", password="+ password+ "for host "+ hostAndPort.first()+ ":"+ hostAndPort.second());
    }
 else {
      s_logger.info("No credentials configured for host=" + hostAndPort.first() + ":"+ hostAndPort.second());
    }
  }
 catch (  IllegalArgumentException iae) {
    errorString=iae.getMessage();
    status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
    inited=false;
  }
catch (  Exception ex) {
    errorString="Unable to start download -- check url? ";
    status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
    s_logger.warn("Exception in constructor -- " + ex.toString());
  }
catch (  Throwable th) {
    s_logger.warn("throwable caught ",th);
  }
}
