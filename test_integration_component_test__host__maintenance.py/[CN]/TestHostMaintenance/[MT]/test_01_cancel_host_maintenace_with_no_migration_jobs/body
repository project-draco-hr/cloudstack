@attr(tags=['advanced', 'advancedns', 'smoke', 'basic', 'eip', 'sg'], required_hardware='true')
def test_01_cancel_host_maintenace_with_no_migration_jobs(self):
    listHost = Host.list(self.apiclient, type='Routing', zoneid=self.zone.id, podid=self.pod.id)
    for host in listHost:
        self.logger.debug('1 Hypervisor = {}'.format(host.id))
    if (len(listHost) < 2):
        raise unittest.SkipTest('Cancel host maintenance when VMs are migrating should be tested for 2 or more hosts')
        return
    vm_migrating = False
    try:
        vm_migrating = self.hostPrepareAndCancelMaintenance(listHost[0].id, listHost[1].id, self.checkNoVmMigratingOnHost)
        vm_migrating = self.hostPrepareAndCancelMaintenance(listHost[1].id, listHost[0].id, self.checkNoVmMigratingOnHost)
    except Exception as e:
        self.logger.debug('Exception {}'.format(e))
        self.fail('Cancel host maintenance failed {}'.format(e[0]))
    if (vm_migrating == True):
        raise unittest.SkipTest('VMs are migrating and the test will not be able to check the conditions the test is intended for')
    return
