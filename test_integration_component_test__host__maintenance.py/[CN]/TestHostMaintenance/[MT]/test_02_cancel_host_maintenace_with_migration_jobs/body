@attr(tags=['advanced', 'advancedns', 'smoke', 'basic', 'eip', 'sg'], required_hardware='true')
def test_02_cancel_host_maintenace_with_migration_jobs(self):
    listHost = Host.list(self.apiclient, type='Routing', zoneid=self.zone.id, podid=self.pod.id)
    for host in listHost:
        self.logger.debug('2 Hypervisor = {}'.format(host.id))
    if (len(listHost) != 2):
        raise unittest.SkipTest('Cancel host maintenance when VMs are migrating can only be tested with 2 hosts')
        return
    no_of_vms = self.noOfVMsOnHost(listHost[0].id)
    no_of_vms = (no_of_vms + self.noOfVMsOnHost(listHost[1].id))
    if (no_of_vms < 5):
        self.logger.debug('Create VMs as there are not enough vms to check host maintenance')
        no_vm_req = (5 - no_of_vms)
        if (no_vm_req > 0):
            self.logger.debug('Creating vms = {}'.format(no_vm_req))
            self.vmlist = self.createVMs(listHost[0].id, no_vm_req)
    vm_migrating = False
    try:
        vm_migrating = self.hostPrepareAndCancelMaintenance(listHost[0].id, listHost[1].id, self.checkVmMigratingOnHost)
        vm_migrating = self.hostPrepareAndCancelMaintenance(listHost[1].id, listHost[0].id, self.checkVmMigratingOnHost)
    except Exception as e:
        self.logger.debug('Exception {}'.format(e))
        self.fail('Cancel host maintenance failed {}'.format(e[0]))
    if (vm_migrating == False):
        raise unittest.SkipTest('No VM is migrating and the test will not be able to check the conditions the test is intended for')
    return
