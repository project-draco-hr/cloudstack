{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  if (getSyncSource() == null) {
    CreatePrivateTemplateParam param=gson.fromJson(job.getCmdInfo(),CreatePrivateTemplateParam.class);
    asyncMgr.syncAsyncJobExecution(job.getId(),"Volume",param.getVolumeId());
    return true;
  }
 else {
    CreatePrivateTemplateParam param=gson.fromJson(job.getCmdInfo(),CreatePrivateTemplateParam.class);
    AsyncJobExecutorContext asyncJobExecutorContext=asyncMgr.getExecutorContext();
    ManagementServer managerServer=asyncJobExecutorContext.getManagementServer();
    AccountManager accountManager=asyncJobExecutorContext.getAccountMgr();
    UserVmManager vmMgr=asyncJobExecutorContext.getVmMgr();
    Long snapshotId=param.getSnapshotId();
    Long volumeId=param.getVolumeId();
    managerServer.saveStartedEvent(param.getUserId(),param.getAccountId(),EventTypes.EVENT_TEMPLATE_CREATE,"Creating Template: " + param.getName(),param.getEventId());
    String details="Could not create private template from ";
    if (snapshotId != null) {
      details+="snapshot with id: " + snapshotId;
    }
 else {
      details+="volume with id: " + volumeId;
    }
    Long jobId=getJob().getId();
    int jobStatus=AsyncJobResult.STATUS_FAILED;
    int resultCode=BaseCmd.INTERNAL_ERROR;
    Object resultObject=null;
    try {
      VolumeVO volume=managerServer.findAnyVolumeById(volumeId);
      if (volume == null) {
        throw new InvalidParameterValueException("Could not find active volume with ID " + volumeId);
      }
      AccountVO account=(AccountVO)managerServer.findAccountById(volume.getAccountId());
      if (accountManager.resourceLimitExceeded(account,ResourceType.template)) {
        details+=", reason: The maximum number of templates for the specified account has been exceeded.";
      }
 else {
        VMTemplateVO template=vmMgr.createPrivateTemplateRecord(param.getUserId(),param.getVolumeId(),param.getName(),param.getDescription(),param.getGuestOsId(),param.getRequiresHvm(),param.getBits(),param.isPasswordEnabled(),param.isPublic(),param.isFeatured());
        if (template != null) {
          if (s_logger.isInfoEnabled())           s_logger.info("CreatePrivateTemplate created a new instance " + template.getId() + ", update async job-"+ job.getId()+ " progress status");
          asyncMgr.updateAsyncJobAttachment(job.getId(),"vm_template",template.getId());
          asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,template.getId());
          template=managerServer.createPrivateTemplate(template,param.getUserId(),snapshotId,volumeId,param.getName(),param.getDescription());
          if (template != null) {
            VMTemplateHostVO templateHostRef=managerServer.findTemplateHostRef(template.getId(),volume.getDataCenterId());
            jobStatus=AsyncJobResult.STATUS_SUCCEEDED;
            resultCode=0;
            details=null;
            String eventParams="id=" + template.getId() + "\nname="+ template.getName()+ "\nsize="+ volume.getSize()+ "\ndcId="+ volume.getDataCenterId();
            managerServer.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_TEMPLATE_CREATE,"Successfully created Template " + param.getName(),eventParams,param.getEventId());
            resultObject=composeResultObject(template,templateHostRef,volume.getDataCenterId());
          }
        }
      }
    }
 catch (    InvalidParameterValueException e) {
      details+=", reason: " + e.getMessage();
      s_logger.error(details,e);
      resultCode=BaseCmd.PARAM_ERROR;
    }
catch (    Exception e) {
      details+=", reason: " + e.getMessage();
      s_logger.error(details,e);
    }
    if (jobStatus == AsyncJobResult.STATUS_FAILED) {
      resultObject=details;
      managerServer.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_TEMPLATE_CREATE,details,"",param.getEventId());
    }
    asyncMgr.completeAsyncJob(jobId,jobStatus,resultCode,resultObject);
    return true;
  }
}
