def verify_vsd_firewall_rule(self, firewall_rule, traffic_type='Ingress'):
    self.debug(('Verifying the creation and state of Network Firewall (Ingress/Egress ACL) rule with ID - %s in VSD' % firewall_rule.id))
    ext_fw_rule_filter = self.get_externalID_filter(firewall_rule.id)
    vsd_fw_rule = (self.vsd.get_egress_acl_entry(filter=ext_fw_rule_filter) if (traffic_type is 'Ingress') else self.vsd.get_ingress_acl_entry(filter=ext_fw_rule_filter))
    self.assertEqual(vsd_fw_rule.policy_state, 'LIVE', "Ingress/Egress ACL rule's policy state in VSD should be LIVE")
    dest_port = ((str(firewall_rule.startport) + '-') + str(firewall_rule.endport))
    self.assertEqual(vsd_fw_rule.destination_port, dest_port, "Ingress/Egress ACL rule's destination port in VSD should match corresponding rule's destination port in CloudStack")
    vsd_protocol = int(vsd_fw_rule.protocol)
    protocol = 'tcp'
    if (vsd_protocol == 6):
        protocol = 'tcp'
    elif (vsd_protocol == 1):
        protocol = 'icmp'
    elif (vsd_protocol == 17):
        protocol = 'udp'
    self.assertEqual(protocol, firewall_rule.protocol.lower(), "Ingress/Egress ACL rule's protocol in VSD should match corresponding rule's protocol in CloudStack")
    self.debug(('Successfully verified the creation and state of Network Firewall (Ingress/Egress ACL) rule with ID - %s in VSD' % firewall_rule.id))
