def verify_vsd_floating_ip(self, network, vm, public_ipaddress, vpc=None):
    self.debug(('Verifying the assignment and state of public IP address - %s in VSD' % public_ipaddress.ipaddress))
    ext_fip_filter = (self.get_externalID_filter(((vpc.id + ':') + public_ipaddress.id)) if vpc else self.get_externalID_filter(((network.id + ':') + public_ipaddress.id)))
    vsd_fip = self.vsd.get_floating_ip(filter=ext_fip_filter)
    self.assertEqual(vsd_fip.address, public_ipaddress.ipaddress, 'Floating IP address in VSD should match acquired public IP address in CloudStack')
    self.assertEqual(vsd_fip.assigned, True, 'Floating IP in VSD should be assigned')
    ext_network_filter = (self.get_externalID_filter(vpc.id) if vpc else self.get_externalID_filter(network.id))
    vsd_domain = self.vsd.get_domain(filter=ext_network_filter)
    self.assertEqual(vsd_domain.id, vsd_fip.parent_id, 'Floating IP in VSD should be associated with the correct VSD domain, which in turn should correspond to the correct VPC (or) network in CloudStack')
    vsd_subnet = self.vsd.get_subnet(filter=self.get_externalID_filter(network.id))
    for nic in vm.nic:
        if (nic.networkid == network.id):
            vsd_vport = self.vsd.get_vport(subnet=vsd_subnet, filter=self.get_externalID_filter(nic.id))
    self.assertEqual(vsd_vport.associated_floating_ip_id, vsd_fip.id, 'Floating IP in VSD should be associated to the correct VSD vport, which in turn should correspond to the correct Static NAT rule enabled VM and network in CloudStack')
    self.debug(('Successfully verified the assignment and state of public IP address - %s in VSD' % public_ipaddress.ipaddress))
