def verify_vsp_floating_ip(self, network, vm, public_ipaddress, vpc=None):
    if vpc:
        ext_fip_id = self.get_externalID(((vpc.id + ':') + public_ipaddress.id))
    else:
        ext_fip_id = self.get_externalID(((network.id + ':') + public_ipaddress.id))
    vsd_fip = self.vsd.get_floating_ip(externalID=ext_fip_id)
    self.debug('SHOW FLOATING IP DATA FORMAT IN VSD')
    self.debug(vsd_fip)
    self.assertEqual(vsd_fip['address'], public_ipaddress.ipaddress, 'Floating IP address in VSD should match acquired public IP address in CloudStack')
    if vpc:
        ext_network_id = self.get_externalID(vpc.id)
    else:
        ext_network_id = self.get_externalID(network.id)
    vsd_domain = self.vsd.get_domain(externalID=ext_network_id)
    self.debug('SHOW NETWORK DATA FORMAT IN VSD')
    self.debug(vsd_domain)
    self.assertEqual(vsd_domain['ID'], vsd_fip['parentID'], 'Floating IP in VSD should be associated with the correct VSD domain, which in turn should correspond to the correct VPC (or) network in CloudStack')
    ext_subnet_id = self.get_externalID(network.id)
    vsd_subnet = self.vsd.get_subnet(externalID=ext_subnet_id)
    for nic in vm.nic:
        if (nic.networkname == vsd_subnet['description']):
            ext_network_id = self.get_externalID(nic.networkid)
            ext_nic_id = self.get_externalID(nic.id)
            vsd_vport = self.vsd.get_vport(subnet_externalID=ext_network_id, vport_externalID=ext_nic_id)
            self.debug('SHOW VM VPORT DATA FORMAT IN VSD')
            self.debug(vsd_vport)
    self.assertEqual(vsd_vport['associatedFloatingIPID'], vsd_fip['ID'], 'Floating IP in VSD should be associated to the correct VSD vport, which in turn should correspond to the correct Static NAT enabled VM and network in CloudStack')
