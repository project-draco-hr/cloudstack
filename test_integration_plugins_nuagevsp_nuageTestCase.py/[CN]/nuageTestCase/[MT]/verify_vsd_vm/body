def verify_vsd_vm(self, vm, stopped=None):
    self.debug(('Verifying the deployment and state of VM - %s in VSD' % vm.name))
    vsd_vm = self.vsd.get_vm(filter=self.get_externalID_filter(vm.id))
    self.assertNotEqual(vsd_vm, None, 'VM data format in VSD should not be of type None')
    for nic in vm.nic:
        vsd_subnet = self.vsd.get_subnet(filter=self.get_externalID_filter(nic.networkid))
        vsd_vport = self.vsd.get_vport(subnet=vsd_subnet, filter=self.get_externalID_filter(nic.id))
        vsd_vm_interface = self.vsd.get_vm_interface(filter=self.get_externalID_filter(nic.id))
        self.assertEqual(vsd_vport.active, True, 'VSD VM vport should be active')
        self.assertEqual(vsd_vm_interface.ip_address, nic.ipaddress, "VSD VM interface IP address should match VM's NIC IP address in CloudStack")
    if (not self.isSimulator):
        if stopped:
            self.assertEqual(vsd_vm.status, 'DELETE_PENDING', 'VM state in VSD should be DELETE_PENDING')
        else:
            self.assertEqual(vsd_vm.status, vm.state.upper(), 'VM state in VSD should match its state in CloudStack')
    self.debug(('Successfully verified the deployment and state of VM - %s in VSD' % vm.name))
