def inject_into_iso(pubKey, systemiso):
    isofile = systemvmpath
    newpubkey = pubKey
    backup = (isofile + '.bak')
    tmpiso = ((TMP + pathSep) + systemiso)
    if (not os.path.exists(isofile)):
        print ('Could not open %s' % isofile)
        clean_up()
        sys.exit(IOError)
    command = ((('7z x -y ' + isofile) + ' -o') + MOUNTPATH)
    status = os.system(command)
    if (status != 0):
        print ('Failed to mount original iso %' % isofile)
        clean_up()
        sys.exit(status)
    pubKeyFileOld = open(((MOUNTPATH + pathSep) + 'authorized_keys'), 'r')
    pubKeyFileNew = open(newpubkey, 'r')
    for line1 in pubKeyFileOld:
        for line2 in pubKeyFileNew:
            if (line1 == line2):
                pubKeyFileOld.close()
                pubKeyFileNew.close()
                return 0
    pubKeyFileOld.close()
    pubKeyFileNew.close()
    try:
        shutil.copy(isofile, backup)
    except:
        print ('Failed to backup original iso %' % isofile)
        clean_up()
        sys.exit(IOError)
    shutil.rmtree(TMPDIR)
    try:
        shutil.copytree(MOUNTPATH, TMPDIR)
    except:
        print ('Failed to copy from original iso %s' % isofile)
        clean_up()
        sys.exit(IOError)
    try:
        shutil.copyfile(newpubkey, ((TMPDIR + pathSep) + 'authorized_keys'))
    except:
        print ('Failed to copy key %s from original iso to new iso' % newpubkey)
        traceback.print_exc(file=sys.stdout)
        clean_up()
        sys.exit(IOError)
    command = ((('mkisofs -quiet -r -o ' + tmpiso) + ' ') + TMPDIR)
    try:
        status = os.system(command)
    except:
        print ('Failed to create new iso %s from %s' % (tmpiso, TMPDIR))
        clean_up()
        sys.exit(IOError)
    shutil.rmtree(MOUNTPATH)
    try:
        shutil.copyfile(tmpiso, isofile)
    except:
        print ('Failed to overwrite old iso %s with %s' % (isofile, tmpiso))
        traceback.print_exc(file=sys.stdout)
        clean_up()
        sys.exit(IOError)
    shutil.rmtree(TMPDIR)
