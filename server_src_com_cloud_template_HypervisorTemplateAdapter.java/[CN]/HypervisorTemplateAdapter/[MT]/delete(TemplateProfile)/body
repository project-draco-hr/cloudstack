{
  boolean success=true;
  VMTemplateVO template=profile.getTemplate();
  List<DataStore> imageStores=this.templateMgr.getImageStoreByTemplate(template.getId(),profile.getZoneId());
  if (imageStores == null || imageStores.size() == 0) {
    s_logger.info("Unable to find image store still having template: " + template.getName() + ", so just mark the template removed");
  }
 else {
    for (    DataStore store : imageStores) {
      long storeId=store.getId();
      List<TemplateDataStoreVO> templateStores=_tmpltStoreDao.listByTemplateStore(template.getId(),storeId);
      for (      TemplateDataStoreVO templateStore : templateStores) {
        if (templateStore.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
          String errorMsg="Please specify a template that is not currently being downloaded.";
          s_logger.debug("Template: " + template.getName() + " is currently being downloaded to secondary storage host: "+ store.getName()+ "; cant' delete it.");
          throw new CloudRuntimeException(errorMsg);
        }
      }
    }
    String eventType="";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      eventType=EventTypes.EVENT_ISO_DELETE;
    }
 else {
      eventType=EventTypes.EVENT_TEMPLATE_DELETE;
    }
    for (    DataStore imageStore : imageStores) {
      Long sZoneId=((ImageStoreEntity)imageStore).getDataCenterId();
      if (sZoneId != null) {
        UsageEventUtils.publishUsageEvent(eventType,template.getAccountId(),sZoneId,template.getId(),null,null,null);
      }
      s_logger.info("Delete template from image store: " + imageStore.getName());
      AsyncCallFuture<TemplateApiResult> future=this.imageService.deleteTemplateAsync(this.imageFactory.getTemplate(template.getId(),imageStore));
      try {
        TemplateApiResult result=future.get();
        success=result.isSuccess();
        if (!success) {
          break;
        }
        List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,template.getId());
        if (templateZones != null) {
          for (          VMTemplateZoneVO templateZone : templateZones) {
            templateZoneDao.remove(templateZone.getId());
          }
        }
      }
 catch (      InterruptedException e) {
        s_logger.debug("delete template Failed",e);
        throw new CloudRuntimeException("delete template Failed",e);
      }
catch (      ExecutionException e) {
        s_logger.debug("delete template Failed",e);
        throw new CloudRuntimeException("delete template Failed",e);
      }
    }
  }
  if (success) {
    s_logger.info("Delete template from template table");
    if (_tmpltDao.remove(template.getId())) {
      Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
      _resourceLimitMgr.decrementResourceCount(template.getAccountId(),ResourceType.template);
      _resourceLimitMgr.recalculateResourceCount(template.getAccountId(),account.getDomainId(),ResourceType.secondary_storage.getOrdinal());
    }
  }
  return success;
}
