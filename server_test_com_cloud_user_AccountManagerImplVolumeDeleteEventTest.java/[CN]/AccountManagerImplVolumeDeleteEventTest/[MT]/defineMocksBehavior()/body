{
  AccountVO account=new AccountVO();
  account.setId(ACCOUNT_ID);
  when(_accountDao.remove(ACCOUNT_ID)).thenReturn(true);
  when(_accountDao.findById(ACCOUNT_ID)).thenReturn(account);
  DomainVO domain=new DomainVO();
  VirtualMachineEntity vmEntity=mock(VirtualMachineEntity.class);
  when(_orchSrvc.getVirtualMachine(anyString())).thenReturn(vmEntity);
  when(vmEntity.destroy(anyString())).thenReturn(true);
  Mockito.doReturn(vm).when(_vmDao).findById(anyLong());
  VolumeVO vol=new VolumeVO(VOLUME_UUID,1l,1l,1l,1l,1l,"folder","path",null,50,Type.ROOT);
  vol.setDisplayVolume(true);
  List<VolumeVO> volumes=new ArrayList<>();
  volumes.add(vol);
  when(securityChecker.checkAccess(any(Account.class),any(ControlledEntity.class),any(AccessType.class),anyString())).thenReturn(true);
  when(_userVmDao.findById(anyLong())).thenReturn(vm);
  when(_userVmDao.listByAccountId(ACCOUNT_ID)).thenReturn(Arrays.asList(vm));
  when(_userVmDao.findByUuid(any(String.class))).thenReturn(vm);
  when(_volumeDao.findByInstance(anyLong())).thenReturn(volumes);
  ServiceOfferingVO offering=mock(ServiceOfferingVO.class);
  when(offering.getCpu()).thenReturn(500);
  when(offering.getId()).thenReturn(1l);
  when(offering.getCpu()).thenReturn(500);
  when(offering.getRamSize()).thenReturn(500);
  when(_serviceOfferingDao.findByIdIncludingRemoved(anyLong(),anyLong())).thenReturn(offering);
  when(_domainMgr.getDomain(anyLong())).thenReturn(domain);
  Mockito.doReturn(true).when(_vmMgr).expunge(any(UserVmVO.class),anyLong(),any(Account.class));
}
