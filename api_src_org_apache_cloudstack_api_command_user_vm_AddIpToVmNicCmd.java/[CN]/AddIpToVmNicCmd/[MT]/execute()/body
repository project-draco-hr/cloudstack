{
  CallContext.current().setEventDetails("Nic Id: " + getNicId());
  String ip;
  NicSecondaryIp result;
  String secondaryIp=null;
  if ((ip=getIpaddress()) != null) {
    if (!NetUtils.isValidIp(ip)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,"Invalid ip address " + ip);
    }
  }
  try {
    result=_networkService.allocateSecondaryGuestIP(getNicId(),getIpaddress());
  }
 catch (  InsufficientAddressCapacityException e) {
    throw new InvalidParameterValueException("Allocating guest ip for nic failed");
  }
  if (result != null) {
    secondaryIp=result.getIp4Address();
    if (getNetworkType() == NetworkType.Basic) {
      boolean success=false;
      success=_securityGroupService.securityGroupRulesForVmSecIp(getNicId(),secondaryIp,true);
      if (success == false) {
        throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,"Failed to set security group rules for the secondary ip");
      }
    }
    s_logger.info("Associated ip address to NIC : " + secondaryIp);
    NicSecondaryIpResponse response=new NicSecondaryIpResponse();
    response=_responseGenerator.createSecondaryIPToNicResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,"Failed to assign secondary ip to nic");
  }
}
