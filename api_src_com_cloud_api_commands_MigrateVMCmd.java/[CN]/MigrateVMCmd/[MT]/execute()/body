{
  UserVm userVm=_userVmService.getUserVm(getVirtualMachineId());
  if (userVm == null) {
    throw new InvalidParameterValueException("Unable to find the VM by id=" + getVirtualMachineId());
  }
  Host destinationHost=_resourceService.getHost(getHostId());
  if (destinationHost == null) {
    throw new InvalidParameterValueException("Unable to find the host to migrate the VM, host id=" + getHostId());
  }
  try {
    UserVm migratedVm=_userVmService.migrateVirtualMachine(userVm,destinationHost);
    if (migratedVm != null) {
      UserVmResponse response=_responseGenerator.createUserVmResponse("virtualmachine",migratedVm).get(0);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to migrate vm");
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Exception: ",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn("Exception: ",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
catch (  ManagementServerException e) {
    s_logger.warn("Exception: ",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
catch (  VirtualMachineMigrationException e) {
    s_logger.warn("Exception: ",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
}
