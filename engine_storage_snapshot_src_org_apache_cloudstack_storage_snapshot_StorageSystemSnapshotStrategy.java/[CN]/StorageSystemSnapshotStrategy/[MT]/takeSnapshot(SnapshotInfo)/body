{
  VolumeInfo volumeInfo=snapshotInfo.getBaseVolume();
  if (volumeInfo.getFormat() != ImageFormat.VHD) {
    throw new CloudRuntimeException("Only the " + ImageFormat.VHD.toString() + " image type is currently supported.");
  }
  SnapshotVO snapshotVO=snapshotDao.acquireInLockTable(snapshotInfo.getId());
  if (snapshotVO == null) {
    throw new CloudRuntimeException("Failed to acquire lock on the following snapshot: " + snapshotInfo.getId());
  }
  SnapshotResult result=null;
  SnapshotInfo snapshotOnPrimary=null;
  SnapshotInfo backedUpSnapshot=null;
  try {
    volumeInfo.stateTransit(Volume.Event.SnapshotRequested);
    HostVO hostVO=getHost(volumeInfo.getId());
    boolean canStorageSystemCreateVolumeFromSnapshot=canStorageSystemCreateVolumeFromSnapshot(volumeInfo.getPoolId());
    boolean computeClusterSupportsResign=clusterDao.getSupportsResigning(hostVO.getClusterId());
    if (canStorageSystemCreateVolumeFromSnapshot && computeClusterSupportsResign) {
      SnapshotDetailsVO snapshotDetail=new SnapshotDetailsVO(snapshotInfo.getId(),"takeSnapshot",Boolean.TRUE.toString(),false);
      snapshotDetailsDao.persist(snapshotDetail);
    }
    result=snapshotSvr.takeSnapshot(snapshotInfo);
    if (result.isFailed()) {
      s_logger.debug("Failed to take a snapshot: " + result.getResult());
      throw new CloudRuntimeException(result.getResult());
    }
    if (!canStorageSystemCreateVolumeFromSnapshot || !computeClusterSupportsResign) {
      performSnapshotAndCopyOnHostSide(volumeInfo,snapshotInfo);
    }
    snapshotOnPrimary=result.getSnapshot();
    backedUpSnapshot=backupSnapshot(snapshotOnPrimary);
    updateLocationTypeInDb(backedUpSnapshot);
  }
  finally {
    if (result != null && result.isSuccess()) {
      volumeInfo.stateTransit(Volume.Event.OperationSucceeded);
      if (snapshotOnPrimary != null && snapshotInfo.getLocationType() == Snapshot.LocationType.SECONDARY) {
        try {
          snapshotSvr.deleteSnapshot(snapshotOnPrimary);
        }
 catch (        Exception e) {
          s_logger.warn("Failed to clean up snapshot on primary Id:" + snapshotOnPrimary.getId() + " "+ e.getMessage());
        }
      }
    }
 else {
      volumeInfo.stateTransit(Volume.Event.OperationFailed);
    }
  }
  snapshotDao.releaseFromLockTable(snapshotInfo.getId());
  return backedUpSnapshot;
}
