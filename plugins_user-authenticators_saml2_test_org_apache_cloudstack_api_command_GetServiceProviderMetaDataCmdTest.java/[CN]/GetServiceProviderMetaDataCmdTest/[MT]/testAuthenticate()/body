{
  GetServiceProviderMetaDataCmd cmd=new GetServiceProviderMetaDataCmd();
  Field apiServerField=GetServiceProviderMetaDataCmd.class.getDeclaredField("_apiServer");
  apiServerField.setAccessible(true);
  apiServerField.set(cmd,apiServer);
  Field managerField=GetServiceProviderMetaDataCmd.class.getDeclaredField("_samlAuthManager");
  managerField.setAccessible(true);
  managerField.set(cmd,samlAuthManager);
  String spId="someSPID";
  String url="someUrl";
  X509Certificate cert=SAMLUtils.generateRandomX509Certification();
  Mockito.when(samlAuthManager.getServiceProviderId()).thenReturn(spId);
  Mockito.when(samlAuthManager.getIdpSigningKey()).thenReturn(cert);
  Mockito.when(samlAuthManager.getIdpSingleLogOutUrl()).thenReturn(url);
  Mockito.when(samlAuthManager.getSpSingleLogOutUrl()).thenReturn(url);
  String result=cmd.authenticate("command",null,session,"random",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),resp);
  Assert.assertTrue(result.contains("md:EntityDescriptor"));
  Mockito.verify(samlAuthManager,Mockito.atLeast(1)).getServiceProviderId();
  Mockito.verify(samlAuthManager,Mockito.atLeast(1)).getSpSingleSignOnUrl();
  Mockito.verify(samlAuthManager,Mockito.atLeast(1)).getSpSingleLogOutUrl();
  Mockito.verify(samlAuthManager,Mockito.never()).getIdpSingleSignOnUrl();
  Mockito.verify(samlAuthManager,Mockito.never()).getIdpSingleLogOutUrl();
}
