@attr(tags=['advanced', 'basic', 'provisioning'])
def test_02_list_volume_byid(self):
    '       \n        @summary: Test List Volumes with Id\n        \n        Step1: Listing all the volumes for a user before creating a data volume\n        Step2: Verifying the length of the list as 1\n        Step3: Creating a data volume\n        Step4: Listing all the volumes for a user after creating a data volume\n        Step5: Verifying the list volume size is increased by 1\n        Step6: List the volumes by specifying root volume Id\n        Step7: Verifying the details of the root volume\n        Step8: List the volumes by specifying data volume Id\n        Step9: Verifying the details of the data volume\n        '
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNotNone(list_volumes_before, 'create volume from VM failed at class setup method')
    self.assertEqual(len(list_volumes_before), 1, 'more than 1 volume created at class level')
    root_volume = list_volumes_before[0]
    volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(volume_created, 'Volume is not created')
    self.cleanup.append(volume_created)
    self.assertEqual(self.services['volume']['diskname'], volume_created.name, 'Newly created volume name and the test data volume name are not matching')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNotNone(list_volumes_after, 'Volume creation failed')
    self.assertEqual((len(list_volumes_before) + 1), len(list_volumes_after), 'list volume is not matching with Number of volumes created')
    list_volumes_by_id = Volume.list(self.userapiclient, listall=self.services['listall'], id=root_volume.id)
    self.assertIsNotNone(list_volumes_by_id, 'Root volume is not listed')
    self.assertEqual(1, len(list_volumes_by_id), 'list volume is not matching with Number of volumes created')
    obtained_volume = list_volumes_by_id[0]
    expected_dict = {'id': root_volume.id, 'name': root_volume.name, 'vmname': self.virtual_machine.name, 'state': 'Ready', 'type': 'ROOT', 'zoneid': self.zone.id, 'account': self.account.name, 'storagetype': self.storagetype, 'size': self.template.size, }
    actual_dict = {'id': obtained_volume.id, 'name': obtained_volume.name, 'vmname': obtained_volume.vmname, 'state': obtained_volume.state, 'type': obtained_volume.type, 'zoneid': obtained_volume.zoneid, 'account': obtained_volume.account, 'storagetype': obtained_volume.storagetype, 'size': obtained_volume.size, }
    root_volume_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, root_volume_status, 'Listed Root Volume details are not as expected')
    list_volumes_by_id = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    self.assertIsNotNone(list_volumes_by_id, 'Data volume is not listed')
    self.assertEqual(len(list_volumes_by_id), 1, 'list volume is not matching with Number of volumes created')
    obtained_volume = list_volumes_by_id[0]
    expected_dict = {'id': volume_created.id, 'name': volume_created.name, 'state': 'Allocated', 'type': 'DATADISK', 'zoneid': self.zone.id, 'account': self.account.name, 'storagetype': self.storagetype, 'size': self.disk_offering.disksize, }
    actual_dict = {'id': obtained_volume.id, 'name': obtained_volume.name, 'state': obtained_volume.state, 'type': obtained_volume.type, 'zoneid': obtained_volume.zoneid, 'account': obtained_volume.account, 'storagetype': obtained_volume.storagetype, 'size': (obtained_volume.size / ((1024 * 1024) * 1024)), }
    root_volume_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, root_volume_status, 'Listed Data Volume details are not as expected')
    return
