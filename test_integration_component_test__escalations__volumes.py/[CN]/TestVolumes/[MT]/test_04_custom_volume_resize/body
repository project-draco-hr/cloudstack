@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_04_custom_volume_resize(self):
    '\n        @summary: Test to verify creation and resize of custom volume\n\n        Step1: Checking if Custom disk offering already exists.\n               If not present then creating custom Disk Offering\n        Step2: Listing the volumes for a user before creating custom volume\n        Step3: Creating a custom volume\n        Step4: Listing the volumes for a user after creating custom volume\n        Step5: Attaching and Detaching custom volume created to Virtual Machine\n        Step6: Resizing custom volume\n        '
    if (self.hypervisor.lower() in ['hyperv']):
        self.skipTest('This featureis not supported on existing                        hypervisor. Hence, skipping the test')
    list_disk_offerings = DiskOffering.list(self.apiClient)
    custom_disk_offering_exists = False
    if (list_disk_offerings is not None):
        for disk_offering in list_disk_offerings:
            if (disk_offering.iscustomized and (disk_offering.storagetype == self.storagetype)):
                custom_disk_offering = disk_offering
                custom_disk_offering_exists = True
                break
    if (not custom_disk_offering_exists):
        custom_disk_offering = DiskOffering.create(self.apiClient, self.services['disk_offering'], custom=True)
        if (custom_disk_offering is not None):
            self.cleanup.append(custom_disk_offering)
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    volume_created = Volume.create_custom_disk(self.userapiclient, self.services['custom_volume'], account=self.account.name, domainid=self.account.domainid, diskofferingid=custom_disk_offering.id)
    self.assertIsNotNone(volume_created, 'Custom volume did not get created')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEquals((len(list_volumes_before) + 1), len(list_volumes_after), 'Custom volume did not get created')
    self.virtual_machine.attach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    attached_volume = list_volumes[0]
    self.assertIsNotNone(attached_volume.vmname, 'VM is not attached to Volume')
    self.assertEquals(self.virtual_machine.name, attached_volume.vmname, 'VM Name is not matching with attached vm')
    self.virtual_machine.detach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    detached_volume = list_volumes[0]
    self.assertIsNone(detached_volume.vmname, 'VM is not detached from volume')
    new_size = (self.services['custom_volume']['customdisksize'] + 1)
    resized_volume = volume_created.resize(self.userapiclient, diskofferingid=custom_disk_offering.id, shrinkok='false', size=new_size)
    self.assertIsNotNone(resized_volume, 'Resize Volume failed')
    self.assertEquals(new_size, (resized_volume.size / ((1024 * 1024) * 1024)), 'volume not resized to expected value')
    return
