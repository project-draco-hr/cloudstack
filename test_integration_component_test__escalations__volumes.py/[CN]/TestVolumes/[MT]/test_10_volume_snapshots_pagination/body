@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_10_volume_snapshots_pagination(self):
    '\n        @summary: Test to verify pagination of snapshots for Volume\n\n        Step1: Creating a Volume.\n        Step2: Attaching volume created in Step2 to virtual machine\n        Step3: Detaching the volume created in step2 from virtual machine\n        Step4: Listing all the snapshots for a volume\n        Step5: Creating Pagesize + 1 number of snapshots for a volume\n        Step6: Listing all the snapshots for a volume\n        Step7: Verifying that there are pagesize + 1 number of snapshots\n               listed\n        Step8: Listing all the snapshots in page 1\n        Step9: Listing all the snapshots in page 2\n        Step10: Deleting the snapshot present in page 2\n        Step11: Listign the snapshots from page 2 again and verifyign that\n                list returns none\n        '
    if (self.hypervisor.lower() in ['hyperv', 'lxc']):
        self.skipTest('This featureis not supported on existing                        hypervisor. Hence, skipping the test')
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(volume_created, 'Volume not created')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEquals((len(list_volumes_before) + 1), len(list_volumes_after), 'Volume not created')
    self.virtual_machine.attach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    attached_volume = list_volumes[0]
    self.assertIsNotNone(attached_volume.vmname, 'VM is not attached to Volume')
    self.assertEquals(self.virtual_machine.name, attached_volume.vmname, 'VM Name is not matching with attached vm')
    self.virtual_machine.detach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    detached_volume = list_volumes[0]
    self.assertIsNone(detached_volume.vmname, 'VM is not detached from volume')
    list_snapshot_before = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'])
    self.assertIsNone(list_snapshot_before, 'Newly created volume is already having snapshots')
    list_snapshot_before_size = 0
    for i in range(0, 3):
        snapshot_created = Snapshot.create(self.userapiclient, volume_created.id)
        self.assertIsNotNone(snapshot_created, 'Snapshot not created')
        self.assertEquals(volume_created.id, snapshot_created.volumeid, 'Snapshot not created for given volume')
    list_snapshot_after = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'])
    self.assertEqual((list_snapshot_before_size + 3), len(list_snapshot_after), 'Number of snapshots created is not matching expected')
    list_snapshots_page1 = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'], page=1, pagesize=2)
    self.assertEqual(2, len(list_snapshots_page1), 'List snapshots response is not matching with the            page size length for page 1')
    list_snapshots_page2 = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'], page=2, pagesize=2)
    self.assertEqual(len(list_snapshots_page2), 1, 'List snapshots response is not matching with            the page size length for page 2')
    snapshot_page2 = list_snapshots_page2[0]
    for i in range(0, len(list_snapshots_page1)):
        snapshot_page1 = list_snapshots_page1[i]
        self.assertNotEquals(snapshot_page2.id, snapshot_page1.id, 'Snapshot listed in page 2 is also listed in page 1')
    Snapshot.delete(snapshot_created, self.userapiclient)
    list_snapshot_page2 = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'], page=2, pagesize=2)
    self.assertEqual(None, list_snapshot_page2, 'Snapshot was not deleted')
    list_snapshot_page1 = Snapshot.list(self.userapiclient, volumeid=volume_created.id, listall=self.services['listall'], page=1, pagesize=2)
    self.assertEqual(2, len(list_snapshot_page1), 'Snapshots on page 1 are not matching')
    return
