@attr(tags=['advanced', 'basic', 'provisioning'])
def test_03_data_volume_resize(self):
    '  \n        @summary: Test to verify creation and resize of data volume\n          \n        Step1: Listing the volumes for a user before creating data volume\n        Step2: Creating a data volume\n        Step3: Listing the volumes for a user after creating data volume\n        Step4: Attaching and Detaching data volume created to Virtual Machine\n        Step5: Verifying if there exists a disk offering with higher size\n                If not present creating it\n        Step6: Resizing data volume\n        '
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(volume_created, 'Data volume creation failed')
    self.cleanup.append(volume_created)
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEquals((len(list_volumes_before) + 1), len(list_volumes_after), 'Data volume creation failed')
    self.virtual_machine.attach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    attached_volume = list_volumes[0]
    self.assertIsNotNone(attached_volume.vmname, 'VM is not attached to Volume')
    self.assertEquals(self.virtual_machine.name, attached_volume.vmname, 'VM Name is not matching with attached vm')
    self.virtual_machine.detach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    detached_volume = list_volumes[0]
    self.assertIsNone(detached_volume.vmname, 'VM is not detached from volume')
    list_disk_offerings = DiskOffering.list(self.apiClient)
    large_disk_offering_exists = False
    current_disk_size = (volume_created.size / ((1024 * 1024) * 1024))
    for disk_offering in list_disk_offerings:
        if ((disk_offering.disksize > current_disk_size) and (not disk_offering.iscustomized) and (disk_offering.storagetype == self.storagetype)):
            new_disk_offering = disk_offering
            large_disk_offering_exists = True
            break
    if (large_disk_offering_exists == False):
        new_size = ((volume_created.size / ((1024 * 1024) * 1024)) + 1)
        self.services['disk_offering']['disksize'] = new_size
        new_disk_offering = DiskOffering.create(self.apiClient, self.services['disk_offering'])
        if (new_disk_offering is not None):
            self.cleanup.append(new_disk_offering)
    else:
        new_size = new_disk_offering.disksize
    resized_volume = volume_created.resize(self.userapiclient, diskofferingid=new_disk_offering.id, shrinkok='false')
    self.assertIsNotNone(resized_volume, 'Resize Volume failed')
    self.assertEquals(new_size, (resized_volume.size / ((1024 * 1024) * 1024)), 'volume not resized to expected value')
    return
