@classmethod
def setUpClass(cls):
    try:
        cls._cleanup = []
        cls.testClient = super(TestVolumes, cls).getClsTestClient()
        cls.api_client = cls.testClient.getApiClient()
        cls.services = cls.testClient.getParsedTestDataConfig()
        cls.hypervisor = cls.testClient.getHypervisorInfo()
        cls.domain = get_domain(cls.api_client)
        cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
        cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
        if cls.zone.localstorageenabled:
            cls.storagetype = 'local'
            cls.services['service_offerings']['tiny']['storagetype'] = 'local'
            cls.services['disk_offering']['storagetype'] = 'local'
        else:
            cls.storagetype = 'shared'
            cls.services['service_offerings']['tiny']['storagetype'] = 'shared'
            cls.services['disk_offering']['storagetype'] = 'shared'
        cls.services['mode'] = cls.zone.networktype
        cls.services['virtual_machine']['hypervisor'] = cls.hypervisor
        cls.services['virtual_machine']['zoneid'] = cls.zone.id
        cls.services['virtual_machine']['template'] = cls.template.id
        cls.services['custom_volume']['zoneid'] = cls.zone.id
        cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offerings']['tiny'])
        cls._cleanup.append(cls.disk_offering)
        cls._cleanup.append(cls.service_offering)
    except Exception as e:
        cls.tearDownClass()
        raise Exception(('Warning: Exception in setup : %s' % e))
    return
