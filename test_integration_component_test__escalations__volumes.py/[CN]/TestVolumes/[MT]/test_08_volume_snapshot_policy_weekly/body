@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_08_volume_snapshot_policy_weekly(self):
    '\n        @summary: Test to verify creation of Weekly Snapshot policies\n        from volume\n\n        Step1: Creating a Volume.\n        Step2: Attaching volume created in Step2 to virtual machine\n        Step3: Detaching the volume created in step2 from virtual machine\n        Step4: Listing snapshot policies for a volume created in step1\n        Step5: Creating Weekly snapshot policy\n        Step6: Listing snapshot policies for a volume created in step1 again\n        Step7: Verifyign that the list snapshot policy length is increased by 1\n        '
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(volume_created, 'Volume not created')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEquals((len(list_volumes_before) + 1), len(list_volumes_after), 'Volume not created')
    self.virtual_machine.attach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    attached_volume = list_volumes[0]
    self.assertIsNotNone(attached_volume.vmname, 'VM is not attached to Volume')
    self.assertEquals(self.virtual_machine.name, attached_volume.vmname, 'VM Name is not matching with attached vm')
    self.virtual_machine.detach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    detached_volume = list_volumes[0]
    self.assertIsNone(detached_volume.vmname, 'VM is not detached from volume')
    self.services['recurring_snapshot']['intervaltype'] = 'weekly'
    self.services['recurring_snapshot']['schedule'] = '00:00:1'
    list_snapshot_policy_before = SnapshotPolicy.list(self.userapiclient, volumeid=volume_created.id)
    snapshot_policy_before_size = 0
    if (list_snapshot_policy_before is not None):
        snapshot_policy_before_size = len(list_snapshot_policy_before)
    snapshot_policy_weekly = SnapshotPolicy.create(self.userapiclient, volume_created.id, self.services['recurring_snapshot'])
    self.assertIsNotNone(snapshot_policy_weekly, 'Weekly Snapshot policy creation failed')
    expected_dict = {'schedule': self.services['recurring_snapshot']['schedule'], 'intervaltype': 2, 'volumeid': volume_created.id, }
    actual_dict = {'schedule': snapshot_policy_weekly.schedule, 'intervaltype': snapshot_policy_weekly.intervaltype, 'volumeid': snapshot_policy_weekly.volumeid, }
    status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, status, 'Weekly Snapshot Policy details are not as expected')
    list_snapshot_policy_after = SnapshotPolicy.list(self.userapiclient, volumeid=volume_created.id)
    self.assertIsNotNone(list_snapshot_policy_after, 'Weekly Snapshot policy creation failed')
    self.assertEquals((snapshot_policy_before_size + 1), len(list_snapshot_policy_after), 'Weekly Snapshot policy creation failed')
    return
