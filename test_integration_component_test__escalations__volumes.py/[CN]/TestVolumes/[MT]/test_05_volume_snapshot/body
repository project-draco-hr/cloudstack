@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_05_volume_snapshot(self):
    '\n        @summary: Test to verify creation of snapshot from volume\n        and creation of template, volume from snapshot\n\n        Step1: Creating a volume\n        Step2: Attaching and Detaching custom volume created to Virtual Machine\n        Step3: Creating Snapshot from volume\n        Step4: Creating Volume from snapshot\n        Step5: Creating Template from Snapshot\n        '
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.assertIsNotNone(volume_created, 'Volume not created')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEquals((len(list_volumes_before) + 1), len(list_volumes_after), 'Volume not created')
    self.virtual_machine.attach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    attached_volume = list_volumes[0]
    self.assertIsNotNone(attached_volume.vmname, 'VM is not attached to Volume')
    self.assertEquals(self.virtual_machine.name, attached_volume.vmname, 'VM Name is not matching with attached vm')
    self.virtual_machine.detach_volume(self.userapiclient, volume_created)
    list_volumes = Volume.list(self.userapiclient, listall=self.services['listall'], id=volume_created.id)
    detached_volume = list_volumes[0]
    self.assertIsNone(detached_volume.vmname, 'VM is not detached from volume')
    snapshot_created = Snapshot.create(self.userapiclient, volume_created.id)
    self.assertIsNotNone(snapshot_created, 'Snapshot not created')
    self.cleanup.append(snapshot_created)
    expected_dict = {'id': volume_created.id, 'intervaltype': 'MANUAL', 'snapshottype': 'MANUAL', 'volumetype': volume_created.type, 'domain': self.domain.id, }
    actual_dict = {'id': snapshot_created.volumeid, 'intervaltype': snapshot_created.intervaltype, 'snapshottype': snapshot_created.snapshottype, 'volumetype': snapshot_created.volumetype, 'domain': snapshot_created.domainid, }
    status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, status, 'Snapshot created from Volume details are not as expected')
    cmd = createVolume.createVolumeCmd()
    cmd.name = '-'.join([self.services['volume']['diskname'], random_gen()])
    cmd.snapshotid = snapshot_created.id
    volume_from_snapshot = Volume(self.userapiclient.createVolume(cmd).__dict__)
    self.assertIsNotNone(volume_from_snapshot, 'Volume creation failed from snapshot')
    expected_dict = {'snapshotid': snapshot_created.id, 'volumetype': snapshot_created.volumetype, 'size': self.disk_offering.disksize, 'accounr': self.account.name, 'domain': self.domain.id, 'storagetype': self.storagetype, 'zone': self.zone.id, }
    actual_dict = {'snapshotid': volume_from_snapshot.snapshotid, 'volumetype': volume_from_snapshot.type, 'size': (volume_from_snapshot.size / ((1024 * 1024) * 1024)), 'accounr': volume_from_snapshot.account, 'domain': volume_from_snapshot.domainid, 'storagetype': volume_from_snapshot.storagetype, 'zone': volume_from_snapshot.zoneid, }
    status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, status, 'Volume created from Snapshot details are not as expected')
    list_templates_before = Template.list(self.userapiclient, templatefilter='self')
    if (list_templates_before is None):
        templates_before_size = 0
    else:
        templates_before_size = len(list_templates_before)
    cmd = createTemplate.createTemplateCmd()
    cmd.name = self.services['ostype']
    cmd.displaytext = self.services['ostype']
    cmd.ostypeid = self.template.ostypeid
    cmd.snapshotid = snapshot_created.id
    cmd.ispublic = False
    cmd.passwordenabled = False
    template_from_snapshot = Template(self.userapiclient.createTemplate(cmd).__dict__)
    self.assertIsNotNone(template_from_snapshot, 'Template creation failed from snapshot')
    self.cleanup.append(template_from_snapshot)
    expected_dict = {'name': self.services['ostype'], 'ostypeid': self.template.ostypeid, 'type': 'USER', 'zone': self.zone.id, 'domain': self.domain.id, 'account': self.account.name, 'passwordenabled': False, 'ispublic': False, 'size': self.disk_offering.disksize, }
    actual_dict = {'name': template_from_snapshot.name, 'ostypeid': template_from_snapshot.ostypeid, 'type': template_from_snapshot.templatetype, 'zone': template_from_snapshot.zoneid, 'domain': template_from_snapshot.domainid, 'account': template_from_snapshot.account, 'passwordenabled': template_from_snapshot.passwordenabled, 'ispublic': template_from_snapshot.ispublic, 'size': (template_from_snapshot.size / ((1024 * 1024) * 1024)), }
    status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, status, 'Template created from Snapshot details are not as expected')
    list_templates_after = Template.list(self.userapiclient, templatefilter='self')
    self.assertEquals((templates_before_size + 1), len(list_templates_after), 'Template creation failed from snapshot')
    return
