{
  Element configure=doc.createElementNS(s_ciscons,"nxos:configure");
  Element modeConfigure=doc.createElement("nxos:" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element policyMap=doc.createElement("policy-map");
  modeConfigure.appendChild(policyMap);
  Element policyDetails=doc.createElement("name");
  policyMap.appendChild(policyDetails);
  Element value=doc.createElement(s_paramvalue);
  value.setAttribute("isKey","true");
  value.setTextContent(name);
  policyDetails.appendChild(value);
  Element policyMapMode=doc.createElement(s_policymapmode);
  policyDetails.appendChild(policyMapMode);
  Element classRoot=doc.createElement("class");
  Element classDefault=doc.createElement("class-default");
  policyMapMode.appendChild(classRoot);
  classRoot.appendChild(classDefault);
  Element classMode=doc.createElement(s_classtypemode);
  classDefault.appendChild(classMode);
  Element police=doc.createElement("police");
  classMode.appendChild(police);
  Element cir=doc.createElement("cir");
  police.appendChild(cir);
  Element cirValue=doc.createElement(s_paramvalue);
  Element mbps=doc.createElement("mbps");
  cirValue.setTextContent(Integer.toString(averageRate));
  cir.appendChild(cirValue);
  cir.appendChild(mbps);
  modeConfigure.appendChild(persistConfiguration(doc));
  return configure;
}
