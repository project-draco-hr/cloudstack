{
  Element configure=doc.createElementNS(s_ciscons,"nxos:configure");
  Element modeConfigure=doc.createElement("nxos:" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element portProfile=doc.createElement("port-profile");
  modeConfigure.appendChild(portProfile);
  Element portDetails=doc.createElement("name");
switch (type) {
case none:
    portProfile.appendChild(portDetails);
  break;
case ethernet:
{
  Element typetag=doc.createElement("type");
  Element ethernettype=doc.createElement("ethernet");
  portProfile.appendChild(typetag);
  typetag.appendChild(ethernettype);
  ethernettype.appendChild(portDetails);
}
break;
case vethernet:
{
Element typetag=doc.createElement("type");
Element ethernettype=doc.createElement("vethernet");
portProfile.appendChild(typetag);
typetag.appendChild(ethernettype);
ethernettype.appendChild(portDetails);
}
break;
}
Element value=doc.createElement(s_paramvalue);
value.setAttribute("isKey","true");
value.setTextContent(name);
portDetails.appendChild(value);
Element portProf=doc.createElement(s_portprofmode);
portDetails.appendChild(portProf);
if (binding != BindingType.none) {
portProf.appendChild(getBindingType(doc,binding));
}
if (mode != SwitchPortMode.none) {
portProf.appendChild(getSwitchPortMode(doc,mode));
portProf.appendChild(getAddVlanDetails(doc,mode,Integer.toString(vlanid)));
}
Element vmware=doc.createElement("vmware");
Element portgroup=doc.createElement("port-group");
vmware.appendChild(portgroup);
portProf.appendChild(vmware);
Element no=doc.createElement("no");
Element shutdown=doc.createElement("shutdown");
no.appendChild(shutdown);
portProf.appendChild(no);
Element state=doc.createElement("state");
Element enabled=doc.createElement("enabled");
state.appendChild(enabled);
portProf.appendChild(state);
return configure;
}
