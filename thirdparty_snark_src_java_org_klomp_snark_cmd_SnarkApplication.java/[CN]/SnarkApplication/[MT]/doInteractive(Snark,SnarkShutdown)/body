{
  boolean quit=false;
  System.out.println();
  System.out.println(usage);
  System.out.println();
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    String line=br.readLine();
    while (!quit && line != null) {
      line=line.toLowerCase();
      if ("quit".equals(line)) {
        quit=true;
      }
 else       if ("list".equals(line)) {
synchronized (snark.coordinator.peers) {
          System.out.println(snark.coordinator.peers.size() + " peers -" + " (i)nterested,"+ " (I)nteresting,"+ " (c)hoking,"+ " (C)hoked:");
          Iterator it=snark.coordinator.peers.iterator();
          while (it.hasNext()) {
            Peer peer=(Peer)it.next();
            System.out.println(peer);
            System.out.println("\ti: " + peer.isInterested() + " I: "+ peer.isInteresting()+ " c: "+ peer.isChoking()+ " C: "+ peer.isChoked());
          }
        }
      }
 else       if ("info".equals(line)) {
        System.out.println("Name: " + snark.meta.getName());
        System.out.println("Torrent: " + snark.torrent);
        System.out.println("Tracker: " + snark.meta.getAnnounce());
        List files=snark.meta.getFiles();
        System.out.println("Files: " + ((files == null) ? 1 : files.size()));
        System.out.println("Pieces: " + snark.meta.getPieces());
        System.out.println("Piece size: " + snark.meta.getPieceLength(0) / 1024 + " KB");
        System.out.println("Total size: " + snark.meta.getTotalLength() / (1024 * 1024) + " MB");
      }
 else       if ("state".equals(line)) {
        System.out.println(snark.storage.getBitField().getHumanReadable());
        System.out.println("Total peers: " + snark.coordinator.getPeers());
        System.out.println("Total size: " + snark.meta.getTotalLength() / (1024 * 1024) + " MB");
        System.out.println("Total remaining: " + snark.coordinator.getLeft() / (1024 * 1024) + " MB");
        System.out.println("Total downloaded: " + snark.coordinator.getDownloaded());
        System.out.println("Total uploaded: " + snark.coordinator.getUploaded());
      }
 else       if ("".equals(line) || "help".equals(line)) {
        System.out.println(usage);
        System.out.println(help);
      }
 else {
        System.out.println("Unknown command: " + line);
        System.out.println(usage);
      }
      if (!quit) {
        System.out.println();
        line=br.readLine();
      }
    }
  }
 catch (  IOException ioe) {
    log.log(Level.SEVERE,"Unable to read stdin",ioe);
  }
  Runtime.getRuntime().removeShutdownHook(hook);
  hook.start();
}
