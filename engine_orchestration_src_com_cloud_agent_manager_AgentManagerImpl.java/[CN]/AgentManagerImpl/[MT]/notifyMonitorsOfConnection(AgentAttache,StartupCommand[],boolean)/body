{
  final long hostId=attache.getId();
  final HostVO host=_hostDao.findById(hostId);
  for (  final Pair<Integer,Listener> monitor : _hostMonitors) {
    if (logger.isDebugEnabled()) {
      logger.debug("Sending Connect to listener: " + monitor.second().getClass().getSimpleName());
    }
    for (int i=0; i < cmd.length; i++) {
      try {
        monitor.second().processConnect(host,cmd[i],forRebalance);
      }
 catch (      final Exception e) {
        if (e instanceof ConnectionException) {
          final ConnectionException ce=(ConnectionException)e;
          if (ce.isSetupError()) {
            logger.warn("Monitor " + monitor.second().getClass().getSimpleName() + " says there is an error in the connect process for "+ hostId+ " due to "+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected,true,true);
            throw ce;
          }
 else {
            logger.info("Monitor " + monitor.second().getClass().getSimpleName() + " says not to continue the connect process for "+ hostId+ " due to "+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested,true,true);
            return attache;
          }
        }
 else         if (e instanceof HypervisorVersionChangedException) {
          handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested,true,true);
          throw new CloudRuntimeException("Unable to connect " + attache.getId(),e);
        }
 else {
          logger.error("Monitor " + monitor.second().getClass().getSimpleName() + " says there is an error in the connect process for "+ hostId+ " due to "+ e.getMessage(),e);
          handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected,true,true);
          throw new CloudRuntimeException("Unable to connect " + attache.getId(),e);
        }
      }
    }
  }
  final Long dcId=host.getDataCenterId();
  final ReadyCommand ready=new ReadyCommand(dcId,host.getId());
  final Answer answer=easySend(hostId,ready);
  if (answer == null || !answer.getResult()) {
    handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected,true,true);
  }
  agentStatusTransitTo(host,Event.Ready,_nodeId);
  attache.ready();
  return attache;
}
