{
  List<String> ips=_nicDao.listIpAddressInNetwork(network.getId());
  String[] cidr=network.getCidr().split("/");
  Set<Long> allPossibleIps=NetUtils.getAllIpsFromCidr(cidr[0],Integer.parseInt(cidr[1]));
  Set<Long> usedIps=new TreeSet<Long>();
  if (requestedIp != null && requestedIp.equals(network.getGateway())) {
    s_logger.warn("Requested ip address " + requestedIp + " is used as a gateway address in network "+ network);
    return null;
  }
  for (  String ip : ips) {
    if (requestedIp != null && requestedIp.equals(ip)) {
      s_logger.warn("Requested ip address " + requestedIp + " is already in use in network "+ network);
      return null;
    }
    usedIps.add(NetUtils.ip2Long(ip));
  }
  if (usedIps.size() != 0) {
    allPossibleIps.removeAll(usedIps);
  }
  if (allPossibleIps.isEmpty()) {
    return null;
  }
  Long[] array=allPossibleIps.toArray(new Long[allPossibleIps.size()]);
  if (requestedIp != null) {
    boolean isSameCidr=NetUtils.sameSubnetCIDR(requestedIp,NetUtils.long2Ip(array[0]),Integer.parseInt(cidr[1]));
    if (!isSameCidr) {
      s_logger.warn("Requested ip address " + requestedIp + " doesn't belong to the network "+ network+ " cidr");
      return null;
    }
 else {
      return requestedIp;
    }
  }
  String result;
  do {
    result=NetUtils.long2Ip(array[_rand.nextInt(array.length)]);
  }
 while (result.split("\\.")[3].equals("1"));
  return result;
}
