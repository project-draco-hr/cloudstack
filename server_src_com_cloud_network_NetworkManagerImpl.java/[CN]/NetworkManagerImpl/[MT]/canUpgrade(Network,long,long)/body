{
  NetworkOffering oldNetworkOffering=_networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);
  NetworkOffering newNetworkOffering=_networkOfferingDao.findById(newNetworkOfferingId);
  if (oldNetworkOffering.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException("NetworkOfferingId can be upgraded only for the network of type " + GuestType.Isolated);
  }
  if (areServicesSupportedByNetworkOffering(oldNetworkOfferingId,Service.SecurityGroup) != areServicesSupportedByNetworkOffering(newNetworkOfferingId,Service.SecurityGroup)) {
    s_logger.debug("Offerings " + newNetworkOfferingId + " and "+ oldNetworkOfferingId+ " have different securityGroupProperty, can't upgrade");
    return false;
  }
  if (oldNetworkOffering.getGuestType() != newNetworkOffering.getGuestType()) {
    s_logger.debug("Network offerings " + newNetworkOfferingId + " and "+ oldNetworkOfferingId+ " are of different types, can't upgrade");
    return false;
  }
  if (newNetworkOffering.getTags() != null) {
    if (oldNetworkOffering.getTags() == null) {
      s_logger.debug("New network offering id=" + newNetworkOfferingId + " has tags and old network offering id="+ oldNetworkOfferingId+ " doesn't, can't upgrade");
      return false;
    }
    if (!oldNetworkOffering.getTags().equalsIgnoreCase(newNetworkOffering.getTags())) {
      s_logger.debug("Network offerings " + newNetworkOfferingId + " and "+ oldNetworkOfferingId+ " have different tags, can't upgrade");
      return false;
    }
  }
  if (oldNetworkOffering.getTrafficType() != newNetworkOffering.getTrafficType()) {
    s_logger.debug("Network offerings " + newNetworkOfferingId + " and "+ oldNetworkOfferingId+ " have different traffic types, can't upgrade");
    return false;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  if (oldNetworkOffering.isConserveMode() && !newNetworkOffering.isConserveMode()) {
    if (!canIpsUsedForNonConserve(publicIps)) {
      return false;
    }
  }
  return canIpsUseOffering(publicIps,newNetworkOfferingId);
}
