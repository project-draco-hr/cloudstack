{
  Account callerAccount=_accountMgr.getAccount(context.getCaller().getAccountId());
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug("Unable to find network with id: " + networkId);
    return false;
  }
  shutdownNetwork(networkId,context);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug("Network is not not in the correct state to be destroyed: " + network.getState());
    return false;
  }
  boolean success=true;
  List<IPAddressVO> ipsToRelease=_ipAddressDao.listByAssociatedNetwork(networkId);
  if (ipsToRelease != null && !ipsToRelease.isEmpty()) {
    for (    IPAddressVO ip : ipsToRelease) {
      _lbMgr.removeAllLoadBalanacers(ip.getId(),callerAccount,context.getCaller().getId());
      unassignPublicIpAddress(ip);
    }
    s_logger.debug("Ip addresses associated with network " + networkId + " are unassigned successfully as a part of network id="+ networkId+ " destroy");
  }
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Sending destroy to " + element);
      }
      element.destroy(network);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn("Unable to complete destroy of the network due to element: " + element.getName(),e);
      success=false;
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Network id=" + networkId + " is destroyed successfully, cleaning up corresponding resources now.");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Account owner=_accountMgr.getAccount(network.getAccountId());
    Transaction txn=Transaction.currentTxn();
    txn.start();
    guru.trash(network,_networkOfferingDao.findById(network.getNetworkOfferingId()),owner);
    if (!deleteVlansInNetwork(network.getId(),context.getCaller().getId())) {
      success=false;
      s_logger.warn("Failed to delete network " + network + "; was unable to cleanup corresponding ip ranges");
    }
 else {
      network.setState(Network.State.Destroy);
      _networksDao.update(network.getId(),network);
      _networksDao.remove(network.getId());
      txn.commit();
    }
  }
  return success;
}
