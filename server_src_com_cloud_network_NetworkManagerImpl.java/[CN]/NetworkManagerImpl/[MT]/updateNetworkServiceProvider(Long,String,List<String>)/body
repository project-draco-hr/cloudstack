{
  PhysicalNetworkServiceProviderVO provider=_pNSPDao.findById(id);
  if (provider == null) {
    throw new InvalidParameterValueException("Network Service Provider id=" + id + "doesn't exist in the system");
  }
  NetworkElement element=getElementImplementingProvider(provider.getProviderName());
  if (element == null) {
    throw new InvalidParameterValueException("Unable to find the Network Element implementing the Service Provider '" + provider.getProviderName() + "'");
  }
  PhysicalNetworkServiceProvider.State state=null;
  if (stateStr != null && !stateStr.isEmpty()) {
    try {
      state=PhysicalNetworkServiceProvider.State.valueOf(stateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve state '" + stateStr + "' to a supported value {Enabled or Disabled}");
    }
  }
  boolean update=false;
  if (state != null) {
    if (state == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new InvalidParameterValueException("Updating the provider state to 'Shutdown' is not supported");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("updating state of the service provider id=" + id + " on physical network: "+ provider.getPhysicalNetworkId()+ " to state: "+ stateStr);
    }
switch (state) {
case Enabled:
      if (element != null && element.isReady(provider)) {
        provider.setState(PhysicalNetworkServiceProvider.State.Enabled);
        update=true;
      }
 else {
        throw new CloudRuntimeException("Provider is not ready, cannot Enable the provider, please configure the provider first");
      }
    break;
case Disabled:
  provider.setState(PhysicalNetworkServiceProvider.State.Disabled);
update=true;
break;
}
}
if (enabledServices != null) {
if (!element.canEnableIndividualServices()) {
throw new InvalidParameterValueException("Cannot update set of Services for this Service Provider '" + provider.getProviderName() + "'");
}
List<Service> services=new ArrayList<Service>();
for (String serviceName : enabledServices) {
Network.Service service=Network.Service.getService(serviceName);
if (service == null) {
throw new InvalidParameterValueException("Invalid Network Service specified=" + serviceName);
}
services.add(service);
}
provider.setEnabledServices(services);
update=true;
}
if (update) {
_pNSPDao.update(id,provider);
}
return provider;
}
