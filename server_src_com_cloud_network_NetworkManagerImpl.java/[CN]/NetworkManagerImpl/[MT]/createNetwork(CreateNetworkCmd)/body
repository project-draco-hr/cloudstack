{
  Long networkOfferingId=cmd.getNetworkOfferingId();
  Long zoneId=cmd.getZoneId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  List<String> tags=cmd.getTags();
  boolean isDomainSpecific=false;
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Only one tag can be specified for a network at this time");
  }
  Transaction txn=Transaction.currentTxn();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException("Unable to find network offeirng by id " + networkOfferingId);
  }
  if (cmd.getDomainId() != null && cmd.getAccountName() == null) {
    if (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != GuestIpType.Direct) {
      throw new InvalidParameterValueException("Domain level networks are supported just for traffic type " + TrafficType.Guest + " and guest Ip type "+ GuestIpType.Direct);
    }
 else     if (isShared == null || !isShared) {
      throw new InvalidParameterValueException("Network dedicated to domain should be shared");
    }
 else {
      DomainVO domain=_domainDao.findById(cmd.getDomainId());
      if (domain == null) {
        throw new InvalidParameterValueException("Unable to find domain by id " + cmd.getDomainId());
      }
      _accountMgr.checkAccess(caller,domain,null);
      isDomainSpecific=true;
    }
  }
  Account owner=null;
  if (cmd.getAccountName() != null && cmd.getDomainId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),cmd.getDomainId(),cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (endIP == null && startIP != null) {
    endIP=startIP;
  }
  if (zoneId == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException("Cannot perform this operation, Zone is currently disabled: " + zoneId);
  }
  if (networkOffering.getAvailability() == Availability.Unavailable) {
    throw new InvalidParameterValueException("Can't create network; network offering id=" + networkOfferingId + " is "+ networkOffering.getAvailability());
  }
  ArrayList<String> networkConfigs=new ArrayList<String>();
  networkConfigs.add(gateway);
  networkConfigs.add(startIP);
  networkConfigs.add(endIP);
  networkConfigs.add(netmask);
  boolean defineNetworkConfig=false;
  short configElementsCount=0;
  for (  String networkConfig : networkConfigs) {
    if (networkConfig != null) {
      configElementsCount++;
    }
  }
  if (configElementsCount > 0 && configElementsCount != networkConfigs.size()) {
    throw new InvalidParameterValueException("startIP/endIP/netmask/gateway must be specified together");
  }
 else   if (configElementsCount == networkConfigs.size()) {
    defineNetworkConfig=true;
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != GuestIpType.Virtual)) {
    throw new InvalidParameterValueException("Regular user can create a network only from the network offering having traffic type " + TrafficType.Guest + " and Guest Ip type "+ GuestIpType.Virtual);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException("Regular user is not allowed to specify gateway/netmask/ipRange/vlanId");
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split("\\/");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException("Cidr size can't be less than " + _cidrLimit);
    }
  }
  txn.start();
  Long domainId=null;
  if (isDomainSpecific) {
    domainId=cmd.getDomainId();
  }
  Network network=createNetwork(networkOfferingId,name,displayText,isShared,isDefault,zoneId,gateway,cidr,vlanId,networkDomain,owner,false,domainId,tags);
  if (network.getGuestType() == GuestIpType.Direct) {
    owner=null;
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && network.getGuestType() == GuestIpType.Direct && defineNetworkConfig) {
    _configMgr.createVlanAndPublicIpRange(userId,zoneId,null,startIP,endIP,gateway,netmask,false,vlanId,owner,network.getId());
  }
  txn.commit();
  return network;
}
