{
  Account ctxAccount=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long networkOfferingId=cmd.getNetworkOfferingId();
  Long zoneId=cmd.getZoneId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String cidr=null;
  if (gateway != null && netmask != null) {
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Boolean isShared=cmd.getIsShared();
  Account owner=null;
  Long ownerId=null;
  if (endIP == null && startIP != null) {
    endIP=startIP;
  }
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException("Unable to find network offeirng by id " + networkOfferingId);
  }
  if (zoneId == null || ((_dcDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  if (isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Failed to create a newtwork, invalid domain id (" + domainId + ") given.");
      }
      if (accountName != null) {
        owner=_accountDao.findActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else {
      owner=ctxAccount;
    }
  }
 else {
    owner=ctxAccount;
  }
  ownerId=owner.getId();
  if (networkOffering.getGuestIpType() == GuestIpType.Direct && vlanId != null) {
    String uri="vlan://" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException("Network with vlan " + vlanId + " already exists in zone "+ zoneId);
    }
  }
  if (networkOffering.getGuestIpType() == GuestIpType.DirectPodBased && vlanId != null && vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
    SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
    sb.and("broadcastDomainType",sb.entity().getBroadcastDomainType(),SearchCriteria.Op.EQ);
    sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkOfferingVO> networkSearch=_networkOfferingDao.createSearchBuilder();
    networkSearch.and("guestIpType",networkSearch.entity().getGuestIpType(),SearchCriteria.Op.EQ);
    sb.join("networkSearch",networkSearch,sb.entity().getNetworkOfferingId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters("broadcastDomainType",BroadcastDomainType.Native);
    sc.setParameters("dataCenterId",zoneId);
    sc.setJoinParameters("networkSearch","guestIpType",GuestIpType.DirectPodBased);
    List<NetworkVO> networks=_networksDao.search(sc,null);
    if (networks != null && !networks.isEmpty()) {
      throw new InvalidParameterValueException("Network with untagged vlan already exists for the zone " + zoneId);
    }
  }
  if (ctxAccount.getType() == Account.ACCOUNT_TYPE_NORMAL && networkOffering.getGuestIpType() != GuestIpType.Virtual) {
    throw new InvalidParameterValueException("Regular user can create only networ of type " + GuestIpType.Virtual);
  }
  if (ctxAccount.getType() == Account.ACCOUNT_TYPE_NORMAL && vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException("Can't specify vlan because network offering doesn't support it");
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null);
    NetworkVO userNetwork=new NetworkVO();
    if (ctxAccount.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (cidr != null && gateway != null) {
        userNetwork.setCidr(cidr);
        userNetwork.setGateway(gateway);
        if (vlanId != null) {
          userNetwork.setBroadcastUri(URI.create("vlan://" + vlanId));
          userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
          if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
            userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
          }
 else {
            userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
          }
        }
      }
    }
    List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared);
    Long networkId=null;
    if (networks == null || networks.isEmpty()) {
      txn.rollback();
      throw new CloudRuntimeException("Fail to create a network");
    }
 else {
      networkId=networks.get(0).getId();
    }
    for (    Network network : networks) {
      if (network.getGuestType() == GuestIpType.Virtual) {
        s_logger.debug("Creating a source natp ip for " + network);
        PublicIp ip=assignSourceNatIpAddress(owner,network,userId);
        if (ip == null) {
          throw new InsufficientAddressCapacityException("Unable to assign source nat ip address to owner for this network",DataCenter.class,zoneId);
        }
      }
    }
    if (networkOffering.getGuestIpType() == GuestIpType.Direct) {
      owner=null;
    }
    if (ctxAccount.getType() == Account.ACCOUNT_TYPE_ADMIN && networkOffering.getGuestIpType() == GuestIpType.Direct && startIP != null && endIP != null && gateway != null) {
      Vlan vlan=_configMgr.createVlanAndPublicIpRange(userId,zoneId,null,startIP,endIP,gateway,netmask,false,vlanId,owner,networkId);
      if (vlan == null) {
        txn.rollback();
        throw new CloudRuntimeException("Failed to create a vlan");
      }
    }
    txn.commit();
    String eventMsg="Successfully created network " + name + " (networkOfferingId="+ networkOfferingId+ ", isShared="+ isShared+ ", ownerId="+ ownerId+ ", netmask="+ netmask+ ", startIP="+ startIP+ ", endIP="+ endIP+ ", gateway="+ gateway+ ", vlan="+ vlanId+ ")";
    if (networks != null && !networks.isEmpty()) {
      _configMgr.saveConfigurationEvent(userId,ownerId,EventTypes.EVENT_NETWORK_CREATE,eventMsg,"dcId=" + zoneId,"networkOfferingId=" + networkOfferingId,"name=" + name,"isShared=" + isShared,"ownerId=" + ownerId,"networkGateway=" + gateway,"networkNetmask=" + netmask,"startIP=" + startIP,"endIP=" + endIP,"vlan=" + vlanId);
    }
    return networks.get(0);
  }
 catch (  Exception ex) {
    s_logger.warn("Unexpected exception while creating network ",ex);
    txn.rollback();
  }
 finally {
    txn.close();
  }
  return null;
}
