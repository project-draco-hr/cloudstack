{
  Long networkOfferingId=cmd.getNetworkOfferingId();
  Long zoneId=cmd.getZoneId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long userId=UserContext.current().getCallerUserId();
  Transaction txn=Transaction.currentTxn();
  Account ctxAccount=UserContext.current().getCaller();
  Account owner=_accountMgr.finalizeOwner(ctxAccount,cmd.getAccountName(),cmd.getDomainId());
  UserContext.current().setAccountId(owner.getAccountId());
  if (endIP == null && startIP != null) {
    endIP=startIP;
  }
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException("Unable to find network offeirng by id " + networkOfferingId);
  }
  if (networkOffering.getAvailability() == Availability.Unavailable) {
    throw new InvalidParameterValueException("Can't create network; network offering id=" + networkOfferingId + " is "+ networkOffering.getAvailability());
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null) {
      throw new InvalidParameterValueException("Can specify isDefault parameter only for Direct network.");
    }
 else {
      isDefault=true;
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (networkDomain == null) {
    networkDomain="cs" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  if (zoneId == null || ((_dcDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException("Network creation is not allowed in zone with network type " + NetworkType.Basic);
  }
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException("Virtual Network and Direct Shared Network creation is not allowed if zone is security group enabled");
  }
  if (zone.isSecurityGroupEnabled() && cmd.getAccountName() == null) {
    throw new InvalidParameterValueException("Can't create a zone wide network if zone is security group enabled");
  }
  ArrayList<String> networkConfigs=new ArrayList<String>();
  networkConfigs.add(gateway);
  networkConfigs.add(startIP);
  networkConfigs.add(endIP);
  networkConfigs.add(netmask);
  boolean defineNetworkConfig=false;
  short configElementsCount=0;
  for (  String networkConfig : networkConfigs) {
    if (networkConfig != null) {
      configElementsCount++;
    }
  }
  if (configElementsCount > 0 && configElementsCount != networkConfigs.size()) {
    throw new InvalidParameterValueException("startIP/endIP/netmask/gateway must be specified together");
  }
 else   if (configElementsCount == networkConfigs.size()) {
    defineNetworkConfig=true;
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (vlanId != null) {
    String uri="vlan://" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException("Network with vlan " + vlanId + " already exists in zone "+ zoneId);
    }
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException("Can't specify vlan when create network with Guest IP Type " + GuestIpType.Virtual);
  }
  if (ctxAccount.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != GuestIpType.Virtual)) {
    throw new InvalidParameterValueException("Regular user can create a network only from the network offering having traffic type " + TrafficType.Guest + " and Guest Ip type "+ GuestIpType.Virtual);
  }
  if (ctxAccount.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException("Regular user is not allowed to specify gateway/netmask/ipRange/vlanId");
  }
  if (ctxAccount.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split("\\/");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException("Cidr size can't be less than " + _cidrLimit);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException("Can't specify vlan because network offering doesn't support it");
  }
  txn.start();
  Network network=createNetwork(networkOfferingId,name,displayText,isShared,isDefault,zoneId,gateway,cidr,vlanId,networkDomain,owner,false);
  if (network.getGuestType() == GuestIpType.Direct) {
    owner=null;
  }
  if (ctxAccount.getType() == Account.ACCOUNT_TYPE_ADMIN && network.getGuestType() == GuestIpType.Direct && defineNetworkConfig) {
    _configMgr.createVlanAndPublicIpRange(userId,zoneId,null,startIP,endIP,gateway,netmask,false,vlanId,owner,network.getId());
  }
  txn.commit();
  return network;
}
