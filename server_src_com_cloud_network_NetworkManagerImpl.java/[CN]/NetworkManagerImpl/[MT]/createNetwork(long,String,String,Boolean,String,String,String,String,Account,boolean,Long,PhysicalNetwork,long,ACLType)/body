{
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.getNetworkType() == NetworkType.Basic) {
    List<NetworkVO> guestNetworks=_networksDao.listByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
    if (!guestNetworks.isEmpty()) {
      throw new InvalidParameterValueException("Can't have more than one Guest network in zone with network type " + NetworkType.Basic);
    }
    if (!(networkOffering.getGuestType() == GuestType.Shared && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException("For zone of type " + NetworkType.Basic + " only offerings of guestType "+ GuestType.Shared+ " with disabled "+ Service.SourceNat.getName()+ " service are allowed");
    }
  }
 else   if (zone.isSecurityGroupEnabled()) {
    boolean allowCreation=(networkOffering.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat));
    if (!allowCreation) {
      throw new InvalidParameterValueException("Only Account specific Isolated network with sourceNat service disabled are allowed in security group enabled zone");
    }
  }
  boolean allowSettingDefault=(zone.getNetworkType() == NetworkType.Advanced && (networkOffering.getGuestType() == GuestType.Shared || (networkOffering.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))));
  if (allowSettingDefault) {
    if (isDefault == null) {
      isDefault=false;
    }
  }
 else {
    if (isDefault == null) {
      isDefault=true;
    }
 else {
      throw new InvalidParameterValueException("isDefault parameter can be passed in only for network creation of guestType Shared or Isolated with source nat service disabled; and only in Advance zone");
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException("Can't specify vlan because network offering doesn't support it");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vlanId == null) {
      vlanId=Vlan.UNTAGGED;
    }
 else {
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException("Only vlan " + Vlan.UNTAGGED + " can be created in the zone of type "+ NetworkType.Basic);
      }
    }
  }
  if (vlanId != null) {
    String uri="vlan://" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException("Network with vlan " + vlanId + " already exists in zone "+ zoneId);
    }
  }
  if (areServicesSupportedByNetworkOffering(networkOfferingId,Service.Dns)) {
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(networkOfferingId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      if (networkDomain != null) {
        throw new InvalidParameterValueException("Domain name change is not supported by network offering id=" + networkOfferingId + " in zone id="+ zoneId);
      }
    }
 else {
      if (networkDomain == null) {
        if (aclType == ACLType.Domain) {
          networkDomain=getDomainNetworkDomain(domainId,zoneId);
        }
 else {
          networkDomain=getAccountNetworkDomain(owner.getId(),zoneId);
        }
        if (networkDomain == null) {
          networkDomain="cs" + Long.toHexString(owner.getId()) + _networkDomain;
        }
      }
 else {
        if (!NetUtils.verifyDomainName(networkDomain)) {
          throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
        }
      }
    }
  }
  boolean cidrRequired=zone.getNetworkType() == NetworkType.Advanced && networkOffering.getTrafficType() == TrafficType.Guest && (networkOffering.getGuestType() == GuestType.Shared || (networkOffering.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat)));
  if (cidr == null && cidrRequired) {
    throw new InvalidParameterValueException("StartIp/endIp/gateway/netmask are required when create network of type " + Network.GuestType.Shared + " and network of type "+ GuestType.Isolated+ " with service "+ Service.SourceNat.getName()+ " disabled");
  }
  if (zone.getNetworkType() == NetworkType.Basic && cidr != null) {
    throw new InvalidParameterValueException("StartIp/endIp/gateway/netmask can't be specified for zone of type " + NetworkType.Basic);
  }
  if (cidr != null && networkOffering.getGuestType() == Network.GuestType.Isolated && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException("Virtual Guest Cidr " + cidr + " is not RFC1918 compliant");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long physicalNetworkId=null;
  if (pNtwk != null) {
    physicalNetworkId=pNtwk.getId();
  }
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null,physicalNetworkId);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create("vlan://" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isDefault,true,domainId,aclType);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException("Fail to create a network");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == Network.GuestType.Isolated && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails("Network Id: " + network.getId());
  return network;
}
