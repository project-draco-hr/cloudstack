{
  List<PublicIp> ipList=new ArrayList<PublicIp>();
  ipList.add(publicIp);
  Map<PublicIp,Set<Service>> ipToServices=getIpToServices(ipList,false,true);
  Set<Service> services=ipToServices.get(publicIp);
  if (services == null || services.isEmpty()) {
    return true;
  }
  if (networkId == null) {
    networkId=publicIp.getAssociatedWithNetworkId();
  }
  Map<Service,Set<Provider>> serviceToProviders=getServiceProvidersMap(networkId);
  Set<Provider> oldProviders=serviceToProviders.get(services.toArray()[0]);
  Provider oldProvider=(Provider)oldProviders.toArray()[0];
  Set<Provider> newProviders=serviceToProviders.get(service);
  if (newProviders == null || newProviders.isEmpty()) {
    throw new InvalidParameterException("There is no new provider for IP " + publicIp.getAddress() + " of service "+ service.getName()+ "!");
  }
  Provider newProvider=(Provider)newProviders.toArray()[0];
  Network network=_networksDao.findById(networkId);
  NetworkElement oldElement=getElementImplementingProvider(oldProvider.getName());
  NetworkElement newElement=getElementImplementingProvider(newProvider.getName());
  if (oldElement instanceof IpDeployingRequester && newElement instanceof IpDeployingRequester) {
    IpDeployer oldIpDeployer=((IpDeployingRequester)oldElement).getIpDeployer(network);
    IpDeployer newIpDeployer=((IpDeployingRequester)newElement).getIpDeployer(network);
    if (!oldIpDeployer.getProvider().getName().equals(newIpDeployer.getProvider().getName())) {
      throw new InvalidParameterException("There would be multiple providers for IP " + publicIp.getAddress() + "!");
    }
  }
 else {
    throw new InvalidParameterException("Ip cannot be applied for new provider!");
  }
  return true;
}
