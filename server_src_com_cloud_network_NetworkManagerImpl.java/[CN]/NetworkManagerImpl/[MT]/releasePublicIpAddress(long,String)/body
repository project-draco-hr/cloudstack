{
  IPAddressVO ip=releaseOwnershipOfIpAddress(ipAddress);
  if (ip == null) {
    return true;
  }
  Ip addr=new Ip(ipAddress);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing ip " + ipAddress + "; sourceNat = "+ ip.isSourceNat());
  }
  boolean success=true;
  try {
    if (!_rulesMgr.revokeAllRules(addr,userId)) {
      s_logger.warn("Unable to revoke all the port forwarding rules for ip " + ip);
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to revoke all the port forwarding rules for ip " + ip,e);
    success=false;
  }
  if (!_lbMgr.removeAllLoadBalanacers(addr)) {
    s_logger.warn("Unable to revoke all the load balancer rules for ip " + ip);
    success=false;
  }
  for (  NetworkElement ne : _networkElements) {
    try {
      ne.disassociate(null,new Ip(ipAddress));
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn("Unable to release the ip address " + ip,e);
      success=false;
    }
  }
  if (success) {
    _ipAddressDao.unassignIpAddress(ipAddress);
    s_logger.debug("released a public ip: " + ipAddress);
  }
  final EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(ip.getAllocatedToAccountId());
  event.setType(EventTypes.EVENT_NET_IP_RELEASE);
  event.setParameters("address=" + ipAddress + "\nsourceNat="+ ip.isSourceNat());
  event.setDescription("released a public ip: " + ipAddress);
  _eventDao.persist(event);
  return success;
}
