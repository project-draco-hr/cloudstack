{
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Boolean isDefault=cmd.isDefault();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long sharedNetworkDomainId=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException("System network belongs to system, account and domainId parameters can't be specified");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Domain id=" + domainId + " doesn't exist in the system");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
      }
      _accountMgr.checkAccess(caller,null,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType())) {
    permittedAccounts.add(caller.getId());
    sharedNetworkDomainId=caller.getDomainId();
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if ((isSystem == null || !isSystem) && (aclType != null && aclType.equalsIgnoreCase(ACLType.Domain.toString()))) {
    if (domainId == null) {
      sharedNetworkDomainId=domainId;
    }
 else {
      sharedNetworkDomainId=caller.getDomainId();
    }
  }
  Filter searchFilter=new Filter(NetworkVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and("systemOnly",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and("trafficType",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join("networkOfferingSearch",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and("networkType",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join("zoneSearch",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join("domainNetworkSearch",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and("removed",sb.entity().getRemoved(),Op.NULL);
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,isDefault,trafficType,physicalNetworkId,ACLType.Domain.toString()),searchFilter,sharedNetworkDomainId));
    }
 else     if (permittedAccounts.isEmpty()) {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,isDefault,trafficType,physicalNetworkId,aclType),searchFilter,path));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,isDefault,trafficType,physicalNetworkId,ACLType.Account.toString()),searchFilter,path,permittedAccounts));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,isDefault,trafficType,physicalNetworkId,null),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException("Invalid service specified " + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}
