{
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  Long vpcId=cmd.getVpcId();
  Boolean canUseForDeploy=cmd.canUseForDeploy();
  Map<String,String> tags=cmd.getTags();
  Boolean forVpc=cmd.getForVpc();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException("System network belongs to system, account and domainId parameters can't be specified");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Specified domain id doesn't exist in the system");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException("Unable to find account " + accountName + " in specified domain");
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || (!listAll && (projectId != null && projectId != -1 && domainId == null))) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException("Unable to find project by specified id");
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        InvalidParameterValueException ex=new InvalidParameterValueException("Account " + caller + " cannot access specified project id");
        ex.addProxyObject(project,projectId,"projectId");
        throw ex;
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  if (domainId != null) {
    path=_domainDao.findById(domainId).getPath();
  }
 else {
    path=_domainDao.findById(caller.getDomainId()).getPath();
  }
  if (listAll && domainId == null) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  if (forVpc != null) {
    if (forVpc) {
      sb.and("vpc",sb.entity().getVpcId(),Op.NNULL);
    }
 else {
      sb.and("vpc",sb.entity().getVpcId(),Op.NULL);
    }
  }
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and("systemOnly",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and("trafficType",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join("networkOfferingSearch",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and("networkType",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join("zoneSearch",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and("removed",sb.entity().getRemoved(),Op.NULL);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op("key" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and("value" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and("resourceType",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join("tagSearch",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
  accountSearch.and("typeNEQ",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
  accountSearch.and("typeEQ",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
  sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,vpcId,tags),searchFilter,permittedAccounts));
      if (domainId != null) {
        networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,true,restartRequired,specifyIpRanges,vpcId,tags),searchFilter,domainId,false));
      }
    }
 else {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,vpcId,tags),searchFilter,path,isRecursive));
      networksToReturn.addAll(listDomainSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,vpcId,tags),searchFilter,path,isRecursive));
      if (domainId == null) {
        networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,true,restartRequired,specifyIpRanges,vpcId,tags),searchFilter,caller.getDomainId(),true));
      }
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges,vpcId,tags),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException("Invalid service specified " + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    networksToReturn=supportedNetworks;
  }
  if (canUseForDeploy != null) {
    List<NetworkVO> networksForDeploy=new ArrayList<NetworkVO>();
    for (    NetworkVO network : networksToReturn) {
      if (canUseForDeploy(network) == canUseForDeploy) {
        networksForDeploy.add(network);
      }
    }
    networksToReturn=networksForDeploy;
  }
  return networksToReturn;
}
