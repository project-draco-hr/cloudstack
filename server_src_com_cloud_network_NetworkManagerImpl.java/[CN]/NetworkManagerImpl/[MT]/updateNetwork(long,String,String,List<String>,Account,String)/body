{
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Network id=" + networkId + "doesn't exist in the system");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Unable to support more than one tag on network yet");
  }
  _accountMgr.checkAccess(caller,network);
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly() && network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException("Can't update system networks");
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException("Domain name change is not supported for network id=" + network.getNetworkOfferingId() + " in zone id="+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      restartNetwork=true;
    }
    network.setNetworkDomain(domainSuffix);
  }
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  boolean success=_networksDao.update(networkId,network);
  if (success && restartNetwork && (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup)) {
    s_logger.info("Restarting network " + network + " as a part of update network call");
    try {
      success=restartNetwork(networkId,true,caller);
    }
 catch (    Exception e) {
      success=false;
    }
    if (success) {
      s_logger.debug("Successully restarted the network " + network + " as a part of updateNetwork call");
    }
 else {
      s_logger.warn("Failed to restart the network " + network + " as a part of updateNetwork call");
    }
  }
  return network;
}
