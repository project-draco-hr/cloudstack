{
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId,_networkLockTimeout);
  if (network == null) {
    ConcurrentOperationException ex=new ConcurrentOperationException("Unable to acquire network configuration");
    ex.addProxyObject(ApiDBUtils.findNetworkById(networkId).getUuid());
    throw ex;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Lock is acquired for network id " + networkId + " as a part of network implement");
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Implementing) {
      s_logger.debug("Network id=" + networkId + " is already implemented");
      implemented.set(guru,network);
      return implemented;
    }
    if (state == Network.State.Setup) {
      DataCenterVO zone=_dcDao.findById(network.getDataCenterId());
      if (!isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()) || (zone.getNetworkType() == NetworkType.Basic)) {
        s_logger.debug("Network id=" + networkId + " is already implemented");
        implemented.set(guru,network);
        return implemented;
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Asking " + guru.getName() + " to implement "+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setReservationId(context.getReservationId());
    network.setState(Network.State.Implementing);
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setMode(result.getMode());
    network.setPhysicalNetworkId(result.getPhysicalNetworkId());
    _networksDao.update(networkId,network);
    implementNetworkElementsAndResources(dest,context,network,offering);
    network.setState(Network.State.Implemented);
    network.setRestartRequired(false);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug("Cleaning up because we're unable to implement the network " + network);
      network.setState(Network.State.Shutdown);
      _networksDao.update(networkId,network);
      shutdownNetwork(networkId,context,false);
    }
    _networksDao.releaseFromLockTable(networkId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Lock is released for network id " + networkId + " as a part of network implement");
    }
  }
}
