{
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId);
  if (network == null) {
    throw new ConcurrentOperationException("Unable to acquire network configuration: " + networkId);
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Setup || state == Network.State.Implementing) {
      s_logger.debug("Network id=" + networkId + " is already implemented");
      implemented.set(guru,network);
      return implemented;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Asking " + guru.getName() + " to implement "+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setReservationId(context.getReservationId());
    network.setState(Network.State.Implementing);
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setMode(result.getMode());
    _networksDao.update(networkId,network);
    if (network.getType() == Network.Type.Isolated && isServiceSupportedByNetworkOffering(network.getNetworkOfferingId(),Service.SourceNat) && !offering.isSharedSourceNatService()) {
      List<IPAddressVO> ips=_ipAddressDao.listByAssociatedNetwork(networkId,true);
      if (ips.isEmpty()) {
        s_logger.debug("Creating a source nat ip for " + network);
        Account owner=_accountMgr.getAccount(network.getAccountId());
        assignSourceNatIpAddress(owner,network,context.getCaller().getId());
      }
    }
    for (    NetworkElement element : _networkElements) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Asking " + element.getName() + " to implemenet "+ network);
      }
      element.implement(network,offering,dest,context);
    }
    s_logger.debug("Reprogramming network " + network + " as a part of network implement");
    if (!reprogramNetwork(networkId,UserContext.current().getCaller(),network)) {
      s_logger.warn("Failed to re-program the network as a part of network " + network + " implement");
      throw new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
    }
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug("Cleaning up because we're unable to implement the network " + network);
      network.setState(Network.State.Shutdown);
      _networksDao.update(networkId,network);
      shutdownNetwork(networkId,context,false);
    }
    _networksDao.releaseFromLockTable(networkId);
  }
}
