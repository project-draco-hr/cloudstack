{
  Long ruleId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=UserContext.current().getAccount();
  FirewallRuleVO rule=_firewallRulesDao.findById(ruleId);
  if (rule == null) {
    throw new InvalidParameterValueException("Unable to find port forwarding rule " + ruleId);
  }
  String publicIp=rule.getPublicIpAddress();
  IPAddressVO ipAddress=_ipAddressDao.findById(publicIp);
  if (ipAddress == null) {
    throw new InvalidParameterValueException("Unable to find IP address for ip forwarding rule " + ruleId);
  }
  Account ruleOwner=_accountDao.findById(ipAddress.getAccountId());
  if (ruleOwner == null) {
    throw new InvalidParameterValueException("Unable to find owning account for ip forwarding rule " + ruleId);
  }
  if (account != null) {
    if (isAdmin(account.getType())) {
      if (!_domainDao.isChildDomain(account.getDomainId(),ruleOwner.getDomainId())) {
        throw new PermissionDeniedException("Unable to delete ip forwarding rule " + ruleId + ", permission denied.");
      }
    }
 else     if (account.getId() != ruleOwner.getId()) {
      throw new PermissionDeniedException("Unable to delete ip forwarding rule " + ruleId + ", permission denied.");
    }
  }
  Transaction txn=Transaction.currentTxn();
  boolean locked=false;
  boolean success=false;
  try {
    rule=_firewallRulesDao.acquireInLockTable(ruleId);
    if (rule == null) {
      throw new PermissionDeniedException("Unable to obtain lock on record for deletion");
    }
    locked=true;
    txn.start();
    List<IprulePortrangeMapVO> portRecordsForRule=_iprulePortrangeMapDao.listPortRecordsForRule(ruleId);
    if (portRecordsForRule != null && portRecordsForRule.size() > 0) {
      throw new InvalidParameterValueException("Cannot delete rule as port mappings for this rule exist; please delete those mappings first");
    }
    success=_firewallRulesDao.remove(ruleId);
    String description;
    String type=EventTypes.EVENT_NET_RULE_DELETE;
    String level=EventVO.LEVEL_INFO;
    String ruleName=rule.isForwarding() ? "ip forwarding" : "load balancer";
    if (success) {
      description="deleted " + ruleName + " rule ["+ publicIp+ ":"+ rule.getPublicPort()+ "]->["+ rule.getPrivateIpAddress()+ ":"+ rule.getPrivatePort()+ "] "+ rule.getProtocol();
    }
 else {
      level=EventVO.LEVEL_ERROR;
      description="Error while deleting " + ruleName + " rule ["+ publicIp+ ":"+ rule.getPublicPort()+ "]->["+ rule.getPrivateIpAddress()+ ":"+ rule.getPrivatePort()+ "] "+ rule.getProtocol();
    }
    EventUtils.saveEvent(userId,ipAddress.getAccountId(),level,type,description);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error("Unexpected exception deleting port forwarding rule " + ruleId,ex);
    return false;
  }
 finally {
    if (locked) {
      _ipAddressDao.releaseFromLockTable(publicIp);
    }
    txn.close();
  }
  return success;
}
