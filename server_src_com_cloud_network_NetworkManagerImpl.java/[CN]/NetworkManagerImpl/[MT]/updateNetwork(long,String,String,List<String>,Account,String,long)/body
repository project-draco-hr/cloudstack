{
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Network id=" + networkId + "doesn't exist in the system");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Unable to support more than one tag on network yet");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly() && network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException("Can't update system networks");
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException("Domain name change is not supported for network id=" + network.getNetworkOfferingId() + " in zone id="+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      throw new CloudRuntimeException("Unable to update network id=" + networkId + " with new network domain as the network has running network elements");
    }
    network.setNetworkDomain(domainSuffix);
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != 0) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException("Unable to find network offering by id " + networkOfferingId);
    }
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException("Can't update network; network offering id=" + networkOfferingId + " is "+ networkOffering.getAvailability());
    }
    network.setNetworkOfferingId(networkOfferingId);
  }
  _networksDao.update(networkId,network);
  if ((networkOfferingId != 0) && (networkOfferingId != oldNetworkOfferingId)) {
    s_logger.info("Try to restart the network since the networkofferingID is changed");
    if (!(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup)) {
      s_logger.warn("Network is not in the right state to be restarted. Correct states are: " + Network.State.Implemented + ", "+ Network.State.Setup);
    }
    boolean success=true;
    try {
      success=restartNetwork(networkId,true,caller);
    }
 catch (    Exception e) {
      s_logger.warn("Fail to restart the network: " + e);
      success=false;
    }
    if (success) {
      s_logger.debug("Network id=" + networkId + " is restarted successfully.");
    }
 else {
      s_logger.warn("Network id=" + networkId + " failed to restart.");
    }
  }
  return network;
}
