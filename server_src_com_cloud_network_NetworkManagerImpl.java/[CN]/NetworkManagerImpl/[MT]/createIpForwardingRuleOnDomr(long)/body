{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  boolean success=false;
  FirewallRuleVO rule=null;
  IPAddressVO ipAddress=null;
  boolean locked=false;
  try {
    rule=_rulesDao.findById(ruleId);
    if (rule == null) {
      throw new PermissionDeniedException("Cannot create ip forwarding rule in db");
    }
    ipAddress=_ipAddressDao.findById(rule.getPublicIpAddress());
    if (ipAddress == null) {
      throw new InvalidParameterValueException("Unable to create ip forwarding rule on address " + ipAddress + ", invalid IP address specified.");
    }
    ipAddress=_ipAddressDao.acquireInLockTable(ipAddress.getAddress());
    if (ipAddress == null) {
      s_logger.warn("Unable to acquire lock on ipAddress for creating 1-1 NAT rule");
      return rule;
    }
 else {
      locked=true;
    }
    DomainRouterVO router=_routerMgr.getRouter(ipAddress.getAccountId(),ipAddress.getDataCenterId());
    success=createOrDeleteIpForwardingRuleOnDomr(rule,router,rule.getPrivateIpAddress(),true);
    if (!success) {
      _rulesDao.remove(ruleId);
      throw new PermissionDeniedException("Cannot create ip forwarding rule on domr, hence deleting created record in db");
    }
    ipAddress.setOneToOneNat(true);
    _ipAddressDao.update(ipAddress.getAddress(),ipAddress);
    String description;
    String ruleName="ip forwarding";
    String level=EventVO.LEVEL_INFO;
    description="created new " + ruleName + " rule ["+ rule.getPublicIpAddress()+ "]->["+ rule.getPrivateIpAddress()+ "]"+ ":"+ rule.getProtocol();
    EventUtils.saveEvent(UserContext.current().getUserId(),ipAddress.getAccountId(),level,EventTypes.EVENT_NET_RULE_ADD,description);
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    if (locked) {
      _ipAddressDao.releaseFromLockTable(ipAddress.getAddress());
    }
  }
  return rule;
}
