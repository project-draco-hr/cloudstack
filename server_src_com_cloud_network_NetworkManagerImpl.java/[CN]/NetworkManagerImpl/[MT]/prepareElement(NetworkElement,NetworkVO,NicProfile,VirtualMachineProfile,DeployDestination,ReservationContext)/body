{
  element.prepare(network,profile,vmProfile,dest,context);
  if (vmProfile.getType() == Type.User && element.getProvider() != null) {
    if (_networkModel.areServicesSupportedInNetwork(network.getId(),Service.Dhcp) && _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,element.getProvider()) && element instanceof DhcpServiceProvider) {
      DhcpServiceProvider sp=(DhcpServiceProvider)element;
      Map<Capability,String> dhcpCapabilities=element.getCapabilities().get(Service.Dhcp);
      String supportsMultipleSubnets=dhcpCapabilities.get(Capability.DhcpAccrossMultipleSubnets);
      if ((supportsMultipleSubnets != null || Boolean.valueOf(supportsMultipleSubnets)) && profile.getIp6Address() == null) {
        if (!sp.configDhcpSupportForSubnet(network,profile,vmProfile,dest,context)) {
          return false;
        }
      }
      sp.addDhcpEntry(network,profile,vmProfile,dest,context);
    }
    if (_networkModel.areServicesSupportedInNetwork(network.getId(),Service.UserData) && _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.UserData,element.getProvider()) && element instanceof UserDataServiceProvider) {
      UserDataServiceProvider sp=(UserDataServiceProvider)element;
      sp.addPasswordAndUserdata(network,profile,vmProfile,dest,context);
    }
  }
  return true;
}
