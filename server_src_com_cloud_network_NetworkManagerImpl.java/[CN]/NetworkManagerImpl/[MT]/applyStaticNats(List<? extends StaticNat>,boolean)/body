{
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug("There are no static nat rules for the network elements");
    return true;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  applyIpAssociations(network,false,continueOnError,publicIps);
  for (  NetworkElement ne : _networkElements) {
    try {
      if (!(ne instanceof StaticNatServiceProvider)) {
        continue;
      }
      boolean handled=((StaticNatServiceProvider)ne).applyStaticNats(network,staticNats);
      s_logger.debug("Static Nat for network " + network.getId() + " were "+ (handled ? "" : " not")+ " handled by "+ ne.getName());
    }
 catch (    ResourceUnavailableException e) {
      if (!continueOnError) {
        throw e;
      }
      s_logger.warn("Problems with " + ne.getName() + " but pushing on",e);
      success=false;
    }
  }
  applyIpAssociations(network,true,continueOnError,publicIps);
  return success;
}
