{
  String publicIp=cmd.getPublicIp();
  IPAddressVO ipAddr=_ipAddressDao.findById(cmd.getPublicIp());
  if (ipAddr == null) {
    throw new InvalidParameterValueException("Unable to create load balancer rule, invalid IP address " + publicIp);
  }
  VlanVO vlan=_vlanDao.findById(ipAddr.getVlanDbId());
  if (vlan != null) {
    if (!VlanType.VirtualNetwork.equals(vlan.getVlanType())) {
      throw new InvalidParameterValueException("Unable to create load balancer rule for IP address " + publicIp + ", only VirtualNetwork type IP addresses can be used for load balancers.");
    }
  }
  if ((ipAddr.getAccountId() == null) || (ipAddr.getAllocated() == null)) {
    throw new InvalidParameterValueException("Unable to create load balancer rule, cannot find account owner for ip " + publicIp);
  }
  Account account=(Account)UserContext.current().getAccountObject();
  if (account != null) {
    if ((account.getType() == Account.ACCOUNT_TYPE_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
      if (!_domainDao.isChildDomain(account.getDomainId(),ipAddr.getDomainId())) {
        throw new PermissionDeniedException("Unable to create load balancer rule on IP address " + publicIp + ", permission denied.");
      }
    }
 else     if (account.getId() != ipAddr.getAccountId().longValue()) {
      throw new PermissionDeniedException("Unable to create load balancer rule, account " + account.getAccountName() + " doesn't own ip address "+ publicIp);
    }
  }
  String loadBalancerName=cmd.getLoadBalancerRuleName();
  LoadBalancerVO existingLB=_loadBalancerDao.findByAccountAndName(ipAddr.getAccountId(),loadBalancerName);
  if (existingLB != null) {
    throw new InvalidParameterValueException("Unable to create load balancer rule, an existing load balancer rule with name " + loadBalancerName + " already exists.");
  }
  String publicPort=cmd.getPublicPort();
  String privatePort=cmd.getPrivatePort();
  String algorithm=cmd.getAlgorithm();
  if (!NetUtils.isValidPort(publicPort)) {
    throw new InvalidParameterValueException("publicPort is an invalid value");
  }
  if (!NetUtils.isValidPort(privatePort)) {
    throw new InvalidParameterValueException("privatePort is an invalid value");
  }
  if ((algorithm == null) || !NetUtils.isValidAlgorithm(algorithm)) {
    throw new InvalidParameterValueException("Invalid algorithm");
  }
  boolean locked=false;
  try {
    LoadBalancerVO exitingLB=_loadBalancerDao.findByIpAddressAndPublicPort(publicIp,publicPort);
    if (exitingLB != null) {
      throw new InvalidParameterValueException("IP Address/public port already load balanced by an existing load balancer rule");
    }
    List<FirewallRuleVO> existingFwRules=_rulesDao.listIPForwarding(publicIp,publicPort,true);
    if ((existingFwRules != null) && !existingFwRules.isEmpty()) {
      FirewallRuleVO existingFwRule=existingFwRules.get(0);
      String securityGroupName=null;
      if (existingFwRule.getGroupId() != null) {
        long groupId=existingFwRule.getGroupId();
        SecurityGroupVO securityGroup=_securityGroupDao.findById(groupId);
        securityGroupName=securityGroup.getName();
      }
      throw new InvalidParameterValueException("IP Address (" + publicIp + ") and port ("+ publicPort+ ") already in use"+ ((securityGroupName == null) ? "" : " by port forwarding service " + securityGroupName));
    }
    ipAddr=_ipAddressDao.acquire(publicIp);
    if (ipAddr == null) {
      throw new PermissionDeniedException("User does not own ip address " + publicIp);
    }
    locked=true;
    LoadBalancerVO loadBalancer=new LoadBalancerVO(loadBalancerName,cmd.getDescription(),ipAddr.getAccountId(),publicIp,publicPort,privatePort,algorithm);
    loadBalancer=_loadBalancerDao.persist(loadBalancer);
    Long id=loadBalancer.getId();
    Long userId=UserContext.current().getUserId();
    if (userId == null) {
      userId=Long.valueOf(User.UID_SYSTEM);
    }
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(ipAddr.getAccountId());
    event.setType(EventTypes.EVENT_LOAD_BALANCER_CREATE);
    if (id == null) {
      event.setDescription("Failed to create load balancer " + loadBalancer.getName() + " on ip address "+ publicIp+ "["+ publicPort+ "->"+ privatePort+ "]");
      event.setLevel(EventVO.LEVEL_ERROR);
    }
 else {
      event.setDescription("Successfully created load balancer " + loadBalancer.getName() + " on ip address "+ publicIp+ "["+ publicPort+ "->"+ privatePort+ "]");
      String params="id=" + loadBalancer.getId() + "\ndcId="+ ipAddr.getDataCenterId();
      event.setParameters(params);
      event.setLevel(EventVO.LEVEL_INFO);
    }
    _eventDao.persist(event);
    return _loadBalancerDao.findById(id);
  }
  finally {
    if (locked) {
      _ipAddressDao.release(publicIp);
    }
  }
}
