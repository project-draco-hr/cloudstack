{
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find ip address by id");
    ex.setProxyObject("user_ip_address","ipAddressId",ipAddressId);
    throw ex;
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug("Ip Address id= " + ipAddressId + " is not allocated, so do nothing.");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,true,ipVO);
  }
  Network associatedNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
  if (ipVO.isSourceNat() && areServicesSupportedInNetwork(associatedNetwork.getId(),Service.SourceNat)) {
    throw new IllegalArgumentException("ip address is used for source nat purposes and can not be disassociated.");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException("only ip addresses that belong to a virtual network may be disassociated.");
  }
  if (_accountVlanMapDao.findAccountVlanMap(ipVO.getAllocatedToAccountId(),ipVO.getVlanId()) != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Sepcified IP address uuid belongs to Account wide IP pool and cannot be disassociated");
    ex.setProxyObject("user_ip_address","ipAddressId",ipAddressId);
    throw ex;
  }
  if (ipVO.getSystem()) {
    throw new InvalidParameterValueException("Can't release system IP address " + ipVO);
  }
  boolean success=releasePublicIpAddress(ipAddressId,userId,caller);
  if (success) {
    Network guestNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
    NetworkOffering offering=_configMgr.getNetworkOffering(guestNetwork.getNetworkOfferingId());
    Long vmId=ipVO.getAssociatedWithVmId();
    if (offering.getElasticIp() && vmId != null) {
      _rulesMgr.getSystemIpAndEnableStaticNatForVm(_userVmDao.findById(vmId),true);
      return true;
    }
    return true;
  }
 else {
    s_logger.warn("Failed to release public ip address id=" + ipAddressId);
    return false;
  }
}
