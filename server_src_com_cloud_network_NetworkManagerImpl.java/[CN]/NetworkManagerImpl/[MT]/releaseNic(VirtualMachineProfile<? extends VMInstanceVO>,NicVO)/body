{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NicVO nic=_nicDao.lockRow(nicVO.getId(),true);
  if (nic == null) {
    throw new ConcurrentOperationException("Unable to acquire lock on nic " + nic);
  }
  Nic.State originalState=nic.getState();
  NetworkVO network=_networksDao.findById(nicVO.getNetworkId());
  if (originalState == Nic.State.Reserved || originalState == Nic.State.Reserving) {
    if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {
      NetworkGuru guru=_networkGurus.get(network.getGuruName());
      nic.setState(Nic.State.Releasing);
      _nicDao.update(nic.getId(),nic);
      NicProfile profile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),null,isSecurityGroupSupportedInNetwork(network),getNetworkTag(vmProfile.getHypervisorType(),network));
      if (guru.release(profile,vmProfile,nic.getReservationId())) {
        applyProfileToNicForRelease(nic,profile);
        nic.setState(Nic.State.Allocated);
        if (originalState == Nic.State.Reserved) {
          updateNic(nic,network.getId(),-1);
        }
 else {
          _nicDao.update(nic.getId(),nic);
        }
      }
      txn.commit();
      for (      NetworkElement element : _networkElements) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Asking " + element.getName() + " to release "+ nic);
        }
        element.release(network,profile,vmProfile,null);
      }
    }
 else {
      nic.setState(Nic.State.Allocated);
      updateNic(nic,network.getId(),-1);
      txn.commit();
    }
  }
 else {
    txn.commit();
  }
}
