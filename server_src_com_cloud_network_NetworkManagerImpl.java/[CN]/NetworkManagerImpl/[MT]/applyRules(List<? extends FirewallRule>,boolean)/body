{
  if (rules == null || rules.size() == 0) {
    s_logger.debug("There are no rules to forward to the network elements");
    return true;
  }
  boolean success=true;
  Network network=_networksDao.findById(rules.get(0).getNetworkId());
  Purpose purpose=rules.get(0).getPurpose();
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  applyIpAssociations(network,false,continueOnError,publicIps);
  for (  NetworkElement ne : _networkElements) {
    Provider provider=Network.Provider.getProvider(ne.getName());
    if (provider == null) {
      if (ne.getName().equalsIgnoreCase("Ovs") || ne.getName().equalsIgnoreCase("BareMetal")) {
        continue;
      }
      throw new CloudRuntimeException("Unable to identify the provider by name " + ne.getName());
    }
    try {
      boolean handled;
switch (purpose) {
case LoadBalancing:
        boolean isLbProvider=isProviderSupportServiceInNetwork(network.getId(),Service.Lb,provider);
      if (!(ne instanceof LoadBalancingServiceProvider && isLbProvider)) {
        continue;
      }
    handled=((LoadBalancingServiceProvider)ne).applyLBRules(network,(List<LoadBalancingRule>)rules);
  break;
case PortForwarding:
boolean isPfProvider=isProviderSupportServiceInNetwork(network.getId(),Service.PortForwarding,provider);
if (!(ne instanceof PortForwardingServiceProvider && isPfProvider)) {
continue;
}
handled=((PortForwardingServiceProvider)ne).applyPFRules(network,(List<PortForwardingRule>)rules);
break;
case StaticNat:
case Firewall:
boolean isFirewallProvider=isProviderSupportServiceInNetwork(network.getId(),Service.Firewall,provider);
if (!(ne instanceof FirewallServiceProvider && isFirewallProvider)) {
continue;
}
handled=((FirewallServiceProvider)ne).applyFWRules(network,rules);
break;
default :
s_logger.debug("Unable to handle network rules for purpose: " + purpose.toString());
handled=false;
}
s_logger.debug("Network Rules for network " + network.getId() + " were "+ (handled ? "" : " not")+ " handled by "+ ne.getName());
}
 catch (ResourceUnavailableException e) {
if (!continueOnError) {
throw e;
}
s_logger.warn("Problems with " + ne.getName() + " but pushing on",e);
success=false;
}
}
applyIpAssociations(network,true,continueOnError,publicIps);
return success;
}
