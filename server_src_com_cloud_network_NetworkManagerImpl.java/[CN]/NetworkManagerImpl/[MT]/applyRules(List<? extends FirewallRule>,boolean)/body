{
  if (rules == null || rules.size() == 0) {
    s_logger.debug("There are no rules to forward to the network elements");
    return true;
  }
  boolean success=true;
  Network network=_networksDao.findById(rules.get(0).getNetworkId());
  Purpose purpose=rules.get(0).getPurpose();
  applyProviderIpAssociations(network,purpose,continueOnError,rules);
  for (  NetworkElement ne : _networkElements) {
    try {
      boolean handled;
switch (purpose) {
case LoadBalancing:
        if (!(ne instanceof LoadBalancingServiceProvider)) {
          continue;
        }
      handled=((LoadBalancingServiceProvider)ne).applyLBRules(network,(List<LoadBalancingRule>)rules);
    break;
case PortForwarding:
  if (!(ne instanceof PortForwardingServiceProvider)) {
    continue;
  }
handled=((PortForwardingServiceProvider)ne).applyPFRules(network,(List<PortForwardingRule>)rules);
break;
case StaticNat:
case Firewall:
if (!(ne instanceof FirewallServiceProvider)) {
continue;
}
handled=((FirewallServiceProvider)ne).applyFWRules(network,rules);
break;
default :
s_logger.debug("Unable to handle network rules for purpose: " + purpose.toString());
handled=false;
}
s_logger.debug("Network Rules for network " + network.getId() + " were "+ (handled ? "" : " not")+ " handled by "+ ne.getName());
}
 catch (ResourceUnavailableException e) {
if (!continueOnError) {
throw e;
}
s_logger.warn("Problems with " + ne.getName() + " but pushing on",e);
success=false;
}
}
return success;
}
