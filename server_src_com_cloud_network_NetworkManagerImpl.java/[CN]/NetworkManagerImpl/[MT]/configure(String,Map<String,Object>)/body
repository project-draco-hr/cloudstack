{
  _name=name;
  _configs=_configDao.getConfiguration("AgentManager",params);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  _configs=_configDao.getConfiguration("Network",params);
  _networkDomain=_configs.get(Config.GuestDomainSuffix.key());
  _cidrLimit=NumbersUtil.parseInt(_configs.get(Config.NetworkGuestCidrLimit.key()),22);
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemPublicNetwork,TrafficType.Public);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemPublicNetwork,publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemManagementNetwork,TrafficType.Management);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemManagementNetwork,managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemControlNetwork,TrafficType.Control);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemControlNetwork,controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemStorageNetwork,TrafficType.Storage);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemStorageNetwork,storageNetworkOffering);
  NetworkOfferingVO guestNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemGuestNetwork,"System Offering for System-Guest-Network",TrafficType.Guest,true,false,null,null,null,true,Availability.Required,true,true,true,false,false,false,false,GuestIpType.Direct);
  guestNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(guestNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemGuestNetwork,guestNetworkOffering);
  NetworkOfferingVO defaultGuestNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultVirtualizedNetworkOffering,"Virtual Vlan",TrafficType.Guest,false,false,null,null,null,true,Availability.Required,true,true,true,true,true,true,true,GuestIpType.Virtual);
  defaultGuestNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultGuestNetworkOffering);
  NetworkOfferingVO defaultGuestDirectNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultDirectNetworkOffering,"Direct",TrafficType.Guest,false,true,null,null,null,true,Availability.Required,true,true,true,false,false,false,false,GuestIpType.Direct);
  defaultGuestDirectNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultGuestDirectNetworkOffering);
  AccountsUsingNetworkSearch=_accountDao.createSearchBuilder();
  SearchBuilder<NetworkAccountVO> networkAccountSearch=_networksDao.createSearchBuilderForAccount();
  AccountsUsingNetworkSearch.join("nc",networkAccountSearch,AccountsUsingNetworkSearch.entity().getId(),networkAccountSearch.entity().getAccountId(),JoinType.INNER);
  networkAccountSearch.and("config",networkAccountSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
  networkAccountSearch.and("owner",networkAccountSearch.entity().isOwner(),SearchCriteria.Op.EQ);
  AccountsUsingNetworkSearch.done();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and("dc",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and("allocated",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and("vlanId",AssignIpAddressSearch.entity().getVlanId(),Op.EQ);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("type",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and("networkId",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join("vlan",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and("dc",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and("allocated",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and("type",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and("networkId",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and("podId",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join("podVlanMapSB",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join("vlan",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  IpAddressSearch=_ipAddressDao.createSearchBuilder();
  IpAddressSearch.and("accountId",IpAddressSearch.entity().getAllocatedToAccountId(),Op.EQ);
  IpAddressSearch.and("dataCenterId",IpAddressSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<VlanVO> virtualNetworkVlanSB=_vlanDao.createSearchBuilder();
  virtualNetworkVlanSB.and("vlanType",virtualNetworkVlanSB.entity().getVlanType(),Op.EQ);
  IpAddressSearch.join("virtualNetworkVlanSB",virtualNetworkVlanSB,IpAddressSearch.entity().getVlanId(),virtualNetworkVlanSB.entity().getId(),JoinBuilder.JoinType.INNER);
  IpAddressSearch.done();
  NicForTrafficTypeSearch=_nicDao.createSearchBuilder();
  SearchBuilder<NetworkVO> networkSearch=_networksDao.createSearchBuilder();
  NicForTrafficTypeSearch.join("network",networkSearch,networkSearch.entity().getId(),NicForTrafficTypeSearch.entity().getNetworkId(),JoinType.INNER);
  NicForTrafficTypeSearch.and("instance",NicForTrafficTypeSearch.entity().getInstanceId(),Op.EQ);
  networkSearch.and("traffictype",networkSearch.entity().getTrafficType(),Op.EQ);
  NicForTrafficTypeSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("Network-Scavenger"));
  s_logger.info("Network Manager is configured.");
  return true;
}
