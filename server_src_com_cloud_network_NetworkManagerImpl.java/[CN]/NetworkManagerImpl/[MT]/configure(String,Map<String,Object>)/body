{
  _name=name;
  _configs=_configDao.getConfiguration("AgentManager",params);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  _configs=_configDao.getConfiguration("Network",params);
  _networkDomain=_configs.get(Config.GuestDomainSuffix.key());
  _networkLockTimeout=NumbersUtil.parseInt(_configs.get(Config.NetworkLockTimeout.key()),600);
  Map<Network.Service,Set<Network.Provider>> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  Map<Network.Service,Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Set<Provider> sgProviders=new HashSet<Provider>();
  sgProviders.add(Provider.SecurityGroupProvider);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup,sgProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultVPCOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultVPCOffProviders.put(Service.Dhcp,defaultProviders);
  defaultVPCOffProviders.put(Service.Dns,defaultProviders);
  defaultVPCOffProviders.put(Service.UserData,defaultProviders);
  defaultVPCOffProviders.put(Service.NetworkACL,defaultProviders);
  defaultVPCOffProviders.put(Service.Gateway,defaultProviders);
  defaultVPCOffProviders.put(Service.Lb,defaultProviders);
  defaultVPCOffProviders.put(Service.SourceNat,defaultProviders);
  defaultVPCOffProviders.put(Service.StaticNat,defaultProviders);
  defaultVPCOffProviders.put(Service.PortForwarding,defaultProviders);
  defaultVPCOffProviders.put(Service.Vpn,defaultProviders);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkOfferingVO offering=null;
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,"Offering for Shared Security group enabled networks",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering,"Offering for Shared networks",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> defaultINetworkOfferingProvidersForVpcNetwork=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VPCVirtualRouter);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Dhcp,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Dns,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.UserData,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Firewall,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Gateway,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Lb,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.SourceNat,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.StaticNat,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.PortForwarding,defaultProviders);
  defaultINetworkOfferingProvidersForVpcNetwork.put(Service.Vpn,defaultProviders);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,"Offering for Isolated networks with Source Nat service enabled",TrafficType.Guest,null,false,Availability.Required,null,defaultINetworkOfferingProvidersForVpcNetwork,true,Network.GuestType.Isolated,false,null,true,null,false);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,"Offering for Isolated VPC networks with Source Nat service enabled",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {
    defaultVPCOffProviders.remove(Service.Lb);
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering,"Offering for Isolated networks with no Source Nat service",TrafficType.Guest,null,true,Availability.Optional,null,defaultIsolatedNetworkOfferingProviders,true,Network.GuestType.Isolated,false,null,true,null,true);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> netscalerServiceProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> vrProvider=new HashSet<Network.Provider>();
  vrProvider.add(Provider.VirtualRouter);
  Set<Network.Provider> sgProvider=new HashSet<Network.Provider>();
  sgProvider.add(Provider.SecurityGroupProvider);
  Set<Network.Provider> nsProvider=new HashSet<Network.Provider>();
  nsProvider.add(Provider.Netscaler);
  netscalerServiceProviders.put(Service.Dhcp,vrProvider);
  netscalerServiceProviders.put(Service.Dns,vrProvider);
  netscalerServiceProviders.put(Service.UserData,vrProvider);
  netscalerServiceProviders.put(Service.SecurityGroup,sgProvider);
  netscalerServiceProviders.put(Service.StaticNat,nsProvider);
  netscalerServiceProviders.put(Service.Lb,nsProvider);
  Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> elb=new HashMap<Capability,String>();
  elb.put(Capability.ElasticLb,"true");
  Map<Capability,String> eip=new HashMap<Capability,String>();
  eip.put(Capability.ElasticIp,"true");
  serviceCapabilityMap.put(Service.Lb,elb);
  serviceCapabilityMap.put(Service.StaticNat,eip);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,"Offering for Shared networks with Elastic IP and Elastic LB capabilities",TrafficType.Guest,null,true,Availability.Optional,null,netscalerServiceProviders,true,Network.GuestType.Shared,false,null,true,serviceCapabilityMap,true);
    offering.setState(NetworkOffering.State.Enabled);
    offering.setDedicatedLB(false);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  txn.commit();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and("dc",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and("allocated",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and("vlanId",AssignIpAddressSearch.entity().getVlanId(),Op.EQ);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("type",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and("networkId",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join("vlan",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and("dc",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and("allocated",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and("type",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and("networkId",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and("podId",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join("podVlanMapSB",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join("vlan",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("Network-Scavenger"));
  _agentMgr.registerForHostEvents(this,true,false,true);
  Network.State.getStateMachine().registerListener(new NetworkStateListener(_usageEventDao,_networksDao));
  s_logger.info("Network Manager is configured.");
  return true;
}
