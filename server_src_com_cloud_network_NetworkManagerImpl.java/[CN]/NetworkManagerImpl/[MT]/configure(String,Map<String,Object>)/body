{
  _name=name;
  _configs=_configDao.getConfiguration("AgentManager",params);
  validateRemoteAccessVpnConfiguration();
  Integer rateMbps=getIntegerConfigValue(Config.NetworkThrottlingRate.key(),null);
  Integer multicastRateMbps=getIntegerConfigValue(Config.MulticastThrottlingRate.key(),null);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemVmPublicNetwork,TrafficType.Public,null);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemVmPublicNetwork,publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemVmManagementNetwork,TrafficType.Management,null);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemVmManagementNetwork,managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemVmControlNetwork,TrafficType.Control,null);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemVmControlNetwork,controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemVmStorageNetwork,TrafficType.Storage,null);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemVmStorageNetwork,storageNetworkOffering);
  NetworkOfferingVO defaultGuestNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultVirtualizedNetworkOffering,"Virtual Vlan",TrafficType.Guest,GuestIpType.Virtual,false,false,rateMbps,multicastRateMbps,null,true,Availability.Required,false,false,false,false,false,false,false);
  defaultGuestNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultGuestNetworkOffering);
  NetworkOfferingVO defaultGuestDirectNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultDirectNetworkOffering,"Direct",TrafficType.Public,GuestIpType.Direct,false,false,rateMbps,multicastRateMbps,null,true,Availability.Required,false,false,false,false,false,false,false);
  defaultGuestNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultGuestDirectNetworkOffering);
  NetworkOfferingVO defaultGuestDirectPodBasedNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultDirectPodBasedNetworkOffering,"DirectPodBased",TrafficType.Public,GuestIpType.DirectPodBased,true,false,rateMbps,multicastRateMbps,null,true,Availability.Required,false,false,false,false,false,false,false);
  defaultGuestNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultGuestDirectPodBasedNetworkOffering);
  AccountsUsingNetworkSearch=_accountDao.createSearchBuilder();
  SearchBuilder<NetworkAccountVO> networkAccountSearch=_networksDao.createSearchBuilderForAccount();
  AccountsUsingNetworkSearch.join("nc",networkAccountSearch,AccountsUsingNetworkSearch.entity().getId(),networkAccountSearch.entity().getAccountId(),JoinType.INNER);
  networkAccountSearch.and("config",networkAccountSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
  networkAccountSearch.and("owner",networkAccountSearch.entity().isOwner(),SearchCriteria.Op.EQ);
  AccountsUsingNetworkSearch.done();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  AssignIpAddressSearch.and("dc",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and("allocated",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.join("vlan",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  vlanSearch.and("type",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and("networkId",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.done();
  IpAddressSearch=_ipAddressDao.createSearchBuilder();
  IpAddressSearch.and("accountId",IpAddressSearch.entity().getAllocatedToAccountId(),Op.EQ);
  IpAddressSearch.and("dataCenterId",IpAddressSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<VlanVO> virtualNetworkVlanSB=_vlanDao.createSearchBuilder();
  virtualNetworkVlanSB.and("vlanType",virtualNetworkVlanSB.entity().getVlanType(),Op.EQ);
  IpAddressSearch.join("virtualNetworkVlanSB",virtualNetworkVlanSB,IpAddressSearch.entity().getVlanId(),virtualNetworkVlanSB.entity().getId(),JoinBuilder.JoinType.INNER);
  IpAddressSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("Network-Scavenger"));
  s_logger.info("Network Manager is configured.");
  return true;
}
