{
  _name=name;
  _configs=_configDao.getConfiguration("AgentManager",params);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  _configs=_configDao.getConfiguration("Network",params);
  _networkDomain=_configs.get(Config.GuestDomainSuffix.key());
  _cidrLimit=NumbersUtil.parseInt(_configs.get(Config.NetworkGuestCidrLimit.key()),22);
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemPublicNetwork,TrafficType.Public);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemPublicNetwork,publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemManagementNetwork,TrafficType.Management);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemManagementNetwork,managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemControlNetwork,TrafficType.Control);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemControlNetwork,controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemStorageNetwork,TrafficType.Storage);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  _systemNetworks.put(NetworkOfferingVO.SystemStorageNetwork,storageNetworkOffering);
  Map<Network.Service,Set<Network.Provider>> defaultDirectNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.DhcpServer);
  defaultDirectNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultDirectNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultDirectNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultDirectBasicZoneNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultDirectBasicZoneNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultDirectBasicZoneNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultDirectBasicZoneNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Set<Provider> sgProviders=new HashSet<Provider>();
  sgProviders.add(Provider.SecurityGroupProvider);
  defaultDirectBasicZoneNetworkOfferingProviders.put(Service.SecurityGroup,sgProviders);
  Map<Network.Service,Set<Network.Provider>> defaultVirtualNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultVirtualNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.SourceNat,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultVirtualNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkOfferingVO defaultGuestOffering=_networkOfferingDao.findByUniqueName(NetworkOffering.SystemGuestNetwork);
  if (defaultGuestOffering == null) {
    defaultGuestOffering=_configMgr.createNetworkOffering(Account.ACCOUNT_ID_SYSTEM,NetworkOffering.SystemGuestNetwork,"System Offering for System-Guest-Network",TrafficType.Guest,null,null,false,Availability.Optional,null,defaultDirectNetworkOfferingProviders,true,Network.GuestType.Shared,true);
    defaultGuestOffering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(defaultGuestOffering.getId(),defaultGuestOffering);
  }
  _systemNetworks.put(NetworkOfferingVO.SystemGuestNetwork,defaultGuestOffering);
  NetworkOfferingVO offering=null;
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultVirtualizedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(Account.ACCOUNT_ID_SYSTEM,NetworkOffering.DefaultVirtualizedNetworkOffering,"Virtual Vlan",TrafficType.Guest,null,null,false,Availability.Required,null,defaultVirtualNetworkOfferingProviders,true,Network.GuestType.Isolated,false);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultDirectNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(Account.ACCOUNT_ID_SYSTEM,NetworkOffering.DefaultDirectNetworkOffering,"Direct",TrafficType.Guest,null,null,true,Availability.Optional,null,defaultDirectNetworkOfferingProviders,true,Network.GuestType.Shared,false);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  txn.commit();
  AccountsUsingNetworkSearch=_accountDao.createSearchBuilder();
  SearchBuilder<NetworkAccountVO> networkAccountSearch=_networksDao.createSearchBuilderForAccount();
  AccountsUsingNetworkSearch.join("nc",networkAccountSearch,AccountsUsingNetworkSearch.entity().getId(),networkAccountSearch.entity().getAccountId(),JoinType.INNER);
  networkAccountSearch.and("config",networkAccountSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
  networkAccountSearch.and("owner",networkAccountSearch.entity().isOwner(),SearchCriteria.Op.EQ);
  AccountsUsingNetworkSearch.done();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and("dc",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and("allocated",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and("vlanId",AssignIpAddressSearch.entity().getVlanId(),Op.EQ);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("type",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and("networkId",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join("vlan",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and("dc",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and("allocated",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and("type",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and("networkId",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and("podId",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join("podVlanMapSB",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join("vlan",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  IpAddressSearch=_ipAddressDao.createSearchBuilder();
  IpAddressSearch.and("accountId",IpAddressSearch.entity().getAllocatedToAccountId(),Op.EQ);
  IpAddressSearch.and("dataCenterId",IpAddressSearch.entity().getDataCenterId(),Op.EQ);
  IpAddressSearch.and("associatedWithNetworkId",IpAddressSearch.entity().getAssociatedWithNetworkId(),Op.EQ);
  SearchBuilder<VlanVO> virtualNetworkVlanSB=_vlanDao.createSearchBuilder();
  virtualNetworkVlanSB.and("vlanType",virtualNetworkVlanSB.entity().getVlanType(),Op.EQ);
  IpAddressSearch.join("virtualNetworkVlanSB",virtualNetworkVlanSB,IpAddressSearch.entity().getVlanId(),virtualNetworkVlanSB.entity().getId(),JoinBuilder.JoinType.INNER);
  IpAddressSearch.done();
  NicForTrafficTypeSearch=_nicDao.createSearchBuilder();
  SearchBuilder<NetworkVO> networkSearch=_networksDao.createSearchBuilder();
  NicForTrafficTypeSearch.join("network",networkSearch,networkSearch.entity().getId(),NicForTrafficTypeSearch.entity().getNetworkId(),JoinType.INNER);
  NicForTrafficTypeSearch.and("instance",NicForTrafficTypeSearch.entity().getInstanceId(),Op.EQ);
  networkSearch.and("traffictype",networkSearch.entity().getTrafficType(),Op.EQ);
  NicForTrafficTypeSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory("Network-Scavenger"));
  _allowSubdomainNetworkAccess=Boolean.valueOf(_configs.get(Config.SubDomainNetworkAccess.key()));
  _agentMgr.registerForHostEvents(this,true,false,true);
  s_logger.info("Network Manager is configured.");
  return true;
}
