{
  Long loadBalancerId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=UserContext.current().getAccount();
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException("Unable to find load balancer rule with id " + loadBalancerId);
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (loadBalancer.getAccountId() != account.getId()) {
        throw new PermissionDeniedException("Account " + account.getAccountName() + " does not own load balancer rule "+ loadBalancer.getName()+ " (id:"+ loadBalancerId+ "), permission denied");
      }
    }
 else     if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
      throw new PermissionDeniedException("Unable to delete load balancer rule " + loadBalancer.getName() + " (id:"+ loadBalancerId+ "), permission denied.");
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  Transaction txn=Transaction.currentTxn();
  LoadBalancerVO loadBalancerLock=null;
  try {
    IPAddressVO ipAddress=_ipAddressDao.findById(loadBalancer.getIpAddress());
    if (ipAddress == null) {
      return false;
    }
    DomainRouterVO router=_routerMgr.getRouter(ipAddress.getAccountId(),ipAddress.getDataCenterId());
    List<FirewallRuleVO> fwRules=_firewallRulesDao.listByLoadBalancerId(loadBalancerId);
    txn.start();
    if ((fwRules != null) && !fwRules.isEmpty()) {
      for (      FirewallRuleVO fwRule : fwRules) {
        fwRule.setEnabled(false);
        _firewallRulesDao.update(fwRule.getId(),fwRule);
      }
      List<FirewallRuleVO> allLbRules=new ArrayList<FirewallRuleVO>();
      List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(loadBalancer.getAccountId(),ipAddress.getDataCenterId(),null);
      for (      IPAddressVO ipv : ipAddrs) {
        List<FirewallRuleVO> rules=_firewallRulesDao.listIPForwarding(ipv.getAddress(),false);
        allLbRules.addAll(rules);
      }
      updateFirewallRules(loadBalancer.getIpAddress(),allLbRules,router);
      loadBalancerLock=_loadBalancerDao.acquire(loadBalancerId);
      if (loadBalancerLock == null) {
        s_logger.warn("deleteLoadBalancer: failed to lock load balancer " + loadBalancerId + ", deleting mappings anyway...");
      }
      _loadBalancerVMMapDao.remove(loadBalancerId);
      String description;
      String type=EventTypes.EVENT_NET_RULE_DELETE;
      String ruleName="load balancer";
      String level=EventVO.LEVEL_INFO;
      Account accountOwner=_accountDao.findById(loadBalancer.getAccountId());
      for (      FirewallRuleVO updatedRule : fwRules) {
        _firewallRulesDao.remove(updatedRule.getId());
        description="deleted " + ruleName + " rule ["+ updatedRule.getPublicIpAddress()+ ":"+ updatedRule.getPublicPort()+ "]->["+ updatedRule.getPrivateIpAddress()+ ":"+ updatedRule.getPrivatePort()+ "]"+ " "+ updatedRule.getProtocol();
        EventUtils.saveEvent(userId,accountOwner.getId(),level,type,description);
      }
    }
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error("Unexpected exception deleting load balancer " + loadBalancerId,ex);
    return false;
  }
 finally {
    if (loadBalancerLock != null) {
      _loadBalancerDao.release(loadBalancerId);
    }
  }
  boolean success=_loadBalancerDao.remove(loadBalancerId);
  EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(loadBalancer.getAccountId());
  event.setType(EventTypes.EVENT_LOAD_BALANCER_DELETE);
  if (success) {
    event.setLevel(EventVO.LEVEL_INFO);
    String params="id=" + loadBalancer.getId();
    event.setParameters(params);
    event.setDescription("Successfully deleted load balancer " + loadBalancer.getName() + " (id:"+ loadBalancer.getId()+ ")");
  }
 else {
    event.setLevel(EventVO.LEVEL_ERROR);
    event.setDescription("Failed to delete load balancer " + loadBalancer.getName() + " (id:"+ loadBalancer.getId()+ ")");
  }
  _eventDao.persist(event);
  return success;
}
