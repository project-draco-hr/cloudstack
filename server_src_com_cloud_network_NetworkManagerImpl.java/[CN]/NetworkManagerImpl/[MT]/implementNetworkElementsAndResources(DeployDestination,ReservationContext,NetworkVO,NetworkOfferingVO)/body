{
  boolean sharedSourceNat=offering.getSharedSourceNat();
  if (network.getGuestType() == Network.GuestType.Isolated && areServicesSupportedInNetwork(network.getId(),Service.SourceNat) && !sharedSourceNat) {
    List<IPAddressVO> ips=null;
    Vpc vpc=null;
    if (network.getVpcId() != null) {
      vpc=_vpcMgr.getVpc(network.getVpcId());
      ips=_ipAddressDao.listByAssociatedVpc(vpc.getId(),true);
    }
 else {
      ips=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
    }
    if (ips.isEmpty()) {
      String target=vpc != null ? vpc.toString() : network.toString();
      s_logger.debug("Creating a source nat ip for " + target);
      Account owner=_accountMgr.getAccount(network.getAccountId());
      if (vpc != null) {
        assignSourceNatIpAddressToVpc(owner,vpc);
      }
 else {
        assignSourceNatIpAddressToGuestNetwork(owner,network);
      }
    }
  }
  List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  NetworkElement element : _networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!isProviderEnabledInPhysicalNetwork(getPhysicalNetworkId(network),element.getProvider().getName())) {
        throw new CloudRuntimeException("Service provider " + element.getProvider().getName() + " either doesn't exist or is not enabled in physical network id: "+ network.getPhysicalNetworkId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Asking " + element.getName() + " to implemenet "+ network);
      }
      if (!element.implement(network,offering,dest,context)) {
        CloudRuntimeException ex=new CloudRuntimeException("Failed to implement provider " + element.getProvider().getName() + " for network with specified id");
        ex.addProxyObject(network,network.getId(),"networkId");
        throw ex;
      }
    }
  }
  s_logger.debug("Reprogramming network " + network + " as a part of network implement");
  if (!reprogramNetworkRules(network.getId(),UserContext.current().getCaller(),network)) {
    s_logger.warn("Failed to re-program the network as a part of network " + network + " implement");
    ResourceUnavailableException ex=new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
    ex.addProxyObject("data_center",network.getDataCenterId(),"dataCenterId");
    throw ex;
  }
}
