{
  boolean sharedSourceNat=false;
  Map<Network.Capability,String> sourceNatCapabilities=getServiceCapabilities(network.getNetworkOfferingId(),Service.SourceNat);
  if (sourceNatCapabilities != null) {
    String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
    if (supportedSourceNatTypes.contains("zone")) {
      sharedSourceNat=true;
    }
  }
  if (network.getType() == Network.Type.Isolated && isServiceSupportedByNetworkOffering(network.getNetworkOfferingId(),Service.SourceNat) && !sharedSourceNat) {
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
    if (ips.isEmpty()) {
      s_logger.debug("Creating a source nat ip for " + network);
      Account owner=_accountMgr.getAccount(network.getAccountId());
      assignSourceNatIpAddress(owner,network,context.getCaller().getId());
    }
  }
  for (  NetworkElement element : _networkElements) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Asking " + element.getName() + " to implemenet "+ network);
    }
    element.implement(network,offering,dest,context);
  }
  s_logger.debug("Reprogramming network " + network + " as a part of network implement");
  if (!reprogramNetworkRules(network.getId(),UserContext.current().getCaller(),network)) {
    s_logger.warn("Failed to re-program the network as a part of network " + network + " implement");
    throw new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
  }
}
