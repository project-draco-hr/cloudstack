{
  boolean sharedSourceNat=false;
  if (areServicesSupportedInNetwork(network.getId(),Service.SourceNat)) {
    Map<Network.Capability,String> sourceNatCapabilities=getNetworkServiceCapabilities(network.getId(),Service.SourceNat);
    if (sourceNatCapabilities != null) {
      String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
      if (supportedSourceNatTypes.contains("zone")) {
        sharedSourceNat=true;
      }
    }
  }
  if (network.getGuestType() == Network.GuestType.Isolated && areServicesSupportedInNetwork(network.getId(),Service.SourceNat) && !sharedSourceNat) {
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
    if (ips.isEmpty()) {
      s_logger.debug("Creating a source nat ip for " + network);
      Account owner=_accountMgr.getAccount(network.getAccountId());
      assignSourceNatIpAddress(owner,network,context.getCaller().getId());
    }
  }
  List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  NetworkElement element : _networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!isProviderExistAndEnabled(getPhysicalNetworkId(network),"VirtualRouter")) {
        throw new CloudRuntimeException("Service provider " + element.getProvider().getName() + " either doesn't exist or not enabled in physical network id="+ network.getPhysicalNetworkId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Asking " + element.getName() + " to implemenet "+ network);
      }
      if (!element.implement(network,offering,dest,context)) {
        throw new CloudRuntimeException("Failed to implement provider " + element.getProvider().getName() + " for network "+ network);
      }
    }
  }
  s_logger.debug("Reprogramming network " + network + " as a part of network implement");
  if (!reprogramNetworkRules(network.getId(),UserContext.current().getCaller(),network)) {
    s_logger.warn("Failed to re-program the network as a part of network " + network + " implement");
    throw new ResourceUnavailableException("Unable to apply network rules as a part of network " + network + " implement",DataCenter.class,network.getDataCenterId());
  }
}
