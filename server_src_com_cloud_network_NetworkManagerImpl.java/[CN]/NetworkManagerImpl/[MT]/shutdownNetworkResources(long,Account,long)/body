{
  boolean success=true;
  Network network=_networksDao.findById(networkId);
  List<PortForwardingRuleVO> pfRules=_portForwardingRulesDao.listByNetwork(networkId);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + pfRules.size() + " port forwarding rules for network id="+ networkId+ " as a part of shutdownNetworkRules");
  }
  for (  PortForwardingRuleVO pfRule : pfRules) {
    s_logger.trace("Marking pf rule " + pfRule + " with Revoke state");
    pfRule.setState(FirewallRule.State.Revoke);
  }
  try {
    if (!_firewallMgr.applyRules(pfRules,true,false)) {
      s_logger.warn("Failed to cleanup pf rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup pf rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  List<FirewallRuleVO> firewallStaticNatRules=_firewallDao.listByNetworkAndPurpose(networkId,Purpose.StaticNat);
  List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + firewallStaticNatRules.size() + " static nat rules for network id="+ networkId+ " as a part of shutdownNetworkRules");
  }
  for (  FirewallRuleVO firewallStaticNatRule : firewallStaticNatRules) {
    s_logger.trace("Marking static nat rule " + firewallStaticNatRule + " with Revoke state");
    IpAddress ip=_ipAddressDao.findById(firewallStaticNatRule.getSourceIpAddressId());
    FirewallRuleVO ruleVO=_firewallDao.findById(firewallStaticNatRule.getId());
    if (ip == null || !ip.isOneToOneNat() || ip.getAssociatedWithVmId() == null) {
      throw new InvalidParameterValueException("Source ip address of the rule id=" + firewallStaticNatRule.getId() + " is not static nat enabled");
    }
    ruleVO.setState(FirewallRule.State.Revoke);
    staticNatRules.add(new StaticNatRuleImpl(ruleVO,ip.getVmIp()));
  }
  try {
    if (!_firewallMgr.applyRules(staticNatRules,true,false)) {
      s_logger.warn("Failed to cleanup static nat rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup static nat rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  try {
    if (!_lbMgr.revokeLoadBalancersForNetwork(networkId,Scheme.Public)) {
      s_logger.warn("Failed to cleanup public lb rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup public lb rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  try {
    if (!_lbMgr.revokeLoadBalancersForNetwork(networkId,Scheme.Internal)) {
      s_logger.warn("Failed to cleanup internal lb rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup public lb rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  List<FirewallRuleVO> firewallRules=_firewallDao.listByNetworkPurposeTrafficType(networkId,Purpose.Firewall,FirewallRule.TrafficType.Ingress);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + firewallRules.size() + " firewall ingress rules for network id="+ networkId+ " as a part of shutdownNetworkRules");
  }
  for (  FirewallRuleVO firewallRule : firewallRules) {
    s_logger.trace("Marking firewall ingress rule " + firewallRule + " with Revoke state");
    firewallRule.setState(FirewallRule.State.Revoke);
  }
  try {
    if (!_firewallMgr.applyRules(firewallRules,true,false)) {
      s_logger.warn("Failed to cleanup firewall ingress rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup firewall ingress rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  List<FirewallRuleVO> firewallEgressRules=_firewallDao.listByNetworkPurposeTrafficType(networkId,Purpose.Firewall,FirewallRule.TrafficType.Egress);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Releasing " + firewallEgressRules.size() + " firewall egress rules for network id="+ networkId+ " as a part of shutdownNetworkRules");
  }
  for (  FirewallRuleVO firewallRule : firewallEgressRules) {
    s_logger.trace("Marking firewall egress rule " + firewallRule + " with Revoke state");
    firewallRule.setState(FirewallRule.State.Revoke);
  }
  try {
    if (!_firewallMgr.applyRules(firewallEgressRules,true,false)) {
      s_logger.warn("Failed to cleanup firewall egress rules as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn("Failed to cleanup firewall egress rules as a part of shutdownNetworkRules due to ",ex);
    success=false;
  }
  if (network.getVpcId() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Releasing Network ACL Items for network id=" + networkId + " as a part of shutdownNetworkRules");
    }
    try {
      if (!_networkACLMgr.revokeACLItemsForNetwork(networkId)) {
        s_logger.warn("Failed to cleanup network ACLs as a part of shutdownNetworkRules");
        success=false;
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn("Failed to cleanup network ACLs as a part of shutdownNetworkRules due to ",ex);
      success=false;
    }
  }
  if (!_rulesMgr.applyStaticNatForNetwork(networkId,false,caller,true)) {
    s_logger.warn("Failed to disable static nats as part of shutdownNetworkRules for network id " + networkId);
    success=false;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(networkId,null);
  List<PublicIp> publicIpsToRelease=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      userIp.setState(State.Releasing);
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIpsToRelease.add(publicIp);
    }
  }
  try {
    if (!_ipAddrMgr.applyIpAssociations(network,true,true,publicIpsToRelease)) {
      s_logger.warn("Unable to apply ip address associations for " + network + " as a part of shutdownNetworkRules");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    throw new CloudRuntimeException("We should never get to here because we used true when applyIpAssociations",e);
  }
  return success;
}
