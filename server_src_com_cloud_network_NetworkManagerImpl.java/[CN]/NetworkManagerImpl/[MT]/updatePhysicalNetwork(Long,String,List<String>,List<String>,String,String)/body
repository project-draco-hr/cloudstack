{
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    throw new InvalidParameterValueException("Network id=" + id + "doesn't exist in the system");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Unable to support more than one tag on network yet");
  }
  if (isolationMethods != null && isolationMethods.size() > 1) {
    throw new InvalidParameterException("Only one isolationMethod can be specified for a physical network at this time");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve state '" + state + "' to a supported value {Enabled or Disabled}");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (isolationMethods != null) {
    for (    String isMethod : isolationMethods) {
      PhysicalNetwork.IsolationMethod isolationMethodVal=null;
      if (isMethod != null && !isMethod.isEmpty()) {
        try {
          isolationMethodVal=PhysicalNetwork.IsolationMethod.valueOf(isMethod.toUpperCase());
        }
 catch (        IllegalArgumentException ex) {
          throw new InvalidParameterValueException("Unable to resolve IsolationMethod '" + isMethod + "' to a supported value {VLAN or L3 or GRE}");
        }
      }
    }
    network.setIsolationMethods(isolationMethods);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean replaceVnet=false;
  ArrayList<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>(2);
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    String[] newVnetRange=newVnetRangeString.split("-");
    if (newVnetRange.length < 2) {
      throw new InvalidParameterValueException("Please provide valid vnet range between 0-4096");
    }
    if (newVnetRange[0] == null || newVnetRange[1] == null) {
      throw new InvalidParameterValueException("Please provide valid vnet range between 0-4096");
    }
    try {
      newStartVnet=Integer.parseInt(newVnetRange[0]);
      newEndVnet=Integer.parseInt(newVnetRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn("Unable to parse vnet range:",e);
      throw new InvalidParameterValueException("Please provide valid vnet range between 0-4096");
    }
    if (newStartVnet < 0 || newEndVnet > 4096) {
      throw new InvalidParameterValueException("Vnet range has to be between 0-4096");
    }
    if (newStartVnet > newEndVnet) {
      throw new InvalidParameterValueException("Vnet range has to be between 0-4096 and start range should be lesser than or equal to stop range");
    }
    if (physicalNetworkHasAllocatedVnets(network.getDataCenterId(),network.getId())) {
      String[] existingRange=network.getVnet().split("-");
      int existingStartVnet=Integer.parseInt(existingRange[0]);
      int existingEndVnet=Integer.parseInt(existingRange[1]);
      if (!(newStartVnet.intValue() > existingStartVnet && newEndVnet.intValue() < existingEndVnet)) {
        throw new InvalidParameterValueException("Can's shrink existing vnet range as it the range has vnets allocated. Only extending existing vnet is supported");
      }
      if (newStartVnet < existingStartVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
      }
      if (newEndVnet > existingEndVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
      }
    }
 else {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      replaceVnet=true;
    }
  }
  if (newVnetRangeString != null) {
    network.setVnet(newVnetRangeString);
  }
  _physicalNetworkDao.update(id,network);
  if (replaceVnet) {
    s_logger.debug("Deleting existing vnet range for the physicalNetwork id= " + id + " and zone id="+ network.getDataCenterId()+ " as a part of updatePhysicalNetwork call");
    _dcDao.deleteVnet(network.getDataCenterId(),network.getId());
  }
  for (  Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
    s_logger.debug("Adding vnet range " + vnetToAdd.first() + "-"+ vnetToAdd.second()+ " for the physicalNetwork id= "+ id+ " and zone id="+ network.getDataCenterId()+ " as a part of updatePhysicalNetwork call");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
  }
  return network;
}
