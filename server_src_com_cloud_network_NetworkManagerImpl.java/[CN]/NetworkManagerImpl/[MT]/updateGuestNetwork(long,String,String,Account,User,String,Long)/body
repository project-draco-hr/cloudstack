{
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Network id=" + networkId + "doesn't exist in the system");
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException("Don't allow to update network in state " + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException("Can't update system networks");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException("Can't allow networks which traffic type is not " + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException("NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != null) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException("Unable to find network offering by id " + networkOfferingId);
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      throw new InvalidParameterValueException("Network offering " + networkOffering + " is not in "+ NetworkOffering.State.Enabled+ " state, can't upgrade to it");
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      if (network.isSpecifiedCidr() && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
        throw new InvalidParameterValueException("Network offering " + networkOffering + " contained external network elements, can't be upgraded from a CIDR specify network!");
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException("Can't upgrade from network offering " + oldNetworkOfferingId + " to "+ networkOfferingId+ "; check logs for more information");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException("Domain name change is not supported by the network offering id=" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      s_logger.debug("Shutting down elements and resources for network id=" + networkId + " as a part of network update");
      if (!shutdownNetworkElementsAndResources(context,true,network)) {
        s_logger.warn("Failed to shutdown the network elements and resources as a part of network restart: " + network);
        throw new CloudRuntimeException("Failed to shutdown the network elements and resources as a part of network update: " + network);
      }
    }
 else {
      throw new CloudRuntimeException("Failed to shutdown the network elements and resources as a part of network update: " + network + "; network is in wrong state: "+ network.getState());
    }
  }
  Network.State networkState=_networksDao.findById(networkId).getState();
  boolean validStateToImplement=(networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    throw new CloudRuntimeException("Failed to implement the network elements and resources as a part of network update: " + network + "; network is in wrong state: "+ networkState);
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error("Vm for nic " + nic.getId() + " not found with Vm Id:"+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),null,oldNetworkOfferingId,null,0L);
        _usageEventDao.persist(usageEvent);
        usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),networkOfferingId,null,isDefault);
        _usageEventDao.persist(usageEvent);
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug("Implementing the network " + network + " elements and resources as a part of network update");
      try {
        implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
      }
 catch (      Exception ex) {
        s_logger.warn("Failed to implement network " + network + " elements and resources as a part of network update due to ",ex);
        throw new CloudRuntimeException("Failed to implement network " + network + " elements and resources as a part of network update");
      }
    }
  }
  return getNetwork(network.getId());
}
