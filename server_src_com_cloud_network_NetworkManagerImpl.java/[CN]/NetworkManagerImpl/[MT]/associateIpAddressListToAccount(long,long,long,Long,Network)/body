{
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else {
      network=networks.get(0);
    }
  }
  if (createNetwork) {
    List<? extends NetworkOffering> offerings=_configMgr.listNetworkOfferings(TrafficType.Guest,false);
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    network=createNetwork(offerings.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",null,null,null,null,null,owner,false,null,null,false,physicalNetwork,zoneId);
    if (network == null) {
      s_logger.warn("Failed to create default Virtual network for the account " + accountId + "in zone "+ zoneId);
      return false;
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}
