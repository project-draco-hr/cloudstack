{
  Account owner=_accountMgr.getActiveAccount(accountId);
  boolean createNetwork=true;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network != null) {
    createNetwork=false;
  }
 else {
    List<? extends Network> networks=getVirtualNetworksOwnedByAccountInZone(owner.getAccountName(),owner.getDomainId(),zoneId);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else {
      network=networks.get(0);
    }
  }
  if (createNetwork) {
    List<? extends NetworkOffering> offerings=_configMgr.listNetworkOfferings(TrafficType.Guest,false);
    network=createNetwork(offerings.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",false,true,zoneId,null,null,null,null,owner);
    if (network == null) {
      s_logger.warn("Failed to create default Virtual network for the account " + accountId + "in zone "+ zoneId);
      return false;
    }
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  for (  IPAddressVO addr : ips) {
    if (!addr.isSourceNat() && addr.getState() != State.Allocated) {
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setSourceNat(false);
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}
