{
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else     if (networks.size() == 1) {
      network=networks.get(0);
    }
 else {
      throw new InvalidParameterValueException("Error, more than 1 Guest Isolated Networks with SourceNAT service enabled found for this account, cannot assosiate the IP range, please provide the network ID");
    }
  }
  if (createNetwork) {
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (requiredOfferings.size() < 1) {
      throw new CloudRuntimeException("Unable to find network offering with availability=" + Availability.Required + " to automatically create the network as part of createVlanIpRange");
    }
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
      s_logger.debug("Creating network for account " + owner + " from the network offering id="+ requiredOfferings.get(0).getId()+ " as a part of createVlanIpRange process");
      network=createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",null,null,null,null,owner,false,null,physicalNetwork,zoneId,ACLType.Account,null);
      if (network == null) {
        s_logger.warn("Failed to create default Virtual network for the account " + accountId + "in zone "+ zoneId);
        throw new CloudRuntimeException("Failed to create a Guest Isolated Networks with SourceNAT service enabled as a part of createVlanIpRange, for the account " + accountId + "in zone "+ zoneId);
      }
    }
 else {
      throw new CloudRuntimeException("Required network offering id=" + requiredOfferings.get(0).getId() + " is not in "+ NetworkOffering.State.Enabled);
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setSystem(false);
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}
