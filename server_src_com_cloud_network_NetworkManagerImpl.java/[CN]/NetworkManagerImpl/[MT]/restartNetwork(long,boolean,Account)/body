{
  boolean success=true;
  NetworkVO network=_networksDao.findById(networkId);
  s_logger.debug("Restarting network " + networkId + "...");
  ReservationContext context=new ReservationContextImpl(null,null,null,caller);
  if (restartElements) {
    s_logger.debug("Restarting network elements for the network " + network);
    for (    NetworkElement element : _networkElements) {
      if (!element.restart(network,context)) {
        s_logger.warn("Failed to restart network element(s) as a part of network id" + networkId + " restart");
        success=false;
      }
    }
  }
  if (!applyIpAssociations(network,false)) {
    s_logger.warn("Failed to apply ip addresses as a part of network id" + networkId + " restart");
    success=false;
  }
  List<FirewallRuleVO> firewallRulesToApply=_firewallDao.listByNetworkAndPurpose(networkId,Purpose.Firewall);
  if (!_firewallMgr.applyFirewallRules(firewallRulesToApply,false,caller)) {
    s_logger.warn("Failed to reapply firewall rule(s) as a part of network id=" + networkId + " restart");
    success=false;
  }
  if (!_rulesMgr.applyPortForwardingRulesForNetwork(networkId,false,caller)) {
    s_logger.warn("Failed to reapply port forwarding rule(s) as a part of network id=" + networkId + " restart");
    success=false;
  }
  if (!_rulesMgr.applyStaticNatRulesForNetwork(networkId,false,caller)) {
    s_logger.warn("Failed to reapply static nat rule(s) as a part of network id=" + networkId + " restart");
    success=false;
  }
  if (!_lbMgr.applyLoadBalancersForNetwork(networkId)) {
    s_logger.warn("Failed to reapply load balancer rules as a part of network id=" + networkId + " restart");
    success=false;
  }
  List<? extends RemoteAccessVpn> vpnsToReapply=_vpnMgr.listRemoteAccessVpns(networkId);
  if (vpnsToReapply != null) {
    for (    RemoteAccessVpn vpn : vpnsToReapply) {
      if (_vpnMgr.startRemoteAccessVpn(vpn.getServerAddressId(),false) == null) {
        s_logger.warn("Failed to reapply vpn rules as a part of network id=" + networkId + " restart");
        success=false;
      }
    }
  }
  return success;
}
