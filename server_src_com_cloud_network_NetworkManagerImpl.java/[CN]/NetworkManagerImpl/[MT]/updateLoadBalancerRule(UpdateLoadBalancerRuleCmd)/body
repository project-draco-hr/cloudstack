{
  Long loadBalancerId=cmd.getId();
  String privatePort=cmd.getPrivatePort();
  String algorithm=cmd.getAlgorithm();
  String name=cmd.getLoadBalancerName();
  String description=cmd.getDescription();
  Account account=UserContext.current().getAccount();
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException("Unable to find load balancer rule " + loadBalancerId + " for update.");
  }
  if (name != null) {
    LoadBalancerVO existingLB=_loadBalancerDao.findByAccountAndName(loadBalancer.getAccountId(),name);
    if ((existingLB != null) && (existingLB.getId().longValue() != loadBalancer.getId().longValue())) {
      throw new InvalidParameterValueException("Unable to update load balancer " + loadBalancer.getName() + " with new name "+ name+ ", the name is already in use.");
    }
  }
  Account lbOwner=_accountDao.findById(loadBalancer.getAccountId());
  if (lbOwner == null) {
    throw new InvalidParameterValueException("Unable to update load balancer rule, cannot find owning account");
  }
  Long accountId=lbOwner.getId();
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId() != accountId.longValue()) {
        throw new PermissionDeniedException("Unable to update load balancer rule, permission denied");
      }
    }
 else     if (!_domainDao.isChildDomain(account.getDomainId(),lbOwner.getDomainId())) {
      throw new PermissionDeniedException("Unable to update load balancer rule, permission denied.");
    }
  }
  String updatedPrivatePort=((privatePort == null) ? loadBalancer.getPrivatePort() : privatePort);
  String updatedAlgorithm=((algorithm == null) ? loadBalancer.getAlgorithm() : algorithm);
  String updatedName=((name == null) ? loadBalancer.getName() : name);
  String updatedDescription=((description == null) ? loadBalancer.getDescription() : description);
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    loadBalancer.setPrivatePort(updatedPrivatePort);
    loadBalancer.setAlgorithm(updatedAlgorithm);
    loadBalancer.setName(updatedName);
    loadBalancer.setDescription(updatedDescription);
    _loadBalancerDao.update(loadBalancer.getId(),loadBalancer);
    List<FirewallRuleVO> fwRules=_firewallRulesDao.listByLoadBalancerId(loadBalancer.getId());
    if ((fwRules != null) && !fwRules.isEmpty()) {
      for (      FirewallRuleVO fwRule : fwRules) {
        fwRule.setPrivatePort(updatedPrivatePort);
        fwRule.setAlgorithm(updatedAlgorithm);
        _firewallRulesDao.update(fwRule.getId(),fwRule);
      }
    }
    txn.commit();
  }
 catch (  RuntimeException ex) {
    s_logger.warn("Unhandled exception trying to update load balancer rule",ex);
    txn.rollback();
    throw ex;
  }
 finally {
    txn.close();
  }
  List<FirewallRuleVO> allLbRules=new ArrayList<FirewallRuleVO>();
  IPAddressVO ipAddress=_ipAddressDao.findById(loadBalancer.getIpAddress());
  List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(loadBalancer.getAccountId(),ipAddress.getDataCenterId(),null);
  for (  IPAddressVO ipv : ipAddrs) {
    List<FirewallRuleVO> rules=_firewallRulesDao.listIPForwarding(ipv.getAddress(),false);
    allLbRules.addAll(rules);
  }
  IPAddressVO ip=_ipAddressDao.findById(loadBalancer.getIpAddress());
  DomainRouterVO router=_routerMgr.getRouter(ip.getAccountId(),ip.getDataCenterId());
  updateFirewallRules(loadBalancer.getIpAddress(),allLbRules,router);
  return _loadBalancerDao.findById(loadBalancer.getId());
}
