{
  Long userId=UserContext.current().getCallerUserId();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException("Virtual Network and Direct Shared Network creation is not allowed if zone is security group enabled");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException("Network creation is not allowed in zone with network type " + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null) {
      throw new InvalidParameterValueException("Can specify isDefault parameter only for Direct network.");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException("Can specify isShared parameter for Direct networks only");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (vlanId != null) {
    String uri="vlan://" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException("Network with vlan " + vlanId + " already exists in zone "+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException("Can't specify vlan because network offering doesn't support it");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException("Can't specify vlan when create network with Guest IP Type " + GuestIpType.Virtual);
  }
  if (networkDomain == null) {
    networkDomain="cs" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create("vlan://" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException("Fail to create a network");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails("Network Id: " + network.getId());
  return network;
}
