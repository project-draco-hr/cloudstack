{
  String accountName=cmd.getAccountName();
  long domainId=cmd.getDomainId();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  long userId=UserContext.current().getCallerUserId();
  Account owner=_accountMgr.getActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId+ ", permission denied");
  }
  _accountMgr.checkAccess(caller,owner);
  long ownerId=owner.getId();
  Long networkId=cmd.getNetworkId();
  Network network=null;
  if (networkId != null) {
    network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Network id is invalid: " + networkId);
    }
  }
  PublicIp ip=null;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address called for user " + userId + " account "+ ownerId);
    }
    accountToLock=_accountDao.acquireInLockTable(ownerId);
    if (accountToLock == null) {
      s_logger.warn("Unable to lock account: " + ownerId);
      throw new ConcurrentOperationException("Unable to acquire account lock");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address lock acquired");
    }
    if (_accountMgr.resourceLimitExceeded(accountToLock,ResourceType.public_ip)) {
      ResourceAllocationException rae=new ResourceAllocationException("Maximum number of public IP addresses for account: " + accountToLock.getAccountName() + " has been exceeded.");
      rae.setResourceType("ip");
      throw rae;
    }
    txn.start();
    ip=fetchNewPublicIp(zoneId,null,null,owner,VlanType.VirtualNetwork,network.getId(),false,false);
    if (ip == null) {
      throw new InsufficientAddressCapacityException("Unable to find available public IP addresses",DataCenter.class,zoneId);
    }
    Ip ipAddress=ip.getAddress();
    s_logger.debug("Got " + ipAddress + " to assign for account "+ owner.getId()+ " in zone "+ network.getDataCenterId());
    txn.commit();
  }
  finally {
    if (accountToLock != null) {
      _accountDao.releaseFromLockTable(ownerId);
      s_logger.debug("Associate IP address lock released");
    }
  }
  return ip;
}
