{
  String accountName=cmd.getAccountName();
  long domainId=cmd.getDomainId();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getAccount();
  long userId=UserContext.current().getUserId();
  Long accountId=null;
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId+ ", permission denied");
  }
  _accountMgr.checkAccess(caller,owner);
  Long networkId=cmd.getNetworkId();
  Network network=null;
  if (networkId != null) {
    network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Network id is invalid: " + networkId);
    }
  }
  EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(accountId);
  event.setType(EventTypes.EVENT_NET_IP_ASSIGN);
  PublicIp ip=null;
  boolean success=false;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address called for user " + userId + " account "+ accountId);
    }
    accountToLock=_accountDao.acquireInLockTable(accountId);
    if (accountToLock == null) {
      s_logger.warn("Unable to lock account: " + accountId);
      throw new ConcurrentOperationException("Unable to acquire account lock");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address lock acquired");
    }
    if (_accountMgr.resourceLimitExceeded(accountToLock,ResourceType.public_ip)) {
      ResourceAllocationException rae=new ResourceAllocationException("Maximum number of public IP addresses for account: " + accountToLock.getAccountName() + " has been exceeded.");
      rae.setResourceType("ip");
      throw rae;
    }
    txn.start();
    ip=fetchNewPublicIp(zoneId,VlanType.VirtualNetwork,owner,false);
    if (ip == null) {
      throw new InsufficientAddressCapacityException("Unable to find available public IP addresses",DataCenter.class,zoneId);
    }
    _accountMgr.incrementResourceCount(accountId,ResourceType.public_ip);
    String ipAddress=ip.getAddress();
    event.setParameters("address=" + ipAddress + "\nsourceNat="+ false+ "\ndcId="+ zoneId);
    event.setDescription("Assigned a public IP address: " + ipAddress);
    _eventDao.persist(event);
    txn.commit();
    if (network != null) {
      for (      NetworkElement element : _networkElements) {
        element.associate(network,ip);
      }
    }
    success=true;
    return ip;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.error("Unable to associate ip address due to resource unavailable exception",e);
    return null;
  }
 finally {
    if (caller != null) {
      _accountDao.releaseFromLockTable(accountId);
      s_logger.debug("Associate IP address lock released");
    }
    if (!success) {
      if (ip != null) {
        Transaction.currentTxn();
        txn.start();
        _ipAddressDao.unassignIpAddress(ip.getAddress());
        _accountMgr.decrementResourceCount(accountId,ResourceType.public_ip);
        event.setLevel(EventVO.LEVEL_ERROR);
        event.setDescription("");
        _eventDao.persist(event);
        txn.commit();
      }
    }
  }
}
