{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  int deviceId=0;
  boolean[] deviceIds=new boolean[networks.size()];
  Arrays.fill(deviceIds,false);
  List<NicVO> nics=new ArrayList<NicVO>(networks.size());
  NicVO defaultNic=null;
  for (  Pair<NetworkVO,NicProfile> network : networks) {
    NetworkVO config=network.first();
    NetworkGuru guru=_networkGurus.get(config.getGuruName());
    NicProfile requested=network.second();
    if (requested != null && requested.getMode() == null) {
      requested.setMode(config.getMode());
    }
    NicProfile profile=guru.allocate(config,requested,vm);
    if (vm != null && vm.getVirtualMachine().getType() == Type.User && config.isDefault()) {
      profile.setDefaultNic(true);
    }
    if (profile == null) {
      continue;
    }
    if (requested != null && requested.getMode() == null) {
      profile.setMode(requested.getMode());
    }
 else {
      profile.setMode(config.getMode());
    }
    NicVO vo=new NicVO(guru.getName(),vm.getId(),config.getId(),vm.getType());
    while (deviceIds[deviceId] && deviceId < deviceIds.length) {
      deviceId++;
    }
    deviceId=applyProfileToNic(vo,profile,deviceId);
    vo=_nicDao.persist(vo);
    if (vo.isDefaultNic()) {
      if (defaultNic != null) {
        throw new IllegalArgumentException("You cannot specify two nics as default nics: nic 1 = " + defaultNic + "; nic 2 = "+ vo);
      }
      defaultNic=vo;
    }
    int devId=vo.getDeviceId();
    if (devId > deviceIds.length) {
      throw new IllegalArgumentException("Device id for nic is too large: " + vo);
    }
    if (deviceIds[devId]) {
      throw new IllegalArgumentException("Conflicting device id for two different nics: " + devId);
    }
    deviceIds[devId]=true;
    nics.add(vo);
    NetworkOffering no=_configMgr.getNetworkOffering(config.getNetworkOfferingId());
    Integer networkRate=_configMgr.getNetworkRate(no.getId(),vm.getType());
    vm.addNic(new NicProfile(vo,network.first(),vo.getBroadcastUri(),vo.getIsolationUri(),networkRate));
  }
  if (nics.size() != networks.size()) {
    s_logger.warn("Number of nics " + nics.size() + " doesn't match number of requested networks "+ networks.size());
    throw new CloudRuntimeException("Number of nics " + nics.size() + " doesn't match number of requested networks "+ networks.size());
  }
  if (nics.size() == 1) {
    nics.get(0).setDefaultNic(true);
  }
  txn.commit();
}
