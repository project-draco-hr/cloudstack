{
  EC2AuthorizeRevokeSecurityGroup EC2request=new EC2AuthorizeRevokeSecurityGroup();
  String[] groupName=request.getParameterValues("GroupName");
  if (null != groupName && 0 < groupName.length)   EC2request.setName(groupName[0]);
 else {
    response.sendError(530,"Missing GroupName parameter");
    return;
  }
  int nCount=1;
  do {
    EC2IpPermission perm=new EC2IpPermission();
    String[] protocol=request.getParameterValues("IpPermissions." + nCount + ".IpProtocol");
    if (null != protocol && 0 < protocol.length)     perm.setProtocol(protocol[0]);
 else     break;
    String[] fromPort=request.getParameterValues("IpPermissions." + nCount + ".FromPort");
    if (null != fromPort && 0 < fromPort.length)     perm.setProtocol(fromPort[0]);
    String[] toPort=request.getParameterValues("IpPermissions." + nCount + ".ToPort");
    if (null != toPort && 0 < toPort.length)     perm.setProtocol(toPort[0]);
    int mCount=1;
    do {
      String[] ranges=request.getParameterValues("IpPermissions." + nCount + ".IpRanges."+ mCount+ ".CidrIp");
      if (null != ranges && 0 < ranges.length)       perm.addIpRange(ranges[0]);
 else       break;
      mCount++;
    }
 while (true);
    mCount=1;
    do {
      String[] user=request.getParameterValues("IpPermissions." + nCount + ".Groups."+ mCount+ ".UserId");
      if (null == user || 0 == user.length)       break;
      String[] name=request.getParameterValues("IpPermissions." + nCount + ".Groups."+ mCount+ ".GroupName");
      if (null == name || 0 == name.length)       break;
      EC2SecurityGroup group=new EC2SecurityGroup();
      group.setAccount(user[0]);
      group.setName(name[0]);
      perm.addUser(group);
      mCount++;
    }
 while (true);
    EC2request.addIpPermission(perm);
    nCount++;
  }
 while (true);
  if (1 == nCount) {
    response.sendError(530,"At least one IpPermissions required");
    return;
  }
  AuthorizeSecurityGroupIngressResponse EC2response=EC2SoapServiceImpl.toAuthorizeSecurityGroupIngressResponse(ServiceProvider.getInstance().getEC2Engine().authorizeSecurityGroup(EC2request));
  serializeResponse(response,EC2response);
}
