{
  EC2RunInstances EC2request=new EC2RunInstances();
  String[] imageId=request.getParameterValues("ImageId");
  if (null != imageId && 0 < imageId.length)   EC2request.setTemplateId(imageId[0]);
 else {
    response.sendError(530,"Missing ImageId parameter");
    return;
  }
  String[] minCount=request.getParameterValues("MinCount");
  if (null != minCount && 0 < minCount.length)   EC2request.setMinCount(Integer.parseInt(minCount[0]));
 else {
    response.sendError(530,"Missing MinCount parameter");
    return;
  }
  String[] maxCount=request.getParameterValues("MaxCount");
  if (null != maxCount && 0 < maxCount.length)   EC2request.setMaxCount(Integer.parseInt(maxCount[0]));
 else {
    response.sendError(530,"Missing MaxCount parameter");
    return;
  }
  String[] instanceType=request.getParameterValues("InstanceType");
  if (null != instanceType && 0 < instanceType.length)   EC2request.setInstanceType(instanceType[0]);
  String[] zoneName=request.getParameterValues("Placement.AvailabilityZone");
  if (null != zoneName && 0 < zoneName.length)   EC2request.setZoneName(zoneName[0]);
  String[] size=request.getParameterValues("size");
  if (size != null) {
    EC2request.setSize(Integer.valueOf(size[0]));
  }
  String[] keyName=request.getParameterValues("KeyName");
  if (keyName != null) {
    EC2request.setKeyName(keyName[0]);
  }
  EC2Engine engine=ServiceProvider.getInstance().getEC2Engine();
  RunInstancesResponse EC2response=EC2SoapServiceImpl.toRunInstancesResponse(engine.runInstances(EC2request),engine);
  serializeResponse(response,EC2response);
}
