{
  if (debug) {
    System.out.println("EC2RestServlet.doGetOrPost: javax.servlet.forward.request_uri: " + request.getAttribute("javax.servlet.forward.request_uri"));
    System.out.println("EC2RestServlet.doGetOrPost: javax.servlet.forward.context_path: " + request.getAttribute("javax.servlet.forward.context_path"));
    System.out.println("EC2RestServlet.doGetOrPost: javax.servlet.forward.servlet_path: " + request.getAttribute("javax.servlet.forward.servlet_path"));
    System.out.println("EC2RestServlet.doGetOrPost: javax.servlet.forward.path_info: " + request.getAttribute("javax.servlet.forward.path_info"));
    System.out.println("EC2RestServlet.doGetOrPost: javax.servlet.forward.query_string: " + request.getAttribute("javax.servlet.forward.query_string"));
  }
  String action=request.getParameter("Action");
  logRequest(request);
  if (action.equalsIgnoreCase("SetUserKeys")) {
    setUserKeys(request,response);
    return;
  }
  if (action.equalsIgnoreCase("CloudEC2Version")) {
    cloudEC2Version(request,response);
    return;
  }
  try {
    if (!authenticateRequest(request,response))     return;
    if (action.equalsIgnoreCase("AllocateAddress"))     allocateAddress(request,response);
 else     if (action.equalsIgnoreCase("AssociateAddress"))     associateAddress(request,response);
 else     if (action.equalsIgnoreCase("AttachVolume"))     attachVolume(request,response);
 else     if (action.equalsIgnoreCase("AuthorizeSecurityGroupIngress"))     authorizeSecurityGroupIngress(request,response);
 else     if (action.equalsIgnoreCase("CreateImage"))     createImage(request,response);
 else     if (action.equalsIgnoreCase("CreateSecurityGroup"))     createSecurityGroup(request,response);
 else     if (action.equalsIgnoreCase("CreateSnapshot"))     createSnapshot(request,response);
 else     if (action.equalsIgnoreCase("CreateVolume"))     createVolume(request,response);
 else     if (action.equalsIgnoreCase("DeleteSecurityGroup"))     deleteSecurityGroup(request,response);
 else     if (action.equalsIgnoreCase("DeleteSnapshot"))     deleteSnapshot(request,response);
 else     if (action.equalsIgnoreCase("DeleteVolume"))     deleteVolume(request,response);
 else     if (action.equalsIgnoreCase("DeregisterImage"))     deregisterImage(request,response);
 else     if (action.equalsIgnoreCase("DescribeAddresses"))     describeAddresses(request,response);
 else     if (action.equalsIgnoreCase("DescribeAvailabilityZones"))     describeAvailabilityZones(request,response);
 else     if (action.equalsIgnoreCase("DescribeImageAttribute"))     describeImageAttribute(request,response);
 else     if (action.equalsIgnoreCase("DescribeImages"))     describeImages(request,response);
 else     if (action.equalsIgnoreCase("DescribeInstanceAttribute"))     describeInstanceAttribute(request,response);
 else     if (action.equalsIgnoreCase("DescribeInstances"))     describeInstances(request,response);
 else     if (action.equalsIgnoreCase("DescribeSecurityGroups"))     describeSecurityGroups(request,response);
 else     if (action.equalsIgnoreCase("DescribeSnapshots"))     describeSnapshots(request,response);
 else     if (action.equalsIgnoreCase("DescribeVolumes"))     describeVolumes(request,response);
 else     if (action.equalsIgnoreCase("DetachVolume"))     detachVolume(request,response);
 else     if (action.equalsIgnoreCase("DisassociateAddress"))     disassociateAddress(request,response);
 else     if (action.equalsIgnoreCase("ModifyImageAttribute"))     modifyImageAttribute(request,response);
 else     if (action.equalsIgnoreCase("RebootInstances"))     rebootInstances(request,response);
 else     if (action.equalsIgnoreCase("RegisterImage"))     registerImage(request,response);
 else     if (action.equalsIgnoreCase("ReleaseAddress"))     releaseAddress(request,response);
 else     if (action.equalsIgnoreCase("ResetImageAttribute"))     resetImageAttribute(request,response);
 else     if (action.equalsIgnoreCase("RevokeSecurityGroupIngress"))     revokeSecurityGroupIngress(request,response);
 else     if (action.equalsIgnoreCase("RunInstances"))     runInstances(request,response);
 else     if (action.equalsIgnoreCase("StartInstances"))     startInstances(request,response);
 else     if (action.equalsIgnoreCase("StopInstances"))     stopInstances(request,response);
 else     if (action.equalsIgnoreCase("TerminateInstances"))     terminateInstances(request,response);
 else     if (action.equalsIgnoreCase("SetCertificate"))     setCertificate(request,response);
 else     if (action.equalsIgnoreCase("DeleteCertificate"))     deleteCertificate(request,response);
 else     if (action.equalsIgnoreCase("SetOfferMapping"))     setOfferMapping(request,response);
 else     if (action.equalsIgnoreCase("DeleteOfferMapping"))     deleteOfferMapping(request,response);
 else     if (action.equalsIgnoreCase("CreateKeyPair"))     createKeyPair(request,response);
 else     if (action.equalsIgnoreCase("ImportKeyPair"))     importKeyPair(request,response);
 else     if (action.equalsIgnoreCase("DeleteKeyPair"))     deleteKeyPair(request,response);
 else     if (action.equalsIgnoreCase("DescribeKeyPairs"))     describeKeyPairs(request,response);
 else     if (action.equalsIgnoreCase("GetPasswordData"))     getPasswordData(request,response);
 else {
      logger.error("Unsupported action " + action);
      throw new EC2ServiceException(ClientError.Unsupported,"This operation is not available");
    }
    PersistContext.commitTransaction();
    PersistContext.commitTransaction(true);
  }
 catch (  EC2ServiceException e) {
    response.setStatus(e.getErrorCode());
    if (e.getCause() != null && e.getCause() instanceof AxisFault)     faultResponse(response,((AxisFault)e.getCause()).getFaultCode().getLocalPart(),e.getMessage());
 else {
      logger.error("EC2ServiceException: " + e.getMessage(),e);
      endResponse(response,e.toString());
    }
  }
catch (  PermissionDeniedException e) {
    logger.error("Unexpected exception: " + e.getMessage(),e);
    response.setStatus(403);
    endResponse(response,"Access denied");
  }
catch (  Exception e) {
    logger.error("Unexpected exception: " + e.getMessage(),e);
    response.setStatus(500);
    endResponse(response,e.toString());
  }
 finally {
    try {
      response.flushBuffer();
    }
 catch (    IOException e) {
      logger.error("Unexpected exception " + e.getMessage(),e);
    }
    PersistContext.closeSession();
    PersistContext.closeSession(true);
  }
}
