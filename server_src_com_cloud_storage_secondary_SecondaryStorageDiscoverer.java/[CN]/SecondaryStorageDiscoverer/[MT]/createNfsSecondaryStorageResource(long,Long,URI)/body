{
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,"mount",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn("Unable to make directory: " + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains("already mounted")) {
    s_logger.warn("Unable to mount " + uri.toString() + " due to "+ result);
    file.delete();
    return null;
  }
  script=new Script(true,"umount",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put("mount.path",mountStr);
  details.put("orig.url",uri.toString());
  details.put("mount.parent",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put("zone",Long.toString(dcId));
  if (podId != null) {
    params.put("pod",podId.toString());
  }
  params.put("guid",uri.toString());
  params.put("secondary.storage.vm","false");
  params.put("max.template.iso.size",_configDao.getValue("max.template.iso.size"));
  try {
    storage.configure("Storage",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn("Unable to configure the storage ",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}
