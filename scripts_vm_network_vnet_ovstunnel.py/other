import cloudstack_pluginlib as lib
import logging
import commands
import os
import sys
import subprocess
import time
import json
from optparse import OptionParser, OptionGroup, OptParseError, BadOptionError, OptionError, OptionConflictError, OptionValueError
from time import localtime as _localtime, asctime as _asctime
if (__name__ == '__main__'):
    logging.basicConfig(filename='/var/log/cloudstack/agent/ovstunnel.log', format='%(asctime)s - %(message)s', level=logging.DEBUG)
    parser = OptionParser()
    parser.add_option('--key', dest='key')
    parser.add_option('--cs_host_id', dest='cs_host_id')
    parser.add_option('--bridge', dest='bridge')
    parser.add_option('--remote_ip', dest='remote_ip')
    parser.add_option('--src_host', dest='src_host')
    parser.add_option('--dst_host', dest='dst_host')
    parser.add_option('--iface_name', dest='iface_name')
    parser.add_option('--config', dest='config')
    (option, args) = parser.parse_args()
    if (len(args) == 0):
        logging.debug('No command to execute')
        sys.exit(1)
    cmd = args[0]
    if (cmd == 'setup_ovs_bridge'):
        setup_ovs_bridge(option.bridge, option.key, option.cs_host_id)
    elif (cmd == 'destroy_ovs_bridge'):
        destroy_ovs_bridge(option.bridge)
    elif (cmd == 'create_tunnel'):
        create_tunnel(option.bridge, option.remote_ip, option.key, option.src_host, option.dst_host)
    elif (cmd == 'destroy_tunnel'):
        destroy_tunnel(option.bridge, option.iface_name)
    elif (cmd == 'setup_ovs_bridge_for_distributed_routing'):
        setup_ovs_bridge_for_distributed_routing(bridge, cs_host_id)
    elif (cmd == 'configure_ovs_bridge_for_network_topology'):
        configure_bridge_for_network_topology(brdige, cs_host_id, config)
    elif (cmd == 'configure_ovs_bridge_for_routing_policies'):
        configure_ovs_bridge_for_routing_policies(bridge, config)
    else:
        logging.debug(('Unknown command: ' + cmd))
        sys.exit(1)
