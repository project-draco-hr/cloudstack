{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long accountId=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((accountName != null) && (domainId != null)) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Unable to find rules network group " + name + ", permission denied.");
        }
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to network group " + name + ", permission denied.");
      }
      Account groupOwner=getManagementServer().findActiveAccount(accountName,domainId);
      if (groupOwner == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
      }
      accountId=groupOwner.getId();
    }
 else {
      if (account != null) {
        accountId=account.getId();
        domainId=account.getDomainId();
      }
    }
  }
 else {
    if (account != null) {
      accountId=account.getId();
      domainId=account.getDomainId();
    }
  }
  if (accountId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account for network group " + name + "; failed to delete group.");
  }
  NetworkGroupVO sg=getManagementServer().findNetworkGroupByName(accountId,name);
  if (sg == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find network group " + name + "; failed to delete group.");
  }
  try {
    getManagementServer().deleteNetworkGroup(sg.getId(),accountId);
  }
 catch (  ResourceInUseException ex) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Failed to delete network group " + name + " for account "+ accountId+ ", group is not empty.");
    }
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to delete network group " + name + "; group is not empty.");
  }
catch (  PermissionDeniedException pde) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Failed to delete network group " + name + " for account "+ accountId+ ", default group cannot be deleted");
    }
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to delete network group " + name + "; default group cannot be deleted");
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),"true"));
  return returnValues;
}
