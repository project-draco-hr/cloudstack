@attr(tags=['advanced'], required_hardware='false')
def test_listVolume_as_domainadmin_listall_true_rec_false(self):
    '\n\t# Test listing of Volumes by passing listall="true" and isrecusriv="false" parameter as domain admin\n\t# Validate that it returns all the Volumes that is owned by accounts in this domain and all its subdomain\n\t'
    self.apiclient.connection.apiKey = self.user_d1_apikey
    self.apiclient.connection.securityKey = self.user_d1_secretkey
    volumeList = Volume.list(self.apiclient, listall='true', isrecursive='false')
    self.debug(('List as Domain Admin  - listall=true,isrecursive=false %s' % volumeList))
    self.assertEqual((len(volumeList) == 9), True, 'Number of items in list response check failed!!')
    if (self.checkForExistenceOfValue(volumeList, self.vm_d1_volume[0].id), (self.checkForExistenceOfValue(volumeList, self.vm_d1a_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d1b_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d11_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d11a_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d11b_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d12a_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d12b_volume[0].id) and self.checkForExistenceOfValue(volumeList, self.vm_d111a_volume[0].id))):
        accountAccess = True
    else:
        accountAccess = False
    self.assertEqual(accountAccess, True, 'Account access check failed!!')
