{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Starting cluster manager, msid : " + _msId);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    final Class<?> c=this.getClass();
    String version=c.getPackage().getImplementationVersion();
    ManagementServerHostVO mshost=_mshostDao.findByMsid(_msId);
    if (mshost == null) {
      mshost=new ManagementServerHostVO();
      mshost.setMsid(_msId);
      mshost.setRunid(this.getCurrentRunId());
      mshost.setName(NetUtils.getHostName());
      mshost.setVersion(version);
      mshost.setServiceIP(_clusterNodeIP);
      mshost.setServicePort(_currentServiceAdapter.getServicePort());
      mshost.setLastUpdateTime(DateUtil.currentGMTTime());
      mshost.setRemoved(null);
      mshost.setAlertCount(0);
      mshost.setState(ManagementServerHost.State.Starting);
      _mshostDao.persist(mshost);
      if (s_logger.isInfoEnabled()) {
        s_logger.info("New instance of management server msid " + _msId + " is being started");
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info("Management server " + _msId + " is being started");
      }
      _mshostDao.update(mshost.getId(),getCurrentRunId(),NetUtils.getHostName(),version,_clusterNodeIP,_currentServiceAdapter.getServicePort(),DateUtil.currentGMTTime());
    }
    txn.commit();
    _mshostId=mshost.getId();
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Management server (host id : " + _mshostId + ") is being started at "+ _clusterNodeIP+ ":"+ _currentServiceAdapter.getServicePort());
    }
    if (_agentLBEnabled) {
      s_logger.debug("Management server " + _msId + " is asking other peers to rebalance their agents");
      _rebalanceService.startRebalanceAgents();
    }
    _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
    _notificationExecutor.submit(getNotificationTask());
    try {
synchronized (stateLock) {
        while (_state != State.Up) {
          stateLock.wait();
        }
      }
    }
 catch (    final InterruptedException e) {
    }
 finally {
      s_logger.debug("Agent rebalancing is completed, management server " + _mshostId + " is ready");
    }
  }
 catch (  Throwable e) {
    s_logger.error("Unexpected exception : ",e);
    txn.rollback();
    throw new CloudRuntimeException("Unable to initialize cluster info into database");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Cluster manager was started successfully");
  }
  return true;
}
