{
  ClusterService peerService=null;
  if (s_logger.isDebugEnabled())   s_logger.debug("Async " + getSelfPeerName() + " -> "+ strPeer+ "."+ agentId+ " "+ gson.toJson(cmds,Command[].class));
  for (int i=0; i < 2; i++) {
    try {
      peerService=getPeerService(strPeer);
    }
 catch (    RemoteException e) {
      s_logger.error("Unable to get cluster service on peer : " + strPeer);
    }
    if (peerService != null) {
      try {
        long seq=0;
synchronized (String.valueOf(agentId).intern()) {
          if (s_logger.isDebugEnabled())           s_logger.debug("Send Async " + getSelfPeerName() + " -> "+ strPeer+ "."+ agentId+ " to remote");
          long startTick=System.currentTimeMillis();
          seq=peerService.executeAsync(getSelfPeerName(),agentId,gson.toJson(cmds,Command[].class),stopOnError);
          if (seq > 0) {
            if (s_logger.isDebugEnabled())             s_logger.debug("Completed Async " + getSelfPeerName() + " -> "+ strPeer+ "."+ agentId+ " in "+ (System.currentTimeMillis() - startTick)+ " ms"+ ", register local listener "+ strPeer+ "/"+ seq);
            registerAsyncCall(strPeer,seq,listener);
          }
 else {
            s_logger.warn("Completed Async " + getSelfPeerName() + " -> "+ strPeer+ "."+ agentId+ " in "+ (System.currentTimeMillis() - startTick)+ " ms, return indicates failure, seq: "+ seq);
          }
        }
        return seq;
      }
 catch (      RemoteException e) {
        invalidatePeerService(strPeer);
        if (s_logger.isInfoEnabled())         s_logger.info("Exception on remote execution -> " + strPeer + ", iteration : "+ i);
      }
    }
  }
  return 0L;
}
