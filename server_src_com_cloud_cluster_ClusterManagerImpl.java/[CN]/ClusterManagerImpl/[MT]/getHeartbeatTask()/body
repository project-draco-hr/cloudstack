{
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open("ClusterHeartBeat");
      try {
        txn.transitToUserManagedConnection(getHeartbeatConnection());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("Cluster manager heartbeat update, id:" + _mshostId);
        }
        _mshostDao.update(_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("Cluster manager peer-scan, id:" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan();
        }
        peerScan();
        if (_agentLBEnabled && !_agentLbHappened) {
          SearchCriteriaService<HostVO,HostVO> sc=SearchCriteria2.create(HostVO.class);
          sc.addAnd(sc.getEntity().getManagementServerId(),Op.NNULL);
          sc.addAnd(sc.getEntity().getType(),Op.EQ,Host.Type.Routing);
          List<HostVO> allManagedRoutingAgents=sc.list();
          sc=SearchCriteria2.create(HostVO.class);
          sc.addAnd(sc.getEntity().getType(),Op.EQ,Host.Type.Routing);
          List<HostVO> allAgents=sc.list();
          double allHostsCount=allAgents.size();
          double managedHostsCount=allManagedRoutingAgents.size();
          if (allHostsCount > 0.0) {
            double load=managedHostsCount / allHostsCount;
            if (load >= _connectedAgentsThreshold) {
              s_logger.debug("Scheduling agent rebalancing task as the average agent load " + load + " is more than the threshold "+ _connectedAgentsThreshold);
              _rebalanceService.scheduleRebalanceAgents();
              _agentLbHappened=true;
            }
 else {
              s_logger.trace("Not scheduling agent rebalancing task as the averages load " + load + " is less than the threshold "+ _connectedAgentsThreshold);
            }
          }
        }
      }
 catch (      CloudRuntimeException e) {
        s_logger.error("Runtime DB exception ",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error("Invalid cluster session found");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error("DB communication problem detected");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error("DB communication problem detected");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error("Problem with the cluster heartbeat!",e);
      }
 finally {
        txn.close("ClusterHeartBeat");
      }
    }
  }
;
}
