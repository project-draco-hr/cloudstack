{
  int nBytes=rfb.is.readInt();
  if (zlibBuf == null || zlibBufLen < nBytes) {
    zlibBufLen=nBytes * 2;
    zlibBuf=new byte[zlibBufLen];
  }
  rfb.readFully(zlibBuf,0,nBytes);
  if (rfb.rec != null && rfb.recordFromBeginning) {
    rfb.rec.writeIntBE(nBytes);
    rfb.rec.write(zlibBuf,0,nBytes);
  }
  if (zlibInflater == null) {
    zlibInflater=new Inflater();
  }
  zlibInflater.setInput(zlibBuf,0,nBytes);
  if (bytesPixel == 1) {
    for (int dy=y; dy < y + h; dy++) {
      zlibInflater.inflate(pixels8,dy * rfb.framebufferWidth + x,w);
      if (rfb.rec != null && !rfb.recordFromBeginning)       rfb.rec.write(pixels8,dy * rfb.framebufferWidth + x,w);
    }
  }
 else {
    byte[] buf=new byte[w * 4];
    int i, offset;
    for (int dy=y; dy < y + h; dy++) {
      zlibInflater.inflate(buf);
      offset=dy * rfb.framebufferWidth + x;
      for (i=0; i < w; i++) {
        pixels24[offset + i]=(buf[i * 4 + 2] & 0xFF) << 16 | (buf[i * 4 + 1] & 0xFF) << 8 | (buf[i * 4] & 0xFF);
      }
      if (rfb.rec != null && !rfb.recordFromBeginning)       rfb.rec.write(buf);
    }
  }
  handleUpdatedPixels(x,y,w,h);
  scheduleRepaint(x,y,w,h);
}
