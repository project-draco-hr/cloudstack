{
  when(_srcHostMock.getId()).thenReturn(5L);
  when(_destHostMock.getId()).thenReturn(6L);
  when(_hostDao.findById(5L)).thenReturn(_srcHostMock);
  when(_hostDao.findById(6L)).thenReturn(_destHostMock);
  when(_vmMock.getId()).thenReturn(1L);
  when(_vmMock.getHypervisorType()).thenReturn(HypervisorType.XenServer);
  when(_vmMock.getState()).thenReturn(State.Running).thenReturn(State.Running).thenReturn(State.Migrating).thenReturn(State.Migrating);
  when(_vmMock.getHostId()).thenReturn(5L);
  when(_vmInstance.getId()).thenReturn(1L);
  when(_vmInstance.getServiceOfferingId()).thenReturn(2L);
  when(_vmInstance.getInstanceName()).thenReturn("myVm");
  when(_vmInstance.getHostId()).thenReturn(5L);
  when(_vmInstance.getType()).thenReturn(VirtualMachine.Type.User);
  when(_vmInstance.getState()).thenReturn(State.Running).thenReturn(State.Running).thenReturn(State.Migrating).thenReturn(State.Migrating);
  when(_workDao.persist(any(ItWorkVO.class))).thenReturn(_work);
  when(_workDao.update("1",_work)).thenReturn(true);
  when(_work.getId()).thenReturn("1");
  doNothing().when(_work).setStep(ItWorkVO.Step.Done);
  _vmMgr._vmGurus=new HashMap<VirtualMachine.Type,VirtualMachineGuru>();
  Iterator<VolumeVO> volumeIterator=mock(Iterator.class);
  when(_volsDao.findUsableVolumesForInstance(anyLong())).thenReturn(_rootVols);
  when(_rootVols.iterator()).thenReturn(volumeIterator);
  when(volumeIterator.hasNext()).thenReturn(true,false);
  when(volumeIterator.next()).thenReturn(_volumeMock);
  when(_volumeMock.getDiskOfferingId()).thenReturn(5L);
  when(_volumeMock.getPoolId()).thenReturn(200L);
  when(_volumeMock.getId()).thenReturn(5L);
  when(_diskOfferingDao.findById(anyLong())).thenReturn(_diskOfferingMock);
  when(_storagePoolDao.findById(200L)).thenReturn(_srcStoragePoolMock);
  when(_storagePoolDao.findById(201L)).thenReturn(_destStoragePoolMock);
  when(_volumeToPoolMock.get(5L)).thenReturn(201L);
  when(_destStoragePoolMock.getId()).thenReturn(201L);
  when(_srcStoragePoolMock.getId()).thenReturn(200L);
  when(_destStoragePoolMock.isLocal()).thenReturn(false);
  when(_diskOfferingMock.getUseLocalStorage()).thenReturn(false);
  when(_poolHostDao.findByPoolHost(anyLong(),anyLong())).thenReturn(mock(StoragePoolHostVO.class));
  HypervisorGuru guruMock=mock(HypervisorGuru.class);
  when(_hvGuruMgr.getGuru(HypervisorType.XenServer)).thenReturn(guruMock);
  when(_srcHostMock.getClusterId()).thenReturn(3L);
  when(_destHostMock.getClusterId()).thenReturn(3L);
  PrepareForMigrationAnswer prepAnswerMock=mock(PrepareForMigrationAnswer.class);
  when(prepAnswerMock.getResult()).thenReturn(true);
  when(_agentMgr.send(anyLong(),isA(PrepareForMigrationCommand.class))).thenReturn(prepAnswerMock);
  MigrateWithStorageAnswer migAnswerMock=mock(MigrateWithStorageAnswer.class);
  when(migAnswerMock.getResult()).thenReturn(true);
  when(_agentMgr.send(anyLong(),isA(MigrateWithStorageCommand.class))).thenReturn(migAnswerMock);
  MigrateWithStorageReceiveAnswer migRecAnswerMock=mock(MigrateWithStorageReceiveAnswer.class);
  when(migRecAnswerMock.getResult()).thenReturn(true);
  when(_agentMgr.send(anyLong(),isA(MigrateWithStorageReceiveCommand.class))).thenReturn(migRecAnswerMock);
  MigrateWithStorageSendAnswer migSendAnswerMock=mock(MigrateWithStorageSendAnswer.class);
  when(migSendAnswerMock.getResult()).thenReturn(true);
  when(_agentMgr.send(anyLong(),isA(MigrateWithStorageSendCommand.class))).thenReturn(migSendAnswerMock);
  MigrateWithStorageCompleteAnswer migCompleteAnswerMock=mock(MigrateWithStorageCompleteAnswer.class);
  when(migCompleteAnswerMock.getResult()).thenReturn(true);
  when(_agentMgr.send(anyLong(),isA(MigrateWithStorageCompleteCommand.class))).thenReturn(migCompleteAnswerMock);
  CheckVirtualMachineAnswer checkVmAnswerMock=mock(CheckVirtualMachineAnswer.class);
  when(checkVmAnswerMock.getResult()).thenReturn(true);
  when(checkVmAnswerMock.getState()).thenReturn(PowerState.PowerOn);
  when(_agentMgr.send(anyLong(),isA(CheckVirtualMachineCommand.class))).thenReturn(checkVmAnswerMock);
  Pair<Long,Long> opaqueMock=new Pair<Long,Long>(_vmMock.getHostId(),_destHostMock.getId());
  when(_vmSnapshotMgr.hasActiveVMSnapshotTasks(anyLong())).thenReturn(false);
  when(_vmInstanceDao.updateState(State.Running,Event.MigrationRequested,State.Migrating,_vmMock,opaqueMock)).thenReturn(true);
  when(_vmInstanceDao.updateState(State.Migrating,Event.OperationSucceeded,State.Running,_vmMock,opaqueMock)).thenReturn(true);
}
