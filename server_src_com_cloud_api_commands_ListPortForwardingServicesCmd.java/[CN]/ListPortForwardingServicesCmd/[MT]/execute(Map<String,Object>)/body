{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  boolean isAdmin=false;
  Long accountId=null;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid domain id (" + domainId + ") given, unable to list port forwarding services.");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findAccountByName(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.ACCOUNTID,accountId);
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    if (isAdmin) {
      c.addCriteria(Criteria.DOMAINID,domainId);
    }
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.NAME,name);
  }
  List<SecurityGroupVO> groups=getManagementServer().searchForSecurityGroups(c);
  if (groups == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error searching for port forwarding services");
  }
  List<Pair<String,Object>> groupsTags=new ArrayList<Pair<String,Object>>();
  Object[] groupTag=new Object[groups.size()];
  int i=0;
  for (  SecurityGroupVO group : groups) {
    List<Pair<String,Object>> groupData=new ArrayList<Pair<String,Object>>();
    groupData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.valueOf(group.getId()).toString()));
    groupData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),group.getName()));
    groupData.add(new Pair<String,Object>(BaseCmd.Properties.DESCRIPTION.getName(),group.getDescription()));
    Account accountTemp=getManagementServer().findAccountById(group.getAccountId());
    if (accountTemp != null) {
      groupData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountTemp.getAccountName()));
      groupData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),accountTemp.getDomainId()));
      groupData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(accountTemp.getDomainId()).getName()));
    }
    groupTag[i++]=groupData;
  }
  Pair<String,Object> eventTag=new Pair<String,Object>("portforwardingservice",groupTag);
  groupsTags.add(eventTag);
  return groupsTags;
}
