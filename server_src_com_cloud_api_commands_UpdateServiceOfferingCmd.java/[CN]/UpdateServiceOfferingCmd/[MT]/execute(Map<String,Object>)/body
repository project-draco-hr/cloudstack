{
  Long offeringId=(Long)params.get(BaseCmd.Properties.ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String displayText=(String)params.get(BaseCmd.Properties.DISPLAY_TEXT.getName());
  Boolean offerHA=(Boolean)params.get(BaseCmd.Properties.OFFER_HA.getName());
  Boolean useVirtualNetwork=(Boolean)params.get(BaseCmd.Properties.USE_VIRTUAL_NETWORK.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  String tags=(String)params.get(BaseCmd.Properties.TAGS.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  ServiceOfferingVO offering=getManagementServer().findServiceOfferingById(offeringId);
  if (offering == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find service offering " + offeringId);
  }
  try {
    offering=getManagementServer().updateServiceOffering(userId,offeringId,name,displayText,offerHA,useVirtualNetwork,tags);
  }
 catch (  Exception ex) {
    s_logger.error("Exception updating service offering",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to update service offering " + offeringId + ":  internal error.");
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  if (offering != null) {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),offeringId.toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),offering.getName()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),offering.getDisplayText()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CPU_NUMBER.getName(),Integer.valueOf(offering.getCpu()).toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CPU_SPEED.getName(),Integer.valueOf(offering.getSpeed()).toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY.getName(),Integer.valueOf(offering.getRamSize()).toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(offering.getCreated())));
    String storageType=offering.getUseLocalStorage() ? "local" : "shared";
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE_TYPE.getName(),storageType));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.OFFER_HA.getName(),offering.getOfferHA()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.USE_VIRTUAL_NETWORK.getName(),(offering.getGuestIpType().equals(GuestIpType.Virtualized))));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),offering.getTags()));
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to update service offering " + offeringId);
  }
  return returnValues;
}
