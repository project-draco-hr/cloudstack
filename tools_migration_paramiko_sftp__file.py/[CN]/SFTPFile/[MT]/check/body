def check(self, hash_algorithm, offset=0, length=0, block_size=0):
    '\n        Ask the server for a hash of a section of this file.  This can be used\n        to verify a successful upload or download, or for various rsync-like\n        operations.\n        \n        The file is hashed from C{offset}, for C{length} bytes.  If C{length}\n        is 0, the remainder of the file is hashed.  Thus, if both C{offset}\n        and C{length} are zero, the entire file is hashed.\n        \n        Normally, C{block_size} will be 0 (the default), and this method will\n        return a byte string representing the requested hash (for example, a\n        string of length 16 for MD5, or 20 for SHA-1).  If a non-zero\n        C{block_size} is given, each chunk of the file (from C{offset} to\n        C{offset + length}) of C{block_size} bytes is computed as a separate\n        hash.  The hash results are all concatenated and returned as a single\n        string.\n        \n        For example, C{check(\'sha1\', 0, 1024, 512)} will return a string of\n        length 40.  The first 20 bytes will be the SHA-1 of the first 512 bytes\n        of the file, and the last 20 bytes will be the SHA-1 of the next 512\n        bytes.\n        \n        @param hash_algorithm: the name of the hash algorithm to use (normally\n            C{"sha1"} or C{"md5"})\n        @type hash_algorithm: str\n        @param offset: offset into the file to begin hashing (0 means to start\n            from the beginning)\n        @type offset: int or long\n        @param length: number of bytes to hash (0 means continue to the end of\n            the file)\n        @type length: int or long\n        @param block_size: number of bytes to hash per result (must not be less\n            than 256; 0 means to compute only one hash of the entire segment)\n        @type block_size: int\n        @return: string of bytes representing the hash of each block,\n            concatenated together\n        @rtype: str\n        \n        @note: Many (most?) servers don\'t support this extension yet.\n        \n        @raise IOError: if the server doesn\'t support the "check-file"\n            extension, or possibly doesn\'t support the hash algorithm\n            requested\n            \n        @since: 1.4\n        '
    (t, msg) = self.sftp._request(CMD_EXTENDED, 'check-file', self.handle, hash_algorithm, long(offset), long(length), block_size)
    ext = msg.get_string()
    alg = msg.get_string()
    data = msg.get_remainder()
    return data
