{
  final NiciraNvpApi niciraNvpApi=Mockito.mock(NiciraNvpApi.class);
  final LogicalRouterPort port1=Mockito.mock(LogicalRouterPort.class);
  final List<LogicalRouterPort> listPorts=new ArrayList<LogicalRouterPort>();
  listPorts.add(port1);
  final String logicalRouterUuid="d2e05a9e-7120-4487-a5fc-414ab36d9345";
  final String l3GatewayServiceUuid="d2e05a9e-7120-4487-a5fc-414ab36d9345";
  final List<String> publicCidrs=new ArrayList<String>();
  publicCidrs.add("10.1.1.0/24");
  final ConfigurePublicIpsOnLogicalRouterCommand command=new ConfigurePublicIpsOnLogicalRouterCommand(logicalRouterUuid,l3GatewayServiceUuid,publicCidrs);
  when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);
  try {
    when(niciraNvpApi.findLogicalRouterPortByGatewayServiceUuid(command.getLogicalRouterUuid(),command.getL3GatewayServiceUuid())).thenReturn(listPorts);
    doNothing().when(niciraNvpApi).updateLogicalRouterPort(command.getLogicalRouterUuid(),port1);
  }
 catch (  final NiciraNvpApiException e) {
    fail(e.getMessage());
  }
  final NiciraNvpRequestWrapper wrapper=NiciraNvpRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,niciraNvpResource);
  assertTrue(answer.getResult());
}
