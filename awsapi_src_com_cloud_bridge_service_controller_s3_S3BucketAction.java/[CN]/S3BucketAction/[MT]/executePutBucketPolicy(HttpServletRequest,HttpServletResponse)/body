{
  String bucketName=(String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY);
  String policy=streamToString(request.getInputStream());
  BucketPolicyDao policyDao=new BucketPolicyDao();
  SBucketDao bucketDao=new SBucketDao();
  SBucket bucket=bucketDao.getByName(bucketName);
  String owner=null;
  if (null != bucket) {
    owner=bucket.getOwnerCanonicalId();
  }
 else {
    try {
      owner=policyDao.getPolicyOwner(bucketName);
    }
 catch (    Exception e) {
    }
  }
  String client=UserContext.current().getCanonicalUserId();
  S3PolicyContext context=new S3PolicyContext(PolicyActions.PutBucketPolicy,bucketName);
switch (S3Engine.verifyPolicy(context)) {
case ALLOW:
    break;
case DEFAULT_DENY:
  if (null != owner && !client.equals(owner)) {
    response.setStatus(405);
    return;
  }
break;
case DENY:
response.setStatus(403);
return;
}
try {
PolicyParser parser=new PolicyParser();
S3BucketPolicy sbp=parser.parse(policy,bucketName);
policyDao.deletePolicy(bucketName);
if (null != policy && !policy.isEmpty()) policyDao.addPolicy(bucketName,client,policy);
if (null != sbp) ServiceProvider.getInstance().setBucketPolicy(bucketName,sbp);
response.setStatus(200);
}
 catch (PermissionDeniedException e) {
logger.error("Put Bucket Policy failed due to " + e.getMessage(),e);
throw e;
}
catch (ParseException e) {
logger.error("Put Bucket Policy failed due to " + e.getMessage(),e);
throw new PermissionDeniedException(e.toString());
}
catch (Exception e) {
logger.error("Put Bucket Policy failed due to " + e.getMessage(),e);
response.setStatus(500);
}
}
