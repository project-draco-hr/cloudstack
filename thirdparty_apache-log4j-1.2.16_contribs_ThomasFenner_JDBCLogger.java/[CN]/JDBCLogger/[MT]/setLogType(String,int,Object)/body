{
  if (!isconfigured)   throw new Exception("JDBCLogger::setLogType(), Not configured !");
  if (sql != null)   return;
  _name=_name.toUpperCase();
  if (_name == null || !(_name.trim().length() > 0))   throw new Exception("JDBCLogger::setLogType(), Missing argument name !");
  if (!LogType.isLogType(_logtype))   throw new Exception("JDBCLogger::setLogType(), Invalid logtype '" + _logtype + "' !");
  if ((_logtype != LogType.MSG && _logtype != LogType.EMPTY) && _value == null)   throw new Exception("JDBCLogger::setLogType(), Missing argument value !");
  LogColumn logcol;
  for (int i=0; i < num; i++) {
    logcol=(LogColumn)logcols.get(i);
    if (logcol.name.equals(_name)) {
      if (!logcol.isWritable)       throw new Exception("JDBCLogger::setLogType(), Column " + _name + " is not writeable !");
      if (_logtype == LogType.MSG) {
        logcol.logtype=_logtype;
        return;
      }
 else       if (_logtype == LogType.ID) {
        logcol.logtype=_logtype;
        try {
          logcol.idhandler=(JDBCIDHandler)_value;
        }
 catch (        Exception e) {
          try {
            logcol.idhandler=(JDBCIDHandler)(Class.forName((String)_value).newInstance());
          }
 catch (          Exception e2) {
            throw new Exception("JDBCLogger::setLogType(), Cannot cast value of class " + _value.getClass() + " to class JDBCIDHandler !");
          }
        }
        return;
      }
 else       if (_logtype == LogType.STATIC) {
        logcol.logtype=_logtype;
        logcol.value=_value;
        return;
      }
 else       if (_logtype == LogType.TIMESTAMP) {
        logcol.logtype=_logtype;
        return;
      }
 else       if (_logtype == LogType.EMPTY) {
        logcol.logtype=_logtype;
        logcol.ignore=true;
        return;
      }
    }
  }
}
