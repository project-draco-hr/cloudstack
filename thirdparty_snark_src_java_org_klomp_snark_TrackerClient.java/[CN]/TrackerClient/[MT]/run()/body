{
  String announce=meta.getAnnounce();
  String infoHash=urlencode(meta.getInfoHash());
  String peerID=urlencode(coordinator.getID());
  long uploaded=coordinator.getUploaded();
  long downloaded=coordinator.getDownloaded();
  long left=coordinator.getLeft();
  boolean completed=coordinator.completed();
  boolean started=false;
  try {
    int failures=0;
    while (!started && failures < MAX_FAILURE_COUNT) {
      try {
        TrackerInfo info=doRequest(announce,infoHash,peerID,uploaded,downloaded,left,STARTED_EVENT);
        Iterator it=info.getPeers().iterator();
        while (it.hasNext()) {
          coordinator.addPeer((Peer)it.next());
        }
        started=true;
      }
 catch (      IOException ioe) {
        log.log(Level.WARNING,"Could not contact tracker at '" + announce,ioe);
      }
      if (!started) {
        failures++;
        log.log(Level.FINER,"     Retrying in 5s...");
        try {
          Thread.sleep(5 * 1000);
        }
 catch (        InterruptedException interrupt) {
        }
      }
    }
    if (failures >= MAX_FAILURE_COUNT) {
      throw new IOException("Could not establish initial connection");
    }
    while (!stop) {
      try {
        Thread.sleep(SLEEP * 60 * 1000);
      }
 catch (      InterruptedException interrupt) {
      }
      if (stop) {
        break;
      }
      uploaded=coordinator.getUploaded();
      downloaded=coordinator.getDownloaded();
      left=coordinator.getLeft();
      String event;
      if (!completed && coordinator.completed()) {
        completed=true;
        event=COMPLETED_EVENT;
      }
 else {
        event=NO_EVENT;
      }
      if (event == COMPLETED_EVENT || coordinator.needPeers() || System.currentTimeMillis() > lastRequestTime + interval) {
        try {
          TrackerInfo info=doRequest(announce,infoHash,peerID,uploaded,downloaded,left,event);
          Iterator it=info.getPeers().iterator();
          while (it.hasNext()) {
            coordinator.addPeer((Peer)it.next());
          }
        }
 catch (        IOException ioe) {
          log.log(Level.WARNING,"Could not contact tracker at '" + announce,ioe);
        }
      }
    }
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,"Fatal exception in TrackerClient",t);
  }
 finally {
    try {
      if (started) {
        doRequest(announce,infoHash,peerID,uploaded,downloaded,left,STOPPED_EVENT);
      }
    }
 catch (    IOException ioe) {
    }
  }
}
