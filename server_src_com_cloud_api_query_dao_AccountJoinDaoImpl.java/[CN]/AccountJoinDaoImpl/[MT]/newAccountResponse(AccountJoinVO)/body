{
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getUuid());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainUuid());
  accountResponse.setDomainName(account.getDomainName());
  accountResponse.setState(account.getState().toString());
  accountResponse.setNetworkDomain(account.getNetworkDomain());
  accountResponse.setDefaultZone(account.getDataCenterUuid());
  accountResponse.setBytesReceived(account.getBytesReceived());
  accountResponse.setBytesSent(account.getBytesSent());
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getType(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? "Unlimited" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getType(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? "Unlimited" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? "Unlimited" : String.valueOf(ips);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getType(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? "Unlimited" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getType(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? "Unlimited" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getType(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? "Unlimited" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  accountResponse.setVmStopped(account.getVmStopped());
  accountResponse.setVmRunning(account.getVmRunning());
  long projectLimit=ApiDBUtils.findCorrectResourceLimit(account.getProjectLimit(),account.getType(),ResourceType.project);
  String projectLimitDisplay=(accountIsAdmin || projectLimit == -1) ? "Unlimited" : String.valueOf(projectLimit);
  long projectTotal=(account.getProjectTotal() == null) ? 0 : account.getProjectTotal();
  String projectAvail=(accountIsAdmin || projectLimit == -1) ? "Unlimited" : String.valueOf(projectLimit - projectTotal);
  accountResponse.setProjectLimit(projectLimitDisplay);
  accountResponse.setProjectTotal(projectTotal);
  accountResponse.setProjectAvailable(projectAvail);
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getType(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? "Unlimited" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? "Unlimited" : String.valueOf(networkLimit - networkTotal);
  accountResponse.setNetworkLimit(networkLimitDisplay);
  accountResponse.setNetworkTotal(networkTotal);
  accountResponse.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getType(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? "Unlimited" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? "Unlimited" : String.valueOf(vpcLimit - vpcTotal);
  accountResponse.setNetworkLimit(vpcLimitDisplay);
  accountResponse.setNetworkTotal(vpcTotal);
  accountResponse.setNetworkAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getType(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? "Unlimited" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? "Unlimited" : String.valueOf(cpuLimit - cpuTotal);
  accountResponse.setCpuLimit(cpuLimitDisplay);
  accountResponse.setCpuTotal(cpuTotal);
  accountResponse.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getType(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? "Unlimited" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? "Unlimited" : String.valueOf(memoryLimit - memoryTotal);
  accountResponse.setMemoryLimit(memoryLimitDisplay);
  accountResponse.setMemoryTotal(memoryTotal);
  accountResponse.setMemoryAvailable(memoryAvail);
  List<UserAccountJoinVO> usersForAccount=ApiDBUtils.findUserViewByAccountId(account.getId());
  List<UserResponse> userResponses=ViewResponseHelper.createUserResponse(usersForAccount.toArray(new UserAccountJoinVO[usersForAccount.size()]));
  accountResponse.setUsers(userResponses);
  accountResponse.setDetails(ApiDBUtils.getAccountDetails(account.getId()));
  accountResponse.setObjectName("account");
  accountResponse.setJobId(account.getJobUuid());
  accountResponse.setJobStatus(account.getJobStatus());
  return accountResponse;
}
