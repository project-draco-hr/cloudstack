{
  s_logger.info("Configure VmwareManagerImpl, manager name: " + name);
  if (!_configDao.isPremium()) {
    s_logger.error("Vmware component can only run under premium distribution");
    throw new ConfigurationException("Vmware component can only run under premium distribution");
  }
  _instance=_configDao.getValue(Config.InstanceName.key());
  if (_instance == null) {
    _instance="DEFAULT";
  }
  s_logger.info("VmwareManagerImpl config - instance.name: " + _instance);
  _mountParent=_configDao.getValue(Config.MountParent.key());
  if (_mountParent == null) {
    _mountParent=File.separator + "mnt";
  }
  if (_instance != null) {
    _mountParent=_mountParent + File.separator + _instance;
  }
  s_logger.info("VmwareManagerImpl config - _mountParent: " + _mountParent);
  String value=(String)params.get("scripts.timeout");
  _timeout=NumbersUtil.parseInt(value,1440) * 1000;
  _storage=(StorageLayer)params.get(StorageLayer.InstanceConfigKey);
  if (_storage == null) {
    _storage=new JavaStorageLayer();
    _storage.configure("StorageLayer",params);
  }
  value=_configDao.getValue(Config.VmwareCreateFullClone.key());
  if (value == null) {
    _fullCloneFlag=false;
  }
 else {
    _fullCloneFlag=Boolean.parseBoolean(value);
  }
  value=_configDao.getValue(Config.SetVmInternalNameUsingDisplayName.key());
  if (value == null) {
    _instanceNameFlag=false;
  }
 else {
    _instanceNameFlag=Boolean.parseBoolean(value);
  }
  _portsPerDvPortGroup=NumbersUtil.parseInt(_configDao.getValue(Config.VmwarePortsPerDVPortGroup.key()),_portsPerDvPortGroup);
  _serviceConsoleName=_configDao.getValue(Config.VmwareServiceConsole.key());
  if (_serviceConsoleName == null) {
    _serviceConsoleName="Service Console";
  }
  _managemetPortGroupName=_configDao.getValue(Config.VmwareManagementPortGroup.key());
  if (_managemetPortGroupName == null) {
    _managemetPortGroupName="Management Network";
  }
  _defaultSystemVmNicAdapterType=_configDao.getValue(Config.VmwareSystemVmNicDeviceType.key());
  if (_defaultSystemVmNicAdapterType == null) {
    _defaultSystemVmNicAdapterType=VirtualEthernetCardType.E1000.toString();
  }
  _additionalPortRangeStart=NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeStart.key()),59000);
  if (_additionalPortRangeStart > 65535) {
    s_logger.warn("Invalid port range start port (" + _additionalPortRangeStart + ") for additional VNC port allocation, reset it to default start port 59000");
    _additionalPortRangeStart=59000;
  }
  _additionalPortRangeSize=NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeSize.key()),1000);
  if (_additionalPortRangeSize < 0 || _additionalPortRangeStart + _additionalPortRangeSize > 65535) {
    s_logger.warn("Invalid port range size (" + _additionalPortRangeSize + " for range starts at "+ _additionalPortRangeStart);
    _additionalPortRangeSize=Math.min(1000,65535 - _additionalPortRangeStart);
  }
  _routerExtraPublicNics=NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()),2);
  _vCenterSessionTimeout=NumbersUtil.parseInt(_configDao.getValue(Config.VmwareVcenterSessionTimeout.key()),1200) * 1000;
  s_logger.info("VmwareManagerImpl config - vmware.vcenter.session.timeout: " + _vCenterSessionTimeout);
  _reserveCpu=_configDao.getValue(Config.VmwareReserveCpu.key());
  if (_reserveCpu == null || _reserveCpu.isEmpty()) {
    _reserveCpu="false";
  }
  _reserveMem=_configDao.getValue(Config.VmwareReserveMem.key());
  if (_reserveMem == null || _reserveMem.isEmpty()) {
    _reserveMem="false";
  }
  _recycleHungWorker=_configDao.getValue(Config.VmwareRecycleHungWorker.key());
  if (_recycleHungWorker == null || _recycleHungWorker.isEmpty()) {
    _recycleHungWorker="false";
  }
  _rootDiskController=_configDao.getValue(Config.VmwareRootDiskControllerType.key());
  if (_rootDiskController == null || _rootDiskController.isEmpty()) {
    _rootDiskController=DiskControllerType.ide.toString();
  }
  s_logger.info("Additional VNC port allocation range is settled at " + _additionalPortRangeStart + " to "+ (_additionalPortRangeStart + _additionalPortRangeSize));
  value=_configDao.getValue("vmware.host.scan.interval");
  _hostScanInterval=NumbersUtil.parseLong(value,DEFAULT_HOST_SCAN_INTERVAL);
  s_logger.info("VmwareManagerImpl config - vmware.host.scan.interval: " + _hostScanInterval);
  ((VmwareStorageManagerImpl)_storageMgr).configure(params);
  _agentMgr.registerForHostEvents(this,true,true,true);
  s_logger.info("VmwareManagerImpl has been successfully configured");
  return true;
}
