{
  if (serviceContext == null) {
    throw new CloudRuntimeException("Invalid serviceContext");
  }
  ManagedObjectReference mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject("privateTrafficLabel");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals("ComputeResource")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,"host");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getType().equals("ClusterComputeResource")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,"host");
      assert(hosts != null);
      if (hosts.size() > 0) {
        AboutInfo about=(AboutInfo)(serviceContext.getVimClient().getDynamicProperty(hosts.get(0),"config.product"));
        String version=about.getApiVersion();
        int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(HypervisorType.VMware,version);
        if (hosts.size() > maxHostsPerCluster) {
          String msg="Failed to add VMware cluster as size is too big, current size: " + hosts.size() + ", max. size: "+ maxHostsPerCluster;
          s_logger.error(msg);
          throw new DiscoveredWithErrorException(msg);
        }
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals("HostSystem")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error("Unsupport host type " + mor.getType() + ":"+ mor.getValue()+ " from inventory path: "+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error("Unable to find host from inventory path: " + hostInventoryPath);
  return null;
}
