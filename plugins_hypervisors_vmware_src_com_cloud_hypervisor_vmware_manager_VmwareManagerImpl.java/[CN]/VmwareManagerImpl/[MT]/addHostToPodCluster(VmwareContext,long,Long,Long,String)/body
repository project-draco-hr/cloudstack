{
  ManagedObjectReference mor=null;
  if (serviceContext != null)   mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject("privateTrafficLabel");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals("ComputeResource")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getServiceUtil().getDynamicProperty(mor,"host");
      assert(hosts != null);
      HostMO hostMo=new HostMO(serviceContext,hosts[0]);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts[0]);
      return returnedHostList;
    }
 else     if (mor.getType().equals("ClusterComputeResource")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getServiceUtil().getDynamicProperty(mor,"host");
      assert(hosts != null);
      if (hosts.length > _maxHostsPerCluster) {
        String msg="vCenter cluster size is too big (current configured cluster size: " + _maxHostsPerCluster + ")";
        s_logger.error(msg);
        throw new DiscoveredWithErrorException(msg);
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals("HostSystem")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error("Unsupport host type " + mor.getType() + ":"+ mor.get_value()+ " from inventory path: "+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error("Unable to find host from inventory path: " + hostInventoryPath);
  return null;
}
