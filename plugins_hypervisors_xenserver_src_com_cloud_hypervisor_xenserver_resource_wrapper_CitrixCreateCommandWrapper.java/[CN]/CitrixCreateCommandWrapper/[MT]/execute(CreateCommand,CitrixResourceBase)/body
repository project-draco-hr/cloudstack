{
  final Connection conn=citrixResourceBase.getConnection();
  final StorageFilerTO pool=command.getPool();
  final DiskProfile dskch=command.getDiskCharacteristics();
  VDI vdi=null;
  try {
    final SR poolSr=citrixResourceBase.getStorageRepository(conn,pool.getUuid());
    if (command.getTemplateUrl() != null) {
      VDI tmpltvdi=null;
      tmpltvdi=citrixResourceBase.getVDIbyUuid(conn,command.getTemplateUrl());
      vdi=tmpltvdi.createClone(conn,new HashMap<String,String>());
      vdi.setNameLabel(conn,dskch.getName());
    }
 else {
      final VDI.Record vdir=new VDI.Record();
      vdir.nameLabel=dskch.getName();
      vdir.SR=poolSr;
      vdir.type=Types.VdiType.USER;
      vdir.virtualSize=dskch.getSize();
      vdi=VDI.create(conn,vdir);
    }
    VDI.Record vdir;
    vdir=vdi.getRecord(conn);
    s_logger.debug("Succesfully created VDI for " + command + ".  Uuid = "+ vdir.uuid);
    final VolumeTO vol=new VolumeTO(command.getVolumeId(),dskch.getType(),pool.getType(),pool.getUuid(),vdir.nameLabel,pool.getPath(),vdir.uuid,vdir.virtualSize,null);
    return new CreateAnswer(command,vol);
  }
 catch (  final Exception e) {
    s_logger.warn("Unable to create volume; Pool=" + pool + "; Disk: "+ dskch,e);
    return new CreateAnswer(command,e);
  }
}
