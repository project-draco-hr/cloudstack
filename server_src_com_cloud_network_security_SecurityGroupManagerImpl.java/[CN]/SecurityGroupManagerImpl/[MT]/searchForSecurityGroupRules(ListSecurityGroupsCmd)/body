{
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long projectId=cmd.getProjectId();
  Long id=cmd.getId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (instanceId != null) {
    UserVmVO userVM=_userVMDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException("Unable to list network groups for virtual machine instance " + instanceId + "; instance not found.");
    }
    _accountMgr.checkAccess(caller,null,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue());
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      Domain domain=_domainMgr.getDomain(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException("Unable to find domain by id " + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account account=_accountMgr.getActiveAccountByName(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
        _accountMgr.checkAccess(caller,null,account);
        permittedAccounts.add(account.getId());
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  List<SecurityGroupRulesVO> securityRulesList=new ArrayList<SecurityGroupRulesVO>();
  Filter searchFilter=new Filter(SecurityGroupVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object keyword=cmd.getKeyword();
  SearchBuilder<SecurityGroupVO> sb=_securityGroupDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("accountId",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and("domainId",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (permittedAccounts.isEmpty() && instanceId == null && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<SecurityGroupVO> sc=sb.create();
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (securityGroup != null) {
    sc.setParameters("name",securityGroup);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters("accountId",permittedAccounts.toArray());
  }
  if (permittedAccounts.isEmpty() && instanceId == null && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupRulesVO> ssc=_securityGroupRulesDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("description",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  List<SecurityGroupVO> securityGroups=_securityGroupDao.search(sc,searchFilter);
  for (  SecurityGroupVO group : securityGroups) {
    securityRulesList.addAll(_securityGroupRulesDao.listSecurityRulesByGroupId(group.getId()));
  }
  return securityRulesList;
}
