{
  Map<PortAndProto,Set<String>> allowed=new TreeMap<PortAndProto,Set<String>>();
  List<SecurityGroupVMMapVO> groupsForVm=_securityGroupVMMapDao.listByInstanceId(userVmId);
  for (  SecurityGroupVMMapVO mapVO : groupsForVm) {
    List<EgressRuleVO> rules=_egressRuleDao.listBySecurityGroupId(mapVO.getSecurityGroupId());
    for (    EgressRuleVO rule : rules) {
      PortAndProto portAndProto=new PortAndProto(rule.getProtocol(),rule.getStartPort(),rule.getEndPort());
      Set<String> cidrs=allowed.get(portAndProto);
      if (cidrs == null) {
        cidrs=new TreeSet<String>(new CidrComparator());
      }
      if (rule.getAllowedNetworkId() != null) {
        List<SecurityGroupVMMapVO> allowedInstances=_securityGroupVMMapDao.listBySecurityGroup(rule.getAllowedNetworkId(),State.Running);
        for (        SecurityGroupVMMapVO ngmapVO : allowedInstances) {
          Nic defaultNic=_networkMgr.getDefaultNic(ngmapVO.getInstanceId());
          if (defaultNic != null) {
            String cidr=defaultNic.getIp4Address();
            cidr=cidr + "/32";
            cidrs.add(cidr);
          }
        }
      }
 else       if (rule.getAllowedDestinationIpCidr() != null) {
        cidrs.add(rule.getAllowedDestinationIpCidr());
      }
      if (cidrs.size() > 0) {
        allowed.put(portAndProto,cidrs);
      }
    }
  }
  return allowed;
}
