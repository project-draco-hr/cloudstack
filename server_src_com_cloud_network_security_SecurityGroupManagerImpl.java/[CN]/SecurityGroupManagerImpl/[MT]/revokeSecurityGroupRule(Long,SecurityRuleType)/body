{
  Account caller=CallContext.current().getCallingAccount();
  final SecurityGroupRuleVO rule=_securityGroupRuleDao.findById(id);
  if (rule == null) {
    s_logger.debug("Unable to find security rule with id " + id);
    throw new InvalidParameterValueException("Unable to find security rule with id " + id);
  }
  if (type != rule.getRuleType()) {
    s_logger.debug("Mismatch in rule type for security rule with id " + id);
    throw new InvalidParameterValueException("Mismatch in rule type for security rule with id " + id);
  }
  SecurityGroup securityGroup=_securityGroupDao.findById(rule.getSecurityGroupId());
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,securityGroup);
  long securityGroupId=rule.getSecurityGroupId();
  Boolean result=Transaction.execute(new TransactionCallback<Boolean>(){
    @Override public Boolean doInTransaction(    TransactionStatus status){
      SecurityGroupVO groupHandle=null;
      try {
        groupHandle=_securityGroupDao.acquireInLockTable(rule.getSecurityGroupId());
        if (groupHandle == null) {
          s_logger.warn("Could not acquire lock on security group id: " + rule.getSecurityGroupId());
          return false;
        }
        _securityGroupRuleDao.remove(id);
        s_logger.debug("revokeSecurityGroupRule succeeded for security rule id: " + id);
        return true;
      }
 catch (      Exception e) {
        s_logger.warn("Exception caught when deleting security rules ",e);
        throw new CloudRuntimeException("Exception caught when deleting security rules",e);
      }
 finally {
        if (groupHandle != null) {
          _securityGroupDao.releaseFromLockTable(groupHandle.getId());
        }
      }
    }
  }
);
  try {
    final ArrayList<Long> affectedVms=new ArrayList<Long>();
    affectedVms.addAll(_securityGroupVMMapDao.listVmIdsBySecurityGroup(securityGroupId));
    scheduleRulesetUpdateToHosts(affectedVms,true,null);
  }
 catch (  Exception e) {
    s_logger.debug("Can't update rules for host, ignore",e);
  }
  return result;
}
