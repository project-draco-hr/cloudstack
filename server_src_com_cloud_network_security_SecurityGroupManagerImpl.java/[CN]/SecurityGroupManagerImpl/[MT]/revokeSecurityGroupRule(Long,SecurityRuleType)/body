{
  Account caller=UserContext.current().getCaller();
  SecurityGroupRuleVO rule=_securityGroupRuleDao.findById(id);
  if (rule == null) {
    s_logger.debug("Unable to find security rule with id " + id);
    throw new InvalidParameterValueException("Unable to find security rule with id " + id);
  }
  if (type != rule.getRuleType()) {
    s_logger.debug("Mismatch in rule type for security rule with id " + id);
    throw new InvalidParameterValueException("Mismatch in rule type for security rule with id " + id);
  }
  SecurityGroup securityGroup=_securityGroupDao.findById(rule.getSecurityGroupId());
  _accountMgr.checkAccess(caller,null,securityGroup);
  SecurityGroupVO groupHandle=null;
  final Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    groupHandle=_securityGroupDao.acquireInLockTable(rule.getSecurityGroupId());
    if (groupHandle == null) {
      s_logger.warn("Could not acquire lock on security group id: " + rule.getSecurityGroupId());
      return false;
    }
    _securityGroupRuleDao.remove(id);
    s_logger.debug("revokeSecurityGroupIngress succeeded for security rule id: " + id);
    final ArrayList<Long> affectedVms=new ArrayList<Long>();
    affectedVms.addAll(_securityGroupVMMapDao.listVmIdsBySecurityGroup(groupHandle.getId()));
    scheduleRulesetUpdateToHosts(affectedVms,true,null);
    return true;
  }
 catch (  Exception e) {
    s_logger.warn("Exception caught when deleting security rules ",e);
    throw new CloudRuntimeException("Exception caught when deleting security rules",e);
  }
 finally {
    if (groupHandle != null) {
      _securityGroupDao.releaseFromLockTable(groupHandle.getId());
    }
    txn.commit();
  }
}
