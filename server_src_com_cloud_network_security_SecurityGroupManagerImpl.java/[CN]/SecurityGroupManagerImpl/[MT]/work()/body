{
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Checking the database");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Security Group work: no work found");
    }
    return;
  }
  Long userVmId=work.getInstanceId();
  if (work.getStep() == Step.Done) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Security Group work: found a job in done state, rescheduling for vm: " + userVmId);
    }
    Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.add(userVmId);
    scheduleRulesetUpdateToHosts(affectedVms,true,_timeBetweenCleanups * 1000l);
  }
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug("Working on " + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  boolean locked=false;
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      vm=_userVMDao.findById(work.getInstanceId());
      if (vm == null) {
        s_logger.info("VM " + work.getInstanceId() + " is removed");
        locked=true;
        return;
      }
      s_logger.warn("Unable to acquire lock on vm id=" + userVmId);
      return;
    }
    locked=true;
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn("Cannot find log record for vm id=" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> ingressRules=generateIngressRulesForVM(userVmId);
      Map<PortAndProto,Set<String>> egressRules=generateEgressRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd ingressCmd=generateIngressRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(ingressRules),seqnum,ingressRules);
        Commands ingressCmds=new Commands(ingressCmd);
        try {
          _agentMgr.send(agentId,ingressCmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug("Unable to send updates for vm: " + userVmId + "(agentid="+ agentId+ ")");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
        SecurityEgressRulesCmd cmd=generateEgressRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(egressRules),seqnum,egressRules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug("Unable to send updates for vm: " + userVmId + "(agentid="+ agentId+ ")");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (locked) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}
