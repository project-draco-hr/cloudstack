{
  final Long groupId=cmd.getId();
  Account caller=CallContext.current().getCallingAccount();
  SecurityGroupVO group=_securityGroupDao.findById(groupId);
  if (group == null) {
    throw new InvalidParameterValueException("Unable to find network group: " + groupId + "; failed to delete group.");
  }
  _accountMgr.checkAccess(caller,null,true,group);
  return Transaction.execute(new TransactionCallbackWithException<Boolean,ResourceInUseException>(){
    @Override public Boolean doInTransaction(    TransactionStatus status) throws ResourceInUseException {
      SecurityGroupVO group=_securityGroupDao.lockRow(groupId,true);
      if (group == null) {
        throw new InvalidParameterValueException("Unable to find security group by id " + groupId);
      }
      if (group.getName().equalsIgnoreCase(SecurityGroupManager.DEFAULT_GROUP_NAME)) {
        throw new InvalidParameterValueException("The network group default is reserved");
      }
      List<SecurityGroupRuleVO> allowingRules=_securityGroupRuleDao.listByAllowedSecurityGroupId(groupId);
      List<SecurityGroupVMMapVO> securityGroupVmMap=_securityGroupVMMapDao.listBySecurityGroup(groupId);
      if (!allowingRules.isEmpty()) {
        throw new ResourceInUseException("Cannot delete group when there are security rules that allow this group");
      }
 else       if (!securityGroupVmMap.isEmpty()) {
        throw new ResourceInUseException("Cannot delete group when it's in use by virtual machines");
      }
      _securityGroupDao.expunge(groupId);
      s_logger.debug("Deleted security group id=" + groupId);
      return true;
    }
  }
);
}
