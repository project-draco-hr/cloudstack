{
  String name=cmd.getSecurityGroupName();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account account=UserContext.current().getAccount();
  if (!_enabled) {
    return true;
  }
  Long accountId=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((accountName != null) && (domainId != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Unable to find rules network group " + name + ", permission denied.");
        }
        throw new PermissionDeniedException("Unable to network group " + name + ", permission denied.");
      }
      Account groupOwner=_accountDao.findActiveAccount(accountName,domainId);
      if (groupOwner == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
      }
      accountId=groupOwner.getId();
    }
 else {
      if (account != null) {
        accountId=account.getId();
        domainId=account.getDomainId();
      }
    }
  }
 else {
    if (account != null) {
      accountId=account.getId();
      domainId=account.getDomainId();
    }
  }
  if (accountId == null) {
    throw new InvalidParameterValueException("Unable to find account for network group " + name + "; failed to delete group.");
  }
  SecurityGroupVO sg=_securityGroupDao.findByAccountAndName(accountId,name);
  if (sg == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find network group " + name + "; failed to delete group.");
  }
  Long groupId=sg.getId();
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  final SecurityGroupVO group=_securityGroupDao.lockRow(groupId,true);
  if (group == null) {
    s_logger.info("Not deleting group -- cannot find id " + groupId);
    return false;
  }
  if (group.getName().equalsIgnoreCase(SecurityGroupManager.DEFAULT_GROUP_NAME)) {
    txn.rollback();
    throw new PermissionDeniedException("The network group default is reserved");
  }
  List<IngressRuleVO> allowingRules=_ingressRuleDao.listByAllowedSecurityGroupId(groupId);
  if (allowingRules.size() != 0) {
    txn.rollback();
    throw new ResourceInUseException("Cannot delete group when there are ingress rules that allow this group");
  }
  List<IngressRuleVO> rulesInGroup=_ingressRuleDao.listBySecurityGroupId(groupId);
  if (rulesInGroup.size() != 0) {
    txn.rollback();
    throw new ResourceInUseException("Cannot delete group when there are ingress rules in this group");
  }
  _securityGroupDao.expunge(groupId);
  txn.commit();
  return true;
}
