{
  if (_mshostDao != null)   return;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  _manager=locator.getManager(ClusterManager.class);
  if (_manager == null)   throw new ConfigurationException("Unable to get " + ClusterManager.class.getName());
  _mshostDao=locator.getDao(ManagementServerHostDao.class);
  if (_mshostDao == null)   throw new ConfigurationException("Unable to get " + ManagementServerHostDao.class.getName());
  if (_mshostDao == null)   throw new ConfigurationException("Unable to get " + ManagementServerHostDao.class.getName());
  _configDao=locator.getDao(ConfigurationDao.class);
  if (_configDao == null)   throw new ConfigurationException("Unable to get " + ConfigurationDao.class.getName());
  String value=_configDao.getValue(Config.ClusterMessageTimeOutSeconds.key());
  _clusterRequestTimeoutSeconds=NumbersUtil.parseInt(value,DEFAULT_REQUEST_TIMEOUT);
  s_logger.info("Configure cluster request time out. timeout: " + _clusterRequestTimeoutSeconds + " seconds");
  File dbPropsFile=PropertiesUtil.findConfigFile("db.properties");
  Properties dbProps=new Properties();
  try {
    dbProps.load(new FileInputStream(dbPropsFile));
  }
 catch (  FileNotFoundException e) {
    throw new ConfigurationException("Unable to find db.properties");
  }
catch (  IOException e) {
    throw new ConfigurationException("Unable to load db.properties content");
  }
  _clusterServicePort=NumbersUtil.parseInt(dbProps.getProperty("cluster.servlet.port"),DEFAULT_SERVICE_PORT);
  if (s_logger.isInfoEnabled())   s_logger.info("Cluster servlet port : " + _clusterServicePort);
}
