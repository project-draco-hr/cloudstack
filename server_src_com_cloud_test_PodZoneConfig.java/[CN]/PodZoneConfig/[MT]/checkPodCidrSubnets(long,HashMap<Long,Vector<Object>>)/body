{
  String zoneName=PodZoneConfig.getZoneName(dcId);
  for (  Long podId : currentPodCidrSubnets.keySet()) {
    String podName;
    if (podId.longValue() == -1)     podName="newPod";
 else     podName=PodZoneConfig.getPodName(podId.longValue(),dcId);
    Vector<Object> cidrPair=currentPodCidrSubnets.get(podId);
    String cidrAddress=(String)cidrPair.get(0);
    long cidrSize=((Long)cidrPair.get(1)).longValue();
    long cidrSizeToUse=-1;
    cidrSizeToUse=cidrSize;
    String cidrSubnet=NetUtils.getCidrSubNet(cidrAddress,cidrSizeToUse);
    for (    Long otherPodId : currentPodCidrSubnets.keySet()) {
      if (podId.equals(otherPodId))       continue;
      Vector<Object> otherCidrPair=currentPodCidrSubnets.get(otherPodId);
      String otherCidrAddress=(String)otherCidrPair.get(0);
      long otherCidrSize=((Long)otherCidrPair.get(1)).longValue();
      if (cidrSize < otherCidrSize)       cidrSizeToUse=cidrSize;
 else       cidrSizeToUse=otherCidrSize;
      cidrSubnet=NetUtils.getCidrSubNet(cidrAddress,cidrSizeToUse);
      String otherCidrSubnet=NetUtils.getCidrSubNet(otherCidrAddress,cidrSizeToUse);
      if (cidrSubnet.equals(otherCidrSubnet)) {
        String otherPodName=PodZoneConfig.getPodName(otherPodId.longValue(),dcId);
        if (podName.equals("newPod")) {
          return "The subnet of the pod you are adding conflicts with the subnet of pod " + otherPodName + " in zone "+ zoneName+ ". Please specify a different CIDR.";
        }
 else {
          return "Warning: The pods " + podName + " and "+ otherPodName+ " in zone "+ zoneName+ " have conflicting CIDR subnets. Please change the CIDR of one of these pods.";
        }
      }
    }
  }
  return "success";
}
