{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource PrepareForMigrationCommand: " + _gson.toJson(cmd));
  }
  VirtualMachineTO vm=cmd.getVirtualMachine();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Preparing host for migrating " + vm);
  }
  final String vmName=vm.getName();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
    VmwareManager mgr=hyperHost.getContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    VirtualMachineMO vmMo=hyperHost.findVmOnPeerHyperHost(vmName);
    if (vmMo == null) {
      s_logger.info("VM " + vmName + " was not found in the cluster of host "+ hyperHost.getHyperHostName()+ ". Looking for the VM in datacenter.");
      ManagedObjectReference dcMor=hyperHost.getHyperHostDatacenter();
      DatacenterMO dcMo=new DatacenterMO(hyperHost.getContext(),dcMor);
      vmMo=dcMo.findVm(vmName);
      if (vmMo == null) {
        String msg="VM " + vmName + " does not exist in VMware datacenter";
        s_logger.error(msg);
        throw new Exception(msg);
      }
    }
    NicTO[] nics=vm.getNics();
    for (    NicTO nic : nics) {
      prepareNetworkFromNicInfo(new HostMO(getServiceContext(),_morHyperHost),nic,false,cmd.getVirtualMachine().getType());
    }
    Pair<String,Long> secStoreUrlAndId=mgr.getSecondaryStorageStoreUrlAndId(Long.parseLong(_dcId));
    String secStoreUrl=secStoreUrlAndId.first();
    Long secStoreId=secStoreUrlAndId.second();
    if (secStoreUrl == null) {
      String msg="secondary storage for dc " + _dcId + " is not ready yet?";
      throw new Exception(msg);
    }
    mgr.prepareSecondaryStorageStore(secStoreUrl,secStoreId);
    ManagedObjectReference morSecDs=prepareSecondaryDatastoreOnHost(secStoreUrl);
    if (morSecDs == null) {
      String msg="Failed to prepare secondary storage on host, secondary store url: " + secStoreUrl;
      throw new Exception(msg);
    }
    return new PrepareForMigrationAnswer(cmd);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn("Encounter remote exception to vCenter, invalidate VMware session context");
      invalidateServiceContext();
    }
    String msg="Unexcpeted exception " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new PrepareForMigrationAnswer(cmd,msg);
  }
}
