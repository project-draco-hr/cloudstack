{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource PlugNicCommand " + _gson.toJson(cmd));
  }
  getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    String vmName=cmd.getVmName();
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      if (hyperHost instanceof HostMO) {
        ClusterMO clusterMo=new ClusterMO(hyperHost.getContext(),((HostMO)hyperHost).getParentMor());
        vmMo=clusterMo.findVmOnHyperHost(vmName);
      }
    }
    if (vmMo == null) {
      String msg="Router " + vmName + " no longer exists to execute PlugNic command";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    VirtualEthernetCardType nicDeviceType=VirtualEthernetCardType.E1000;
    VirtualDevice[] nicDevices=vmMo.getNicDevices();
    int deviceNumber=-1;
    for (    VirtualDevice device : nicDevices) {
      if (device.getUnitNumber() > deviceNumber)       deviceNumber=device.getUnitNumber();
    }
    deviceNumber++;
    NicTO nicTo=cmd.getNic();
    VirtualDevice nic;
    Pair<ManagedObjectReference,String> networkInfo=prepareNetworkFromNicInfo(vmMo.getRunningHost(),nicTo,false,cmd.getVMType());
    if (VmwareHelper.isDvPortGroup(networkInfo.first())) {
      String dvSwitchUuid;
      ManagedObjectReference dcMor=hyperHost.getHyperHostDatacenter();
      DatacenterMO dataCenterMo=new DatacenterMO(context,dcMor);
      ManagedObjectReference dvsMor=dataCenterMo.getDvSwitchMor(networkInfo.first());
      dvSwitchUuid=dataCenterMo.getDvSwitchUuid(dvsMor);
      s_logger.info("Preparing NIC device on dvSwitch : " + dvSwitchUuid);
      nic=VmwareHelper.prepareDvNicDevice(vmMo,networkInfo.first(),nicDeviceType,networkInfo.second(),dvSwitchUuid,nicTo.getMac(),deviceNumber,deviceNumber + 1,true,true);
    }
 else {
      s_logger.info("Preparing NIC device on network " + networkInfo.second());
      nic=VmwareHelper.prepareNicDevice(vmMo,networkInfo.first(),nicDeviceType,networkInfo.second(),nicTo.getMac(),deviceNumber,deviceNumber + 1,true,true);
    }
    VirtualMachineConfigSpec vmConfigSpec=new VirtualMachineConfigSpec();
    VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
    deviceConfigSpec.setDevice(nic);
    deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
    vmConfigSpec.getDeviceChange().add(deviceConfigSpec);
    setNuageVspVrIpInExtraConfig(vmConfigSpec.getExtraConfig(),nicTo);
    if (!vmMo.configureVm(vmConfigSpec)) {
      throw new Exception("Failed to configure devices when running PlugNicCommand");
    }
    return new PlugNicAnswer(cmd,true,"success");
  }
 catch (  Exception e) {
    s_logger.error("Unexpected exception: ",e);
    return new PlugNicAnswer(cmd,false,"Unable to execute PlugNicCommand due to " + e.toString());
  }
}
