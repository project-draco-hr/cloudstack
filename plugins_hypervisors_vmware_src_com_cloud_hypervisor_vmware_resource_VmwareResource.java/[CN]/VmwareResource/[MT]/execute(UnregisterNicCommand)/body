{
  s_logger.info("Executing resource UnregisterNicCommand: " + _gson.toJson(cmd));
  if (_guestTrafficInfo == null) {
    return new Answer(cmd,false,"No Guest Traffic Info found, unable to determine where to clean up");
  }
  try {
    if (_guestTrafficInfo.getVirtualSwitchType() != VirtualSwitchType.StandardVirtualSwitch) {
      return new Answer(cmd,true,"Nothing to do");
    }
    s_logger.debug("Cleaning up portgroup " + cmd.getNicUuid() + " on switch "+ _guestTrafficInfo.getVirtualSwitchName());
    VmwareContext context=getServiceContext();
    VmwareHypervisorHost host=getHyperHost(context);
    ManagedObjectReference clusterMO=host.getHyperHostCluster();
    @SuppressWarnings("unchecked") List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)context.getVimClient().getDynamicProperty(clusterMO,"host");
    if (hosts == null) {
      return new Answer(cmd,false,"No hosts in cluster, which is pretty weird");
    }
    for (    ManagedObjectReference hostMOR : hosts) {
      HostMO hostMo=new HostMO(context,hostMOR);
      hostMo.deletePortGroup(cmd.getNicUuid().toString());
      s_logger.debug("Removed portgroup " + cmd.getNicUuid() + " from host "+ hostMo.getHostName());
    }
    return new Answer(cmd,true,"Unregistered resources for NIC " + cmd.getNicUuid());
  }
 catch (  Exception e) {
    if (e instanceof RemoteException) {
      s_logger.warn("Encounter remote exception to vCenter, invalidate VMware session context");
      invalidateServiceContext();
    }
    String msg="UnregisterVMCommand failed due to " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg);
    return new Answer(cmd,false,msg);
  }
}
