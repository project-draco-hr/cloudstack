{
  VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String controlIp=getRouterSshControlIp(cmd);
  assert(controlIp != null);
  LoadBalancerConfigurator cfgtr=new HAProxyConfigurator();
  String[] config=cfgtr.generateConfiguration(cmd);
  String tmpCfgFileContents="";
  String tmpCfgFileName="haproxy.cfg.new";
  String tmpCfgFilePath="/etc/haproxy/";
  for (int i=0; i < config.length; i++) {
    tmpCfgFileContents+=config[i];
    tmpCfgFileContents+="\n";
  }
  if (!createFileInVR(controlIp,tmpCfgFilePath,tmpCfgFileName,tmpCfgFileContents)) {
    return new Answer(cmd,false,"Fail to create LB config file in VR");
  }
  try {
    String[][] rules=cfgtr.generateFwRules(cmd);
    String[] addRules=rules[LoadBalancerConfigurator.ADD];
    String[] removeRules=rules[LoadBalancerConfigurator.REMOVE];
    String[] statRules=rules[LoadBalancerConfigurator.STATS];
    String args="";
    StringBuilder sb=new StringBuilder();
    if (addRules.length > 0) {
      for (int i=0; i < addRules.length; i++) {
        sb.append(addRules[i]).append(',');
      }
      args+=" -a " + sb.toString();
    }
    sb=new StringBuilder();
    if (removeRules.length > 0) {
      for (int i=0; i < removeRules.length; i++) {
        sb.append(removeRules[i]).append(',');
      }
      args+=" -d " + sb.toString();
    }
    sb=new StringBuilder();
    if (statRules.length > 0) {
      for (int i=0; i < statRules.length; i++) {
        sb.append(statRules[i]).append(',');
      }
      args+=" -s " + sb.toString();
    }
    Pair<Boolean,String> result;
    if (cmd.getVpcId() == null) {
      args=" -i " + routerIp + args;
      result=SshHelper.sshExecute(controlIp,DefaultDomRSshPort,"root",mgr.getSystemVMKeyFile(),null,"/opt/cloud/bin/loadbalancer.sh " + args);
    }
 else {
      args=" -i " + cmd.getNic().getIp() + args;
      result=SshHelper.sshExecute(controlIp,DefaultDomRSshPort,"root",mgr.getSystemVMKeyFile(),null,"/opt/cloud/bin/vpc_loadbalancer.sh " + args);
    }
    if (!result.first()) {
      String msg="LoadBalancerConfigCommand on domain router " + routerIp + " failed. message: "+ result.second();
      s_logger.error(msg);
      return new Answer(cmd,false,msg);
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info("LoadBalancerConfigCommand on domain router " + routerIp + " completed");
    }
    return new Answer(cmd);
  }
 catch (  Throwable e) {
    s_logger.error("Unexpected exception: " + e.toString(),e);
    return new Answer(cmd,false,"LoadBalancerConfigCommand failed due to " + VmwareHelper.getExceptionMessage(e));
  }
}
