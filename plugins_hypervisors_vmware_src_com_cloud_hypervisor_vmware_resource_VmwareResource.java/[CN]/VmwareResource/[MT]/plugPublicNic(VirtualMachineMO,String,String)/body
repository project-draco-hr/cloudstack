{
  Pair<ManagedObjectReference,String> networkInfo=null;
  VirtualSwitchType vSwitchType=VirtualSwitchType.StandardVirtualSwitch;
  if (_publicTrafficInfo != null) {
    vSwitchType=_publicTrafficInfo.getVirtualSwitchType();
  }
  if (VirtualSwitchType.StandardVirtualSwitch == vSwitchType) {
    networkInfo=HypervisorHostHelper.prepareNetwork(this._publicTrafficInfo.getVirtualSwitchName(),"cloud.public",vmMo.getRunningHost(),vlanId,null,null,this._ops_timeout,true);
  }
 else {
    networkInfo=HypervisorHostHelper.prepareNetwork(this._publicTrafficInfo.getVirtualSwitchName(),"cloud.public",vmMo.getRunningHost(),vlanId,null,null,this._ops_timeout,vSwitchType,_portsPerDvPortGroup,null,false);
  }
  int nicIndex=allocPublicNicIndex(vmMo);
  try {
    VirtualDevice[] nicDevices=vmMo.getNicDevices();
    VirtualEthernetCard device=(VirtualEthernetCard)nicDevices[nicIndex];
    if (VirtualSwitchType.StandardVirtualSwitch == vSwitchType) {
      VirtualEthernetCardNetworkBackingInfo nicBacking=new VirtualEthernetCardNetworkBackingInfo();
      nicBacking.setDeviceName(networkInfo.second());
      nicBacking.setNetwork(networkInfo.first());
      device.setBacking(nicBacking);
    }
 else {
      HostMO hostMo=vmMo.getRunningHost();
      DatacenterMO dataCenterMo=new DatacenterMO(hostMo.getContext(),hostMo.getHyperHostDatacenter());
      device.setBacking(dataCenterMo.getDvPortBackingInfo(networkInfo));
    }
    VirtualMachineConfigSpec vmConfigSpec=new VirtualMachineConfigSpec();
    VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
    deviceConfigSpec.setDevice(device);
    deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.EDIT);
    vmConfigSpec.getDeviceChange().add(deviceConfigSpec);
    if (!vmMo.configureVm(vmConfigSpec)) {
      throw new Exception("Failed to configure devices when plugPublicNic");
    }
  }
 catch (  Exception e) {
    String nicMasksStr=vmMo.getCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK);
    int nicMasks=Integer.parseInt(nicMasksStr);
    nicMasks&=~(1 << nicIndex);
    vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK,String.valueOf(nicMasks));
    throw e;
  }
}
