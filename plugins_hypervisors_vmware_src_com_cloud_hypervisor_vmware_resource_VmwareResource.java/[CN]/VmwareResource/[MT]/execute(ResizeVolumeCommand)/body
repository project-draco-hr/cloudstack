{
  String path=cmd.getPath();
  String vmName=cmd.getInstanceName();
  long newSize=cmd.getNewSize() / 1024;
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
    ManagedObjectReference morDc=hyperHost.getHyperHostDatacenter();
    VirtualMachineMO vmMo=hyperHost.findVmOnPeerHyperHost(vmName);
    if (vmMo == null) {
      String msg="VM " + vmName + " does not exist in VMware datacenter";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    Pair<VirtualDisk,String> vdisk=vmMo.getDiskDevice(path,false);
    if (vdisk == null) {
      if (s_logger.isTraceEnabled())       s_logger.trace("resize volume done (failed)");
      throw new Exception("No such disk device: " + path);
    }
    VirtualDisk disk=vdisk.first();
    long oldSize=disk.getCapacityInKB();
    if (newSize < oldSize) {
      throw new Exception("VMware doesn't support shrinking volume from larger size: " + oldSize + " MB to a smaller size: "+ newSize+ " MB");
    }
 else     if (newSize == oldSize) {
      return new ResizeVolumeAnswer(cmd,true,"success",newSize * 1024);
    }
    disk.setCapacityInKB(newSize);
    VirtualMachineConfigSpec vmConfigSpec=new VirtualMachineConfigSpec();
    VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
    deviceConfigSpec.setDevice(disk);
    deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.EDIT);
    vmConfigSpec.getDeviceChange().add(deviceConfigSpec);
    if (!vmMo.configureVm(vmConfigSpec)) {
      throw new Exception("Failed to configure VM to resize disk. vmName: " + vmName);
    }
    return new ResizeVolumeAnswer(cmd,true,"success",newSize * 1024);
  }
 catch (  Exception e) {
    s_logger.error("Unable to resize volume",e);
    String error="failed to resize volume:" + e;
    return new ResizeVolumeAnswer(cmd,false,error);
  }
}
