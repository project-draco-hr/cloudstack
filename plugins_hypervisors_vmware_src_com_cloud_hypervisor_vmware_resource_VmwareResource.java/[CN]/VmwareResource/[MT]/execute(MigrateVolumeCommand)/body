{
  String volumePath=cmd.getVolumePath();
  StorageFilerTO poolTo=cmd.getPool();
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource MigrateVolumeCommand: " + _gson.toJson(cmd));
  }
  final String vmName=cmd.getAttachedVmName();
  VirtualMachineMO vmMo=null;
  VmwareHypervisorHost srcHyperHost=null;
  ManagedObjectReference morDs=null;
  ManagedObjectReference morDc=null;
  VirtualMachineRelocateSpec relocateSpec=new VirtualMachineRelocateSpec();
  List<VirtualMachineRelocateSpecDiskLocator> diskLocators=new ArrayList<VirtualMachineRelocateSpecDiskLocator>();
  VirtualMachineRelocateSpecDiskLocator diskLocator=null;
  String srcDiskName="";
  String tgtDsName="";
  try {
    srcHyperHost=getHyperHost(getServiceContext());
    morDc=srcHyperHost.getHyperHostDatacenter();
    tgtDsName=poolTo.getUuid().replace("-","");
    DatacenterMO dcMo=new DatacenterMO(getServiceContext(),morDc);
    vmMo=dcMo.findVm(vmName);
    if (vmMo == null) {
      String msg="VM " + vmName + " does not exist in VMware datacenter "+ morDc.getValue();
      s_logger.error(msg);
      throw new Exception(msg);
    }
    morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(srcHyperHost,tgtDsName);
    if (morDs == null) {
      String msg="Unable to find the mounted datastore with name " + tgtDsName + " to execute MigrateVolumeCommand";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    srcDiskName=VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(new DatastoreMO(srcHyperHost.getContext(),morDs),vmName,volumePath + ".vmdk");
    diskLocator=new VirtualMachineRelocateSpecDiskLocator();
    diskLocator.setDatastore(morDs);
    diskLocator.setDiskId(getVirtualDiskInfo(vmMo,volumePath + ".vmdk"));
    diskLocators.add(diskLocator);
    relocateSpec.getDisk().add(diskLocator);
    if (!vmMo.changeDatastore(relocateSpec)) {
      throw new Exception("Change datastore operation failed during volume migration");
    }
 else {
      s_logger.debug("Successfully migrated volume " + volumePath + " to target datastore "+ tgtDsName);
    }
    return new MigrateVolumeAnswer(cmd,true,null,volumePath);
  }
 catch (  Exception e) {
    String msg="Catch Exception " + e.getClass().getName() + " due to "+ e.toString();
    s_logger.error(msg,e);
    return new MigrateVolumeAnswer(cmd,false,msg,null);
  }
}
