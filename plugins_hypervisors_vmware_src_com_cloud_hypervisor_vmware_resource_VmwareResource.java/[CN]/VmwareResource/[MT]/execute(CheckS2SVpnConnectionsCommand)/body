{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Executing resource CheckS2SVpnConnectionsCommand: " + _gson.toJson(cmd));
    s_logger.debug("Run command on domR " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + ", /opt/cloud/bin/checkbatchs2svpn.sh ");
  }
  Pair<Boolean,String> result;
  try {
    VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    String controlIp=getRouterSshControlIp(cmd);
    result=SshHelper.sshExecute(controlIp,DEFAULT_DOMR_SSHPORT,"root",mgr.getSystemVMKeyFile(),null,"/opt/cloud/bin/checkbatchs2svpn.sh ");
    if (!result.first()) {
      s_logger.error("check site-to-site vpn connections command on domR " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + " failed, message: "+ result.second());
      return new CheckS2SVpnConnectionsAnswer(cmd,false,result.second());
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("check site-to-site vpn connections command on domain router " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + " completed");
    }
  }
 catch (  Throwable e) {
    String msg="CheckS2SVpnConnectionsCommand failed due to " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CheckS2SVpnConnectionsAnswer(cmd,false,"CheckS2SVpnConneciontsCommand failed");
  }
  return new CheckS2SVpnConnectionsAnswer(cmd,true,result.second());
}
