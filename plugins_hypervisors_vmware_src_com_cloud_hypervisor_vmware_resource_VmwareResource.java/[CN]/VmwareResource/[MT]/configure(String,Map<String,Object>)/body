{
  try {
    _name=name;
    _url=(String)params.get("url");
    _username=(String)params.get("username");
    _password=(String)params.get("password");
    _dcId=(String)params.get("zone");
    _pod=(String)params.get("pod");
    _cluster=(String)params.get("cluster");
    _guid=(String)params.get("guid");
    String[] tokens=_guid.split("@");
    _vCenterAddress=tokens[1];
    _morHyperHost=new ManagedObjectReference();
    String[] hostTokens=tokens[0].split(":");
    _morHyperHost.setType(hostTokens[0]);
    _morHyperHost.setValue(hostTokens[1]);
    _guestTrafficInfo=(VmwareTrafficLabel)params.get("guestTrafficInfo");
    _publicTrafficInfo=(VmwareTrafficLabel)params.get("publicTrafficInfo");
    VmwareContext context=getServiceContext();
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    if (mgr == null) {
      throw new ConfigurationException("Invalid vmwareContext:  vmwareMgr stock object is not set or cleared.");
    }
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef("Datastore",CustomFieldConstants.CLOUD_UUID);
    if (_publicTrafficInfo != null && _publicTrafficInfo.getVirtualSwitchType() != VirtualSwitchType.StandardVirtualSwitch || _guestTrafficInfo != null && _guestTrafficInfo.getVirtualSwitchType() != VirtualSwitchType.StandardVirtualSwitch) {
      cfmMo.ensureCustomFieldDef("DistributedVirtualPortgroup",CustomFieldConstants.CLOUD_GC_DVP);
    }
    cfmMo.ensureCustomFieldDef("Network",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_NIC_MASK);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_VM_INTERNAL_NAME);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_WORKER);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_WORKER_TAG);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
    if (_guestTrafficInfo.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch || _publicTrafficInfo.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch) {
      _privateNetworkVSwitchName=mgr.getPrivateVSwitchName(Long.parseLong(_dcId),HypervisorType.VMware);
      _vsmCredentials=mgr.getNexusVSMCredentialsByClusterId(Long.parseLong(_cluster));
    }
    if (_privateNetworkVSwitchName == null) {
      _privateNetworkVSwitchName=(String)params.get("private.network.vswitch.name");
    }
    String value=(String)params.get("vmware.recycle.hung.wokervm");
    if (value != null && value.equalsIgnoreCase("true"))     _recycleHungWorker=true;
    value=(String)params.get("vmware.root.disk.controller");
    if (value != null && value.equalsIgnoreCase("scsi"))     _rootDiskController=DiskControllerType.scsi;
 else     if (value != null && value.equalsIgnoreCase("ide"))     _rootDiskController=DiskControllerType.ide;
 else     _rootDiskController=DiskControllerType.osdefault;
    Integer intObj=(Integer)params.get("ports.per.dvportgroup");
    if (intObj != null)     _portsPerDvPortGroup=intObj.intValue();
    s_logger.info("VmwareResource network configuration info." + " private traffic over vSwitch: " + _privateNetworkVSwitchName + ", public traffic over "+ _publicTrafficInfo.getVirtualSwitchType()+ " : "+ _publicTrafficInfo.getVirtualSwitchName()+ ", guest traffic over "+ _guestTrafficInfo.getVirtualSwitchType()+ " : "+ _guestTrafficInfo.getVirtualSwitchName());
    Boolean boolObj=(Boolean)params.get("vmware.create.full.clone");
    if (boolObj != null && boolObj.booleanValue()) {
      _fullCloneFlag=true;
    }
 else {
      _fullCloneFlag=false;
    }
    boolObj=(Boolean)params.get("vm.instancename.flag");
    if (boolObj != null && boolObj.booleanValue()) {
      _instanceNameFlag=true;
    }
 else {
      _instanceNameFlag=false;
    }
    value=(String)params.get("scripts.timeout");
    int timeout=NumbersUtil.parseInt(value,1440) * 1000;
    _storageProcessor=new VmwareStorageProcessor((VmwareHostService)this,_fullCloneFlag,(VmwareStorageMount)mgr,timeout,this,_shutdownWaitMs,null,(String)params.get("nfsVersion"));
    storageHandler=new VmwareStorageSubsystemCommandHandler(_storageProcessor,(String)params.get("nfsVersion"));
    _vrResource=new VirtualRoutingResource(this);
    if (!_vrResource.configure(name,params)) {
      throw new ConfigurationException("Unable to configure VirtualRoutingResource");
    }
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Successfully configured VmwareResource.");
    }
    return true;
  }
 catch (  Exception e) {
    s_logger.error("Unexpected Exception ",e);
    throw new ConfigurationException("Failed to configure VmwareResource due to unexpect exception.");
  }
 finally {
    recycleServiceContext();
  }
}
