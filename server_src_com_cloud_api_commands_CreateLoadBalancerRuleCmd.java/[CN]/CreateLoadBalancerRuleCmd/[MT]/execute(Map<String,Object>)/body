{
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String description=(String)params.get(BaseCmd.Properties.DESCRIPTION.getName());
  String publicIP=(String)params.get(BaseCmd.Properties.PUBLIC_IP.getName());
  String publicPort=(String)params.get(BaseCmd.Properties.PUBLIC_PORT.getName());
  String privatePort=(String)params.get(BaseCmd.Properties.PRIVATE_PORT.getName());
  String algorithm=(String)params.get(BaseCmd.Properties.ALGORITHM.getName());
  UserVmDao _userVmDao;
  ComponentLocator locator=ComponentLocator.getLocator("management-server");
  _userVmDao=locator.getDao(UserVmDao.class);
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  IPAddressVO ipAddr=getManagementServer().findIPAddressById(publicIP);
  if (ipAddr == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to create load balancer rule, invalid IP address " + publicIP);
  }
  VlanVO vlan=getManagementServer().findVlanById(ipAddr.getVlanDbId());
  if (vlan != null) {
    if (!VlanType.VirtualNetwork.equals(vlan.getVlanType())) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to create load balancer rule for IP address " + publicIP + ", only VirtualNetwork type IP addresses can be used for load balancers.");
    }
  }
  Account accountByIp=getManagementServer().findAccountByIpAddress(publicIP);
  if (accountByIp == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to create load balancer rule, cannot find account owner for ip " + publicIP);
  }
  Long accountId=accountByIp.getId();
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId().longValue() != accountId.longValue()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to create load balancer rule, account " + account.getAccountName() + " doesn't own ip address "+ publicIP);
      }
    }
 else     if (!getManagementServer().isChildDomain(account.getDomainId(),accountByIp.getDomainId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create load balancer rule on IP address " + publicIP + ", permission denied.");
    }
  }
  List<UserVmVO> userVmVO=_userVmDao.listByAccountId(accountId);
  if (userVmVO.size() == 0) {
    throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,"Unable to create load balancer rule, no vm for the user exists.");
  }
  LoadBalancerVO existingLB=getManagementServer().findLoadBalancer(accountId,name);
  if (existingLB != null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to create load balancer rule, an existing load balancer rule with name " + name + " already exisits.");
  }
  try {
    LoadBalancerVO loadBalancer=getManagementServer().createLoadBalancer(userId,accountId,name,description,publicIP,publicPort,privatePort,algorithm);
    List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),loadBalancer.getId().toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),loadBalancer.getName()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DESCRIPTION.getName(),loadBalancer.getDescription()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_IP.getName(),loadBalancer.getIpAddress()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_PORT.getName(),loadBalancer.getPublicPort()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PRIVATE_PORT.getName(),loadBalancer.getPrivatePort()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ALGORITHM.getName(),loadBalancer.getAlgorithm()));
    Account accountTemp=getManagementServer().findAccountById(loadBalancer.getAccountId());
    if (accountTemp != null) {
      returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountTemp.getAccountName()));
      returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),accountTemp.getDomainId()));
      returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(accountTemp.getDomainId()).getName()));
    }
    embeddedObject.add(new Pair<String,Object>("loadbalancerrule",new Object[]{returnValues}));
    return embeddedObject;
  }
 catch (  InvalidParameterValueException paramError) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,paramError.getMessage());
  }
catch (  PermissionDeniedException permissionError) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,permissionError.getMessage());
  }
catch (  Exception ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}
