{
  String secStorageUrl=((CreateVolumeOVACommand)cmd).getSecondaryStorageUrl();
  assert(secStorageUrl != null);
  String installPath=cmd.getVolPath();
  String details=null;
  boolean success=false;
  s_logger.info("volss: execute CreateVolumeOVA cmd at vmwareMngImpl. ");
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  s_logger.info("volss: mountPoint: " + secondaryMountPoint + "installPath:"+ installPath);
  String installFullPath=secondaryMountPoint + "/" + installPath;
  String volName=cmd.getVolName();
  s_logger.info("volss: execute vmwareMgrImpl: VolName " + volName);
  try {
    if (new File(volName + ".ova").exists()) {
      details="OVA files exists. succeed. ";
      return new CreateVolumeOVAAnswer(cmd,true,details);
    }
 else {
      File ovaFile=new File(installFullPath);
      String exportDir=ovaFile.getParent();
      s_logger.info("Fang: exportDir is (for VolumeOVA): " + exportDir);
      s_logger.info("Sync file system before we package OVA...");
      Script commandSync=new Script(true,"sync",0,s_logger);
      commandSync.execute();
      Script command=new Script(false,"tar",0,s_logger);
      command.setWorkDir(exportDir);
      command.add("-cf",volName + ".ova");
      command.add(volName + ".ovf");
      command.add(volName + "-disk0.vmdk");
      s_logger.info("Package Volume OVA with commmand: " + command.toString());
      command.execute();
      return new CreateVolumeOVAAnswer(cmd,true,details);
    }
  }
 catch (  Throwable e) {
    s_logger.info("Exception for createVolumeOVA");
  }
  return new CreateVolumeOVAAnswer(cmd,true,"fail to pack OVA for volume");
}
