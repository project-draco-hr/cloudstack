{
  List<VolumeObjectTO> listVolumeTo=cmd.getVolumeTOs();
  VirtualMachineMO vmMo=null;
  VmwareContext context=hostService.getServiceContext(cmd);
  String vmName=cmd.getVmName();
  String vmSnapshotName=cmd.getTarget().getSnapshotName();
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      vmMo=hyperHost.findVmOnPeerHyperHost(vmName);
    }
    if (vmMo == null) {
      String msg="Unable to find VM for RevertToVMSnapshotCommand";
      s_logger.debug(msg);
      return new DeleteVMSnapshotAnswer(cmd,false,msg);
    }
 else {
      if (vmMo.getSnapshotMor(vmSnapshotName) == null) {
        s_logger.debug("can not find the snapshot " + vmSnapshotName + ", assume it is already removed");
      }
 else {
        if (!vmMo.removeSnapshot(vmSnapshotName,false)) {
          String msg="delete vm snapshot " + vmSnapshotName + " due to error occured in vmware";
          s_logger.error(msg);
          return new DeleteVMSnapshotAnswer(cmd,false,msg);
        }
      }
      s_logger.debug("snapshot: " + vmSnapshotName + " is removed");
      Map<String,String> mapNewDisk=getNewDiskMap(vmMo);
      setVolumeToPathAndSize(listVolumeTo,mapNewDisk,context,hyperHost,cmd.getVmName());
      return new DeleteVMSnapshotAnswer(cmd,listVolumeTo);
    }
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    s_logger.error("failed to delete vm snapshot " + vmSnapshotName + " of vm "+ vmName+ " due to "+ msg);
    return new DeleteVMSnapshotAnswer(cmd,false,msg);
  }
}
