{
  DataStoreTO storeTO=volume.getDataStore();
  if (!(storeTO instanceof NfsTO)) {
    s_logger.debug("can only handle nfs storage, when create ova from volume");
    return null;
  }
  NfsTO nfsStore=(NfsTO)storeTO;
  String secStorageUrl=nfsStore.getUrl();
  assert(secStorageUrl != null);
  String installPath=volume.getPath();
  int index=installPath.lastIndexOf(File.separator);
  String volumeUuid=installPath.substring(index + 1);
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl,_imageStoreDetailsUtil.getNfsVersionByUuid(storeTO.getUuid()));
  String volumePath=installPath + File.separator + volumeUuid+ ".ova";
  String installFullPath=secondaryMountPoint + "/" + installPath;
  try {
    if (new File(secondaryMountPoint + File.separator + volumePath).exists()) {
      s_logger.debug("ova already exists:" + volumePath);
      return volumePath;
    }
 else {
      Script commandSync=new Script(true,"sync",0,s_logger);
      commandSync.execute();
      Script command=new Script(false,"tar",0,s_logger);
      command.setWorkDir(installFullPath);
      command.add("-cf",volumeUuid + ".ova");
      command.add(volumeUuid + ".ovf");
      command.add(volumeUuid + "-disk0.vmdk");
      command.execute();
      return volumePath;
    }
  }
 catch (  Throwable e) {
    s_logger.info("Exception for createVolumeOVA");
  }
  return null;
}
