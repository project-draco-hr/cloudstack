def commit(self):
    changes = 0
    changed_file = None
    changed_filename = (self.filename + '.new')
    try:
        lines = []
        backup_filename = (self.filename + '.bak')
        stat = None
        with open(self.filename, 'r') as orig:
            stat = os.fstat(orig.fileno())
            for line in orig:
                changed_line = line
                for edit in self.edits:
                    remaining_count = 0
                    if (edit.count != 0):
                        remaining_count = (edit.count - edit.subs)
                        if (remaining_count < 0):
                            raise Exception('Made too many edits')
                        elif (remaining_count == 0):
                            continue
                    (changed_line, subs) = edit.pattern.subn(edit.sub, line, remaining_count)
                    if (changed_line != line):
                        if (changed_file is None):
                            logging.debug(('Editing file %s' % self.filename))
                        logging.debug(('  - %s' % line[:(-1)]))
                        logging.debug(('  + %s' % changed_line[:(-1)]))
                        changes += subs
                        edit.subs += subs
                if (changes == 0):
                    lines.append(changed_line)
                elif (changed_file is None):
                    changed_file = open(changed_filename, 'w')
                    if hasattr(os, 'fchmod'):
                        os.fchmod(changed_file.fileno(), stat.st_mode)
                    if hasattr(os, 'fchown'):
                        os.fchown(changed_file.fileno(), stat.st_uid, stat.st_gid)
                    changed_file.writelines(lines)
                    changed_file.write(changed_line)
                    del lines
                else:
                    changed_file.write(changed_line)
        if (changes == 0):
            logging.info(('No edits need for file %s' % self.filename))
        else:
            changed_file.close()
            changed_file = None
            if os.path.exists(backup_filename):
                os.unlink(backup_filename)
            shutil.copy(self.filename, backup_filename)
            os.rename(changed_filename, self.filename)
            logging.info(('Edited file %s (%d changes)' % (self.filename, changes)))
    finally:
        if (changed_file is not None):
            changed_file.close()
            os.unlink(changed_filename)
    return changes
