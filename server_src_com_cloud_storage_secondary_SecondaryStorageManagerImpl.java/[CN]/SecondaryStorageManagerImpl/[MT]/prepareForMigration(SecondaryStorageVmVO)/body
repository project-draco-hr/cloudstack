{
  VMTemplateVO template=_templateDao.findById(secStorageVm.getTemplateId());
  long routerId=secStorageVm.getId();
  boolean mirroredVols=secStorageVm.isMirroredVols();
  DataCenterVO dc=_dcDao.findById(secStorageVm.getDataCenterId());
  HostPodVO pod=_podDao.findById(secStorageVm.getPodId());
  StoragePoolVO sp=_storageMgr.getStoragePoolForVm(secStorageVm.getId());
  List<VolumeVO> vols=_volsDao.findCreatedByInstance(routerId);
  String[] storageIps=new String[2];
  VolumeVO vol=vols.get(0);
  storageIps[0]=vol.getHostIp();
  if (mirroredVols && (vols.size() == 2)) {
    storageIps[1]=vols.get(1).getHostIp();
  }
  PrepareForMigrationCommand cmd=new PrepareForMigrationCommand(secStorageVm.getHostName(),null,storageIps,vols,mirroredVols);
  HostVO routingHost=null;
  HashSet<Host> avoid=new HashSet<Host>();
  HostVO fromHost=_hostDao.findById(secStorageVm.getHostId());
  if (fromHost.getClusterId() == null) {
    s_logger.debug("The host is not in a cluster");
    return null;
  }
  avoid.add(fromHost);
  while ((routingHost=(HostVO)_agentMgr.findHost(Host.Type.Routing,dc,pod,sp,_serviceOffering,template,secStorageVm,fromHost,avoid)) != null) {
    avoid.add(routingHost);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Trying to migrate router to host " + routingHost.getName());
    }
    if (!_storageMgr.share(secStorageVm,vols,routingHost,false)) {
      s_logger.warn("Can not share " + vol.getPath() + " to "+ secStorageVm.getHostName());
      throw new StorageUnavailableException("Can not share " + vol.getPath() + " to "+ secStorageVm.getHostName(),vol);
    }
    Answer answer=_agentMgr.easySend(routingHost.getId(),cmd);
    if (answer != null && answer.getResult()) {
      return routingHost;
    }
    _storageMgr.unshare(secStorageVm,vols,routingHost);
  }
  return null;
}
