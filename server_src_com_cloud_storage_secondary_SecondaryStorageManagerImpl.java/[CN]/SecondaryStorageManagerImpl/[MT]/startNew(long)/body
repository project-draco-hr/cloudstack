{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Assign secondary storage vm from a newly started instance for request from data center : " + dataCenterId);
  }
  Map<String,Object> context=_useNewNetworking ? createSecStorageVmInstance2(dataCenterId) : createSecStorageVmInstance(dataCenterId);
  long secStorageVmId=(Long)context.get("secStorageVmId");
  if (secStorageVmId == 0) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace("Creating secondary storage vm instance failed, data center id : " + dataCenterId);
    }
    if (context.get("publicIpAddress") != null) {
      freePublicIpAddress((String)context.get("publicIpAddress"),dataCenterId,0);
    }
    return null;
  }
  SecondaryStorageVmVO secStorageVm=allocSecStorageVmStorage(dataCenterId,secStorageVmId);
  if (secStorageVm != null) {
    SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT,this,new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_CREATED,dataCenterId,secStorageVmId,secStorageVm,null));
    return secStorageVm;
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to allocate secondary storage vm storage, remove the secondary storage vm record from DB, secondary storage vm id: " + secStorageVmId);
    }
    SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT,this,new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_CREATE_FAILURE,dataCenterId,secStorageVmId,null,"Unable to allocate storage"));
    destroySecStorageVmDBOnly(secStorageVmId);
  }
  return null;
}
