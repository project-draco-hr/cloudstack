{
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open(Transaction.CLOUD_DB);
      try {
        reallyRun();
      }
 catch (      Throwable e) {
        s_logger.warn("Unexpected exception " + e.getMessage(),e);
      }
 finally {
        txn.close();
      }
    }
    private void reallyRun(){
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Begin secondary storage vm capacity scan");
      }
      Map<Long,ZoneHostInfo> zoneHostInfoMap=getZoneHostInfo();
      if (isServiceReady(zoneHostInfoMap)) {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("Sec Storage VM Service is ready, check to see if we need to allocate standby capacity");
        }
        if (!_capacityScanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Sec Storage VM Capacity scan lock is used by others, skip and wait for my turn");
          }
          return;
        }
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("*** Begining secondary storage vm capacity scan... ***");
        }
        try {
          checkPendingSecStorageVMs();
          List<DataCenterVO> datacenters=_dcDao.listAllIncludingRemoved();
          for (          DataCenterVO dc : datacenters) {
            if (isZoneReady(zoneHostInfoMap,dc.getId())) {
              List<SecondaryStorageVmVO> alreadyRunning=_secStorageVmDao.getSecStorageVmListInStates(dc.getId(),State.Running,State.Migrating,State.Creating,State.Starting);
              List<SecondaryStorageVmVO> stopped=_secStorageVmDao.getSecStorageVmListInStates(dc.getId(),State.Stopped,State.Stopping);
              if (alreadyRunning.size() == 0) {
                if (stopped.size() == 0) {
                  s_logger.info("No secondary storage vms found in datacenter id=" + dc.getId() + ", starting a new one");
                  allocCapacity(dc.getId());
                }
 else {
                  s_logger.warn("Stopped secondary storage vms found in datacenter id=" + dc.getId() + ", not restarting them automatically");
                }
              }
            }
 else {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug("Zone " + dc.getId() + " is not ready to alloc secondary storage vm");
              }
            }
          }
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("*** Stop secondary storage vm capacity scan ***");
          }
        }
  finally {
          _capacityScanLock.unlock();
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace("Secondary storage vm service is not ready for capacity preallocation, wait for next time");
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("End of secondary storage vm capacity scan");
      }
    }
  }
;
}
