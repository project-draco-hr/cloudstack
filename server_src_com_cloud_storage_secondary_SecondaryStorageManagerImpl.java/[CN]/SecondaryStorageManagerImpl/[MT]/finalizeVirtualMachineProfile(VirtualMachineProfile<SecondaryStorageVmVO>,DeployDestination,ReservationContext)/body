{
  HostVO secHost=_hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());
  assert(secHost != null);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(" template=domP type=secstorage");
  buf.append(" host=").append(_mgmt_host);
  buf.append(" port=").append(_mgmt_port);
  buf.append(" name=").append(profile.getVirtualMachine().getHostName());
  buf.append(" zone=").append(dest.getDataCenter().getId());
  buf.append(" pod=").append(dest.getPod().getId());
  if (profile.getVirtualMachine().getRole() == SecondaryStorageVm.Role.templateProcessor) {
    buf.append(" guid=").append(secHost.getGuid());
  }
 else {
    buf.append(" guid=").append(profile.getVirtualMachine().getHostName());
  }
  String nfsMountPoint=null;
  try {
    nfsMountPoint=NfsUtils.url2Mount(secHost.getStorageUrl());
  }
 catch (  Exception e) {
  }
  buf.append(" mount.path=").append(nfsMountPoint);
  if (_configDao.isPremium()) {
    if (profile.getHypervisorType() == HypervisorType.Hyperv) {
      buf.append(" resource=com.cloud.storage.resource.CifsSecondaryStorageResource");
    }
 else {
      buf.append(" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource");
    }
  }
 else {
    buf.append(" resource=com.cloud.storage.resource.NfsSecondaryStorageResource");
  }
  buf.append(" instance=SecStorage");
  buf.append(" sslcopy=").append(Boolean.toString(_useSSlCopy));
  buf.append(" role=").append(profile.getVirtualMachine().getRole().toString());
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue("direct.attach.network.externalIpAllocator.enabled");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase("true")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(" eth").append(deviceId).append("mask=").append("0.0.0.0");
      buf.append(" eth").append(deviceId).append("ip=").append("0.0.0.0");
    }
 else {
      buf.append(" eth").append(deviceId).append("ip=").append(nic.getIp4Address());
      buf.append(" eth").append(deviceId).append("mask=").append(nic.getNetmask());
    }
    buf.append(" eth").append(deviceId).append("mask=").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(" gateway=").append(nic.getGateway());
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      String mgmt_cidr=_configDao.getValue(Config.ManagementNetwork.key());
      if (NetUtils.isValidCIDR(mgmt_cidr)) {
        buf.append(" mgmtcidr=").append(mgmt_cidr);
      }
      buf.append(" localgw=").append(dest.getPod().getGateway());
      buf.append(" private.network.device=").append("eth").append(deviceId);
    }
 else     if (nic.getTrafficType() == TrafficType.Public) {
      buf.append(" public.network.device=").append("eth").append(deviceId);
    }
  }
  if (externalDhcp) {
    buf.append(" bootproto=dhcp");
  }
  DataCenterVO dc=_dcDao.findById(profile.getVirtualMachine().getDataCenterId());
  buf.append(" dns1=").append(dc.getInternalDns1());
  if (dc.getInternalDns2() != null) {
    buf.append(" dns2=").append(dc.getInternalDns2());
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Boot Args for " + profile + ": "+ bootArgs);
  }
  return true;
}
