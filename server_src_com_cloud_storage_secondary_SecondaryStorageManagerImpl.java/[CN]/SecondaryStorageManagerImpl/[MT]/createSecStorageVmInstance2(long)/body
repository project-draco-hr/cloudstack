{
  long id=_secStorageVmDao.getNextInSequence(Long.class,"id");
  String name=VirtualMachineName.getSystemVmName(id,_instance,"s").intern();
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  AccountVO systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkConfigurationVO,NicProfile>> networks=new ArrayList<Pair<NetworkConfigurationVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkConfigurationVO,NicProfile>(_networkMgr.setupNetworkConfiguration(systemAcct,defaultOffering.get(0),plan).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkConfigurationVO,NicProfile>(_networkMgr.setupNetworkConfiguration(systemAcct,offering,plan).get(0),null));
  }
  SecondaryStorageVmVO proxy=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0);
  try {
    proxy=_itMgr.allocate(proxy,_template,_serviceOffering,networks,plan,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn("InsufficientCapacity",e);
    throw new CloudRuntimeException("Insufficient capacity exception",e);
  }
catch (  StorageUnavailableException e) {
    s_logger.warn("Unable to contact storage",e);
    throw new CloudRuntimeException("Unable to contact storage",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("dc",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put("pod",pod);
  context.put("proxyVmId",proxy.getId());
  return context;
}
