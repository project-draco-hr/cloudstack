{
  long eventId=saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,"Starting secondary storage Vm Id: " + secStorageVmId,startEventId);
  if (startEventId == 0) {
    startEventId=eventId;
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Start secondary storage vm " + secStorageVmId + ", update async job-"+ job.getId());
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"sec_storage_vm",secStorageVmId);
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findById(secStorageVmId);
  if (secStorageVm == null || secStorageVm.getRemoved() != null) {
    s_logger.debug("secondary storage vm is not found: " + secStorageVmId);
    saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,"secondary storage vm is not found",startEventId);
    return null;
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Starting secondary storage vm if it is not started, secondary storage vm vm id : " + secStorageVmId);
  }
  for (int i=0; i < 2; i++) {
    State state=secStorageVm.getState();
    if (state == State.Starting) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Waiting secondary storage vm to be ready, secondary storage vm id : " + secStorageVmId + " secStorageVm VM state : "+ state.toString());
      }
      if (secStorageVm.getPrivateIpAddress() == null || connect(secStorageVm.getPrivateIpAddress(),_secStorageVmCmdPort) != null) {
        if (secStorageVm.getPrivateIpAddress() == null) {
          s_logger.warn("Retruning a secondary storage vm that is being started but private IP has not been allocated yet, secondary storage vm id : " + secStorageVmId);
        }
 else {
          s_logger.warn("Waiting secondary storage vm to be ready timed out, secondary storage vm id : " + secStorageVmId);
        }
      }
      return secStorageVm;
    }
    if (state == State.Running) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Secondary storage vm is already started: " + secStorageVm.getHostName());
      }
      saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,"Secondary storage vm is already started",startEventId);
      return secStorageVm;
    }
    DataCenterVO dc=_dcDao.findById(secStorageVm.getDataCenterId());
    HostPodVO pod=_podDao.findById(secStorageVm.getPodId());
    StoragePoolVO sp=_storageMgr.getStoragePoolForVm(secStorageVm.getId());
    HashSet<Host> avoid=new HashSet<Host>();
    HostVO routingHost=(HostVO)_agentMgr.findHost(Host.Type.Routing,dc,pod,sp,_serviceOffering,_template,secStorageVm,null,avoid);
    if (routingHost == null) {
      if (s_logger.isDebugEnabled()) {
        String msg="Unable to find a routing host for " + secStorageVm.toString() + " in pod "+ pod.getId();
        s_logger.debug(msg);
        throw new CloudRuntimeException(msg);
      }
    }
    if (!_itMgr.stateTransitTo(secStorageVm,VirtualMachine.Event.StartRequested,routingHost.getId())) {
      if (s_logger.isDebugEnabled()) {
        SecondaryStorageVmVO temp=_secStorageVmDao.findById(secStorageVmId);
        s_logger.debug("Unable to start secondary storage vm " + secStorageVm.getHostName() + " because it is not in a startable state : "+ ((temp != null) ? temp.getState().toString() : "null"));
      }
      continue;
    }
    try {
      Answer answer=null;
      int retry=_find_host_retry;
      do {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Trying to start secondary storage vm on host " + routingHost.getName());
        }
        String privateIpAddress=allocPrivateIpAddress(secStorageVm.getDataCenterId(),routingHost.getPodId(),secStorageVm.getId(),secStorageVm.getPrivateMacAddress());
        if (privateIpAddress == null && (_IpAllocator != null && !_IpAllocator.exteralIpAddressAllocatorEnabled())) {
          String msg="Unable to allocate private ip addresses for  " + secStorageVm.getHostName() + " in pod "+ pod.getId();
          s_logger.debug(msg);
          throw new CloudRuntimeException(msg);
        }
        secStorageVm.setPrivateIpAddress(privateIpAddress);
        String guestIpAddress=_dcDao.allocateLinkLocalIpAddress(secStorageVm.getDataCenterId(),routingHost.getPodId(),secStorageVm.getId(),null);
        secStorageVm.setGuestIpAddress(guestIpAddress);
        _itMgr.stateTransitTo(secStorageVm,VirtualMachine.Event.OperationRetry,routingHost.getId());
        secStorageVm=_secStorageVmDao.findById(secStorageVm.getId());
        List<VolumeVO> vols=_storageMgr.prepare(secStorageVm,routingHost);
        if (vols == null || vols.size() == 0) {
          String msg="Unable to prepare storage for " + secStorageVm.getHostName() + " in pod "+ pod.getId();
          s_logger.debug(msg);
          throw new CloudRuntimeException(msg);
        }
        VolumeVO vol=vols.get(0);
        String guestOSDescription;
        GuestOSVO guestOS=_guestOSDao.findById(secStorageVm.getGuestOSId());
        if (guestOS == null) {
          String msg="Could not find guest OS description for OSId " + secStorageVm.getGuestOSId() + " for vm: "+ secStorageVm.getHostName();
          s_logger.debug(msg);
          throw new CloudRuntimeException(msg);
        }
 else {
          guestOSDescription=guestOS.getDisplayName();
        }
        StartSecStorageVmCommand cmdStart=new StartSecStorageVmCommand(_networkRate,_multicastRate,_secStorageVmCmdPort,secStorageVm,secStorageVm.getHostName(),"",vols,_mgmt_host,_mgmt_port,_useSSlCopy,guestOSDescription);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Sending start command for secondary storage vm " + secStorageVm.getHostName() + " to "+ routingHost.getName());
        }
        try {
          answer=_agentMgr.send(routingHost.getId(),cmdStart);
          s_logger.debug("StartSecStorageVmCommand Answer: " + (answer != null ? answer : "null"));
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Received answer on starting secondary storage vm " + secStorageVm.getHostName() + " on "+ routingHost.getName());
          }
          if (answer != null && answer.getResult()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Secondary storage vm " + secStorageVm.getHostName() + " started on "+ routingHost.getName());
            }
            if (answer instanceof StartSecStorageVmAnswer) {
              StartSecStorageVmAnswer rAnswer=(StartSecStorageVmAnswer)answer;
              if (rAnswer.getPrivateIpAddress() != null) {
                secStorageVm.setPrivateIpAddress(rAnswer.getPrivateIpAddress());
              }
              if (rAnswer.getPrivateMacAddress() != null) {
                secStorageVm.setPrivateMacAddress(rAnswer.getPrivateMacAddress());
              }
              final EventVO event=new EventVO();
              event.setUserId(User.UID_SYSTEM);
              event.setAccountId(Account.ACCOUNT_ID_SYSTEM);
              event.setType(EventTypes.EVENT_SSVM_START);
              event.setLevel(EventVO.LEVEL_INFO);
              event.setStartId(startEventId);
              event.setDescription("Secondary Storage VM started - " + secStorageVm.getHostName());
              _eventDao.persist(event);
            }
            break;
          }
          s_logger.debug("Unable to start " + secStorageVm.toString() + " on host "+ routingHost.toString()+ " due to "+ answer.getDetails());
        }
 catch (        OperationTimedoutException e) {
          if (e.isActive()) {
            s_logger.debug("Unable to start vm " + secStorageVm.getHostName() + " due to operation timed out and it is active so scheduling a restart.");
            saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,"Unable to start vm due to operation timed out",startEventId);
            _haMgr.scheduleRestart(secStorageVm,true);
            return null;
          }
        }
catch (        AgentUnavailableException e) {
          s_logger.debug("Agent " + routingHost.toString() + " was unavailable to start VM "+ secStorageVm.getHostName());
        }
        avoid.add(routingHost);
        secStorageVm.setPrivateIpAddress(null);
        freePrivateIpAddress(privateIpAddress,secStorageVm.getDataCenterId(),secStorageVm.getId());
        secStorageVm.setGuestIpAddress(null);
        _dcDao.releaseLinkLocalIpAddress(guestIpAddress,secStorageVm.getDataCenterId(),secStorageVm.getId());
        _storageMgr.unshare(secStorageVm,vols,routingHost);
      }
 while (--retry > 0 && (routingHost=(HostVO)_agentMgr.findHost(Host.Type.Routing,dc,pod,sp,_serviceOffering,_template,secStorageVm,null,avoid)) != null);
      if (routingHost == null || retry <= 0) {
        SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT,this,new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_START_FAILURE,secStorageVm.getDataCenterId(),secStorageVm.getId(),secStorageVm,"Unable to find a routing host to run"));
        final EventVO event=new EventVO();
        event.setUserId(User.UID_SYSTEM);
        event.setAccountId(Account.ACCOUNT_ID_SYSTEM);
        event.setType(EventTypes.EVENT_SSVM_START);
        event.setLevel(EventVO.LEVEL_ERROR);
        event.setStartId(startEventId);
        event.setDescription("Starting secondary storage vm failed due to unable to find a host - " + secStorageVm.getHostName());
        _eventDao.persist(event);
        throw new ExecutionException("Couldn't find a routingHost to run secondary storage vm");
      }
      _itMgr.stateTransitTo(secStorageVm,VirtualMachine.Event.OperationSucceeded,routingHost.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Secondary storage vm is now started, vm id : " + secStorageVm.getId());
      }
      SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT,this,new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_UP,secStorageVm.getDataCenterId(),secStorageVm.getId(),secStorageVm,null));
      return secStorageVm;
    }
 catch (    Throwable thr) {
      s_logger.warn("Unexpected exception: ",thr);
      SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT,this,new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_START_FAILURE,secStorageVm.getDataCenterId(),secStorageVm.getId(),secStorageVm,"Unexpected exception: " + thr.getMessage()));
      final EventVO event=new EventVO();
      event.setUserId(User.UID_SYSTEM);
      event.setAccountId(Account.ACCOUNT_ID_SYSTEM);
      event.setType(EventTypes.EVENT_SSVM_START);
      event.setLevel(EventVO.LEVEL_ERROR);
      event.setStartId(startEventId);
      event.setDescription("Starting secondary storage vm failed due to unhandled exception - " + secStorageVm.getHostName());
      _eventDao.persist(event);
      Transaction txn=Transaction.currentTxn();
      try {
        txn.start();
        String privateIpAddress=secStorageVm.getPrivateIpAddress();
        if (privateIpAddress != null) {
          secStorageVm.setPrivateIpAddress(null);
          freePrivateIpAddress(privateIpAddress,secStorageVm.getDataCenterId(),secStorageVm.getId());
        }
        _itMgr.stateTransitTo(secStorageVm,VirtualMachine.Event.OperationFailed,null);
        txn.commit();
      }
 catch (      Exception e) {
        s_logger.error("Caught exception during error recovery");
      }
      if (thr instanceof StorageUnavailableException) {
        throw (StorageUnavailableException)thr;
      }
 else       if (thr instanceof ConcurrentOperationException) {
        throw (ConcurrentOperationException)thr;
      }
 else       if (thr instanceof ExecutionException) {
        s_logger.error("Error while starting secondary storage vm due to " + thr.getMessage());
      }
 else {
        s_logger.error("Error while starting secondary storage vm ",thr);
      }
      return null;
    }
  }
  s_logger.warn("Starting secondary storage vm encounters non-startable situation");
  return null;
}
