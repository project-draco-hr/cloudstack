{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Start configuring secondary storage vm manager : " + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException("Unable to get the configuration dao.");
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  _secStorageVmRamSize=NumbersUtil.parseInt(configs.get("secstorage.vm.ram.size"),DEFAULT_SS_VM_RAMSIZE);
  _secStorageVmCpuMHz=NumbersUtil.parseInt(configs.get("secstorage.vm.cpu.mhz"),DEFAULT_SS_VM_CPUMHZ);
  _secStorageVmMtuSize=NumbersUtil.parseInt(configs.get("secstorage.vm.mtu.size"),DEFAULT_SS_VM_MTUSIZE);
  String useServiceVM=configDao.getValue("secondary.storage.vm");
  boolean _useServiceVM=false;
  if ("true".equalsIgnoreCase(useServiceVM)) {
    _useServiceVM=true;
  }
  String sslcopy=configDao.getValue("secstorage.encrypt.copy");
  if ("true".equalsIgnoreCase(sslcopy)) {
    _useSSlCopy=true;
  }
  _allowedInternalSites=configDao.getValue("secstorage.allowed.internal.sites");
  String value=configs.get("secstorage.capacityscan.interval");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  Map<String,String> agentMgrConfigs=configDao.getConfiguration("AgentManager",params);
  _mgmt_host=agentMgrConfigs.get("host");
  if (_mgmt_host == null) {
    s_logger.warn("Critical warning! Please configure your management server host address right after you have started your management server and then restart it, otherwise you won't have access to secondary storage");
  }
  value=agentMgrConfigs.get("port");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _listener=new SecondaryStorageListener(this,_agentMgr);
  _agentMgr.registerForHostEvents(_listener,true,false,true);
  _itMgr.registerGuru(VirtualMachine.Type.SecondaryStorageVm,this);
  _useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO("System Offering For Secondary Storage VM",1,_secStorageVmRamSize,_secStorageVmCpuMHz,null,null,false,null,_useLocalStorage,true,null,true,VirtualMachine.Type.SecondaryStorageVm,true);
  _serviceOffering.setUniqueName("Cloud.com-SecondaryStorage");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  if (_serviceOffering == null) {
    String msg="Data integrity problem : System Offering For Secondary Storage VM has been removed?";
    s_logger.error(msg);
    throw new ConfigurationException(msg);
  }
  if (_useServiceVM) {
    _loadScanner=new SystemVmLoadScanner<Long>(this);
    _loadScanner.initScan(STARTUP_DELAY,_capacityScanInterval);
  }
  _httpProxy=configs.get(Config.SecStorageProxy.key());
  if (_httpProxy != null) {
    boolean valid=true;
    String errMsg=null;
    try {
      URI uri=new URI(_httpProxy);
      if (!"http".equalsIgnoreCase(uri.getScheme())) {
        errMsg="Only support http proxy";
        valid=false;
      }
 else       if (uri.getHost() == null) {
        errMsg="host can not be null";
        valid=false;
      }
 else       if (uri.getPort() == -1) {
        _httpProxy=_httpProxy + ":3128";
      }
    }
 catch (    URISyntaxException e) {
      errMsg=e.toString();
    }
 finally {
      if (!valid) {
        s_logger.debug("ssvm http proxy " + _httpProxy + " is invalid: "+ errMsg);
        throw new ConfigurationException("ssvm http proxy " + _httpProxy + "is invalid: "+ errMsg);
      }
    }
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Secondary storage vm Manager is configured.");
  }
  _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(),this);
  return true;
}
