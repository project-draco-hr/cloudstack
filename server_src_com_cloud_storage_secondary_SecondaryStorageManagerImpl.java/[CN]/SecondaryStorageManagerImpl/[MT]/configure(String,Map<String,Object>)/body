{
  if (s_logger.isInfoEnabled())   s_logger.info("Start configuring secondary storage vm manager : " + name);
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException("Unable to get the configuration dao.");
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  _secStorageVmRamSize=NumbersUtil.parseInt(configs.get("secstorage.vm.ram.size"),DEFAULT_SS_VM_RAMSIZE);
  String useServiceVM=configDao.getValue("secondary.storage.vm");
  boolean _useServiceVM=false;
  if ("true".equalsIgnoreCase(useServiceVM)) {
    _useServiceVM=true;
  }
  String sslcopy=configDao.getValue("secstorage.encrypt.copy");
  if ("true".equalsIgnoreCase(sslcopy)) {
    _useSSlCopy=true;
  }
  _allowedInternalSites=configDao.getValue("secstorage.allowed.internal.sites");
  String value=configs.get("start.retry");
  _find_host_retry=NumbersUtil.parseInt(value,DEFAULT_FIND_HOST_RETRY_COUNT);
  value=configs.get("secstorage.vm.cmd.port");
  _secStorageVmCmdPort=NumbersUtil.parseInt(value,3922);
  value=configs.get("secstorage.capacityscan.interval");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _domain=configs.get("domain");
  if (_domain == null) {
    _domain="foo.com";
  }
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  Map<String,String> agentMgrConfigs=configDao.getConfiguration("AgentManager",params);
  _mgmt_host=agentMgrConfigs.get("host");
  if (_mgmt_host == null) {
    s_logger.warn("Critical warning! Please configure your management server host address right after you have started your management server and then restart it, otherwise you won't have access to secondary storage");
  }
  value=agentMgrConfigs.get("port");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  if (_secStorageVmDao == null) {
    throw new ConfigurationException("Unable to get " + SecondaryStorageVmDao.class.getName());
  }
  _ssVmAllocators=locator.getAdapters(SecondaryStorageVmAllocator.class);
  if (_ssVmAllocators == null || !_ssVmAllocators.isSet()) {
    throw new ConfigurationException("Unable to get secStorageVm allocators");
  }
  _dcDao=locator.getDao(DataCenterDao.class);
  if (_dcDao == null) {
    throw new ConfigurationException("Unable to get " + DataCenterDao.class.getName());
  }
  _templateDao=locator.getDao(VMTemplateDao.class);
  if (_templateDao == null) {
    throw new ConfigurationException("Unable to get " + VMTemplateDao.class.getName());
  }
  _ipAddressDao=locator.getDao(IPAddressDao.class);
  if (_ipAddressDao == null) {
    throw new ConfigurationException("Unable to get " + IPAddressDao.class.getName());
  }
  _volsDao=locator.getDao(VolumeDao.class);
  if (_volsDao == null) {
    throw new ConfigurationException("Unable to get " + VolumeDao.class.getName());
  }
  _podDao=locator.getDao(HostPodDao.class);
  if (_podDao == null) {
    throw new ConfigurationException("Unable to get " + HostPodDao.class.getName());
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    throw new ConfigurationException("Unable to get " + HostDao.class.getName());
  }
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  if (_storagePoolDao == null) {
    throw new ConfigurationException("Unable to find " + StoragePoolDao.class);
  }
  _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
  if (_storagePoolHostDao == null) {
    throw new ConfigurationException("Unable to find " + StoragePoolHostDao.class);
  }
  _vmTemplateHostDao=locator.getDao(VMTemplateHostDao.class);
  if (_vmTemplateHostDao == null) {
    throw new ConfigurationException("Unable to get " + VMTemplateHostDao.class.getName());
  }
  _userVmDao=locator.getDao(UserVmDao.class);
  if (_userVmDao == null)   throw new ConfigurationException("Unable to get " + UserVmDao.class.getName());
  _instanceDao=locator.getDao(VMInstanceDao.class);
  if (_instanceDao == null)   throw new ConfigurationException("Unable to get " + VMInstanceDao.class.getName());
  _capacityDao=locator.getDao(CapacityDao.class);
  if (_capacityDao == null) {
    throw new ConfigurationException("Unable to get " + CapacityDao.class.getName());
  }
  _haDao=locator.getDao(HighAvailabilityDao.class);
  if (_haDao == null) {
    throw new ConfigurationException("Unable to get " + HighAvailabilityDao.class.getName());
  }
  _accountDao=locator.getDao(AccountDao.class);
  if (_accountDao == null) {
    throw new ConfigurationException("Unable to get " + AccountDao.class.getName());
  }
  _vlanDao=locator.getDao(VlanDao.class);
  if (_vlanDao == null) {
    throw new ConfigurationException("Unable to get " + VlanDao.class.getName());
  }
  _agentMgr=locator.getManager(AgentManager.class);
  if (_agentMgr == null) {
    throw new ConfigurationException("Unable to get " + AgentManager.class.getName());
  }
  _networkMgr=locator.getManager(NetworkManager.class);
  if (_networkMgr == null) {
    throw new ConfigurationException("Unable to get " + NetworkManager.class.getName());
  }
  _listener=new SecondaryStorageListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  _storageMgr=locator.getManager(StorageManager.class);
  if (_storageMgr == null) {
    throw new ConfigurationException("Unable to get " + StorageManager.class.getName());
  }
  _haMgr=locator.getManager(HighAvailabilityManager.class);
  if (_haMgr == null) {
    throw new ConfigurationException("Unable to get " + HighAvailabilityManager.class.getName());
  }
  _clusterMgr=locator.getManager(ClusterManager.class);
  if (_clusterMgr == null) {
    throw new ConfigurationException("Unable to get " + ClusterManager.class.getName());
  }
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  if (_asyncMgr == null) {
    throw new ConfigurationException("Unable to get " + AsyncJobManager.class.getName());
  }
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.SecondaryStorageVm,this);
  }
  Adapters<IpAddrAllocator> ipAllocators=locator.getAdapters(IpAddrAllocator.class);
  if (ipAllocators != null && ipAllocators.isSet()) {
    Enumeration<IpAddrAllocator> it=ipAllocators.enumeration();
    _IpAllocator=it.nextElement();
  }
  boolean useLocalStorage=Boolean.parseBoolean((String)params.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO("Fake Offering For Secondary Storage VM",1,_secStorageVmRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtualized,useLocalStorage,true,null);
  _serviceOffering.setUniqueName("Cloud.com-SecondaryStorage");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException("Unable to find the template for secondary storage vm VMs");
  }
  if (_useServiceVM) {
    _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  }
  String configValue=_configDao.getValue("system.vm.use.local.storage");
  _useLocalStorage=Boolean.parseBoolean(configValue);
  if (s_logger.isInfoEnabled())   s_logger.info("Secondary storage vm Manager is configured.");
  return true;
}
