{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Start configuring secondary storage vm manager : " + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException("Unable to get the configuration dao.");
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  _secStorageVmRamSize=NumbersUtil.parseInt(configs.get("secstorage.vm.ram.size"),DEFAULT_SS_VM_RAMSIZE);
  String useServiceVM=configDao.getValue("secondary.storage.vm");
  boolean _useServiceVM=false;
  if ("true".equalsIgnoreCase(useServiceVM)) {
    _useServiceVM=true;
  }
  String sslcopy=configDao.getValue("secstorage.encrypt.copy");
  if ("true".equalsIgnoreCase(sslcopy)) {
    _useSSlCopy=true;
  }
  _allowedInternalSites=configDao.getValue("secstorage.allowed.internal.sites");
  String value=configs.get("secstorage.vm.cmd.port");
  _secStorageVmCmdPort=NumbersUtil.parseInt(value,3922);
  value=configs.get("secstorage.capacityscan.interval");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _domain=configs.get("domain");
  if (_domain == null) {
    _domain="foo.com";
  }
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  Map<String,String> agentMgrConfigs=configDao.getConfiguration("AgentManager",params);
  _mgmt_host=agentMgrConfigs.get("host");
  if (_mgmt_host == null) {
    s_logger.warn("Critical warning! Please configure your management server host address right after you have started your management server and then restart it, otherwise you won't have access to secondary storage");
  }
  value=agentMgrConfigs.get("port");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _listener=new SecondaryStorageListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.SecondaryStorageVm,this);
  }
  _itMgr.registerGuru(VirtualMachine.Type.SecondaryStorageVm,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO("System Offering For Secondary Storage VM",1,_secStorageVmRamSize,0,0,0,true,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName("Cloud.com-SecondaryStorage");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null && _useServiceVM) {
    throw new ConfigurationException("Unable to find the template for secondary storage vm VMs");
  }
  if (_useServiceVM) {
    _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  }
  String configValue=_configDao.getValue("system.vm.use.local.storage");
  _useLocalStorage=Boolean.parseBoolean(configValue);
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Secondary storage vm Manager is configured.");
  }
  return true;
}
