{
  HostVO secHost=_hostDao.findSecondaryStorageHost(dataCenterId);
  if (secHost == null) {
    String msg="No secondary storage available in zone " + dataCenterId + ", cannot create secondary storage vm";
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  _secHostUuid=secHost.getGuid();
  _nfsShare=secHost.getStorageUrl();
  long id=_secStorageVmDao.getNextInSequence(Long.class,"id");
  String name=VirtualMachineName.getSystemVmName(id,_instance,"s").intern();
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork);
  if (dc.getNetworkType() == NetworkType.Basic) {
    defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SysteGuestNetwork);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork,NetworkOfferingVO.SystemManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  try {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false,false).get(0),defaultNic));
    for (    NetworkOfferingVO offering : offerings) {
      networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false,false).get(0),null));
    }
  }
 catch (  ConcurrentOperationException e) {
    s_logger.info("Unable to setup due to concurrent operation. " + e);
    return new HashMap<String,Object>();
  }
  SecondaryStorageVmVO secStorageVm=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getHypervisorType(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId());
  try {
    secStorageVm=_itMgr.allocate(secStorageVm,_template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn("InsufficientCapacity",e);
    throw new CloudRuntimeException("Insufficient capacity exception",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("secStorageVmId",secStorageVm.getId());
  return context;
}
