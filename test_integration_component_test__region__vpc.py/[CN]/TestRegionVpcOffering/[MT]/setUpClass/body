@classmethod
def setUpClass(cls):
    testClient = super(TestRegionVpcOffering, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offering'])
    cls._cleanup = [cls.service_offering]
    try:
        list_physical_networks = PhysicalNetwork.list(cls.apiclient, zoneid=cls.zone.id)
        assert (validateList(list_physical_networks)[0] == PASS), 'physical networks list validation failed'
        cls.isOvsPluginEnabled = False
        for i in range(0, len(list_physical_networks)):
            list_network_serviceprovider = NetworkServiceProvider.list(cls.apiclient, physicalnetworkid=list_physical_networks[i].id)
            for j in range(0, len(list_network_serviceprovider)):
                if ((str(list_network_serviceprovider[j].name).lower() == 'ovs') and (str(list_network_serviceprovider[j].state).lower() == 'enabled')):
                    cls.isOvsPluginEnabled = True
                    break
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(e)
    return
