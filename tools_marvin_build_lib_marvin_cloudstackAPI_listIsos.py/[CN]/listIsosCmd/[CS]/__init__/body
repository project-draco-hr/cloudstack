def __init__(self):
    self.isAsync = 'false'
    'list resources by account. Must be used with the domainId parameter.'
    self.account = None
    'true if the ISO is bootable, false otherwise'
    self.bootable = None
    'list only resources belonging to the domain specified'
    self.domainid = None
    'the hypervisor for which to restrict the search'
    self.hypervisor = None
    'list ISO by id'
    self.id = None
    'possible values are "featured", "self", "selfexecutable","sharedexecutable","executable", and "community". * featured : templates that have been marked as featured and public. * self : templates that have been registered or created by the calling user. * selfexecutable : same as self, but only returns templates that can be used to deploy a new VM. * sharedexecutable : templates ready to be deployed that have been granted to the calling user by another user. * executable : templates that are owned by the calling user, or public templates, that can be used to deploy a VM. * community : templates that have been marked as public but not featured. * all : all templates (only usable by admins).'
    self.isofilter = None
    'true if the ISO is publicly available to all users, false otherwise.'
    self.ispublic = None
    'true if this ISO is ready to be deployed'
    self.isready = None
    'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.'
    self.isrecursive = None
    'List by keyword'
    self.keyword = None
    "If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false"
    self.listall = None
    'list all isos by name'
    self.name = None
    ''
    self.page = None
    ''
    self.pagesize = None
    'list objects by project'
    self.projectid = None
    'List resources by tags (key/value pairs)'
    self.tags = []
    'the ID of the zone'
    self.zoneid = None
    self.required = []
