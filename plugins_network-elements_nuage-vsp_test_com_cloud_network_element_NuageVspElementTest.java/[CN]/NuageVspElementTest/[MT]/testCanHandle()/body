{
  final Network net=mock(Network.class);
  when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vsp);
  when(net.getId()).thenReturn(NETWORK_ID);
  when(net.getNetworkOfferingId()).thenReturn(NETWORK_ID);
  final NetworkOfferingVO ntwkoffer=mock(NetworkOfferingVO.class);
  when(ntwkoffer.getId()).thenReturn(NETWORK_ID);
  when(ntwkoffer.getIsPersistent()).thenReturn(true);
  when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);
  when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID,Service.Connectivity,Provider.NuageVsp)).thenReturn(true);
  assertTrue(_nuageVspElement.canHandle(net,Service.Connectivity));
  when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);
  assertFalse(_nuageVspElement.canHandle(net,Service.Connectivity));
  when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vsp);
  when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID,Service.Connectivity,Provider.NuageVsp)).thenReturn(false);
  assertFalse(_nuageVspElement.canHandle(net,Service.Connectivity));
  when(_networkModel.isProviderForNetwork(Provider.NuageVsp,NETWORK_ID)).thenReturn(false);
  when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID,Service.Connectivity,Provider.NuageVsp)).thenReturn(true);
  assertFalse(_nuageVspElement.canHandle(net,Service.Connectivity));
  when(_networkModel.isProviderForNetwork(Provider.NuageVsp,NETWORK_ID)).thenReturn(true);
  assertFalse(_nuageVspElement.canHandle(net,Service.Dhcp));
}
