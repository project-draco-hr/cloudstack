{
  final Vpc vpc=mock(Vpc.class);
  when(vpc.getUuid()).thenReturn("aaaaaa");
  when(vpc.getState()).thenReturn(Vpc.State.Inactive);
  when(vpc.getDomainId()).thenReturn(NETWORK_ID);
  when(vpc.getZoneId()).thenReturn(NETWORK_ID);
  when(vpc.getId()).thenReturn(NETWORK_ID);
  final DomainVO dom=mock(DomainVO.class);
  when(dom.getName()).thenReturn("domain");
  when(_domainDao.findById(NETWORK_ID)).thenReturn(dom);
  final Account acc=mock(Account.class);
  when(acc.getAccountName()).thenReturn("accountname");
  final ReservationContext context=mock(ReservationContext.class);
  when(context.getDomain()).thenReturn(dom);
  when(context.getAccount()).thenReturn(acc);
  PhysicalNetworkVO physNet=mock(PhysicalNetworkVO.class);
  when(physNet.getIsolationMethods()).thenReturn(Lists.newArrayList(PhysicalNetwork.IsolationMethod.VSP.name()));
  when(physNet.getId()).thenReturn(NETWORK_ID);
  when(_physicalNetworkDao.listByZone(NETWORK_ID)).thenReturn(Lists.newArrayList(physNet));
  final HostVO host=mock(HostVO.class);
  when(host.getId()).thenReturn(NETWORK_ID);
  final NuageVspDeviceVO nuageVspDevice=mock(NuageVspDeviceVO.class);
  when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);
  when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Lists.newArrayList(nuageVspDevice));
  when(_hostDao.findById(NETWORK_ID)).thenReturn(host);
  DomainRouterVO domainRouter=mock(DomainRouterVO.class);
  when(domainRouter.getUuid()).thenReturn("aaaaaa");
  when(_domainRouterDao.listByVpcId(NETWORK_ID)).thenReturn(Lists.newArrayList(domainRouter));
  final Answer answer=mock(Answer.class);
  when(answer.getResult()).thenReturn(true);
  when(_agentManager.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  assertTrue(_nuageVspElement.shutdownVpc(vpc,context));
}
