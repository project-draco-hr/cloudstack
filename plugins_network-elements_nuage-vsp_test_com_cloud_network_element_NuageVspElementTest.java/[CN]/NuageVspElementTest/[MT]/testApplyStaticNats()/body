{
  final Network network=mock(Network.class);
  when(network.getUuid()).thenReturn("aaaaaa");
  when(network.getVpcId()).thenReturn(null);
  when(network.getNetworkOfferingId()).thenReturn(NETWORK_ID);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  when(network.getDomainId()).thenReturn(NETWORK_ID);
  final DomainVO domVo=mock(DomainVO.class);
  when(domainDao.findById(41l)).thenReturn(domVo);
  final NetworkOfferingVO ntwkoffer=mock(NetworkOfferingVO.class);
  when(ntwkoffer.getId()).thenReturn(NETWORK_ID);
  when(ntwkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);
  when(element.isL3Network(NETWORK_ID)).thenReturn(true);
  final HostVO host=mock(HostVO.class);
  when(host.getId()).thenReturn(NETWORK_ID);
  final NuageVspDeviceVO nuageVspDevice=mock(NuageVspDeviceVO.class);
  when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);
  when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));
  when(hostDao.findById(NETWORK_ID)).thenReturn(host);
  when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));
  final Answer answer=mock(Answer.class);
  when(answer.getResult()).thenReturn(true);
  when(agentManager.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  assertTrue(element.applyStaticNats(network,new ArrayList<StaticNat>()));
}
