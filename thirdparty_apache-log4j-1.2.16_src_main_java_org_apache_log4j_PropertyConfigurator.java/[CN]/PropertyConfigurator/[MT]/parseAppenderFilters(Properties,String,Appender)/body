{
  final String filterPrefix=APPENDER_PREFIX + appenderName + ".filter.";
  int fIdx=filterPrefix.length();
  Hashtable filters=new Hashtable();
  Enumeration e=props.keys();
  String name="";
  while (e.hasMoreElements()) {
    String key=(String)e.nextElement();
    if (key.startsWith(filterPrefix)) {
      int dotIdx=key.indexOf('.',fIdx);
      String filterKey=key;
      if (dotIdx != -1) {
        filterKey=key.substring(0,dotIdx);
        name=key.substring(dotIdx + 1);
      }
      Vector filterOpts=(Vector)filters.get(filterKey);
      if (filterOpts == null) {
        filterOpts=new Vector();
        filters.put(filterKey,filterOpts);
      }
      if (dotIdx != -1) {
        String value=OptionConverter.findAndSubst(key,props);
        filterOpts.add(new NameValue(name,value));
      }
    }
  }
  Enumeration g=new SortedKeyEnumeration(filters);
  while (g.hasMoreElements()) {
    String key=(String)g.nextElement();
    String clazz=props.getProperty(key);
    if (clazz != null) {
      LogLog.debug("Filter key: [" + key + "] class: ["+ props.getProperty(key)+ "] props: "+ filters.get(key));
      Filter filter=(Filter)OptionConverter.instantiateByClassName(clazz,Filter.class,null);
      if (filter != null) {
        PropertySetter propSetter=new PropertySetter(filter);
        Vector v=(Vector)filters.get(key);
        Enumeration filterProps=v.elements();
        while (filterProps.hasMoreElements()) {
          NameValue kv=(NameValue)filterProps.nextElement();
          propSetter.setProperty(kv.key,kv.value);
        }
        propSetter.activate();
        LogLog.debug("Adding filter of type [" + filter.getClass() + "] to appender named ["+ appender.getName()+ "].");
        appender.addFilter(filter);
      }
    }
 else {
      LogLog.warn("Missing class definition for filter: [" + key + "]");
    }
  }
}
