{
  SAMLMetaDataResponse response=new SAMLMetaDataResponse();
  response.setResponseName(getCommandName());
  try {
    DefaultBootstrap.bootstrap();
  }
 catch (  ConfigurationException|FactoryConfigurationError e) {
    s_logger.error("OpenSAML Bootstrapping error: " + e.getMessage());
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),"OpenSAML Bootstrapping error while creating SP MetaData",params,responseType));
  }
  EntityDescriptor spEntityDescriptor=new EntityDescriptorBuilder().buildObject();
  spEntityDescriptor.setEntityID(_samlAuthManager.getServiceProviderId());
  SPSSODescriptor spSSODescriptor=new SPSSODescriptorBuilder().buildObject();
  spSSODescriptor.setWantAssertionsSigned(true);
  spSSODescriptor.setAuthnRequestsSigned(false);
  X509KeyInfoGeneratorFactory keyInfoGeneratorFactory=new X509KeyInfoGeneratorFactory();
  keyInfoGeneratorFactory.setEmitEntityCertificate(true);
  KeyInfoGenerator keyInfoGenerator=keyInfoGeneratorFactory.newInstance();
  KeyDescriptor encKeyDescriptor=new KeyDescriptorBuilder().buildObject();
  encKeyDescriptor.setUse(UsageType.ENCRYPTION);
  KeyDescriptor signKeyDescriptor=new KeyDescriptorBuilder().buildObject();
  signKeyDescriptor.setUse(UsageType.SIGNING);
  BasicX509Credential credential=new BasicX509Credential();
  credential.setEntityCertificate(_samlAuthManager.getIdpSigningKey());
  try {
    encKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(credential));
    signKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(credential));
  }
 catch (  SecurityException ignored) {
  }
  NameIDFormat nameIDFormat=new NameIDFormatBuilder().buildObject();
  nameIDFormat.setFormat(NameIDType.PERSISTENT);
  spSSODescriptor.getNameIDFormats().add(nameIDFormat);
  AssertionConsumerService assertionConsumerService=new AssertionConsumerServiceBuilder().buildObject();
  assertionConsumerService.setIndex(0);
  assertionConsumerService.setBinding(SAMLConstants.SAML2_REDIRECT_BINDING_URI);
  assertionConsumerService.setLocation(_samlAuthManager.getSpSingleSignOnUrl());
  SingleLogoutService ssoService=new SingleLogoutServiceBuilder().buildObject();
  ssoService.setBinding(SAMLConstants.SAML2_REDIRECT_BINDING_URI);
  ssoService.setLocation(_samlAuthManager.getSpSingleLogOutUrl());
  spSSODescriptor.getSingleLogoutServices().add(ssoService);
  spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);
  spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);
  spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.newDocument();
    Marshaller out=Configuration.getMarshallerFactory().getMarshaller(spEntityDescriptor);
    out.marshall(spEntityDescriptor,document);
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    StringWriter stringWriter=new StringWriter();
    StreamResult streamResult=new StreamResult(stringWriter);
    DOMSource source=new DOMSource(document);
    transformer.transform(source,streamResult);
    stringWriter.close();
    response.setMetadata(stringWriter.toString());
  }
 catch (  ParserConfigurationException|IOException|MarshallingException|TransformerException e) {
    response.setMetadata("Error creating Service Provider MetaData XML: " + e.getMessage());
  }
  return ApiResponseSerializer.toSerializedString(response,responseType);
}
