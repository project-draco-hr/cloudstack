{
  Transaction usageTxn=Transaction.open(Transaction.USAGE_DB);
  try {
    if (!m_heartbeatLock.lock(3)) {
      if (s_logger.isTraceEnabled())       s_logger.trace("Heartbeat lock is in use by others, returning true as someone else will take over the job if required");
      return;
    }
    try {
      UsageJobVO nextJob=m_usageJobDao.getNextImmediateJob();
      if (nextJob != null) {
        if (m_hostname.equals(nextJob.getHost()) && (m_pid == nextJob.getPid().intValue())) {
          updateJob(nextJob.getId(),null,null,null,UsageJobVO.JOB_SCHEDULED);
          scheduleParse();
        }
      }
      Long jobId=m_usageJobDao.checkHeartbeat(m_hostname,m_pid,m_aggregationDuration);
      if (jobId != null) {
        long now=System.currentTimeMillis();
        long timeToJob=m_jobExecTime.getTimeInMillis() - now;
        long timeSinceJob=0;
        long aggregationDurationMillis=m_aggregationDuration * 60 * 1000;
        long lastSuccess=m_usageJobDao.getLastJobSuccessDateMillis();
        if (lastSuccess > 0) {
          timeSinceJob=now - lastSuccess;
        }
        if ((timeSinceJob > 0) && (timeSinceJob > aggregationDurationMillis)) {
          if (timeToJob > (aggregationDurationMillis / 2)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("it's been " + timeSinceJob + " ms since last usage job and "+ timeToJob+ " ms until next job, scheduling an immediate job to catch up (aggregation duration is "+ m_aggregationDuration+ " minutes)");
            }
            scheduleParse();
          }
        }
        boolean changeOwner=updateJob(jobId,m_hostname,Integer.valueOf(m_pid),new Date(),UsageJobVO.JOB_NOT_SCHEDULED);
        if (changeOwner) {
          deleteOneOffJobs(m_hostname,m_pid);
        }
      }
    }
  finally {
      m_heartbeatLock.unlock();
    }
  }
 catch (  Exception ex) {
    s_logger.error("error in heartbeat",ex);
  }
 finally {
    usageTxn.close();
  }
}
