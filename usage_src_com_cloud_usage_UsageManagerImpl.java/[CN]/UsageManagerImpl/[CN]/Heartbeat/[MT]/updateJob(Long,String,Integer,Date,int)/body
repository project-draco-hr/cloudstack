{
  boolean changeOwner=false;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    txn.start();
    UsageJobVO job=_usageJobDao.lockRow(jobId,Boolean.TRUE);
    if (!job.getHost().equals(hostname) || !job.getPid().equals(pid)) {
      changeOwner=true;
    }
    UsageJobVO jobForUpdate=_usageJobDao.createForUpdate();
    if (hostname != null) {
      jobForUpdate.setHost(hostname);
    }
    if (pid != null) {
      jobForUpdate.setPid(pid);
    }
    if (heartbeat != null) {
      jobForUpdate.setHeartbeat(heartbeat);
    }
    jobForUpdate.setScheduled(scheduled);
    _usageJobDao.update(job.getId(),jobForUpdate);
    txn.commit();
  }
 catch (  Exception dbEx) {
    txn.rollback();
    s_logger.error("error updating usage job",dbEx);
  }
  return changeOwner;
}
