{
  final String run="usage.vmops.pid";
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Checking to see if " + run + " exists.");
  }
  final Class<?> c=UsageServer.class;
  m_version=c.getPackage().getImplementationVersion();
  if (m_version == null) {
    throw new CloudRuntimeException("Unable to find the implementation version of this usage server");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Implementation Version is " + m_version);
  }
  m_name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error("Unable to get the configuration dao.");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(params);
  if (params != null) {
    mergeConfigs(configs,params);
  }
  String execTime=configs.get("usage.stats.job.exec.time");
  String aggregationRange=configs.get("usage.stats.job.aggregation.range");
  String execTimeZone=configs.get("usage.execution.timezone");
  String aggreagationTimeZone=configs.get("usage.aggregation.timezone");
  String sanityCheckInterval=configs.get("usage.sanity.check.interval");
  if (sanityCheckInterval != null) {
    m_sanityCheckInterval=Integer.parseInt(sanityCheckInterval);
  }
  m_usageTimezone=TimeZone.getTimeZone(aggreagationTimeZone);
  s_logger.debug("Usage stats aggregation time zone: " + aggreagationTimeZone);
  try {
    if ((execTime == null) || (aggregationRange == null)) {
      s_logger.error("missing configuration values for usage job, usage.stats.job.exec.time = " + execTime + ", usage.stats.job.aggregation.range = "+ aggregationRange);
      throw new ConfigurationException("Missing configuration values for usage job, usage.stats.job.exec.time = " + execTime + ", usage.stats.job.aggregation.range = "+ aggregationRange);
    }
    String[] execTimeSegments=execTime.split(":");
    if (execTimeSegments.length != 2) {
      s_logger.error("Unable to parse usage.stats.job.exec.time");
      throw new ConfigurationException("Unable to parse usage.stats.job.exec.time '" + execTime + "'");
    }
    int hourOfDay=Integer.parseInt(execTimeSegments[0]);
    int minutes=Integer.parseInt(execTimeSegments[1]);
    m_jobExecTime.setTime(new Date());
    m_jobExecTime.set(Calendar.HOUR_OF_DAY,hourOfDay);
    m_jobExecTime.set(Calendar.MINUTE,minutes);
    m_jobExecTime.set(Calendar.SECOND,0);
    m_jobExecTime.set(Calendar.MILLISECOND,0);
    if (execTimeZone != null) {
      m_jobExecTime.setTimeZone(TimeZone.getTimeZone(execTimeZone));
    }
    Date execDate=m_jobExecTime.getTime();
    if (execDate.before(new Date())) {
      m_jobExecTime.roll(Calendar.DAY_OF_YEAR,true);
    }
    s_logger.debug("Execution Time: " + execDate.toString());
    Date currentDate=new Date(System.currentTimeMillis());
    s_logger.debug("Current Time: " + currentDate.toString());
    m_aggregationDuration=Integer.parseInt(aggregationRange);
    if (m_aggregationDuration < USAGE_AGGREGATION_RANGE_MIN) {
      s_logger.warn("Usage stats job aggregation range is to small, using the minimum value of " + USAGE_AGGREGATION_RANGE_MIN);
      m_aggregationDuration=USAGE_AGGREGATION_RANGE_MIN;
    }
    m_hostname=InetAddress.getLocalHost().getHostName() + "/" + InetAddress.getLocalHost().getHostAddress();
  }
 catch (  NumberFormatException ex) {
    throw new ConfigurationException("Unable to parse usage.stats.job.exec.time '" + execTime + "' or usage.stats.job.aggregation.range '"+ aggregationRange+ "', please check configuration values");
  }
catch (  Exception e) {
    s_logger.error("Unhandled exception configuring UsageManger",e);
    throw new ConfigurationException("Unhandled exception configuring UsageManager " + e.toString());
  }
  m_pid=Integer.parseInt(System.getProperty("pid"));
  return true;
}
