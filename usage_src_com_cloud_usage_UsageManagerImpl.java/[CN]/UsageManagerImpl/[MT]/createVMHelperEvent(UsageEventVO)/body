{
  long vmId=event.getResourceId();
  Long soId=event.getOfferingId();
  ;
  long zoneId=event.getZoneId();
  String vmName=event.getResourceName();
  if (EventTypes.EVENT_VM_START.equals(event.getType())) {
    try {
      SearchCriteria<UsageVMInstanceVO> sc=m_usageInstanceDao.createSearchCriteria();
      sc.addAnd("vmInstanceId",SearchCriteria.Op.EQ,Long.valueOf(vmId));
      sc.addAnd("endDate",SearchCriteria.Op.NULL);
      sc.addAnd("usageType",SearchCriteria.Op.EQ,UsageTypes.RUNNING_VM);
      List<UsageVMInstanceVO> usageInstances=m_usageInstanceDao.search(sc,null);
      if (usageInstances != null) {
        if (usageInstances.size() > 0) {
          s_logger.error("found entries for a vm running with id: " + vmId + ", which are not stopped. Ending them all...");
          for (          UsageVMInstanceVO usageInstance : usageInstances) {
            usageInstance.setEndDate(event.getCreateDate());
            m_usageInstanceDao.update(usageInstance);
          }
        }
      }
      Long templateId=event.getTemplateId();
      String hypervisorType=event.getResourceType();
      UsageVMInstanceVO usageInstanceNew=new UsageVMInstanceVO(UsageTypes.RUNNING_VM,zoneId,event.getAccountId(),vmId,vmName,soId,templateId,hypervisorType,event.getCreateDate(),null);
      m_usageInstanceDao.persist(usageInstanceNew);
    }
 catch (    Exception ex) {
      s_logger.error("Error saving usage instance for vm: " + vmId,ex);
    }
  }
 else   if (EventTypes.EVENT_VM_STOP.equals(event.getType())) {
    SearchCriteria<UsageVMInstanceVO> sc=m_usageInstanceDao.createSearchCriteria();
    sc.addAnd("vmInstanceId",SearchCriteria.Op.EQ,Long.valueOf(vmId));
    sc.addAnd("endDate",SearchCriteria.Op.NULL);
    sc.addAnd("usageType",SearchCriteria.Op.EQ,UsageTypes.RUNNING_VM);
    List<UsageVMInstanceVO> usageInstances=m_usageInstanceDao.search(sc,null);
    if (usageInstances != null) {
      if (usageInstances.size() > 1) {
        s_logger.warn("found multiple entries for a vm running with id: " + vmId + ", ending them all...");
      }
      for (      UsageVMInstanceVO usageInstance : usageInstances) {
        usageInstance.setEndDate(event.getCreateDate());
        m_usageInstanceDao.update(usageInstance);
      }
    }
  }
 else   if (EventTypes.EVENT_VM_CREATE.equals(event.getType())) {
    try {
      Long templateId=event.getTemplateId();
      String hypervisorType=event.getResourceType();
      UsageVMInstanceVO usageInstanceNew=new UsageVMInstanceVO(UsageTypes.ALLOCATED_VM,zoneId,event.getAccountId(),vmId,vmName,soId,templateId,hypervisorType,event.getCreateDate(),null);
      m_usageInstanceDao.persist(usageInstanceNew);
    }
 catch (    Exception ex) {
      s_logger.error("Error saving usage instance for vm: " + vmId,ex);
    }
  }
 else   if (EventTypes.EVENT_VM_DESTROY.equals(event.getType())) {
    SearchCriteria<UsageVMInstanceVO> sc=m_usageInstanceDao.createSearchCriteria();
    sc.addAnd("vmInstanceId",SearchCriteria.Op.EQ,Long.valueOf(vmId));
    sc.addAnd("endDate",SearchCriteria.Op.NULL);
    sc.addAnd("usageType",SearchCriteria.Op.EQ,UsageTypes.ALLOCATED_VM);
    List<UsageVMInstanceVO> usageInstances=m_usageInstanceDao.search(sc,null);
    if (usageInstances != null) {
      if (usageInstances.size() > 1) {
        s_logger.warn("found multiple entries for a vm allocated with id: " + vmId + ", detroying them all...");
      }
      for (      UsageVMInstanceVO usageInstance : usageInstances) {
        usageInstance.setEndDate(event.getCreateDate());
        m_usageInstanceDao.update(usageInstance);
      }
    }
  }
 else   if (EventTypes.EVENT_VM_UPGRADE.equals(event.getType())) {
    SearchCriteria<UsageVMInstanceVO> sc=m_usageInstanceDao.createSearchCriteria();
    sc.addAnd("vmInstanceId",SearchCriteria.Op.EQ,Long.valueOf(vmId));
    sc.addAnd("endDate",SearchCriteria.Op.NULL);
    sc.addAnd("usageType",SearchCriteria.Op.EQ,UsageTypes.ALLOCATED_VM);
    List<UsageVMInstanceVO> usageInstances=m_usageInstanceDao.search(sc,null);
    if (usageInstances != null) {
      if (usageInstances.size() > 1) {
        s_logger.warn("found multiple entries for a vm allocated with id: " + vmId + ", updating end_date for all of them...");
      }
      for (      UsageVMInstanceVO usageInstance : usageInstances) {
        usageInstance.setEndDate(event.getCreateDate());
        m_usageInstanceDao.update(usageInstance);
      }
    }
    Long templateId=event.getTemplateId();
    String hypervisorType=event.getResourceType();
    UsageVMInstanceVO usageInstanceNew=new UsageVMInstanceVO(UsageTypes.ALLOCATED_VM,zoneId,event.getAccountId(),vmId,vmName,soId,templateId,hypervisorType,event.getCreateDate(),null);
    m_usageInstanceDao.persist(usageInstanceNew);
  }
}
