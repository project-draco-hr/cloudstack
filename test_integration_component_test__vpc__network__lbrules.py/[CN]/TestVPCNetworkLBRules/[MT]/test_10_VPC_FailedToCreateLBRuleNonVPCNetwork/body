@attr(tags=['advanced', 'intervlan'])
def test_10_VPC_FailedToCreateLBRuleNonVPCNetwork(self):
    ' Test User should not be allowed to create a LB rule for a VM that does not belong to any VPC.\n        '
    network_1 = self.create_Network(self.services['network_offering'])
    vm_1 = self.create_VM_in_Network(network_1)
    vm_2 = self.create_VM_in_Network(network_1)
    network_2 = self.create_Network(self.services['network_offering_no_lb'], '10.1.2.1')
    vm_3 = self.create_VM_in_Network(network_2)
    network_3 = self.create_Network(self.services['network_offering_no_lb'], '10.1.3.1')
    vm_4 = self.create_VM_in_Network(network_3)
    self.debug(('vm_4=%s' % vm_4.id))
    public_ip_1 = self.acquire_Public_IP(network_1)
    lb_rule = self.create_LB_Rule(public_ip_1, network_1, [vm_1, vm_2])
    self.debug(('lb_rule=%s' % lb_rule.__dict__))
    self.check_wget_from_vm(vm_1, public_ip_1, testnegative=True)
    try:
        lb_rule = self.create_LB_Rule(public_ip_1, network_2, [vm_3, vm_4])
        self.fail('Successfully created LB rule for vm_3, vm_4 in network2')
    except:
        self.debug('Failed to Create LB rule vm_3 and vm_4 in network2')
    return
