@attr(tags=['advanced', 'intervlan'])
@unittest.skip('Implemented but not executed: VPC with multiple network fails to set PF rule.')
def test_02_VPC_LBRulesAndVMListing(self):
    ' Test case no 211 and 228: List only VMs suitable for the Virtual Network on VPC for LB Rule\n        '
    network_1 = self.create_Network(self.services['network_offering'])
    network_2 = self.create_Network(self.services['network_offering_no_lb'], '10.1.2.1')
    vm_1 = self.create_VM_in_Network(network_1)
    vm_2 = self.create_VM_in_Network(network_1)
    vm_3 = self.create_VM_in_Network(network_2)
    self.debug(('vm_3=%s' % vm_3.id))
    vm_4 = self.create_VM_in_Network(network_2)
    self.debug(('vm_4=%s' % vm_4.id))
    public_ip_1 = self.acquire_Public_IP(network_1)
    lb_rule = self.create_LB_Rule(public_ip_1, network_1, [vm_1, vm_2])
    lb_rules = LoadBalancerRule.list(self.apiclient, id=lb_rule.id, listall=True)
    self.failIfEqual(lb_rules, None, 'Failed to list the LB Rule')
    vms = VirtualMachine.list(self.apiclient, networkid=network_1.id, listall=True)
    self.failIfEqual(vms, None, ('Failed to list the VMs in network=%s' % network_1.name))
    return
