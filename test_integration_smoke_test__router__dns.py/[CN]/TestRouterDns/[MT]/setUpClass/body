@classmethod
def setUpClass(cls):
    cls.logger = logging.getLogger('TestRouterDns')
    cls.stream_handler = logging.StreamHandler()
    cls.logger.setLevel(logging.DEBUG)
    cls.logger.addHandler(cls.stream_handler)
    cls.testClient = super(TestRouterDns, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.logger.debug(('Creating Admin Account for domain %s on zone %s' % (cls.domain.id, cls.zone.id)))
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.logger.debug(('Creating Service Offering on zone %s' % cls.zone.id))
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.logger.debug(('Creating Network Offering on zone %s' % cls.zone.id))
    cls.services['isolated_network_offering']['egress_policy'] = 'true'
    cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['isolated_network_offering'], conservemode=True)
    cls.network_offering.update(cls.api_client, state='Enabled')
    cls.logger.debug(('Creating Network for Account %s using offering %s' % (cls.account.name, cls.network_offering.id)))
    cls.network = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.domainid, networkofferingid=cls.network_offering.id, zoneid=cls.zone.id)
    cls.logger.debug(('Creating guest VM for Account %s using offering %s' % (cls.account.name, cls.service_offering.id)))
    cls.vm = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=cls.template.id, accountid=cls.account.name, domainid=cls.domain.id, serviceofferingid=cls.service_offering.id, networkids=[str(cls.network.id)])
    cls.vm.password = 'password'
    cls.services['natrule1'] = {'privateport': 22, 'publicport': 22, 'protocol': 'TCP', }
    cls.services['configurableData'] = {'host': {'password': 'password', 'username': 'root', 'port': 22, }, 'input': 'INPUT', 'forward': 'FORWARD', }
    cls._cleanup = [cls.vm, cls.network, cls.network_offering, cls.service_offering, cls.account]
