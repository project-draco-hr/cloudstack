{
  List<Long> capacityOrderedIds=capacityInfo.first();
  List<Long> vmCountOrderedIds=vmCountInfo.first();
  Map<Long,Double> capacityMap=capacityInfo.second();
  Map<Long,Double> vmCountMap=vmCountInfo.second();
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Capacity Id list: " + capacityOrderedIds + " , capacityMap:"+ capacityMap);
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Vm Count Id list: " + vmCountOrderedIds + " , vmCountMap:"+ vmCountMap);
  }
  List<Long> idsReorderedByWeights=new ArrayList<Long>();
  float capacityWeight=(1.0f - _userDispersionWeight);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Applying userDispersionWeight: " + _userDispersionWeight);
  }
  LinkedHashMap<Long,Double> normalisedVmCountIdMap=new LinkedHashMap<Long,Double>();
  Long totalVmsOfAccount=_vmInstanceDao.countRunningByAccount(accountId);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Total VMs for account: " + totalVmsOfAccount);
  }
  for (  Long id : vmCountOrderedIds) {
    Double normalisedCount=vmCountMap.get(id) / totalVmsOfAccount;
    normalisedVmCountIdMap.put(id,normalisedCount);
  }
  SortedMap<Double,List<Long>> sortedMap=new TreeMap<Double,List<Long>>();
  for (  Long id : capacityOrderedIds) {
    Double weightedCapacityValue=capacityMap.get(id) * capacityWeight;
    Double weightedVmCountValue=normalisedVmCountIdMap.get(id) * _userDispersionWeight;
    Double totalWeight=weightedCapacityValue + weightedVmCountValue;
    if (sortedMap.containsKey(totalWeight)) {
      List<Long> idList=sortedMap.get(totalWeight);
      idList.add(id);
      sortedMap.put(totalWeight,idList);
    }
 else {
      List<Long> idList=new ArrayList<Long>();
      idList.add(id);
      sortedMap.put(totalWeight,idList);
    }
  }
  for (  List<Long> idList : sortedMap.values()) {
    idsReorderedByWeights.addAll(idList);
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("Reordered Id list: " + idsReorderedByWeights);
  }
  return idsReorderedByWeights;
}
