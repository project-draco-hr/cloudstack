@attr(tags=['advanced', 'basic'])
@attr(required_hardware='false')
@attr(storage='s3')
def test_es_1863_register_template_s3_domain_admin_user(self):
    '\n        @Desc: Test whether cloudstack allows Domain admin or user to register a template using\n        S3/Swift object store.\n        @Steps:\n        Step1: create a Domain and users in it.\n        Step2: Register a template as Domain admin.\n        Step3: Register a template as Domain user.\n        Step4: Template should be registered successfully.\n        '
    self.newdomain = Domain.create(self.apiClient, self.services['domain'])
    self.account_domain = Account.create(self.apiClient, self.services['account'], domainid=self.newdomain.id)
    self.cleanup.append(self.account_domain)
    self.cleanup.append(self.newdomain)
    self.domain_user = self.account_domain.user[0]
    self.domain_userapiclient = self.testClient.getUserApiClient(self.domain_user.username, self.newdomain.name)
    self.services['templateregister']['ostype'] = self.services['ostype']
    self.domain_template = Template.register(self.apiClient, self.services['templateregister'], zoneid=self.zone.id, account=self.account_domain.name, domainid=self.newdomain.id, hypervisor=self.hypervisor)
    self.domain_template.download(self.api_client)
    time.sleep(60)
    self.domain_user_template = Template.register(self.domain_userapiclient, self.services['templateregister'], zoneid=self.zone.id, account=self.account_domain.name, domainid=self.newdomain.id, hypervisor=self.hypervisor)
    self.domain_user_template.download(self.api_client)
    time.sleep(60)
    return
