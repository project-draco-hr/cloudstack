{
  List<Pair<String,Class<? extends HostAllocator>>> hostAllocators=new ArrayList<Pair<String,Class<? extends HostAllocator>>>();
  hostAllocators.add(new Pair<String,Class<? extends HostAllocator>>("FirstFitRouting",RecreateHostAllocator.class));
  addAdapterChain(HostAllocator.class,hostAllocators);
  List<Pair<String,Class<? extends StoragePoolAllocator>>> poolAllocators=new ArrayList<Pair<String,Class<? extends StoragePoolAllocator>>>();
  poolAllocators.add(new Pair<String,Class<? extends StoragePoolAllocator>>("LocalStorage",LocalStoragePoolAllocator.class));
  poolAllocators.add(new Pair<String,Class<? extends StoragePoolAllocator>>("Storage",FirstFitStoragePoolAllocator.class));
  poolAllocators.add(new Pair<String,Class<? extends StoragePoolAllocator>>("GarbageCollecting",GarbageCollectingStoragePoolAllocator.class));
  addAdapterChain(StoragePoolAllocator.class,poolAllocators);
  List<Pair<String,Class<? extends NetworkGuru>>> networkGurus=new ArrayList<Pair<String,Class<? extends NetworkGuru>>>();
  networkGurus.add(new Pair<String,Class<? extends NetworkGuru>>("GuestNetworkGuru",GuestNetworkGuru.class));
  networkGurus.add(new Pair<String,Class<? extends NetworkGuru>>("PublicNetworkGuru",PublicNetworkGuru.class));
  networkGurus.add(new Pair<String,Class<? extends NetworkGuru>>("PodBasedNetworkGuru",PodBasedNetworkGuru.class));
  networkGurus.add(new Pair<String,Class<? extends NetworkGuru>>("ControlNetworkGuru",ControlNetworkGuru.class));
  addAdapterChain(NetworkGuru.class,networkGurus);
  addOneAdapter(PodAllocator.class,"UserConcentratedPodAllocator",UserConcentratedAllocator.class);
  addOneAdapter(ConsoleProxyAllocator.class,"ConsoleProxyBalanceAllocator",ConsoleProxyBalanceAllocator.class);
  addOneAdapter(SecondaryStorageVmAllocator.class,"SecondaryStorageVmDefaultBalance",SecondaryStorageVmDefaultAllocator.class);
  addOneAdapter(IpAddrAllocator.class,"BasicExternalIpAddressAllocator",ExteralIpAddressAllocator.class);
  addOneAdapter(UserAuthenticator.class,"MD5UserAuthenticator",MD5UserAuthenticator.class);
  List<Pair<String,Class<? extends Investigator>>> investigators=new ArrayList<Pair<String,Class<? extends Investigator>>>();
  investigators.add(new Pair<String,Class<? extends Investigator>>("SimpleInvestigator",CheckOnAgentInvestigator.class));
  investigators.add(new Pair<String,Class<? extends Investigator>>("XenServerInvestigator",XenServerInvestigator.class));
  investigators.add(new Pair<String,Class<? extends Investigator>>("PingInvestigator",InvestigatorImpl.class));
  addAdapterChain(Investigator.class,investigators);
  addOneAdapter(FenceBuilder.class,"StorageFenceBuilder",StorageFence.class);
  List<Pair<String,Class<? extends Discoverer>>> discovers=new ArrayList<Pair<String,Class<? extends Discoverer>>>();
  discovers.add(new Pair<String,Class<? extends Discoverer>>("XCP Agent",XcpServerDiscoverer.class));
  discovers.add(new Pair<String,Class<? extends Discoverer>>("SecondaryStorage",SecondaryStorageDiscoverer.class));
  discovers.add(new Pair<String,Class<? extends Discoverer>>("KVM Agent",KvmServerDiscoverer.class));
  addAdapterChain(Discoverer.class,discovers);
  addOneAdapter(SecurityChecker.class,"DomainChecker",DomainChecker.class);
  addOneAdapter(DeploymentPlanner.class,"SimpleDeploymentPlanner",SimplePlanner.class);
}
