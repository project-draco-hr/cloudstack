{
  boolean result=false;
  try {
    _vpcService.validateNtkwOffForVpc(1,"0.0.0.0","111-",new AccountVO(),_vpcService.getVpc(1),2L,"10.1.1.1");
    result=true;
    s_logger.debug("Test1 passed, the offering is valid for vpc creation");
  }
 catch (  Exception ex) {
    s_logger.warn("Test1 failed due to exc ",ex);
  }
  result=false;
  try {
    _vpcService.validateNtkwOffForVpc(2,"0.0.0.0","111-",new AccountVO(),_vpcService.getVpc(1),2L,"10.1.1.1");
    result=true;
  }
 catch (  InvalidParameterValueException ex) {
  }
 finally {
    if (!result) {
      s_logger.debug("Test2 passed, can't use network offering without SourceNat service");
    }
 else {
      s_logger.warn("Test2 failed, can't use network offering without SourceNat service");
    }
  }
  result=false;
  try {
    _vpcService.validateNtkwOffForVpc(3,"0.0.0.0","111-",new AccountVO(),_vpcService.getVpc(1),2L,"10.1.1.1");
    result=true;
  }
 catch (  InvalidParameterValueException ex) {
  }
 finally {
    if (!result) {
      s_logger.debug("Test3 passed, can't use network offering without conserve mode = true");
    }
 else {
      s_logger.warn("Test3 failed, can't use network offering without conserve mode = true");
    }
  }
  result=false;
  try {
    _vpcService.validateNtkwOffForVpc(4,"0.0.0.0","111-",new AccountVO(),_vpcService.getVpc(1),2L,"10.1.1.1");
    result=true;
  }
 catch (  InvalidParameterValueException ex) {
  }
 finally {
    if (!result) {
      s_logger.debug("Test4 passed, can't use network offering with guest type = Shared");
    }
 else {
      s_logger.warn("Test4 failed, can't use network offering with guest type = Shared");
    }
  }
}
