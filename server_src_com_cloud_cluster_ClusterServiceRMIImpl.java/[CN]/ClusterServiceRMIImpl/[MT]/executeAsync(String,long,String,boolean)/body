{
  if (s_logger.isInfoEnabled())   s_logger.info("Execute Async command forwarded from peer : " + callingPeer);
  Command[] cmds=null;
  try {
    cmds=gson.fromJson(gsonPackage,Command[].class);
  }
 catch (  Throwable e) {
    assert(false);
  }
  Listener listener=new ClusterAsyncExectuionListener(manager,callingPeer);
  try {
    return manager.sendToAgent(agentId,cmds,stopOnError,listener);
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn("Agent is unavailable",e);
    return -1;
  }
}
