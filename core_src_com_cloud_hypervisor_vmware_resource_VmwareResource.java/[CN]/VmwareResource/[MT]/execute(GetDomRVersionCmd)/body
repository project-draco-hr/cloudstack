{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Executing resource GetDomRVersionCmd: " + _gson.toJson(cmd));
    s_logger.debug("Run command on domR " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + ", /opt/cloud/bin/get_template_version.sh ");
  }
  Pair<Boolean,String> result;
  try {
    VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    result=SshHelper.sshExecute(cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP),DEFAULT_DOMR_SSHPORT,"root",mgr.getSystemVMKeyFile(),null,"/opt/cloud/bin/get_template_version.sh ");
    if (!result.first()) {
      s_logger.error("GetDomRVersionCmd on domR " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + " failed, message: "+ result.second());
      return new GetDomRVersionAnswer(cmd,"GetDomRVersionCmd failed due to " + result.second());
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("GetDomRVersionCmd on domain router " + cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP) + " completed");
    }
  }
 catch (  Throwable e) {
    String msg="GetDomRVersionCmd failed due to " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new GetDomRVersionAnswer(cmd,msg);
  }
  String[] lines=result.second().split("&");
  if (lines.length != 2) {
    return new GetDomRVersionAnswer(cmd,result.second());
  }
  return new GetDomRVersionAnswer(cmd,result.second(),lines[0],lines[1]);
}
