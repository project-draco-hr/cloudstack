{
  _name=name;
  _url=(String)params.get("url");
  _username=(String)params.get("username");
  _password=(String)params.get("password");
  _dcId=(String)params.get("zone");
  _pod=(String)params.get("pod");
  _cluster=(String)params.get("cluster");
  _guid=(String)params.get("guid");
  String[] tokens=_guid.split("@");
  _vCenterAddress=tokens[1];
  _morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(":");
  _morHyperHost.setType(hostTokens[0]);
  _morHyperHost.set_value(hostTokens[1]);
  VmwareContext context=getServiceContext();
  try {
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef("Datastore",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef("Network",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef("VirtualMachine",CustomFieldConstants.CLOUD_NIC_MASK);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
    Map<String,String> vsmCredentials;
    if (mgr.getNexusVSwitchGlobalParameter()) {
      vsmCredentials=mgr.getNexusVSMCredentialsByClusterId(Long.parseLong(_cluster));
      if (vsmCredentials != null) {
        s_logger.info("Stocking credentials while configuring resource.");
        context.registerStockObject("vsmcredentials",vsmCredentials);
      }
      if (mgr.getPrivateVSwitchTypeGlobalParameter().equalsIgnoreCase("nexus"))       _privateNetworkVSwitchName=mgr.getPrivateVSwitchName(Long.parseLong(_dcId),HypervisorType.VMware);
      if (mgr.getPublicVSwitchTypeGlobalParameter().equalsIgnoreCase("nexus"))       _publicNetworkVSwitchName=mgr.getPublicVSwitchName(Long.parseLong(_dcId),HypervisorType.VMware);
      if (mgr.getGuestVSwitchTypeGlobalParameter().equalsIgnoreCase("nexus"))       _guestNetworkVSwitchName=mgr.getGuestVSwitchName(Long.parseLong(_dcId),HypervisorType.VMware);
    }
  }
 catch (  Exception e) {
    s_logger.error("Unexpected Exception ",e);
  }
  if (_privateNetworkVSwitchName == null) {
    _privateNetworkVSwitchName=(String)params.get("private.network.vswitch.name");
  }
  if (_publicNetworkVSwitchName == null) {
    _publicNetworkVSwitchName=(String)params.get("public.network.vswitch.name");
  }
  if (_guestNetworkVSwitchName == null) {
    _guestNetworkVSwitchName=(String)params.get("guest.network.vswitch.name");
  }
  String value=(String)params.get("cpu.overprovisioning.factor");
  if (value != null)   _cpuOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get("vmware.reserve.cpu");
  if (value != null && value.equalsIgnoreCase("true"))   _reserveCpu=true;
  value=(String)params.get("vmware.recycle.hung.wokervm");
  if (value != null && value.equalsIgnoreCase("true"))   _recycleHungWorker=true;
  value=(String)params.get("mem.overprovisioning.factor");
  if (value != null)   _memOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get("vmware.reserve.mem");
  if (value != null && value.equalsIgnoreCase("true"))   _reserveMem=true;
  value=(String)params.get("vmware.root.disk.controller");
  if (value != null && value.equalsIgnoreCase("scsi"))   _rootDiskController=DiskControllerType.scsi;
 else   _rootDiskController=DiskControllerType.ide;
  value=params.get("vmware.use.nexus.vswitch").toString();
  if (value != null && value.equalsIgnoreCase("true"))   _nexusVSwitch=true;
  value=(String)params.get("private.network.vswitch.type");
  if (value != null && value.equalsIgnoreCase("standard"))   _privateNetworkVSwitchType=VirtualSwitchType.StandardVirtualSwitch;
 else   if (value != null && value.equalsIgnoreCase("nexus"))   _privateNetworkVSwitchType=VirtualSwitchType.NexusDistributedVirtualSwitch;
 else   _privateNetworkVSwitchType=VirtualSwitchType.VMwareDistributedVirtualSwitch;
  value=(String)params.get("public.network.vswitch.type");
  if (value != null && value.equalsIgnoreCase("standard"))   _publicNetworkVSwitchType=VirtualSwitchType.StandardVirtualSwitch;
 else   if (value != null && value.equalsIgnoreCase("nexus"))   _publicNetworkVSwitchType=VirtualSwitchType.NexusDistributedVirtualSwitch;
 else   _publicNetworkVSwitchType=VirtualSwitchType.VMwareDistributedVirtualSwitch;
  value=(String)params.get("guest.network.vswitch.type");
  if (value != null && value.equalsIgnoreCase("standard"))   _guestNetworkVSwitchType=VirtualSwitchType.StandardVirtualSwitch;
 else   if (value != null && value.equalsIgnoreCase("nexus"))   _guestNetworkVSwitchType=VirtualSwitchType.NexusDistributedVirtualSwitch;
 else   _guestNetworkVSwitchType=VirtualSwitchType.VMwareDistributedVirtualSwitch;
  s_logger.info("VmwareResource network configuration info. private vSwitch: " + _privateNetworkVSwitchName + ", public vSwitch: "+ _publicNetworkVSwitchName+ ", guest network: "+ _guestNetworkVSwitchName);
  return true;
}
