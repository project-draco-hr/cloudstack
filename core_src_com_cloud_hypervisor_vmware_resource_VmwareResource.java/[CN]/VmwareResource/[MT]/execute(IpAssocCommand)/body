{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource IPAssocCommand: " + _gson.toJson(cmd));
  }
  int i=0;
  String[] results=new String[cmd.getIpAddresses().length];
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    IpAddressTO[] ips=cmd.getIpAddresses();
    String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
    String controlIp=VmwareResource.getRouterSshControlIp(cmd);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(routerName);
    if (vmMo == null) {
      String msg="Router " + routerName + " no longer exists to execute IPAssoc command";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    for (    IpAddressTO ip : ips) {
      assignPublicIpAddress(vmMo,routerName,controlIp,ip.getPublicIp(),ip.isAdd(),ip.isFirstIP(),ip.isSourceNat(),ip.getVlanId(),ip.getVlanGateway(),ip.getVlanNetmask(),ip.getVifMacAddress(),ip.getGuestIp());
      results[i++]=ip.getPublicIp() + " - success";
    }
  }
 catch (  Throwable e) {
    s_logger.error("Unexpected exception: " + e.toString() + " will shortcut rest of IPAssoc commands",e);
    for (; i < cmd.getIpAddresses().length; i++) {
      results[i++]=IpAssocAnswer.errorResult;
    }
  }
  return new IpAssocAnswer(cmd,results);
}
