@attr(tags=['advanced', 'redundancy'], required_hardware='false')
def test_09_create_redundant_vpc_offering(self):
    self.debug('Creating Redundant VPC offering')
    vpc_off = VpcOffering.create(self.apiclient, self.services['redundant_vpc_offering'])
    self.cleanup.append(vpc_off)
    self.debug('Check if the Redundant VPC offering is created successfully?')
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the created Redundant VPC offering')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('Creating a Redundant VPC network in the account: %s' % self.account.name))
    vpc = VPC.create(self.apiclient, self.services['redundant_vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.debug('Validating Redundant VPC Nw creation')
    self.validate_vpc_network(vpc)
    vpcs = VPC.list(self.apiclient, id=vpc.id)
    found = False
    redundant = False
    for iVpc in vpcs:
        if (iVpc.id == vpc.id):
            found = True
            if iVpc.redundantvpcrouter:
                redundant = True
            break
    self.assertEqual(redundant, True, "Didn't create any Redundant Vpc")
    return
