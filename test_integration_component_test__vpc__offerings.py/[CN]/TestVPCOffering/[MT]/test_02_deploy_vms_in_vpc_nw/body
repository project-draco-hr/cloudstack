@attr(tags=['advanced', 'intervlan'])
@unittest.skip("Skipping - Issue: Deleting account doesn't clean VPC")
def test_02_deploy_vms_in_vpc_nw(self):
    'Test deploy virtual machines in VPC networks'
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self._cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.validate_vpc_network(vpc)
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.network_offering.update(self.apiclient, state='Enabled')
    self._cleanup.append(self.network_offering)
    gateway = vpc.cidr.split('/')[0]
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id, gateway=gateway, vpcid=vpc.id)
    self.debug(('Created network with ID: %s' % network.id))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip.ipaddress.ipaddress, network.id)))
    self.debug(('Creating LB rule for IP address: %s' % public_ip.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account.name, networkid=network.id, vpcid=vpc.id, domainid=self.account.domainid)
    self.debug(('Associating public IP for network: %s' % vpc.name))
    public_ip_2 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_2.ipaddress.ipaddress, network.id)))
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule'], ipaddressid=public_ip_2.ipaddress.id, openfirewall=False, networkid=network.id, vpcid=vpc.id)
    self.debug('Adding NetwrokACl rules to make PF and LB accessible')
    networkacl_1 = NetworkACL.create(self.apiclient, networkid=network.id, services=self.services['natrule'], traffictype='Ingress')
    networkacl_2 = NetworkACL.create(self.apiclient, networkid=network.id, services=self.services['lbrule'], traffictype='Ingress')
    self.debug('Checking if we can SSH into VM?')
    try:
        virtual_machine.get_ssh_client(ipaddress=public_ip_2.ipaddress.ipaddress)
        self.debug('SSH into VM is successfully')
    except Exception as e:
        self.fail(('Failed to SSH into VM - %s, %s' % (public_ip_2.ipaddress.ipaddress, e)))
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip_3 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id, vpcid=vpc.id)
    self.debug(('Associated %s with network %s' % (public_ip_3.ipaddress.ipaddress, network.id)))
    self.debug(('Enabling static NAT for IP: %s' % public_ip_3.ipaddress.ipaddress))
    try:
        StaticNATRule.enable(self.apiclient, ipaddressid=public_ip_3.ipaddress.id, virtualmachineid=virtual_machine.id, networkid=network.id)
        self.debug(('Static NAT enabled for IP: %s' % public_ip_3.ipaddress.ipaddress))
    except Exception as e:
        self.fail(('Failed to enable static NAT on IP: %s - %s' % (public_ip_3.ipaddress.ipaddress, e)))
    public_ips = PublicIPAddress.list(self.apiclient, networkid=network.id, listall=True, isstaticnat=True, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(public_ips, list), True, 'List public Ip for network should list the Ip addr')
    self.assertEqual(public_ips[0].ipaddress, public_ip_3.ipaddress.ipaddress, 'List public Ip for network should list the Ip addr')
    return
