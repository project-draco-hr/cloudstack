@attr(tags=['advanced', 'intervlan'])
def test_07_update_vpc_off(self):
    'Test update VPC offering'
    self.debug('Creating a VPC offering..')
    vpc_off = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self.cleanup.append(vpc_off)
    self.validate_vpc_offering(vpc_off)
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Disabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.account.name))
    with self.assertRaises(Exception):
        VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug('VPC network creation failed! (Test succeeded)')
    self.debug('Enabling the VPC offering created')
    vpc_off.update(self.apiclient, state='Enabled')
    self.debug(('creating a VPC network in the account: %s' % self.account.account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=vpc_off.id, zoneid=self.zone.id, account=self.account.account.name, domainid=self.account.account.domainid)
    self.validate_vpc_network(vpc)
    self.debug('Updating name & display text of the vpc offering created')
    new_name = random_gen()
    new_displaytext = random_gen()
    try:
        vpc_off.update(self.apiclient, name=new_name, displaytext=new_displaytext)
    except Exception as e:
        self.fail(('Failed to update VPC offering- %s' % e))
    self.debug('Cheking if the changes are reflected to listVPC call?')
    vpc_offs = vpc_off.list(self.apiclient, id=vpc_off.id, listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid list')
    list_reposnse_vpc = vpc_offs[0]
    self.assertEqual(list_reposnse_vpc.name, new_name, 'VPC off Name should be updated with new one')
    self.assertEqual(list_reposnse_vpc.displaytext, new_displaytext, 'VPC off display text should be updated with new one')
    return
