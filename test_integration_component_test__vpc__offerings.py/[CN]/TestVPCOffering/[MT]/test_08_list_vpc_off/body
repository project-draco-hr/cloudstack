@attr(tags=['advanced', 'intervlan'])
def test_08_list_vpc_off(self):
    'Test list VPC offering'
    self.debug('Creating multiple VPC offerings')
    self.services['vpc_offering']['supportedservices'] = 'SourceNat'
    vpc_off_1 = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self.cleanup.append(vpc_off_1)
    self.validate_vpc_offering(vpc_off_1)
    self.debug('Disabling the VPC offering created')
    vpc_off_1.update(self.apiclient, state='Disabled')
    vpc_off_2 = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self.cleanup.append(vpc_off_2)
    self.validate_vpc_offering(vpc_off_2)
    self.debug('Enabling the VPC offering created')
    vpc_off_2.update(self.apiclient, state='Enabled')
    vpc_off_3 = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self.cleanup.append(vpc_off_3)
    self.validate_vpc_offering(vpc_off_3)
    self.debug('Enabling the VPC offering created')
    vpc_off_3.update(self.apiclient, state='Enabled')
    vpc_off_4 = VpcOffering.create(self.apiclient, self.services['vpc_offering'])
    self.cleanup.append(vpc_off_4)
    self.debug('Enabling the VPC offering created')
    vpc_off_4.update(self.apiclient, state='Enabled')
    self.debug(('Deleting the VPC offering: %s' % vpc_off_4.name))
    vpc_off_4.delete(self.apiclient)
    self.debug('Cheking if listVPCOff return the deleted VPC off')
    vpc_offs = VpcOffering.list(self.apiclient, id=vpc_off_4.id, listall=True)
    self.assertEqual(vpc_offs, None, 'List VPC offerings should nt return any response for deleted offering')
    self.debug('Validating the listVPCOfferings repsonse by ids')
    self.validate_vpc_offering(vpc_off_3)
    self.debug('ListVPCOfferings by displaytext & verifying the response')
    vpc_offs = VpcOffering.list(self.apiclient, displaytext=vpc_off_3.displaytext, listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid response')
    list_vpc_off_response = vpc_offs[0]
    self.assertIn(vpc_off_3.id, [vpc.id for vpc in vpc_offs], 'ListVPC Off with displaytext should return same VPC off')
    self.debug('ListVPCOfferings by name and verifying the response')
    vpc_offs = VpcOffering.list(self.apiclient, name=vpc_off_2.name, listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid response')
    list_vpc_off_response = vpc_offs[0]
    self.assertEqual(list_vpc_off_response.id, vpc_off_2.id, 'ListVPC Off with name should return same VPC off')
    self.debug('ListVPCOfferings by supported services & verifying the response')
    vpc_offs = VpcOffering.list(self.apiclient, supportedservices='SourceNat', listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid response')
    for vpc_off in vpc_offs:
        self.debug(vpc_off)
        self.assertEqual(('SourceNat' in str(vpc_off)), True, 'ListVPC Off with name should return same VPC off')
    self.debug('ListVPCOfferings by state & verifying the response')
    vpc_offs = VpcOffering.list(self.apiclient, state='Enabled', listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid response')
    for vpc_off in vpc_offs:
        self.assertEqual(vpc_off.state, 'Enabled', 'List VPC offering should return only offerings that are enabled')
    self.debug('ListVPCOfferings by state & verifying the response')
    vpc_offs = VpcOffering.list(self.apiclient, state='Disabled', listall=True)
    self.assertEqual(isinstance(vpc_offs, list), True, 'List VPC offerings shall return a valid response')
    for vpc_off in vpc_offs:
        self.assertEqual(vpc_off.state, 'Disabled', 'List VPC offering should return only offerings that are disabled')
    return
