@attr(tags=['advanced', 'intervlan'])
def test_06_network_services_VPC_DeleteAllMultiplePF(self):
    ' Test case no 233: Delete all Static NAT rules for two/multiple virtual networks of a VPC. \n            Observe the status of the Public IP Addresses of the rules when the Virtual Router is in Running State.\n        '
    network_1 = self.create_Network(self.services['network_offering'])
    network_2 = self.create_Network(self.services['network_offering_no_lb'], '10.1.2.1')
    vm_1 = self.create_VM_in_Network(network_1)
    vm_2 = self.create_VM_in_Network(network_1)
    vm_3 = self.create_VM_in_Network(network_2)
    vm_4 = self.create_VM_in_Network(network_2)
    public_ip_1 = self.acquire_Public_IP(network_1)
    public_ip_2 = self.acquire_Public_IP(network_1)
    nat_rule1 = self.create_NatRule_For_VM(vm_1, public_ip_1, network_1)
    nat_rule2 = self.create_NatRule_For_VM(vm_2, public_ip_2, network_1)
    http_rule1 = self.create_egress_Internet_Rule(network_1)
    nat_rule3 = self.create_NatRule_For_VM(vm_3, public_ip_1, network_2)
    nat_rule4 = self.create_NatRule_For_VM(vm_4, public_ip_2, network_2)
    http_rule2 = self.create_egress_Internet_Rule(network_2)
    self.check_ssh_into_vm(vm_1, public_ip_1, testnegative=False)
    self.check_ssh_into_vm(vm_2, public_ip_2, testnegative=False)
    self.check_ssh_into_vm(vm_3, public_ip_1, testnegative=False)
    self.check_ssh_into_vm(vm_4, public_ip_2, testnegative=False)
    self.check_wget_from_vm(vm_1, public_ip_1, testnegative=False)
    self.check_wget_from_vm(vm_2, public_ip_2, testnegative=False)
    self.check_wget_from_vm(vm_3, public_ip_1, testnegative=False)
    self.check_wget_from_vm(vm_4, public_ip_2, testnegative=False)
    nat_rule1.delete(self.apiclient)
    nat_rule2.delete(self.apiclient)
    nat_rule3.delete(self.apiclient)
    nat_rule4.delete(self.apiclient)
    http_rule1.delete(self.apiclient)
    http_rule2.delete(self.apiclient)
    self.check_ssh_into_vm(vm_1, public_ip_1, testnegative=True)
    self.check_ssh_into_vm(vm_2, public_ip_2, testnegative=True)
    self.check_ssh_into_vm(vm_3, public_ip_1, testnegative=True)
    self.check_ssh_into_vm(vm_4, public_ip_2, testnegative=True)
    self.check_wget_from_vm(vm_1, public_ip_1, testnegative=True)
    self.check_wget_from_vm(vm_2, public_ip_2, testnegative=True)
    self.check_wget_from_vm(vm_3, public_ip_1, testnegative=True)
    self.check_wget_from_vm(vm_4, public_ip_2, testnegative=True)
    return
