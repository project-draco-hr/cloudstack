@staticmethod
def delete_all_network_rules_for_vm(vm_name, vif=None):
    OvmSecurityGroup.delete_iptables_rules_for_vm(vm_name)
    OvmSecurityGroup.delete_ebtables_rules_for_vm(vm_name)
    vm_chain = vm_name
    default_vm_chain = None
    if (vm_name.startswith('i-') or vm_name.startswith('r-')):
        default_vm_chain = ('-'.join(vm_name.split('-')[:(-1)]) + '-def')
    try:
        if (default_vm_chain != None):
            execute(('iptables -F ' + default_vm_chain))
    except:
        logging.debug(('Ignoring failure to delete chain ' + default_vm_chain))
    try:
        if (default_vm_chain != None):
            execute(('iptables -X ' + vmchain_default))
    except:
        logging.debug(('Ignoring failure to delete chain ' + default_vm_chain))
    try:
        execute(('iptables -F ' + vm_chain))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vm_chain))
    try:
        execute(('iptables -X ' + vm_chain))
    except:
        logging.debug(('Ignoring failure to delete  chain ' + vm_chain))
    if (vif is not None):
        try:
            dnats = execute((('iptables-save -t nat | grep ' + vif) + " | sed 's/-A/-D/'")).split('\n')
            for dnat in dnats:
                try:
                    execute(('iptables -t nat ' + dnat))
                except:
                    logging.debug(('Igoring failure to delete dnat: ' + dnat))
        except:
            pass
    OvmSecurityGroup.remove_rule_log_for_vm(vm_name)
    if (1 in [vm_name.startswith(c) for c in ['r-', 's-', 'v-']]):
        return True
    return True
