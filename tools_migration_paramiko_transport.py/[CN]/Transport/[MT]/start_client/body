def start_client(self, event=None):
    '\n        Negotiate a new SSH2 session as a client.  This is the first step after\n        creating a new L{Transport}.  A separate thread is created for protocol\n        negotiation.\n\n        If an event is passed in, this method returns immediately.  When\n        negotiation is done (successful or not), the given C{Event} will\n        be triggered.  On failure, L{is_active} will return C{False}.\n\n        (Since 1.4) If C{event} is C{None}, this method will not return until\n        negotation is done.  On success, the method returns normally.\n        Otherwise an SSHException is raised.\n\n        After a successful negotiation, you will usually want to authenticate,\n        calling L{auth_password <Transport.auth_password>} or\n        L{auth_publickey <Transport.auth_publickey>}.\n\n        @note: L{connect} is a simpler method for connecting as a client.\n\n        @note: After calling this method (or L{start_server} or L{connect}),\n            you should no longer directly read from or write to the original\n            socket object.\n\n        @param event: an event to trigger when negotiation is complete\n            (optional)\n        @type event: threading.Event\n\n        @raise SSHException: if negotiation fails (and no C{event} was passed\n            in)\n        '
    self.active = True
    if (event is not None):
        self.completion_event = event
        self.start()
        return
    self.completion_event = event = threading.Event()
    self.start()
    while True:
        event.wait(0.1)
        if (not self.active):
            e = self.get_exception()
            if (e is not None):
                raise e
            raise SSHException('Negotiation failed.')
        if event.isSet():
            break
