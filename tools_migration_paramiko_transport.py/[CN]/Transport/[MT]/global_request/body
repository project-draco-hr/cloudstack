def global_request(self, kind, data=None, wait=True):
    '\n        Make a global request to the remote host.  These are normally\n        extensions to the SSH2 protocol.\n\n        @param kind: name of the request.\n        @type kind: str\n        @param data: an optional tuple containing additional data to attach\n            to the request.\n        @type data: tuple\n        @param wait: C{True} if this method should not return until a response\n            is received; C{False} otherwise.\n        @type wait: bool\n        @return: a L{Message} containing possible additional data if the\n            request was successful (or an empty L{Message} if C{wait} was\n            C{False}); C{None} if the request was denied.\n        @rtype: L{Message}\n        '
    if wait:
        self.completion_event = threading.Event()
    m = Message()
    m.add_byte(chr(MSG_GLOBAL_REQUEST))
    m.add_string(kind)
    m.add_boolean(wait)
    if (data is not None):
        m.add(*data)
    self._log(DEBUG, ('Sending global request "%s"' % kind))
    self._send_user_message(m)
    if (not wait):
        return None
    while True:
        self.completion_event.wait(0.1)
        if (not self.active):
            return None
        if self.completion_event.isSet():
            break
    return self.global_response
