def connect(self, hostkey=None, username='', password=None, pkey=None):
    "\n        Negotiate an SSH2 session, and optionally verify the server's host key\n        and authenticate using a password or private key.  This is a shortcut\n        for L{start_client}, L{get_remote_server_key}, and\n        L{Transport.auth_password} or L{Transport.auth_publickey}.  Use those\n        methods if you want more control.\n\n        You can use this method immediately after creating a Transport to\n        negotiate encryption with a server.  If it fails, an exception will be\n        thrown.  On success, the method will return cleanly, and an encrypted\n        session exists.  You may immediately call L{open_channel} or\n        L{open_session} to get a L{Channel} object, which is used for data\n        transfer.\n\n        @note: If you fail to supply a password or private key, this method may\n        succeed, but a subsequent L{open_channel} or L{open_session} call may\n        fail because you haven't authenticated yet.\n\n        @param hostkey: the host key expected from the server, or C{None} if\n            you don't want to do host key verification.\n        @type hostkey: L{PKey<pkey.PKey>}\n        @param username: the username to authenticate as.\n        @type username: str\n        @param password: a password to use for authentication, if you want to\n            use password authentication; otherwise C{None}.\n        @type password: str\n        @param pkey: a private key to use for authentication, if you want to\n            use private key authentication; otherwise C{None}.\n        @type pkey: L{PKey<pkey.PKey>}\n\n        @raise SSHException: if the SSH2 negotiation fails, the host key\n            supplied by the server is incorrect, or authentication fails.\n        "
    if (hostkey is not None):
        self._preferred_keys = [hostkey.get_name()]
    self.start_client()
    if (hostkey is not None):
        key = self.get_remote_server_key()
        if ((key.get_name() != hostkey.get_name()) or (str(key) != str(hostkey))):
            self._log(DEBUG, 'Bad host key from server')
            self._log(DEBUG, ('Expected: %s: %s' % (hostkey.get_name(), repr(str(hostkey)))))
            self._log(DEBUG, ('Got     : %s: %s' % (key.get_name(), repr(str(key)))))
            raise SSHException('Bad host key from server')
        self._log(DEBUG, ('Host key verified (%s)' % hostkey.get_name()))
    if ((pkey is not None) or (password is not None)):
        if (password is not None):
            self._log(DEBUG, 'Attempting password auth...')
            self.auth_password(username, password)
        else:
            self._log(DEBUG, 'Attempting public-key auth...')
            self.auth_publickey(username, pkey)
    return
