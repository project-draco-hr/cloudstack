def auth_publickey(self, username, key, event=None):
    "\n        Authenticate to the server using a private key.  The key is used to\n        sign data from the server, so it must include the private part.\n\n        If an C{event} is passed in, this method will return immediately, and\n        the event will be triggered once authentication succeeds or fails.  On\n        success, L{is_authenticated} will return C{True}.  On failure, you may\n        use L{get_exception} to get more detailed error information.\n\n        Since 1.1, if no event is passed, this method will block until the\n        authentication succeeds or fails.  On failure, an exception is raised.\n        Otherwise, the method simply returns.\n\n        If the server requires multi-step authentication (which is very rare),\n        this method will return a list of auth types permissible for the next\n        step.  Otherwise, in the normal case, an empty list is returned.\n\n        @param username: the username to authenticate as\n        @type username: string\n        @param key: the private key to authenticate with\n        @type key: L{PKey <pkey.PKey>}\n        @param event: an event to trigger when the authentication attempt is\n            complete (whether it was successful or not)\n        @type event: threading.Event\n        @return: list of auth types permissible for the next stage of\n            authentication (normally empty)\n        @rtype: list\n\n        @raise BadAuthenticationType: if public-key authentication isn't\n            allowed by the server for this user (and no event was passed in)\n        @raise AuthenticationException: if the authentication failed (and no\n            event was passed in)\n        @raise SSHException: if there was a network error\n        "
    if ((not self.active) or (not self.initial_kex_done)):
        raise SSHException('No existing session')
    if (event is None):
        my_event = threading.Event()
    else:
        my_event = event
    self.auth_handler = AuthHandler(self)
    self.auth_handler.auth_publickey(username, key, my_event)
    if (event is not None):
        return []
    return self.auth_handler.wait_for_response(my_event)
