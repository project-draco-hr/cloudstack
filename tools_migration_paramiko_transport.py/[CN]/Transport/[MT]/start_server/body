def start_server(self, event=None, server=None):
    '\n        Negotiate a new SSH2 session as a server.  This is the first step after\n        creating a new L{Transport} and setting up your server host key(s).  A\n        separate thread is created for protocol negotiation.\n\n        If an event is passed in, this method returns immediately.  When\n        negotiation is done (successful or not), the given C{Event} will\n        be triggered.  On failure, L{is_active} will return C{False}.\n\n        (Since 1.4) If C{event} is C{None}, this method will not return until\n        negotation is done.  On success, the method returns normally.\n        Otherwise an SSHException is raised.\n\n        After a successful negotiation, the client will need to authenticate.\n        Override the methods\n        L{get_allowed_auths <ServerInterface.get_allowed_auths>},\n        L{check_auth_none <ServerInterface.check_auth_none>},\n        L{check_auth_password <ServerInterface.check_auth_password>}, and\n        L{check_auth_publickey <ServerInterface.check_auth_publickey>} in the\n        given C{server} object to control the authentication process.\n\n        After a successful authentication, the client should request to open\n        a channel.  Override\n        L{check_channel_request <ServerInterface.check_channel_request>} in the\n        given C{server} object to allow channels to be opened.\n\n        @note: After calling this method (or L{start_client} or L{connect}),\n            you should no longer directly read from or write to the original\n            socket object.\n\n        @param event: an event to trigger when negotiation is complete.\n        @type event: threading.Event\n        @param server: an object used to perform authentication and create\n            L{Channel}s.\n        @type server: L{server.ServerInterface}\n\n        @raise SSHException: if negotiation fails (and no C{event} was passed\n            in)\n        '
    if (server is None):
        server = ServerInterface()
    self.server_mode = True
    self.server_object = server
    self.active = True
    if (event is not None):
        self.completion_event = event
        self.start()
        return
    self.completion_event = event = threading.Event()
    self.start()
    while True:
        event.wait(0.1)
        if (not self.active):
            e = self.get_exception()
            if (e is not None):
                raise e
            raise SSHException('Negotiation failed.')
        if event.isSet():
            break
