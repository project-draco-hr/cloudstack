def _activate_inbound(self):
    'switch on newly negotiated encryption parameters for inbound traffic'
    block_size = self._cipher_info[self.remote_cipher]['block-size']
    if self.server_mode:
        IV_in = self._compute_key('A', block_size)
        key_in = self._compute_key('C', self._cipher_info[self.remote_cipher]['key-size'])
    else:
        IV_in = self._compute_key('B', block_size)
        key_in = self._compute_key('D', self._cipher_info[self.remote_cipher]['key-size'])
    engine = self._get_cipher(self.remote_cipher, key_in, IV_in)
    mac_size = self._mac_info[self.remote_mac]['size']
    mac_engine = self._mac_info[self.remote_mac]['class']
    if self.server_mode:
        mac_key = self._compute_key('E', mac_engine.digest_size)
    else:
        mac_key = self._compute_key('F', mac_engine.digest_size)
    self.packetizer.set_inbound_cipher(engine, block_size, mac_engine, mac_size, mac_key)
    compress_in = self._compression_info[self.remote_compression][1]
    if ((compress_in is not None) and ((self.remote_compression != 'zlib@openssh.com') or self.authenticated)):
        self._log(DEBUG, 'Switching on inbound compression ...')
        self.packetizer.set_inbound_compressor(compress_in())
