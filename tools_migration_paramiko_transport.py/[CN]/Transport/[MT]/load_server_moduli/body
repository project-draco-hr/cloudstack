def load_server_moduli(filename=None):
    '\n        I{(optional)}\n        Load a file of prime moduli for use in doing group-exchange key\n        negotiation in server mode.  It\'s a rather obscure option and can be\n        safely ignored.\n\n        In server mode, the remote client may request "group-exchange" key\n        negotiation, which asks the server to send a random prime number that\n        fits certain criteria.  These primes are pretty difficult to compute,\n        so they can\'t be generated on demand.  But many systems contain a file\n        of suitable primes (usually named something like C{/etc/ssh/moduli}).\n        If you call C{load_server_moduli} and it returns C{True}, then this\n        file of primes has been loaded and we will support "group-exchange" in\n        server mode.  Otherwise server mode will just claim that it doesn\'t\n        support that method of key negotiation.\n\n        @param filename: optional path to the moduli file, if you happen to\n            know that it\'s not in a standard location.\n        @type filename: str\n        @return: True if a moduli file was successfully loaded; False\n            otherwise.\n        @rtype: bool\n\n        @note: This has no effect when used in client mode.\n        '
    Transport._modulus_pack = ModulusPack(randpool)
    file_list = ['/etc/ssh/moduli', '/usr/local/etc/moduli']
    if (filename is not None):
        file_list.insert(0, filename)
    for fn in file_list:
        try:
            Transport._modulus_pack.read_file(fn)
            return True
        except IOError:
            pass
    Transport._modulus_pack = None
    return False
