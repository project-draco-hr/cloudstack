def request_port_forward(self, address, port, handler=None):
    '\n        Ask the server to forward TCP connections from a listening port on\n        the server, across this SSH session.\n\n        If a handler is given, that handler is called from a different thread\n        whenever a forwarded connection arrives.  The handler parameters are::\n\n            handler(channel, (origin_addr, origin_port), (server_addr, server_port))\n\n        where C{server_addr} and C{server_port} are the address and port that\n        the server was listening on.\n\n        If no handler is set, the default behavior is to send new incoming\n        forwarded connections into the accept queue, to be picked up via\n        L{accept}.\n\n        @param address: the address to bind when forwarding\n        @type address: str\n        @param port: the port to forward, or 0 to ask the server to allocate\n            any port\n        @type port: int\n        @param handler: optional handler for incoming forwarded connections\n        @type handler: function(Channel, (str, int), (str, int))\n        @return: the port # allocated by the server\n        @rtype: int\n\n        @raise SSHException: if the server refused the TCP forward request\n        '
    if (not self.active):
        raise SSHException('SSH session not active')
    address = str(address)
    port = int(port)
    response = self.global_request('tcpip-forward', (address, port), wait=True)
    if (response is None):
        raise SSHException('TCP forwarding request denied')
    if (port == 0):
        port = response.get_int()
    if (handler is None):

        def default_handler(channel, (src_addr, src_port), (dest_addr, dest_port)):
            self._queue_incoming_channel(channel)
        handler = default_handler
    self._tcp_handler = handler
    return port
