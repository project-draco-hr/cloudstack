def __init__(self, sock):
    '\n        Create a new SSH session over an existing socket, or socket-like\n        object.  This only creates the Transport object; it doesn\'t begin the\n        SSH session yet.  Use L{connect} or L{start_client} to begin a client\n        session, or L{start_server} to begin a server session.\n\n        If the object is not actually a socket, it must have the following\n        methods:\n            - C{send(str)}: Writes from 1 to C{len(str)} bytes, and\n              returns an int representing the number of bytes written.  Returns\n              0 or raises C{EOFError} if the stream has been closed.\n            - C{recv(int)}: Reads from 1 to C{int} bytes and returns them as a\n              string.  Returns 0 or raises C{EOFError} if the stream has been\n              closed.\n            - C{close()}: Closes the socket.\n            - C{settimeout(n)}: Sets a (float) timeout on I/O operations.\n\n        For ease of use, you may also pass in an address (as a tuple) or a host\n        string as the C{sock} argument.  (A host string is a hostname with an\n        optional port (separated by C{":"}) which will be converted into a\n        tuple of C{(hostname, port)}.)  A socket will be connected to this\n        address and used for communication.  Exceptions from the C{socket} call\n        may be thrown in this case.\n\n        @param sock: a socket or socket-like object to create the session over.\n        @type sock: socket\n        '
    if isinstance(sock, (str, unicode)):
        hl = sock.split(':', 1)
        if (len(hl) == 1):
            sock = (hl[0], 22)
        else:
            sock = (hl[0], int(hl[1]))
    if (type(sock) is tuple):
        (hostname, port) = sock
        for (family, socktype, proto, canonname, sockaddr) in socket.getaddrinfo(hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
            if (socktype == socket.SOCK_STREAM):
                af = family
                addr = sockaddr
                break
        else:
            raise SSHException(('No suitable address family for %s' % hostname))
        sock = socket.socket(af, socket.SOCK_STREAM)
        sock.connect((hostname, port))
    threading.Thread.__init__(self)
    self.setDaemon(True)
    self.randpool = randpool
    self.sock = sock
    try:
        self.sock.settimeout(0.1)
    except AttributeError:
        pass
    self.packetizer = Packetizer(sock)
    self.local_version = ((('SSH-' + self._PROTO_ID) + '-') + self._CLIENT_ID)
    self.remote_version = ''
    self.local_cipher = self.remote_cipher = ''
    self.local_kex_init = self.remote_kex_init = None
    self.local_mac = self.remote_mac = None
    self.local_compression = self.remote_compression = None
    self.session_id = None
    self.host_key_type = None
    self.host_key = None
    self.kex_engine = None
    self.H = None
    self.K = None
    self.active = False
    self.initial_kex_done = False
    self.in_kex = False
    self.authenticated = False
    self._expected_packet = tuple()
    self.lock = threading.Lock()
    self._channels = ChannelMap()
    self.channel_events = {}
    self.channels_seen = {}
    self._channel_counter = 1
    self.window_size = 65536
    self.max_packet_size = 34816
    self._x11_handler = None
    self._tcp_handler = None
    self.saved_exception = None
    self.clear_to_send = threading.Event()
    self.clear_to_send_lock = threading.Lock()
    self.clear_to_send_timeout = 30.0
    self.log_name = 'paramiko.transport'
    self.logger = util.get_logger(self.log_name)
    self.packetizer.set_log(self.logger)
    self.auth_handler = None
    self.global_response = None
    self.completion_event = None
    self.banner_timeout = 15
    self.server_mode = False
    self.server_object = None
    self.server_key_dict = {}
    self.server_accepts = []
    self.server_accept_cv = threading.Condition(self.lock)
    self.subsystem_table = {}
