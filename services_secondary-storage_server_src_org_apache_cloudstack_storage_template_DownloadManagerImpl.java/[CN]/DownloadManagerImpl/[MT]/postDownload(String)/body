{
  DownloadJob dnld=jobs.get(jobId);
  TemplateDownloader td=dnld.getTemplateDownloader();
  String resourcePath=dnld.getInstallPathPrefix();
  String finalResourcePath=dnld.getTmpltPath();
  ResourceType resourceType=dnld.getResourceType();
  File originalTemplate=new File(td.getDownloadLocalPath());
  String checkSum=computeCheckSum(originalTemplate);
  if (checkSum == null) {
    logger.warn("Something wrong happened when try to calculate the checksum of downloaded template!");
  }
  dnld.setCheckSum(checkSum);
  int imgSizeGigs=(int)Math.ceil(_storage.getSize(td.getDownloadLocalPath()) * 1.0d / (1024 * 1024 * 1024));
  imgSizeGigs++;
  long timeout=(long)imgSizeGigs * installTimeoutPerGig;
  Script scr=null;
  String script=resourceType == ResourceType.TEMPLATE ? createTmpltScr : createVolScr;
  scr=new Script(script,timeout,logger);
  scr.add("-s",Integer.toString(imgSizeGigs));
  scr.add("-S",Long.toString(td.getMaxTemplateSizeInBytes()));
  if (dnld.getDescription() != null && dnld.getDescription().length() > 1) {
    scr.add("-d",dnld.getDescription());
  }
  if (dnld.isHvm()) {
    scr.add("-h");
  }
  String extension=dnld.getFormat().getFileExtension();
  String templateName="";
  if (extension.equals("iso")) {
    templateName=jobs.get(jobId).getTmpltName().trim().replace(" ","_");
  }
 else {
    templateName=java.util.UUID.nameUUIDFromBytes((jobs.get(jobId).getTmpltName() + System.currentTimeMillis()).getBytes()).toString();
  }
  String templateFilename=templateName + "." + extension;
  dnld.setTmpltPath(finalResourcePath + "/" + templateFilename);
  scr.add("-n",templateFilename);
  scr.add("-t",resourcePath);
  scr.add("-f",td.getDownloadLocalPath());
  if (dnld.getChecksum() != null && dnld.getChecksum().length() > 1) {
    scr.add("-c",dnld.getChecksum());
  }
  scr.add("-u");
  String result;
  result=scr.execute();
  if (result != null) {
    return result;
  }
  File downloadedTemplate=new File(resourcePath + "/" + templateFilename);
  _storage.setWorldReadableAndWriteable(downloadedTemplate);
  String propertiesFile=resourcePath;
  if (resourceType == ResourceType.TEMPLATE) {
    propertiesFile+="/template.properties";
  }
 else {
    propertiesFile+="/volume.properties";
  }
  File templateProperties=new File(propertiesFile);
  _storage.setWorldReadableAndWriteable(templateProperties);
  TemplateLocation loc=new TemplateLocation(_storage,resourcePath);
  try {
    loc.create(dnld.getId(),true,dnld.getTmpltName());
  }
 catch (  IOException e) {
    logger.warn("Something is wrong with template location " + resourcePath,e);
    loc.purge();
    return "Unable to download due to " + e.getMessage();
  }
  Iterator<Processor> en=_processors.values().iterator();
  while (en.hasNext()) {
    Processor processor=en.next();
    FormatInfo info=null;
    try {
      info=processor.process(resourcePath,null,templateName);
    }
 catch (    InternalErrorException e) {
      logger.error("Template process exception ",e);
      return e.toString();
    }
    if (info != null) {
      loc.addFormat(info);
      dnld.setTemplatesize(info.virtualSize);
      dnld.setTemplatePhysicalSize(info.size);
      break;
    }
  }
  if (!loc.save()) {
    logger.warn("Cleaning up because we're unable to save the formats");
    loc.purge();
  }
  return null;
}
