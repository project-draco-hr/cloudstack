{
  DownloadJob dj=jobs.get(jobId);
  if (dj == null) {
    logger.warn("setDownloadStatus for jobId: " + jobId + ", status="+ status+ " no job found");
    return;
  }
  TemplateDownloader td=dj.getTemplateDownloader();
  logger.info("Download Completion for jobId: " + jobId + ", status="+ status);
  logger.info("local: " + td.getDownloadLocalPath() + ", bytes="+ td.getDownloadedBytes()+ ", error="+ td.getDownloadError()+ ", pct="+ td.getDownloadPercent());
switch (status) {
case ABORTED:
case NOT_STARTED:
case UNRECOVERABLE_ERROR:
    dj.cleanup();
  break;
case UNKNOWN:
return;
case IN_PROGRESS:
logger.info("Resuming jobId: " + jobId + ", status="+ status);
td.setResume(true);
threadPool.execute(td);
break;
case RECOVERABLE_ERROR:
threadPool.execute(td);
break;
case DOWNLOAD_FINISHED:
if (!(td instanceof S3TemplateDownloader)) {
td.setDownloadError("Download success, starting install ");
String result=postDownload(jobId);
if (result != null) {
logger.error("Failed post download script: " + result);
td.setStatus(Status.UNRECOVERABLE_ERROR);
td.setDownloadError("Failed post download script: " + result);
}
 else {
td.setStatus(Status.POST_DOWNLOAD_FINISHED);
td.setDownloadError("Install completed successfully at " + new SimpleDateFormat().format(new Date()));
}
}
 else {
td.setStatus(Status.POST_DOWNLOAD_FINISHED);
S3TemplateDownloader std=(S3TemplateDownloader)td;
long size=std.totalBytes;
DownloadJob dnld=jobs.get(jobId);
dnld.setTemplatesize(size);
dnld.setTemplatePhysicalSize(size);
dnld.setTmpltPath(std.getDownloadLocalPath());
}
dj.cleanup();
break;
default :
break;
}
}
