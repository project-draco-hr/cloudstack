{
  VMInstanceVO vm=_vmDao.findByUuid(vmEntityVO.getUuid());
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  DeploymentPlan plan=planToDeploy;
  List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
  if (!vols.isEmpty()) {
    VolumeVO vol=vols.get(0);
    StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
    if (!pool.isInMaintenance()) {
      long rootVolDcId=pool.getDataCenterId();
      Long rootVolPodId=pool.getPodId();
      Long rootVolClusterId=pool.getClusterId();
      if (planToDeploy != null && planToDeploy.getDataCenterId() != 0) {
        Long clusterIdSpecified=planToDeploy.getClusterId();
        if (clusterIdSpecified != null && rootVolClusterId != null) {
          if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
            throw new ResourceUnavailableException("Root volume is ready in different cluster, Deployment plan provided cannot be satisfied, unable to create a deployment for " + vm,Cluster.class,clusterIdSpecified);
          }
        }
        plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId(),null,null);
      }
 else {
        plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId(),null,null);
      }
    }
  }
  DeploymentPlanner planner=ComponentContext.getComponent(plannerToUse);
  DeployDestination dest=null;
  if (planner.canHandle(vmProfile,plan,exclude)) {
    dest=planner.plan(vmProfile,plan,exclude);
  }
  if (dest != null) {
    VMReservationVO vmReservation=new VMReservationVO(vm.getId(),dest.getDataCenter().getId(),dest.getPod().getId(),dest.getCluster().getId(),dest.getHost().getId());
    Map<Long,Long> volumeReservationMap=new HashMap<Long,Long>();
    for (    Volume vo : dest.getStorageForDisks().keySet()) {
      volumeReservationMap.put(vo.getId(),dest.getStorageForDisks().get(vo).getId());
    }
    vmReservation.setVolumeReservation(volumeReservationMap);
    vmEntityVO.setVmReservation(vmReservation);
    _vmEntityDao.persist(vmEntityVO);
    return vmReservation.getUuid();
  }
 else {
    throw new InsufficientServerCapacityException("Unable to create a deployment for " + vmProfile,DataCenter.class,plan.getDataCenterId());
  }
}
