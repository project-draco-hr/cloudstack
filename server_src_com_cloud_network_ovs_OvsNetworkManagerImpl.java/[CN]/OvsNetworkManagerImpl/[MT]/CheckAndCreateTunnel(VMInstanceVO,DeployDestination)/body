{
  if (!_isEnabled) {
    return;
  }
  if (instance.getType() != VirtualMachine.Type.User && instance.getType() != VirtualMachine.Type.DomainRouter) {
    return;
  }
  final Transaction txn=Transaction.currentTxn();
  long hostId=dest.getHost().getId();
  long accountId=instance.getAccountId();
  List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
  DomainRouterVO router=_routerDao.findBy(accountId,instance.getDataCenterId());
  List<VMInstanceVO> ins=new ArrayList<VMInstanceVO>();
  ins.addAll(vms);
  ins.add(router);
  List<Long> toHostIds=new ArrayList<Long>();
  List<Long> fromHostIds=new ArrayList<Long>();
  for (  VMInstanceVO v : ins) {
    Long rh=v.getHostId();
    if (rh == null || rh.longValue() == hostId) {
      continue;
    }
    txn.start();
    GreTunnelVO tunnel=_tunnelDao.lockByFromAndTo(hostId,rh.longValue());
    txn.commit();
    if (tunnel == null) {
      throw new GreTunnelException(String.format("No entity(from=%1$s, to=%2$s) of failed to lock",hostId,rh.longValue()));
    }
    if (tunnel.getInPort() == 0 && !toHostIds.contains(rh)) {
      toHostIds.add(rh);
    }
    txn.start();
    tunnel=_tunnelDao.lockByFromAndTo(rh.longValue(),hostId);
    txn.commit();
    if (tunnel == null) {
      throw new GreTunnelException(String.format("No entity(from=%1$s, to=%2$s) of failed to lock",rh.longValue(),hostId));
    }
    if (tunnel.getInPort() == 0 && !fromHostIds.contains(rh)) {
      fromHostIds.add(rh);
    }
  }
  try {
    String myIp=dest.getHost().getPrivateIpAddress();
    for (    Long i : toHostIds) {
      HostVO rHost=_hostDao.findById(i.longValue());
      Commands cmds=new Commands(new OvsCreateGreTunnelCommand(rHost.getPrivateIpAddress(),"1",hostId,i.longValue()));
      s_logger.debug("Ask host " + hostId + " to create gre tunnel to "+ i.longValue());
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleCreateTunnelAnswer(answers);
    }
    for (    Long i : fromHostIds) {
      Commands cmd2s=new Commands(new OvsCreateGreTunnelCommand(myIp,"1",i.longValue(),hostId));
      s_logger.debug("Ask host " + i.longValue() + " to create gre tunnel to "+ hostId);
      Answer[] answers=_agentMgr.send(i.longValue(),cmd2s);
      handleCreateTunnelAnswer(answers);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
