{
  final String volid=command.getPath();
  final long newSize=command.getNewSize();
  final long currentSize=command.getCurrentSize();
  final String vmInstanceName=command.getInstanceName();
  final boolean shrinkOk=command.getShrinkOk();
  final StorageFilerTO spool=command.getPool();
  final String notifyOnlyType="NOTIFYONLY";
  if (currentSize == newSize) {
    s_logger.info("No need to resize volume: current size " + currentSize + " is same as new size "+ newSize);
    return new ResizeVolumeAnswer(command,true,"success",currentSize);
  }
  try {
    final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
    KVMStoragePool pool=storagePoolMgr.getStoragePool(spool.getType(),spool.getUuid());
    final KVMPhysicalDisk vol=pool.getPhysicalDisk(volid);
    final String path=vol.getPath();
    String type=libvirtComputingResource.getResizeScriptType(pool,vol);
    if (pool.getType() != StoragePoolType.RBD) {
      if (type.equals("QCOW2") && shrinkOk) {
        return new ResizeVolumeAnswer(command,false,"Unable to shrink volumes of type " + type);
      }
    }
 else {
      s_logger.debug("Volume " + path + " is on a RBD storage pool. No need to query for additional information.");
    }
    s_logger.debug("Resizing volume: " + path + ","+ currentSize+ ","+ newSize+ ","+ type+ ","+ vmInstanceName+ ","+ shrinkOk);
    if (pool.getType() != StoragePoolType.CLVM && vol.getFormat() != PhysicalDiskFormat.QCOW2) {
      s_logger.debug("Volume " + path + " can be resized by libvirt. Asking libvirt to resize the volume.");
      try {
        final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
        final Connect conn=libvirtUtilitiesHelper.getConnection();
        final StorageVol v=conn.storageVolLookupByPath(path);
        int flags=0;
        if (conn.getLibVirVersion() > 1001000 && vol.getFormat() == PhysicalDiskFormat.RAW && pool.getType() != StoragePoolType.RBD) {
          flags=1;
        }
        if (shrinkOk) {
          flags=4;
        }
        v.resize(newSize,flags);
        type=notifyOnlyType;
      }
 catch (      final LibvirtException e) {
        return new ResizeVolumeAnswer(command,false,e.toString());
      }
    }
    s_logger.debug("Invoking resize script to handle type " + type);
    final Script resizecmd=new Script(libvirtComputingResource.getResizeVolumePath(),libvirtComputingResource.getCmdsTimeout(),s_logger);
    resizecmd.add("-s",String.valueOf(newSize));
    resizecmd.add("-c",String.valueOf(currentSize));
    resizecmd.add("-p",path);
    resizecmd.add("-t",type);
    resizecmd.add("-r",String.valueOf(shrinkOk));
    resizecmd.add("-v",vmInstanceName);
    final String result=resizecmd.execute();
    if (result != null) {
      if (type.equals(notifyOnlyType)) {
        return new ResizeVolumeAnswer(command,true,"Resize succeeded, but need reboot to notify guest");
      }
 else {
        return new ResizeVolumeAnswer(command,false,result);
      }
    }
    pool=storagePoolMgr.getStoragePool(spool.getType(),spool.getUuid());
    pool.refresh();
    final long finalSize=pool.getPhysicalDisk(volid).getVirtualSize();
    s_logger.debug("after resize, size reports as " + finalSize + ", requested "+ newSize);
    return new ResizeVolumeAnswer(command,true,"success",finalSize);
  }
 catch (  final CloudRuntimeException e) {
    final String error="Failed to resize volume: " + e.getMessage();
    s_logger.debug(error);
    return new ResizeVolumeAnswer(command,false,error);
  }
}
