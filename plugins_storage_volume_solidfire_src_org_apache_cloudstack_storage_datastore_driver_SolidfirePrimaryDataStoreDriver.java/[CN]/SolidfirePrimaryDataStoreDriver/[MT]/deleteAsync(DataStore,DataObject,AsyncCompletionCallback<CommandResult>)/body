{
  String errMsg=null;
  if (dataObject.getType() == DataObjectType.VOLUME) {
    try {
      VolumeInfo volumeInfo=(VolumeInfo)dataObject;
      AccountVO account=_accountDao.findById(volumeInfo.getAccountId());
      AccountDetailVO accountDetails=_accountDetailsDao.findDetail(account.getAccountId(),SolidFireUtil.ACCOUNT_ID);
      long sfAccountId=Long.parseLong(accountDetails.getValue());
      long storagePoolId=dataStore.getId();
      SolidFireConnection sfConnection=getSolidFireConnection(storagePoolId);
      deleteSolidFireVolume(volumeInfo,sfConnection);
      _volumeDao.deleteVolumesByInstance(volumeInfo.getId());
      if (!sfAccountHasVolume(sfAccountId,sfConnection)) {
        deleteSolidFireAccount(sfAccountId,sfConnection);
        _accountDetailsDao.deleteDetails(account.getAccountId());
      }
      StoragePoolVO storagePool=_storagePoolDao.findById(storagePoolId);
      long usedBytes=storagePool.getUsedBytes();
      usedBytes-=volumeInfo.getSize();
      if (usedBytes < 0) {
        usedBytes=0;
      }
      storagePool.setUsedBytes(usedBytes);
      _storagePoolDao.update(storagePoolId,storagePool);
    }
 catch (    StorageUnavailableException e) {
      s_logger.error("Failed to create volume (StorageUnavailableException)",e);
      errMsg=e.toString();
    }
catch (    Exception e) {
      s_logger.error("Failed to create volume (Exception)",e);
      errMsg=e.toString();
    }
  }
 else {
    errMsg="Invalid DataObjectType (" + dataObject.getType() + ") passed to deleteAsync";
  }
  CommandResult result=new CommandResult();
  result.setResult(errMsg);
  callback.complete(result);
}
