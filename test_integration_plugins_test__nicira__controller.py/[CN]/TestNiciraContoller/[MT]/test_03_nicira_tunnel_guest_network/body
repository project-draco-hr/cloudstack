@attr(tags=['advanced', 'smoke', 'nicira'], required_hardware='true')
def test_03_nicira_tunnel_guest_network(self):
    self.add_nicira_device(self.nicira_master_controller)
    network = self.create_guest_isolated_network()
    virtual_machine = self.create_virtual_machine(network)
    public_ip = self.acquire_publicip(network)
    nat_rule = self.create_natrule(virtual_machine, public_ip, network)
    list_vm_response = VirtualMachine.list(self.api_client, id=virtual_machine.id)
    self.logger.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Response did not return a valid list')
    self.assertNotEqual(len(list_vm_response), 0, 'List of VMs is empty')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.id, virtual_machine.id, 'Virtual machine in response does not match request')
    self.assertEqual(vm_response.state, 'Running', 'VM is not in Running state')
    routers = self.get_routers_for_network(network)
    self.distribute_vm_and_routers_by_hosts(virtual_machine, routers)
    ssh_command = 'ping -c 3 google.com'
    result = 'failed'
    try:
        self.logger.debug(('SSH into VM: %s' % public_ip.ipaddress.ipaddress))
        ssh = virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
        self.logger.debug('Ping to google.com from VM')
        result = str(ssh.execute(ssh_command))
        self.logger.debug(('SSH result: %s; COUNT is ==> %s' % (result, result.count('3 packets received'))))
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (virtual_machine.get_ip(), e)))
    self.assertEqual(result.count('3 packets received'), 1, 'Ping to outside world from VM should be successful')
