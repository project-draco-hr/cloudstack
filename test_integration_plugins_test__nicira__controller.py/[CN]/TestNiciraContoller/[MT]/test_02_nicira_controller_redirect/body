@attr(tags=['advanced', 'smoke', 'nicira'], required_hardware='true')
def test_02_nicira_controller_redirect(self):
    "\n            Nicira clusters will redirect clients (in this case ACS) to the master node.\n            This test assumes that a Nicira cluster is present and configured properly, and\n            that it has at least two controller nodes. The test will check that ASC follows\n            redirects by:\n                - adding a Nicira Nvp device that points to one of the cluster's slave controllers,\n                - create a VM in a Nicira backed network\n            If all is well, no matter what controller is specified (slaves or master), the vm (and respective router VM)\n            should be created without issues.\n        "
    nicira_slave = self.determine_slave_conroller(self.nicira_hosts, self.nicira_master_controller)
    self.logger.debug(('Nicira slave controller is: %s ' % nicira_slave))
    self.add_nicira_device(nicira_slave)
    network = self.create_guest_network()
    virtual_machine = self.create_virtual_machine(network)
    list_vm_response = VirtualMachine.list(self.api_client, id=virtual_machine.id)
    self.logger.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Response did not return a valid list')
    self.assertNotEqual(len(list_vm_response), 0, 'List of VMs is empty')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.id, virtual_machine.id, 'Virtual machine in response does not match request')
    self.assertEqual(vm_response.state, 'Running', 'VM is not in Running state')
