@attr(tags=['advancedns'])
def test_shared_to_dedicated_upgrade(self):
    'Test upgrade from shared LB isolation to dedicated LB isolation'
    self.debug(('Creating network with network offering: %s' % self.network_offering_shared.id))
    self.network_1 = Network.create(self.apiclient, self.services['network'], accountid=self.account_1.name, domainid=self.account_1.domainid, networkofferingid=self.network_offering_shared.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_1.id))
    self.debug(('Deploying VM in account: %s' % self.account_1.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_1.id)])
    self.debug(('Deployed VM in network: %s' % self.network_1.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Trying to create network with network offering: %s' % self.network_offering_shared.id))
    self.network_2 = Network.create(self.apiclient, self.services['network'], accountid=self.account_2.name, domainid=self.account_2.domainid, networkofferingid=self.network_offering_shared.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_2.id))
    self.debug(('Deploying VM in account: %s' % self.account_2.name))
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_2.name, domainid=self.account_2.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_2.id)])
    self.debug(('Deployed VM in network: %s' % self.network_2.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_2.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_2.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Trying to create network with network offering: %s' % self.network_offering_dedicated.id))
    self.network_3 = Network.create(self.apiclient, self.services['network'], accountid=self.account_3.name, domainid=self.account_3.domainid, networkofferingid=self.network_offering_dedicated.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_3.id))
    self.debug(('Deploying VM in account: %s' % self.account_3.name))
    virtual_machine_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_3.name, domainid=self.account_3.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_3.id)])
    self.debug(('Deployed VM in network: %s' % self.network_3.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_3.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_3.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Stopping all VMs in account: %s' % self.account_3.name))
    virtual_machine_3.stop(self.apiclient)
    self.debug(('Upgrading the network: %s' % self.network_3.id))
    self.network_3.update(self.apiclient, networkofferingid=self.network_offering_shared.id, changecidr=True)
    networks = Network.list(self.apiclient, id=self.network_3.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List Networks should return a valid list for given network ID')
    self.assertNotEqual(len(networks), 0, 'Length of list networks should not be 0')
    network = networks[0]
    self.assertEqual(network.networkofferingid, self.network_offering_shared.id, 'Network offering ID should match with new offering ID')
    self.debug(('Starting instances in account: %s' % self.account_3.name))
    virtual_machine_3.start(self.apiclient)
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_3.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_3.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    try:
        self.debug(('Associating public Ip to the network: %s' % self.network_3.name))
        public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account_3.name, zoneid=self.zone.id, domainid=self.account_3.domainid, networkid=self.network_3.id)
        self.debug(('Creating LB rule for IP address: %s with round robin algo' % public_ip.ipaddress.ipaddress))
        LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip.ipaddress.id, accountid=self.account_3.name, networkid=self.network_3.id)
        self.debug(('Created the load balancing rule for public IP: %s' % public_ip.ipaddress.ipaddress))
    except Exception as e:
        self.fail(('Failed to create load balancing rule - %s' % e))
    return
