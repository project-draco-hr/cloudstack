@attr(tags=['advancedns', 'multizone'])
def test_add_mul_netscaler_diff_zone(self):
    'Test add netscaler devices in different zones\n        '
    zones = Zone.list(self.apiclient, listall=True)
    self.assertEqual(isinstance(zones, list), True, 'List Zones API should return a valid list')
    zone_list = []
    for zone in zones:
        if (zone.networktype == 'Advanced'):
            zone_list.append(zone)
    self.assertGreater(len(zone_list), 1, 'Atleast 2 advanced mode zones should be present for this test')
    physical_networks = PhysicalNetwork.list(self.apiclient, zoneid=zone_list[0].id)
    self.assertEqual(isinstance(physical_networks, list), True, 'There should be atleast one physical network for advanced zone')
    physical_network = physical_networks[0]
    self.debug(('Adding netscaler device: %s' % self.services['netscaler_1']['ipaddress']))
    netscaler_1 = NetScaler.add(self.apiclient, self.services['netscaler_1'], physicalnetworkid=physical_network.id)
    self.cleanup.append(netscaler_1)
    self.debug('Checking if Netscaler network service provider is enabled?')
    nw_service_providers = NetworkServiceProvider.list(self.apiclient, name='Netscaler', physicalnetworkid=physical_network.id)
    self.assertEqual(isinstance(nw_service_providers, list), True, 'Network service providers list should not be empty')
    netscaler_provider = nw_service_providers[0]
    if (netscaler_provider.state != 'Enabled'):
        self.debug('Netscaler provider is not enabled. Enabling it..')
        response = NetworkServiceProvider.update(self.apiclient, id=netscaler_provider.id, state='Enabled')
        self.assertEqual(response.state, 'Enabled', 'Network service provider should be in enabled state')
    else:
        self.debug('Netscaler service provider is already enabled.')
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler_1.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, physical_network.id, 'Physical network id should match with the network in which device is configured')
    physical_networks = PhysicalNetwork.list(self.apiclient, zoneid=zone_list[1].id)
    self.assertEqual(isinstance(physical_networks, list), True, 'There should be atleast one physical network for advanced zone')
    physical_network = physical_networks[0]
    self.debug(('Adding netscaler device: %s' % self.services['netscaler_2']['ipaddress']))
    netscaler_2 = NetScaler.add(self.apiclient, self.services['netscaler_2'], physicalnetworkid=physical_network.id)
    self.cleanup.append(netscaler_2)
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler_2.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, physical_network.id, 'Physical network id should match with the network in which device is configured')
    self.debug('Another Netscaler device is added!')
    return
