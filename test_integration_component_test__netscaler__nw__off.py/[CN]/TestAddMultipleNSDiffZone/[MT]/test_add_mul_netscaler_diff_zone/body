@attr(tags=['advancedns', 'multizone'], required_hardware='true')
def test_add_mul_netscaler_diff_zone(self):
    'Test add netscaler devices in different zones\n        '
    zones = Zone.list(self.apiclient, listall=True)
    self.assertEqual(isinstance(zones, list), True, 'List Zones API should return a valid list')
    zone_list = []
    for zone in zones:
        if (zone.networktype == 'Advanced'):
            zone_list.append(zone)
    if (len(zone_list) < 2):
        self.skipTest('Atleast 2 advanced mode zones should be present for this test')
    zoneid = zone_list[0].id
    physical_networks = PhysicalNetwork.list(self.apiclient, zoneid=zone_list[0].id)
    self.assertEqual(isinstance(physical_networks, list), True, 'There should be atleast one physical network for advanced zone')
    self.debug(('Adding netscaler device: %s' % self.services['netscaler_1']['ipaddress']))
    netscaler_1 = add_netscaler(self.apiclient, zoneid, self.services['netscaler_1'])
    self.cleanup.append(netscaler_1)
    physical_network = physical_networks[0]
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler_1.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, physical_network.id, 'Physical network id should match with the network in which device is configured')
    physical_networks = PhysicalNetwork.list(self.apiclient, zoneid=zone_list[1].id)
    zoneid = zone_list[1].id
    self.assertEqual(isinstance(physical_networks, list), True, 'There should be atleast one physical network for advanced zone')
    physical_network = physical_networks[0]
    self.debug(('Adding netscaler device: %s' % self.services['netscaler_2']['ipaddress']))
    netscaler_2 = add_netscaler(self.apiclient, zoneid, self.services['netscaler_2'])
    self.cleanup.append(netscaler_2)
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler_2.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, physical_network.id, 'Physical network id should match with the network in which device is configured')
    self.debug('Another Netscaler device is added!')
    return
