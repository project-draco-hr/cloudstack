@attr(configuration='network.gc')
@attr(tags=['advancedns'])
def test_04_delete_account_after_capacity_full(self):
    'Test delete and add resouces after netscaler device capacity is full\n        '
    self.debug(('Delete account: %s' % self.account_4.account.name))
    self.account_4.delete(self.apiclient)
    self.debug(('Account: %s is deleted' % self.account_4.account.name))
    interval = list_configurations(self.apiclient, name='network.gc.interval')
    wait = list_configurations(self.apiclient, name='network.gc.wait')
    self.debug('Sleeping for: network.gc.interval + network.gc.wait')
    time.sleep((int(interval[0].value) + int(wait[0].value)))
    self.debug(('Trying to create network with network offering: %s' % self.network_offering.id))
    self.network_5 = Network.create(self.apiclient, self.services['network'], accountid=self.account_5.account.name, domainid=self.account_5.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % self.network_5.id))
    self.debug(('Deploying VM in account: %s' % self.account_5.account.name))
    virtual_machine_5 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_5.account.name, domainid=self.account_5.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_5.id)])
    self.debug(('Deployed VM in network: %s' % self.network_5.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_5.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_5.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    return
