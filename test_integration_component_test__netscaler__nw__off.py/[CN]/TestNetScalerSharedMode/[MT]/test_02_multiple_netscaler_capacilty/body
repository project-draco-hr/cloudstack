@attr(tags=['advancedns'])
def test_02_multiple_netscaler_capacilty(self):
    'Test multiple netscaler devices with limited capacity\n        '
    self.debug(('Adding another netscaler device: %s' % self.services['netscaler_2']['ipaddress']))
    self.services['netscaler_2']['lbdevicecapacity'] = 2
    netscaler_2 = NetScaler.add(self.apiclient, self.services['netscaler_2'], physicalnetworkid=self.physical_network.id)
    self.cleanup_devices.append(netscaler_2)
    ns_list = NetScaler.list(self.apiclient, lbdeviceid=netscaler_2.lbdeviceid)
    self.assertEqual(isinstance(ns_list, list), True, 'NetScaler list should not be empty')
    ns = ns_list[0]
    self.assertEqual(ns.lbdevicededicated, False, 'NetScaler device is configured in shared mode')
    self.assertEqual(ns.lbdevicestate, 'Enabled', 'NetScaler device state should be enabled')
    self.assertEqual(ns.physicalnetworkid, self.physical_network.id, 'Physical network id should match with the network in which device is configured')
    self.debug('Another Netscaler device is added!')
    self.debug(('Trying to create network with network offering: %s' % self.network_offering.id))
    networks = Network.list(self.apiclient, account=self.account_3.name, domainid=self.account_3.domainid, zoneid=self.zone.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, ('Network should be present for the account: %s' % self.account_3.name))
    self.network_3 = networks[0]
    self.debug(('Created network with ID: %s' % self.network_3.id))
    self.debug(('Deploying VM in account: %s' % self.account_3.name))
    virtual_machine_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account_3.name, domainid=self.account_3.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network_3.id)])
    self.debug(('Deployed VM in network: %s' % self.network_3.id))
    list_vm_response = VirtualMachine.list(self.apiclient, id=virtual_machine_3.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % virtual_machine_3.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running after deployment')
    return
