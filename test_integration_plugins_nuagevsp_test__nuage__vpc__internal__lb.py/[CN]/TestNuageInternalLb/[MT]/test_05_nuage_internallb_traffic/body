@attr(tags=['advanced', 'nuagevsp'], required_hardware='true')
def test_05_nuage_internallb_traffic(self):
    'Test Nuage VSP VPC Internal LB functionality by performing (wget) traffic tests within a VPC\n        '
    self.debug('Creating Nuage VSP VPC offering with Internal LB service...')
    vpc_off = self.create_VpcOffering(self.test_data['nuagevsp']['vpc_offering_lb'])
    self.validate_VpcOffering(vpc_off, state='Enabled')
    self.debug('Creating a VPC with Internal LB service...')
    vpc = self.create_Vpc(vpc_off, cidr='10.1.0.0/16')
    self.validate_Vpc(vpc, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering with Internal LB service...')
    net_off_1 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering_internal_lb'])
    self.validate_NetworkOffering(net_off_1, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering without Internal LB service...')
    net_off_2 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering'])
    self.validate_NetworkOffering(net_off_2, state='Enabled')
    self.debug('Creating a VPC network with Internal LB service...')
    internal_tier_1 = self.create_Network(net_off_1, gateway='10.1.1.1', vpc=vpc)
    self.validate_Network(internal_tier_1, state='Implemented')
    vr = self.get_Router(internal_tier_1)
    self.check_Router_state(vr, state='Running')
    self.debug(('Deploying a VM in network - %s' % internal_tier_1.name))
    internal_vm_1 = self.create_VM(internal_tier_1)
    self.check_VM_state(internal_vm_1, state='Running')
    self.verify_vsp_network(self.domain.id, internal_tier_1, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(internal_vm_1)
    self.debug('Creating one more VPC network with Internal LB service...')
    internal_tier_2 = self.create_Network(net_off_1, gateway='10.1.2.1', vpc=vpc)
    self.validate_Network(internal_tier_2, state='Implemented')
    vr = self.get_Router(internal_tier_2)
    self.check_Router_state(vr, state='Running')
    self.debug(('Deploying a VM in network - %s' % internal_tier_2.name))
    internal_vm_2 = self.create_VM(internal_tier_2)
    self.check_VM_state(internal_vm_2, state='Running')
    self.verify_vsp_network(self.domain.id, internal_tier_2, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(internal_vm_2)
    self.debug('Creating a VPC network without Internal LB service...')
    public_tier = self.create_Network(net_off_2, gateway='10.1.3.1', vpc=vpc)
    self.validate_Network(public_tier, state='Implemented')
    vr = self.get_Router(public_tier)
    self.check_Router_state(vr, state='Running')
    self.debug(('Deploying a VM in network - %s' % public_tier.name))
    public_vm = self.create_VM(public_tier)
    self.check_VM_state(public_vm, state='Running')
    self.verify_vsp_network(self.domain.id, public_tier, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(public_vm)
    self.debug('Creating two Internal LB Rules (SSH & HTTP) using the same Load Balancing source IP Address...')
    int_lb_rule_1 = self.create_Internal_LB_Rule(internal_tier_1, vm_array=[internal_vm_1])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm_1])
    int_lb_rule_2 = self.create_Internal_LB_Rule(internal_tier_1, vm_array=[internal_vm_1], services=self.test_data['internal_lbrule_http'], source_ip=int_lb_rule_1.sourceipaddress)
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm_1])
    int_lb_vm_1 = self.get_InternalLbVm(internal_tier_1, int_lb_rule_1.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier_1, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_1)
    self.debug(('Deploying two more VMs in network - %s' % internal_tier_1.name))
    internal_vm_1_1 = self.create_VM(internal_tier_1)
    internal_vm_1_2 = self.create_VM(internal_tier_1)
    self.verify_vsp_vm(internal_vm_1_1)
    self.verify_vsp_vm(internal_vm_1_2)
    self.debug('Adding two more virtual machines to the created Internal LB rules...')
    int_lb_rule_1.assign(self.api_client, [internal_vm_1_1, internal_vm_1_2])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm_1, internal_vm_1_1, internal_vm_1_2])
    int_lb_rule_2.assign(self.api_client, [internal_vm_1_1, internal_vm_1_2])
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm_1, internal_vm_1_1, internal_vm_1_2])
    self.check_InternalLbVm_state(internal_tier_1, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_1)
    self.debug('Adding Network ACL rules to make the created Internal LB rules (SSH & HTTP) accessible...')
    ssh_rule = self.create_NetworkAclRule(self.test_data['ingress_rule'], network=internal_tier_1)
    http_rule = self.create_NetworkAclRule(self.test_data['http_rule'], network=internal_tier_1)
    self.verify_vsp_firewall_rule(ssh_rule)
    self.verify_vsp_firewall_rule(http_rule)
    self.debug('Creating two Internal LB Rules (SSH & HTTP) using the same Load Balancing source IP Address...')
    int_lb_rule_3 = self.create_Internal_LB_Rule(internal_tier_2, vm_array=[internal_vm_2])
    self.validate_Internal_LB_Rule(int_lb_rule_3, state='Active', vm_array=[internal_vm_2])
    int_lb_rule_4 = self.create_Internal_LB_Rule(internal_tier_2, vm_array=[internal_vm_2], services=self.test_data['internal_lbrule_http'], source_ip=int_lb_rule_3.sourceipaddress)
    self.validate_Internal_LB_Rule(int_lb_rule_4, state='Active', vm_array=[internal_vm_2])
    int_lb_vm_2 = self.get_InternalLbVm(internal_tier_2, int_lb_rule_3.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier_2, int_lb_rule_3.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_2)
    self.debug(('Deploying two more VMs in network - %s' % internal_tier_2.name))
    internal_vm_2_1 = self.create_VM(internal_tier_2)
    internal_vm_2_2 = self.create_VM(internal_tier_2)
    self.verify_vsp_vm(internal_vm_2_1)
    self.verify_vsp_vm(internal_vm_2_2)
    self.debug('Adding two more virtual machines to the created Internal LB rules...')
    int_lb_rule_3.assign(self.api_client, [internal_vm_2_1, internal_vm_2_2])
    self.validate_Internal_LB_Rule(int_lb_rule_3, state='Active', vm_array=[internal_vm_2, internal_vm_2_1, internal_vm_2_2])
    int_lb_rule_4.assign(self.api_client, [internal_vm_2_1, internal_vm_2_2])
    self.validate_Internal_LB_Rule(int_lb_rule_4, state='Active', vm_array=[internal_vm_2, internal_vm_2_1, internal_vm_2_2])
    self.check_InternalLbVm_state(internal_tier_2, int_lb_rule_3.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_2)
    self.debug('Adding Network ACL rules to make the created Internal LB rules (SSH & HTTP) accessible...')
    ssh_rule = self.create_NetworkAclRule(self.test_data['ingress_rule'], network=internal_tier_2)
    http_rule = self.create_NetworkAclRule(self.test_data['http_rule'], network=internal_tier_2)
    self.verify_vsp_firewall_rule(ssh_rule)
    self.verify_vsp_firewall_rule(http_rule)
    public_ip = self.acquire_PublicIPAddress(public_tier, vpc)
    self.validate_PublicIPAddress(public_ip, public_tier)
    self.create_StaticNatRule_For_VM(public_vm, public_ip, public_tier)
    self.validate_PublicIPAddress(public_ip, public_tier, static_nat=True, vm=public_vm)
    self.verify_vsp_floating_ip(public_tier, public_vm, public_ip.ipaddress, vpc)
    self.debug('Adding Network ACL rule to make the created NAT rule (SSH) accessible...')
    public_ssh_rule = self.create_NetworkAclRule(self.test_data['ingress_rule'], network=public_tier)
    self.verify_vsp_firewall_rule(public_ssh_rule)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    wget_file_1 = self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    wget_file_2 = self.wget_from_vm_cmd(ssh_client, int_lb_rule_3.sourceipaddress, self.test_data['http_rule']['publicport'])
    self.verify_lb_wget_file(wget_file_1, [internal_vm_1, internal_vm_1_1, internal_vm_1_2])
    self.verify_lb_wget_file(wget_file_2, [internal_vm_2, internal_vm_2_1, internal_vm_2_2])
