@attr(tags=['advanced', 'nuagevsp'], required_hardware='false')
def test_04_nuage_internallb_rules(self):
    'Test Nuage VSP VPC Internal LB functionality with different combinations of Internal LB rules\n        '
    self.debug('Creating Nuage VSP VPC offering with Internal LB service...')
    vpc_off = self.create_VpcOffering(self.test_data['nuagevsp']['vpc_offering_lb'])
    self.validate_VpcOffering(vpc_off, state='Enabled')
    self.debug('Creating a VPC with Internal LB service...')
    vpc = self.create_Vpc(vpc_off, cidr='10.1.0.0/16')
    self.validate_Vpc(vpc, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering with Internal LB service...')
    net_off_1 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering_internal_lb'])
    self.validate_NetworkOffering(net_off_1, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering without Internal LB service...')
    net_off_2 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering'])
    self.validate_NetworkOffering(net_off_2, state='Enabled')
    self.debug('Creating a VPC network with Internal LB service...')
    internal_tier = self.create_Network(net_off_1, gateway='10.1.1.1', vpc=vpc)
    self.validate_Network(internal_tier, state='Implemented')
    vr = self.get_Router(internal_tier)
    self.check_Router_state(vr, state='Running')
    self.debug(('Deploying a VM in network - %s' % internal_tier.name))
    internal_vm = self.create_VM(internal_tier)
    self.check_VM_state(internal_vm, state='Running')
    self.verify_vsp_network(self.domain.id, internal_tier, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(internal_vm)
    self.debug('Creating a VPC network without Internal LB service...')
    public_tier = self.create_Network(net_off_2, gateway='10.1.2.1', vpc=vpc)
    self.validate_Network(public_tier, state='Implemented')
    vr = self.get_Router(public_tier)
    self.check_Router_state(vr, state='Running')
    self.debug(('Deploying a VM in network - %s' % public_tier.name))
    public_vm = self.create_VM(public_tier)
    self.check_VM_state(public_vm, state='Running')
    self.verify_vsp_network(self.domain.id, public_tier, vpc)
    self.verify_vsp_router(vr)
    self.verify_vsp_vm(public_vm)
    self.debug('Creating an Internal LB Rule without source IP Address specified...')
    int_lb_rule = self.create_Internal_LB_Rule(internal_tier)
    self.validate_Internal_LB_Rule(int_lb_rule, state='Add')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule.sourceipaddress)
    self.debug('InternalLbVm is not deployed in the network as there are no VMs assigned to this Internal LB Rule')
    self.debug(('Deleting the Internal LB Rule - %s' % int_lb_rule.name))
    int_lb_rule.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    free_source_ip = int_lb_rule.sourceipaddress
    self.debug('Creating an Internal LB Rule with source IP Address specified...')
    int_lb_rule = self.create_Internal_LB_Rule(internal_tier, source_ip=free_source_ip)
    self.validate_Internal_LB_Rule(int_lb_rule, state='Add')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule.sourceipaddress)
    self.debug('InternalLbVm is not deployed in the network as there are no VMs assigned to this Internal LB Rule')
    self.debug(('Deleting the Internal LB Rule - %s' % int_lb_rule.name))
    int_lb_rule.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    self.debug('Creating an Internal LB Rule when the specified source IP Address is outside the VPC network CIDR range...')
    with self.assertRaises(Exception):
        self.create_Internal_LB_Rule(internal_tier, source_ip='10.1.1.256')
    self.debug("Internal LB Rule creation failed as the requested IP is not in the network's CIDR subnet")
    self.debug('Creating an Internal LB Rule when the specified source IP Address is outside the VPC super CIDR range...')
    with self.assertRaises(Exception):
        self.create_Internal_LB_Rule(internal_tier, source_ip='10.2.1.256')
    self.debug("Internal LB Rule creation failed as the requested IP is not in the network's CIDR subnet")
    self.debug('Creating an Internal LB Rule in a VPC network without Internal Lb service...')
    with self.assertRaises(Exception):
        self.create_Internal_LB_Rule(public_tier)
    self.debug('Internal LB Rule creation failed as Scheme Internal is not supported by this network offering')
    self.debug('Creating multiple Internal LB Rules using different Load Balancing source IP Addresses...')
    int_lb_rule_1 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm])
    int_lb_rule_2 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm])
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm])
    int_lb_vm_1 = self.get_InternalLbVm(internal_tier, int_lb_rule_1.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    int_lb_vm_2 = self.get_InternalLbVm(internal_tier, int_lb_rule_2.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_2.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_1)
    self.verify_vsp_LB_device(int_lb_vm_2)
    self.debug(('Removing VMs from the Internal LB Rules - %s, %s' % (int_lb_rule_1.name, int_lb_rule_2.name)))
    int_lb_rule_1.remove(self.api_client, vms=[internal_vm])
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_1, vm_array=[internal_vm])
    self.debug('VMs successfully removed from the Internal LB Rule in CloudStack')
    int_lb_rule_2.remove(self.api_client, vms=[internal_vm])
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_2, vm_array=[internal_vm])
    self.debug('VMs successfully removed from the Internal LB Rule in CloudStack')
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_2.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm_1)
    self.verify_vsp_LB_device(int_lb_vm_2)
    self.debug(('Deleting the Internal LB Rules - %s, %s' % (int_lb_rule_1.name, int_lb_rule_2.name)))
    int_lb_rule_1.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_1)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    int_lb_rule_2.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_2)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress)
    self.debug('InternalLbVm successfully destroyed in CloudStack')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule_2.sourceipaddress)
    self.debug('InternalLbVm successfully destroyed in CloudStack')
    with self.assertRaises(Exception):
        self.verify_vsp_LB_device(int_lb_vm_1)
    self.debug('InternalLbVm successfully destroyed in VSD')
    with self.assertRaises(Exception):
        self.verify_vsp_LB_device(int_lb_vm_2)
    self.debug('InternalLbVm successfully destroyed in VSD')
    self.debug('Creating multiple Internal LB Rules with different ports but using the same Load Balancing source IP Address...')
    int_lb_rule_1 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm])
    int_lb_rule_2 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm], services=self.test_data['internal_lbrule_http'], source_ip=int_lb_rule_1.sourceipaddress)
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm])
    int_lb_vm = self.get_InternalLbVm(internal_tier, int_lb_rule_1.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm)
    self.debug(('Removing VMs from the Internal LB Rules - %s, %s' % (int_lb_rule_1.name, int_lb_rule_2.name)))
    int_lb_rule_1.remove(self.api_client, vms=[internal_vm])
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_1, vm_array=[internal_vm])
    self.debug('VMs successfully removed from the Internal LB Rule in CloudStack')
    int_lb_rule_2.remove(self.api_client, vms=[internal_vm])
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_2, vm_array=[internal_vm])
    self.debug('VMs successfully removed from the Internal LB Rule in CloudStack')
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm)
    self.debug(('Deleting the Internal LB Rules - %s, %s' % (int_lb_rule_1.name, int_lb_rule_2.name)))
    int_lb_rule_1.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_1)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    int_lb_rule_2.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule_2)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress)
    self.debug('InternalLbVm successfully destroyed in CloudStack')
    with self.assertRaises(Exception):
        self.verify_vsp_LB_device(int_lb_vm)
    self.debug('InternalLbVm successfully destroyed in VSD')
    self.debug('Creating multiple Internal LB Rules with same ports and using the same Load Balacing source IP Address...')
    int_lb_rule = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm])
    self.validate_Internal_LB_Rule(int_lb_rule, state='Active', vm_array=[internal_vm])
    with self.assertRaises(Exception):
        self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm], source_ip=int_lb_rule.sourceipaddress)
    self.debug('Internal LB Rule creation failed as it conflicts with the existing rule')
    int_lb_vm = self.get_InternalLbVm(internal_tier, int_lb_rule.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm)
    self.debug(('Removing VMs from the Internal LB Rule - %s' % int_lb_rule.name))
    int_lb_rule.remove(self.api_client, vms=[internal_vm])
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule, vm_array=[internal_vm])
    self.debug('VMs successfully removed from the Internal LB Rule in CloudStack')
    self.check_InternalLbVm_state(internal_tier, int_lb_rule.sourceipaddress, state='Running')
    self.verify_vsp_LB_device(int_lb_vm)
    self.debug(('Deleting the Internal LB Rule - %s' % int_lb_rule.name))
    int_lb_rule.delete(self.api_client)
    with self.assertRaises(Exception):
        self.validate_Internal_LB_Rule(int_lb_rule)
    self.debug('Internal LB Rule successfully deleted in CloudStack')
    with self.assertRaises(Exception):
        self.check_InternalLbVm_state(internal_tier, int_lb_rule.sourceipaddress)
    self.debug('InternalLbVm successfully destroyed in CloudStack')
    with self.assertRaises(Exception):
        self.verify_vsp_LB_device(int_lb_vm)
    self.debug('InternalLbVm successfully destroyed in VSD')
    self.debug('Attaching a VM from a different tier to an Internal LB Rule created on a tier...')
    with self.assertRaises(Exception):
        self.create_Internal_LB_Rule(internal_tier, vm_array=[public_vm])
    self.debug('Internal LB Rule creation failed as the VM belongs to a different network')
