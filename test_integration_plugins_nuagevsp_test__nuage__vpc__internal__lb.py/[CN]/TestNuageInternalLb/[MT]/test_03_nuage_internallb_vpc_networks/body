@attr(tags=['advanced', 'nuagevsp'], required_hardware='false')
def test_03_nuage_internallb_vpc_networks(self):
    'Test Nuage VSP VPC Networks with and without Internal LB service\n        '
    self.debug('Creating Nuage VSP VPC offering with Internal LB service...')
    vpc_off_1 = self.create_VpcOffering(self.test_data['nuagevsp']['vpc_offering_lb'])
    self.validate_VpcOffering(vpc_off_1, state='Enabled')
    self.debug('Creating Nuage VSP VPC offering without Internal LB service...')
    vpc_off_2 = self.create_VpcOffering(self.test_data['nuagevsp']['vpc_offering'])
    self.validate_VpcOffering(vpc_off_2, state='Enabled')
    self.debug('Creating a VPC with Internal LB service...')
    vpc_1 = self.create_Vpc(vpc_off_1, cidr='10.1.0.0/16')
    self.validate_Vpc(vpc_1, state='Enabled')
    self.debug('Creating a VPC without Internal LB service...')
    vpc_2 = self.create_Vpc(vpc_off_2, cidr='10.1.0.0/16')
    self.validate_Vpc(vpc_2, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering with Internal LB service...')
    net_off_1 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering_internal_lb'])
    self.validate_NetworkOffering(net_off_1, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering without Internal LB service...')
    net_off_2 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering'])
    self.validate_NetworkOffering(net_off_2, state='Enabled')
    self.debug('Creating a VPC network in vpc_1 with Internal LB service...')
    internal_tier_1 = self.create_Network(net_off_1, gateway='10.1.1.1', vpc=vpc_1)
    self.validate_Network(internal_tier_1, state='Implemented')
    vr_1 = self.get_Router(internal_tier_1)
    self.check_Router_state(vr_1, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    internal_vm_1 = self.create_VM(internal_tier_1)
    self.check_VM_state(internal_vm_1, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier_1, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(internal_vm_1)
    self.debug('Creating one more VPC network in vpc_1 with Internal LB service...')
    internal_tier_2 = self.create_Network(net_off_1, gateway='10.1.2.1', vpc=vpc_1)
    self.validate_Network(internal_tier_2, state='Implemented')
    vr_1 = self.get_Router(internal_tier_2)
    self.check_Router_state(vr_1, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    internal_vm_2 = self.create_VM(internal_tier_2)
    self.check_VM_state(internal_vm_2, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier_2, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(internal_vm_2)
    self.debug('Creating a VPC network in vpc_2 with Internal LB service...')
    with self.assertRaises(Exception):
        self.create_Network(net_off_1, gateway='10.1.1.1', vpc=vpc_2)
    self.debug('VPC Network creation failed as vpc_2 does not support Internal Lb service')
    self.debug('Creating a VPC network in vpc_1 without Internal LB service...')
    public_tier_1 = self.create_Network(net_off_2, gateway='10.1.3.1', vpc=vpc_1)
    self.validate_Network(public_tier_1, state='Implemented')
    vr_1 = self.get_Router(public_tier_1)
    self.check_Router_state(vr_1, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    public_vm_1 = self.create_VM(public_tier_1)
    self.check_VM_state(public_vm_1, state='Running')
    self.verify_vsd_network(self.domain.id, public_tier_1, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(public_vm_1)
    self.debug('Creating a VPC network in vpc_2 without Internal LB service...')
    public_tier_2 = self.create_Network(net_off_2, gateway='10.1.1.1', vpc=vpc_2)
    self.validate_Network(public_tier_2, state='Implemented')
    vr_2 = self.get_Router(public_tier_2)
    self.check_Router_state(vr_2, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    public_vm_2 = self.create_VM(public_tier_2)
    self.check_VM_state(public_vm_2, state='Running')
    self.verify_vsd_network(self.domain.id, public_tier_2, vpc_2)
    self.verify_vsd_router(vr_2)
    self.verify_vsd_vm(public_vm_2)
    self.debug('Upgrading a VPC network with Internal LB Service to one without Internal LB Service...')
    self.upgrade_Network(net_off_2, internal_tier_2)
    self.validate_Network(internal_tier_2, state='Implemented')
    vr_1 = self.get_Router(internal_tier_2)
    self.check_Router_state(vr_1, state='Running')
    self.check_VM_state(internal_vm_2, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier_2, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(internal_vm_2)
    self.debug('Upgrading a VPC network without Internal LB Service to one with Internal LB Service...')
    self.upgrade_Network(net_off_1, internal_tier_2)
    self.validate_Network(internal_tier_2, state='Implemented')
    vr_1 = self.get_Router(internal_tier_2)
    self.check_Router_state(vr_1, state='Running')
    self.check_VM_state(internal_vm_2, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier_2, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(internal_vm_2)
    self.debug('Deleting a VPC network with Internal LB Service...')
    self.delete_VM(internal_vm_2)
    self.delete_Network(internal_tier_2)
    with self.assertRaises(Exception):
        self.validate_Network(internal_tier_2)
    self.debug('VPC network successfully deleted in CloudStack')
    with self.assertRaises(Exception):
        self.verify_vsd_network(self.domain.id, internal_tier_2, vpc_1)
    self.debug('VPC network successfully deleted in VSD')
    self.debug('Recreating a VPC network with Internal LB Service...')
    internal_tier_2 = self.create_Network(net_off_1, gateway='10.1.2.1', vpc=vpc_1)
    internal_vm_2 = self.create_VM(internal_tier_2)
    self.validate_Network(internal_tier_2, state='Implemented')
    vr_1 = self.get_Router(internal_tier_2)
    self.check_Router_state(vr_1, state='Running')
    self.check_VM_state(internal_vm_2, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier_2, vpc_1)
    self.verify_vsd_router(vr_1)
    self.verify_vsd_vm(internal_vm_2)
