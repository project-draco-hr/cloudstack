@attr(tags=['advanced', 'nuagevsp'], required_hardware='true')
def test_08_nuage_internallb_appliance_operations_traffic(self):
    'Test Nuage VSP VPC Internal LB functionality with InternalLbVm appliance operations by performing (wget)\n        traffic tests within a VPC\n        '
    self.debug('Creating Nuage VSP VPC offering with Internal LB service...')
    vpc_off = self.create_VpcOffering(self.test_data['nuagevsp']['vpc_offering_lb'])
    self.validate_VpcOffering(vpc_off, state='Enabled')
    self.debug('Creating a VPC with Internal LB service...')
    vpc = self.create_Vpc(vpc_off, cidr='10.1.0.0/16')
    self.validate_Vpc(vpc, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering with Internal LB service...')
    net_off_1 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering_internal_lb'])
    self.validate_NetworkOffering(net_off_1, state='Enabled')
    self.debug('Creating Nuage VSP VPC Network offering without Internal LB service...')
    net_off_2 = self.create_NetworkOffering(self.test_data['nuagevsp']['vpc_network_offering'])
    self.validate_NetworkOffering(net_off_2, state='Enabled')
    self.debug('Creating a VPC network with Internal LB service...')
    internal_tier = self.create_Network(net_off_1, gateway='10.1.1.1', vpc=vpc)
    self.validate_Network(internal_tier, state='Implemented')
    vr = self.get_Router(internal_tier)
    self.check_Router_state(vr, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    internal_vm = self.create_VM(internal_tier)
    self.check_VM_state(internal_vm, state='Running')
    self.verify_vsd_network(self.domain.id, internal_tier, vpc)
    self.verify_vsd_router(vr)
    self.verify_vsd_vm(internal_vm)
    self.debug('Creating a VPC network without Internal LB service...')
    public_tier = self.create_Network(net_off_2, gateway='10.1.2.1', vpc=vpc)
    self.validate_Network(public_tier, state='Implemented')
    vr = self.get_Router(public_tier)
    self.check_Router_state(vr, state='Running')
    self.debug('Deploying a VM in the created VPC network...')
    public_vm = self.create_VM(public_tier)
    self.check_VM_state(public_vm, state='Running')
    self.verify_vsd_network(self.domain.id, public_tier, vpc)
    self.verify_vsd_router(vr)
    self.verify_vsd_vm(public_vm)
    Router.stop(self.api_client, id=vr.id)
    self.check_Router_state(vr, state='Stopped')
    self.validate_Network(public_tier, state='Implemented')
    self.validate_Network(internal_tier, state='Implemented')
    self.verify_vsd_router(vr, stopped=True)
    self.verify_vsd_network(self.domain.id, public_tier, vpc)
    self.verify_vsd_network(self.domain.id, internal_tier, vpc)
    self.debug('Creating two Internal LB Rules (SSH & HTTP) using the same Load Balancing source IP Address...')
    int_lb_rule_1 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm])
    int_lb_rule_2 = self.create_Internal_LB_Rule(internal_tier, vm_array=[internal_vm], services=self.test_data['internal_lbrule_http'], source_ip=int_lb_rule_1.sourceipaddress)
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm])
    int_lb_vm = self.get_InternalLbVm(internal_tier, int_lb_rule_1.sourceipaddress)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsd_lb_device(int_lb_vm)
    self.debug(('Deploying two more VMs in network - %s' % internal_tier.name))
    internal_vm_1 = self.create_VM(internal_tier)
    internal_vm_2 = self.create_VM(internal_tier)
    self.verify_vsd_vm(internal_vm_1)
    self.verify_vsd_vm(internal_vm_2)
    self.debug('Adding two more virtual machines to the created Internal LB rules...')
    int_lb_rule_1.assign(self.api_client, [internal_vm_1, internal_vm_2])
    self.validate_Internal_LB_Rule(int_lb_rule_1, state='Active', vm_array=[internal_vm, internal_vm_1, internal_vm_2])
    int_lb_rule_2.assign(self.api_client, [internal_vm_1, internal_vm_2])
    self.validate_Internal_LB_Rule(int_lb_rule_2, state='Active', vm_array=[internal_vm, internal_vm_1, internal_vm_2])
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsd_lb_device(int_lb_vm)
    self.debug('Adding Network ACL rules to make the created Internal LB rules (SSH & HTTP) accessible...')
    ssh_rule = self.create_NetworkAclRule(self.test_data['ingress_rule'], network=internal_tier)
    http_rule = self.create_NetworkAclRule(self.test_data['http_rule'], network=internal_tier)
    self.verify_vsd_firewall_rule(ssh_rule)
    self.verify_vsd_firewall_rule(http_rule)
    public_ip = self.acquire_PublicIPAddress(public_tier, vpc)
    self.validate_PublicIPAddress(public_ip, public_tier)
    self.create_StaticNatRule_For_VM(public_vm, public_ip, public_tier)
    self.validate_PublicIPAddress(public_ip, public_tier, static_nat=True, vm=public_vm)
    self.verify_vsd_floating_ip(public_tier, public_vm, public_ip.ipaddress, vpc)
    self.debug('Adding Network ACL rule to make the created NAT rule (SSH) accessible...')
    public_ssh_rule = self.create_NetworkAclRule(self.test_data['ingress_rule'], network=public_tier)
    self.verify_vsd_firewall_rule(public_ssh_rule)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    wget_file = self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
    self.verify_lb_wget_file(wget_file, [internal_vm, internal_vm_1, internal_vm_2])
    self.stop_InternalLbVm(int_lb_vm)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Stopped')
    self.verify_vsd_lb_device(int_lb_vm, stopped=True)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    with self.assertRaises(Exception):
        self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
    self.debug('Failed to wget file as the InternalLbVm is in stopped state')
    self.start_InternalLbVm(int_lb_vm)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsd_lb_device(int_lb_vm)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    tries = 0
    while (tries < 10):
        try:
            wget_file = self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
        except Exception as e:
            self.debug(('Failed to wget file via the InternalLbVm after re-starting the InternalLbVm appliance: %s' % e))
            self.debug('Waiting for the InternalLbVm to be fully resolved for (wget) traffic test...')
            time.sleep(30)
            tries += 1
            continue
        self.debug('Internal LB (wget) traffic test is successful after re-starting the InternalLbVm appliance')
        break
    self.verify_lb_wget_file(wget_file, [internal_vm, internal_vm_1, internal_vm_2])
    Router.start(self.api_client, id=vr.id)
    self.check_Router_state(vr)
    self.validate_Network(public_tier, state='Implemented')
    self.validate_Network(internal_tier, state='Implemented')
    self.verify_vsd_router(vr)
    self.verify_vsd_network(self.domain.id, public_tier, vpc)
    self.verify_vsd_network(self.domain.id, internal_tier, vpc)
    self.stop_InternalLbVm(int_lb_vm)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Stopped')
    self.verify_vsd_lb_device(int_lb_vm, stopped=True)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    with self.assertRaises(Exception):
        self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
    self.debug('Failed to wget file as the InternalLbVm is in stopped state')
    self.start_InternalLbVm(int_lb_vm)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsd_lb_device(int_lb_vm)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    tries = 0
    while (tries < 10):
        try:
            wget_file = self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
        except Exception as e:
            self.debug(('Failed to wget file via the InternalLbVm after re-starting the InternalLbVm appliance: %s' % e))
            self.debug('Waiting for the InternalLbVm to be fully resolved for (wget) traffic test...')
            time.sleep(30)
            tries += 1
            continue
        self.debug('Internal LB (wget) traffic test is successful after re-starting the InternalLbVm appliance')
        break
    self.verify_lb_wget_file(wget_file, [internal_vm, internal_vm_1, internal_vm_2])
    self.stop_InternalLbVm(int_lb_vm, force=True)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Stopped')
    self.verify_vsd_lb_device(int_lb_vm, stopped=True)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    with self.assertRaises(Exception):
        self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
    self.debug('Failed to wget file as the InternalLbVm is in stopped state')
    self.start_InternalLbVm(int_lb_vm)
    self.check_InternalLbVm_state(internal_tier, int_lb_rule_1.sourceipaddress, state='Running')
    self.verify_vsd_lb_device(int_lb_vm)
    ssh_client = self.ssh_into_VM(public_vm, public_ip)
    tries = 0
    while (tries < 10):
        try:
            wget_file = self.wget_from_vm_cmd(ssh_client, int_lb_rule_1.sourceipaddress, self.test_data['http_rule']['publicport'])
        except Exception as e:
            self.debug(('Failed to wget file via the InternalLbVm after re-starting the InternalLbVm appliance: %s' % e))
            self.debug('Waiting for the InternalLbVm to be fully resolved for (wget) traffic test...')
            time.sleep(30)
            tries += 1
            continue
        self.debug('Internal LB (wget) traffic test is successful after re-starting the InternalLbVm appliance')
        break
    self.verify_lb_wget_file(wget_file, [internal_vm, internal_vm_1, internal_vm_2])
