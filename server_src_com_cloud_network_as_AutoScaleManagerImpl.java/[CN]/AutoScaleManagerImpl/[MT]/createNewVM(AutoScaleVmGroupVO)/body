{
  AutoScaleVmProfileVO profileVo=_autoScaleVmProfileDao.findById(asGroup.getProfileId());
  long templateId=profileVo.getTemplateId();
  long serviceOfferingId=profileVo.getServiceOfferingId();
  if (templateId == -1) {
    return -1;
  }
  try {
    Account owner=_accountService.getActiveAccountById(profileVo.getAccountId());
    DataCenter zone=_entityMgr.findById(DataCenter.class,profileVo.getZoneId());
    if (zone == null) {
      throw new InvalidParameterValueException("Unable to find zone by id=" + profileVo.getZoneId());
    }
    ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException("Unable to find service offering: " + serviceOfferingId);
    }
    VirtualMachineTemplate template=_entityMgr.findById(VirtualMachineTemplate.class,templateId);
    if (template == null) {
      throw new InvalidParameterValueException("Unable to use template " + templateId);
    }
    if (!zone.isLocalStorageEnabled()) {
      if (serviceOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException("Zone is not configured to use local storage but service offering " + serviceOffering.getName() + " uses it");
      }
    }
    UserVm vm=null;
    IpAddresses addrs=new IpAddresses(null,null);
    if (zone.getNetworkType() == NetworkType.Basic) {
      vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,null,owner,"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),null,null,null,HypervisorType.XenServer,HTTPMethod.GET,null,null,null,null,true,null,null,null,null);
    }
 else {
      if (zone.isSecurityGroupEnabled()) {
        vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,null,null,owner,"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),null,null,null,HypervisorType.XenServer,HTTPMethod.GET,null,null,null,null,true,null,null,null,null);
      }
 else {
        vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,null,owner,"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),"autoScaleVm-" + asGroup.getId() + "-"+ getCurrentTimeStampString(),null,null,null,HypervisorType.XenServer,HTTPMethod.GET,null,null,null,addrs,true,null,null,null,null);
      }
    }
    if (vm != null) {
      return vm.getId();
    }
 else {
      return -1;
    }
  }
 catch (  InsufficientCapacityException ex) {
    logger.info(ex);
    logger.trace(ex.getMessage(),ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  ResourceAllocationException ex) {
    logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR,ex.getMessage());
  }
}
