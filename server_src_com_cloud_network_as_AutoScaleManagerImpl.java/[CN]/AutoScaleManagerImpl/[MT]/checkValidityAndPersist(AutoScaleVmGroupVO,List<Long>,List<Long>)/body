{
  final int minMembers=vmGroup.getMinMembers();
  final int maxMembers=vmGroup.getMaxMembers();
  final int interval=vmGroup.getInterval();
  final List<Counter> counters=new ArrayList<Counter>();
  final List<AutoScalePolicyVO> policies=new ArrayList<AutoScalePolicyVO>();
  final List<Long> policyIds=new ArrayList<Long>();
  final List<Long> currentScaleUpPolicyIds=new ArrayList<Long>();
  final List<Long> currentScaleDownPolicyIds=new ArrayList<Long>();
  if (vmGroup.getCreated() != null) {
    ApiDBUtils.getAutoScaleVmGroupPolicyIds(vmGroup.getId(),currentScaleUpPolicyIds,currentScaleDownPolicyIds);
  }
  if (minMembers < 0) {
    throw new InvalidParameterValueException(ApiConstants.MIN_MEMBERS + " is an invalid value: " + minMembers);
  }
  if (maxMembers < 0) {
    throw new InvalidParameterValueException(ApiConstants.MAX_MEMBERS + " is an invalid value: " + maxMembers);
  }
  if (minMembers > maxMembers) {
    throw new InvalidParameterValueException(ApiConstants.MIN_MEMBERS + " (" + minMembers+ ")cannot be greater than "+ ApiConstants.MAX_MEMBERS+ " ("+ maxMembers+ ")");
  }
  if (interval < 0) {
    throw new InvalidParameterValueException("interval is an invalid value: " + interval);
  }
  if (passedScaleUpPolicyIds != null) {
    policies.addAll(getAutoScalePolicies("scaleuppolicyid",passedScaleUpPolicyIds,counters,interval,true));
    policyIds.addAll(passedScaleUpPolicyIds);
  }
 else {
    getAutoScalePolicies("scaleuppolicyid",currentScaleUpPolicyIds,counters,interval,true);
    policyIds.addAll(currentScaleUpPolicyIds);
  }
  if (passedScaleDownPolicyIds != null) {
    policies.addAll(getAutoScalePolicies("scaledownpolicyid",passedScaleDownPolicyIds,counters,interval,false));
    policyIds.addAll(passedScaleDownPolicyIds);
  }
 else {
    getAutoScalePolicies("scaledownpolicyid",currentScaleDownPolicyIds,counters,interval,false);
    policyIds.addAll(currentScaleDownPolicyIds);
  }
  final AutoScaleVmProfileVO profileVO=getEntityInDatabase(CallContext.current().getCallingAccount(),ApiConstants.VMPROFILE_ID,vmGroup.getProfileId(),_autoScaleVmProfileDao);
  final LoadBalancerVO loadBalancer=getEntityInDatabase(CallContext.current().getCallingAccount(),ApiConstants.LBID,vmGroup.getLoadBalancerId(),_lbDao);
  validateAutoScaleCounters(loadBalancer.getNetworkId(),counters,profileVO.getCounterParams());
  final ControlledEntity[] sameOwnerEntities=policies.toArray(new ControlledEntity[policies.size() + 2]);
  sameOwnerEntities[sameOwnerEntities.length - 2]=loadBalancer;
  sameOwnerEntities[sameOwnerEntities.length - 1]=profileVO;
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,sameOwnerEntities);
  return Transaction.execute(new TransactionCallback<AutoScaleVmGroupVO>(){
    @Override public AutoScaleVmGroupVO doInTransaction(    final TransactionStatus status){
      final AutoScaleVmGroupVO vmGroupNew=_autoScaleVmGroupDao.persist(vmGroup);
      if (passedScaleUpPolicyIds != null || passedScaleDownPolicyIds != null) {
        _autoScaleVmGroupPolicyMapDao.removeByGroupId(vmGroupNew.getId());
        for (        final Long policyId : policyIds) {
          _autoScaleVmGroupPolicyMapDao.persist(new AutoScaleVmGroupPolicyMapVO(vmGroupNew.getId(),policyId));
        }
      }
      return vmGroupNew;
    }
  }
);
}
