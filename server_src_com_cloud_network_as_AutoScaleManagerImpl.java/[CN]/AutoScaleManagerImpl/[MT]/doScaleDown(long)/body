{
  final AutoScaleVmGroupVO asGroup=_autoScaleVmGroupDao.findById(groupId);
  if (asGroup == null) {
    s_logger.error("Can not find the groupid " + groupId + " for scaling up");
    return;
  }
  if (!checkConditionDown(asGroup)) {
    return;
  }
  final long vmId=removeLBrule(asGroup);
  if (vmId != -1) {
    final long profileId=asGroup.getProfileId();
    _autoScaleVmGroupVmMapDao.remove(groupId,vmId);
    final List<AutoScaleVmGroupPolicyMapVO> GroupPolicyVOs=_autoScaleVmGroupPolicyMapDao.listByVmGroupId(groupId);
    for (    final AutoScaleVmGroupPolicyMapVO GroupPolicyVO : GroupPolicyVOs) {
      final AutoScalePolicyVO vo=_autoScalePolicyDao.findById(GroupPolicyVO.getPolicyId());
      if (vo.getAction().equals("scaledown")) {
        vo.setLastQuiteTime(new Date());
        _autoScalePolicyDao.persist(vo);
        break;
      }
    }
    final AutoScaleVmProfileVO asProfile=_autoScaleVmProfileDao.findById(profileId);
    final Integer destroyVmGracePeriod=asProfile.getDestroyVmGraceperiod();
    if (destroyVmGracePeriod >= 0) {
      _executor.schedule(new Runnable(){
        @Override public void run(){
          try {
            _userVmManager.destroyVm(vmId);
          }
 catch (          final ResourceUnavailableException e) {
            e.printStackTrace();
          }
catch (          final ConcurrentOperationException e) {
            e.printStackTrace();
          }
        }
      }
,destroyVmGracePeriod,TimeUnit.SECONDS);
    }
  }
 else {
    s_logger.error("Can not remove LB rule for the VM being destroyed. Do nothing more.");
  }
}
