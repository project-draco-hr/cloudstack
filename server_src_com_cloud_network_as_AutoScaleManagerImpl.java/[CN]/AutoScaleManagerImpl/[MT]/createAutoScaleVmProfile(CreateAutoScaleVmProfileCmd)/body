{
  final Account owner=_accountDao.findById(cmd.getAccountId());
  final Account caller=CallContext.current().getCallingAccount();
  _accountMgr.checkAccess(caller,null,true,owner);
  final long zoneId=cmd.getZoneId();
  final long serviceOfferingId=cmd.getServiceOfferingId();
  final long autoscaleUserId=cmd.getAutoscaleUserId();
  final DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Unable to find zone by id");
  }
  final ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException("Unable to find service offering by id");
  }
  final HashMap<String,Object> deployParams=cmd.getDeployParamMap();
  final Object networks=deployParams.get("networks");
  if (networks != null && networks instanceof String && ((String)networks).length() > 0) {
    throw new InvalidParameterValueException("'networks' is not a valid parameter, network for an AutoScaled VM is chosen automatically. An autoscaled VM is deployed in the loadbalancer's network");
  }
  dispatchChainFactory.getStandardDispatchChain().dispatch(new DeployVMCmd(),deployParams);
  AutoScaleVmProfileVO profileVO=new AutoScaleVmProfileVO(cmd.getZoneId(),cmd.getDomainId(),cmd.getAccountId(),cmd.getServiceOfferingId(),cmd.getTemplateId(),cmd.getOtherDeployParams(),cmd.getCounterParamList(),cmd.getDestroyVmGraceperiod(),autoscaleUserId);
  profileVO=checkValidityAndPersist(profileVO);
  s_logger.info("Successfully create AutoScale Vm Profile with Id: " + profileVO.getId());
  return profileVO;
}
