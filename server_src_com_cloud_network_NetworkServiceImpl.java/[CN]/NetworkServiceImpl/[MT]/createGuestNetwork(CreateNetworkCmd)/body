{
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Account caller=UserContext.current().getCaller();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  Long vpcId=cmd.getVpcId();
  String startIPv6=cmd.getStartIpv6();
  String endIPv6=cmd.getEndIpv6();
  String ip6Gateway=cmd.getIp6Gateway();
  String ip6Cidr=cmd.getIp6Cidr();
  Boolean dualStack=cmd.isDualStack();
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  if (ntwkOff == null || ntwkOff.isSystemOnly()) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find network offering by specified id");
    if (ntwkOff != null) {
      ex.addProxyObject(ntwkOff,networkOfferingId,"networkOfferingId");
      String tablename=AnnotationHelper.getTableName(ntwkOff);
      if (tablename != null) {
        ex.addProxyObject(tablename,networkOfferingId,"networkOfferingId");
      }
 else {
        s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
      }
      throw ex;
    }
    throw ex;
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException("Unable to find a physical network having the specified physical network id");
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Specified zone id was not found");
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    PermissionDeniedException ex=new PermissionDeniedException("Cannot perform this operation since specified Zone is currently disabled");
    ex.addProxyObject(zone,zoneId,"zoneId");
    throw ex;
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException("Incorrect aclType specified. Check the API documentation for supported types");
    }
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException("AclType should be " + ACLType.Account + " for network of type "+ Network.GuestType.Isolated);
      }
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      if (!(aclType == ACLType.Domain || aclType == ACLType.Account)) {
        throw new InvalidParameterValueException("AclType should be " + ACLType.Domain + " or "+ ACLType.Account+ " for network of type "+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (ntwkOff.getGuestType() == GuestType.Shared && !_accountMgr.isAdmin(caller.getType())) {
    throw new InvalidParameterValueException("Only Admins can create network with guest type " + GuestType.Shared);
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getType())) {
      throw new PermissionDeniedException("Only admin can create networks with aclType=Domain");
    }
    if (ntwkOff.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException("Only " + GuestType.Shared + " networks can have aclType="+ ACLType.Domain);
    }
    if (domainId != null) {
      if (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException("Domain level networks are supported just for traffic type " + TrafficType.Guest + " and guest type "+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException("Unable to find domain by specified id");
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException("Parameter subDomainAccess can be specified only with aclType=Domain");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (startIPv6 != null && startIP != null && (dualStack == null || dualStack == false)) {
    throw new InvalidParameterValueException("Cannot specify both IPv4 and IPv6 address without set dualStack = true!");
  }
  boolean ipv4=false, ipv6=false;
  if (startIP != null) {
    ipv4=true;
  }
  if (startIPv6 != null) {
    ipv6=true;
  }
  String cidr=null;
  if (ipv4) {
    if (startIP != null) {
      if (!NetUtils.isValidIp(startIP)) {
        throw new InvalidParameterValueException("Invalid format for the startIp parameter");
      }
      if (endIP == null) {
        endIP=startIP;
      }
 else       if (!NetUtils.isValidIp(endIP)) {
        throw new InvalidParameterValueException("Invalid format for the endIp parameter");
      }
    }
    if (startIP != null && endIP != null) {
      if (!(gateway != null && netmask != null)) {
        throw new InvalidParameterValueException("gateway and netmask should be defined when startIP/endIP are passed in");
      }
    }
    if (gateway != null && netmask != null) {
      if (!NetUtils.isValidIp(gateway)) {
        throw new InvalidParameterValueException("Invalid gateway");
      }
      if (!NetUtils.isValidNetmask(netmask)) {
        throw new InvalidParameterValueException("Invalid netmask");
      }
      cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
    }
  }
  if (ipv6) {
    if (!NetUtils.isValidIpv6(startIPv6)) {
      throw new InvalidParameterValueException("Invalid format for the startIPv6 parameter");
    }
    if (endIPv6 == null) {
      endIPv6=startIPv6;
    }
 else     if (!NetUtils.isValidIpv6(endIPv6)) {
      throw new InvalidParameterValueException("Invalid format for the endIPv6 parameter");
    }
    if (!(ip6Gateway != null && ip6Cidr != null)) {
      throw new InvalidParameterValueException("ip6Gateway and ip6Cidr should be defined when startIPv6/endIPv6 are passed in");
    }
    if (!NetUtils.isValidIpv6(ip6Gateway)) {
      throw new InvalidParameterValueException("Invalid ip6Gateway");
    }
    if (!NetUtils.isValidIp6Cidr(ip6Cidr)) {
      throw new InvalidParameterValueException("Invalid ip6cidr");
    }
    int cidrSize=NetUtils.getIp6CidrSize(ip6Cidr);
    if (cidrSize < 64) {
      throw new InvalidParameterValueException("The cidr size of IPv6 network must be no less than 64 bits!");
    }
  }
  if (ipv6) {
    if (zone.getNetworkType() != NetworkType.Advanced || ntwkOff.getGuestType() != Network.GuestType.Shared) {
      throw new InvalidParameterValueException("Can only support create IPv6 network with advance shared network!");
    }
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException("Regular user can create a network only from the network" + " offering having traffic type " + TrafficType.Guest + " and network type "+ Network.GuestType.Isolated+ " with a service "+ Service.SourceNat.getName()+ " enabled");
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (ntwkOff.getSpecifyVlan() || vlanId != null)) {
    throw new InvalidParameterValueException("Regular user is not allowed to specify vlanId");
  }
  if (ipv4) {
    if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
      String[] cidrPair=cidr.split("\\/");
      int cidrSize=Integer.valueOf(cidrPair[1]);
      if (cidrSize < _cidrLimit) {
        throw new InvalidParameterValueException("Cidr size can't be less than " + _cidrLimit);
      }
    }
  }
  Collection<String> ntwkProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(ntwkOff,physicalNetworkId).values();
  if (ipv6 && providersConfiguredForExternalNetworking(ntwkProviders)) {
    throw new InvalidParameterValueException("Cannot support IPv6 on network offering with external devices!");
  }
  if (cidr != null && providersConfiguredForExternalNetworking(ntwkProviders)) {
    if (ntwkOff.getGuestType() == GuestType.Shared && (zone.getNetworkType() == NetworkType.Advanced) && isSharedNetworkOfferingWithServices(networkOfferingId)) {
      checkSharedNetworkCidrOverlap(zoneId,pNtwk.getId(),cidr);
    }
 else {
      throw new InvalidParameterValueException("Cannot specify CIDR when using network offering with external devices!");
    }
  }
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((ntwkOff.getGuestType() == Network.GuestType.Shared) || (ntwkOff.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))));
  if (!createVlan) {
    if (ipv6) {
      createVlan=true;
    }
  }
  if (createVlan && !ntwkOff.getSpecifyIpRanges()) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Network offering with specified id doesn't support adding multiple ip ranges");
    ex.addProxyObject(ntwkOff,ntwkOff.getId(),"networkOfferingId");
    String tablename=AnnotationHelper.getTableName(ntwkOff);
    if (tablename != null) {
      ex.addProxyObject(tablename,ntwkOff.getId(),"networkOfferingId");
    }
 else {
      s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
    }
    throw ex;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long sharedDomainId=null;
  if (isDomainSpecific) {
    if (domainId != null) {
      sharedDomainId=domainId;
    }
 else {
      sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
      subdomainAccess=true;
    }
  }
  if (aclType == ACLType.Domain) {
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  Network network=null;
  if (vpcId != null) {
    if (!_configMgr.isOfferingForVpc(ntwkOff)) {
      throw new InvalidParameterValueException("Network offering can't be used for VPC networks");
    }
    network=_vpcMgr.createVpcGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,caller);
  }
 else {
    if (_configMgr.isOfferingForVpc(ntwkOff)) {
      throw new InvalidParameterValueException("Network offering can be used for VPC networks only");
    }
    network=_networkMgr.createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,ip6Gateway,ip6Cidr);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && createVlan) {
    _configMgr.createVlanAndPublicIpRange(pNtwk.getDataCenterId(),network.getId(),physicalNetworkId,false,null,startIP,endIP,gateway,netmask,vlanId,null,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
  }
  txn.commit();
  return network;
}
