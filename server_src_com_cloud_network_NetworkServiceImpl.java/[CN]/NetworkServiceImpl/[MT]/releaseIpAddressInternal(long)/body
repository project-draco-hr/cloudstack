{
  Long userId=CallContext.current().getCallingUserId();
  Account caller=CallContext.current().getCallingAccount();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException("Unable to find ip address by id");
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug("Ip Address id= " + ipAddressId + " is not allocated, so do nothing.");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,true,ipVO);
  }
  if (ipVO.isSourceNat()) {
    throw new IllegalArgumentException("ip address is used for source nat purposes and can not be disassociated.");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException("only ip addresses that belong to a virtual network may be disassociated.");
  }
  if (ipVO.getSystem()) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Can't release system IP address with specified id");
    ex.addProxyObject(ipVO.getUuid(),"systemIpAddrId");
    throw ex;
  }
  boolean success=_ipAddrMgr.disassociatePublicIpAddress(ipAddressId,userId,caller);
  if (success) {
    Long networkId=ipVO.getAssociatedWithNetworkId();
    if (networkId != null) {
      Network guestNetwork=getNetwork(networkId);
      NetworkOffering offering=_entityMgr.findById(NetworkOffering.class,guestNetwork.getNetworkOfferingId());
      Long vmId=ipVO.getAssociatedWithVmId();
      if (offering.getElasticIp() && vmId != null) {
        _rulesMgr.getSystemIpAndEnableStaticNatForVm(_userVmDao.findById(vmId),true);
        return true;
      }
    }
  }
 else {
    s_logger.warn("Failed to release public ip address id=" + ipAddressId);
  }
  return success;
}
