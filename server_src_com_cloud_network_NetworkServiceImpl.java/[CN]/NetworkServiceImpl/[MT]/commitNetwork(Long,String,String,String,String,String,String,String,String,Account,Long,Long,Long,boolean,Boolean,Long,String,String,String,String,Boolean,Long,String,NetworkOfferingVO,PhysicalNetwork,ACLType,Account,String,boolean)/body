{
  try {
    Network network=Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws InsufficientCapacityException, ResourceAllocationException {
        Account owner=ownerFinal;
        Boolean subdomainAccess=subdomainAccessFinal;
        Long sharedDomainId=null;
        if (isDomainSpecific) {
          if (domainId != null) {
            sharedDomainId=domainId;
          }
 else {
            sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
            subdomainAccess=true;
          }
        }
        if (aclType == ACLType.Domain) {
          owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
        }
        Network network=null;
        if (vpcId != null) {
          if (!_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException("Network offering can't be used for VPC networks");
          }
          if (aclId != null) {
            NetworkACL acl=_networkACLDao.findById(aclId);
            if (acl == null) {
              throw new InvalidParameterValueException("Unable to find specified NetworkACL");
            }
            if (aclId != NetworkACL.DEFAULT_DENY && aclId != NetworkACL.DEFAULT_ALLOW) {
              if (!vpcId.equals(acl.getVpcId())) {
                throw new InvalidParameterValueException("ACL: " + aclId + " do not belong to the VPC");
              }
            }
          }
          network=_vpcMgr.createVpcGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,aclId,caller,displayNetwork);
        }
 else {
          if (_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException("Network offering can be used for VPC networks only");
          }
          if (ntwkOff.getInternalLb()) {
            throw new InvalidParameterValueException("Internal Lb can be enabled on vpc networks only");
          }
          network=_networkMgr.createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,ip6Gateway,ip6Cidr,displayNetwork,isolatedPvlan);
        }
        if (_accountMgr.isRootAdmin(caller.getId()) && createVlan && network != null) {
          _configMgr.createVlanAndPublicIpRange(pNtwk.getDataCenterId(),network.getId(),physicalNetworkId,false,null,startIP,endIP,gateway,netmask,vlanId,null,null,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
        }
        return network;
      }
    }
);
    if (domainId != null && aclType == ACLType.Domain) {
      Map<String,Object> params=new HashMap<String,Object>();
      params.put(ApiConstants.ENTITY_TYPE,Network.class);
      params.put(ApiConstants.ENTITY_ID,network.getId());
      params.put(ApiConstants.DOMAIN_ID,domainId);
      params.put(ApiConstants.SUBDOMAIN_ACCESS,subdomainAccessFinal == null ? Boolean.TRUE : subdomainAccessFinal);
      _messageBus.publish(_name,EntityManager.MESSAGE_ADD_DOMAIN_WIDE_ENTITY_EVENT,PublishScope.LOCAL,params);
    }
    return network;
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    throw new IllegalStateException(e);
  }
}
