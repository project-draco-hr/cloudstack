{
  Integer StartVnet;
  Integer EndVnet;
  String[] VnetRange=removeVlan.split("-");
  long minVnet=MIN_VLAN_ID;
  long maxVnet=MAX_VLAN_ID;
  s_logger.debug("ISOLATION METHODS:" + network.getIsolationMethods());
  if (network.getIsolationMethods().contains("GRE")) {
    minVnet=MIN_GRE_KEY;
    maxVnet=MAX_GRE_KEY;
  }
  String rangeMessage=" between " + minVnet + " and "+ maxVnet;
  if (VnetRange.length < 2) {
    throw new InvalidParameterValueException("Please provide valid vnet range" + rangeMessage);
  }
  if (VnetRange[0] == null || VnetRange[1] == null) {
    throw new InvalidParameterValueException("Please provide valid vnet range" + rangeMessage);
  }
  try {
    StartVnet=Integer.parseInt(VnetRange[0]);
    EndVnet=Integer.parseInt(VnetRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn("Unable to parse vnet range:",e);
    throw new InvalidParameterValueException("Please provide valid vnet range" + rangeMessage);
  }
  if (StartVnet < minVnet || EndVnet > maxVnet) {
    throw new InvalidParameterValueException("Vnet range has to be" + rangeMessage);
  }
  if (StartVnet > EndVnet) {
    throw new InvalidParameterValueException("Vnet range has to be" + rangeMessage + " and start range should be lesser than or equal to stop range");
  }
  List<Integer> tokens=new ArrayList<Integer>();
  tokens.add(StartVnet);
  tokens.add(EndVnet);
  return tokens;
}
