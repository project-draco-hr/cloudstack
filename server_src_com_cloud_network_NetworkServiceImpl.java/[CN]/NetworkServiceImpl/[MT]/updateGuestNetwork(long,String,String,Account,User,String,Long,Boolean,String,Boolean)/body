{
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Specified network id doesn't exist in the system");
    ex.addProxyObject(String.valueOf(networkId),"networkId");
    throw ex;
  }
  if (network.getVpcId() != null && networkOfferingId != null) {
    Vpc vpc=_vpcMgr.getVpc(network.getVpcId());
    _vpcMgr.validateNtwkOffForNtwkInVpc(networkId,networkOfferingId,null,null,vpc,null,_accountMgr.getAccount(network.getAccountId()),null);
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException("Don't allow to update network in state " + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException("Can't update system networks");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException("Can't allow networks which traffic type is not " + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (displayNetwork != null) {
    if (!_accountMgr.isRootAdmin(callerAccount.getType())) {
      throw new PermissionDeniedException("Only admin allowed to update displaynetwork parameter");
    }
    network.setDisplayNetwork(displayNetwork);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException("NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  NetworkOffering oldNtwkOff=_networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOfferingId != null) {
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find network offering with specified id");
      ex.addProxyObject(networkOfferingId.toString(),"networkOfferingId");
      throw ex;
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Network offering with specified id is not in " + NetworkOffering.State.Enabled + " state, can't upgrade to it");
      ex.addProxyObject(networkOffering.getUuid(),"networkOfferingId");
      throw ex;
    }
    boolean forVpcNew=_configMgr.isOfferingForVpc(networkOffering);
    boolean vorVpcOriginal=_configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class,oldNetworkOfferingId));
    if (forVpcNew != vorVpcOriginal) {
      String errMsg=forVpcNew ? "a vpc offering " : "not a vpc offering";
      throw new InvalidParameterValueException("Can't update as the new offering is " + errMsg);
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      Collection<String> newProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering,network.getPhysicalNetworkId()).values();
      Collection<String> oldProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff,network.getPhysicalNetworkId()).values();
      if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {
        throw new InvalidParameterValueException("Updating network failed since guest CIDR needs to be changed!");
      }
      if (changeCidr) {
        if (!checkForNonStoppedVmInNetwork(network.getId())) {
          InvalidParameterValueException ex=new InvalidParameterValueException("All user vm of network of specified id should be stopped before changing CIDR!");
          ex.addProxyObject(network.getUuid(),"networkId");
          throw ex;
        }
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException("Can't upgrade from network offering " + oldNtwkOff.getUuid() + " to "+ networkOffering.getUuid()+ "; check logs for more information");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class,networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException("Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'); can't start or end with \"-\"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class,offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException("Domain name change is not supported by the network offering id=" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  String networkCidr=network.getNetworkCidr();
  if (guestVmCidr != null) {
    if (dc.getNetworkType() == NetworkType.Basic) {
      throw new InvalidParameterValueException("Guest VM CIDR can't be specified for zone with " + NetworkType.Basic + " networking");
    }
    if (network.getGuestType() != GuestType.Isolated) {
      throw new InvalidParameterValueException("Can only allow IP Reservation in networks with guest type " + GuestType.Isolated);
    }
    if (networkOfferingChanged == true) {
      throw new InvalidParameterValueException("Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.");
    }
    if (!(network.getState() == Network.State.Implemented)) {
      throw new InvalidParameterValueException("The network must be in " + Network.State.Implemented + " state. IP Reservation cannot be applied in "+ network.getState()+ " state");
    }
    if (!NetUtils.isValidCIDR(guestVmCidr)) {
      throw new InvalidParameterValueException("Invalid format of Guest VM CIDR.");
    }
    if (!NetUtils.validateGuestCidr(guestVmCidr)) {
      throw new InvalidParameterValueException("Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. ");
    }
    if (networkCidr != null) {
      if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr,networkCidr)) {
        throw new InvalidParameterValueException("Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : " + networkCidr);
      }
    }
 else {
      if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr,network.getCidr())) {
        throw new InvalidParameterValueException("Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  " + network.getCidr());
      }
    }
    String[] guestVmCidrPair=guestVmCidr.split("\\/");
    Long size=Long.valueOf(guestVmCidrPair[1]);
    List<NicVO> nicsPresent=_nicDao.listByNetworkId(networkId);
    String cidrIpRange[]=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],size);
    s_logger.info("The start IP of the specified guest vm cidr is: " + cidrIpRange[0] + " and end IP is: "+ cidrIpRange[1]);
    long startIp=NetUtils.ip2Long(cidrIpRange[0]);
    long endIp=NetUtils.ip2Long(cidrIpRange[1]);
    long range=endIp - startIp + 1;
    s_logger.info("The specified guest vm cidr has " + range + " IPs");
    for (    NicVO nic : nicsPresent) {
      long nicIp=NetUtils.ip2Long(nic.getIp4Address());
      if (nicIp < startIp || nicIp > endIp) {
        if (!(nic.getState() == Nic.State.Deallocating)) {
          throw new InvalidParameterValueException("Active IPs like " + nic.getIp4Address() + " exist outside the Guest VM CIDR. Cannot apply reservation ");
        }
      }
    }
    if (network.getNetworkCidr() == null) {
      if (NetUtils.isSameIpRange(guestVmCidr,network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {
        throw new InvalidParameterValueException("The Start IP and End IP of guestvmcidr: " + guestVmCidr + " and CIDR: "+ network.getCidr()+ " are same, "+ "even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.");
      }
    }
 else {
      if (NetUtils.isSameIpRange(guestVmCidr,network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {
        throw new InvalidParameterValueException("The Start IP and End IP of guestvmcidr: " + guestVmCidr + " and Network CIDR: "+ network.getNetworkCidr()+ " are same, "+ "even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, "+ "specify guestVmCidr to be: "+ network.getNetworkCidr());
      }
    }
    if (network.getNetworkCidr() == null) {
      network.setNetworkCidr(network.getCidr());
    }
    if (network.getNetworkCidr().equals(guestVmCidr)) {
      s_logger.warn("Guest VM CIDR and Network CIDR both are same, reservation will reset.");
      network.setNetworkCidr(null);
    }
    network.setCidr(guestVmCidr);
    _networksDao.update(networkId,network);
    s_logger.info("IP Reservation has been applied. The new CIDR for Guests Vms is " + guestVmCidr);
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      if (!changeCidr) {
        s_logger.debug("Shutting down elements and resources for network id=" + networkId + " as a part of network update");
        if (!_networkMgr.shutdownNetworkElementsAndResources(context,true,network)) {
          s_logger.warn("Failed to shutdown the network elements and resources as a part of network restart: " + network);
          CloudRuntimeException ex=new CloudRuntimeException("Failed to shutdown the network elements and resources as a part of update to network of specified id");
          ex.addProxyObject(network.getUuid(),"networkId");
          throw ex;
        }
      }
 else {
        s_logger.debug("Shutting down network id=" + networkId + " as a part of network update");
        if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr())) {
          s_logger.warn("Existing IP reservation will become ineffective for the network with id =  " + networkId + " You need to reapply reservation after network reimplementation.");
          network.setCidr(network.getNetworkCidr());
          network.setNetworkCidr(null);
        }
        if (!_networkMgr.shutdownNetwork(network.getId(),context,true)) {
          s_logger.warn("Failed to shutdown the network as a part of update to network with specified id");
          CloudRuntimeException ex=new CloudRuntimeException("Failed to shutdown the network as a part of update of specified network id");
          ex.addProxyObject(network.getUuid(),"networkId");
          throw ex;
        }
      }
    }
 else {
      CloudRuntimeException ex=new CloudRuntimeException("Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: " + network.getState());
      ex.addProxyObject(network.getUuid(),"networkId");
      throw ex;
    }
  }
  Network.State networkState=_networksDao.findById(networkId).getState();
  boolean validStateToImplement=(networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    CloudRuntimeException ex=new CloudRuntimeException("Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: " + networkState);
    ex.addProxyObject(network.getUuid(),"networkId");
    throw ex;
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error("Vm for nic " + nic.getId() + " not found with Vm Id:"+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        String nicIdString=Long.toString(nic.getId());
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),nicIdString,oldNetworkOfferingId,null,isDefault,VirtualMachine.class.getName(),vm.getUuid());
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),nicIdString,networkOfferingId,null,isDefault,VirtualMachine.class.getName(),vm.getUuid());
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,_networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class,networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug("Implementing the network " + network + " elements and resources as a part of network update");
      try {
        if (!changeCidr) {
          _networkMgr.implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
        }
 else {
          _networkMgr.implementNetwork(network.getId(),dest,context);
        }
      }
 catch (      Exception ex) {
        s_logger.warn("Failed to implement network " + network + " elements and resources as a part of network update due to ",ex);
        CloudRuntimeException e=new CloudRuntimeException("Failed to implement network (with specified id) elements and resources as a part of network update");
        e.addProxyObject(network.getUuid(),"networkId");
        throw e;
      }
    }
  }
  if (networkOfferingChanged && !oldNtwkOff.getIsPersistent() && networkOffering.getIsPersistent()) {
    if (network.getState() == Network.State.Allocated) {
      try {
        DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
        _networkMgr.implementNetwork(network.getId(),dest,context);
      }
 catch (      Exception ex) {
        s_logger.warn("Failed to implement network " + network + " elements and resources as a part o"+ "f network update due to ",ex);
        CloudRuntimeException e=new CloudRuntimeException("Failed to implement network (with specified" + " id) elements and resources as a part of network update");
        e.addProxyObject(network.getUuid(),"networkId");
        throw e;
      }
    }
  }
  return getNetwork(network.getId());
}
