{
  final Account owner=_accountMgr.getAccount(networkOwnerId);
  NetworkOfferingVO ntwkOff=null;
  if (networkOfferingId != null) {
    ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  }
  if (ntwkOff == null) {
    ntwkOff=findSystemNetworkOffering(NetworkOffering.SystemPrivateGatewayNetworkOffering);
  }
  final PhysicalNetwork pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNtwk == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find a physical network" + " having the given id");
    ex.addProxyObject(String.valueOf(physicalNetworkId),"physicalNetworkId");
    throw ex;
  }
  if (!NetUtils.isValidIp(startIp)) {
    throw new InvalidParameterValueException("Invalid format for the ip address parameter");
  }
  if (endIp == null) {
    endIp=startIp;
  }
 else   if (!NetUtils.isValidIp(endIp)) {
    throw new InvalidParameterValueException("Invalid format for the endIp address parameter");
  }
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException("Invalid gateway");
  }
  if (!NetUtils.isValidNetmask(netmask)) {
    throw new InvalidParameterValueException("Invalid netmask");
  }
  final String cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  URI uri=BroadcastDomainType.fromString(broadcastUriString);
  final String uriString=uri.toString();
  BroadcastDomainType tiep=BroadcastDomainType.getSchemeValue(uri);
  if (!(tiep == BroadcastDomainType.Vlan || tiep == BroadcastDomainType.Lswitch)) {
    throw new InvalidParameterValueException("unsupported type of broadcastUri specified: " + broadcastUriString);
  }
  final NetworkOfferingVO ntwkOffFinal=ntwkOff;
  try {
    return Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws ResourceAllocationException, InsufficientCapacityException {
        DataCenterVO dc=_dcDao.lockRow(pNtwk.getDataCenterId(),true);
        Network privateNetwork=_networksDao.getPrivateNetwork(uriString,cidr,networkOwnerId,pNtwk.getDataCenterId(),networkOfferingId);
        if (privateNetwork == null) {
          privateNetwork=_networkMgr.createGuestNetwork(ntwkOffFinal.getId(),networkName,displayText,gateway,cidr,uriString,null,owner,null,pNtwk,pNtwk.getDataCenterId(),ACLType.Account,null,vpcId,null,null,true,null);
          s_logger.debug("Created private network " + privateNetwork);
        }
 else {
          s_logger.debug("Private network already exists: " + privateNetwork);
          if (vpcId != null && vpcId.equals(privateNetwork.getVpcId())) {
            throw new InvalidParameterValueException("Private network for the vlan: " + uriString + " and cidr  "+ cidr+ "  already exists "+ "for Vpc "+ vpcId+ " in zone "+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
          }
        }
        PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkIdAndVpcId(privateNetwork.getId(),startIp,vpcId);
        if (privateIp != null) {
          throw new InvalidParameterValueException("Private ip address " + startIp + " already used for private gateway"+ " in zone "+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
        }
        Long mac=dc.getMacAddress();
        Long nextMac=mac + 1;
        dc.setMacAddress(nextMac);
        privateIp=new PrivateIpVO(startIp,privateNetwork.getId(),nextMac,vpcId,sourceNat);
        _privateIpDao.persist(privateIp);
        _dcDao.update(dc.getId(),dc);
        s_logger.debug("Private network " + privateNetwork + " is created");
        return privateNetwork;
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    throw new IllegalStateException(e);
  }
}
