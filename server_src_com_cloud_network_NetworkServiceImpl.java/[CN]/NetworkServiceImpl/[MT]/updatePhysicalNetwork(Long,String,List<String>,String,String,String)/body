{
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Physical Network with specified id doesn't exist in the system");
    ex.addProxyObject(network,id,"physicalNetworkId");
    throw ex;
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Zone with id=" + network.getDataCenterId() + " doesn't exist in the system");
    ex.addProxyObject(zone,network.getDataCenterId(),"dataCenterId");
    throw ex;
  }
  if (newVnetRangeString != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException("Can't add vnet range to the physical network in the zone that supports " + zone.getNetworkType() + " network, Security Group enabled: "+ zone.isSecurityGroupEnabled());
    }
  }
  if (removeVlan != null) {
    List<Integer> tokens=processVlanRange(network,removeVlan);
    boolean result=removeVlanRange(network,tokens.get(0),tokens.get(1));
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Unable to support more than one tag on network yet");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve state '" + state + "' to a supported value {Enabled or Disabled}");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean AddVnet=true;
  List<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>();
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    List<Integer> tokens=processVlanRange(network,newVnetRangeString);
    newStartVnet=tokens.get(0);
    newEndVnet=tokens.get(1);
    Integer j=0;
    List<Pair<Integer,Integer>> existingRanges=network.getVnet();
    if (!existingRanges.isEmpty()) {
      for (; j < existingRanges.size(); j++) {
        int existingStartVnet=existingRanges.get(j).first();
        int existingEndVnet=existingRanges.get(j).second();
        if (newStartVnet.intValue() >= existingStartVnet & newEndVnet.intValue() <= existingEndVnet) {
          throw new InvalidParameterValueException("The vlan range you trying to add already exists.");
        }
        if (newStartVnet < existingStartVnet & newEndVnet + 1 >= existingStartVnet & newEndVnet <= existingEndVnet) {
          vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
          existingRanges.get(j).first(newStartVnet);
          AddVnet=false;
          break;
        }
 else         if (newStartVnet > existingStartVnet & newStartVnet - 1 <= existingEndVnet & newEndVnet >= existingEndVnet) {
          vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
          existingRanges.get(j).second(newEndVnet);
          AddVnet=false;
          break;
        }
 else         if (newStartVnet < existingStartVnet & newEndVnet > existingEndVnet) {
          vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
          vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
          existingRanges.get(j).first(newStartVnet);
          existingRanges.get(j).second(newEndVnet);
          break;
        }
      }
    }
    if (AddVnet) {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      existingRanges.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
    }
    Map<Integer,Integer> vnetMap=new HashMap<Integer,Integer>(existingRanges.size());
    Map<Integer,Integer> IndexMap=new HashMap<Integer,Integer>(existingRanges.size());
    for (int i=0; i < existingRanges.size(); i++) {
      vnetMap.put(existingRanges.get(i).first(),existingRanges.get(i).second());
      IndexMap.put(existingRanges.get(i).first(),i);
    }
    Integer value;
    Integer index;
    String vnetString="";
    for (int i=0; i < existingRanges.size(); i++) {
      value=vnetMap.get((existingRanges.get(i).second() + 1));
      if (value != null) {
        vnetMap.remove((existingRanges.get(i).second() + 1));
        vnetMap.remove(existingRanges.get(i).first());
        vnetMap.put(existingRanges.get(i).first(),value);
        existingRanges.add(new Pair<Integer,Integer>(existingRanges.get(i).first(),value));
        index=IndexMap.get(existingRanges.get(i).second() + 1);
        existingRanges.get(index).first(-1);
        existingRanges.get(index).second(-1);
        existingRanges.get(i).first(-1);
        existingRanges.get(i).second(-1);
      }
      value=vnetMap.get((existingRanges.get(i).second()));
      if (value != null) {
        vnetMap.remove((existingRanges.get(i).second()));
        vnetMap.remove(existingRanges.get(i).first());
        vnetMap.put(existingRanges.get(i).first(),value);
        existingRanges.add(new Pair<Integer,Integer>(existingRanges.get(i).first(),value));
        index=IndexMap.get(existingRanges.get(i).second());
        existingRanges.get(index).first(-1);
        existingRanges.get(index).second(-1);
        existingRanges.get(i).first(-1);
        existingRanges.get(i).second(-1);
      }
    }
    if (newVnetRangeString != null) {
      for (      Pair<Integer,Integer> vnetRange : existingRanges) {
        value=vnetMap.get(vnetRange.first());
        if (value != null) {
          vnetString=vnetString + vnetRange.first().toString() + "-"+ value.toString()+ ";";
        }
      }
      vnetString=vnetString + "*";
      vnetString=vnetString.replace(";*","");
      network.setVnet(vnetString);
    }
    for (    Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
      s_logger.debug("Adding vnet range " + vnetToAdd.first() + "-"+ vnetToAdd.second()+ " for the physicalNetwork id= "+ id+ " and zone id="+ network.getDataCenterId()+ " as a part of updatePhysicalNetwork call");
      _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
    }
  }
  _physicalNetworkDao.update(id,network);
  return network;
}
