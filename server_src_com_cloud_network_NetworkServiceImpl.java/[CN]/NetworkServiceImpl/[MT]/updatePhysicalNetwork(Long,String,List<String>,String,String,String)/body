{
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Physical Network with specified id doesn't exist in the system");
    ex.addProxyObject(id.toString(),"physicalNetworkId");
    throw ex;
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Zone with id=" + network.getDataCenterId() + " doesn't exist in the system");
    ex.addProxyObject(String.valueOf(network.getDataCenterId()),"dataCenterId");
    throw ex;
  }
  if (newVnetRange != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException("Can't add vnet range to the physical network in the zone that supports " + zone.getNetworkType() + " network, Security Group enabled: "+ zone.isSecurityGroupEnabled());
    }
  }
  if (removeVlan != null) {
    List<Integer> tokens=processVlanRange(network,removeVlan);
    removeVlanRange(network,tokens.get(0),tokens.get(1));
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException("Unable to support more than one tag on network yet");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException("Unable to resolve state '" + state + "' to a supported value {Enabled or Disabled}");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean AddVnet=true;
  List<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>();
  List<Integer> tokens=null;
  List<String> add_Vnet=null;
  if (newVnetRange != null) {
    tokens=processVlanRange(network,newVnetRange);
    HashSet<String> vnetsInDb=new HashSet<String>();
    vnetsInDb.addAll(_datacneter_vnet.listVnetsByPhysicalNetworkAndDataCenter(network.getDataCenterId(),id));
    HashSet<String> tempVnets=new HashSet<String>();
    tempVnets.addAll(vnetsInDb);
    for (Integer i=tokens.get(0); i <= tokens.get(1); i++) {
      tempVnets.add(i.toString());
    }
    tempVnets.removeAll(vnetsInDb);
    if (tempVnets.isEmpty()) {
      throw new InvalidParameterValueException("The vlan range you are trying to add already exists.");
    }
    vnetsInDb.addAll(tempVnets);
    add_Vnet=new ArrayList<String>();
    add_Vnet.addAll(tempVnets);
    List<String> sortedList=new ArrayList<String>(vnetsInDb);
    Collections.sort(sortedList,new Comparator<String>(){
      public int compare(      String s1,      String s2){
        return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
      }
    }
);
    String vnetRange="";
    String startvnet=sortedList.get(0);
    String endvnet="";
    for (int i=0; i < sortedList.size() - 1; i++) {
      if (Integer.valueOf(sortedList.get(i + 1)) - Integer.valueOf(sortedList.get(i)) > 1) {
        endvnet=sortedList.get(i);
        vnetRange=vnetRange + startvnet + "-"+ endvnet+ ";";
        startvnet=sortedList.get(i + 1);
      }
    }
    endvnet=sortedList.get(sortedList.size() - 1);
    vnetRange=vnetRange + startvnet + "-"+ endvnet+ ";";
    vnetRange=vnetRange.substring(0,vnetRange.length() - 1);
    network.setVnet(vnetRange);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (add_Vnet != null) {
    s_logger.debug("Adding vnet range " + tokens.get(0).toString() + "-"+ tokens.get(1).toString()+ " for the physicalNetwork id= "+ id+ " and zone id="+ network.getDataCenterId()+ " as a part of updatePhysicalNetwork call");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),add_Vnet);
  }
  _physicalNetworkDao.update(id,network);
  txn.commit();
  return network;
}
