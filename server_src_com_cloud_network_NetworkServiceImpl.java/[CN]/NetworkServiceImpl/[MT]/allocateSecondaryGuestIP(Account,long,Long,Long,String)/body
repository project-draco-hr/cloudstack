{
  String ipaddr=null;
  if (networkId == null) {
    throw new InvalidParameterValueException("Invalid network id is given");
  }
  Account caller=CallContext.current().getCallingAccount();
  final NicVO nicVO=_nicDao.findById(nicId);
  if (nicVO == null) {
    throw new InvalidParameterValueException("There is no nic for the " + nicId);
  }
  if (nicVO.getVmType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException("The nic is not belongs to user vm");
  }
  VirtualMachine vm=_userVmDao.findById(nicVO.getInstanceId());
  if (vm == null) {
    throw new InvalidParameterValueException("There is no vm with the nic");
  }
  _accountMgr.checkAccess(ipOwner,null,true,vm);
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Invalid network id is given");
  }
  final Long accountId=ipOwner.getAccountId();
  final Long domainId=ipOwner.getDomainId();
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(network.getNetworkOfferingId());
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Invalid zone Id is given");
  }
  s_logger.debug("Calling the ip allocation ...");
  if (dc.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Isolated) {
    try {
      ipaddr=_ipAddrMgr.allocateGuestIP(ipOwner,false,zoneId,networkId,requestedIp);
    }
 catch (    InsufficientAddressCapacityException e) {
      throw new InvalidParameterValueException("Allocating guest ip for nic failed");
    }
  }
 else   if (dc.getNetworkType() == NetworkType.Basic || ntwkOff.getGuestType() == Network.GuestType.Shared) {
    VMInstanceVO vmi=(VMInstanceVO)vm;
    Long podId=vmi.getPodIdToDeployIn();
    if (podId == null) {
      throw new InvalidParameterValueException("vm pod id is null");
    }
    Pod pod=_hostPodDao.findById(podId);
    if (pod == null) {
      throw new InvalidParameterValueException("vm pod is null");
    }
    try {
      ipaddr=_ipAddrMgr.allocatePublicIpForGuestNic(networkId,dc,pod,caller,requestedIp);
      if (ipaddr == null) {
        throw new InvalidParameterValueException("Allocating ip to guest nic " + nicId + " failed");
      }
    }
 catch (    InsufficientAddressCapacityException e) {
      s_logger.error("Allocating ip to guest nic " + nicId + " failed");
      return null;
    }
  }
 else {
    s_logger.error("AddIpToVMNic is not supported in this network...");
    return null;
  }
  if (ipaddr != null) {
    final String addrFinal=ipaddr;
    long id=Transaction.execute(new TransactionCallback<Long>(){
      @Override public Long doInTransaction(      TransactionStatus status){
        boolean nicSecondaryIpSet=nicVO.getSecondaryIp();
        if (!nicSecondaryIpSet) {
          nicVO.setSecondaryIp(true);
          s_logger.debug("Setting nics table ...");
          _nicDao.update(nicId,nicVO);
        }
        s_logger.debug("Setting nic_secondary_ip table ...");
        Long vmId=nicVO.getInstanceId();
        NicSecondaryIpVO secondaryIpVO=new NicSecondaryIpVO(nicId,addrFinal,vmId,accountId,domainId,networkId);
        _nicSecondaryIpDao.persist(secondaryIpVO);
        return secondaryIpVO.getId();
      }
    }
);
    return getNicSecondaryIp(id);
  }
 else {
    return null;
  }
}
