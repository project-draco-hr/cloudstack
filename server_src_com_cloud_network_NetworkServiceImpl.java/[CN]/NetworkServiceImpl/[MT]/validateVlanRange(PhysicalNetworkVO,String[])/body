{
  Integer StartVnet;
  Integer EndVnet;
  List<Pair<Integer,Integer>> vlanTokens=new ArrayList<Pair<Integer,Integer>>();
  for (  String vlanRange : listOfRanges) {
    String[] VnetRange=vlanRange.split("-");
    long minVnet=MIN_VLAN_ID;
    long maxVnet=MAX_VLAN_ID;
    logger.debug("ISOLATION METHODS:" + network.getIsolationMethods());
    if (network.getIsolationMethods().contains("GRE")) {
      minVnet=MIN_GRE_KEY;
      maxVnet=MAX_GRE_KEY;
    }
 else     if (network.getIsolationMethods().contains("VXLAN")) {
      minVnet=MIN_VXLAN_VNI;
      maxVnet=MAX_VXLAN_VNI;
      for (      String vnet : VnetRange) {
        logger.debug("Looking to see if VNI " + vnet + " already exists on another network in zone "+ network.getDataCenterId());
        List<DataCenterVnetVO> vnis=_datacneterVnet.findVnet(network.getDataCenterId(),vnet);
        if (vnis != null && !vnis.isEmpty()) {
          for (          DataCenterVnetVO vni : vnis) {
            if (vni.getPhysicalNetworkId() != network.getId()) {
              logger.debug("VNI " + vnet + " already exists on another network in zone, please specify a unique range");
              throw new InvalidParameterValueException("VNI " + vnet + " already exists on another network in zone, please specify a unique range");
            }
          }
        }
      }
    }
    String rangeMessage=" between " + minVnet + " and "+ maxVnet;
    if (VnetRange.length == 1 && VnetRange[0].equals("")) {
      return vlanTokens;
    }
    if (VnetRange.length < 2) {
      throw new InvalidParameterValueException("Please provide valid vnet range. vnet range should be a coma seperated list of vlan ranges. example 500-500,600-601" + rangeMessage);
    }
    if (VnetRange[0] == null || VnetRange[1] == null) {
      throw new InvalidParameterValueException("Please provide valid vnet range" + rangeMessage);
    }
    try {
      StartVnet=Integer.parseInt(VnetRange[0]);
      EndVnet=Integer.parseInt(VnetRange[1]);
    }
 catch (    NumberFormatException e) {
      logger.warn("Unable to parse vnet range:",e);
      throw new InvalidParameterValueException("Please provide valid vnet range. The vnet range should be a coma seperated list example 2001-2012,3000-3005." + rangeMessage);
    }
    if (StartVnet < minVnet || EndVnet > maxVnet) {
      throw new InvalidParameterValueException("Vnet range has to be" + rangeMessage);
    }
    if (StartVnet > EndVnet) {
      throw new InvalidParameterValueException("Vnet range has to be" + rangeMessage + " and start range should be lesser than or equal to stop range");
    }
    vlanTokens.add(new Pair<Integer,Integer>(StartVnet,EndVnet));
  }
  return vlanTokens;
}
