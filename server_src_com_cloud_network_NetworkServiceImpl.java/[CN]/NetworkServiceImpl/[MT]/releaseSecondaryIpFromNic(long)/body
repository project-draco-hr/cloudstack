{
  Account caller=CallContext.current().getCallingAccount();
  boolean success=false;
  NicSecondaryIpVO secIpVO=_nicSecondaryIpDao.findById(ipAddressId);
  if (secIpVO == null) {
    throw new InvalidParameterValueException("Unable to find ip address by id");
  }
  VirtualMachine vm=_userVmDao.findById(secIpVO.getVmId());
  if (vm == null) {
    throw new InvalidParameterValueException("There is no vm with the nic");
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  Network network=_networksDao.findById(secIpVO.getNetworkId());
  if (network == null) {
    throw new InvalidParameterValueException("Invalid network id is given");
  }
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(network.getNetworkOfferingId());
  Long nicId=secIpVO.getNicId();
  s_logger.debug("ip id = " + ipAddressId + " nic id = "+ nicId);
  List<NicSecondaryIpVO> ipList=_nicSecondaryIpDao.listByNicId(nicId);
  boolean lastIp=false;
  if (ipList.size() == 1) {
    lastIp=true;
  }
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  if (dc == null) {
    throw new InvalidParameterValueException("Invalid zone Id is given");
  }
  s_logger.debug("Calling the ip allocation ...");
  if (dc.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Isolated) {
    String secondaryIp=secIpVO.getIp4Address();
    List<FirewallRuleVO> fwRulesList=_firewallDao.listByNetworkAndPurpose(network.getId(),Purpose.PortForwarding);
    if (fwRulesList.size() != 0) {
      for (      FirewallRuleVO rule : fwRulesList) {
        if (_portForwardingDao.findByIdAndIp(rule.getId(),secondaryIp) != null) {
          s_logger.debug("VM nic IP " + secondaryIp + " is associated with the port forwarding rule");
          throw new InvalidParameterValueException("Can't remove the secondary ip " + secondaryIp + " is associate with the port forwarding rule");
        }
      }
    }
    IPAddressVO publicIpVO=_ipAddressDao.findByVmIp(secondaryIp);
    if (publicIpVO != null) {
      s_logger.debug("VM nic IP " + secondaryIp + " is associated with the static NAT rule public IP address id "+ publicIpVO.getId());
      throw new InvalidParameterValueException("Can' remove the ip " + secondaryIp + "is associate with static NAT rule public IP address id "+ publicIpVO.getId());
    }
  }
 else   if (dc.getNetworkType() == NetworkType.Basic || ntwkOff.getGuestType() == Network.GuestType.Shared) {
    final IPAddressVO ip=_ipAddressDao.findByIpAndNetworkId(secIpVO.getNetworkId(),secIpVO.getIp4Address());
    if (ip != null) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _ipAddrMgr.markIpAsUnavailable(ip.getId());
          _ipAddressDao.unassignIpAddress(ip.getId());
        }
      }
);
    }
  }
 else {
    throw new InvalidParameterValueException("Not supported for this network now");
  }
  success=removeNicSecondaryIP(secIpVO,lastIp);
  return success;
}
