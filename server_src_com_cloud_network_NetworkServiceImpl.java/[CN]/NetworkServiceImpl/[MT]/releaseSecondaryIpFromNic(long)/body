{
  Account caller=UserContext.current().getCaller();
  boolean success=false;
  NicSecondaryIpVO ipVO=_nicSecondaryIpDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException("Unable to find ip address by id");
  }
  Network network=_networksDao.findById(ipVO.getNetworkId());
  _accountMgr.checkAccess(caller,null,true,network);
  Long nicId=ipVO.getNicId();
  s_logger.debug("ip id and nic id" + ipAddressId + "..."+ nicId);
  List<NicSecondaryIpVO> ipList=_nicSecondaryIpDao.listByNicId(nicId);
  boolean lastIp=false;
  if (ipList.size() == 1) {
    lastIp=true;
  }
  String secondaryIp=ipVO.getIp4Address();
  List<PortForwardingRuleVO> pfRuleList=_portForwardingDao.listByDestIpAddr(secondaryIp);
  if (pfRuleList.size() != 0) {
    s_logger.debug("VM nic IP " + secondaryIp + " is associated with the port forwarding rule");
    throw new InvalidParameterValueException("Can't remove the secondary ip " + secondaryIp + " is associate with the port forwarding rule");
  }
  IPAddressVO publicIpVO=_ipAddressDao.findByVmIp(secondaryIp);
  if (publicIpVO != null) {
    s_logger.debug("VM nic IP " + secondaryIp + " is associated with the static NAT rule public IP address id "+ publicIpVO.getId());
    throw new InvalidParameterValueException("Can' remove the ip " + secondaryIp + "is associate with static NAT rule public IP address id "+ publicIpVO.getId());
  }
  success=removeNicSecondaryIP(ipVO,lastIp);
  return success;
}
