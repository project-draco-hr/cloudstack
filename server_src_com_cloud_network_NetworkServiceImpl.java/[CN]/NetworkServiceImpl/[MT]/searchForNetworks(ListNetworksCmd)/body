{
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=CallContext.current().getCallingAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  Long vpcId=cmd.getVpcId();
  Boolean canUseForDeploy=cmd.canUseForDeploy();
  Map<String,String> tags=cmd.getTags();
  Boolean forVpc=cmd.getForVpc();
  Boolean display=cmd.getDisplay();
  if ((isSystem == null || _accountMgr.isNormalUser(caller.getId())) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException("System network belongs to system, account and domainId parameters can't be specified");
  }
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listNetworks");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  if (listAll && domainId == null) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,"id",false,null,null);
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (forVpc != null) {
    if (forVpc) {
      sb.and("vpc",sb.entity().getVpcId(),Op.NNULL);
    }
 else {
      sb.and("vpc",sb.entity().getVpcId(),Op.NULL);
    }
  }
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and("systemOnly",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and("trafficType",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join("networkOfferingSearch",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and("networkType",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join("zoneSearch",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and("removed",sb.entity().getRemoved(),Op.NULL);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op("key" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and("value" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and("resourceType",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join("tagSearch",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<NetworkVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (isSystem != null) {
    sc.setJoinParameters("networkOfferingSearch","systemOnly",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (display != null) {
    sc.addAnd("displayNetwork",SearchCriteria.Op.EQ,display);
  }
  if (id != null) {
    sc.addAnd("id",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd("dataCenterId",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd("guestType",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd("trafficType",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd("aclType",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd("physicalNetworkId",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  if (restartRequired != null) {
    sc.addAnd("restartRequired",SearchCriteria.Op.EQ,restartRequired);
  }
  if (specifyIpRanges != null) {
    sc.addAnd("specifyIpRanges",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (vpcId != null) {
    sc.addAnd("vpcId",SearchCriteria.Op.EQ,vpcId);
  }
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    sc.setJoinParameters("tagSearch","resourceType",ResourceObjectType.Network.toString());
    for (    String key : tags.keySet()) {
      sc.setJoinParameters("tagSearch","key" + String.valueOf(count),key);
      sc.setJoinParameters("tagSearch","value" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  List<NetworkVO> networksToReturn=_networksDao.search(sc,searchFilter);
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException("Invalid service specified " + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    networksToReturn=supportedNetworks;
  }
  if (canUseForDeploy != null) {
    List<NetworkVO> networksForDeploy=new ArrayList<NetworkVO>();
    for (    NetworkVO network : networksToReturn) {
      if (_networkModel.canUseForDeploy(network) == canUseForDeploy) {
        networksForDeploy.add(network);
      }
    }
    networksToReturn=networksForDeploy;
  }
  boolean notNull=cmd.getStartIndex() != null && cmd.getPageSizeVal() != null;
  if (notNull && cmd.getStartIndex() <= Integer.MAX_VALUE && cmd.getStartIndex() >= Integer.MIN_VALUE && cmd.getPageSizeVal() <= Integer.MAX_VALUE && cmd.getPageSizeVal() >= Integer.MIN_VALUE) {
    int index=cmd.getStartIndex().intValue() == 0 ? 0 : cmd.getStartIndex().intValue() / cmd.getPageSizeVal().intValue();
    List<NetworkVO> wPagination=new ArrayList<NetworkVO>();
    List<List<NetworkVO>> partitions=partitionNetworks(networksToReturn,cmd.getPageSizeVal().intValue());
    if (index < partitions.size()) {
      wPagination=partitions.get(index);
    }
    return new Pair<List<? extends Network>,Integer>(wPagination,networksToReturn.size());
  }
  return new Pair<List<? extends Network>,Integer>(networksToReturn,networksToReturn.size());
}
