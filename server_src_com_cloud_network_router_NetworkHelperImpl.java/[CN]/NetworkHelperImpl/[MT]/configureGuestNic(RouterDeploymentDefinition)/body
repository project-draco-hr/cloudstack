{
  final LinkedHashMap<Network,List<? extends NicProfile>> networks=new LinkedHashMap<Network,List<? extends NicProfile>>(3);
  final Network guestNetwork=routerDeploymentDefinition.getGuestNetwork();
  if (guestNetwork != null) {
    s_logger.debug("Adding nic for Virtual Router in Guest network " + guestNetwork);
    String defaultNetworkStartIp=null, defaultNetworkStartIpv6=null;
    if (!routerDeploymentDefinition.isPublicNetwork()) {
      final Nic placeholder=_networkModel.getPlaceholderNicForRouter(guestNetwork,routerDeploymentDefinition.getPodId());
      if (guestNetwork.getCidr() != null) {
        if (placeholder != null && placeholder.getIp4Address() != null) {
          s_logger.debug("Requesting ipv4 address " + placeholder.getIp4Address() + " stored in placeholder nic for the network "+ guestNetwork);
          defaultNetworkStartIp=placeholder.getIp4Address();
        }
 else {
          final String startIp=_networkModel.getStartIpAddress(guestNetwork.getId());
          if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
            defaultNetworkStartIp=startIp;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug("First ipv4 " + startIp + " in network id="+ guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ip address from the range");
          }
        }
      }
      if (guestNetwork.getIp6Cidr() != null) {
        if (placeholder != null && placeholder.getIp6Address() != null) {
          s_logger.debug("Requesting ipv6 address " + placeholder.getIp6Address() + " stored in placeholder nic for the network "+ guestNetwork);
          defaultNetworkStartIpv6=placeholder.getIp6Address();
        }
 else {
          final String startIpv6=_networkModel.getStartIpv6Address(guestNetwork.getId());
          if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(),startIpv6) == null) {
            defaultNetworkStartIpv6=startIpv6;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug("First ipv6 " + startIpv6 + " in network id="+ guestNetwork.getId()+ " is already allocated, can't use it for domain router; will get random ipv6 address from the range");
          }
        }
      }
    }
    final NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp,defaultNetworkStartIpv6);
    if (routerDeploymentDefinition.isPublicNetwork()) {
      if (routerDeploymentDefinition.isRedundant()) {
        gatewayNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork,null));
      }
 else {
        gatewayNic.setIPv4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      final String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));
    }
 else {
      gatewayNic.setDefaultNic(true);
    }
    networks.put(guestNetwork,new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));
  }
  return networks;
}
