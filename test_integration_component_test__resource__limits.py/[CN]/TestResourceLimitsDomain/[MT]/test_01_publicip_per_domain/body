def test_01_publicip_per_domain(self):
    'Test Public IP limit per domain\n        '
    self.debug(('Updating public IP resource limits for domain: %s' % self.account.account.domainid))
    update_resource_limit(self.apiclient, 1, domainid=self.account.account.domainid, max=2)
    self.debug(('Deploying VM for account: %s' % self.account.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_1)
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    self.debug(('Associating public IP for account: %s' % self.account.account.name))
    public_ip_1 = PublicIPAddress.create(self.apiclient, virtual_machine_1.account, virtual_machine_1.zoneid, virtual_machine_1.domainid, self.services['server'])
    self.cleanup.append(public_ip_1)
    self.assertEqual((public_ip_1.ipaddress.state in ['Allocated', 'Allocating']), True, 'Check Public IP state is allocated or not')
    with self.assertRaises(Exception):
        public_ip_2 = PublicIPAddress.create(self.apiclient, virtual_machine_1.account, virtual_machine_1.zoneid, virtual_machine_1.domainid, self.services['server'])
    return
