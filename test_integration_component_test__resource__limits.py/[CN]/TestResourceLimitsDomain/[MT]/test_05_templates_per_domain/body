@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_05_templates_per_domain(self):
    'Test Templates limit per domain\n        '
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest('Template feature is not supported on LXC')
    try:
        userapiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        update_resource_limit(self.apiclient, 2, domainid=self.account.domainid, max=5)
        update_resource_limit(self.apiclient, 4, domainid=self.account.domainid, max=2)
        virtual_machine_1 = VirtualMachine.create(userapiclient, self.services['server'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
        self.cleanup.append(virtual_machine_1)
        self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
        virtual_machine_1.stop(userapiclient)
        volumes = list_volumes(userapiclient, virtualmachineid=virtual_machine_1.id, type='ROOT', listall=True)
        self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
        volume = volumes[0]
        self.debug(('Creating template from volume: %s' % volume.id))
        template_1 = Template.create(userapiclient, self.services['template'], volumeid=volume.id, account=self.account.name, domainid=self.account.domainid)
        self.cleanup.append(template_1)
        self.assertEqual(template_1.isready, True, 'Check Template is in ready state or not')
        self.debug(('Creating template from volume: %s' % volume.id))
        template_2 = Template.create(userapiclient, self.services['template'], volumeid=volume.id, account=self.account.name, domainid=self.account.domainid)
        self.cleanup.append(template_2)
        self.assertEqual(template_2.isready, True, 'Check Template is in ready state or not')
    except Exception as e:
        self.fail(('Exception occured: %s' % e))
    with self.assertRaises(Exception):
        Template.create(userapiclient, self.services['template'], volumeid=volume.id, account=self.account.name, domainid=self.account.domainid)
    return
