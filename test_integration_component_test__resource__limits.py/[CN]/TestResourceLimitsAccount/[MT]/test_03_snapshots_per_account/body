def test_03_snapshots_per_account(self):
    'Test Snapshot limit per account\n        '
    self.debug(('Updating public IP resource limit for account: %s' % self.account_1.account.name))
    update_resource_limit(self.apiclient, 3, account=self.account_1.account.name, domainid=self.account_1.account.domainid, max=1)
    self.debug(('Deploying VM instance in account: %s' % self.account_1.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_1.account.name, domainid=self.account_1.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_1)
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    self.debug(('Deploying VM instance in account: %s' % self.account_1.account.name))
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_2.account.name, domainid=self.account_2.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_2)
    self.assertEqual(virtual_machine_2.state, 'Running', 'Check VM state is Running or not')
    volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_1.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
    volume = volumes[0]
    self.debug(('Creating snapshot from volume: %s' % volumes[0].id))
    snapshot_1 = Snapshot.create(self.apiclient, volumes[0].id, account=self.account_1.account.name, domainid=self.account_1.account.domainid)
    self.cleanup.append(snapshot_1)
    self.assertEqual((snapshot_1.state in ['BackedUp', 'CreatedOnPrimary']), True, 'Check Snapshot state is Running or not')
    with self.assertRaises(Exception):
        Snapshot.create(self.apiclient, volumes[0].id, account=self.account_1.account.name, domainid=self.account_1.account.domainid)
    volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_2.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
    volume = volumes[0]
    self.debug(('Creating snapshot from volume: %s' % volumes[0].id))
    snapshot_2 = Snapshot.create(self.apiclient, volumes[0].id, account=self.account_2.account.name, domainid=self.account_2.account.domainid)
    self.cleanup.append(snapshot_2)
    self.assertEqual((snapshot_2.state in ['BackedUp', 'CreatedOnPrimary']), True, 'Check Snapshot state is Running or not')
    self.debug(('Creating snapshot from volume: %s' % volumes[0].id))
    snapshot_3 = Snapshot.create(self.apiclient, volumes[0].id, account=self.account_2.account.name, domainid=self.account_2.account.domainid)
    self.cleanup.append(snapshot_3)
    self.assertEqual((snapshot_3.state in ['BackedUp', 'CreatedOnPrimary']), True, 'Check Snapshot state is Running or not')
    return
