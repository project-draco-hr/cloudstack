def test_05_templates_per_account(self):
    'Test Templates limit per account\n        '
    self.debug(('Updating template resource limit for account: %s' % self.account_1.account.name))
    update_resource_limit(self.apiclient, 4, account=self.account_1.account.name, domainid=self.account_1.account.domainid, max=1)
    self.debug(('Updating volume resource limit for account: %s' % self.account_1.account.name))
    virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_1.account.name, domainid=self.account_1.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_1)
    self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
    self.debug(('Deploying virtual machine for account: %s' % self.account_2.account.name))
    virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_2.account.name, domainid=self.account_2.account.domainid, serviceofferingid=self.service_offering.id)
    self.cleanup.append(virtual_machine_2)
    self.assertEqual(virtual_machine_2.state, 'Running', 'Check VM state is Running or not')
    virtual_machine_1.stop(self.apiclient)
    volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_1.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
    volume = volumes[0]
    self.debug(('Creating template from volume: %s' % volume.id))
    template_1 = Template.create(self.apiclient, self.services['template'], volumeid=volume.id, account=self.account_1.account.name, domainid=self.account_1.account.domainid)
    self.cleanup.append(template_1)
    self.assertEqual(template_1.isready, True, 'Check Template is in ready state or not')
    with self.assertRaises(Exception):
        Template.create(self.apiclient, self.services['template'], volumeid=volume.id, account=self.account_1.account.name, domainid=self.account_1.account.domainid)
    virtual_machine_2.stop(self.apiclient)
    volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_2.id, type='ROOT', listall=True)
    self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
    volume = volumes[0]
    self.debug(('Creating template from volume: %s' % volume.id))
    template_2 = Template.create(self.apiclient, self.services['template'], volumeid=volume.id, account=self.account_2.account.name, domainid=self.account_2.account.domainid)
    self.cleanup.append(template_2)
    self.assertEqual(template_2.isready, True, 'Check Template is in ready state or not')
    self.debug(('Creating template from volume: %s' % volume.id))
    template_3 = Template.create(self.apiclient, self.services['template'], volumeid=volume.id, account=self.account_2.account.name, domainid=self.account_2.account.domainid)
    self.cleanup.append(template_3)
    self.assertEqual(template_3.isready, True, 'Check Template is in ready state or not')
    return
