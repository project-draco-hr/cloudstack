@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_05_templates_per_account(self):
    'Test Templates limit per account\n        '
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest('Template feature is not supported on LXC')
    try:
        apiclient_account1 = self.testClient.getUserApiClient(UserName=self.account_1.name, DomainName=self.account_1.domain)
        apiclient_account2 = self.testClient.getUserApiClient(UserName=self.account_2.name, DomainName=self.account_2.domain)
        self.debug(('Updating template resource limit for account: %s' % self.account_1.name))
        update_resource_limit(self.apiclient, 4, account=self.account_1.name, domainid=self.account_1.domainid, max=1)
        self.debug(('Updating volume resource limit for account: %s' % self.account_1.name))
        virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_1.name, domainid=self.account_1.domainid, serviceofferingid=self.service_offering.id)
        self.cleanup.append(virtual_machine_1)
        self.assertEqual(virtual_machine_1.state, 'Running', 'Check VM state is Running or not')
        self.debug(('Deploying virtual machine for account: %s' % self.account_2.name))
        virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['server'], templateid=self.template.id, accountid=self.account_2.name, domainid=self.account_2.domainid, serviceofferingid=self.service_offering.id)
        self.cleanup.append(virtual_machine_2)
        self.assertEqual(virtual_machine_2.state, 'Running', 'Check VM state is Running or not')
        virtual_machine_1.stop(self.apiclient)
        volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_1.id, type='ROOT', listall=True)
        self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
        volume = volumes[0]
        self.debug(('Creating template from volume: %s' % volume.id))
        template_1 = Template.create(apiclient_account1, self.services['template'], volumeid=volume.id, account=self.account_1.name, domainid=self.account_1.domainid)
        self.cleanup.append(template_1)
        self.assertEqual(template_1.isready, True, 'Check Template is in ready state or not')
    except Exception as e:
        self.fail(('Exception occured: %s' % e))
    with self.assertRaises(Exception):
        Template.create(apiclient_account1, self.services['template'], volumeid=volume.id, account=self.account_1.name, domainid=self.account_1.domainid)
    try:
        virtual_machine_2.stop(self.apiclient)
        volumes = list_volumes(self.apiclient, virtualmachineid=virtual_machine_2.id, type='ROOT', listall=True)
        self.assertEqual(isinstance(volumes, list), True, 'Check for list volume response return valid data')
        volume = volumes[0]
        self.debug(('Creating template from volume: %s' % volume.id))
        template_2 = Template.create(apiclient_account2, self.services['template'], volumeid=volume.id, account=self.account_2.name, domainid=self.account_2.domainid)
        self.cleanup.append(template_2)
        self.assertEqual(template_2.isready, True, 'Check Template is in ready state or not')
        self.debug(('Creating template from volume: %s' % volume.id))
        template_3 = Template.create(apiclient_account2, self.services['template'], volumeid=volume.id, account=self.account_2.name, domainid=self.account_2.domainid)
        self.cleanup.append(template_3)
        self.assertEqual(template_3.isready, True, 'Check Template is in ready state or not')
    except Exception as e:
        self.fail(('Exception occured: %s' % e))
    return
