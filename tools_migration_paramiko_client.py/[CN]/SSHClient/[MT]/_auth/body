def _auth(self, username, password, pkey, key_filenames, allow_agent, look_for_keys):
    '\n        Try, in order:\n\n            - The key passed in, if one was passed in.\n            - Any key we can find through an SSH agent (if allowed).\n            - Any "id_rsa" or "id_dsa" key discoverable in ~/.ssh/ (if allowed).\n            - Plain username/password auth, if a password was given.\n\n        (The password might be needed to unlock a private key.)\n        '
    saved_exception = None
    if (pkey is not None):
        try:
            self._log(DEBUG, ('Trying SSH key %s' % hexlify(pkey.get_fingerprint())))
            self._transport.auth_publickey(username, pkey)
            return
        except SSHException as e:
            saved_exception = e
    for key_filename in key_filenames:
        for pkey_class in (RSAKey, DSSKey):
            try:
                key = pkey_class.from_private_key_file(key_filename, password)
                self._log(DEBUG, ('Trying key %s from %s' % (hexlify(key.get_fingerprint()), key_filename)))
                self._transport.auth_publickey(username, key)
                return
            except SSHException as e:
                saved_exception = e
    if allow_agent:
        for key in Agent().get_keys():
            try:
                self._log(DEBUG, ('Trying SSH agent key %s' % hexlify(key.get_fingerprint())))
                self._transport.auth_publickey(username, key)
                return
            except SSHException as e:
                saved_exception = e
    keyfiles = []
    rsa_key = os.path.expanduser('~/.ssh/id_rsa')
    dsa_key = os.path.expanduser('~/.ssh/id_dsa')
    if os.path.isfile(rsa_key):
        keyfiles.append((RSAKey, rsa_key))
    if os.path.isfile(dsa_key):
        keyfiles.append((DSSKey, dsa_key))
    rsa_key = os.path.expanduser('~/ssh/id_rsa')
    dsa_key = os.path.expanduser('~/ssh/id_dsa')
    if os.path.isfile(rsa_key):
        keyfiles.append((RSAKey, rsa_key))
    if os.path.isfile(dsa_key):
        keyfiles.append((DSSKey, dsa_key))
    if (not look_for_keys):
        keyfiles = []
    for (pkey_class, filename) in keyfiles:
        try:
            key = pkey_class.from_private_key_file(filename, password)
            self._log(DEBUG, ('Trying discovered key %s in %s' % (hexlify(key.get_fingerprint()), filename)))
            self._transport.auth_publickey(username, key)
            return
        except SSHException as e:
            saved_exception = e
        except IOError as e:
            saved_exception = e
    if (password is not None):
        try:
            self._transport.auth_password(username, password)
            return
        except SSHException as e:
            saved_exception = e
    if (saved_exception is not None):
        raise saved_exception
    raise SSHException('No authentication methods available')
