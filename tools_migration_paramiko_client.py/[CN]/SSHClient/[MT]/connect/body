def connect(self, hostname, port=SSH_PORT, username=None, password=None, pkey=None, key_filename=None, timeout=None, allow_agent=True, look_for_keys=True):
    '\n        Connect to an SSH server and authenticate to it.  The server\'s host key\n        is checked against the system host keys (see L{load_system_host_keys})\n        and any local host keys (L{load_host_keys}).  If the server\'s hostname\n        is not found in either set of host keys, the missing host key policy\n        is used (see L{set_missing_host_key_policy}).  The default policy is\n        to reject the key and raise an L{SSHException}.\n\n        Authentication is attempted in the following order of priority:\n\n            - The C{pkey} or C{key_filename} passed in (if any)\n            - Any key we can find through an SSH agent\n            - Any "id_rsa" or "id_dsa" key discoverable in C{~/.ssh/}\n            - Plain username/password auth, if a password was given\n\n        If a private key requires a password to unlock it, and a password is\n        passed in, that password will be used to attempt to unlock the key.\n\n        @param hostname: the server to connect to\n        @type hostname: str\n        @param port: the server port to connect to\n        @type port: int\n        @param username: the username to authenticate as (defaults to the\n            current local username)\n        @type username: str\n        @param password: a password to use for authentication or for unlocking\n            a private key\n        @type password: str\n        @param pkey: an optional private key to use for authentication\n        @type pkey: L{PKey}\n        @param key_filename: the filename, or list of filenames, of optional\n            private key(s) to try for authentication\n        @type key_filename: str or list(str)\n        @param timeout: an optional timeout (in seconds) for the TCP connect\n        @type timeout: float\n        @param allow_agent: set to False to disable connecting to the SSH agent\n        @type allow_agent: bool\n        @param look_for_keys: set to False to disable searching for discoverable\n            private key files in C{~/.ssh/}\n        @type look_for_keys: bool\n\n        @raise BadHostKeyException: if the server\'s host key could not be\n            verified\n        @raise AuthenticationException: if authentication failed\n        @raise SSHException: if there was any other error connecting or\n            establishing an SSH session\n        @raise socket.error: if a socket error occurred while connecting\n        '
    for (family, socktype, proto, canonname, sockaddr) in socket.getaddrinfo(hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
        if (socktype == socket.SOCK_STREAM):
            af = family
            addr = sockaddr
            break
    else:
        raise SSHException(('No suitable address family for %s' % hostname))
    sock = socket.socket(af, socket.SOCK_STREAM)
    if (timeout is not None):
        try:
            sock.settimeout(timeout)
        except:
            pass
    sock.connect(addr)
    t = self._transport = Transport(sock)
    if (self._log_channel is not None):
        t.set_log_channel(self._log_channel)
    t.start_client()
    ResourceManager.register(self, t)
    server_key = t.get_remote_server_key()
    keytype = server_key.get_name()
    if (port == SSH_PORT):
        server_hostkey_name = hostname
    else:
        server_hostkey_name = ('[%s]:%d' % (hostname, port))
    our_server_key = self._system_host_keys.get(server_hostkey_name, {}).get(keytype, None)
    if (our_server_key is None):
        our_server_key = self._host_keys.get(server_hostkey_name, {}).get(keytype, None)
    if (our_server_key is None):
        self._policy.missing_host_key(self, server_hostkey_name, server_key)
        our_server_key = server_key
    if (server_key != our_server_key):
        raise BadHostKeyException(hostname, server_key, our_server_key)
    if (username is None):
        username = getpass.getuser()
    if (key_filename is None):
        key_filenames = []
    elif isinstance(key_filename, (str, unicode)):
        key_filenames = [key_filename]
    else:
        key_filenames = key_filename
    self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys)
