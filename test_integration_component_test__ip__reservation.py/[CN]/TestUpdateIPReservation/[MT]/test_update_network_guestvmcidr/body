@data('existingVmInclusive', 'existingVmExclusive')
@attr(tags=['advanced'])
def test_update_network_guestvmcidr(self, value):
    ' Test updating guest vm cidr of the network after\n        VMs are already deployed in previous guest VM cidr\n\n        # steps\n        # 1. Create isolated network with user defined cidr\n        # 2. Deploy VM in the network\n        # 3. Try to update the guestvmcidr of the network with VM ip in the guestvmcidr and\n        #    deploy another VM\n        # 4. Try to update the guestvmcidr of the network with VM ip outside the guestvmcidr\n        #\n        # validation\n        # 1. When vm IP is in the guestvmcidr, updation should be successful and\n        #    new VM should get IP from this range\n        # 2. When VM IP is outside the guestvmcidr, updation should be unsuccessful'
    random_subnet = str(random.randrange(1, 254))
    gateway = (('10.1.' + random_subnet) + '.1')
    resultSet = createIsolatedNetwork(self, self.isolated_network_offering.id, gateway=gateway)
    if (resultSet[0] == FAIL):
        self.fail('Failed to create isolated network')
    else:
        isolated_network = resultSet[1]
    guest_vm_cidr = (('10.1.' + random_subnet) + '.0/29')
    try:
        virtual_machine_1 = createVirtualMachine(self, network_id=isolated_network.id, ip_address=((u'10.1.' + random_subnet) + '.3'))
    except Exception as e:
        self.fail(('VM creation failed: %s' % e))
    isolated_network.update(self.apiclient, guestvmcidr=guest_vm_cidr)
    matchNetworkGuestVmCIDR(self, isolated_network.id, guest_vm_cidr)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.assertEqual(validateList(vms)[0], PASS, 'vm list validation failed')
    self.assertEqual(vms[0].nic[0].ipaddress, virtual_machine_1.ipaddress, 'VM IP should not change after reservation')
    try:
        virtual_machine_2 = createVirtualMachine(self, network_id=isolated_network.id)
        if (netaddr.IPAddress(virtual_machine_2.ipaddress) not in netaddr.IPNetwork(guest_vm_cidr)):
            self.fail("Newly created VM doesn't get IP from reserverd CIDR")
    except Exception as e:
        self.fail(('VM creation failed, cannot validate the condition: %s' % e))
    if (value == 'existingVmExclusive'):
        guest_vm_cidr = (('10.1.' + random_subnet) + '.10/29')
        try:
            isolated_network.update(self.apiclient, guestvmcidr=guest_vm_cidr)
            self.fail('Network updation should fail')
        except Exception as e:
            self.debug(('Failed to update guest VM cidr of network: %s' % e))
    elif (value == 'existingVmInclusive'):
        guest_vm_cidr = (('10.1.' + random_subnet) + '.0/28')
        try:
            isolated_network.update(self.apiclient, guestvmcidr=guest_vm_cidr)
        except Exception as e:
            self.fail(('Failed to update guest VM cidr of network: %s' % e))
        matchNetworkGuestVmCIDR(self, isolated_network.id, guest_vm_cidr)
        try:
            virtual_machine_3 = createVirtualMachine(self, network_id=isolated_network.id)
            if (netaddr.IPAddress(virtual_machine_3.ipaddress) not in netaddr.IPNetwork(guest_vm_cidr)):
                self.fail("Newly created VM doesn't get IP from reserverd CIDR")
        except Exception as e:
            self.fail(('VM creation failed, cannot validate the condition: %s' % e))
    return
