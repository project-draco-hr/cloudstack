@attr(tags=['advanced'])
def test_reservation_after_router_restart(self):
    ' Test IP reservation working before and after router is restarted\n        # steps\n        # 1. Update guestvmcidr of persistent isolated network\n        # 2. Reboot router\n        #\n        # validation\n        # 1. Guest vm cidr should be successfully updated with correct value\n        # 2. Network cidr should remain same after router restart'
    subnet = ('10.1.' + str(random.randrange(1, 254)))
    gateway = (subnet + '.1')
    resultSet = createIsolatedNetwork(self, self.isolated_persistent_network_offering.id, gateway=gateway)
    if (resultSet[0] == FAIL):
        self.fail('Failed to create isolated network')
    else:
        isolated_network = resultSet[1]
    guest_vm_cidr = (subnet + '.0/29')
    isolated_network.update(self.apiclient, guestvmcidr=guest_vm_cidr)
    matchNetworkGuestVmCIDR(self, isolated_network.id, guest_vm_cidr)
    routers = Router.list(self.apiclient, networkid=isolated_network.id, listall=True)
    self.assertEqual(validateList(routers)[0], PASS, 'routers list validation failed')
    if (not routers):
        self.fail('Router list should not be empty')
    Router.reboot(self.apiclient, routers[0].id)
    networks = Network.list(self.apiclient, id=isolated_network.id)
    self.assertEqual(validateList(networks)[0], PASS, 'networks list validation failed')
    self.assertEqual(networks[0].cidr, guest_vm_cidr, 'guestvmcidr should match after router reboot')
    return
