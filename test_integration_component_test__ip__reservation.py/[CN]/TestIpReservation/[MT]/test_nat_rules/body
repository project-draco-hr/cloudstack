@data(NAT_RULE, STATIC_NAT_RULE)
@attr(tags=['advanced'])
def test_nat_rules(self, value):
    ' Test NAT rules working with IP reservation\n        # steps\n        # 1. Create vm in persistent isolated network with ip in guestvmcidr\n        # 2. Create NAT/static NAT rule for this VM\n        # 3. Update guestvmcidr\n        # 4. Create another VM and create network rules for this vm too\n        #\n        # validation\n        # 1. Guest vm cidr should be successfully updated with correct value\n        # 2. Existing guest vm ip should not be changed after reservation\n        # 3. Newly created VM should get ip in guestvmcidr\n        # 4. The network rules should be working'
    subnet = ('10.1.' + str(random.randrange(1, 254)))
    gateway = (subnet + '.1')
    resultSet = createIsolatedNetwork(self, self.isolated_network_offering.id, gateway=gateway)
    if (resultSet[0] == FAIL):
        self.fail('Failed to create isolated network')
    else:
        isolated_network = resultSet[1]
    guest_vm_cidr = (subnet + '.0/29')
    try:
        virtual_machine_1 = createVirtualMachine(self, network_id=isolated_network.id, ip_address=(subnet + '.3'))
    except Exception as e:
        self.fail(('VM creation failed: %s' % e))
    result = createNetworkRulesForVM(self.apiclient, virtual_machine_1, value, self.account, self.testData)
    if (result[0] == FAIL):
        self.fail(('Failed to create network rules for VM: %s' % result[1]))
    else:
        ipaddress_1 = result[1]
    virtual_machine_1.get_ssh_client(ipaddress=ipaddress_1.ipaddress.ipaddress)
    isolated_network.update(self.apiclient, guestvmcidr=guest_vm_cidr)
    matchNetworkGuestVmCIDR(self, isolated_network.id, guest_vm_cidr)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_1.id)
    self.assertEqual(validateList(vms)[0], PASS, 'vm list validation failed')
    self.assertEqual(vms[0].nic[0].ipaddress, virtual_machine_1.ipaddress, 'VM IP should not change after reservation')
    try:
        virtual_machine_2 = createVirtualMachine(self, network_id=isolated_network.id)
        if (netaddr.IPAddress(virtual_machine_2.ipaddress) not in netaddr.IPNetwork(guest_vm_cidr)):
            self.fail("Newly created VM doesn't get IP from reserverd CIDR")
    except Exception as e:
        self.fail(('VM creation failed, cannot validate the condition: %s' % e))
    result = createNetworkRulesForVM(self.apiclient, virtual_machine_2, value, self.account, self.testData)
    if (result[0] == FAIL):
        self.fail(('Failed to create network rules for VM: %s' % result[1]))
    else:
        ipaddress_2 = result[1]
    virtual_machine_2.get_ssh_client(ipaddress=ipaddress_2.ipaddress.ipaddress)
    return
