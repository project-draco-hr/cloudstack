@attr(tags=['advanced'], required_hardware='false')
def test_reservation_after_router_restart(self):
    networkOffering = self.isolated_persistent_network_offering
    subnet = ('10.1.' + str(random.randrange(1, 254)))
    gateway = (subnet + '.1')
    isolated_persistent_network = None
    resultSet = createIsolatedNetwork(self, networkOffering.id, gateway=gateway)
    if (resultSet[0] == FAIL):
        self.fail('Failed to create isolated network')
    else:
        isolated_persistent_network = resultSet[1]
    response = verifyNetworkState(self.apiclient, isolated_persistent_network.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    guest_vm_cidr = (subnet + '.0/29')
    update_response = Network.update(isolated_persistent_network, self.apiclient, id=isolated_persistent_network.id, guestvmcidr=guest_vm_cidr)
    self.assertEqual(guest_vm_cidr, update_response.cidr, 'cidr in response is not as expected')
    routers = Router.list(self.apiclient, networkid=isolated_persistent_network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return valid response')
    if (not routers):
        self.skipTest('Router list should not be empty, skipping test')
    Router.reboot(self.apiclient, routers[0].id)
    networks = Network.list(self.apiclient, id=isolated_persistent_network.id)
    self.assertEqual(isinstance(networks, list), True, 'list Networks should return valid response')
    self.assertEqual(networks[0].cidr, guest_vm_cidr, 'guestvmcidr should match after router reboot')
    return
