@classmethod
def setUpClass(cls):
    cls.testClient = super(TestFailureScnarios, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.testData = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.testData['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.testData['ostype'])
    cls.testData['domainid'] = cls.domain.id
    cls.testData['zoneid'] = cls.zone.id
    cls.testData['virtual_machine']['zoneid'] = cls.zone.id
    cls.testData['virtual_machine']['template'] = cls.template.id
    cls._cleanup = []
    try:
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.testData['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.isolated_network_offering = CreateEnabledNetworkOffering(cls.api_client, cls.testData['isolated_network_offering'])
        cls._cleanup.append(cls.isolated_network_offering)
        cls.isolated_persistent_network_offering = CreateEnabledNetworkOffering(cls.api_client, cls.testData['nw_off_isolated_persistent'])
        cls._cleanup.append(cls.isolated_persistent_network_offering)
        cls.testData['shared_network_offering']['specifyVlan'] = 'True'
        cls.testData['shared_network_offering']['specifyIpRanges'] = 'True'
        cls.shared_network_offering = NetworkOffering.create(cls.api_client, cls.testData['shared_network_offering'], conservemode=False)
        cls._cleanup.append(cls.shared_network_offering)
        NetworkOffering.update(cls.shared_network_offering, cls.api_client, state='enabled')
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Failure in setUpClass: %s' % e))
    return
