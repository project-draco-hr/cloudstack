{
  Account adminAccount=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  User user=getManagementServer().findUserById(id);
  if (user == null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find user by id");
  }
 else   if (user.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to find user by id");
  }
  Account account=getManagementServer().findAccountById(user.getAccountId());
  if ((account != null) && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"user id : " + id + " is a system user, enabling is not allowed");
  }
  if ((adminAccount != null) && !getManagementServer().isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Failed to enable user " + id + ", permission denied.");
  }
  boolean success=true;
  try {
    success=getManagementServer().enableUser(id.longValue());
  }
 catch (  Exception ex) {
    s_logger.error("error enabling user with id: " + id,ex);
    success=false;
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),Boolean.valueOf(success).toString()));
  return returnValues;
}
