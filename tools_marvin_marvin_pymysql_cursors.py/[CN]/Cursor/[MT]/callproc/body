def callproc(self, procname, args=()):
    'Execute stored procedure procname with args\n\n        procname -- string, name of procedure to execute on server\n\n        args -- Sequence of parameters to use with procedure\n\n        Returns the original args.\n\n        Compatibility warning: PEP-249 specifies that any modified\n        parameters must be returned. This is currently impossible\n        as they are only available by storing them in a server\n        variable and then retrieved by a query. Since stored\n        procedures return zero or more result sets, there is no\n        reliable way to get at OUT or INOUT parameters via callproc.\n        The server variables are named @_procname_n, where procname\n        is the parameter above and n is the position of the parameter\n        (from zero). Once all result sets generated by the procedure\n        have been fetched, you can issue a SELECT @_procname_0, ...\n        query using .execute() to get any OUT or INOUT values.\n\n        Compatibility warning: The act of calling a stored procedure\n        itself creates an empty result set. This appears after any\n        result sets generated by the procedure. This is non-standard\n        behavior with respect to the DB-API. Be sure to use nextset()\n        to advance through all result sets; otherwise you may get\n        disconnected.\n        '
    conn = self._get_db()
    for (index, arg) in enumerate(args):
        q = ('SET @_%s_%d=%s' % (procname, index, conn.escape(arg)))
        if isinstance(q, unicode):
            q = q.encode(conn.charset)
        self._query(q)
        self.nextset()
    q = ('CALL %s(%s)' % (procname, ','.join([('@_%s_%d' % (procname, i)) for i in range(len(args))])))
    if isinstance(q, unicode):
        q = q.encode(conn.charset)
    self._query(q)
    self._executed = q
    return args
