{
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
  final String bashScriptPath=libvirtUtilitiesHelper.retrieveBashScriptPath();
  final Script cpuScript=new Script(bashScriptPath,s_logger);
  cpuScript.add("-c");
  cpuScript.add("idle=$(top -b -n 1| awk -F, '/^[%]*[Cc]pu/{$0=$4; gsub(/[^0-9.,]+/,\"\"); print }'); echo $idle");
  final OutputInterpreter.OneLineParser parser=new OutputInterpreter.OneLineParser();
  String result=cpuScript.execute(parser);
  if (result != null) {
    s_logger.debug("Unable to get the host CPU state: " + result);
    return new Answer(command,false,result);
  }
  final double cpuUtil=100.0D - Double.parseDouble(parser.getLine());
  MemStat memStat=new MemStat();
  memStat.refresh();
  double totMem=memStat.getTotal();
  double freeMem=memStat.getAvailable();
  final Pair<Double,Double> nicStats=libvirtComputingResource.getNicStats(libvirtComputingResource.getPublicBridgeName());
  final HostStatsEntry hostStats=new HostStatsEntry(command.getHostId(),cpuUtil,nicStats.first() / 1024,nicStats.second() / 1024,"host",totMem,freeMem,0,0);
  return new GetHostStatsAnswer(command,hostStats);
}
