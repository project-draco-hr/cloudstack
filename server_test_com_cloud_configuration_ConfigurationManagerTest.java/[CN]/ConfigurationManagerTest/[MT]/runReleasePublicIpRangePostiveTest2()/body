{
  Transaction txn=Transaction.open("runReleasePublicIpRangePostiveTest2");
  when(configurationMgr._vlanDao.findById(anyLong())).thenReturn(vlan);
  List<AccountVlanMapVO> accountVlanMaps=new ArrayList<AccountVlanMapVO>();
  AccountVlanMapVO accountVlanMap=new AccountVlanMapVO(1,1);
  accountVlanMaps.add(accountVlanMap);
  when(configurationMgr._accountVlanMapDao.listAccountVlanMapsByVlan(anyLong())).thenReturn(accountVlanMaps);
  when(configurationMgr._publicIpAddressDao.countIPs(anyLong(),anyLong(),anyBoolean())).thenReturn(1);
  List<IPAddressVO> ipAddressList=new ArrayList<IPAddressVO>();
  IPAddressVO ipAddress=new IPAddressVO(new Ip("75.75.75.75"),1,0xaabbccddeeffL,10,false);
  ipAddressList.add(ipAddress);
  when(configurationMgr._publicIpAddressDao.listByVlanId(anyLong())).thenReturn(ipAddressList);
  when(configurationMgr._firewallDao.countRulesByIpId(anyLong())).thenReturn(0L);
  when(configurationMgr._networkMgr.disassociatePublicIpAddress(anyLong(),anyLong(),any(Account.class))).thenReturn(true);
  when(configurationMgr._vlanDao.releaseFromLockTable(anyLong())).thenReturn(true);
  when(configurationMgr._accountVlanMapDao.remove(anyLong())).thenReturn(true);
  try {
    Boolean result=configurationMgr.releasePublicIpRange(releasePublicIpRangesCmd);
    Assert.assertTrue(result);
  }
 catch (  Exception e) {
    s_logger.info("exception in testing runReleasePublicIpRangePostiveTest2 message: " + e.toString());
  }
 finally {
    txn.close("runReleasePublicIpRangePostiveTest2");
  }
}
