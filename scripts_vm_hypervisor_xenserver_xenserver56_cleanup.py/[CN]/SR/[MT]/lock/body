def lock(self):
    "Acquire the SR lock. Nested acquire()'s are ok. Check for Abort\n        signal to avoid deadlocking (trying to acquire the SR lock while the\n        lock is held by a process that is trying to abort us)"
    self._locked += 1
    if (self._locked > 1):
        return
    abortFlag = IPCFlag(self.uuid)
    for i in range(SR.LOCK_RETRY_ATTEMPTS_LOCK):
        if self._srLock.acquireNoblock():
            return
        if abortFlag.test(FLAG_TYPE_ABORT):
            raise AbortException('Abort requested')
        time.sleep(SR.LOCK_RETRY_INTERVAL)
    raise util.SMException('Unable to acquire the SR lock')
