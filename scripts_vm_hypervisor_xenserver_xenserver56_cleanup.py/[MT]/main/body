def main():
    action = ''
    uuid = ''
    background = False
    force = False
    dryRun = False
    test = False
    shortArgs = 'gGaqxu:bfdt'
    longArgs = ['gc', 'gc_force', 'abort', 'query', 'disable', 'uuid', 'background', 'force', 'dry-run', 'test']
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], shortArgs, longArgs)
    except getopt.GetoptError:
        usage()
    for (o, a) in opts:
        if (o in ('-g', '--gc')):
            action = 'gc'
        if (o in ('-G', '--gc_force')):
            action = 'gc_force'
        if (o in ('-a', '--abort')):
            action = 'abort'
        if (o in ('-q', '--query')):
            action = 'query'
        if (o in ('-x', '--disable')):
            action = 'disable'
        if (o in ('-u', '--uuid')):
            uuid = a
        if (o in ('-b', '--background')):
            background = True
        if (o in ('-f', '--force')):
            force = True
        if (o in ('-d', '--dry-run')):
            Util.log('Dry run mode')
            dryRun = True
        if (o in '-t'):
            action = 'test'
    if ((not action) or (not uuid)):
        usage()
    elif (action != 'query'):
        print ('All output goes in %s' % LOG_FILE)
    if (action == 'gc'):
        gc(None, uuid, background, dryRun)
    elif (action == 'gc_force'):
        gc_force(None, uuid, force, dryRun)
    elif (action == 'abort'):
        abort(uuid)
    elif (action == 'query'):
        print ('Currently running: %s' % get_state(uuid))
    elif (action == 'disable'):
        print ('Disabling GC/coalesce for %s' % uuid)
        _abort(uuid)
        raw_input('Press enter to re-enable...')
        print 'GC/coalesce re-enabled'
        lockRunning.release()
    elif (action == 'test'):
        Util.log('Test operation')
        pass
