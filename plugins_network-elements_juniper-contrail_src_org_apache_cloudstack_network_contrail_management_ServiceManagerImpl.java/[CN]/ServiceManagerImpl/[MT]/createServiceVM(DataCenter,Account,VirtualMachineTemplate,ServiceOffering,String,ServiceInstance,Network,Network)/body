{
  long id=_vmDao.getNextInSequence(Long.class,"id");
  DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
  LinkedHashMap<NetworkVO,List<? extends NicProfile>> networks=new LinkedHashMap<NetworkVO,List<? extends NicProfile>>();
  NetworkVO linklocal=(NetworkVO)_networkModel.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Management);
  networks.put(linklocal,new ArrayList<NicProfile>());
  networks.put((NetworkVO)left,new ArrayList<NicProfile>());
  networks.put((NetworkVO)right,new ArrayList<NicProfile>());
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),"SRV");
  ServiceVirtualMachine svm=new ServiceVirtualMachine(id,instanceName,name,template.getId(),serviceOffering.getId(),template.getHypervisorType(),template.getGuestOSId(),zone.getId(),owner.getDomainId(),owner.getAccountId(),false);
  Map<String,String> kvmap=new HashMap<String,String>();
  kvmap.put("service-instance",siObj.getUuid());
  Gson json=new Gson();
  String userData=json.toJson(kvmap);
  svm.setUserData(userData);
  try {
    _vmManager.allocate(instanceName,template,serviceOffering,networks,plan,template.getHypervisorType());
  }
 catch (  InsufficientCapacityException ex) {
    throw new CloudRuntimeException("Insufficient capacity",ex);
  }
  CallContext.current().setEventDetails("Vm Id: " + svm.getId());
  return svm;
}
