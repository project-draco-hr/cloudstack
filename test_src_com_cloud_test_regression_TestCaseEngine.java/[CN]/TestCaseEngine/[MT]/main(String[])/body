{
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-t")) {
      s_numThreads=Integer.parseInt(iter.next());
    }
    if (arg.equals("-p")) {
      s_printUrl=true;
    }
    if (arg.equals("-type")) {
      s_type=iter.next();
    }
    if (arg.equals("-repeat")) {
      s_repeat=Boolean.valueOf(iter.next());
    }
    if (arg.equals("-filename")) {
      s_fileName=iter.next();
    }
  }
  if (s_type.equalsIgnoreCase("sanity"))   s_isSanity=true;
 else   if (s_type.equalsIgnoreCase("regression"))   s_isRegression=true;
  try {
    File file=new File(s_fileName);
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document doc=builder.parse(file);
    doc.getDocumentElement().normalize();
    Element root=doc.getDocumentElement();
    setGlobalParams(root);
    setComponent(root);
    for (int i=0; i < s_numThreads; i++) {
      if (s_numThreads > 1) {
        s_logger.info("STARTING STRESS TEST IN " + s_numThreads + " THREADS");
      }
 else {
        s_logger.info("STARTING FUNCTIONAL TEST");
      }
      new Thread(new Runnable(){
        @Override public void run(){
          do {
            if (s_numThreads == 1) {
              try {
                for (                String key : s_keys) {
                  Class<?> c=Class.forName(s_componentMap.get(key));
                  TestCase component=(TestCase)c.newInstance();
                  executeTest(key,c,component);
                }
              }
 catch (              Exception ex1) {
                s_logger.error(ex1);
              }
 finally {
                if (s_failure > 0) {
                  System.exit(1);
                }
              }
            }
 else {
              Random ran=new Random();
              Integer randomNumber=Math.abs(ran.nextInt(s_keys.size()));
              try {
                String key=s_keys.get(randomNumber);
                Class<?> c=Class.forName(s_componentMap.get(key));
                TestCase component=(TestCase)c.newInstance();
                executeTest(key,c,component);
              }
 catch (              Exception e) {
                s_logger.error("Error in thread ",e);
              }
            }
          }
 while (s_repeat);
        }
      }
).start();
    }
  }
 catch (  Exception exc) {
    s_logger.error(exc);
  }
}
