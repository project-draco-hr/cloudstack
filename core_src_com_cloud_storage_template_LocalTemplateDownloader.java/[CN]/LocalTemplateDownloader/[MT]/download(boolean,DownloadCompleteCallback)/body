{
  if (_status == Status.ABORTED || _status == Status.UNRECOVERABLE_ERROR || _status == Status.DOWNLOAD_FINISHED) {
    return 0;
  }
  _start=System.currentTimeMillis();
  _resume=resume;
  File src;
  try {
    src=new File(new URI(_downloadUrl));
  }
 catch (  URISyntaxException e1) {
    s_logger.warn("Invalid URI " + _downloadUrl);
    _status=Status.UNRECOVERABLE_ERROR;
    return 0;
  }
  File dst=new File(_toFile);
  FileChannel fic=null;
  FileChannel foc=null;
  try {
    if (_storage != null) {
      dst.createNewFile();
      _storage.setWorldReadableAndWriteable(dst);
    }
    ByteBuffer buffer=ByteBuffer.allocate(1024 * 512);
    FileInputStream fis;
    try {
      fis=new FileInputStream(src);
    }
 catch (    FileNotFoundException e) {
      s_logger.warn("Unable to find " + _downloadUrl);
      _errorString="Unable to find " + _downloadUrl;
      return -1;
    }
    fic=fis.getChannel();
    FileOutputStream fos;
    try {
      fos=new FileOutputStream(dst);
    }
 catch (    FileNotFoundException e) {
      s_logger.warn("Unable to find " + _toFile);
      return -1;
    }
    foc=fos.getChannel();
    _remoteSize=src.length();
    this._totalBytes=0;
    _status=TemplateDownloader.Status.IN_PROGRESS;
    try {
      while (_status != Status.ABORTED && fic.read(buffer) != -1) {
        buffer.flip();
        int count=foc.write(buffer);
        _totalBytes+=count;
        buffer.clear();
      }
    }
 catch (    IOException e) {
      s_logger.warn("Unable to download",e);
    }
    String downloaded="(incomplete download)";
    if (_totalBytes == _remoteSize) {
      _status=TemplateDownloader.Status.DOWNLOAD_FINISHED;
      downloaded="(download complete)";
    }
    _errorString="Downloaded " + _remoteSize + " bytes "+ downloaded;
    _downloadTime+=System.currentTimeMillis() - _start;
    return _totalBytes;
  }
 catch (  Exception e) {
    _status=TemplateDownloader.Status.UNRECOVERABLE_ERROR;
    _errorString=e.getMessage();
    return 0;
  }
 finally {
    if (fic != null) {
      try {
        fic.close();
      }
 catch (      IOException e) {
      }
    }
    if (foc != null) {
      try {
        foc.close();
      }
 catch (      IOException e) {
      }
    }
    if (_status == Status.UNRECOVERABLE_ERROR && dst.exists()) {
      dst.delete();
    }
    if (callback != null) {
      callback.downloadComplete(_status);
    }
  }
}
