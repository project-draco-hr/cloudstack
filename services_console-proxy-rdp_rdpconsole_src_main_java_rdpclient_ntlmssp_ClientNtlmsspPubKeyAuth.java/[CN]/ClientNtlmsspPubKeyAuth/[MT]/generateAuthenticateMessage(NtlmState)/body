{
  int blocksCursor=BLOCKS_OFFSET;
  ByteBuffer buf=new ByteBuffer(4096);
  buf.writeString(NTLMSSP,RdpConstants.CHARSET_8);
  buf.writeByte(0);
  buf.writeIntLE(NtlmConstants.NTLMSSP_AUTH);
  blocksCursor=writeBlock(buf,ntlmState.lmChallengeResponse,blocksCursor);
  blocksCursor=writeBlock(buf,ntlmState.ntChallengeResponse,blocksCursor);
  blocksCursor=writeStringBlock(buf,ntlmState.domain,blocksCursor,RdpConstants.CHARSET_16);
  blocksCursor=writeStringBlock(buf,ntlmState.user,blocksCursor,RdpConstants.CHARSET_16);
  blocksCursor=writeStringBlock(buf,ntlmState.workstation,blocksCursor,RdpConstants.CHARSET_16);
  blocksCursor=writeBlock(buf,ntlmState.encryptedRandomSessionKey,blocksCursor);
  buf.writeIntLE(0xe288b235);
  buf.writeBytes(generateVersion());
  int savedCursorForMIC=buf.cursor;
  buf.writeBytes(new byte[16]);
  if (BLOCKS_OFFSET != buf.cursor)   throw new RuntimeException("BUG: Actual offset of first byte of allocated blocks is not equal hardcoded offset. Hardcoded offset: " + BLOCKS_OFFSET + ", actual offset: "+ buf.cursor+ ". Update hardcoded offset to match actual offset.");
  buf.cursor=blocksCursor;
  buf.trimAtCursor();
  ntlmState.authenticateMessage=buf.toByteArray();
  ntlmState.ntlm_compute_message_integrity_check();
  buf.cursor=savedCursorForMIC;
  buf.writeBytes(ntlmState.messageIntegrityCheck);
  buf.rewindCursor();
  return buf;
}
