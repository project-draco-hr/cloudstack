def write(self, data):
    '\n        Write data to the file.  If write buffering is on (C{bufsize} was\n        specified and non-zero), some or all of the data may not actually be\n        written yet.  (Use L{flush} or L{close} to force buffered data to be\n        written out.)\n\n        @param data: data to write.\n        @type data: str\n        '
    if self._closed:
        raise IOError('File is closed')
    if (not (self._flags & self.FLAG_WRITE)):
        raise IOError('File not open for writing')
    if (not (self._flags & self.FLAG_BUFFERED)):
        self._write_all(data)
        return
    self._wbuffer.write(data)
    if (self._flags & self.FLAG_LINE_BUFFERED):
        last_newline_pos = data.rfind('\n')
        if (last_newline_pos >= 0):
            wbuf = self._wbuffer.getvalue()
            last_newline_pos += (len(wbuf) - len(data))
            self._write_all(wbuf[:(last_newline_pos + 1)])
            self._wbuffer = StringIO()
            self._wbuffer.write(wbuf[(last_newline_pos + 1):])
        return
    if (self._wbuffer.tell() >= self._bufsize):
        self.flush()
    return
