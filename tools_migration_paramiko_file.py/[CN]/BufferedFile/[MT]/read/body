def read(self, size=None):
    '\n        Read at most C{size} bytes from the file (less if we hit the end of the\n        file first).  If the C{size} argument is negative or omitted, read all\n        the remaining data in the file.\n\n        @param size: maximum number of bytes to read\n        @type size: int\n        @return: data read from the file, or an empty string if EOF was\n            encountered immediately\n        @rtype: str\n        '
    if self._closed:
        raise IOError('File is closed')
    if (not (self._flags & self.FLAG_READ)):
        raise IOError('File is not open for reading')
    if ((size is None) or (size < 0)):
        result = self._rbuffer
        self._rbuffer = ''
        self._pos += len(result)
        while True:
            try:
                new_data = self._read(self._DEFAULT_BUFSIZE)
            except EOFError:
                new_data = None
            if ((new_data is None) or (len(new_data) == 0)):
                break
            result += new_data
            self._realpos += len(new_data)
            self._pos += len(new_data)
        return result
    if (size <= len(self._rbuffer)):
        result = self._rbuffer[:size]
        self._rbuffer = self._rbuffer[size:]
        self._pos += len(result)
        return result
    while (len(self._rbuffer) < size):
        read_size = (size - len(self._rbuffer))
        if (self._flags & self.FLAG_BUFFERED):
            read_size = max(self._bufsize, read_size)
        try:
            new_data = self._read(read_size)
        except EOFError:
            new_data = None
        if ((new_data is None) or (len(new_data) == 0)):
            break
        self._rbuffer += new_data
        self._realpos += len(new_data)
    result = self._rbuffer[:size]
    self._rbuffer = self._rbuffer[size:]
    self._pos += len(result)
    return result
