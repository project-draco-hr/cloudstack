{
  DataMotionStrategy cantHandleStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy defaultStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy hyperStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy pluginStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy highestStrategy=mock(DataMotionStrategy.class);
  doReturn(Priority.CANT_HANDLE).when(cantHandleStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.DEFAULT).when(defaultStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.HYPERVISOR).when(hyperStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.PLUGIN).when(pluginStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.HIGHEST).when(highestStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  List<DataMotionStrategy> strategies=new ArrayList<DataMotionStrategy>(5);
  DataMotionStrategy strategy=null;
  strategies.add(cantHandleStrategy);
  strategy=StrategyPriority.pickStrategy(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("A strategy was found when it shouldn't have been.",null,strategy);
  strategies.add(defaultStrategy);
  strategy=StrategyPriority.pickStrategy(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("Default strategy was not picked.",defaultStrategy,strategy);
  strategies.add(hyperStrategy);
  strategy=StrategyPriority.pickStrategy(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("Hypervisor strategy was not picked.",hyperStrategy,strategy);
  strategies.add(pluginStrategy);
  strategy=StrategyPriority.pickStrategy(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("Plugin strategy was not picked.",pluginStrategy,strategy);
  strategies.add(highestStrategy);
  strategy=StrategyPriority.pickStrategy(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("Highest strategy was not picked.",highestStrategy,strategy);
}
