{
  DataMotionStrategy cantHandleStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy defaultStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy hyperStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy pluginStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy highestStrategy=mock(DataMotionStrategy.class);
  doReturn(Priority.CANT_HANDLE).when(cantHandleStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.DEFAULT).when(defaultStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.HYPERVISOR).when(hyperStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.PLUGIN).when(pluginStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(Priority.HIGHEST).when(highestStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  List<DataMotionStrategy> strategies=new ArrayList<DataMotionStrategy>(5);
  strategies.addAll(Arrays.asList(defaultStrategy,pluginStrategy,hyperStrategy,cantHandleStrategy,highestStrategy));
  StrategyPriority.sortStrategies(strategies,mock(DataObject.class),mock(DataObject.class));
  assertEquals("Highest was not 1st.",highestStrategy,strategies.get(0));
  assertEquals("Plugin was not 2nd.",pluginStrategy,strategies.get(1));
  assertEquals("Hypervisor was not 3rd.",hyperStrategy,strategies.get(2));
  assertEquals("Default was not 4th.",defaultStrategy,strategies.get(3));
  assertEquals("Can't Handle was not 5th.",cantHandleStrategy,strategies.get(4));
}
