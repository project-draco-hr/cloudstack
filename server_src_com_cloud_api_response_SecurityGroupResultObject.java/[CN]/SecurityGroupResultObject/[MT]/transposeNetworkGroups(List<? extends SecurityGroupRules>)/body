{
  List<SecurityGroupResultObject> resultObjects=new ArrayList<SecurityGroupResultObject>();
  Map<Long,SecurityGroup> allowedSecurityGroups=new HashMap<Long,SecurityGroup>();
  Map<Long,Account> accounts=new HashMap<Long,Account>();
  if ((groups != null) && !groups.isEmpty()) {
    List<IngressRuleResultObject> ingressDataList=new ArrayList<IngressRuleResultObject>();
    List<EgressRuleResultObject> egressDataList=new ArrayList<EgressRuleResultObject>();
    SecurityGroupResultObject currentGroup=null;
    List<Long> processedGroups=new ArrayList<Long>();
    for (    SecurityGroupRules netGroupRule : groups) {
      Long groupId=netGroupRule.getId();
      if (!processedGroups.contains(groupId)) {
        processedGroups.add(groupId);
        if (currentGroup != null) {
          if (!ingressDataList.isEmpty()) {
            currentGroup.setIngressRules(ingressDataList);
            ingressDataList=new ArrayList<IngressRuleResultObject>();
          }
          resultObjects.add(currentGroup);
        }
        SecurityGroupResultObject groupResult=new SecurityGroupResultObject();
        groupResult.setId(netGroupRule.getId());
        groupResult.setName(netGroupRule.getName());
        groupResult.setDescription(netGroupRule.getDescription());
        groupResult.setDomainId(netGroupRule.getDomainId());
        Account account=accounts.get(netGroupRule.getAccountId());
        if (account == null) {
          account=ApiDBUtils.findAccountById(netGroupRule.getAccountId());
          accounts.put(account.getId(),account);
        }
        groupResult.setAccountId(account.getId());
        groupResult.setAccountName(account.getAccountName());
        currentGroup=groupResult;
      }
      SecurityGroupRulesVO dummyIngressobj=new SecurityGroupRulesVO();
      SecurityGroupEgressRulesVO dummyEgressobj=new SecurityGroupEgressRulesVO();
      String str=dummyIngressobj.getClass().getName();
      String s1=netGroupRule.getClass().getSimpleName();
      if (netGroupRule.getRuleId() != null && netGroupRule.getClass().getSimpleName().indexOf("SecurityGroupRulesVO") != -1) {
        IngressRuleResultObject ingressData=new IngressRuleResultObject();
        ingressData.setEndPort(netGroupRule.getEndPort());
        ingressData.setStartPort(netGroupRule.getStartPort());
        ingressData.setId(netGroupRule.getRuleId());
        ingressData.setProtocol(netGroupRule.getProtocol());
        Long allowedSecurityGroupId=netGroupRule.getAllowedNetworkId();
        if (allowedSecurityGroupId != null) {
          SecurityGroup allowedSecurityGroup=allowedSecurityGroups.get(allowedSecurityGroupId);
          if (allowedSecurityGroup == null) {
            allowedSecurityGroup=ApiDBUtils.findSecurityGroupById(allowedSecurityGroupId);
            allowedSecurityGroups.put(allowedSecurityGroupId,allowedSecurityGroup);
          }
          ingressData.setAllowedSecurityGroup(allowedSecurityGroup.getName());
          Account allowedAccount=accounts.get(allowedSecurityGroup.getAccountId());
          if (allowedAccount == null) {
            allowedAccount=ApiDBUtils.findAccountById(allowedSecurityGroup.getAccountId());
            accounts.put(allowedAccount.getId(),allowedAccount);
          }
          ingressData.setAllowedSecGroupAcct(allowedAccount.getAccountName());
        }
 else         if (netGroupRule.getAllowedSourceIpCidr() != null) {
          ingressData.setAllowedSourceIpCidr(netGroupRule.getAllowedSourceIpCidr());
        }
        ingressDataList.add(ingressData);
      }
 else       if (netGroupRule.getRuleId() != null && netGroupRule.getClass().getSimpleName().indexOf("SecurityGroupEgressRulesVO") != -1) {
        EgressRuleResultObject egressData=new EgressRuleResultObject();
        egressData.setEndPort(netGroupRule.getEndPort());
        egressData.setStartPort(netGroupRule.getStartPort());
        egressData.setId(netGroupRule.getRuleId());
        egressData.setProtocol(netGroupRule.getProtocol());
        Long allowedSecurityGroupId=netGroupRule.getAllowedNetworkId();
        if (allowedSecurityGroupId != null) {
          SecurityGroup allowedSecurityGroup=allowedSecurityGroups.get(allowedSecurityGroupId);
          if (allowedSecurityGroup == null) {
            allowedSecurityGroup=ApiDBUtils.findSecurityGroupById(allowedSecurityGroupId);
            allowedSecurityGroups.put(allowedSecurityGroupId,allowedSecurityGroup);
          }
          egressData.setAllowedSecurityGroup(allowedSecurityGroup.getName());
          Account allowedAccount=accounts.get(allowedSecurityGroup.getAccountId());
          if (allowedAccount == null) {
            allowedAccount=ApiDBUtils.findAccountById(allowedSecurityGroup.getAccountId());
            accounts.put(allowedAccount.getId(),allowedAccount);
          }
          egressData.setAllowedSecGroupAcct(allowedAccount.getAccountName());
        }
 else         if (netGroupRule.getAllowedSourceIpCidr() != null) {
          egressData.setAllowedDestinationIpCidr(netGroupRule.getAllowedSourceIpCidr());
        }
        egressDataList.add(egressData);
      }
    }
    if (currentGroup != null) {
      if (!ingressDataList.isEmpty()) {
        currentGroup.setIngressRules(ingressDataList);
      }
      resultObjects.add(currentGroup);
    }
  }
  return resultObjects;
}
