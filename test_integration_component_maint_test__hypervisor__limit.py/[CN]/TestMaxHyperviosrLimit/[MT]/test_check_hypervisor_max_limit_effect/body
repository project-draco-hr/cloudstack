@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_check_hypervisor_max_limit_effect(self):
    " Test hypervisor max limits effect\n\n        # 1. Read exsiting count of VM's on the host including SSVM and VR\n                and modify maxguestcount accordingly\n        # 2. Deploy a VM\n        # 2. Try to deploy another vm\n        # 3. Verify that second VM\n                deployment fails (2 SSVMs 1 VR VM and 1 deployed VM)\n        "
    hostList = Host.list(self.apiclient, zoneid=self.zone.id, type='Routing')
    event_validation_result = validateList(hostList)
    self.assertEqual(event_validation_result[0], PASS, ('host list validation failed due to %s' % event_validation_result[2]))
    self.host = Host(hostList[0])
    Host.update(self.apiclient, id=self.host.id, hosttags='host1')
    listVm = list_virtual_machines(self.apiclient, hostid=self.host.id)
    listssvm = list_ssvms(self.apiclient, hostid=self.host.id)
    listvr = list_routers(self.apiclient, hostid=self.host.id)
    newValue = 1
    if (listVm is not None):
        newValue = (len(listVm) + newValue)
    if (listssvm is not None):
        newValue = (len(listssvm) + newValue)
    if (listvr is not None):
        newValue = (len(listvr) + newValue)
    qresultset = self.dbclient.execute(("select hypervisor_version from host where uuid='%s'" % self.host.id))
    event_validation_result = validateList(qresultset)
    self.assertEqual(event_validation_result[0], PASS, ('event list validation failed due to %s' % event_validation_result[2]))
    cmdList = listHypervisorCapabilities.listHypervisorCapabilitiesCmd()
    cmdList.hypervisor = self.hypervisor
    config = self.apiclient.listHypervisorCapabilities(cmdList)
    for host in config:
        if (host.hypervisorversion == qresultset[0][0]):
            self.hostCapId = host.id
            self.originalLimit = host.maxguestslimit
            break
    else:
        self.skipTest(('No hypervisor capabilities found for %s                     with version %s' % (self.hypervisor, qresultset[0][0])))
    cmdUpdate = updateHypervisorCapabilities.updateHypervisorCapabilitiesCmd()
    cmdUpdate.id = self.hostCapId
    cmdUpdate.maxguestslimit = newValue
    self.apiclient.updateHypervisorCapabilities(cmdUpdate)
    vm = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    self.cleanup.append(vm)
    with self.assertRaises(Exception):
        VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
