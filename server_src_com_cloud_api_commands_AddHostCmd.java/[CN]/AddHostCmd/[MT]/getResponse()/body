{
  List<HostVO> hosts=(List<HostVO>)getResponseObject();
  ListResponse<HostResponse> response=new ListResponse<HostResponse>();
  List<HostResponse> hostResponses=new ArrayList<HostResponse>();
  if (hosts != null) {
    for (    HostVO host : hosts) {
      HostResponse hostResponse=new HostResponse();
      hostResponse.setId(host.getId());
      hostResponse.setCapabilities(host.getCapabilities());
      hostResponse.setClusterId(host.getClusterId());
      hostResponse.setCpuNumber(host.getCpus());
      hostResponse.setZoneId(host.getDataCenterId());
      hostResponse.setDisconnectedOn(host.getDisconnectedOn());
      hostResponse.setHypervisor(host.getHypervisorType());
      hostResponse.setHostType(host.getType());
      hostResponse.setLastPinged(new Date(host.getLastPinged()));
      hostResponse.setManagementServerId(host.getManagementServerId());
      hostResponse.setName(host.getName());
      hostResponse.setPodId(host.getPodId());
      hostResponse.setCreated(host.getCreated());
      hostResponse.setRemoved(host.getRemoved());
      hostResponse.setCpuSpeed(host.getSpeed());
      hostResponse.setState(host.getStatus());
      hostResponse.setIpAddress(host.getPrivateIpAddress());
      hostResponse.setVersion(host.getVersion());
      GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
      if (guestOSCategory != null) {
        hostResponse.setOsCategoryId(guestOSCategory.getId());
        hostResponse.setOsCategoryName(guestOSCategory.getName());
      }
      hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
      hostResponse.setPodName(ApiDBUtils.findPodById(host.getPodId()).getName());
      int cpu=0;
      String cpuAlloc=null;
      DecimalFormat decimalFormat=new DecimalFormat("#.##");
      List<UserVmVO> instances=ApiDBUtils.listUserVMsByHostId(host.getId());
      for (      UserVmVO vm : instances) {
        ServiceOffering so=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
        cpu+=so.getCpu() * so.getSpeed();
      }
      cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + "%";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + "%";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setAverageLoad((long)hostStats.getAverageLoad());
        hostResponse.setNetworkKbsRead((long)hostStats.getNetworkReadKBs());
        hostResponse.setNetworkKbsWrite((long)hostStats.getNetworkWriteKBs());
      }
      if (host.getType() == Host.Type.Routing) {
        hostResponse.setMemoryTotal(host.getTotalMemory());
        long mem=ApiDBUtils.getMemoryUsagebyHost(host.getId());
        hostResponse.setMemoryAllocated(mem);
        hostResponse.setMemoryUsed(mem);
      }
 else       if (host.getType().toString().equals("Storage")) {
        hostResponse.setDiskSizeTotal(host.getTotalSize());
        hostResponse.setDiskSizeAllocated(0L);
      }
      if (host.getClusterId() != null) {
        ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
        hostResponse.setClusterName(cluster.getName());
      }
      hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
      Set<Event> possibleEvents=host.getStatus().getPossibleEvents();
      if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
        String events="";
        Iterator<Event> iter=possibleEvents.iterator();
        while (iter.hasNext()) {
          Event event=iter.next();
          events+=event.toString();
          if (iter.hasNext()) {
            events+="; ";
          }
        }
        hostResponse.setEvents(events);
      }
      hostResponse.setResponseName("host");
      hostResponses.add(hostResponse);
    }
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to add host");
  }
  response.setResponses(hostResponses);
  response.setResponseName(getName());
  return response;
}
