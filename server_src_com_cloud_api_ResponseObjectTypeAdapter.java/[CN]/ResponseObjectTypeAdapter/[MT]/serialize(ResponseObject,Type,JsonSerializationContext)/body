{
  JsonObject obj=new JsonObject();
  if (responseObj instanceof SuccessResponse) {
    obj.addProperty("success",((SuccessResponse)responseObj).getSuccess());
    return obj;
  }
 else   if (responseObj instanceof ExceptionResponse) {
    obj.addProperty("errorcode",((ExceptionResponse)responseObj).getErrorCode());
    obj.addProperty("errortext",((ExceptionResponse)responseObj).getErrorText());
    return obj;
  }
 else {
    Field[] fields=responseObj.getClass().getDeclaredFields();
    for (    Field field : fields) {
      if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
        continue;
      }
      SerializedName serializedName=field.getAnnotation(SerializedName.class);
      if (serializedName == null) {
        continue;
      }
      String propName=field.getName();
      Method method=getGetMethod(responseObj,propName);
      if (method != null) {
        try {
          Object fieldValue=method.invoke(responseObj);
          if (fieldValue != null) {
            if (fieldValue instanceof ResponseObject) {
              ResponseObject subObj=(ResponseObject)fieldValue;
              obj.add(serializedName.value(),serialize(subObj,subObj.getClass(),ctx));
            }
 else {
              if (fieldValue instanceof Number) {
                obj.addProperty(serializedName.value(),(Number)fieldValue);
              }
 else               if (fieldValue instanceof Character) {
                obj.addProperty(serializedName.value(),(Character)fieldValue);
              }
 else               if (fieldValue instanceof Boolean) {
                obj.addProperty(serializedName.value(),(Boolean)fieldValue);
              }
 else {
                obj.addProperty(serializedName.value(),fieldValue.toString());
              }
            }
          }
        }
 catch (        IllegalArgumentException e) {
          s_logger.error("Illegal argument exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
        }
catch (        IllegalAccessException e) {
          s_logger.error("Illegal access exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
        }
catch (        InvocationTargetException e) {
          s_logger.error("Invocation target exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
        }
      }
    }
    JsonObject response=new JsonObject();
    response.add(responseObj.getObjectName(),obj);
    return response;
  }
}
