{
  SnmpTrapInfo snmpTrapInfo=null;
  final String message=event.getRenderedMessage();
  if (message.contains("alertType") && message.contains("message")) {
    snmpTrapInfo=new SnmpTrapInfo();
    final StringTokenizer messageSplitter=new StringTokenizer(message,_pairDelimiter);
    while (messageSplitter.hasMoreTokens()) {
      final String pairToken=messageSplitter.nextToken();
      final StringTokenizer pairSplitter=new StringTokenizer(pairToken,_keyValueDelimiter);
      String keyToken;
      String valueToken;
      if (pairSplitter.hasMoreTokens()) {
        keyToken=pairSplitter.nextToken().trim();
      }
 else {
        break;
      }
      if (pairSplitter.hasMoreTokens()) {
        valueToken=pairSplitter.nextToken().trim();
      }
 else {
        break;
      }
      if (keyToken.equalsIgnoreCase("alertType") && !valueToken.equalsIgnoreCase("null")) {
        snmpTrapInfo.setAlertType(Short.parseShort(valueToken));
      }
 else       if (keyToken.equalsIgnoreCase("dataCenterId") && !valueToken.equalsIgnoreCase("null")) {
        snmpTrapInfo.setDataCenterId(Long.parseLong(valueToken));
      }
 else       if (keyToken.equalsIgnoreCase("podId") && !valueToken.equalsIgnoreCase("null")) {
        snmpTrapInfo.setPodId(Long.parseLong(valueToken));
      }
 else       if (keyToken.equalsIgnoreCase("clusterId") && !valueToken.equalsIgnoreCase("null")) {
        snmpTrapInfo.setClusterId(Long.parseLong(valueToken));
      }
 else       if (keyToken.equalsIgnoreCase("message") && !valueToken.equalsIgnoreCase("null")) {
        snmpTrapInfo.setMessage(getSnmpMessage(message));
      }
    }
    snmpTrapInfo.setGenerationTime(new Date(event.getTimeStamp()));
  }
  return snmpTrapInfo;
}
