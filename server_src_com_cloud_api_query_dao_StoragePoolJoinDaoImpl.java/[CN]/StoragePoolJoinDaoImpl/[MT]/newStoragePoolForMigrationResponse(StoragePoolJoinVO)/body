{
  StoragePoolResponse poolResponse=new StoragePoolResponse();
  poolResponse.setId(pool.getUuid());
  poolResponse.setName(pool.getName());
  poolResponse.setState(pool.getStatus());
  String path=pool.getPath();
  path=StringUtils.cleanString(path);
  poolResponse.setPath(path);
  poolResponse.setIpAddress(pool.getHostAddress());
  poolResponse.setZoneId(pool.getZoneUuid());
  poolResponse.setZoneName(pool.getZoneName());
  if (pool.getPoolType() != null) {
    poolResponse.setType(pool.getPoolType().toString());
  }
  poolResponse.setPodId(pool.getPodUuid());
  poolResponse.setPodName(pool.getPodName());
  poolResponse.setCreated(pool.getCreated());
  poolResponse.setScope(pool.getScope().toString());
  if (pool.getHypervisor() != null) {
    poolResponse.setHypervisor(pool.getHypervisor().toString());
  }
  short capacityType=pool.getScope() == ScopeType.HOST ? Capacity.CAPACITY_TYPE_LOCAL_STORAGE : Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED;
  long allocatedSize=ApiDBUtils.getStorageCapacitybyPool(pool.getId(),capacityType);
  poolResponse.setDiskSizeTotal(pool.getCapacityBytes());
  poolResponse.setDiskSizeAllocated(allocatedSize);
  poolResponse.setCapacityIops(pool.getCapacityIops());
  StorageStats stats=ApiDBUtils.getStoragePoolStatistics(pool.getId());
  if (stats != null) {
    Long used=stats.getByteUsed();
    poolResponse.setDiskSizeUsed(used);
  }
  poolResponse.setClusterId(pool.getClusterUuid());
  poolResponse.setClusterName(pool.getClusterName());
  poolResponse.setTags(pool.getTag());
  poolResponse.setJobId(pool.getJobUuid());
  poolResponse.setJobStatus(pool.getJobStatus());
  poolResponse.setObjectName("storagepool");
  return poolResponse;
}
