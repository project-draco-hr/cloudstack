def lookup(self, hostname):
    '\n        Find a hostkey entry for a given hostname or IP.  If no entry is found,\n        C{None} is returned.  Otherwise a dictionary of keytype to key is\n        returned.  The keytype will be either C{"ssh-rsa"} or C{"ssh-dss"}.\n\n        @param hostname: the hostname (or IP) to lookup\n        @type hostname: str\n        @return: keys associated with this host (or C{None})\n        @rtype: dict(str, L{PKey})\n        '


    class SubDict(UserDict.DictMixin):

        def __init__(self, hostname, entries, hostkeys):
            self._hostname = hostname
            self._entries = entries
            self._hostkeys = hostkeys

        def __getitem__(self, key):
            for e in self._entries:
                if (e.key.get_name() == key):
                    return e.key
            raise KeyError(key)

        def __setitem__(self, key, val):
            for e in self._entries:
                if (e.key is None):
                    continue
                if (e.key.get_name() == key):
                    e.key = val
                    break
            else:
                e = HostKeyEntry([hostname], val)
                self._entries.append(e)
                self._hostkeys._entries.append(e)

        def keys(self):
            return [e.key.get_name() for e in self._entries if (e.key is not None)]
    entries = []
    for e in self._entries:
        for h in e.hostnames:
            if ((h.startswith('|1|') and (self.hash_host(hostname, h) == h)) or (h == hostname)):
                entries.append(e)
    if (len(entries) == 0):
        return None
    return SubDict(hostname, entries, self)
