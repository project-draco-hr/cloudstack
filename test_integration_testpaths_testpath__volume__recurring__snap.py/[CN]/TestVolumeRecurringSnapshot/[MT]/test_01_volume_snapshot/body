@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_volume_snapshot(self):
    ' Test Volume (root) Snapshot\n        # 1. Create Hourly, Daily,Weekly recurring snapshot policy for ROOT disk and \n                    Verify the presence of the corresponding snapshots on the Secondary Storage\n        # 2. Delete the snapshot policy and verify the entry as Destroyed in snapshot_schedule\n        # 3. Verify that maxsnaps should not consider manual snapshots for deletion\n        # 4. Snapshot policy should reflect the correct timezone\n        # 5. Verify that listSnapshotPolicies() should return all snapshot policies\n                that belong to the account (both manual and recurring snapshots)\n        # 6. Verify that listSnapshotPolicies() should not return snapshot \n                policies that have been deleted\n        # 7. Verify that snapshot should not be created for VM in Destroyed state\n        # 8. Verify that snapshot should get created after resuming the VM\n        # 9. Verify that All the recurring policies associated with the VM should be \n                deleted after VM get destroyed.\n        '
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    timeout = self.testdata['timeout']
    while True:
        snapshots = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
        if isinstance(snapshots, list):
            break
        elif (timeout == 0):
            raise Exception('List snapshots API call failed.')
    for snapshot in snapshots:
        self.assertEqual(self.dbclient.execute(("select type_description from snapshots where name='%s'" % snapshot.name))[0][0], 'HOURLY')
    time.sleep(180)
    for snapshot in snapshots:
        self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshot.id))
    recurring_snapshot.delete(self.apiclient)
    self.assertEqual(self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot.id)), [])
    self.testdata['recurring_snapshot']['intervaltype'] = 'DAILY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00'
    recurring_snapshot_daily = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_daily = list_snapshot_policy(self.apiclient, id=recurring_snapshot_daily.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_daily)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    snap_db_daily = self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_daily.id))
    validation_result_1 = validateList(snap_db_daily)
    self.assertEqual(validation_result_1[0], PASS, ('snapshot_policy list validation failed due to %s' % validation_result_1[2]))
    self.assertNotEqual(len(snap_db_daily), 0, 'Check DB Query result set')
    recurring_snapshot_daily.delete(self.apiclient)
    self.assertEqual(self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_daily.id)), [])
    self.testdata['recurring_snapshot']['intervaltype'] = 'WEEKLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_weekly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_weekly = list_snapshot_policy(self.apiclient, id=recurring_snapshot_weekly.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_weekly)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    snap_sch_2 = self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_weekly.id))
    validation_result_2 = validateList(snap_sch_2)
    self.assertEqual(validation_result_2[0], PASS, ('snapshot_policy list validation failed due to %s' % validation_result_2[2]))
    self.assertNotEqual(len(snap_sch_2), 0, 'Check DB Query result set')
    recurring_snapshot_weekly.delete(self.apiclient)
    self.assertEqual(self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_weekly.id)), [])
    self.testdata['recurring_snapshot']['intervaltype'] = 'MONTHLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_monthly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_monthly = list_snapshot_policy(self.apiclient, id=recurring_snapshot_monthly.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_monthly)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    snap_sch_3 = self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_monthly.id))
    validation_result = validateList(snap_sch_3)
    self.assertEqual(validation_result[0], PASS, ('snapshot_policy list validation failed due to %s' % validation_result[2]))
    self.assertNotEqual(len(snap_sch_3), 0, 'Check DB Query result set')
    recurring_snapshot_monthly.delete(self.apiclient)
    self.assertEqual(self.dbclient.execute(("select * from snapshot_policy where uuid='%s'" % recurring_snapshot_weekly.id)), [])
    snapshots = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    self.testdata['recurring_snapshot']['schedule'] = 1
    recurring_snapshot_1 = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot_1.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    timeout = self.testdata['timeout']
    while True:
        snapshots = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
        if isinstance(snapshots, list):
            break
        elif (timeout == 0):
            raise Exception('List snapshots API call failed.')
    snap_to_delete = snapshots[0]
    time.sleep((self.testdata['recurring_snapshot']['maxsnaps'] * 3600))
    snapshots_1 = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertTrue((snap_to_delete not in snapshots_1))
    time.sleep(360)
    self.assertEqual(self.dbclient.execute(("select status  from snapshots where uuid='%s'" % snap_to_delete.id))[0][0], 'Destroyed')
    self.assertFalse(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snap_to_delete.id))
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    time.sleep(180)
    snap_time_hourly = self.dbclient.execute(("select scheduled_timestamp from             snapshot_schedule where uuid='%s'" % recurring_snapshot.id))
    self.debug(('Timestamp for hourly snapshot %s' % snap_time_hourly))
    recurring_snapshot.delete(self.apiclient)
    self.testdata['recurring_snapshot']['intervaltype'] = 'DAILY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00'
    recurring_snapshot_daily = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_daily = list_snapshot_policy(self.apiclient, id=recurring_snapshot_daily.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_daily)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    time.sleep(180)
    snap_time_daily = self.dbclient.execute(("select scheduled_timestamp from                     snapshot_schedule where uuid='%s'" % recurring_snapshot_daily.id))
    self.debug(('Timestamp for daily snapshot %s' % snap_time_daily))
    recurring_snapshot_daily.delete(self.apiclient)
    self.testdata['recurring_snapshot']['intervaltype'] = 'WEEKLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_weekly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_weekly = list_snapshot_policy(self.apiclient, id=recurring_snapshot_weekly.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_weekly)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    time.sleep(180)
    snap_time_weekly = self.dbclient.execute(("select scheduled_timestamp from                     snapshot_schedule where uuid='%s'" % recurring_snapshot_weekly.id))
    self.debug(('Timestamp for monthly snapshot %s' % snap_time_weekly))
    recurring_snapshot_weekly.delete(self.apiclient)
    self.testdata['recurring_snapshot']['intervaltype'] = 'MONTHLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_monthly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy_monthly = list_snapshot_policy(self.apiclient, id=recurring_snapshot_monthly.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy_monthly)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    time.sleep(180)
    snap_time_monthly = self.dbclient.execute(("select scheduled_timestamp from                     snapshot_schedule where uuid='%s'" % recurring_snapshot_monthly.id))
    self.debug(('Timestamp for monthly snapshot %s' % snap_time_monthly))
    recurring_snapshot_monthly.delete(self.apiclient)
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    self.testdata['recurring_snapshot']['schedule'] = 1
    recurring_snapshot_hourly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    self.testdata['recurring_snapshot']['intervaltype'] = 'MONTHLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_monthly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy = list_snapshot_policy(self.apiclient, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    for rec in [recurring_snapshot_hourly, recurring_snapshot_monthly]:
        self.assertTrue(((rec.id in any(policy['id'])) for policy in list_snapshots_policy))
    recurring_snapshot_hourly.delete(self.apiclient)
    recurring_snapshot_monthly.delete(self.apiclient)
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    self.testdata['recurring_snapshot']['schedule'] = 1
    recurring_snapshot_hourly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    self.testdata['recurring_snapshot']['intervaltype'] = 'MONTHLY'
    self.testdata['recurring_snapshot']['schedule'] = '00:00:1'
    recurring_snapshot_monthly = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    recurring_snapshot_monthly.delete(self.apiclient)
    list_snapshots_policy = list_snapshot_policy(self.apiclient, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    self.assertTrue(((recurring_snapshot_hourly.id in any(policy['id'])) for policy in list_snapshots_policy))
    self.assertTrue(((recurring_snapshot_monthly.id not in any(policy['id'])) for policy in list_snapshots_policy))
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    self.testdata['recurring_snapshot']['schedule'] = 1
    recurring_snapshot = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    timeout = self.testdata['timeout']
    while True:
        snapshots = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
        if isinstance(snapshots, list):
            break
        elif (timeout == 0):
            raise Exception('List snapshots API call failed.')
    self.vm_1.delete(self.apiclient, expunge=False)
    time.sleep(3600)
    snapshot_list = Snapshot.list(self.apiclient, volumeid=self.volume[0].id)
    list_validation = validateList(snapshot_list)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    self.assertEqual(len(snapshot_list), 1, 'Verify that snapsot is not created after VM deletion')
    self.vm_1.recover(self.apiclient)
    time.sleep(3600)
    snapshot_list = Snapshot.list(self.apiclient, volumeid=self.volume[0].id)
    self.assertEqual(len(snapshot_list), 2, 'Verify that snapsot is not created after VM deletion')
    self.vm_1.delete(self.apiclient)
    time.sleep(180)
    with self.assertRaises(Exception):
        list_snapshots_policy = list_snapshot_policy(self.apiclient, volumeid=self.volume[0].id)
