@classmethod
def setUpClass(cls):
    testClient = super(TestVolumeRecurringSnapshot, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    if (cls.hypervisor.lower() not in ['vmware', 'kvm', 'xenserver']):
        raise unittest.SkipTest(('Storage migration not supported on %s' % cls.hypervisor))
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.userapiclient = testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
        cls._cleanup.append(cls.disk_offering)
        cls.vm_1 = VirtualMachine.create(cls.userapiclient, cls.testdata['small'], templateid=cls.template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, zoneid=cls.zone.id, diskofferingid=cls.disk_offering.id, mode=cls.zone.networktype)
        cls.volume = list_volumes(cls.apiclient, virtualmachineid=cls.vm_1.id, type='ROOT', listall=True)
        cls.data_volume = list_volumes(cls.apiclient, virtualmachineid=cls.vm_1.id, type='DATADISK', listall=True)
    except Exception as e:
        cls.tearDownClass()
        raise e
    return
