@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_03_volume_rec_snapshot(self):
    ' Test Volume (root) Snapshot\n        # 1. For snapshot.delta.max > maxsnaps verify that when number of snapshot exceeds \n                maxsnaps value previous snapshot should get deleted from database but remain \n                on secondary storage and when the value exceeds snapshot.delta.max the \n                snapshot should get deleted from secondary storage\n        '
    if (self.hypervisor.lower() != 'xenserver'):
        self.skipTest('Skip test for hypervisor other than Xenserver')
    self.testdata['recurring_snapshot']['intervaltype'] = 'HOURLY'
    self.testdata['recurring_snapshot']['schedule'] = 1
    recurring_snapshot_root = SnapshotPolicy.create(self.apiclient, self.volume[0].id, self.testdata['recurring_snapshot'])
    Configurations.update(self.apiclient, name='snapshot.delta.max', value='3')
    list_snapshots_policy = list_snapshot_policy(self.apiclient, id=recurring_snapshot_root.id, volumeid=self.volume[0].id)
    list_validation = validateList(list_snapshots_policy)
    self.assertEqual(list_validation[0], PASS, ('snapshot list validation failed due to %s' % list_validation[2]))
    timeout = self.testdata['timeout']
    while True:
        snapshots = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
        if isinstance(snapshots, list):
            break
        elif (timeout == 0):
            raise Exception('List snapshots API call failed.')
    time.sleep((3600 * 2))
    snapshots_2 = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertTrue((snapshots[0] not in snapshots_2))
    for snapshot in snapshots_2:
        snapshots.append(snapshot)
    time.sleep(360)
    self.assertEqual(self.dbclient.execute(("select status  from snapshots where uuid='%s'" % snapshots[0].id))[0][0], 'Destroyed')
    self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshots[0].id))
    time.sleep(3600)
    snapshots_3 = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertTrue((snapshots[1] not in snapshots_3))
    snapshots.append(snapshots_3[1])
    time.sleep(180)
    self.assertEqual(self.dbclient.execute(("select status  from snapshots where uuid='%s'" % snapshots[1].id))[0][0], 'Destroyed')
    for snapshot in [snapshots[0], snapshots[1]]:
        self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshot.id))
    time.sleep(3600)
    snapshots_4 = list_snapshots(self.apiclient, volumeid=self.volume[0].id, intervaltype=self.testdata['recurring_snapshot']['intervaltype'], snapshottype='RECURRING', listall=True)
    self.assertTrue((snapshots[2] not in snapshots_4))
    snapshots.append(snapshots_4[1])
    time.sleep(180)
    self.assertEqual(self.dbclient.execute(("select status  from snapshots where uuid='%s'" % snapshots[2].id))[0][0], 'Destroyed')
    for snapshot in [snapshots[0], snapshots[1], snapshots[2]]:
        self.assertFalse(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, snapshot.id))
    return
