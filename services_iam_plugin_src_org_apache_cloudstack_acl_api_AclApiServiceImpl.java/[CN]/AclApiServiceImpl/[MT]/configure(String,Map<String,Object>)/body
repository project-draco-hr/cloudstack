{
  _messageBus.subscribe(AccountManager.MESSAGE_ADD_ACCOUNT_EVENT,new MessageSubscriber(){
    @Override public void onPublishMessage(    String senderAddress,    String subject,    Object obj){
      HashMap<Long,Long> acctGroupMap=(HashMap<Long,Long>)obj;
      for (      Long accountId : acctGroupMap.keySet()) {
        Long groupId=acctGroupMap.get(accountId);
        s_logger.debug("MessageBus message: new Account Added: " + accountId + ", adding it to groupId :"+ groupId);
        addAccountToAclGroup(accountId,groupId);
        AccountVO account=_accountDao.findById(accountId);
        Domain domain=_domainDao.findById(account.getDomainId());
        if (domain != null) {
          ListResponse<AclGroupResponse> domainGroups=listAclGroups(null,"DomainGrp-" + domain.getUuid(),domain.getId(),null,null);
          if (domainGroups.getResponses() != null) {
            for (            AclGroupResponse group : domainGroups.getResponses()) {
              addAccountToAclGroup(accountId,new Long(group.getId()));
            }
          }
        }
      }
    }
  }
);
  _messageBus.subscribe(AccountManager.MESSAGE_REMOVE_ACCOUNT_EVENT,new MessageSubscriber(){
    @Override public void onPublishMessage(    String senderAddress,    String subject,    Object obj){
      Long accountId=((Long)obj);
      if (accountId != null) {
        s_logger.debug("MessageBus message: Account removed: " + accountId + ", releasing the group associations");
        removeAccountFromAclGroups(accountId);
      }
    }
  }
);
  _messageBus.subscribe(DomainManager.MESSAGE_ADD_DOMAIN_EVENT,new MessageSubscriber(){
    @Override public void onPublishMessage(    String senderAddress,    String subject,    Object obj){
      Long domainId=((Long)obj);
      if (domainId != null) {
        s_logger.debug("MessageBus message: new Domain created: " + domainId + ", creating a new group");
        Domain domain=_domainDao.findById(domainId);
        _iamSrv.createAclGroup("DomainGrp-" + domain.getUuid(),"Domain group",domain.getPath());
      }
    }
  }
);
  _messageBus.subscribe(TemplateManager.MESSAGE_REGISTER_PUBLIC_TEMPLATE_EVENT,new MessageSubscriber(){
    @Override public void onPublishMessage(    String senderAddress,    String subject,    Object obj){
      Long templateId=(Long)obj;
      if (templateId != null) {
        s_logger.debug("MessageBus message: new public template registered: " + templateId + ", grant permission to domain admin and normal user policies");
        _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_DOMAIN_ADMIN + 1),AclEntityType.VirtualMachineTemplate.toString(),PermissionScope.RESOURCE.toString(),templateId,"listTemplates",AccessType.UseEntry.toString(),Permission.Allow);
        _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_NORMAL + 1),AclEntityType.VirtualMachineTemplate.toString(),PermissionScope.RESOURCE.toString(),templateId,"listTemplates",AccessType.UseEntry.toString(),Permission.Allow);
      }
    }
  }
);
  return super.configure(name,params);
}
