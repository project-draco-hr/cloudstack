@classmethod
def setUpClass(cls):
    cloudstacktestclient = super(TestPrimaryResourceLimitsVolume, cls).getClsTestClient()
    cls.api_client = cloudstacktestclient.getApiClient()
    cls.hypervisor = cloudstacktestclient.getHypervisorInfo()
    cls.services = cloudstacktestclient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cloudstacktestclient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    cls._cleanup = []
    cls.unsupportedStorageType = False
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.services['volume']['zoneid'] = cls.zone.id
    try:
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
        cls.services['disk_offering']['disksize'] = 2
        cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
        cls._cleanup.append(cls.service_offering)
        cls._cleanup.append(cls.disk_offering)
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Exception in setUpClass: %s' % e))
    return
