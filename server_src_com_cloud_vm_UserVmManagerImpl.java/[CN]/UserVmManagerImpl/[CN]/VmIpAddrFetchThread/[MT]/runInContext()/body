{
  GetVmIpAddressCommand cmd=new GetVmIpAddressCommand(vmName,networkCidr,isWindows);
  boolean decrementCount=true;
  try {
    logger.debug("Trying for vm " + vmId + " nic Id "+ nicId+ " ip retrieval ...");
    Answer answer=_agentMgr.send(hostId,cmd);
    NicVO nic=_nicDao.findById(nicId);
    if (answer.getResult()) {
      String vmIp=answer.getDetails();
      if (NetUtils.isValidIp(vmIp)) {
        if (nic != null) {
          nic.setIPv4Address(vmIp);
          _nicDao.update(nicId,nic);
          logger.debug("Vm " + vmId + " IP "+ vmIp+ " got retrieved successfully");
          vmIdCountMap.remove(nicId);
          decrementCount=false;
          ActionEventUtils.onActionEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,Domain.ROOT_DOMAIN,EventTypes.EVENT_NETWORK_EXTERNAL_DHCP_VM_IPFETCH,"VM " + vmId + " nic id "+ nicId+ " ip address "+ vmIp+ " got fetched successfully");
        }
      }
    }
 else {
      if (nic.getIPv4Address() != null) {
        nic.setIPv4Address(null);
        _nicDao.update(nicId,nic);
      }
      if (answer.getDetails() != null) {
        logger.debug("Failed to get vm ip for Vm " + vmId + answer.getDetails());
      }
    }
  }
 catch (  OperationTimedoutException e) {
    logger.warn("Timed Out",e);
  }
catch (  AgentUnavailableException e) {
    logger.warn("Agent Unavailable ",e);
  }
 finally {
    if (decrementCount) {
      VmAndCountDetails vmAndCount=vmIdCountMap.get(nicId);
      vmAndCount.decrementCount();
      logger.debug("Ip is not retrieved for VM " + vmId + " nic "+ nicId+ " ... decremented count to "+ vmAndCount.getRetrievalCount());
      vmIdCountMap.put(nicId,vmAndCount);
    }
  }
}
