{
  try {
    UserVmVO vm=start(param.getUserId(),param.getVmId(),null,param.getIsoPath(),param.getEventId());
    if (vm != null) {
      executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(executor.getAsyncJobMgr().getExecutorContext().getManagementServer(),vm,null));
    }
 else {
      executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"Unable to start vm");
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.debug("Unable to start vm because storage is unavailable: " + e.getMessage());
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.RESOURCE_UNAVAILABLE_ERROR,"Unable to start vm because storage is unavailable");
  }
catch (  ConcurrentOperationException e) {
    s_logger.debug(e.getMessage());
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
catch (  ExecutionException e) {
    s_logger.debug(e.getMessage());
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  return true;
}
