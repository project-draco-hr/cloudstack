{
  long vmId=vm.getId();
  boolean mirroredVols=vm.isMirroredVols();
  DataCenterVO dc=_dcDao.findById(vm.getDataCenterId());
  HostPodVO pod=_podDao.findById(vm.getPodId());
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  StoragePoolVO sp=_storageMgr.getStoragePoolForVm(vm.getId());
  List<VolumeVO> vols=_volsDao.findCreatedByInstance(vmId);
  String[] storageIps=new String[2];
  VolumeVO vol=vols.get(0);
  storageIps[0]=vol.getHostIp();
  if (mirroredVols && (vols.size() == 2)) {
    storageIps[1]=vols.get(1).getHostIp();
  }
  PrepareForMigrationCommand cmd=new PrepareForMigrationCommand(vm.getInstanceName(),vm.getVnet(),storageIps,vols,mirroredVols);
  HostVO vmHost=null;
  HashSet<Host> avoid=new HashSet<Host>();
  HostVO fromHost=_hostDao.findById(vm.getHostId());
  if (fromHost.getClusterId() == null) {
    s_logger.debug("The host is not in a cluster");
    return null;
  }
  avoid.add(fromHost);
  while ((vmHost=(HostVO)_agentMgr.findHost(Host.Type.Routing,dc,pod,sp,offering,template,vm,null,avoid)) != null) {
    avoid.add(vmHost);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Trying to migrate router to host " + vmHost.getName());
    }
    if (!_storageMgr.share(vm,vols,vmHost,false)) {
      s_logger.warn("Can not share " + vm.toString() + " on host "+ vmHost.getId());
      throw new StorageUnavailableException("Can not share " + vm.toString() + " on host "+ vmHost.getId());
    }
    Answer answer=_agentMgr.easySend(vmHost.getId(),cmd);
    if (answer != null && answer.getResult()) {
      return vmHost;
    }
    _storageMgr.unshare(vm,vols,vmHost);
  }
  return null;
}
