{
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      try {
        _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      }
 catch (      NoTransitionException e1) {
        s_logger.warn(e1.getMessage());
      }
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn("Unable to delete volume:" + volume.getId() + " for vm:"+ vmId+ " whilst transitioning to error state");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
      String msg="Failed to deploy Vm with Id: " + vmId;
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_USERVM,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),msg,msg);
      _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    }
  }
}
