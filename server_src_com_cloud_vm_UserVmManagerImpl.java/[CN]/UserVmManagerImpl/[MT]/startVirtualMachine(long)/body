{
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  if (caller != null && caller.getRemoved() != null) {
    throw new InvalidParameterValueException("The account " + caller.getId() + " is removed");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  _accountMgr.checkAccess(caller,null,vm);
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new InvalidParameterValueException("The owner of " + vm + " does not exist: "+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException("The owner of " + vm + " is disabled: "+ vm.getAccountId());
  }
  UserVO user=_userDao.findById(userId);
  if (_securityGroupMgr.isVmSecurityGroupEnabled(vmId) && !_securityGroupMgr.isVmMappedToDefaultSecurityGroup(vmId)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Vm " + vm + " is security group enabled, but not mapped to default security group; creating the mapping automatically");
    }
    SecurityGroup defaultSecurityGroup=_securityGroupMgr.getDefaultSecurityGroup(vm.getAccountId());
    if (defaultSecurityGroup != null) {
      List<Long> groupList=new ArrayList<Long>();
      groupList.add(defaultSecurityGroup.getId());
      _securityGroupMgr.addInstanceToGroups(vmId,groupList);
    }
  }
  return _itMgr.start(vm,null,user,caller);
}
