{
  Account caller=CallContext.current().getCallingAccount();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the VM");
    }
    throw new PermissionDeniedException("No permission to migrate VM, Only Root Admin can migrate a VM!");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("Unable to find the vm by id " + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not Running, unable to migrate the vm " + vm);
    }
    CloudRuntimeException ex=new CloudRuntimeException("VM is not Running, unable to migrate the vm with" + " specified id");
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    throw new InvalidParameterValueException("Unsupported hypervisor type for vm migration, we support" + " XenServer/VMware/KVM only");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_resourceMgr.getHost(srcHostId);
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException("Cannot migrate VM, VM is already present on this host, please" + " specify valid destination host to migrate the VM");
  }
  if (!(srcHost.getHypervisorType().equals(destinationHost.getHypervisorType()) && srcHost.getHypervisorVersion().equals(destinationHost.getHypervisorVersion()))) {
    throw new CloudRuntimeException("The source and destination hosts are not of the same type and version. " + "Source hypervisor type and version: " + srcHost.getHypervisorType().toString() + " "+ srcHost.getHypervisorVersion()+ ", Destination hypervisor type and version: "+ destinationHost.getHypervisorType().toString()+ " "+ destinationHost.getHypervisorVersion());
  }
  HypervisorCapabilitiesVO capabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(srcHost.getHypervisorType(),srcHost.getHypervisorVersion());
  if (!capabilities.isStorageMotionSupported()) {
    throw new CloudRuntimeException("Migration with storage isn't supported on hypervisor " + srcHost.getHypervisorType() + " of version "+ srcHost.getHypervisorVersion());
  }
  if (destinationHost.getState() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new CloudRuntimeException("Cannot migrate VM, destination host is not in correct state, has " + "status: " + destinationHost.getState() + ", state: "+ destinationHost.getResourceState());
  }
  List<VolumeVO> vmVolumes=_volsDao.findUsableVolumesForInstance(vm.getId());
  Map<VolumeVO,StoragePoolVO> volToPoolObjectMap=new HashMap<VolumeVO,StoragePoolVO>();
  if (!isVMUsingLocalStorage(vm) && destinationHost.getClusterId().equals(srcHost.getClusterId())) {
    if (volumeToPool.isEmpty()) {
      throw new InvalidParameterValueException("Migration of the vm " + vm + "from host "+ srcHost+ " to destination host "+ destinationHost+ " doesn't involve migrating the volumes.");
    }
  }
  if (!volumeToPool.isEmpty()) {
    for (    Map.Entry<String,String> entry : volumeToPool.entrySet()) {
      VolumeVO volume=_volsDao.findByUuid(entry.getKey());
      StoragePoolVO pool=_storagePoolDao.findByUuid(entry.getValue());
      if (volume == null) {
        throw new InvalidParameterValueException("There is no volume present with the given id " + entry.getKey());
      }
 else       if (pool == null) {
        throw new InvalidParameterValueException("There is no storage pool present with the given id " + entry.getValue());
      }
 else {
        if (!vmVolumes.contains(volume)) {
          throw new InvalidParameterValueException("There volume " + volume + " doesn't belong to "+ "the virtual machine "+ vm+ " that has to be migrated");
        }
        volToPoolObjectMap.put(volume,pool);
      }
    }
  }
  for (  VolumeVO volume : vmVolumes) {
    if (volume.getState() != Volume.State.Ready) {
      throw new CloudRuntimeException("Volume " + volume + " of the VM is not in Ready state. Cannot "+ "migrate the vm with its volumes.");
    }
  }
  HostVO destinationHostVO=_hostDao.findById(destinationHost.getId());
  if (_capacityMgr.checkIfHostReachMaxGuestLimit(destinationHostVO)) {
    throw new VirtualMachineMigrationException("Host name: " + destinationHost.getName() + ", hostId: "+ destinationHost.getId()+ " already has max running vms (count includes system VMs). Cannot"+ " migrate to this host");
  }
  VMInstanceVO migratedVm=_itMgr.migrateWithStorage(vm,srcHostId,destinationHost.getId(),volToPoolObjectMap);
  return migratedVm;
}
