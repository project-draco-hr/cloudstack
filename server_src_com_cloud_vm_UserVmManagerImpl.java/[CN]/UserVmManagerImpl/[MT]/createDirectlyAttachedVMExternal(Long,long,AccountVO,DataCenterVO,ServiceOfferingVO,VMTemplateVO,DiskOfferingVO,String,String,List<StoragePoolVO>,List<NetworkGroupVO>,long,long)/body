{
  long accountId=account.getId();
  long dataCenterId=dc.getId();
  long serviceOfferingId=offering.getId();
  long templateId=-1;
  if (template != null) {
    templateId=template.getId();
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creating directly attached vm for account id=" + account.getId() + ", name="+ account.getAccountName()+ "; dc="+ dc.getName()+ "; offering="+ offering.getId()+ "; diskOffering="+ ((diskOffering != null) ? diskOffering.getName() : "none")+ "; template="+ templateId);
  }
  long guestOSId;
  if (template != null) {
    guestOSId=template.getGuestOSId();
  }
 else {
    throw new CloudRuntimeException("No template or ISO was specified for the VM.");
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  long numVolumes=(isIso || (diskOffering == null)) ? 1 : 2;
  Transaction txn=Transaction.currentTxn();
  try {
    UserVmVO vm=null;
    txn.start();
    account=_accountDao.lockRow(accountId,true);
    if (account == null) {
      throw new CloudRuntimeException("Unable to lock up the account: " + accountId);
    }
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
      ResourceAllocationException rae=new ResourceAllocationException("Maximum number of virtual machines for account: " + account.getAccountName() + " has been exceeded.");
      rae.setResourceType("vm");
      throw rae;
    }
    final String name=VirtualMachineName.getVmName(vmId,accountId,_instance);
    final String[] macAddresses=_dcDao.getNextAvailableMacAddressPair(dc.getId());
    Long routerId=null;
    long poolId=0;
    Pair<HostPodVO,Long> pod=null;
    Set<Long> avoids=new HashSet<Long>();
    while ((pod=_agentMgr.findPod(template,offering,dc,account.getId(),avoids)) != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Attempting to create direct attached vm in pod " + pod.first().getName());
      }
      String guestMacAddress=macAddresses[0];
      String externalMacAddress=macAddresses[1];
      IpAddrAllocator.IpAddr publicIp=_IpAllocator.getPrivateIpAddress(guestMacAddress,dc.getId(),pod.first().getId());
      String publicIpAddr=null;
      String publicIpNetMask=null;
      if (publicIp == null) {
        s_logger.debug("Failed to get public ip address from external dhcp server");
      }
 else {
        publicIpAddr=publicIp.ipaddr;
        publicIpNetMask=publicIp.netMask;
      }
      vm=new UserVmVO(vmId,name,templateId,guestOSId,accountId,account.getDomainId(),serviceOfferingId,guestMacAddress,publicIpAddr,publicIpNetMask,null,externalMacAddress,null,routerId,pod.first().getId(),dataCenterId,offering.getOfferHA(),displayName,userData);
      if (diskOffering != null) {
        vm.setMirroredVols(diskOffering.isMirrored());
      }
      vm.setLastHostId(pod.second());
      _vmDao.persist(vm);
      _networkGroupMgr.addInstanceToGroups(vmId,networkGroups);
      _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
      _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
      txn.commit();
      vm=_vmDao.findById(vmId);
      try {
        poolId=_storageMgr.createUserVM(account,vm,template,dc,pod.first(),offering,diskOffering,a,size);
      }
 catch (      CloudRuntimeException e) {
        _vmDao.expunge(vmId);
        _accountMgr.decrementResourceCount(account.getId(),ResourceType.user_vm);
        _accountMgr.decrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Unable to find storage host in pod " + pod.first().getName() + " (id:"+ pod.first().getId()+ "), checking other pods");
        }
        avoids.add(pod.first().getId());
        continue;
      }
      break;
    }
    if (poolId == 0) {
      if (vm != null && vm.getHostName() != null && vm.getDisplayName() != null) {
        if (!vm.getHostName().equals(vm.getDisplayName())) {
          s_logger.debug("failed to create VM instance : " + name + "("+ vm.getDisplayName()+ ")");
        }
 else {
          s_logger.debug("failed to create VM instance : " + name);
        }
      }
 else {
        s_logger.debug("failed to create VM instance : " + name);
      }
      _accountMgr.decrementResourceCount(account.getId(),ResourceType.user_vm);
      _accountMgr.decrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
      txn.commit();
      return null;
    }
    txn.start();
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_VM_CREATE);
    event.setStartId(startEventId);
    event.setState(Event.State.Completed);
    String diskOfferingIdentifier=(diskOffering != null) ? String.valueOf(diskOffering.getId()) : "-1";
    String eventParams="id=" + vm.getId() + "\nvmName="+ vm.getHostName()+ "\nsoId="+ vm.getServiceOfferingId()+ "\ndoId="+ diskOfferingIdentifier+ "\ntId="+ vm.getTemplateId()+ "\ndcId="+ vm.getDataCenterId();
    event.setParameters(eventParams);
    if (!vm.getHostName().equals(vm.getDisplayName())) {
      event.setDescription("successfully created VM instance : " + vm.getHostName() + "("+ vm.getDisplayName()+ ")");
    }
 else {
      event.setDescription("successfully created VM instance : " + vm.getHostName());
    }
    _eventDao.persist(event);
    _vmDao.updateIf(vm,VirtualMachine.Event.OperationSucceeded,null);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("vm created " + vmId);
    }
    txn.commit();
    return _vmDao.findById(vmId);
  }
 catch (  ResourceAllocationException rae) {
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.user_vm);
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Failed to create VM for account " + accountId + " due to maximum number of virtual machines exceeded.");
    }
    throw rae;
  }
catch (  Throwable th) {
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.user_vm);
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
    s_logger.error("Unable to create vm",th);
    throw new CloudRuntimeException("Unable to create vm",th);
  }
}
