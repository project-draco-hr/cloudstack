{
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  Boolean isRecursive=cmd.isRecursive();
  String hypervisor=cmd.getHypervisor();
  List<DomainVO> domainsToSearchForVms=new ArrayList<DomainVO>();
  boolean isAdmin=false;
  String path=null;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Invalid domain id (" + domainId + ") given, unable to list virtual machines.");
      }
      if (accountName != null) {
        account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
        accountId=account.getId();
      }
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      DomainVO domain=_domainDao.findById(account.getDomainId());
      if (domain != null) {
        path=domain.getPath();
      }
    }
  }
 else {
    accountId=account.getId();
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (isRecursive && domainId != null) {
    DomainVO parentDomain=_domainDao.findById(domainId);
    if (parentDomain.getName().equals("ROOT")) {
      domainsToSearchForVms.addAll(_domainDao.listAll());
      return recursivelySearchForVms(cmd,path,isAdmin,domainsToSearchForVms,accountId);
    }
 else {
      domainsToSearchForVms.add(parentDomain);
      domainsToSearchForVms.addAll(_domainDao.findAllChildren(parentDomain.getPath(),parentDomain.getId()));
      return recursivelySearchForVms(cmd,path,isAdmin,domainsToSearchForVms,accountId);
    }
  }
 else   if (isRecursive && domainId == null) {
    throw new InvalidParameterValueException("Please enter a parent domain id for listing vms recursively");
  }
  Criteria c=new Criteria("id",Boolean.TRUE,cmd.getStartIndex(),cmd.getPageSizeVal());
  c.addCriteria(Criteria.KEYWORD,cmd.getKeyword());
  c.addCriteria(Criteria.ID,cmd.getId());
  c.addCriteria(Criteria.NAME,cmd.getInstanceName());
  c.addCriteria(Criteria.STATE,cmd.getState());
  c.addCriteria(Criteria.DATACENTERID,cmd.getZoneId());
  c.addCriteria(Criteria.GROUPID,cmd.getGroupId());
  c.addCriteria(Criteria.FOR_VIRTUAL_NETWORK,cmd.getForVirtualNetwork());
  c.addCriteria(Criteria.NETWORKID,cmd.getNetworkId());
  if (path != null) {
    c.addCriteria(Criteria.PATH,path);
  }
  if (HypervisorType.getType(hypervisor) != HypervisorType.None) {
    c.addCriteria(Criteria.HYPERVISOR,hypervisor);
  }
 else   if (hypervisor != null) {
    throw new InvalidParameterValueException("Invalid HypervisorType " + hypervisor);
  }
  if (isAdmin == true) {
    c.addCriteria(Criteria.DOMAINID,domainId);
    c.addCriteria(Criteria.PODID,cmd.getPodId());
    c.addCriteria(Criteria.HOSTID,cmd.getHostId());
    c.addCriteria(Criteria.STORAGE_ID,cmd.getStorageId());
  }
  if (accountId != null) {
    c.addCriteria(Criteria.ACCOUNTID,new Object[]{accountId});
  }
  c.addCriteria(Criteria.ISADMIN,isAdmin);
  return searchForUserVMs(c);
}
