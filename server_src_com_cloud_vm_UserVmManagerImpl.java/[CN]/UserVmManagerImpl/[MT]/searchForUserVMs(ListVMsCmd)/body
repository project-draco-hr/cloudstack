{
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Boolean isRecursive=cmd.isRecursive();
  String hypervisor=cmd.getHypervisor();
  Long accountId=null;
  String path=null;
  if (isRecursive != null && isRecursive && domainId == null) {
    throw new InvalidParameterValueException("Please enter a parent domain id for listing vms recursively");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException("Domain id=" + domainId + " doesn't exist");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  boolean isAdmin=false;
  if (_accountMgr.isAdmin(caller.getType())) {
    isAdmin=true;
    if (accountName != null && domainId != null) {
      caller=_accountDao.findActiveAccount(accountName,domainId);
      if (caller == null) {
        throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
      }
      accountId=caller.getId();
    }
    if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
      if (isRecursive == null) {
        DomainVO domain=_domainDao.findById(caller.getDomainId());
        path=domain.getPath();
      }
    }
  }
 else {
    if (domainId != null && domainId.longValue() != caller.getDomainId()) {
      throw new PermissionDeniedException("Caller is not authorised to see domain id=" + domainId + " entries");
    }
    accountId=caller.getId();
  }
  if (isRecursive != null && isRecursive && isAdmin) {
    if (isRecursive) {
      DomainVO domain=_domainDao.findById(domainId);
      path=domain.getPath();
      domainId=null;
    }
  }
  Criteria c=new Criteria("id",Boolean.TRUE,cmd.getStartIndex(),cmd.getPageSizeVal());
  c.addCriteria(Criteria.KEYWORD,cmd.getKeyword());
  c.addCriteria(Criteria.ID,cmd.getId());
  c.addCriteria(Criteria.NAME,cmd.getInstanceName());
  c.addCriteria(Criteria.STATE,cmd.getState());
  c.addCriteria(Criteria.DATACENTERID,cmd.getZoneId());
  c.addCriteria(Criteria.GROUPID,cmd.getGroupId());
  c.addCriteria(Criteria.FOR_VIRTUAL_NETWORK,cmd.getForVirtualNetwork());
  c.addCriteria(Criteria.NETWORKID,cmd.getNetworkId());
  if (domainId != null) {
    c.addCriteria(Criteria.DOMAINID,domainId);
  }
  if (path != null) {
    c.addCriteria(Criteria.PATH,path);
  }
  if (HypervisorType.getType(hypervisor) != HypervisorType.None) {
    c.addCriteria(Criteria.HYPERVISOR,hypervisor);
  }
 else   if (hypervisor != null) {
    throw new InvalidParameterValueException("Invalid HypervisorType " + hypervisor);
  }
  if (isAdmin) {
    c.addCriteria(Criteria.PODID,cmd.getPodId());
    c.addCriteria(Criteria.HOSTID,cmd.getHostId());
    c.addCriteria(Criteria.STORAGE_ID,cmd.getStorageId());
  }
  if (accountId != null) {
    c.addCriteria(Criteria.ACCOUNTID,new Object[]{accountId});
  }
  c.addCriteria(Criteria.ISADMIN,isAdmin);
  return searchForUserVMs(c);
}
