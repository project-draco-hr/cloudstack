{
  Filter searchFilter=new Filter(UserVmVO.class,c.getOrderBy(),c.getAscending(),c.getOffset(),c.getLimit());
  SearchBuilder<UserVmVO> sb=_vmDao.createSearchBuilder();
  Object[] accountIds=(Object[])c.getCriteria(Criteria.ACCOUNTID);
  Object domainId=c.getCriteria(Criteria.DOMAINID);
  Object id=c.getCriteria(Criteria.ID);
  Object name=c.getCriteria(Criteria.NAME);
  Object state=c.getCriteria(Criteria.STATE);
  Object notState=c.getCriteria(Criteria.NOTSTATE);
  Object zone=c.getCriteria(Criteria.DATACENTERID);
  Object pod=c.getCriteria(Criteria.PODID);
  Object hostId=c.getCriteria(Criteria.HOSTID);
  Object hostName=c.getCriteria(Criteria.HOSTNAME);
  Object keyword=c.getCriteria(Criteria.KEYWORD);
  Object isAdmin=c.getCriteria(Criteria.ISADMIN);
  Object ipAddress=c.getCriteria(Criteria.IPADDRESS);
  Object groupId=c.getCriteria(Criteria.GROUPID);
  Object useVirtualNetwork=c.getCriteria(Criteria.FOR_VIRTUAL_NETWORK);
  Object path=c.getCriteria(Criteria.PATH);
  Object networkId=c.getCriteria(Criteria.NETWORKID);
  sb.and("displayName",sb.entity().getDisplayName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("accountIdEQ",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and("accountIdIN",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("stateEQ",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and("stateNEQ",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and("stateNIN",sb.entity().getState(),SearchCriteria.Op.NIN);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("hostIdEQ",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  sb.and("hostIdIN",sb.entity().getHostId(),SearchCriteria.Op.IN);
  sb.and("guestIP",sb.entity().getGuestIpAddress(),SearchCriteria.Op.EQ);
  if (domainId != null || path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("id",domainSearch.entity().getId(),SearchCriteria.Op.EQ);
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (groupId != null && (Long)groupId == -1) {
    SearchBuilder<InstanceGroupVMMapVO> vmSearch=_groupVMMapDao.createSearchBuilder();
    vmSearch.and("instanceId",vmSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join("vmSearch",vmSearch,sb.entity().getId(),vmSearch.entity().getInstanceId(),JoinBuilder.JoinType.LEFTOUTER);
  }
 else   if (groupId != null) {
    SearchBuilder<InstanceGroupVMMapVO> groupSearch=_groupVMMapDao.createSearchBuilder();
    groupSearch.and("groupId",groupSearch.entity().getGroupId(),SearchCriteria.Op.EQ);
    sb.join("groupSearch",groupSearch,sb.entity().getId(),groupSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  if (networkId != null) {
    SearchBuilder<NicVO> nicSearch=_nicDao.createSearchBuilder();
    nicSearch.and("networkId",nicSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkVO> networkSearch=_networkDao.createSearchBuilder();
    networkSearch.and("networkId",networkSearch.entity().getId(),SearchCriteria.Op.EQ);
    nicSearch.join("networkSearch",networkSearch,nicSearch.entity().getNetworkId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    sb.join("nicSearch",nicSearch,sb.entity().getId(),nicSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  if (useVirtualNetwork != null) {
    SearchBuilder<ServiceOfferingVO> serviceSearch=_offeringDao.createSearchBuilder();
    if ((Boolean)useVirtualNetwork) {
      serviceSearch.and("guestIpType",serviceSearch.entity().getGuestIpType(),SearchCriteria.Op.EQ);
    }
 else {
      serviceSearch.and("guestIpType",serviceSearch.entity().getGuestIpType(),SearchCriteria.Op.NEQ);
    }
    sb.join("serviceSearch",serviceSearch,sb.entity().getServiceOfferingId(),serviceSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<AccountVO> accountRemoved=_accountDao.createSearchBuilder();
  accountRemoved.and("accountremoved",accountRemoved.entity().getRemoved(),SearchCriteria.Op.NULL);
  sb.join("accountRemoved",accountRemoved,sb.entity().getAccountId(),accountRemoved.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<UserVmVO> sc=sb.create();
  if (groupId != null && (Long)groupId == -1) {
    sc.setJoinParameters("vmSearch","instanceId",(Object)null);
  }
 else   if (groupId != null) {
    sc.setJoinParameters("groupSearch","groupId",groupId);
  }
  if (useVirtualNetwork != null) {
    sc.setJoinParameters("serviceSearch","guestIpType",NetworkOffering.GuestIpType.Virtual.toString());
  }
  if (keyword != null) {
    SearchCriteria<UserVmVO> ssc=_vmDao.createSearchCriteria();
    ssc.addOr("displayName",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("instanceName",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("state",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("displayName",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (accountIds != null) {
    if (accountIds.length == 1) {
      if (accountIds[0] != null) {
        sc.setParameters("accountIdEQ",accountIds[0]);
      }
    }
 else {
      sc.setParameters("accountIdIN",accountIds);
    }
  }
 else   if (domainId != null) {
    sc.setJoinParameters("domainSearch","id",domainId);
  }
  if (path != null) {
    sc.setJoinParameters("domainSearch","path",path + "%");
  }
  if (networkId != null) {
    sc.setJoinParameters("nicSearch","networkId",networkId);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (state != null) {
    if (notState != null && (Boolean)notState == true) {
      sc.setParameters("stateNEQ",state);
    }
 else {
      sc.setParameters("stateEQ",state);
    }
  }
  if ((isAdmin != null) && ((Boolean)isAdmin != true)) {
    sc.setParameters("stateNIN","Destroyed","Expunging");
  }
  if (zone != null) {
    sc.setParameters("dataCenterId",zone);
    if (state == null) {
      sc.setParameters("stateNEQ","Destroyed");
    }
  }
  if (pod != null) {
    sc.setParameters("podId",pod);
    if (state == null) {
      sc.setParameters("stateNEQ","Destroyed");
    }
  }
  if (hostId != null) {
    sc.setParameters("hostIdEQ",hostId);
  }
 else {
    if (hostName != null) {
      List<HostVO> hosts=_hostDao.findHostsLike((String)hostName);
      if (hosts != null & !hosts.isEmpty()) {
        Long[] hostIds=new Long[hosts.size()];
        for (int i=0; i < hosts.size(); i++) {
          HostVO host=hosts.get(i);
          hostIds[i]=host.getId();
        }
        sc.setParameters("hostIdIN",(Object[])hostIds);
      }
 else {
        return new ArrayList<UserVmVO>();
      }
    }
  }
  if (ipAddress != null) {
    sc.setParameters("guestIP",ipAddress);
  }
  return _vmDao.search(sc,searchFilter);
}
