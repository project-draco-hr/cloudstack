{
  long accountId=account.getId();
  long dataCenterId=dc.getId();
  long serviceOfferingId=offering.getId();
  UserVmVO vm=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creating vm for account id=" + account.getId() + ", name="+ account.getAccountName()+ "; dc="+ dc.getName()+ "; offering="+ offering.getId()+ "; diskOffering="+ ((diskOffering != null) ? diskOffering.getName() : "none")+ "; template="+ template.getId());
  }
  DomainRouterVO router=_routerDao.findBy(accountId,dataCenterId,Role.DHCP_FIREWALL_LB_PASSWD_USERDATA);
  if (router == null) {
    throw new InternalErrorException("Cannot find a router for account (" + accountId + "/"+ account.getAccountName()+ ") in "+ dataCenterId);
  }
  long guestOSId;
  if (template != null) {
    guestOSId=template.getGuestOSId();
  }
 else {
    throw new InternalErrorException("No template or ISO was specified for the VM.");
  }
  long numVolumes=-1;
  Transaction txn=Transaction.currentTxn();
  long routerId=router.getId();
  String name;
  txn.start();
  account=_accountDao.lock(accountId,true);
  if (account == null) {
    throw new InternalErrorException("Unable to lock up the account: " + accountId);
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of virtual machines for account: " + account.getAccountName() + " has been exceeded.");
    rae.setResourceType("vm");
    throw rae;
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  numVolumes=(isIso || (diskOffering == null)) ? 1 : 2;
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
  txn.commit();
  name=VirtualMachineName.getVmName(vmId,accountId,_instance);
  String diskOfferingIdentifier=(diskOffering != null) ? String.valueOf(diskOffering.getId()) : "-1";
  String eventParams="id=" + vmId + "\nvmName="+ name+ "\nsoId="+ serviceOfferingId+ "\ndoId="+ diskOfferingIdentifier+ "\ntId="+ template.getId()+ "\ndcId="+ dataCenterId;
  EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(accountId);
  event.setStartId(startEventId);
  event.setState(EventState.Completed);
  event.setType(EventTypes.EVENT_VM_CREATE);
  event.setParameters(eventParams);
  try {
    Pair<HostPodVO,Long> pod=null;
    long poolid=0;
    Set<Long> podsToAvoid=new HashSet<Long>();
    while ((pod=_agentMgr.findPod(template,offering,dc,account.getId(),podsToAvoid)) != null) {
      if (vm == null) {
        vm=new UserVmVO(vmId,name,template.getId(),guestOSId,accountId,account.getDomainId(),serviceOfferingId,null,null,router.getGuestNetmask(),null,null,null,routerId,pod.first().getId(),dataCenterId,offering.getOfferHA(),displayName,group,userData);
        if (diskOffering != null) {
          vm.setMirroredVols(diskOffering.isMirrored());
        }
        vm.setLastHostId(pod.second());
        vm=_vmDao.persist(vm);
      }
 else {
        vm.setPodId(pod.first().getId());
        _vmDao.updateIf(vm,Event.OperationRetry,null);
      }
      String ipAddressStr=acquireGuestIpAddress(dataCenterId,accountId,vm);
      if (ipAddressStr == null) {
        s_logger.warn("Failed user vm creation : no guest ip address available");
        releaseGuestIpAddress(vm);
        ResourceAllocationException rae=new ResourceAllocationException("No guest ip addresses available for " + account.getAccountName() + " (try destroying some instances)");
        rae.setResourceType("vm");
        throw rae;
      }
      poolid=_storageMgr.createUserVM(account,vm,template,dc,pod.first(),offering,diskOffering,avoids,size);
      if (poolid != 0) {
        break;
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unable to find storage host in pod " + pod.first().getName() + " (id:"+ pod.first().getId()+ ") while creating "+ vm.toString()+ ", checking other pods");
      }
      vm.setLastHostId(null);
      _vmDao.update(vm.getId(),vm);
      podsToAvoid.add(pod.first().getId());
    }
    if (pod == null) {
      throw new ResourceAllocationException("Create VM " + ((vm == null) ? vmId : vm.toString()) + " failed. There are no pods with enough CPU/memory");
    }
    if ((vm == null) || (poolid == 0)) {
      throw new ResourceAllocationException("Create VM " + ((vm == null) ? vmId : vm.toString()) + " failed due to no Storage Pool is available");
    }
    txn.start();
    if (vm != null && vm.getName() != null && vm.getDisplayName() != null) {
      if (!vm.getName().equals(vm.getDisplayName()))       event.setDescription("successfully created VM instance : " + vm.getName() + "("+ vm.getDisplayName()+ ")");
 else       event.setDescription("successfully created VM instance : " + vm.getName());
    }
 else {
      event.setDescription("successfully created VM instance :" + name);
    }
    _eventDao.persist(event);
    _vmDao.updateIf(vm,Event.OperationSucceeded,null);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("vm created " + vmId);
    }
    txn.commit();
    return _vmDao.findById(vmId);
  }
 catch (  Throwable th) {
    s_logger.error("Unable to create vm",th);
    if (vm != null) {
      _vmDao.expunge(vmId);
    }
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.user_vm);
    _accountMgr.decrementResourceCount(account.getId(),ResourceType.volume,numVolumes);
    String eventDescription="Failed to create VM: ";
    if (vm == null) {
      eventDescription+="new instance";
    }
 else {
      eventDescription+=vm.getName();
      if (!vm.getName().equals(vm.getDisplayName())) {
        eventDescription+=" (" + vm.getDisplayName() + ")";
      }
    }
    if (th instanceof ResourceAllocationException) {
      throw (ResourceAllocationException)th;
    }
    throw new CloudRuntimeException("Unable to create vm",th);
  }
}
