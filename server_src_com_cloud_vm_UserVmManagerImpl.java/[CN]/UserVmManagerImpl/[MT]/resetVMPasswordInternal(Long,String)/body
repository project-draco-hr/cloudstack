{
  Long userId=CallContext.current().getCallingUserId();
  VMInstanceVO vmInstance=_vmDao.findById(vmId);
  if (password == null || password.equals("")) {
    return false;
  }
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());
  if (template.getEnablePassword()) {
    Nic defaultNic=_networkModel.getDefaultNic(vmId);
    if (defaultNic == null) {
      s_logger.error("Unable to reset password for vm " + vmInstance + " as the instance doesn't have default nic");
      return false;
    }
    Network defaultNetwork=_networkDao.findById(defaultNic.getNetworkId());
    NicProfile defaultNicProfile=new NicProfile(defaultNic,defaultNetwork,null,null,null,_networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),_networkModel.getNetworkTag(template.getHypervisorType(),defaultNetwork));
    VirtualMachineProfile<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmInstance);
    vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword,password);
    UserDataServiceProvider element=_networkMgr.getPasswordResetProvider(defaultNetwork);
    if (element == null) {
      throw new CloudRuntimeException("Can't find network element for " + Service.UserData.getName() + " provider needed for password reset");
    }
    boolean result=element.savePassword(defaultNetwork,defaultNicProfile,vmProfile);
    if (!result) {
      s_logger.debug("Failed to reset password for the virutal machine; no need to reboot the vm");
      return false;
    }
 else {
      if (vmInstance.getState() == State.Stopped) {
        s_logger.debug("Vm " + vmInstance + " is stopped, not rebooting it as a part of password reset");
        return true;
      }
      if (rebootVirtualMachine(userId,vmId) == null) {
        s_logger.warn("Failed to reboot the vm " + vmInstance);
        return false;
      }
 else {
        s_logger.debug("Vm " + vmInstance + " is rebooted successfully as a part of password reset");
        return true;
      }
    }
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Reset password called for a vm that is not using a password enabled template");
    }
    return false;
  }
}
