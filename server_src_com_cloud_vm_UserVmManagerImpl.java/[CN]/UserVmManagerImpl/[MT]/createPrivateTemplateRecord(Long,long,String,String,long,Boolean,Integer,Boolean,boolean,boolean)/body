{
  VMTemplateVO privateTemplate=null;
  UserVO user=_userDao.findById(userId);
  if (user == null) {
    throw new InvalidParameterValueException("User " + userId + " does not exist");
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException("Volume with ID: " + volumeId + " does not exist");
  }
  HypervisorType hyperType=_volsDao.getHypervisorType(volumeId);
  int bitsValue=((bits == null) ? 64 : bits.intValue());
  boolean requiresHvmValue=((requiresHvm == null) ? true : requiresHvm.booleanValue());
  boolean passwordEnabledValue=((passwordEnabled == null) ? false : passwordEnabled.booleanValue());
  if (Volume.VolumeType.ROOT.equals(volume.getVolumeType())) {
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      UserVm vm=_vmDao.findById(instanceId);
      if (vm != null) {
        VMTemplateVO origTemplate=_templateDao.findById(vm.getTemplateId());
        if (!ImageFormat.ISO.equals(origTemplate.getFormat()) && !ImageFormat.RAW.equals(origTemplate.getFormat())) {
          bitsValue=origTemplate.getBits();
          requiresHvmValue=origTemplate.requiresHvm();
        }
      }
    }
  }
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  if (guestOS == null) {
    throw new InvalidParameterValueException("GuestOS with ID: " + guestOSId + " does not exist.");
  }
  String uniqueName=Long.valueOf((userId == null) ? 1 : userId).toString() + Long.valueOf(volumeId).toString() + UUID.nameUUIDFromBytes(name.getBytes()).toString();
  Long nextTemplateId=_templateDao.getNextInSequence(Long.class,"id");
  privateTemplate=new VMTemplateVO(nextTemplateId,uniqueName,name,ImageFormat.RAW,isPublic,featured,null,null,null,requiresHvmValue,bitsValue,volume.getAccountId(),null,description,passwordEnabledValue,guestOS.getId(),true,hyperType);
  return _templateDao.persist(privateTemplate);
}
