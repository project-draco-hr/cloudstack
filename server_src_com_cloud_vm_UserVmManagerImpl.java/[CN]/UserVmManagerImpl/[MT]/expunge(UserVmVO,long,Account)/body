{
  UserContext ctx=UserContext.current();
  ctx.setAccountId(vm.getAccountId());
  try {
    if (!_itMgr.advanceExpunge(vm,_accountMgr.getSystemUser(),caller)) {
      s_logger.info("Did not expunge " + vm);
      return false;
    }
    _networkGroupMgr.removeInstanceFromGroups(vm.getId());
    removeInstanceFromInstanceGroup(vm.getId());
    long vmId=vm.getId();
    if (_rulesMgr.revokePortForwardingRulesForVm(vmId)) {
      s_logger.debug("Port forwarding rules are removed successfully as a part of vm id=" + vmId + " expunge");
    }
 else {
      s_logger.warn("Fail to remove port forwarding rules as a part of vm id=" + vmId + " expunge");
    }
    if (_rulesMgr.revokeStaticNatRulesForVm(vmId)) {
      s_logger.debug("Port forwarding rules are removed successfully as a part of vm id=" + vmId + " expunge");
    }
 else {
      s_logger.warn("Fail to remove port forwarding rules as a part of vm id=" + vmId + " expunge");
    }
    if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
      s_logger.debug("Removed vm id=" + vmId + " from all load balancers as a part of expunge process");
    }
 else {
      s_logger.warn("Fail to remove vm id=" + vmId + " from load balancers as a part of expunge process");
    }
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedVmId(vmId);
    if (ips != null) {
      for (      IPAddressVO ip : ips) {
        ip.setOneToOneNat(false);
        ip.setAssociatedWithVmId(null);
        _ipAddressDao.update(ip.getId(),ip);
        s_logger.debug("Disabled 1-1 nat for ip address " + ip + " as a part of vm "+ vm+ " expunge");
      }
    }
    _itMgr.remove(vm,_accountMgr.getSystemUser(),caller);
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn("Unable to expunging " + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn("Operation time out on expunging " + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn("Concurrent operations on expunging " + vm,e);
    return false;
  }
}
