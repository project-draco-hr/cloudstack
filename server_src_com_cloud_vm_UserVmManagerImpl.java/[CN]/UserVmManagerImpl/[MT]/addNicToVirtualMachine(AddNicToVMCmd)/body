{
  Long vmId=cmd.getVmId();
  Long networkId=cmd.getNetworkId();
  String ipAddress=cmd.getIpAddress();
  Account caller=CallContext.current().getCallingAccount();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  if (_vmSnapshotDao.findByVm(vmId).size() > 0) {
    throw new InvalidParameterValueException("NIC cannot be added to VM with VM Snapshots");
  }
  NetworkVO network=_networkDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("unable to find a network with id " + networkId);
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!(network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) && !(network.getAclType() == ACLType.Account && network.getAccountId() == vmInstance.getAccountId())) {
      throw new InvalidParameterValueException("only shared network or isolated network with the same account_id can be added to vmId: " + vmId);
    }
  }
  List<NicVO> allNics=_nicDao.listByVmId(vmInstance.getId());
  for (  NicVO nic : allNics) {
    if (nic.getNetworkId() == network.getId())     throw new CloudRuntimeException("A NIC already exists for VM:" + vmInstance.getInstanceName() + " in network: "+ network.getUuid());
  }
  NicProfile profile=new NicProfile(null,null);
  if (ipAddress != null) {
    profile=new NicProfile(ipAddress,null);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException("Zone " + vmInstance.getDataCenterId() + ", has a NetworkType of Basic. Can't add a new NIC to a VM on a Basic Network");
  }
  _accountMgr.checkAccess(caller,AccessType.UseEntry,false,network);
  if (network.getDataCenterId() != vmInstance.getDataCenterId()) {
    throw new CloudRuntimeException(vmInstance + " is in zone:" + vmInstance.getDataCenterId()+ " but "+ network+ " is in zone:"+ network.getDataCenterId());
  }
  List<String> hostNames=_vmInstanceDao.listDistinctHostNames(network.getId());
  if (hostNames.contains(vmInstance.getHostName())) {
    for (    String hostName : hostNames) {
      VMInstanceVO vm=_vmInstanceDao.findVMByHostName(hostName);
      if (_networkModel.getNicInNetwork(vm.getId(),network.getId()) != null && vm.getHostName().equals(vmInstance.getHostName())) {
        throw new CloudRuntimeException(network + " already has a vm with host name: " + vmInstance.getHostName());
      }
    }
  }
  NicProfile guestNic=null;
  boolean cleanUp=true;
  try {
    guestNic=_itMgr.addVmToNetwork(vmInstance,network,profile);
    cleanUp=false;
  }
 catch (  ResourceUnavailableException e) {
    throw new CloudRuntimeException("Unable to add NIC to " + vmInstance + ": "+ e);
  }
catch (  InsufficientCapacityException e) {
    throw new CloudRuntimeException("Insufficient capacity when adding NIC to " + vmInstance + ": "+ e);
  }
catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException("Concurrent operations on adding NIC to " + vmInstance + ": "+ e);
  }
 finally {
    if (cleanUp) {
      try {
        _itMgr.removeVmFromNetwork(vmInstance,network,null);
      }
 catch (      ResourceUnavailableException e) {
        throw new CloudRuntimeException("Error while cleaning up NIC " + e);
      }
    }
  }
  if (guestNic == null) {
    throw new CloudRuntimeException("Unable to add NIC to " + vmInstance);
  }
  CallContext.current().putContextParameter(Nic.class.getName(),guestNic.getUuid());
  s_logger.debug("Successful addition of " + network + " from "+ vmInstance);
  return _vmDao.findById(vmInstance.getId());
}
