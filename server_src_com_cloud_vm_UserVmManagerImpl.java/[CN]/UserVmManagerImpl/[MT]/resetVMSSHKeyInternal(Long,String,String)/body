{
  Long userId=CallContext.current().getCallingUserId();
  VMInstanceVO vmInstance=_vmDao.findById(vmId);
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());
  Nic defaultNic=_networkModel.getDefaultNic(vmId);
  if (defaultNic == null) {
    s_logger.error("Unable to reset SSH Key for vm " + vmInstance + " as the instance doesn't have default nic");
    return false;
  }
  Network defaultNetwork=_networkDao.findById(defaultNic.getNetworkId());
  NicProfile defaultNicProfile=new NicProfile(defaultNic,defaultNetwork,null,null,null,_networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),_networkModel.getNetworkTag(template.getHypervisorType(),defaultNetwork));
  VirtualMachineProfile vmProfile=new VirtualMachineProfileImpl(vmInstance);
  if (template != null && template.getEnablePassword()) {
    vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword,password);
  }
  UserDataServiceProvider element=_networkMgr.getSSHKeyResetProvider(defaultNetwork);
  if (element == null) {
    throw new CloudRuntimeException("Can't find network element for " + Service.UserData.getName() + " provider needed for SSH Key reset");
  }
  boolean result=element.saveSSHKey(defaultNetwork,defaultNicProfile,vmProfile,SSHPublicKey);
  if (!result) {
    s_logger.debug("Failed to reset SSH Key for the virutal machine; no need to reboot the vm");
    return false;
  }
 else {
    if (vmInstance.getState() == State.Stopped) {
      s_logger.debug("Vm " + vmInstance + " is stopped, not rebooting it as a part of SSH Key reset");
      return true;
    }
    if (rebootVirtualMachine(userId,vmId) == null) {
      s_logger.warn("Failed to reboot the vm " + vmInstance);
      return false;
    }
 else {
      s_logger.debug("Vm " + vmInstance + " is rebooted successfully as a part of SSH Key reset");
      return true;
    }
  }
}
