{
  List<UserVmVO> vms=_vmDao.findDestroyedVms(new Date(System.currentTimeMillis() - ((long)_expungeDelay << 10)));
  s_logger.info("Found " + vms.size() + " vms to expunge.");
  for (  UserVmVO vm : vms) {
    long vmId=vm.getId();
    releaseGuestIpAddress(vm);
    vm.setGuestNetmask(null);
    vm.setGuestMacAddress(null);
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,null)) {
      s_logger.info("vm " + vmId + " is skipped because it is no longer in Destroyed or Error state");
      continue;
    }
    List<VolumeVO> vols=null;
    try {
      vols=_volsDao.findByInstanceIdDestroyed(vmId);
      _storageMgr.destroy(vm,vols);
      if (_rulesMgr.revokePortForwardingRule(vmId)) {
        s_logger.debug("Port forwarding rules are removed successfully as a part of vm id=" + vmId + " expunge");
      }
 else {
        s_logger.warn("Fail to remove port forwarding rules as a part of vm id=" + vmId + " expunge");
      }
      if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
        s_logger.debug("LB rules are removed successfully as a part of vm id=" + vmId + " expunge");
      }
 else {
        s_logger.warn("Fail to remove lb rules as a part of vm id=" + vmId + " expunge");
      }
      _vmDao.remove(vm.getId());
      _networkGroupMgr.removeInstanceFromGroups(vm.getId());
      removeInstanceFromGroup(vm.getId());
      s_logger.debug("vm is destroyed");
    }
 catch (    Exception e) {
      s_logger.info("VM " + vmId + " expunge failed due to "+ e.getMessage());
    }
  }
  List<VolumeVO> destroyedVolumes=_volsDao.findByDetachedDestroyed();
  s_logger.info("Found " + destroyedVolumes.size() + " detached volumes to expunge.");
  _storageMgr.destroy(null,destroyedVolumes);
}
