{
  List<UserVmVO> vms=_vmDao.findDestroyedVms(new Date(System.currentTimeMillis() - ((long)_expungeDelay << 10)));
  s_logger.info("Found " + vms.size() + " vms to expunge.");
  for (  UserVmVO vm : vms) {
    boolean deleteRules=true;
    String privateIpAddress=vm.getPrivateIpAddress();
    long vmId=vm.getId();
    releaseGuestIpAddress(vm);
    vm.setGuestNetmask(null);
    vm.setGuestMacAddress(null);
    if (!_vmDao.updateIf(vm,Event.ExpungeOperation,null)) {
      s_logger.info("vm " + vmId + " is skipped because it is no longer in Destroyed state");
      continue;
    }
    if (VirtualMachineName.isValidRouterName(vm.getHostName()) && !vm.getState().equals(State.Running)) {
      deleteRules=false;
    }
    if (deleteRules) {
      List<FirewallRuleVO> forwardingRules=null;
      forwardingRules=_rulesDao.listByPrivateIp(privateIpAddress);
      for (      FirewallRuleVO rule : forwardingRules) {
        try {
          IPAddressVO publicIp=_ipAddressDao.findById(rule.getPublicIpAddress());
          if (publicIp != null) {
            if ((publicIp.getAccountId().longValue() == vm.getAccountId())) {
              _networkMgr.deletePortForwardingRule(rule.getId(),true);
              if (s_logger.isDebugEnabled())               s_logger.debug("Rule " + rule.getId() + " for vm:"+ vm.getHostName()+ " is deleted successfully during expunge operation");
            }
          }
        }
 catch (        Exception e) {
          s_logger.warn("Failed to delete rule:" + rule.getId() + " for vm:"+ vm.getHostName());
        }
      }
    }
    List<VolumeVO> vols=null;
    try {
      vols=_volsDao.findByInstanceIdDestroyed(vmId);
      _storageMgr.destroy(vm,vols);
      _vmDao.remove(vm.getId());
      _networkGroupMgr.removeInstanceFromGroups(vm.getId());
      removeInstanceFromGroup(vm.getId());
      s_logger.debug("vm is destroyed");
    }
 catch (    Exception e) {
      s_logger.info("VM " + vmId + " expunge failed due to "+ e.getMessage());
    }
  }
  List<VolumeVO> destroyedVolumes=_volsDao.findByDetachedDestroyed();
  s_logger.info("Found " + destroyedVolumes.size() + " detached volumes to expunge.");
  _storageMgr.destroy(null,destroyedVolumes);
}
