{
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException("Unable to find zone: " + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException("Unable to find the domain " + dc.getDomainId() + " for the zone: "+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find service offering: " + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to use template " + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException("Installing from ISO requires an ISO that is bootable: " + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException("Installing from ISO requires a disk offering to be specified for the root disk.");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password="saved_password";
  }
  if (password == null || password.equals("") || (!validPassword(password))) {
    throw new InvalidParameterValueException("A valid password for this virtual machine was not provided.");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain="v" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException("User data is too short");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug("Allocating in the DB for vm");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and("broadcastDomainType",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and("dataCenterId",sb.entity().getName(),SearchCriteria.Op.EQ);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters("broadcastDomainType",BroadcastDomainType.Native);
    sc.setParameters("dataCenterId",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && networks.isEmpty()) {
      throw new InvalidParameterValueException("Unable to find a network to start a vm");
    }
 else {
      networkList=new ArrayList<Long>();
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException("NetworkIds have to be specified");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException("Unable to create a vm using network with id " + networkId + ", permission denied");
        }
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,"id");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException("Vm instance with name \"" + hostName + "\" already exists in zone "+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException("Invalid name. Vm name can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'), must be between 1 and 63 characters long, and can't start or end with \"-\"");
    }
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Successfully allocated DB entry for " + vm);
  }
  return vm;
}
