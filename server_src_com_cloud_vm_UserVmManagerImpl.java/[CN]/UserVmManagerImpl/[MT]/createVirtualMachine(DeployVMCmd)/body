{
  Account caller=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  String group=cmd.getGroup();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException("Unable to find zone: " + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException("Unable to find the domain " + dc.getDomainId() + " for the zone: "+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  if (_accountMgr.resourceLimitExceeded(owner,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of virtual machines for account: " + owner.getAccountName() + " has been exceeded.");
    rae.setResourceType("vm");
    throw rae;
  }
  List<StoragePoolVO> availablePools=_storagePoolDao.listPoolsByStatus(StoragePoolStatus.Up);
  if (availablePools == null || availablePools.size() < 1) {
    throw new StorageUnavailableException("There are no available pools in the UP state for vm deployment",-1);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find service offering: " + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to use template " + cmd.getTemplateId());
  }
  if (template.getTemplateType().equals(TemplateType.SYSTEM)) {
    throw new InvalidParameterValueException("Unable to use system template " + cmd.getTemplateId() + " to deploy a user vm");
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException("Installing from ISO requires an ISO that is bootable: " + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException("Installing from ISO requires a disk offering to be specified for the root disk.");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException("User data is too short");
    }
  }
  String sshPublicKey=null;
  if (cmd.getSSHKeyPairName() != null && !cmd.getSSHKeyPairName().equals("")) {
    Account account=UserContext.current().getCaller();
    SSHKeyPair pair=_sshKeyPairDao.findByName(account.getAccountId(),account.getDomainId(),cmd.getSSHKeyPairName());
    if (pair == null) {
      throw new InvalidParameterValueException("A key pair with name '" + cmd.getSSHKeyPairName() + "' was not found.");
    }
    sshPublicKey=pair.getPublicKey();
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug("Allocating in the DB for vm");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(dc.getId(),TrafficType.Guest);
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException("Unable to find a default network to start a vm");
    }
 else {
      networkList=new ArrayList<Long>();
      networkList.add(defaultNetwork.getId());
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException("NetworkIds have to be specified");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException("Unable to create a vm using network with id " + networkId + ", permission denied");
        }
      }
      if (network.isDefault()) {
        defaultNetworkNumber++;
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  if (defaultNetworkNumber == 0) {
    throw new InvalidParameterValueException("At least 1 default network has to be specified for the vm");
  }
 else   if (defaultNetworkNumber > 1) {
    throw new InvalidParameterValueException("Only 1 default network per vm is supported");
  }
  long id=_vmDao.getNextInSequence(Long.class,"id");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException("Invalid name. Vm name can contain ASCII letters 'a' through 'z', the digits '0' through '9', " + "and the hyphen ('-'), must be between 1 and 63 characters long, and can't start or end with \"-\" and can't start with digit");
    }
  }
  HypervisorType hypervisorType=null;
  if (template == null || template.getHypervisorType() == null || template.getHypervisorType() == HypervisorType.None) {
    hypervisorType=cmd.getHypervisor();
  }
 else {
    hypervisorType=template.getHypervisorType();
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (sshPublicKey != null) {
    vm.setDetail("SSH.PublicKey",sshPublicKey);
  }
  if (isIso) {
    vm.setIsoId(template.getId());
  }
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  _vmDao.saveDetails(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Successfully allocated DB entry for " + vm);
  }
  UserContext.current().setEventDetails("Vm Id: " + vm.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  try {
    if (group != null) {
      boolean addToGroup=addInstanceToGroup(Long.valueOf(id),group);
      if (!addToGroup) {
        throw new CloudRuntimeException("Unable to assign Vm to the group " + group);
      }
    }
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException("Unable to assign Vm to the group " + group);
  }
  return vm;
}
