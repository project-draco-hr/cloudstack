{
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account userAccount=null;
  Long accountId=null;
  List<Long> networkList=cmd.getNetworkIds();
  if ((caller == null) || isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Failed to deploy VM, invalid domain id (" + domainId + ") given.");
      }
      if (accountName != null) {
        userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((caller != null) ? caller.getId() : null);
    }
  }
 else {
    accountId=caller.getId();
  }
  if (accountId == null) {
    throw new InvalidParameterValueException("No valid account specified for deploying a virtual machine.");
  }
  AccountVO owner=_accountDao.findById(cmd.getEntityOwnerId());
  if (owner == null || owner.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find account: " + cmd.getEntityOwnerId());
  }
  Domain domain=_domainDao.findById(owner.getDomainId());
  if (domain == null || domain.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find domain: " + cmd.getDomainId());
  }
  _accountMgr.checkAccess(caller,domain);
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException("Unable to find zone: " + cmd.getZoneId());
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to find service offering: " + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException("Unable to use template " + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException("Installing from ISO requires an ISO that is bootable: " + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException("Installing from ISO requires a disk offering to be specified for the root disk.");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException("Unable to find disk offering " + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException("Disk offering " + diskOffering + " requires size parameter.");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password="saved_password";
  }
  if (password == null || password.equals("") || (!validPassword(password))) {
    throw new InvalidParameterValueException("A valid password for this virtual machine was not provided.");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain="v" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException("User data is too long");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException("User data is too short");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug("Allocating in the DB for vm");
  if (dc.getNetworkType() == DataCenterNetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and("broadcastDomainType",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and("dataCenterId",sb.entity().getName(),SearchCriteria.Op.LIKE);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters("broadcastDomainType",BroadcastDomainType.Native);
    sc.setParameters("dataCenterId",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && !networks.isEmpty()) {
      throw new InvalidParameterValueException("Unable to find a network to start a vm");
    }
 else {
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException("NetworkIds have to be specified");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException("Unable to create a vm using network with id " + networkId + ", permission denied");
        }
      }
 else       if (network.getTrafficType() != TrafficType.Guest) {
        throw new InvalidParameterValueException("Unable to create a vm using network which traffic type is " + network.getTrafficType() + ". "+ "Only Guest traffic type is acceptes");
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,"id");
  UserVmVO vm=new UserVmVO(id,VirtualMachineName.getVmName(id,owner.getId(),_instance),cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domain.getId(),owner.getId(),offering.getId(),userData);
  try {
    if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,owner) == null) {
      return null;
    }
  }
  finally {
    updateVmStateForFailedVmCreation(id);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Successfully allocated DB entry for " + vm);
  }
  return vm;
}
