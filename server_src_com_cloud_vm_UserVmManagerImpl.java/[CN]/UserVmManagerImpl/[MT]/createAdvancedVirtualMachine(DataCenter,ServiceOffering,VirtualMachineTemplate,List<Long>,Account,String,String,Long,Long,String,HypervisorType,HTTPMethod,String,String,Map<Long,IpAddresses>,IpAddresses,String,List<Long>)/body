{
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,null,true,owner);
  List<HypervisorType> vpcSupportedHTypes=_vpcMgr.getSupportedVpcHypervisors();
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (requiredOfferings.size() < 1) {
      throw new InvalidParameterValueException("Unable to find network offering with availability=" + Availability.Required + " to automatically create the network as a part of vm creation");
    }
    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
      List<? extends Network> virtualNetworks=_networkModel.listNetworksForAccount(owner.getId(),zone.getId(),Network.GuestType.Isolated);
      if (virtualNetworks.isEmpty()) {
        long physicalNetworkId=_networkModel.findPhysicalNetworkId(zone.getId(),requiredOfferings.get(0).getTags(),requiredOfferings.get(0).getTrafficType());
        PhysicalNetwork physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
        if (physicalNetwork == null) {
          throw new InvalidParameterValueException("Unable to find physical network with id: " + physicalNetworkId + " and tag: "+ requiredOfferings.get(0).getTags());
        }
        s_logger.debug("Creating network for account " + owner + " from the network offering id="+ requiredOfferings.get(0).getId()+ " as a part of deployVM process");
        Network newNetwork=_networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",null,null,null,null,owner,null,physicalNetwork,zone.getId(),ACLType.Account,null,null,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException("More than 1 default Isolated networks are found for account " + owner + "; please specify networkIds");
      }
 else {
        defaultNetwork=_networkDao.findById(virtualNetworks.get(0).getId());
      }
    }
 else {
      throw new InvalidParameterValueException("Required network offering id=" + requiredOfferings.get(0).getId() + " is not in "+ NetworkOffering.State.Enabled);
    }
    networkList.add(defaultNetwork);
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException("Unable to find network by id " + networkIdList.get(0).longValue());
      }
      if (network.getVpcId() != null) {
        if (template.getFormat() != ImageFormat.ISO && !vpcSupportedHTypes.contains(template.getHypervisorType())) {
          throw new InvalidParameterValueException("Can't create vm from template with hypervisor " + template.getHypervisorType() + " in vpc network "+ network);
        }
        if (!vpcSupportedHTypes.contains(hypervisor)) {
          throw new InvalidParameterValueException("Can't create vm of hypervisor type " + hypervisor + " in vpc network");
        }
      }
      _networkModel.checkNetworkPermissions(owner,network);
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException("Network id=" + networkId + " is system only and can't be used for vm deployment");
      }
      networkList.add(network);
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,httpmethod,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIps,keyboard,affinityGroupIdList);
}
