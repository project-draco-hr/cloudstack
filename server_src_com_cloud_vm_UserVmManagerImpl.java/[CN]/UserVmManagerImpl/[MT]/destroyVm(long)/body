{
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find a virtual machine with specified vmId");
    String tablename=AnnotationHelper.getTableName(vm);
    if (tablename != null) {
      ex.addProxyObject(tablename,vmId,"vmId");
    }
 else {
      s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
    }
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace("Vm id=" + vmId + " is already destroyed");
    return vm;
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  User userCaller=_userDao.findById(userId);
  boolean status;
  State vmState=vm.getState();
  try {
    status=_itMgr.destroy(vm,userCaller,caller);
  }
 catch (  OperationTimedoutException e) {
    CloudRuntimeException ex=new CloudRuntimeException("Unable to destroy with specified vmId",e);
    String tablename=AnnotationHelper.getTableName(vm);
    if (tablename != null) {
      ex.addProxyObject(tablename,vmId,"vmId");
    }
 else {
      s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
    }
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
        _usageEventDao.persist(usageEvent);
      }
    }
    if (vmState != State.Error) {
      _resourceLimitMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException("Failed to destroy vm with specified vmId");
    String tablename=AnnotationHelper.getTableName(vm);
    if (tablename != null) {
      ex.addProxyObject(tablename,vmId,"vmId");
    }
 else {
      s_logger.info("\nCould not retrieve table name (annotation) from " + tablename + " VO proxy object\n");
    }
    throw ex;
  }
}
