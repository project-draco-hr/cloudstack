{
  Account caller=CallContext.current().getCallingAccount();
  Long userId=CallContext.current().getCallingUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find a virtual machine with specified vmId");
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace("Vm id=" + vmId + " is already destroyed");
    return vm;
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  _userDao.findById(userId);
  boolean status;
  State vmState=vm.getState();
  try {
    VirtualMachineEntity vmEntity=_orchSrvc.getVirtualMachine(vm.getUuid());
    status=vmEntity.destroy(Long.toString(userId));
  }
 catch (  CloudException e) {
    CloudRuntimeException ex=new CloudRuntimeException("Unable to destroy with specified vmId",e);
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid());
      }
    }
    if (vmState != State.Error) {
      ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getId(),vm.getServiceOfferingId());
      resourceCountDecrement(vm.getAccountId(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException("Failed to destroy vm with specified vmId");
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
}
