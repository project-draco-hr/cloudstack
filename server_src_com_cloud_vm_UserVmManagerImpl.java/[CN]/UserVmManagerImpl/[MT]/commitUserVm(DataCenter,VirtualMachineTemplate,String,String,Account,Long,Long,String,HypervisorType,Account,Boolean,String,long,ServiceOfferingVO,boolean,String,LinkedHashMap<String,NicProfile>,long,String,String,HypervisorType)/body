{
  return Transaction.execute(new TransactionCallbackWithException<UserVmVO,InsufficientCapacityException>(){
    @Override public UserVmVO doInTransaction(    TransactionStatus status) throws InsufficientCapacityException {
      UserVmVO vm=new UserVmVO(id,instanceName,displayName,template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),offering.getLimitCpuUse(),owner.getDomainId(),owner.getId(),offering.getId(),userData,hostName,diskOfferingId);
      vm.setUuid(uuidName);
      vm.setDynamicallyScalable(template.isDynamicallyScalable());
      if (sshPublicKey != null) {
        vm.setDetail("SSH.PublicKey",sshPublicKey);
      }
      if (keyboard != null && !keyboard.isEmpty())       vm.setDetail(VmDetailConstants.KEYBOARD,keyboard);
      if (isIso) {
        vm.setIsoId(template.getId());
      }
      if (isDisplayVmEnabled != null) {
        if (!_accountMgr.isRootAdmin(caller.getId())) {
          throw new PermissionDeniedException("Cannot update parameter displayvm, only admin permitted ");
        }
        vm.setDisplayVm(isDisplayVmEnabled);
      }
 else {
        vm.setDisplayVm(true);
      }
      if (hypervisorType.equals(HypervisorType.VMware)) {
        UserVmCloneType cloneType=UserVmCloneType.linked;
        String value=_configDao.getValue(Config.VmwareCreateFullClone.key());
        if (value != null) {
          if (Boolean.parseBoolean(value) == true)           cloneType=UserVmCloneType.full;
        }
        UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(id,cloneType.toString());
        _vmCloneSettingDao.persist(vmCloneSettingVO);
      }
      long guestOSId=template.getGuestOSId();
      GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
      long guestOSCategoryId=guestOS.getCategoryId();
      GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
      if (hypervisorType.equals(HypervisorType.VMware)) {
        if (guestOS.getDisplayName().toLowerCase().contains("apple mac os")) {
          vm.setDetail("smc.present","TRUE");
          vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER,"scsi");
          vm.setDetail("firmware","efi");
          s_logger.info("guestOS is OSX : overwrite root disk controller to scsi, use smc and efi");
        }
      }
      Map<String,String> details=template.getDetails();
      if (details != null && !details.isEmpty()) {
        vm.details.putAll(details);
      }
      _vmDao.persist(vm);
      _vmDao.saveDetails(vm);
      s_logger.debug("Allocating in the DB for vm");
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
      List<String> computeTags=new ArrayList<String>();
      computeTags.add(offering.getHostTag());
      List<String> rootDiskTags=new ArrayList<String>();
      rootDiskTags.add(offering.getTags());
      if (isIso) {
        VirtualMachineEntity vmEntity=_orchSrvc.createVirtualMachineFromScratch(vm.getUuid(),Long.toString(owner.getAccountId()),vm.getIsoId().toString(),hostName,displayName,hypervisor.name(),guestOSCategory.getName(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
      }
 else {
        VirtualMachineEntity vmEntity=_orchSrvc.createVirtualMachine(vm.getUuid(),Long.toString(owner.getAccountId()),Long.toString(template.getId()),hostName,displayName,hypervisor.name(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Successfully allocated DB entry for " + vm);
      }
      CallContext.current().setEventDetails("Vm Id: " + vm.getId());
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid());
      resourceCountIncrement(accountId,new Long(offering.getCpu()),new Long(offering.getRamSize()));
      return vm;
    }
  }
);
}
