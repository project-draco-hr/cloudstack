{
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,null,true,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException("No network with security enabled is found in zone id=" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException("Security group feature is not supported for vmWare hypervisor");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException("Only support one network per VM if security group enabled");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException("Unable to find network by id " + networkIdList.get(0).longValue());
    }
    if (!_networkMgr.isSecurityGroupSupportedInNetwork(network)) {
      throw new InvalidParameterValueException("Network is not security group enabled: " + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException("Unable to find network by id " + networkIdList.get(0).longValue());
      }
      boolean isSecurityGroupEnabled=_networkMgr.isSecurityGroupSupportedInNetwork(network);
      if (isSecurityGroupEnabled && networkIdList.size() > 1) {
        throw new InvalidParameterValueException("Can't create a vm with multiple networks one of which is Security Group enabled");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != Network.GuestType.Shared || (network.getGuestType() == Network.GuestType.Shared && !isSecurityGroupEnabled)) {
        throw new InvalidParameterValueException("Can specify only Direct Guest Account specific networks when deploy vm in Security Group enabled zone");
      }
      if (network.getGuestType() != Network.GuestType.Shared) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException("Unable to create a vm using network with id " + network.getId() + ", permission denied");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare && _networkMgr.canAddDefaultSecurityGroup()) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Couldn't find default security group for the account " + owner + " so creating a new one");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}
