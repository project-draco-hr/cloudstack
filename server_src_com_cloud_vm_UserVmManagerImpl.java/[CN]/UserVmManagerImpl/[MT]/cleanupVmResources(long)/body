{
  boolean success=true;
  _securityGroupMgr.removeInstanceFromGroups(vmId);
  removeInstanceFromInstanceGroup(vmId);
  if (_firewallMgr.revokeFirewallRulesForVm(vmId)) {
    s_logger.debug("Firewall rules are removed successfully as a part of vm id=" + vmId + " expunge");
  }
 else {
    success=false;
    s_logger.warn("Fail to remove firewall rules as a part of vm id=" + vmId + " expunge");
  }
  if (_rulesMgr.revokePortForwardingRulesForVm(vmId)) {
    s_logger.debug("Port forwarding rules are removed successfully as a part of vm id=" + vmId + " expunge");
  }
 else {
    success=false;
    s_logger.warn("Fail to remove port forwarding rules as a part of vm id=" + vmId + " expunge");
  }
  if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
    s_logger.debug("Removed vm id=" + vmId + " from all load balancers as a part of expunge process");
  }
 else {
    success=false;
    s_logger.warn("Fail to remove vm id=" + vmId + " from load balancers as a part of expunge process");
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  try {
    if (ip != null) {
      if (_rulesMgr.disableStaticNat(ip.getId())) {
        s_logger.debug("Disabled 1-1 nat for ip address " + ip + " as a part of vm id="+ vmId+ " expunge");
      }
 else {
        s_logger.warn("Failed to disable static nat for ip address " + ip + " as a part of vm id="+ vmId+ " expunge");
        success=false;
      }
      Long networkId=ip.getAssociatedWithNetworkId();
      if (networkId != null) {
        Network guestNetwork=_networkMgr.getNetwork(networkId);
        NetworkOffering offering=_configMgr.getNetworkOffering(guestNetwork.getNetworkOfferingId());
        if (offering.getElasticIp()) {
          UserContext ctx=UserContext.current();
          if (!_networkMgr.releasePublicIpAddress(ip.getId(),ctx.getCallerUserId(),ctx.getCaller())) {
            s_logger.warn("Unable to release elastic ip address id=" + ip.getId() + " as a part of vm id="+ vmId+ " cleanup");
            success=false;
          }
 else {
            s_logger.warn("Successfully released elastic ip address id=" + ip.getId() + " as a part of vm id="+ vmId+ " cleanup");
          }
        }
      }
    }
  }
 catch (  ResourceUnavailableException e) {
    success=false;
    s_logger.warn("Failed to disable static nat for ip address " + ip + " as a part of vm id="+ vmId+ " expunge because resource is unavailable",e);
  }
  return success;
}
