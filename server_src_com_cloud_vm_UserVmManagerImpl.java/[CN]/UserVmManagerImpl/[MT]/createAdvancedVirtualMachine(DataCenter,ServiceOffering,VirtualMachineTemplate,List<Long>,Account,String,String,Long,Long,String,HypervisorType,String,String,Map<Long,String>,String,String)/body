{
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,null,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndType(false,TrafficType.Guest,Network.GuestType.Isolated);
    PhysicalNetwork physicalNetwork=_networkMgr.translateZoneIdToPhysicalNetwork(zone.getId());
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),Network.GuestType.Isolated,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug("Creating default Virtual network for account " + owner + " as a part of deployVM process");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",null,null,null,null,null,owner,false,null,null,false,physicalNetwork);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException("More than 1 default Virtaul networks are found for account " + owner + "; please specify networkIds");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug("Creating default Virtual network for account " + owner + " as a part of deployVM process");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + "-network",owner.getAccountName() + "-network",null,null,null,null,null,owner,false,null,null,false,physicalNetwork);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException("Unable to find default networks for account " + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException("More than 1 default network is found for account " + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException("Unable to find default network; please specify networkOfferingIds");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException("Unable to find network by id " + networkIdList.get(0).longValue());
      }
      if (network.getGuestType() != Network.GuestType.Shared) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException("Unable to create a vm using network with id " + network.getId() + ", permission denied");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException("Shared network id=" + networkId + " is not available in domain id="+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException("Network id=" + network.getId() + " can't be used; corresponding network offering is "+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException("Network id=" + networkId + " is system only and can't be used for vm deployment");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException("Network created from the network offering id=" + requiredOfferingId + " is required; change network offering availability to be Optional to relax this requirement");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}
