{
  Long userId=caller.getId();
  Account owner=_accountDao.findById(vm.getAccountId());
  _userDao.findById(userId);
  long vmId=vm.getId();
  boolean needRestart=false;
  if (owner == null) {
    throw new InvalidParameterValueException("The owner of " + vm + " does not exist: "+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException("The owner of " + vm + " is disabled: "+ vm.getAccountId());
  }
  if (vm.getState() != VirtualMachine.State.Running && vm.getState() != VirtualMachine.State.Stopped) {
    throw new CloudRuntimeException("Vm " + vm.getUuid() + " currently in "+ vm.getState()+ " state, restore vm can only execute when VM in Running or Stopped");
  }
  if (vm.getState() == VirtualMachine.State.Running) {
    needRestart=true;
  }
  List<VolumeVO> rootVols=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVols.isEmpty()) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Can not find root volume for VM " + vm.getUuid());
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
  VolumeVO root=rootVols.get(0);
  Long templateId=root.getTemplateId();
  boolean isISO=false;
  if (templateId == null) {
    isISO=true;
    templateId=vm.getIsoId();
  }
  VMTemplateVO template=null;
  if (newTemplateId != null) {
    template=_templateDao.findById(newTemplateId);
    _accountMgr.checkAccess(caller,null,true,template);
    if (isISO) {
      if (!template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException("Invalid ISO id provided to restore the VM ");
      }
    }
 else {
      if (template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException("Invalid template id provided to restore the VM ");
      }
    }
  }
 else {
    if (isISO && templateId == null) {
      throw new CloudRuntimeException("Cannot restore the VM since there is no ISO attached to VM");
    }
    template=_templateDao.findById(templateId);
    if (template == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Cannot find template/ISO for specified volumeid and vmId");
      ex.addProxyObject(vm.getUuid(),"vmId");
      ex.addProxyObject(root.getUuid(),"volumeId");
      throw ex;
    }
  }
  if (needRestart) {
    try {
      _itMgr.stop(vm.getUuid());
    }
 catch (    ResourceUnavailableException e) {
      s_logger.debug("Stop vm " + vm.getUuid() + " failed",e);
      CloudRuntimeException ex=new CloudRuntimeException("Stop vm failed for specified vmId");
      ex.addProxyObject(vm.getUuid(),"vmId");
      throw ex;
    }
  }
  Volume newVol=null;
  if (newTemplateId != null) {
    if (isISO) {
      newVol=volumeMgr.allocateDuplicateVolume(root,null);
      vm.setIsoId(newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
 else {
      newVol=volumeMgr.allocateDuplicateVolume(root,newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
  }
 else {
    newVol=volumeMgr.allocateDuplicateVolume(root,null);
  }
  if (vm instanceof UserVm) {
    _resourceLimitMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  _volsDao.attachVolume(newVol.getId(),vmId,newVol.getDeviceId());
  _volsDao.detachVolume(root.getId());
  volumeMgr.destroyVolume(root);
  if (vm.getHypervisorType() == HypervisorType.VMware) {
    VolumeInfo volumeInStorage=volFactory.getVolume(root.getId());
    if (volumeInStorage != null) {
      s_logger.info("Expunging volume " + root.getId() + " from primary data store");
      AsyncCallFuture<VolumeApiResult> future=_volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));
      try {
        future.get();
      }
 catch (      Exception e) {
        s_logger.debug("Failed to expunge volume:" + root.getId(),e);
      }
    }
  }
  if (template.getEnablePassword()) {
    String password=generateRandomPassword();
    boolean result=resetVMPasswordInternal(vmId,password);
    if (result) {
      vm.setPassword(password);
      _vmDao.loadDetails(vm);
      encryptAndStorePassword(vm,password);
    }
 else {
      throw new CloudRuntimeException("VM reset is completed but failed to reset password for the virtual machine ");
    }
  }
  if (needRestart) {
    try {
      _itMgr.start(vm.getUuid(),null);
    }
 catch (    Exception e) {
      s_logger.debug("Unable to start VM " + vm.getUuid(),e);
      CloudRuntimeException ex=new CloudRuntimeException("Unable to start VM with specified id" + e.getMessage());
      ex.addProxyObject(vm.getUuid(),"vmId");
      throw ex;
    }
  }
  s_logger.debug("Restore VM " + vmId + " with template "+ template.getUuid()+ " done successfully");
  return vm;
}
