{
  Long vmId=cmd.getVmId();
  Long nicId=cmd.getNicId();
  Account caller=CallContext.current().getCallingAccount();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  NicVO nic=_nicDao.findById(nicId);
  if (nic == null) {
    throw new InvalidParameterValueException("unable to find a nic with id " + nicId);
  }
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  if (network == null) {
    throw new InvalidParameterValueException("unable to find a network with id " + nic.getNetworkId());
  }
  _accountMgr.checkAccess(caller,null,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException("Zone " + vmInstance.getDataCenterId() + ", has a NetworkType of Basic. Can't remove a NIC from a VM on a Basic Network");
  }
  if (nic.getInstanceId() != vmId) {
    throw new InvalidParameterValueException(nic + " is not a nic on  " + vmInstance);
  }
  _accountMgr.checkAccess(caller,AccessType.UseEntry,network);
  boolean nicremoved=false;
  try {
    nicremoved=_itMgr.removeNicFromVm(vmInstance,nic);
  }
 catch (  ResourceUnavailableException e) {
    throw new CloudRuntimeException("Unable to remove " + network + " from "+ vmInstance+ ": "+ e);
  }
catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException("Concurrent operations on removing " + network + " from "+ vmInstance+ ": "+ e);
  }
  if (!nicremoved) {
    throw new CloudRuntimeException("Unable to remove " + network + " from "+ vmInstance);
  }
  s_logger.debug("Successful removal of " + network + " from "+ vmInstance);
  return _vmDao.findById(vmInstance.getId());
}
