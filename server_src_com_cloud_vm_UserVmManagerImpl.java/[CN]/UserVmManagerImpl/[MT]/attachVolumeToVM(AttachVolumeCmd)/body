{
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account caller=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException("Please specify a valid data volume.");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException("Please specify a volume that is not attached to any VM.");
  }
  if (volume.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException("Please specify a volume that is not destroyed.");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException("Please specify a valid User VM.");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new InvalidParameterValueException("deviceId can't be 0, which is used by Root device");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException("The specified VM already has the maximum number of data disks (6). Please specify another VM.");
  }
  if (vm.getDataCenterIdToDeployIn() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException("Please specify a VM that is in the same zone as the volume.");
  }
  _accountMgr.checkAccess(caller,null,true,volume,vm);
  if (!(Volume.State.Allocated.equals(volume.getState())) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException("Please specify a volume that has been created on a shared storage pool.");
  }
  if (!(Volume.State.Allocated.equals(volume.getState()) || Volume.State.Ready.equals(volume.getState()))) {
    throw new InvalidParameterValueException("Volume state must be in Allocated or Ready state");
  }
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new CloudRuntimeException("The VM " + vm.getHostName() + " has more than one ROOT volume and is in an invalid state. Please contact Cloud Support.");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  HypervisorType rootDiskHyperType=vm.getHypervisorType();
  HypervisorType dataDiskHyperType=_volsDao.getHypervisorType(volume.getId());
  if (dataDiskHyperType != HypervisorType.None && rootDiskHyperType != dataDiskHyperType) {
    throw new InvalidParameterValueException("Can't attach a volume created by: " + dataDiskHyperType + " to a "+ rootDiskHyperType+ " vm");
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException("deviceId should be 1,2,4-15");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException("deviceId " + deviceId + " is used by VM "+ vm.getHostName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove("3");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  boolean createVolumeOnBackend=true;
  if (rootVolumeOfVm.getState() == Volume.State.Allocated) {
    createVolumeOnBackend=false;
  }
  if (createVolumeOnBackend) {
    if (volume.getState().equals(Volume.State.Allocated)) {
      VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
      DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterIdToDeployIn());
      HostPodVO pod=_podDao.findById(vm.getPodIdToDeployIn());
      StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
      ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
      DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
      Long clusterId=(rootDiskPool == null ? null : rootDiskPool.getClusterId());
      volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,clusterId,svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
      if (volume == null) {
        throw new CloudRuntimeException("Failed to create volume when attaching it to VM: " + vm.getHostName());
      }
    }
    StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
    String[] volumeTags=volumeDiskOffering.getTagsArray();
    StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
    List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
    boolean moveVolumeNeeded=true;
    if (sharedVMPools.size() == 0) {
      String poolType;
      if (vmRootVolumePool.getClusterId() != null) {
        poolType="cluster";
      }
 else       if (vmRootVolumePool.getPodId() != null) {
        poolType="pod";
      }
 else {
        poolType="zone";
      }
      throw new CloudRuntimeException("There are no storage pools in the VM's " + poolType + " with all of the volume's tags ("+ volumeDiskOffering.getTags()+ ").");
    }
 else {
      Long sourcePoolDcId=sourcePool.getDataCenterId();
      Long sourcePoolPodId=sourcePool.getPodId();
      Long sourcePoolClusterId=sourcePool.getClusterId();
      for (      StoragePoolVO vmPool : sharedVMPools) {
        Long vmPoolDcId=vmPool.getDataCenterId();
        Long vmPoolPodId=vmPool.getPodId();
        Long vmPoolClusterId=vmPool.getClusterId();
        if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
          moveVolumeNeeded=false;
          break;
        }
      }
    }
    if (moveVolumeNeeded) {
      try {
        volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),dataDiskHyperType);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(e.toString());
      }
    }
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Trying to attaching volume " + volumeId + " to vm instance:"+ vm.getId()+ ", update async job-"+ job.getId()+ " progress status");
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"volume",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg="Failed to attach volume: " + volume.getName() + " to VM: "+ vm.getHostName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId,volume.getChainInfo());
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException(errorMsg + " due to: " + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    return _volsDao.findById(volumeId);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+="; " + details;
      }
    }
    throw new CloudRuntimeException(errorMsg);
  }
}
