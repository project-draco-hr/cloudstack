{
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=(Account)UserContext.current().getAccountObject();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != VolumeType.DATADISK) {
    throw new InvalidParameterValueException("Please specify a valid data volume.");
  }
  if (!_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException("Please specify a volume that has been created on a shared storage pool.");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException("Please specify a volume that is not attached to any VM.");
  }
  if (volume.getDestroyed()) {
    throw new InvalidParameterValueException("Please specify a volume that is not destroyed.");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException("Please specify a valid User VM.");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"deviceId can't be 0, which is used by Root device");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,VolumeType.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException("The specified VM already has the maximum number of data disks (6). Please specify another VM.");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException("Please specify a VM that is in the same zone as the volume.");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,"virtual machine and volume belong to different accounts, can not attach");
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId().longValue() != volume.getAccountId())       throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId + " for account: "+ account.getAccountName());
      if (account.getId().longValue() != vm.getAccountId())       throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find VM with ID: " + vmId + " for account: "+ account.getAccountName());
    }
 else {
      if (!_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId()) || !_domainDao.isChildDomain(account.getDomainId(),vm.getDomainId())) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to attach volume " + volumeId + " to virtual machine instance "+ vmId+ ", permission denied.");
      }
    }
  }
  long startEventId=EventUtils.saveScheduledEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_ATTACH,"attaching volume: " + volumeId + " to Vm: "+ vmId);
  EventVO event=new EventVO();
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setUserId(1L);
  event.setAccountId(volume.getAccountId());
  event.setState(EventState.Started);
  event.setStartId(startEventId);
  event.setDescription("Attaching volume: " + volumeId + " to Vm: "+ vmId);
  _eventDao.persist(event);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,VolumeType.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new InternalErrorException("The VM " + vm.getName() + " has more than one ROOT volume and is in an invalid state. Please contact Cloud Support.");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException("deviceId should be 1,2,4-15");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException("deviceId " + deviceId + " is used by VM "+ vm.getName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove("3");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType="cluster";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType="pod";
    }
 else {
      poolType="zone";
    }
    throw new InternalErrorException("There are no storage pools in the VM's " + poolType + " with all of the volume's tags ("+ volumeDiskOffering.getTags()+ ").");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId());
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info("Trying to attaching volume " + volumeId + " to vm instance:"+ vm.getId()+ ", update async job-"+ job.getId()+ " progress status");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"volume",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg="Failed to attach volume: " + volume.getName() + " to VM: "+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (sendCommand) {
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId);
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + " due to: " + e.getMessage());
    }
  }
  event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setState(EventState.Completed);
  event.setStartId(startEventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription("Volume: " + volume.getName() + " successfully attached to VM: "+ vm.getName()+ "("+ vm.getDisplayName()+ ")");
 else     event.setDescription("Volume: " + volume.getName() + " successfully attached to VM: "+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+="; " + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}
