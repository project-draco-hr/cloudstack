{
  Long vmId=cmd.getId();
  Long svcOffId=cmd.getServiceOfferingId();
  Account caller=UserContext.current().getCaller();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  ServiceOfferingVO newServiceOffering=_offeringDao.findById(svcOffId);
  ServiceOfferingVO currentServiceOffering=_offeringDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
  int newCpu=newServiceOffering.getCpu();
  int newMemory=newServiceOffering.getRamSize();
  int currentCpu=currentServiceOffering.getCpu();
  int currentMemory=currentServiceOffering.getRamSize();
  if (newCpu > currentCpu) {
    _resourceLimitMgr.checkResourceLimit(caller,ResourceType.cpu,newCpu - currentCpu);
  }
  if (newMemory > currentMemory) {
    _resourceLimitMgr.checkResourceLimit(caller,ResourceType.memory,newMemory - currentMemory);
  }
  _itMgr.checkIfCanUpgrade(vmInstance,svcOffId);
  _itMgr.upgradeVmDb(vmId,svcOffId);
  if (newCpu > currentCpu) {
    _resourceLimitMgr.incrementResourceCount(caller.getAccountId(),ResourceType.cpu,new Long(newCpu - currentCpu));
  }
 else   if (currentCpu > newCpu) {
    _resourceLimitMgr.decrementResourceCount(caller.getAccountId(),ResourceType.cpu,new Long(currentCpu - newCpu));
  }
  if (newMemory > currentMemory) {
    _resourceLimitMgr.incrementResourceCount(caller.getAccountId(),ResourceType.memory,new Long(newMemory - currentMemory));
  }
 else   if (currentMemory > newMemory) {
    _resourceLimitMgr.decrementResourceCount(caller.getAccountId(),ResourceType.memory,new Long(currentMemory - newMemory));
  }
  return _vmDao.findById(vmInstance.getId());
}
