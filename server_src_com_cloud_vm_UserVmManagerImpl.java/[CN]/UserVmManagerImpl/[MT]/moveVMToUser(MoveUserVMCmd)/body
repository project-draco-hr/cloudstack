{
  Account oldAccount=UserContext.current().getCaller();
  Account newAccount=_accountService.getAccount(cmd.getAccountId());
  if (newAccount == null) {
    throw new InvalidParameterValueException("Unable to find account " + newAccount + " in domain "+ oldAccount.getDomainId());
  }
  if (_accountMgr.resourceLimitExceeded(newAccount,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of virtual machines for account: " + newAccount.getAccountName() + " has been exceeded.");
    rae.setResourceType("vm");
    throw rae;
  }
  UserVmVO vm=_vmDao.findById(cmd.getVmId());
  if (vm.getState() == State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is Running, unable to move the vm " + vm);
    }
    throw new InvalidParameterValueException("VM is Running, unable to move the vm " + vm);
  }
  VirtualMachineTemplate template=_templateDao.findById(vm.getTemplateId());
  if (!template.isPublicTemplate()) {
    Account templateOwner=_accountMgr.getAccount(template.getAccountId());
    _accountMgr.checkAccess(newAccount,templateOwner);
  }
  DomainVO domain=_domainDao.findById(oldAccount.getDomainId());
  _accountMgr.checkAccess(newAccount,domain);
  DataCenterVO zone=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  VMInstanceVO vmoi=_itMgr.findById(vm.getType(),vm.getId());
  VirtualMachineProfileImpl<VMInstanceVO> vmOldProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmoi);
  List<NetworkVO> oldNetwork=_networkMgr.listNetworksForAccount(oldAccount.getId(),zone.getId(),GuestIpType.Virtual,true);
  long networkOffering=oldNetwork.get(0).getNetworkOfferingId();
  _networkMgr.cleanupNics(vmOldProfile);
  _networkMgr.expungeNics(vmOldProfile);
  vm.setAccountId(newAccount.getAccountId());
  vm.setAccountId(newAccount.getId());
  _vmDao.persist(vm);
  List<VolumeVO> volumes=_volsDao.findByInstance(cmd.getVmId());
  for (  VolumeVO volume : volumes) {
    volume.setAccountId(cmd.getAccountId());
    _volsDao.persist(volume);
  }
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  NetworkVO defaultNetwork=null;
  s_logger.warn("Old network offering " + networkOffering);
  if (zone.getNetworkType() == NetworkType.Basic) {
    s_logger.warn("Basic network type");
  }
 else {
    s_logger.warn("Advanced network type for zone = " + zone);
    List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(newAccount.getId(),zone.getId(),GuestIpType.Virtual,true);
    if (virtualNetworks.isEmpty()) {
      s_logger.warn("Creating default Virtual network for account " + newAccount + " as a part of deployVM process");
      Network newNetwork=_networkMgr.createNetwork(networkOffering,newAccount.getAccountName() + "-network",newAccount.getAccountName() + "-network",false,null,vm.getDataCenterIdToDeployIn(),null,null,null,null,newAccount,false,null,null);
      s_logger.warn("New network " + newNetwork);
      defaultNetwork=_networkDao.findById(newNetwork.getId());
    }
 else     if (virtualNetworks.size() > 1) {
      throw new InvalidParameterValueException("More than 1 default Virtaul networks are found for account " + newAccount + "; please specify networkIds");
    }
 else {
      defaultNetwork=virtualNetworks.get(0);
      s_logger.warn("Virtaul networks " + virtualNetworks.get(0));
    }
  }
  networkList.add(defaultNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  NetworkVO network : networkList) {
    if (network.isDefault()) {
      defaultNetworkNumber++;
    }
    networks.add(new Pair<NetworkVO,NicProfile>(network,null));
  }
  VMInstanceVO vmi=_itMgr.findById(vm.getType(),vm.getId());
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
  _networkMgr.allocate(vmProfile,networks);
  s_logger.warn("Saved the network profile ");
  return vm;
}
