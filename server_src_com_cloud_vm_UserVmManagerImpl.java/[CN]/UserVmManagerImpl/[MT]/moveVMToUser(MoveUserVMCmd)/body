{
  Account oldAccount=UserContext.current().getCaller();
  Account newAccount=_accountService.getAccount(cmd.getAccountId());
  if (newAccount == null || newAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Unable to find account " + newAccount + " in domain "+ oldAccount.getDomainId());
  }
  if (oldAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Vm id=" + cmd.getVmId() + " belongs to the project and can't be moved");
  }
  _resourceLimitMgr.checkResourceLimit(newAccount,ResourceType.user_vm);
  UserVmVO vm=_vmDao.findById(cmd.getVmId());
  if (vm.getState() == State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is Running, unable to move the vm " + vm);
    }
    throw new InvalidParameterValueException("VM is Running, unable to move the vm " + vm);
  }
  VirtualMachineTemplate template=_templateDao.findById(vm.getTemplateId());
  if (!template.isPublicTemplate()) {
    Account templateOwner=_accountMgr.getAccount(template.getAccountId());
    _accountMgr.checkAccess(newAccount,null,templateOwner);
  }
  DomainVO domain=_domainDao.findById(oldAccount.getDomainId());
  _accountMgr.checkAccess(newAccount,domain);
  DataCenterVO zone=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  VMInstanceVO vmoi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
  VirtualMachineProfileImpl<VMInstanceVO> vmOldProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmoi);
  vm.setAccountId(newAccount.getAccountId());
  vm.setAccountId(newAccount.getId());
  _vmDao.persist(vm);
  List<VolumeVO> volumes=_volsDao.findByInstance(cmd.getVmId());
  for (  VolumeVO volume : volumes) {
    volume.setAccountId(cmd.getAccountId());
    _volsDao.persist(volume);
  }
  if (zone.getNetworkType() == NetworkType.Advanced) {
    _networkMgr.cleanupNics(vmOldProfile);
    _networkMgr.expungeNics(vmOldProfile);
    List<NetworkVO> networkList=new ArrayList<NetworkVO>();
    NetworkVO defaultNetwork=null;
    List<NetworkVO> oldNetworks=new ArrayList<NetworkVO>();
    List<NetworkVO> zoneNetworks=_networkDao.listByZone(zone.getId());
    for (    NetworkVO network : zoneNetworks) {
      NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
      if (!no.isSystemOnly()) {
        if (network.getIsShared() || !_networkDao.listBy(oldAccount.getId(),network.getId()).isEmpty()) {
          if (network.isDefault()) {
            oldNetworks.add(network);
          }
        }
      }
    }
    for (    NetworkVO oldNet : oldNetworks) {
      long networkOffering=oldNet.getNetworkOfferingId();
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(newAccount.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        Network newNetwork=_networkMgr.createNetwork(networkOffering,newAccount.getAccountName() + "-network",newAccount.getAccountName() + "-network",false,null,vm.getDataCenterIdToDeployIn(),null,null,null,null,newAccount,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException("More than 1 default Virtaul networks are found for account " + newAccount + "; please specify networkIds");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
      networkList.add(defaultNetwork);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
      short defaultNetworkNumber=0;
      for (      NetworkVO network : networkList) {
        if (network.isDefault()) {
          defaultNetworkNumber++;
        }
        networks.add(new Pair<NetworkVO,NicProfile>(network,null));
      }
      VMInstanceVO vmi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
      VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
      _networkMgr.allocate(vmProfile,networks);
    }
  }
  return vm;
}
