{
  final UserVmVO vm=_vmDao.findById(param.getVmId());
  String resultDescription;
  if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging || vm.getRemoved() != null) {
    resultDescription="VM does not exist or in destroying state";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
    if (s_logger.isDebugEnabled())     s_logger.debug("Execute asynchronize Reboot VM command: " + resultDescription);
    return new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
  }
  if (vm.getState() == State.Running && vm.getHostId() != null) {
    RebootCommand cmd=new RebootCommand(vm.getInstanceName());
    try {
      long seq=_agentMgr.send(vm.getHostId(),new Command[]{cmd},true,new VMOperationListener(executor,param,vm,0));
      resultDescription="Execute asynchronize Reboot VM command: sending command to agent, seq - " + seq;
      if (s_logger.isDebugEnabled())       s_logger.debug(resultDescription);
      return new OperationResponse(OperationResponse.STATUS_IN_PROGRESS,resultDescription);
    }
 catch (    AgentUnavailableException e) {
      resultDescription="Agent is not available";
      executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
      return new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
    }
  }
  resultDescription="VM is not running or agent host is disconnected";
  executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
  return new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
}
