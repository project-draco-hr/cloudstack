{
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  boolean isAdmin=(isAdmin(caller.getType()));
  _accountMgr.checkAccess(caller,null,true,templateOwner);
  String name=cmd.getTemplateName();
  if ((name == null) || (name.length() > 32)) {
    throw new InvalidParameterValueException("Template name cannot be null and should be less than 32 characters");
  }
  if (cmd.getTemplateTag() != null) {
    if (!_accountService.isRootAdmin(caller.getType())) {
      throw new PermissionDeniedException("Parameter templatetag can only be specified by a Root Admin, permission denied");
    }
  }
  Integer bits=cmd.getBits();
  Boolean requiresHvm=cmd.getRequiresHvm();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  int bitsValue=((bits == null) ? 64 : bits.intValue());
  boolean requiresHvmValue=((requiresHvm == null) ? true : requiresHvm.booleanValue());
  boolean passwordEnabledValue=((passwordEnabled == null) ? false : passwordEnabled.booleanValue());
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue("allow.public.user.templates"));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new PermissionDeniedException("Failed to create template " + name + ", only private templates can be created.");
  }
  Long volumeId=cmd.getVolumeId();
  Long snapshotId=cmd.getSnapshotId();
  if ((volumeId == null) && (snapshotId == null)) {
    throw new InvalidParameterValueException("Failed to create private template record, neither volume ID nor snapshot ID were specified.");
  }
  if ((volumeId != null) && (snapshotId != null)) {
    throw new InvalidParameterValueException("Failed to create private template record, please specify only one of volume ID (" + volumeId + ") and snapshot ID ("+ snapshotId+ ")");
  }
  HypervisorType hyperType;
  VolumeVO volume=null;
  VMTemplateVO privateTemplate=null;
  if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new InvalidParameterValueException("Failed to create private template record, unable to find volume " + volumeId);
    }
    _accountMgr.checkAccess(caller,null,true,volume);
    if (!_storageMgr.volumeInactive(volume)) {
      String msg="Unable to create private template for volume: " + volume.getName() + "; volume is attached to a non-stopped VM, please stop the VM first";
      if (s_logger.isInfoEnabled()) {
        s_logger.info(msg);
      }
      throw new CloudRuntimeException(msg);
    }
    hyperType=_volsDao.getHypervisorType(volumeId);
  }
 else {
    SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
    if (snapshot == null) {
      throw new InvalidParameterValueException("Failed to create private template record, unable to find snapshot " + snapshotId);
    }
    volume=_volsDao.findById(snapshot.getVolumeId());
    VolumeVO snapshotVolume=_volsDao.findByIdIncludingRemoved(snapshot.getVolumeId());
    _accountMgr.checkAccess(caller,null,true,snapshot);
    if (snapshot.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException("Snapshot id=" + snapshotId + " is not in "+ Snapshot.Status.BackedUp+ " state yet and can't be used for template creation");
    }
    if (snapshot.getHypervisorType() == HypervisorType.VMware && snapshotVolume.getVolumeType() == Type.DATADISK) {
      throw new UnsupportedServiceException("operation not supported, snapshot with id " + snapshotId + " is created from Data Disk");
    }
    hyperType=snapshot.getHypervisorType();
  }
  _resourceLimitMgr.checkResourceLimit(templateOwner,ResourceType.template);
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  Long guestOSId=cmd.getOsTypeId();
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  if (guestOS == null) {
    throw new InvalidParameterValueException("GuestOS with ID: " + guestOSId + " does not exist.");
  }
  String uniqueName=Long.valueOf((userId == null) ? 1 : userId).toString() + UUID.nameUUIDFromBytes(name.getBytes()).toString();
  Long nextTemplateId=_templateDao.getNextInSequence(Long.class,"id");
  String description=cmd.getDisplayText();
  boolean isExtractable=false;
  Long sourceTemplateId=null;
  if (volume != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
    isExtractable=template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;
    if (template != null) {
      sourceTemplateId=template.getId();
    }
 else     if (volume.getVolumeType() == Type.ROOT) {
      UserVm userVm=ApiDBUtils.findUserVmById(volume.getInstanceId());
      sourceTemplateId=userVm.getIsoId();
    }
  }
  String templateTag=cmd.getTemplateTag();
  if (templateTag != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Adding template tag: " + templateTag);
    }
  }
  privateTemplate=new VMTemplateVO(nextTemplateId,uniqueName,name,ImageFormat.RAW,isPublic,featured,isExtractable,TemplateType.USER,null,null,requiresHvmValue,bitsValue,templateOwner.getId(),null,description,passwordEnabledValue,guestOS.getId(),true,hyperType,templateTag,cmd.getDetails());
  if (sourceTemplateId != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("This template is getting created from other template, setting source template Id to: " + sourceTemplateId);
    }
  }
  privateTemplate.setSourceTemplateId(sourceTemplateId);
  VMTemplateVO template=_templateDao.persist(privateTemplate);
  if (template != null) {
    if (cmd.getDetails() != null) {
      _templateDetailsDao.persist(template.getId(),cmd.getDetails());
    }
    _resourceLimitMgr.incrementResourceCount(templateOwner.getId(),ResourceType.template);
  }
  if (template != null) {
    return template;
  }
 else {
    throw new CloudRuntimeException("Failed to create a template");
  }
}
