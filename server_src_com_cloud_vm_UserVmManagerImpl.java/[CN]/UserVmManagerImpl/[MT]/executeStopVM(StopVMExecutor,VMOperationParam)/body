{
  final UserVmVO vm=_vmDao.findById(param.getVmId());
  OperationResponse response;
  String resultDescription="Success";
  if (vm == null || vm.getRemoved() != null) {
    resultDescription="VM is either removed or deleted";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,resultDescription);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Execute asynchronize stop VM command: " + resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_SUCCEEDED,resultDescription);
    return response;
  }
  State state=vm.getState();
  if (state == State.Stopped) {
    resultDescription="VM is already stopped";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,resultDescription);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Execute asynchronize stop VM command: " + resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_SUCCEEDED,resultDescription);
    return response;
  }
  if (state == State.Creating || state == State.Destroyed || state == State.Expunging) {
    resultDescription="VM is not in a stoppable state";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,resultDescription);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Execute asynchronize stop VM command: " + resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_SUCCEEDED,resultDescription);
    return response;
  }
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.StopRequested,vm.getHostId())) {
    resultDescription="VM is not in a state to stop";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Execute asynchronize stop VM command: " + resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
    return response;
  }
  if (vm.getHostId() == null) {
    resultDescription="VM host is null (invalid VM)";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Execute asynchronize stop VM command: " + resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
    return response;
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"vm_instance",vm.getId());
  }
  StopCommand cmd=new StopCommand(vm,vm.getInstanceName(),vm.getVnet());
  try {
    long seq=_agentMgr.send(vm.getHostId(),new Commands(cmd),new VMOperationListener(executor,param,vm,0));
    resultDescription="Execute asynchronize stop VM command: sending command to agent, seq - " + seq;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(resultDescription);
    }
    response=new OperationResponse(OperationResponse.STATUS_IN_PROGRESS,resultDescription);
    return response;
  }
 catch (  AgentUnavailableException e) {
    resultDescription="Agent is not available";
    executor.getAsyncJobMgr().completeAsyncJob(executor.getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultDescription);
    _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,vm.getHostId());
    response=new OperationResponse(OperationResponse.STATUS_FAILED,resultDescription);
    return response;
  }
}
