{
  Account account=(Account)UserContext.current().getAccountObject();
  Long volumeId=cmmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null)   throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId);
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId())     throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with ID: " + volumeId + " for account: "+ account.getAccountName());
  }
 else   if (account != null) {
    if (!_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to detach volume with ID: " + volumeId + ", permission denied.");
    }
  }
  if (volume.getVolumeType() != VolumeType.DATADISK) {
    throw new InvalidParameterValueException("Please specify a data volume.");
  }
  if (!_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException("Please specify a volume that has been created on a shared storage pool.");
  }
  Long vmId=volume.getInstanceId();
  if (vmId == null) {
    throw new InvalidParameterValueException("The specified volume is not attached to a VM.");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  long eventId=EventUtils.saveScheduledEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_DETACH,"detaching volume: " + volumeId + " from Vm: "+ vmId);
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info("Trying to attaching volume " + volumeId + "to vm instance:"+ vm.getId()+ ", update async job-"+ job.getId()+ " progress status");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"volume",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg="Failed to detach volume: " + volume.getName() + " from VM: "+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  Answer answer=null;
  if (sendCommand) {
    AttachVolumeCommand cmd=new AttachVolumeCommand(false,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),volume.getDeviceId());
    try {
      answer=_agentMgr.send(vm.getHostId(),cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + " due to: " + e.getMessage());
    }
  }
  EventVO event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_DETACH);
  event.setState(EventState.Completed);
  event.setStartId(eventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    _volsDao.detachVolume(volume.getId());
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription("Volume: " + volume.getName() + " successfully detached from VM: "+ vm.getName()+ "("+ vm.getDisplayName()+ ")");
 else     event.setDescription("Volume: " + volume.getName() + " successfully detached from VM: "+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+="; " + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}
