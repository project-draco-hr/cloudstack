{
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the VM");
    }
    throw new PermissionDeniedException("No permission to migrate VM, Only Root Admin can migrate a VM!");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("Unable to find the VM by id=" + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not Running, unable to migrate the vm " + vm);
    }
    throw new InvalidParameterValueException("VM is not Running, unable to migrate the vm " + vm);
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is not XenServer/VMware/KVM/Ovm, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported Hypervisor Type for VM migration, we support XenServer/VMware/KVM only");
  }
  ServiceOfferingVO svcOffering=_serviceOfferingDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is using Local Storage, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported operation, VM uses Local storage, cannot migrate");
  }
  long srcHostId=vm.getHostId();
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException("Cannot migrate VM, VM is already presnt on this host, please specify valid destination host to migrate the VM");
  }
  if (destinationHost.getStatus() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new InvalidParameterValueException("Cannot migrate VM, destination host is not in correct state, has status: " + destinationHost.getStatus() + ", state: "+ destinationHost.getResourceState());
  }
  DataCenterVO dcVO=_dcDao.findById(destinationHost.getDataCenterId());
  HostPodVO pod=_podDao.findById(destinationHost.getPodId());
  Cluster cluster=_clusterDao.findById(destinationHost.getClusterId());
  DeployDestination dest=new DeployDestination(dcVO,pod,cluster,destinationHost);
  HypervisorType hypervisorType=destinationHost.getHypervisorType();
  String hypervisorVersion=destinationHost.getHypervisorVersion();
  Long maxGuestLimit=_hypervisorCapabilitiesDao.getMaxGuestsLimit(hypervisorType,hypervisorVersion);
  Long vmCount=_vmInstanceDao.countRunningByHostId(destinationHost.getId());
  if (vmCount.longValue() == maxGuestLimit.longValue()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Host name: " + destinationHost.getName() + ", hostId: "+ destinationHost.getId()+ " already has max Running VMs(count includes system VMs), limit is: "+ maxGuestLimit+ " , cannot migrate to this host");
    }
    throw new VirtualMachineMigrationException("Destination host, hostId: " + destinationHost.getId() + " already has max Running VMs(count includes system VMs), limit is: "+ maxGuestLimit+ " , cannot migrate to this host");
  }
  VMInstanceVO migratedVm=_itMgr.migrate(vm,srcHostId,dest);
  return migratedVm;
}
