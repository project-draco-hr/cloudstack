{
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  Boolean ha=cmd.getHaEnable();
  Long id=cmd.getId();
  Long osTypeId=cmd.getOsTypeId();
  String userData=cmd.getUserData();
  UserVmVO vmInstance=null;
  vmInstance=_vmDao.findById(id.longValue());
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find virtual machine with id " + id);
  }
  ServiceOffering offering=_serviceOfferingDao.findById(vmInstance.getServiceOfferingId());
  if (!offering.getOfferHA() && ha != null && ha) {
    throw new InvalidParameterValueException("Can't enable ha for the vm as it's created from the Service offering having HA disabled");
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,vmInstance);
  if (displayName == null) {
    displayName=vmInstance.getDisplayName();
  }
  if (ha == null) {
    ha=vmInstance.isHaEnabled();
  }
  UserVmVO vm=_vmDao.findById(id);
  if (vm == null) {
    throw new CloudRuntimeException("Unable to find virual machine with id " + id);
  }
  if (vm.getState() == State.Error || vm.getState() == State.Expunging) {
    s_logger.error("vm is not in the right state: " + id);
    throw new InvalidParameterValueException("Vm with id " + id + " is not in the right state");
  }
  boolean updateUserdata=false;
  if (userData != null) {
    userData=userData.replace("\\n","");
    validateUserData(userData,cmd.getHttpMethod());
    updateUserdata=true;
  }
 else {
    userData=vmInstance.getUserData();
  }
  String description="";
  if (displayName != vmInstance.getDisplayName()) {
    description+="New display name: " + displayName + ". ";
  }
  if (ha != vmInstance.isHaEnabled()) {
    if (ha) {
      description+="Enabled HA. ";
    }
 else {
      description+="Disabled HA. ";
    }
  }
  if (osTypeId == null) {
    osTypeId=vmInstance.getGuestOSId();
  }
 else {
    description+="Changed Guest OS Type to " + osTypeId + ". ";
  }
  if (group != null) {
    if (addInstanceToGroup(id,group)) {
      description+="Added to group: " + group + ".";
    }
  }
  _vmDao.updateVM(id,displayName,ha,osTypeId,userData);
  if (updateUserdata) {
    boolean result=updateUserDataInternal(_vmDao.findById(id));
    if (result) {
      s_logger.debug("User data successfully updated for vm id=" + id);
    }
 else {
      throw new CloudRuntimeException("Failed to reset userdata for the virtual machine ");
    }
  }
  return _vmDao.findById(id);
}
