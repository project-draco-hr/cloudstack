{
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  Boolean ha=cmd.getHaEnable();
  Boolean isDisplayVm=cmd.getDisplayVm();
  Long id=cmd.getId();
  Long osTypeId=cmd.getOsTypeId();
  String userData=cmd.getUserData();
  Boolean isDynamicallyScalable=cmd.isDynamicallyScalable();
  String hostName=cmd.getHostName();
  Account caller=CallContext.current().getCallingAccount();
  UserVmVO vmInstance=_vmDao.findById(id.longValue());
  if (vmInstance == null) {
    throw new InvalidParameterValueException("unable to find virtual machine with id " + id);
  }
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,vmInstance);
  if (isDisplayVm != null && isDisplayVm != vmInstance.isDisplayVm()) {
    vmInstance.setDisplayVm(isDisplayVm);
    ServiceOffering offering=_serviceOfferingDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(),ResourceType.user_vm,isDisplayVm);
    _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(),ResourceType.cpu,isDisplayVm,new Long(offering.getCpu()));
    _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(),ResourceType.memory,isDisplayVm,new Long(offering.getRamSize()));
    saveUsageEvent(vmInstance);
    _volumeService.updateDisplay(_volsDao.findByInstanceAndType(id,Volume.Type.ROOT).get(0),isDisplayVm);
  }
  return updateVirtualMachine(id,displayName,group,ha,isDisplayVm,osTypeId,userData,isDynamicallyScalable,cmd.getHttpMethod(),cmd.getCustomId(),hostName);
}
