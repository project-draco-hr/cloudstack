{
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getAccount();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"The account " + accountHandle.getId() + " is removed");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find a virtual machine with id " + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to recover virtual machine with id " + vmId + ", invalid id given.");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find vm or vm is removed: " + vmId);
    }
    throw new InvalidParameterValueException("Unable to find vm by id " + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("vm is not in the right state: " + vmId);
    }
    throw new InvalidParameterValueException("Vm with id " + vmId + " is not in the right state");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Recovering vm " + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException("Unable to recover VM as the account is deleted");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of virtual machines for account: " + account.getAccountName() + " has been exceeded.");
    rae.setResourceType("vm");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug("Unable to recover the vm because it is not in the correct state: " + vmId);
    throw new InvalidParameterValueException("Unable to recover the vm because it is not in the correct state: " + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstanceIdDestroyed(vmId);
  for (  VolumeVO volume : volumes) {
    _volsDao.recoverVolume(volume.getId());
    long templateId=-1;
    long diskOfferingId=-1;
    if (volume.getTemplateId() != null) {
      templateId=volume.getTemplateId();
    }
    diskOfferingId=volume.getDiskOfferingId();
    long sizeMB=volume.getSize() / (1024 * 1024);
    String eventParams="id=" + volume.getId() + "\ndoId="+ diskOfferingId+ "\ntId="+ templateId+ "\ndcId="+ volume.getDataCenterId()+ "\nsize="+ sizeMB;
    EventVO volEvent=new EventVO();
    volEvent.setAccountId(volume.getAccountId());
    volEvent.setUserId(1L);
    volEvent.setType(EventTypes.EVENT_VOLUME_CREATE);
    volEvent.setParameters(eventParams);
    StoragePoolVO pool=_storagePoolDao.findById(volume.getPoolId());
    volEvent.setDescription("Created volume: " + volume.getName() + " with size: "+ sizeMB+ " MB in pool: "+ pool.getName());
    _eventDao.persist(volEvent);
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}
