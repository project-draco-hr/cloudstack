{
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException("The account " + accountHandle.getId() + " is removed");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException("unable to find a virtual machine with id " + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException("Unable to recover virtual machine with id " + vmId + ", invalid id given.");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find vm or vm is removed: " + vmId);
    }
    throw new InvalidParameterValueException("Unable to find vm by id " + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("vm is not in the right state: " + vmId);
    }
    throw new InvalidParameterValueException("Vm with id " + vmId + " is not in the right state");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Recovering vm " + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException("Unable to recover VM as the account is deleted");
  }
  _resourceLimitMgr.checkResourceLimit(account,ResourceType.user_vm);
  _haMgr.cancelDestroy(vm,vm.getHostId());
  try {
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
      s_logger.debug("Unable to recover the vm because it is not in the correct state: " + vmId);
      throw new InvalidParameterValueException("Unable to recover the vm because it is not in the correct state: " + vmId);
    }
  }
 catch (  NoTransitionException e) {
    throw new InvalidParameterValueException("Unable to recover the vm because it is not in the correct state: " + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _resourceLimitMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  _resourceLimitMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  txn.commit();
  return _vmDao.findById(vmId);
}
