{
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && caller.getType() != Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    throw new InvalidParameterValueException("Only domain admins are allowed to assign VMs and not " + caller.getType());
  }
  UserVmVO vm=_vmDao.findById(cmd.getVmId());
  if (vm == null) {
    throw new InvalidParameterValueException("There is no vm by that id " + cmd.getVmId());
  }
 else   if (vm.getState() == State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is Running, unable to move the vm " + vm);
    }
    throw new InvalidParameterValueException("VM is Running, unable to move the vm " + vm);
  }
  Account oldAccount=_accountService.getActiveAccountById(vm.getAccountId());
  if (oldAccount == null) {
    throw new InvalidParameterValueException("Invalid account for VM " + vm.getAccountId() + " in domain.");
  }
  if (oldAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Vm id=" + cmd.getVmId() + " belongs to the project and can't be moved");
  }
  Account newAccount=_accountService.getActiveAccountByName(cmd.getAccountName(),cmd.getDomainId());
  if (newAccount == null || newAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Invalid accountid=" + cmd.getAccountName() + " in domain "+ cmd.getDomainId());
  }
  if (newAccount.getState() == Account.State.disabled) {
    throw new InvalidParameterValueException("The new account owner " + cmd.getAccountName() + " is disabled.");
  }
  if (oldAccount.getDomainId() != newAccount.getDomainId()) {
    throw new InvalidParameterValueException("The account should be under same domain for moving VM between two accounts. Old owner domain =" + oldAccount.getDomainId() + " New owner domain="+ newAccount.getDomainId());
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(cmd.getVmId());
  if (ip != null) {
    List<FirewallRuleVO> firewall_rules=_rulesDao.listByIpAndPurposeAndNotRevoked(ip.getId(),FirewallRule.Purpose.Firewall);
    if (firewall_rules.size() > 0) {
      throw new InvalidParameterValueException("Remove the Firewall rules for this VM before assigning to another user.");
    }
    List<FirewallRuleVO> lb_rules=_rulesDao.listByIpAndPurposeAndNotRevoked(ip.getId(),FirewallRule.Purpose.LoadBalancing);
    if (lb_rules.size() > 0) {
      throw new InvalidParameterValueException("Remove the LoadBalancing rules for this VM before assigning to another user.");
    }
    List<FirewallRuleVO> nat_rules=_rulesDao.listByIpAndPurposeAndNotRevoked(ip.getId(),FirewallRule.Purpose.StaticNat);
    if (nat_rules.size() > 0) {
      throw new InvalidParameterValueException("Remove the StaticNat rules for this VM before assigning to another user.");
    }
    List<FirewallRuleVO> vpn_rules=_rulesDao.listByIpAndPurposeAndNotRevoked(ip.getId(),FirewallRule.Purpose.Vpn);
    if (vpn_rules.size() > 0) {
      throw new InvalidParameterValueException("Remove the Vpn rules for this VM before assigning to another user.");
    }
    List<SecurityGroupVMMapVO> securityGroupsToVmMap=_securityGroupVMMapDao.listByInstanceId(cmd.getVmId());
    if (securityGroupsToVmMap.size() > 0) {
      throw new InvalidParameterValueException("Remove the VM from security groups before assigning to another user.");
    }
  }
  DataCenterVO zone=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  removeInstanceFromInstanceGroup(cmd.getVmId());
  _resourceLimitMgr.checkResourceLimit(newAccount,ResourceType.user_vm);
  VirtualMachineTemplate template=_templateDao.findById(vm.getTemplateId());
  if (!template.isPublicTemplate()) {
    Account templateOwner=_accountMgr.getAccount(template.getAccountId());
    _accountMgr.checkAccess(newAccount,null,templateOwner);
  }
  DomainVO domain=_domainDao.findById(cmd.getDomainId());
  _accountMgr.checkAccess(newAccount,domain);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _usageEventDao.persist(new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString()));
  _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(),ResourceType.user_vm);
  vm.setAccountId(newAccount.getAccountId());
  vm.setDomainId(cmd.getDomainId());
  _vmDao.persist(vm);
  List<VolumeVO> volumes=_volsDao.findByInstance(cmd.getVmId());
  for (  VolumeVO volume : volumes) {
    _usageEventDao.persist(new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName()));
    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(),ResourceType.volume);
    volume.setAccountId(newAccount.getAccountId());
    _volsDao.persist(volume);
    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(),ResourceType.volume);
    _usageEventDao.persist(new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),volume.getDiskOfferingId(),volume.getTemplateId(),volume.getSize()));
  }
  _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(),ResourceType.user_vm);
  _usageEventDao.persist(new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString()));
  txn.commit();
  VMInstanceVO vmoi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
  VirtualMachineProfileImpl<VMInstanceVO> vmOldProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmoi);
  List<Long> networkIdList=cmd.getNetworkIds();
  List<Long> securityGroupIdList=cmd.getSecurityGroupIdList();
  if (zone.getNetworkType() == NetworkType.Basic) {
    _networkMgr.cleanupNics(vmOldProfile);
    _networkMgr.expungeNics(vmOldProfile);
    _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());
    List<NetworkVO> networkList=new ArrayList<NetworkVO>();
    Network defaultNetwork=_networkMgr.getExclusiveGuestNetwork(zone.getId());
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException("Unable to find a default network to start a vm");
    }
 else {
      networkList.add(_networkDao.findById(defaultNetwork.getId()));
    }
    boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware);
    if (securityGroupIdList != null && isVmWare) {
      throw new InvalidParameterValueException("Security group feature is not supported for vmWare hypervisor");
    }
 else     if (!isVmWare && _networkMgr.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkMgr.canAddDefaultSecurityGroup()) {
      if (securityGroupIdList == null) {
        securityGroupIdList=new ArrayList<Long>();
      }
      SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());
      if (defaultGroup != null) {
        boolean defaultGroupPresent=false;
        for (        Long securityGroupId : securityGroupIdList) {
          if (securityGroupId.longValue() == defaultGroup.getId()) {
            defaultGroupPresent=true;
            break;
          }
        }
        if (!defaultGroupPresent) {
          securityGroupIdList.add(defaultGroup.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Couldn't find default security group for the account " + newAccount + " so creating a new one");
        }
        defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,newAccount.getDomainId(),newAccount.getId(),newAccount.getAccountName());
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
    List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
    NicProfile profile=new NicProfile();
    profile.setDefaultNic(true);
    networks.add(new Pair<NetworkVO,NicProfile>(networkList.get(0),profile));
    VMInstanceVO vmi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
    VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
    _networkMgr.allocate(vmProfile,networks);
    _securityGroupMgr.addInstanceToGroups(vm.getId(),securityGroupIdList);
  }
 else {
    if (zone.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException("not yet tested for SecurityGroupEnabled advanced networks.");
    }
 else {
      if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
        throw new InvalidParameterValueException("Can't move vm with security groups; security group feature is not enabled in this zone");
      }
      _networkMgr.cleanupNics(vmOldProfile);
      _networkMgr.expungeNics(vmOldProfile);
      Set<NetworkVO> applicableNetworks=new HashSet<NetworkVO>();
      if (networkIdList != null && !networkIdList.isEmpty()) {
        for (        Long networkId : networkIdList) {
          NetworkVO network=_networkDao.findById(networkId);
          if (network == null) {
            throw new InvalidParameterValueException("Unable to find network by id " + networkId);
          }
          if (network.getGuestType() != Network.GuestType.Shared) {
            List<NetworkVO> networkMap=_networkDao.listBy(newAccount.getId(),network.getId());
            if (networkMap == null || networkMap.isEmpty()) {
              throw new PermissionDeniedException("Unable to create a vm using network with id " + network.getId() + ", permission denied");
            }
          }
 else {
            if (!_networkMgr.isNetworkAvailableInDomain(networkId,newAccount.getDomainId())) {
              throw new PermissionDeniedException("Shared network id=" + networkId + " is not available in domain id="+ newAccount.getDomainId());
            }
          }
          NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
          if (networkOffering.isSystemOnly()) {
            throw new InvalidParameterValueException("Network id=" + networkId + " is system only and can't be used for vm deployment");
          }
          applicableNetworks.add(network);
        }
      }
 else {
        NetworkVO defaultNetwork=null;
        List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (requiredOfferings.size() < 1) {
          throw new InvalidParameterValueException("Unable to find network offering with availability=" + Availability.Required + " to automatically create the network as a part of vm creation");
        }
        PhysicalNetwork physicalNetwork=_networkMgr.translateZoneIdToPhysicalNetwork(zone.getId());
        if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
          List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(newAccount.getId(),zone.getId(),Network.GuestType.Isolated);
          if (virtualNetworks.isEmpty()) {
            s_logger.debug("Creating network for account " + newAccount + " from the network offering id="+ requiredOfferings.get(0).getId()+ " as a part of deployVM process");
            Network newNetwork=_networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),newAccount.getAccountName() + "-network",newAccount.getAccountName() + "-network",null,null,null,null,newAccount,false,null,physicalNetwork,zone.getId(),ACLType.Account,null);
            defaultNetwork=_networkDao.findById(newNetwork.getId());
          }
 else           if (virtualNetworks.size() > 1) {
            throw new InvalidParameterValueException("More than 1 default Isolated networks are found for account " + newAccount + "; please specify networkIds");
          }
 else {
            defaultNetwork=virtualNetworks.get(0);
          }
        }
 else {
          throw new InvalidParameterValueException("Required network offering id=" + requiredOfferings.get(0).getId() + " is not in "+ NetworkOffering.State.Enabled);
        }
        applicableNetworks.add(defaultNetwork);
      }
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
      int toggle=0;
      for (      NetworkVO appNet : applicableNetworks) {
        NicProfile defaultNic=new NicProfile();
        if (toggle == 0) {
          defaultNic.setDefaultNic(true);
          toggle++;
        }
        networks.add(new Pair<NetworkVO,NicProfile>(appNet,defaultNic));
      }
      VMInstanceVO vmi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
      VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
      _networkMgr.allocate(vmProfile,networks);
    }
  }
  return vm;
}
