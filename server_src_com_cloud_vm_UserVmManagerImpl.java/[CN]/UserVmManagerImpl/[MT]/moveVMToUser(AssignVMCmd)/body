{
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && caller.getType() != Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    throw new InvalidParameterValueException("Only domain admins are allowed to assign VMs and not " + caller.getType());
  }
  UserVmVO vm=_vmDao.findById(cmd.getVmId());
  if (vm == null) {
    throw new InvalidParameterValueException("There is no vm by that id " + cmd.getVmId());
  }
 else   if (vm.getState() == State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is Running, unable to move the vm " + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException("VM is Running, unable to move the vm with specified vmId");
    ex.addProxyObject(vm,cmd.getVmId(),"vmId");
    throw ex;
  }
  Account oldAccount=_accountService.getActiveAccountById(vm.getAccountId());
  if (oldAccount == null) {
    throw new InvalidParameterValueException("Invalid account for VM " + vm.getAccountId() + " in domain.");
  }
  if (oldAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Specified Vm id belongs to the project and can't be moved");
    ex.addProxyObject(vm,cmd.getVmId(),"vmId");
    throw ex;
  }
  Account newAccount=_accountService.getActiveAccountByName(cmd.getAccountName(),cmd.getDomainId());
  if (newAccount == null || newAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    throw new InvalidParameterValueException("Invalid accountid=" + cmd.getAccountName() + " in domain "+ cmd.getDomainId());
  }
  if (newAccount.getState() == Account.State.disabled) {
    throw new InvalidParameterValueException("The new account owner " + cmd.getAccountName() + " is disabled.");
  }
  _accountMgr.checkAccess(caller,null,true,oldAccount);
  _accountMgr.checkAccess(caller,null,true,newAccount);
  if (oldAccount.getAccountId() == newAccount.getAccountId()) {
    throw new InvalidParameterValueException("The new account is the same as the old account. Account id =" + oldAccount.getAccountId());
  }
  List<PortForwardingRuleVO> pfrules=_portForwardingDao.listByVm(cmd.getVmId());
  if (pfrules != null && pfrules.size() > 0) {
    throw new InvalidParameterValueException("Remove the Port forwarding rules for this VM before assigning to another user.");
  }
  List<FirewallRuleVO> snrules=_rulesDao.listStaticNatByVmId(vm.getId());
  if (snrules != null && snrules.size() > 0) {
    throw new InvalidParameterValueException("Remove the StaticNat rules for this VM before assigning to another user.");
  }
  List<LoadBalancerVMMapVO> maps=_loadBalancerVMMapDao.listByInstanceId(vm.getId());
  if (maps != null && maps.size() > 0) {
    throw new InvalidParameterValueException("Remove the load balancing rules for this VM before assigning to another user.");
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(cmd.getVmId());
  if (ip != null) {
    if (ip.isOneToOneNat()) {
      throw new InvalidParameterValueException("Remove the one to one nat rule for this VM for ip " + ip.toString());
    }
  }
  DataCenterVO zone=_dcDao.findById(vm.getDataCenterId());
  ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getServiceOfferingId());
  List<VolumeVO> volumes=_volsDao.findByInstance(cmd.getVmId());
  removeInstanceFromInstanceGroup(cmd.getVmId());
  resourceLimitCheck(newAccount,new Long(offering.getCpu()),new Long(offering.getRamSize()));
  _resourceLimitMgr.checkResourceLimit(newAccount,ResourceType.volume,_volsDao.findByInstance(cmd.getVmId()).size());
  Long totalVolumesSize=(long)0;
  for (  VolumeVO volume : volumes) {
    totalVolumesSize+=volume.getSize();
  }
  _resourceLimitMgr.checkResourceLimit(newAccount,ResourceType.primary_storage,totalVolumesSize);
  VirtualMachineTemplate template=_templateDao.findById(vm.getTemplateId());
  if (!template.isPublicTemplate()) {
    Account templateOwner=_accountMgr.getAccount(template.getAccountId());
    _accountMgr.checkAccess(newAccount,null,true,templateOwner);
  }
  DomainVO domain=_domainDao.findById(cmd.getDomainId());
  _accountMgr.checkAccess(newAccount,domain);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString(),VirtualMachine.class.getName(),vm.getUuid());
  resourceCountDecrement(oldAccount.getAccountId(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
  vm.setAccountId(newAccount.getAccountId());
  vm.setDomainId(cmd.getDomainId());
  _vmDao.persist(vm);
  for (  VolumeVO volume : volumes) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid());
    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(),ResourceType.volume);
    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(),ResourceType.primary_storage,new Long(volume.getSize()));
    volume.setAccountId(newAccount.getAccountId());
    volume.setDomainId(newAccount.getDomainId());
    _volsDao.persist(volume);
    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(),ResourceType.volume);
    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(),ResourceType.primary_storage,new Long(volume.getSize()));
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),volume.getDiskOfferingId(),volume.getTemplateId(),volume.getSize(),Volume.class.getName(),volume.getUuid());
    List<SnapshotVO> snapshots=_snapshotDao.listByVolumeIdIncludingRemoved(volume.getId());
    for (    SnapshotVO snapshot : snapshots) {
      _snapshotDao.remove(snapshot.getId());
    }
  }
  resourceCountIncrement(newAccount.getAccountId(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString(),VirtualMachine.class.getName(),vm.getUuid());
  txn.commit();
  VMInstanceVO vmoi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
  VirtualMachineProfileImpl<VMInstanceVO> vmOldProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmoi);
  List<Long> networkIdList=cmd.getNetworkIds();
  List<Long> securityGroupIdList=cmd.getSecurityGroupIdList();
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (networkIdList != null && !networkIdList.isEmpty()) {
      throw new InvalidParameterValueException("Can't move vm with network Ids; this is a basic zone VM");
    }
    _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());
    _networkMgr.cleanupNics(vmOldProfile);
    _networkMgr.expungeNics(vmOldProfile);
    List<NetworkVO> networkList=new ArrayList<NetworkVO>();
    Network defaultNetwork=_networkModel.getExclusiveGuestNetwork(zone.getId());
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException("Unable to find a default network to start a vm");
    }
 else {
      networkList.add(_networkDao.findById(defaultNetwork.getId()));
    }
    boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware);
    if (securityGroupIdList != null && isVmWare) {
      throw new InvalidParameterValueException("Security group feature is not supported for vmWare hypervisor");
    }
 else     if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {
      if (securityGroupIdList == null) {
        securityGroupIdList=new ArrayList<Long>();
      }
      SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());
      if (defaultGroup != null) {
        boolean defaultGroupPresent=false;
        for (        Long securityGroupId : securityGroupIdList) {
          if (securityGroupId.longValue() == defaultGroup.getId()) {
            defaultGroupPresent=true;
            break;
          }
        }
        if (!defaultGroupPresent) {
          securityGroupIdList.add(defaultGroup.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Couldn't find default security group for the account " + newAccount + " so creating a new one");
        }
        defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,newAccount.getDomainId(),newAccount.getId(),newAccount.getAccountName());
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
    List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
    NicProfile profile=new NicProfile();
    profile.setDefaultNic(true);
    networks.add(new Pair<NetworkVO,NicProfile>(networkList.get(0),profile));
    VMInstanceVO vmi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
    VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
    _networkMgr.allocate(vmProfile,networks);
    _securityGroupMgr.addInstanceToGroups(vm.getId(),securityGroupIdList);
    s_logger.debug("AssignVM: Basic zone, adding security groups no " + securityGroupIdList.size() + " to "+ vm.getInstanceName());
  }
 else {
    if (zone.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException("Not yet implemented for SecurityGroupEnabled advanced networks.");
    }
 else {
      if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
        throw new InvalidParameterValueException("Can't move vm with security groups; security group feature is not enabled in this zone");
      }
      _networkMgr.cleanupNics(vmOldProfile);
      _networkMgr.expungeNics(vmOldProfile);
      Set<NetworkVO> applicableNetworks=new HashSet<NetworkVO>();
      if (networkIdList != null && !networkIdList.isEmpty()) {
        for (        Long networkId : networkIdList) {
          NetworkVO network=_networkDao.findById(networkId);
          if (network == null) {
            InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find specified network id");
            ex.addProxyObject(network,networkId,"networkId");
            throw ex;
          }
          _networkModel.checkNetworkPermissions(newAccount,network);
          NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
          if (networkOffering.isSystemOnly()) {
            InvalidParameterValueException ex=new InvalidParameterValueException("Specified Network id is system only and can't be used for vm deployment");
            ex.addProxyObject(network,networkId,"networkId");
            throw ex;
          }
          applicableNetworks.add(network);
        }
      }
 else {
        NetworkVO defaultNetwork=null;
        List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (requiredOfferings.size() < 1) {
          throw new InvalidParameterValueException("Unable to find network offering with availability=" + Availability.Required + " to automatically create the network as a part of vm creation");
        }
        if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
          List<? extends Network> virtualNetworks=_networkModel.listNetworksForAccount(newAccount.getId(),zone.getId(),Network.GuestType.Isolated);
          if (virtualNetworks.isEmpty()) {
            long physicalNetworkId=_networkModel.findPhysicalNetworkId(zone.getId(),requiredOfferings.get(0).getTags(),requiredOfferings.get(0).getTrafficType());
            PhysicalNetwork physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
            if (physicalNetwork == null) {
              throw new InvalidParameterValueException("Unable to find physical network with id: " + physicalNetworkId + " and tag: "+ requiredOfferings.get(0).getTags());
            }
            s_logger.debug("Creating network for account " + newAccount + " from the network offering id="+ requiredOfferings.get(0).getId()+ " as a part of deployVM process");
            Network newNetwork=_networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),newAccount.getAccountName() + "-network",newAccount.getAccountName() + "-network",null,null,null,null,newAccount,null,physicalNetwork,zone.getId(),ACLType.Account,null,null,null,null,true,null);
            if (requiredOfferings.get(0).getIsPersistent()) {
              DeployDestination dest=new DeployDestination(zone,null,null,null);
              UserVO callerUser=_userDao.findById(UserContext.current().getCallerUserId());
              Journal journal=new Journal.LogJournal("Implementing " + newNetwork,s_logger);
              ReservationContext context=new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,caller);
              s_logger.debug("Implementing the network for account" + newNetwork + " as a part of"+ " network provision for persistent networks");
              try {
                Pair<NetworkGuru,NetworkVO> implementedNetwork=_networkMgr.implementNetwork(newNetwork.getId(),dest,context);
                if (implementedNetwork.first() == null) {
                  s_logger.warn("Failed to implement the network " + newNetwork);
                }
                newNetwork=implementedNetwork.second();
              }
 catch (              Exception ex) {
                s_logger.warn("Failed to implement network " + newNetwork + " elements and"+ " resources as a part of network provision for persistent network due to ",ex);
                CloudRuntimeException e=new CloudRuntimeException("Failed to implement network" + " (with specified id) elements and resources as a part of network provision");
                e.addProxyObject(newNetwork,newNetwork.getId(),"networkId");
                throw e;
              }
            }
            defaultNetwork=_networkDao.findById(newNetwork.getId());
          }
 else           if (virtualNetworks.size() > 1) {
            throw new InvalidParameterValueException("More than 1 default Isolated networks are found " + "for account " + newAccount + "; please specify networkIds");
          }
 else {
            defaultNetwork=_networkDao.findById(virtualNetworks.get(0).getId());
          }
        }
 else {
          throw new InvalidParameterValueException("Required network offering id=" + requiredOfferings.get(0).getId() + " is not in "+ NetworkOffering.State.Enabled);
        }
        applicableNetworks.add(defaultNetwork);
      }
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
      int toggle=0;
      for (      NetworkVO appNet : applicableNetworks) {
        NicProfile defaultNic=new NicProfile();
        if (toggle == 0) {
          defaultNic.setDefaultNic(true);
          toggle++;
        }
        networks.add(new Pair<NetworkVO,NicProfile>(appNet,defaultNic));
      }
      VMInstanceVO vmi=_itMgr.findByIdAndType(vm.getType(),vm.getId());
      VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmi);
      _networkMgr.allocate(vmProfile,networks);
      s_logger.debug("AssignVM: Advance virtual, adding networks no " + networks.size() + " to "+ vm.getInstanceName());
    }
  }
  s_logger.info("AssignVM: vm " + vm.getInstanceName() + " now belongs to account "+ cmd.getAccountName());
  return vm;
}
