{
  UserVmVO vm=_vmDao.findById(instanceId);
  String guestIpAddr=vm.getGuestIpAddress();
  long accountId=vm.getAccountId();
  List<SecurityGroupVMMapVO> securityGroupMappings=_securityGroupVMMapDao.listByInstanceId(vm.getId());
  for (  SecurityGroupVMMapVO securityGroupMapping : securityGroupMappings) {
    String ipAddress=securityGroupMapping.getIpAddress();
    DomainRouterVO router=null;
    if (vm.getDomainRouterId() != null)     router=_routerDao.findById(vm.getDomainRouterId());
 else     continue;
    List<FirewallRuleVO> fwRules=_rulesDao.listForwardingByPubAndPrivIp(true,ipAddress,vm.getGuestIpAddress());
    for (    FirewallRuleVO fwRule : fwRules) {
      fwRule.setEnabled(false);
    }
    List<FirewallRuleVO> updatedRules=_networkMgr.updateFirewallRules(ipAddress,fwRules,router);
    String description;
    String type=EventTypes.EVENT_NET_RULE_DELETE;
    String ruleName="ip forwarding";
    String level=EventVO.LEVEL_INFO;
    if (updatedRules != null) {
      _securityGroupVMMapDao.remove(securityGroupMapping.getId());
      for (      FirewallRuleVO updatedRule : updatedRules) {
        _rulesDao.remove(updatedRule.getId());
        description="deleted " + ruleName + " rule ["+ updatedRule.getPublicIpAddress()+ ":"+ updatedRule.getPublicPort()+ "]->["+ updatedRule.getPrivateIpAddress()+ ":"+ updatedRule.getPrivatePort()+ "]"+ " "+ updatedRule.getProtocol();
        EventVO fwRuleEvent=new EventVO();
        fwRuleEvent.setUserId(userId);
        fwRuleEvent.setAccountId(accountId);
        fwRuleEvent.setType(type);
        fwRuleEvent.setDescription(description);
        fwRuleEvent.setLevel(level);
        _eventDao.persist(fwRuleEvent);
      }
      EventVO event=new EventVO();
      event.setUserId(userId);
      event.setAccountId(vm.getAccountId());
      event.setType(EventTypes.EVENT_PORT_FORWARDING_SERVICE_REMOVE);
      event.setDescription("Successfully removed port forwarding service " + securityGroupMapping.getSecurityGroupId() + " from virtual machine "+ vm.getName());
      event.setLevel(EventVO.LEVEL_INFO);
      String params="sgId=" + securityGroupMapping.getSecurityGroupId() + "\nvmId="+ vm.getId();
      event.setParameters(params);
      _eventDao.persist(event);
    }
  }
  List<LoadBalancerVMMapVO> loadBalancerMappings=_loadBalancerVMMapDao.listByInstanceId(vm.getId());
  for (  LoadBalancerVMMapVO loadBalancerMapping : loadBalancerMappings) {
    List<FirewallRuleVO> lbRules=_rulesDao.listByLoadBalancerId(loadBalancerMapping.getLoadBalancerId());
    FirewallRuleVO targetLbRule=null;
    for (    FirewallRuleVO lbRule : lbRules) {
      if (lbRule.getPrivateIpAddress().equals(guestIpAddr)) {
        targetLbRule=lbRule;
        targetLbRule.setEnabled(false);
        break;
      }
    }
    if (targetLbRule != null) {
      String ipAddress=targetLbRule.getPublicIpAddress();
      DomainRouterVO router=_routerDao.findById(vm.getDomainRouterId());
      _networkMgr.updateFirewallRules(ipAddress,lbRules,router);
      _rulesDao.remove(targetLbRule.getId());
      _loadBalancerVMMapDao.remove(loadBalancerMapping.getId());
      EventVO lbRuleEvent=new EventVO();
      lbRuleEvent.setUserId(userId);
      lbRuleEvent.setAccountId(accountId);
      lbRuleEvent.setType(EventTypes.EVENT_NET_RULE_DELETE);
      lbRuleEvent.setDescription("deleted load balancer rule [" + targetLbRule.getPublicIpAddress() + ":"+ targetLbRule.getPublicPort()+ "]->["+ targetLbRule.getPrivateIpAddress()+ ":"+ targetLbRule.getPrivatePort()+ "]"+ " "+ targetLbRule.getAlgorithm());
      lbRuleEvent.setLevel(EventVO.LEVEL_INFO);
      _eventDao.persist(lbRuleEvent);
    }
  }
}
