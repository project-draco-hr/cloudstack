@attr(speed='slow')
@attr(tags=['advanced', 'advancedns', 'basic', 'sg'])
def test_02_accountSnapshotClean(self):
    'Test snapshot cleanup after account deletion\n        '
    accounts = list_accounts(self.apiclient, id=self.account.id)
    self.assertEqual(isinstance(accounts, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(accounts), 0, 'Check list Accounts response')
    virtual_machines = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(virtual_machines, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(virtual_machines), 0, 'Check list virtual machines response')
    for virtual_machine in virtual_machines:
        self.debug(('VM ID: %s, VM state: %s' % (virtual_machine.id, virtual_machine.state)))
        self.assertEqual(virtual_machine.state, 'Running', 'Check list VM response for Running state')
    snapshots = list_snapshots(self.apiclient, id=self.snapshot.id)
    self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(snapshots, None, ('No such snapshot %s found' % self.snapshot.id))
    self.assertEqual(snapshots[0].id, self.snapshot.id, 'Check snapshot id in list resources call')
    qresultset = self.dbclient.execute(("select id from snapshots where uuid = '%s';" % self.snapshot.id))
    self.assertEqual(isinstance(qresultset, list), True, ('Invalid db query response for snapshot %s' % self.snapshot.id))
    self.assertNotEqual(len(qresultset), 0, ('No such snapshot %s found in the cloudstack db' % self.snapshot.id))
    qresult = qresultset[0]
    snapshot_id = qresult[0]
    self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config.mgtSvr, self.services['paths'], self.zone.id, snapshot_id), 'Snapshot was not found on NFS')
    self.debug(('Deleting account: %s' % self.account.name))
    self.account.delete(self.apiclient)
    wait_for_cleanup(self.apiclient, configs=['account.cleanup.interval'])
    accounts = list_accounts(self.apiclient, id=self.account.id)
    self.assertEqual(accounts, None, 'List accounts should return empty list after account deletion')
    self.assertFalse(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config.mgtSvr, self.services['paths'], self.zone.id, snapshot_id), 'Snapshot was still found no NFS after account gc')
    return
