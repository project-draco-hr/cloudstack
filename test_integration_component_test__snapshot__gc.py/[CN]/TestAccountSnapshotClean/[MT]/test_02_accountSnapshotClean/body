@attr(speed='slow')
@attr(tags=['advanced', 'advancedns', 'basic', 'sg'], required_hardware='true')
def test_02_accountSnapshotClean(self):
    'Test snapshot cleanup after account deletion\n        '
    try:
        accounts = list_accounts(self.apiclient, id=self.account.id)
        self.assertEqual(isinstance(accounts, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(len(accounts), 0, 'Check list Accounts response')
        snapshots = list_snapshots(self.apiclient, id=self.snapshot.id)
        self.assertEqual(isinstance(snapshots, list), True, 'Check list response returns a valid list')
        self.assertNotEqual(snapshots, None, ('No such snapshot %s found' % self.snapshot.id))
        self.assertEqual(snapshots[0].id, self.snapshot.id, 'Check snapshot id in list resources call')
        self.assertTrue(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, self.snapshot.id), 'Snapshot was not found on NFS')
    except Exception as e:
        self._cleanup.append(self.account)
        self.fail(('Exception occured: %s' % e))
    self.debug(('Deleting account: %s' % self.account.name))
    self.account.delete(self.apiclient)
    wait_for_cleanup(self.apiclient, configs=['account.cleanup.interval'])
    with self.assertRaises(Exception):
        accounts = list_accounts(self.apiclient, id=self.account.id)
    self.assertFalse(is_snapshot_on_nfs(self.apiclient, self.dbclient, self.config, self.zone.id, self.snapshot.id), 'Snapshot was still found on NFS after account gc')
    return
