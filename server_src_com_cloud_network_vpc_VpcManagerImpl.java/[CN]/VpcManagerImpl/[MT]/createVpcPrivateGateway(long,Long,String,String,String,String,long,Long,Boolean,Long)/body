{
  Vpc vpc=getActiveVpc(vpcId);
  if (vpc == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find Enabled VPC by id specified");
    ex.addProxyObject(String.valueOf(vpcId),"VPC");
    throw ex;
  }
  PhysicalNetwork physNet=null;
  if (physicalNetworkId == null) {
    List<? extends PhysicalNetwork> pNtwks=_ntwkModel.getPhysicalNtwksSupportingTrafficType(vpc.getZoneId(),TrafficType.Guest);
    if (pNtwks.isEmpty() || pNtwks.size() != 1) {
      throw new InvalidParameterValueException("Physical network can't be determined; pass physical network id");
    }
    physNet=pNtwks.get(0);
    physicalNetworkId=physNet.getId();
  }
  if (physNet == null) {
    physNet=_entityMgr.findById(PhysicalNetwork.class,physicalNetworkId);
  }
  Long dcId=physNet.getDataCenterId();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug("Creating Private gateway for VPC " + vpc);
  Network privateNtwk=null;
  if (BroadcastDomainType.getSchemeValue(BroadcastDomainType.fromString(broadcastUri)) == BroadcastDomainType.Lswitch) {
    String cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
    privateNtwk=_ntwkDao.getPrivateNetwork(broadcastUri,cidr,gatewayOwnerId,dcId,networkOfferingId);
    s_logger.info("found and using existing network for vpc " + vpc + ": "+ broadcastUri);
  }
  if (privateNtwk == null) {
    s_logger.info("creating new network for vpc " + vpc + " using broadcast uri: "+ broadcastUri);
    String networkName="vpc-" + vpc.getName() + "-privateNetwork";
    privateNtwk=_ntwkSvc.createPrivateNetwork(networkName,networkName,physicalNetworkId,broadcastUri,ipAddress,null,gateway,netmask,gatewayOwnerId,vpcId,isSourceNat,networkOfferingId);
  }
 else {
    DataCenterVO dc=_dcDao.lockRow(physNet.getDataCenterId(),true);
    PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkId(privateNtwk.getId(),ipAddress);
    if (privateIp != null) {
      throw new InvalidParameterValueException("Private ip address " + ipAddress + " already used for private gateway"+ " in zone "+ _entityMgr.findById(DataCenter.class,dcId).getName());
    }
    Long mac=dc.getMacAddress();
    Long nextMac=mac + 1;
    dc.setMacAddress(nextMac);
    privateIp=new PrivateIpVO(ipAddress,privateNtwk.getId(),nextMac,vpcId,true);
    _privateIpDao.persist(privateIp);
    _dcDao.update(dc.getId(),dc);
  }
  long networkAclId=NetworkACL.DEFAULT_DENY;
  if (aclId != null) {
    NetworkACLVO aclVO=_networkAclDao.findById(aclId);
    if (aclVO == null) {
      throw new InvalidParameterValueException("Invalid network acl id passed ");
    }
    if ((aclVO.getVpcId() != vpcId) && !(aclId == NetworkACL.DEFAULT_DENY || aclId == NetworkACL.DEFAULT_ALLOW)) {
      throw new InvalidParameterValueException("Private gateway and network acl are not in the same vpc");
    }
    networkAclId=aclId;
  }
  VpcGatewayVO gatewayVO=new VpcGatewayVO(ipAddress,VpcGateway.Type.Private,vpcId,privateNtwk.getDataCenterId(),privateNtwk.getId(),broadcastUri,gateway,netmask,vpc.getAccountId(),vpc.getDomainId(),isSourceNat,networkAclId);
  _vpcGatewayDao.persist(gatewayVO);
  s_logger.debug("Created vpc gateway entry " + gatewayVO);
  txn.commit();
  return getVpcPrivateGateway(gatewayVO.getId());
}
