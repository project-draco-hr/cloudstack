{
  final VpcGatewayVO gatewayVO=_vpcGatewayDao.acquireInLockTable(gatewayId);
  if (gatewayVO == null || gatewayVO.getType() != VpcGateway.Type.Private) {
    throw new ConcurrentOperationException("Unable to lock gateway " + gatewayId);
  }
  try {
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      final TransactionStatus status){
        final long routeCount=_staticRouteDao.countRoutesByGateway(gatewayVO.getId());
        if (routeCount > 0) {
          throw new CloudRuntimeException("Can't delete private gateway " + gatewayVO + " as it has "+ routeCount+ " static routes applied. Remove the routes first");
        }
        gatewayVO.setState(VpcGateway.State.Deleting);
        _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
        s_logger.debug("Marked gateway " + gatewayVO + " with state "+ VpcGateway.State.Deleting);
      }
    }
);
    final List<Provider> providersToImplement=getVpcProviders(gatewayVO.getVpcId());
    final PrivateGateway gateway=getVpcPrivateGateway(gatewayId);
    for (    final VpcProvider provider : getVpcElements()) {
      if (providersToImplement.contains(provider.getProvider())) {
        if (provider.deletePrivateGateway(gateway)) {
          s_logger.debug("Private gateway " + gateway + " was applied succesfully on the backend");
        }
 else {
          s_logger.warn("Private gateway " + gateway + " failed to apply on the backend");
          gatewayVO.setState(VpcGateway.State.Ready);
          _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
          s_logger.debug("Marked gateway " + gatewayVO + " with state "+ VpcGateway.State.Ready);
          return false;
        }
      }
    }
    return deletePrivateGatewayFromTheDB(gateway);
  }
  finally {
    if (gatewayVO != null) {
      _vpcGatewayDao.releaseFromLockTable(gatewayId);
    }
  }
}
