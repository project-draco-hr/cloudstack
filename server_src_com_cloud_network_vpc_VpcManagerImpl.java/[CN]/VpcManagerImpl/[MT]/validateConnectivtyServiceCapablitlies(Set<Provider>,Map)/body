{
  if (serviceCapabilitystList != null && !serviceCapabilitystList.isEmpty()) {
    Collection serviceCapabilityCollection=serviceCapabilitystList.values();
    Iterator iter=serviceCapabilityCollection.iterator();
    Map<Network.Capability,String> capabilityMap=null;
    while (iter.hasNext()) {
      HashMap<String,String> svcCapabilityMap=(HashMap<String,String>)iter.next();
      Network.Capability capability=null;
      String svc=svcCapabilityMap.get("service");
      String capabilityName=svcCapabilityMap.get("capabilitytype");
      String capabilityValue=svcCapabilityMap.get("capabilityvalue");
      if (capabilityName != null) {
        capability=Network.Capability.getCapability(capabilityName);
      }
      if ((capability == null) || (capabilityName == null) || (capabilityValue == null)) {
        throw new InvalidParameterValueException("Invalid capability:" + capabilityName + " capability value:"+ capabilityValue);
      }
      if (!svc.equalsIgnoreCase(Service.Connectivity.getName())) {
        throw new InvalidParameterValueException("Invalid Service:" + svc + " specified. Only for 'Connectivity' service capabilities can be specified");
      }
      if (!capabilityName.equalsIgnoreCase("DistributedRouter")) {
        throw new InvalidParameterValueException("Invalid Capability:" + capabilityName + " specified. Only 'DistributedRouter' capability can be specified.");
      }
      if (!capabilityValue.equalsIgnoreCase("true") && capabilityValue.equalsIgnoreCase("false")) {
        throw new InvalidParameterValueException("Invalid Capability value:" + capabilityValue + " specified.");
      }
    }
    if (providers != null && !providers.isEmpty()) {
      for (      Provider provider : providers) {
        NetworkElement element=_ntwkModel.getElementImplementingProvider(provider.getName());
        Map<Service,Map<Network.Capability,String>> capabilities=element.getCapabilities();
        if (capabilities != null && !capabilities.isEmpty()) {
          Map<Network.Capability,String> connectivityCapabilities=capabilities.get(Service.Connectivity);
          if (connectivityCapabilities == null || (connectivityCapabilities != null && !connectivityCapabilities.keySet().contains(Network.Capability.DistributedRouter))) {
            throw new InvalidParameterValueException("Provider: " + provider.getName() + " does not support "+ Network.Capability.DistributedRouter.getName()+ " capability.");
          }
        }
      }
    }
  }
}
