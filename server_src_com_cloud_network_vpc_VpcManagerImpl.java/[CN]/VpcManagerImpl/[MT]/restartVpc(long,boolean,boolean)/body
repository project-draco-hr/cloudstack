{
  final Account caller=CallContext.current().getCallingAccount();
  final Vpc vpc=getActiveVpc(vpcId);
  if (vpc == null) {
    final InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find Enabled VPC by id specified");
    ex.addProxyObject(String.valueOf(vpcId),"VPC");
    throw ex;
  }
  _accountMgr.checkAccess(caller,null,false,vpc);
  logger.debug("Restarting VPC " + vpc);
  boolean restartRequired=false;
  try {
    boolean forceCleanup=cleanUp;
    if (!vpc.isRedundant() && makeRedundant) {
      final VpcOfferingVO redundantOffering=_vpcOffDao.findByUniqueName(VpcOffering.redundantVPCOfferingName);
      final VpcVO entity=_vpcDao.findById(vpcId);
      entity.setRedundant(makeRedundant);
      entity.setVpcOfferingId(redundantOffering.getId());
      _vpcDao.update(vpc.getId(),entity);
      forceCleanup=true;
    }
    if (forceCleanup) {
      logger.debug("Shutting down VPC " + vpc + " as a part of VPC restart process");
      if (!shutdownVpc(vpcId)) {
        logger.warn("Failed to shutdown vpc as a part of VPC " + vpc + " restart process");
        restartRequired=true;
        return false;
      }
    }
 else {
      logger.info("Will not shutdown vpc as a part of VPC " + vpc + " restart process.");
    }
    logger.debug("Starting VPC " + vpc + " as a part of VPC restart process");
    if (!startVpc(vpcId,false)) {
      logger.warn("Failed to start vpc as a part of VPC " + vpc + " restart process");
      restartRequired=true;
      return false;
    }
    logger.debug("VPC " + vpc + " was restarted successfully");
    return true;
  }
  finally {
    logger.debug("Updating VPC " + vpc + " with restartRequired="+ restartRequired);
    final VpcVO vo=_vpcDao.findById(vpcId);
    vo.setRestartRequired(restartRequired);
    _vpcDao.update(vpc.getId(),vo);
  }
}
