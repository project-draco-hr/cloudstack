{
  Map<Network.Service,Set<Network.Provider>> svcProviderMap=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Provider.VPCVirtualRouter);
  boolean sourceNatSvc=false;
  boolean firewallSvs=false;
  for (  String serviceName : supportedServices) {
    Service service=Network.Service.getService(serviceName);
    if (service == null || nonSupportedServices.contains(service)) {
      throw new InvalidParameterValueException("Service " + serviceName + " is not supported in VPC");
    }
    svcProviderMap.put(service,defaultProviders);
    if (service == Service.NetworkACL) {
      firewallSvs=true;
    }
    if (service == Service.SourceNat) {
      sourceNatSvc=true;
    }
  }
  if (!sourceNatSvc) {
    s_logger.debug("Automatically adding source nat service to the list of VPC services");
    svcProviderMap.put(Service.SourceNat,defaultProviders);
  }
  if (!firewallSvs) {
    s_logger.debug("Automatically adding network ACL service to the list of VPC services");
    svcProviderMap.put(Service.NetworkACL,defaultProviders);
  }
  svcProviderMap.put(Service.Gateway,defaultProviders);
  VpcOffering offering=createVpcOffering(name,displayText,svcProviderMap,false,null);
  UserContext.current().setEventDetails(" Id: " + offering.getId() + " Name: "+ name);
  return offering;
}
