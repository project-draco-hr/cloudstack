{
  final String ipAddress=cmd.getIpAddress();
  final String vlan=cmd.getVlan();
  final Long vpcId=cmd.getVpcId();
  final Long id=cmd.getId();
  Boolean isRecursive=cmd.isRecursive();
  final Boolean listAll=cmd.listAll();
  Long domainId=cmd.getDomainId();
  final String accountName=cmd.getAccountName();
  final Account caller=CallContext.current().getCallingAccount();
  final List<Long> permittedAccounts=new ArrayList<Long>();
  final String state=cmd.getState();
  final Long projectId=cmd.getProjectId();
  final Filter searchFilter=new Filter(VpcGatewayVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  final Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,false);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  final ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  final SearchBuilder<VpcGatewayVO> sb=_vpcGatewayDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (vlan != null) {
    final SearchBuilder<NetworkVO> ntwkSearch=_ntwkDao.createSearchBuilder();
    ntwkSearch.and("vlan",ntwkSearch.entity().getBroadcastUri(),SearchCriteria.Op.EQ);
    sb.join("networkSearch",ntwkSearch,sb.entity().getNetworkId(),ntwkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  final SearchCriteria<VpcGatewayVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.addAnd("id",Op.EQ,id);
  }
  if (ipAddress != null) {
    sc.addAnd("ip4Address",Op.EQ,ipAddress);
  }
  if (state != null) {
    sc.addAnd("state",Op.EQ,state);
  }
  if (vpcId != null) {
    sc.addAnd("vpcId",Op.EQ,vpcId);
  }
  if (vlan != null) {
    sc.setJoinParameters("networkSearch","vlan",BroadcastDomainType.Vlan.toUri(vlan));
  }
  final Pair<List<VpcGatewayVO>,Integer> vos=_vpcGatewayDao.searchAndCount(sc,searchFilter);
  final List<PrivateGateway> privateGtws=new ArrayList<PrivateGateway>(vos.first().size());
  for (  final VpcGateway vo : vos.first()) {
    privateGtws.add(getPrivateGatewayProfile(vo));
  }
  return new Pair<List<PrivateGateway>,Integer>(privateGtws,vos.second());
}
