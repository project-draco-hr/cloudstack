{
  final NetworkOffering guestNtwkOff=_entityMgr.findById(NetworkOffering.class,newNtwkOffId);
  if (guestNtwkOff == null) {
    throw new InvalidParameterValueException("Can't find network offering by id specified");
  }
  if (networkId == null) {
    validateNewVpcGuestNetwork(newCidr,gateway,networkOwner,vpc,newNetworkDomain);
  }
  final List<Service> svcs=_ntwkModel.listNetworkOfferingServices(guestNtwkOff.getId());
  validateNtwkOffForVpc(guestNtwkOff,svcs);
  final List<NetworkOfferingServiceMapVO> networkProviders=_ntwkOffServiceDao.listByNetworkOfferingId(guestNtwkOff.getId());
  for (  final NetworkOfferingServiceMapVO nSvcVO : networkProviders) {
    final String pr=nSvcVO.getProvider();
    final String service=nSvcVO.getService();
    if (_vpcOffServiceDao.findByServiceProviderAndOfferingId(service,pr,vpc.getVpcOfferingId()) == null) {
      throw new InvalidParameterValueException("Service/provider combination " + service + "/"+ pr+ " is not supported by VPC "+ vpc);
    }
  }
  if (_ntwkModel.areServicesSupportedByNetworkOffering(guestNtwkOff.getId(),Service.Lb) && guestNtwkOff.getPublicLb()) {
    final List<? extends Network> networks=getVpcNetworks(vpc.getId());
    for (    final Network network : networks) {
      if (networkId != null && network.getId() == networkId.longValue()) {
        continue;
      }
 else {
        final NetworkOffering otherOff=_entityMgr.findById(NetworkOffering.class,network.getNetworkOfferingId());
        if (_ntwkModel.areServicesSupportedInNetwork(network.getId(),Service.Lb) && otherOff.getPublicLb() && guestNtwkOff.getId() != otherOff.getId()) {
          throw new InvalidParameterValueException("Public LB service is already supported " + "by network " + network + " in VPC "+ vpc);
        }
      }
    }
  }
  if (aclId != null && !_ntwkModel.areServicesSupportedByNetworkOffering(guestNtwkOff.getId(),Service.NetworkACL)) {
    throw new InvalidParameterValueException("Cannot apply NetworkACL. Network Offering does not support NetworkACL service");
  }
}
