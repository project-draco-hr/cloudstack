{
  return Transaction.execute(new TransactionCallback<VpcOffering>(){
    @Override public VpcOffering doInTransaction(    final TransactionStatus status){
      VpcOfferingVO offering=new VpcOfferingVO(name,displayText,isDefault,serviceOfferingId,supportsDistributedRouter,offersRegionLevelVPC,redundantRouter);
      if (state != null) {
        offering.setState(state);
      }
      s_logger.debug("Adding vpc offering " + offering);
      offering=_vpcOffDao.persist(offering);
      if (svcProviderMap != null) {
        for (        final Network.Service service : svcProviderMap.keySet()) {
          final Set<Provider> providers=svcProviderMap.get(service);
          if (providers != null && !providers.isEmpty()) {
            for (            final Network.Provider provider : providers) {
              final VpcOfferingServiceMapVO offService=new VpcOfferingServiceMapVO(offering.getId(),service,provider);
              _vpcOffSvcMapDao.persist(offService);
              s_logger.trace("Added service for the vpc offering: " + offService + " with provider "+ provider.getName());
            }
          }
 else {
            throw new InvalidParameterValueException("Provider is missing for the VPC offering service " + service.getName());
          }
        }
      }
      return offering;
    }
  }
);
}
