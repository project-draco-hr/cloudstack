{
  Long id=cmd.getId();
  Long gatewayId=cmd.getGatewayId();
  Long vpcId=cmd.getVpcId();
  Long domainId=cmd.getDomainId();
  Boolean isRecursive=cmd.isRecursive();
  Boolean listAll=cmd.listAll();
  String accountName=cmd.getAccountName();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,null,permittedAccounts,domainIdRecursiveListProject,listAll,false);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(StaticRouteVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<StaticRouteVO> sb=_staticRouteDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("vpcId",sb.entity().getVpcId(),SearchCriteria.Op.EQ);
  sb.and("vpcGatewayId",sb.entity().getVpcGatewayId(),SearchCriteria.Op.EQ);
  SearchCriteria<StaticRouteVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.addAnd("id",Op.EQ,id);
  }
  if (vpcId != null) {
    sc.addAnd("vpcId",Op.EQ,vpcId);
  }
  if (gatewayId != null) {
    sc.addAnd("vpcGatewayId",Op.EQ,gatewayId);
  }
  return _staticRouteDao.search(sc,searchFilter);
}
