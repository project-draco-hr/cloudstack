{
  final long networkId=gateway.getNetworkId();
  boolean deleteNetwork=true;
  List<PrivateIpVO> privateIps=_privateIpDao.listByNetworkId(networkId);
  if (privateIps.size() > 1 || !privateIps.get(0).getIpAddress().equalsIgnoreCase(gateway.getIp4Address())) {
    s_logger.debug("Not removing network id=" + gateway.getNetworkId() + " as it has private ip addresses for other gateways");
    deleteNetwork=false;
  }
  final boolean deleteNetworkFinal=deleteNetwork;
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      PrivateIpVO ip=_privateIpDao.findByIpAndVpcId(gateway.getVpcId(),gateway.getIp4Address());
      if (ip != null) {
        _privateIpDao.remove(ip.getId());
        s_logger.debug("Deleted private ip " + ip);
      }
      if (deleteNetworkFinal) {
        User callerUser=_accountMgr.getActiveUser(CallContext.current().getCallingUserId());
        Account owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
        ReservationContext context=new ReservationContextImpl(null,null,callerUser,owner);
        _ntwkMgr.destroyNetwork(networkId,context,false);
        s_logger.debug("Deleted private network id=" + networkId);
      }
      _vpcGatewayDao.remove(gateway.getId());
      s_logger.debug("Deleted private gateway " + gateway);
    }
  }
);
  return true;
}
