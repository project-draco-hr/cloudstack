{
  final CallContext ctx=CallContext.current();
  final Account caller=ctx.getCallingAccount();
  final User callerUser=_accountMgr.getActiveUser(ctx.getCallingUserId());
  final Vpc vpc=getActiveVpc(vpcId);
  if (vpc == null) {
    final InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find Enabled VPC by id specified");
    ex.addProxyObject(String.valueOf(vpcId),"VPC");
    throw ex;
  }
  _accountMgr.checkAccess(caller,null,false,vpc);
  final DataCenter dc=_entityMgr.findById(DataCenter.class,vpc.getZoneId());
  final DeployDestination dest=new DeployDestination(dc,null,null,null);
  final ReservationContext context=new ReservationContextImpl(null,null,callerUser,_accountMgr.getAccount(vpc.getAccountId()));
  boolean result=true;
  try {
    if (!startVpc(vpc,dest,context)) {
      logger.warn("Failed to start vpc " + vpc);
      result=false;
    }
  }
 catch (  final Exception ex) {
    logger.warn("Failed to start vpc " + vpc + " due to ",ex);
    result=false;
  }
 finally {
    if (!result && destroyOnFailure) {
      logger.debug("Destroying vpc " + vpc + " that failed to start");
      if (destroyVpc(vpc,caller,callerUser.getId())) {
        logger.warn("Successfully destroyed vpc " + vpc + " that failed to start");
      }
 else {
        logger.warn("Failed to destroy vpc " + vpc + " that failed to start");
      }
    }
  }
  return result;
}
