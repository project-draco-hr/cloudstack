{
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    final TransactionStatus status){
      if (_vpcOffDao.findByUniqueName(VpcOffering.defaultVPCOfferingName) == null) {
        logger.debug("Creating default VPC offering " + VpcOffering.defaultVPCOfferingName);
        final Map<Service,Set<Provider>> svcProviderMap=new HashMap<Service,Set<Provider>>();
        final Set<Provider> defaultProviders=new HashSet<Provider>();
        defaultProviders.add(Provider.VPCVirtualRouter);
        for (        final Service svc : getSupportedServices()) {
          if (svc == Service.Lb) {
            final Set<Provider> lbProviders=new HashSet<Provider>();
            lbProviders.add(Provider.VPCVirtualRouter);
            lbProviders.add(Provider.InternalLbVm);
            svcProviderMap.put(svc,lbProviders);
          }
 else {
            svcProviderMap.put(svc,defaultProviders);
          }
        }
        createVpcOffering(VpcOffering.defaultVPCOfferingName,VpcOffering.defaultVPCOfferingName,svcProviderMap,true,State.Enabled,null,false,false,false);
      }
      if (_vpcOffDao.findByUniqueName(VpcOffering.defaultVPCNSOfferingName) == null) {
        logger.debug("Creating default VPC offering with Netscaler as LB Provider" + VpcOffering.defaultVPCNSOfferingName);
        final Map<Service,Set<Provider>> svcProviderMap=new HashMap<Service,Set<Provider>>();
        final Set<Provider> defaultProviders=new HashSet<Provider>();
        defaultProviders.add(Provider.VPCVirtualRouter);
        for (        final Service svc : getSupportedServices()) {
          if (svc == Service.Lb) {
            final Set<Provider> lbProviders=new HashSet<Provider>();
            lbProviders.add(Provider.Netscaler);
            lbProviders.add(Provider.InternalLbVm);
            svcProviderMap.put(svc,lbProviders);
          }
 else {
            svcProviderMap.put(svc,defaultProviders);
          }
        }
        createVpcOffering(VpcOffering.defaultVPCNSOfferingName,VpcOffering.defaultVPCNSOfferingName,svcProviderMap,false,State.Enabled,null,false,false,false);
      }
      if (_vpcOffDao.findByUniqueName(VpcOffering.redundantVPCOfferingName) == null) {
        logger.debug("Creating Redundant VPC offering " + VpcOffering.redundantVPCOfferingName);
        final Map<Service,Set<Provider>> svcProviderMap=new HashMap<Service,Set<Provider>>();
        final Set<Provider> defaultProviders=new HashSet<Provider>();
        defaultProviders.add(Provider.VPCVirtualRouter);
        for (        final Service svc : getSupportedServices()) {
          if (svc == Service.Lb) {
            final Set<Provider> lbProviders=new HashSet<Provider>();
            lbProviders.add(Provider.VPCVirtualRouter);
            lbProviders.add(Provider.InternalLbVm);
            svcProviderMap.put(svc,lbProviders);
          }
 else {
            svcProviderMap.put(svc,defaultProviders);
          }
        }
        createVpcOffering(VpcOffering.redundantVPCOfferingName,VpcOffering.redundantVPCOfferingName,svcProviderMap,true,State.Enabled,null,false,false,true);
      }
    }
  }
);
  final Map<String,String> configs=_configDao.getConfiguration(params);
  final String value=configs.get(Config.VpcCleanupInterval.key());
  _cleanupInterval=NumbersUtil.parseInt(value,60 * 60);
  final String maxNtwks=configs.get(Config.VpcMaxNetworks.key());
  _maxNetworks=NumbersUtil.parseInt(maxNtwks,3);
  IpAddressSearch=_ipAddressDao.createSearchBuilder();
  IpAddressSearch.and("accountId",IpAddressSearch.entity().getAllocatedToAccountId(),Op.EQ);
  IpAddressSearch.and("dataCenterId",IpAddressSearch.entity().getDataCenterId(),Op.EQ);
  IpAddressSearch.and("vpcId",IpAddressSearch.entity().getVpcId(),Op.EQ);
  IpAddressSearch.and("associatedWithNetworkId",IpAddressSearch.entity().getAssociatedWithNetworkId(),Op.EQ);
  final SearchBuilder<VlanVO> virtualNetworkVlanSB=_vlanDao.createSearchBuilder();
  virtualNetworkVlanSB.and("vlanType",virtualNetworkVlanSB.entity().getVlanType(),Op.EQ);
  IpAddressSearch.join("virtualNetworkVlanSB",virtualNetworkVlanSB,IpAddressSearch.entity().getVlanId(),virtualNetworkVlanSB.entity().getId(),JoinBuilder.JoinType.INNER);
  IpAddressSearch.done();
  return true;
}
