{
  _name=name;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (_vpcOffDao.findByUniqueName(VpcOffering.defaultVPCOfferingName) == null) {
    s_logger.debug("Creating default VPC offering " + VpcOffering.defaultVPCOfferingName);
    Map<Service,Set<Provider>> svcProviderMap=new HashMap<Service,Set<Provider>>();
    Set<Provider> defaultProviders=new HashSet<Provider>();
    defaultProviders.add(Provider.VPCVirtualRouter);
    for (    Service svc : getSupportedServices()) {
      if (svc == Service.Lb) {
        Set<Provider> lbProviders=new HashSet<Provider>();
        lbProviders.add(Provider.VPCVirtualRouter);
        lbProviders.add(Provider.Netscaler);
        svcProviderMap.put(svc,lbProviders);
      }
 else {
        svcProviderMap.put(svc,defaultProviders);
      }
    }
    createVpcOffering(VpcOffering.defaultVPCOfferingName,VpcOffering.defaultVPCOfferingName,svcProviderMap,true,State.Enabled);
  }
  txn.commit();
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  Map<String,String> configs=configDao.getConfiguration(params);
  String value=configs.get(Config.VpcCleanupInterval.key());
  _cleanupInterval=NumbersUtil.parseInt(value,60 * 60);
  String maxNtwks=configs.get(Config.VpcMaxNetworks.key());
  _maxNetworks=NumbersUtil.parseInt(maxNtwks,3);
  return true;
}
