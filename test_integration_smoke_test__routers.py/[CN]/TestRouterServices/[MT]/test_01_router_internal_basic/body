@attr(tags=['advanced', 'basic', 'sg', 'smoke'], required_hardware='true')
def test_01_router_internal_basic(self):
    'Test router internal basic zone\n        '
    if (self.zone.networktype == 'Basic'):
        list_router_response = list_routers(self.apiclient, listall='true')
    else:
        list_router_response = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list host returns a valid list')
    host = hosts[0]
    self.debug(('Router ID: %s, state: %s' % (router.id, router.state)))
    self.assertEqual(router.state, 'Running', 'Check list router response for router state')
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, 'service dnsmasq status', hypervisor=self.hypervisor)
    else:
        try:
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            result = get_process_status(host.ipaddress, 22, host.user, host.passwd, router.linklocalip, 'service dnsmasq status')
        except KeyError:
            self.skipTest('Marvin configuration has no host credentials to                            check router services')
    res = str(result)
    self.debug(('Dnsmasq process status: %s' % res))
    self.assertEqual(res.count('running'), 1, 'Check dnsmasq service is running or not')
    return
