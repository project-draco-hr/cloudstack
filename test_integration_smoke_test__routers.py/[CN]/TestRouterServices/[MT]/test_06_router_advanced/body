def test_06_router_advanced(self):
    'Test router advanced setup\n        '
    list_router_response = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_router_response), 0, 'Check list router response')
    for router in list_router_response:
        self.assertEqual(router.state, 'Running', 'Check list router response for router state')
        zones = list_zones(self.apiclient, id=router.zoneid)
        self.assertEqual(isinstance(zones, list), True, 'Check list response returns a valid list')
        zone = zones[0]
        self.assertEqual(router.dns1, zone.dns1, 'Compare DNS1 of router and zone')
        self.assertEqual(router.dns2, zone.dns2, 'Compare DNS2 of router and zone')
        self.assertEqual(hasattr(router, 'guestipaddress'), True, 'Check whether router has guest IP field')
        self.assertEqual(hasattr(router, 'linklocalip'), True, 'Check whether router has link local IP field')
        ipranges_response = list_vlan_ipranges(self.apiclient, zoneid=router.zoneid)
        self.assertEqual(isinstance(ipranges_response, list), True, 'Check list response returns a valid list')
        iprange = ipranges_response[0]
        self.assertEqual(router.gateway, iprange.gateway, 'Check gateway with that of corresponding IP range')
    return
