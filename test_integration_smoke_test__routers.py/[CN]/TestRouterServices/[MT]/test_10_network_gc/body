def test_10_network_gc(self):
    'Test network GC\n        '
    list_vms = list_virtual_machines(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(list_vms, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_vms), 0, 'Check length of list VM response')
    for vm in list_vms:
        self.debug(('Stopping the VM with ID: %s' % vm.id))
        cmd = stopVirtualMachine.stopVirtualMachineCmd()
        cmd.id = vm.id
        self.apiclient.stopVirtualMachine(cmd)
    config = list_configurations(self.apiclient, name='network.gc.interval')
    self.assertEqual(isinstance(config, list), True, 'Check list response returns a valid list')
    gcinterval = config[0]
    config = list_configurations(self.apiclient, name='network.gc.wait')
    self.assertEqual(isinstance(config, list), True, 'Check list response returns a valid list')
    gcwait = config[0]
    total_wait = (int(gcinterval.value) + int(gcwait.value))
    time.sleep((total_wait * 2))
    timeout = self.services['timeout']
    while True:
        list_router_response = list_routers(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
        if isinstance(list_router_response, list):
            break
        elif (timeout == 0):
            raise Exception('List router call failed!')
        time.sleep(5)
        timeout = (timeout - 1)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    self.debug(('Router state after network.gc.interval: %s' % router.state))
    self.assertEqual(router.state, 'Stopped', 'Check state of the router after stopping all VMs associated')
    return
