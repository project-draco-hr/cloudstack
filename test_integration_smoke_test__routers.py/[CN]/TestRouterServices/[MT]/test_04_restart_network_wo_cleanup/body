@attr(tags=['advanced', 'advancedns', 'smoke'], required_hardware='true')
def test_04_restart_network_wo_cleanup(self):
    'Test restart network without cleanup\n        '
    timeout = 10
    while True:
        networks = list_networks(self.apiclient, account=self.account.name, domainid=self.account.domainid)
        self.assertEqual(isinstance(networks, list), True, 'Check list response returns a valid list')
        network = networks[0]
        if (network.state in ['Implemented', 'Setup']):
            break
        elif (timeout == 0):
            break
        else:
            time.sleep(self.services['sleep'])
            timeout = (timeout - 1)
    self.debug(('Restarting network with ID: %s, Network state: %s' % (network.id, network.state)))
    cmd = restartNetwork.restartNetworkCmd()
    cmd.id = network.id
    cmd.cleanup = False
    self.apiclient.restartNetwork(cmd)
    list_router_response = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(list_router_response, list), True, 'Check list response returns a valid list')
    router = list_router_response[0]
    hosts = list_hosts(self.apiclient, zoneid=router.zoneid, type='Routing', state='Up', id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    host = hosts[0]
    if (self.hypervisor.lower() == 'vmware'):
        res = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, 'uptime', hypervisor=self.hypervisor)
    else:
        try:
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            res = get_process_status(host.ipaddress, 22, host.user, host.passwd, router.linklocalip, 'uptime')
        except KeyError:
            self.skipTest('Marvin configuration has no host credentials to check router services')
    result = res[0].split()
    self.debug(('Router Uptime: %s' % result))
    self.assertEqual(str(result[1]), 'up', 'Check router is running or not')
    if (str(result[3]) == 'min,'):
        self.assertEqual((int(result[2]) < 3), True, 'Check uptime is less than 3 mins or not')
    else:
        self.assertEqual(str(result[3]), 'sec,', 'Check uptime is in seconds')
    return
