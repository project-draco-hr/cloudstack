@attr(tags=['advanced', 'nuagevsp'], required_hardware='true')
def test_01_UserDataPasswordReset(self):
    self.debug('START USER DATA PASSWORD RESET ON VM')
    '\n         Validate the following:\n         1) user data\n         2) reset vm password.\n\n         Steps:\n         1.  Set password enabled to false in the template.\n         2.  Create an Isolated network - Test Network (10.1.1.1/24).\n         3.  Deploy VM1 in Test Network\n         4.  Verify domain,zone subnet, vm.\n         5.  create public ip , Create Static Nat rule firewall rule and verify\n         6.  SSH to VM should be successful\n         7.  verify userdata\n         8.  check cloud-set-guest-password exist.\n         9.  if cloud-set-guest-password exist.\n          9.1    change template password enabled to true\n          9.2   verify that template is password enbalded\n          9.3   SSH with new password should be successful\n         10. else cloud-set-guest-password does not exist.\n          10.1  get the cloud-set-guest-password file\n          10.2  stop vm\n          10.3  create a new template with password enabled. Verify that template is password enabled.\n          10.4  create vm 2 with new template in Test Network\n          10.5  Verify vm.\n          10.6  create public ip , Create Static Nat rule firewall rule and verify\n          10.7  SSH to VM 2 should be successful\n         11. Reset VM password (VM_1 if guest password file exist.  else it is VM2)\n         12  Starting VM and SSH to VM to verify new password\n        '
    self.defaultTemplateVal = self.template.passwordenabled
    if self.template.passwordenabled:
        self.updateTemplate(False)
    self.debug('CREATE AN ISOLATED NETWORK')
    self.network_1 = self.create_Network(self.test_data['network_offering_pr'])
    self.cleanup.append(self.network_1)
    expUserData = 'hello world vm1'
    userdata = base64.b64encode(expUserData)
    self.test_data['virtual_machine_pr']['userdata'] = userdata
    self.debug('DEPLOY VM 1 IN TEST NETWORK')
    self.vm_1 = self.create_VM_in_Network(self.network_1, 'virtual_machine_pr')
    self.vm_1.password = self.test_data['virtual_machine_pr']['password']
    user_data_cmd = self.get_userdata_url(self.vm_1)
    self.debug('VERIFY DOMAIN, ZONE, NETWORK , and VM 1')
    self.verify_vsp_network(self.domain.id, self.network_1)
    self.verify_vsp_vm(self.vm_1)
    self.debug('CREATE PUBLIC IP, STATIC NAT RULE, FLOATING IP, FIREWALL AND VERIFY')
    public_ip_1 = self.acquire_Public_IP(self.network_1)
    self.create_and_verify_fw(self.vm_1, public_ip_1, self.network_1)
    self.debug('SSH TO VM')
    ssh = self.ssh_into_vm(self.vm_1, public_ip_1)
    self.debug('VERIFY USER DATA')
    self.debug(('Get User Data with command: ' + user_data_cmd))
    adata = self.execute_cmd(ssh, user_data_cmd)
    actUserData = base64.b64decode(adata)
    self.debug(((('Response User Data=' + actUserData) + ', Expected=') + expUserData))
    self.assertEqual(actUserData, expUserData, 'User Data Did Not Match ')
    ls_cmd = 'ls /etc/init.d/cloud-set-guest-password'
    ls_result = self.execute_cmd(ssh, ls_cmd)
    ls_result = ls_result.lower()
    self.debug(('reponse from ls_cmd: ' + ls_result))
    if ('no such file' in ls_result):
        self.debug('NO CLOUD-SET_GUEST_PASSWORD FILE.  NEED TO GET ONE')
        self.install_cloud_set_guest_password_script(ssh)
        self.stop_vm(self.vm_1)
        self.create_template(self.vm_1)
        self.debug('DEPLOY VM 2 IN TEST NETWORK WITH NEW TEMPLATE')
        self.vm_1 = self.create_VM_in_Network(self.network_1, 'virtual_machine_pr')
        self.remove_vm2 = True
        self.debug('STARTING VM_2 ')
        startCmd = startVirtualMachine.startVirtualMachineCmd()
        startCmd.id = self.vm_2.id
        vm_2a = self.apiclient.startVirtualMachine(startCmd)
        self.vm_2.password = vm_2a.password.strip()
        self.vm_2.nic = vm_2a.nic
        self.debug(('VM - %s password %s !' % (self.vm_2.name, self.vm_2.password)))
        self.assertNotEqual(self.vm_2.password, self.test_data['virtual_machine_pr']['password'], 'Password enabled not working. Password same as virtual_machine password ')
        self.verify_vsp_vm(vm_2a)
        self.debug('GET PUBLIC IP,  CREATE AND VERIFY FIREWALL RULES')
        public_ip_2 = self.acquire_Public_IP(self.network_1)
        self.create_and_verify_fw(self.vm_2, public_ip_2, self.network_1)
        ssh = self.ssh_into_vm(self.vm_2, public_ip_2)
        vm_test = self.vm_2
        vm_test_public_ip = public_ip_2
    else:
        self.debug('UPDATE TEMPLATE TO PASSWORD ENABLED')
        self.updateTemplate(True)
        self.assertEqual(self.template.passwordenabled, True, 'Template is not password enabled')
        vm_test = self.vm_1
        vm_test_public_ip = public_ip_1
    self.debug(('RESETTING VM PASSWORD for VM: %s' % vm_test.name))
    vm_test.password = vm_test.resetPassword(self.apiclient)
    self.debug(('Password reset to: %s' % vm_test.password))
    self.debug('STARTING VM AND SSH TO VM TO VERIFY NEW PASSWORD')
    vm_test.start(self.apiclient)
    self.debug(('VM - %s started!' % vm_test.name))
    self.ssh_into_vm(vm_test, vm_test_public_ip)
