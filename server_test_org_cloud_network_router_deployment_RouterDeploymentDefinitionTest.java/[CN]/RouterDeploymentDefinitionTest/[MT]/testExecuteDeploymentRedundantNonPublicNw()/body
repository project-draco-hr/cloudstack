{
  this.deployment.isRedundant=true;
  RouterDeploymentDefinition deploymentUT=Mockito.spy(this.deployment);
  doNothing().when(deploymentUT).setupPriorityOfRedundantRouter();
  doReturn(2).when(deploymentUT).getNumberOfRoutersToDeploy();
  doNothing().when(deploymentUT).findVirtualProvider();
  doNothing().when(deploymentUT).findOfferingId();
  doNothing().when(deploymentUT).findSourceNatIP();
  doNothing().when(deploymentUT).deployAllVirtualRouters();
  when(this.mockNetworkModel.isNetworkSystem(this.mockNw)).thenReturn(true);
  Account newAccountOwner=mock(Account.class);
  when(this.mockAccountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM)).thenReturn(newAccountOwner);
  when(this.mockNetworkModel.isProviderSupportServiceInNetwork(NW_ID,Service.SourceNat,Provider.VirtualRouter)).thenReturn(false);
  deploymentUT.executeDeployment();
  assertEquals("New account owner not properly set",newAccountOwner,deploymentUT.owner);
  assertEquals("Since is redundant deployment in non public nw there should be 0 routers to start",0,this.deployment.routers.size());
  verify(this.mockNetworkModel,times(1)).isNetworkSystem(this.mockNw);
  verify(deploymentUT,times(0)).findVirtualProvider();
  verify(deploymentUT,times(0)).findOfferingId();
  verify(deploymentUT,times(0)).findSourceNatIP();
  verify(deploymentUT,times(0)).deployAllVirtualRouters();
}
