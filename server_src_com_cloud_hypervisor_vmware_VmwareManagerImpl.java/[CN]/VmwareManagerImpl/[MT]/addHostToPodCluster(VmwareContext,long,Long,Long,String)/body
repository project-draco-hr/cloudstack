{
  ManagedObjectReference mor=serviceContext.getHostMorByPath(hostInventoryPath);
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals("ComputeResource")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getServiceUtil().getDynamicProperty(mor,"host");
      assert(hosts != null);
      HostMO hostMo=new HostMO(serviceContext,hosts[0]);
      HostFirewallSystemMO firewallMo=hostMo.getHostFirewallSystemMO();
      if (firewallMo != null) {
        if (hostMo.getHostType() == VmwareHostType.ESX) {
          firewallMo.enableRuleset("vncServer");
          firewallMo.refreshFirewall();
        }
      }
      String managementPortGroupName=hostMo.getPortGroupNameByNicType(HostVirtualNicType.management);
      assert(managementPortGroupName != null);
      HostPortGroupSpec spec=hostMo.getPortGroupSpec(managementPortGroupName);
      Integer vlanId=null;
      if (spec.getVlanId() != 0) {
        vlanId=spec.getVlanId();
      }
      HypervisorHostHelper.preparePrivateNetwork(_privateNetworkVSwitchName,hostMo,vlanId,180000);
      returnedHostList.add(hosts[0]);
      return returnedHostList;
    }
 else     if (mor.getType().equals("ClusterComputeResource")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getServiceUtil().getDynamicProperty(mor,"host");
      assert(hosts != null);
      if (hosts.length > _maxHostsPerCluster) {
        String msg="vCenter cluster size is too big (current configured cluster size: " + _maxHostsPerCluster + ")";
        s_logger.error(msg);
        throw new DiscoveredWithErrorException(msg);
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        HostFirewallSystemMO firewallMo=hostMo.getHostFirewallSystemMO();
        if (firewallMo != null) {
          if (hostMo.getHostType() == VmwareHostType.ESX) {
            firewallMo.enableRuleset("vncServer");
            firewallMo.refreshFirewall();
          }
        }
        String managementPortGroupName=hostMo.getPortGroupNameByNicType(HostVirtualNicType.management);
        assert(managementPortGroupName != null);
        HostPortGroupSpec spec=hostMo.getPortGroupSpec(managementPortGroupName);
        Integer vlanId=null;
        if (spec.getVlanId() != 0) {
          vlanId=spec.getVlanId();
        }
        HypervisorHostHelper.preparePrivateNetwork(_privateNetworkVSwitchName,hostMo,vlanId,180000);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals("HostSystem")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      HostFirewallSystemMO firewallMo=hostMo.getHostFirewallSystemMO();
      if (firewallMo != null) {
        if (hostMo.getHostType() == VmwareHostType.ESX) {
          firewallMo.enableRuleset("vncServer");
          firewallMo.refreshFirewall();
        }
      }
      String managementPortGroupName=hostMo.getPortGroupNameByNicType(HostVirtualNicType.management);
      assert(managementPortGroupName != null);
      HostPortGroupSpec spec=hostMo.getPortGroupSpec(managementPortGroupName);
      Integer vlanId=null;
      if (spec.getVlanId() != 0) {
        vlanId=spec.getVlanId();
      }
      HypervisorHostHelper.preparePrivateNetwork(_privateNetworkVSwitchName,hostMo,vlanId,180000);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error("Unsupport host type " + mor.getType() + ":"+ mor.get_value()+ " from inventory path: "+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error("Unable to find host from inventory path: " + hostInventoryPath);
  return null;
}
