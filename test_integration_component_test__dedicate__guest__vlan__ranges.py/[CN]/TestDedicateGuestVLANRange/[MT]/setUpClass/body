@classmethod
def setUpClass(cls):
    cls.testClient = super(TestDedicateGuestVLANRange, cls).getClsTestClient()
    cls.apiclient = cls.testClient.getApiClient()
    cls.testdata = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient)
    cls.testdata['isolated_network']['zoneid'] = cls.zone.id
    cls.testdata['mode'] = cls.zone.networktype
    template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    try:
        cls.isolated_network_offering = NetworkOffering.create(cls.apiclient, cls.testdata['nw_off_isolated_persistent'])
        cls._cleanup.append(cls.isolated_network_offering)
        cls.isolated_network_offering.update(cls.apiclient, state='Enabled')
        cls.testdata['nw_off_isolated_persistent']['specifyVlan'] = True
        cls.isolated_network_offering_vlan = NetworkOffering.create(cls.apiclient, cls.testdata['nw_off_isolated_persistent'])
        cls._cleanup.append(cls.isolated_network_offering_vlan)
        cls.isolated_network_offering_vlan.update(cls.apiclient, state='Enabled')
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.testdata['small']['zoneid'] = cls.zone.id
        cls.testdata['small']['template'] = template.id
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(e)
    return
