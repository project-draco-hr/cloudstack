@attr(tags=['advanced', 'advancedns', 'smoke', 'basic'], required_hardware='true')
def test_01_Browser_template_Life_cycle_tpath(self):
    '\n        Test Browser_template_Life_cycle\n        '
    try:
        self.debug('========================= Test 1: Upload Browser based template and validate ========================= ')
        browseup_template = self.browse_upload_template()
        self.debug('========================= Test 2: Deploy a VM with uploaded template and validate VM Operations========================= ')
        vm1details = self.deploy_vm(browseup_template)
        vm1details = self.deploy_vm(self.template)
        self.vmoperations(vm1details)
        self.debug('========================= Test 3: Attach DATA DISK to the VM ')
        cvolume = self.create_data_volume()
        self.attach_data_volume(cvolume, vm1details)
        self.vmoperations(vm1details)
        self.debug('========================= Test 4: Restore VM created with Uploaded template========================= ')
        self.restore_vm(vm1details)
        self.debug('========================= Test 5: Detach DATA DISK to the VM ')
        self.detach_data_volume(cvolume, vm1details)
        self.vmoperations(vm1details)
        self.deletevolume(cvolume.id)
        self.debug('========================= Test 6: Expunge VM created with Uploaded template========================= ')
        self.expunge_vm(vm1details)
        self.debug('========================= Test 7:  Destroy VM ========================= ')
        vm2details = self.deploy_vm(self.template)
        vm2details = self.deploy_vm(browseup_template)
        self.destroy_vm(vm2details)
        self.debug('========================= Test 8:  Recover destroyed VM which has Uploaded volumes attached========================= ')
        self.recover_destroyed_vm(vm2details)
        self.expunge_vm(vm2details)
        self.debug('========================= Test 10:  Upload Multiple templates========================= ')
        self.multiple_browse_upload_template()
    except Exception as e:
        self.fail(('Exception occurred  : %s' % e))
    return
