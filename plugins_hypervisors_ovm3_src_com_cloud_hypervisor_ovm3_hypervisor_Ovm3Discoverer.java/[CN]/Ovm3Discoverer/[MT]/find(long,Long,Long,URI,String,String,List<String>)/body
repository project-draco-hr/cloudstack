{
  Connection c=null;
  if (url.getScheme().equals("http") || url.getScheme().equals("https")) {
    String msg="Discovering " + url + ": "+ _params;
    s_logger.debug(msg);
  }
 else {
    String msg="urlString is not http(s) so we're not taking care of the discovery for this: " + url;
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg);
  }
  if (clusterId == null) {
    String msg="must specify cluster Id when add host";
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg);
  }
  if (podId == null) {
    String msg="must specify pod Id when add host";
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg);
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || (cluster.getHypervisorType() != HypervisorType.Ovm3)) {
    String msg="invalid cluster id or cluster is not for Ovm3 hypervisors";
    s_logger.info(msg);
    throw new CloudRuntimeException(msg);
  }
 else {
    s_logger.info("cluster: " + cluster);
  }
  String agentUsername=_params.get("agentusername");
  if (agentUsername == null) {
    String msg="Agent user name must be specified";
    s_logger.info(msg);
    throw new CloudRuntimeException(msg);
  }
  String agentPassword=_params.get("agentpassword");
  if (agentPassword == null) {
    String msg="Agent password must be specified";
    s_logger.info(msg);
    throw new CloudRuntimeException(msg);
  }
  String agentPort=_params.get("agentport");
  if (agentPort == null) {
    String msg="Agent port must be specified";
    s_logger.info(msg);
    throw new CloudRuntimeException(msg);
  }
  try {
    String hostname=url.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String hostIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(hostIp.getBytes()).toString();
    if (checkIfExisted(guid)) {
      String msg="The host " + hostIp + " has been added before";
      s_logger.debug(msg);
      throw new CloudRuntimeException(msg);
    }
    s_logger.debug("Ovm3 discover is going to disover host having guid " + guid);
    ClusterVO clu=_clusterDao.findById(clusterId);
    if (clu.getGuid() == null) {
      clu.setGuid(UUID.randomUUID().toString());
    }
    _clusterDao.update(clusterId,clu);
    Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    String ovm3vip=(clusterDetails.get("ovm3vip") == null) ? "" : clusterDetails.get("ovm3vip");
    String ovm3pool=(clusterDetails.get("ovm3pool") == null) ? "false" : clusterDetails.get("ovm3pool");
    String ovm3cluster=(clusterDetails.get("ovm3cluster") == null) ? "false" : clusterDetails.get("ovm3cluster");
    com.trilead.ssh2.Connection sshConnection=new com.trilead.ssh2.Connection(hostIp,22);
    sshConnection.connect(null,60000,60000);
    sshConnection=SSHCmdHelper.acquireAuthorizedConnection(hostIp,username,password);
    if (sshConnection == null) {
      String msg=String.format("Cannot connect to Ovm3 host(IP=%1$s, username=%2$s, password=*******), discovery failed",hostIp,username);
      s_logger.warn(msg);
      throw new CloudRuntimeException(msg);
    }
    Map<String,String> details=new HashMap<String,String>();
    Ovm3ResourceBase ovmResource=new Ovm3ResourceBase();
    details.put("ip",hostIp);
    details.put("host",hostname);
    details.put("username",username);
    details.put("password",password);
    details.put("zone",Long.toString(dcId));
    details.put("guid",guid);
    details.put("pod",Long.toString(podId));
    details.put("cluster",Long.toString(clusterId));
    details.put("agentusername",agentUsername);
    details.put("agentpassword",agentPassword);
    details.put("agentport",agentPort.toString());
    details.put("ovm3vip",ovm3vip);
    details.put("ovm3pool",ovm3pool);
    details.put("ovm3cluster",ovm3cluster);
    if (_publicNetworkDevice != null) {
      details.put("public.network.device",_publicNetworkDevice);
    }
    if (_privateNetworkDevice != null) {
      details.put("private.network.device",_privateNetworkDevice);
    }
    if (_guestNetworkDevice != null) {
      details.put("guest.network.device",_guestNetworkDevice);
    }
    if (_storageNetworkDevice != null) {
      details.put("storage.network.device",_storageNetworkDevice);
    }
    s_logger.warn("network devices: " + _guestNetworkDevice + " "+ _privateNetworkDevice+ " "+ _publicNetworkDevice+ " "+ _storageNetworkDevice);
    Map<String,Object> params=new HashMap<String,Object>();
    params.putAll(details);
    ovmResource.configure(hostname,params);
    ovmResource.start();
    try {
      c=new Connection(hostIp,Integer.parseInt(agentPort),agentUsername,agentPassword);
    }
 catch (    Exception e) {
      String msg=String.format("Cannot connect to Ovm3 agent(IP=%1$s, Port=%1$, username=%3$s, password=*******), discovery failed",hostIp,agentPort,agentUsername);
      s_logger.warn(msg);
      throw new CloudRuntimeException(msg);
    }
    Linux host=new Linux(c);
    details.put("agentVersion",host.getAgentVersion());
    details.put(HostInfo.HOST_OS_KERNEL_VERSION,host.getHostKernelRelease());
    details.put(HostInfo.HOST_OS,host.getHostOs());
    details.put(HostInfo.HOST_OS_VERSION,host.getHostOsVersion());
    details.put(HostInfo.HYPERVISOR_VERSION,host.getHypervisorVersion());
    Map<Ovm3ResourceBase,Map<String,String>> resources=new HashMap<Ovm3ResourceBase,Map<String,String>>();
    resources.put(ovmResource,details);
    return resources;
  }
 catch (  XmlRpcException e) {
    s_logger.debug("XmlRpc exception, Unable to discover Ovm3 host: " + url.getHost(),e);
    return null;
  }
catch (  UnknownHostException e) {
    s_logger.debug("Host name resolve failed exception, Unable to discover Ovm3 host: " + url.getHost(),e);
    return null;
  }
catch (  ConfigurationException e) {
    s_logger.debug("Configure resource failed, Unable to discover Ovm3 host: " + url.getHost(),e);
    return null;
  }
catch (  Exception e) {
    s_logger.debug("Unable to discover Ovm3 host: " + url.getHost(),e);
    return null;
  }
}
