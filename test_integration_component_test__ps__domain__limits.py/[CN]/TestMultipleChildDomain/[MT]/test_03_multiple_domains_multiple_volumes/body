@attr(tags=['advanced'], required_hardware='false')
def test_03_multiple_domains_multiple_volumes(self):
    'Test primary storage counts in multiple child domains\n        # Steps\n        1. Create a parent domain and two sub-domains in it (also admin accounts\n           of each domain)\n        Repeat following steps for both the child domains\n        2. Deploy VM in child domain\n        3. Check if the resource count for domain is updated correctly\n        4. Create multiple volumes and attach it to the VM\n        5. Check if the primary storage resource count is updated correctly\n        6. Delete one of the volumes and check if the primary storage resource count\n           reduced by equivalent number\n        7. Detach other volume and check primary storage resource count remains the same\n\n        '
    if (self.hypervisor.lower() == 'lxc'):
        if (not find_storage_pool_type(self.apiclient, storagetype='rbd')):
            self.SkipTest('RBD storage type is required for data volumes for LXC')
    result = self.setupAccounts()
    if (result[0] == FAIL):
        self.fail(('Failure while setting up accounts and domains: %s' % result[1]))
    else:
        users = result[2]
    templatesize = (self.template.size / (1024 ** 3))
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.assertNotEqual(apiclient, FAILED, ('Failed to create api client for account: %s' % self.account.name))
        try:
            vm = VirtualMachine.create(apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id, serviceofferingid=self.service_offering.id)
            expectedCount = (templatesize + self.disk_offering.disksize)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            volume1size = self.services['disk_offering']['disksize'] = 15
            disk_offering_15_GB = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
            self.cleanup.append(disk_offering_15_GB)
            volume2size = self.services['disk_offering']['disksize'] = 20
            disk_offering_20_GB = DiskOffering.create(self.apiclient, services=self.services['disk_offering'])
            self.cleanup.append(disk_offering_20_GB)
            volume_1 = Volume.create(apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=disk_offering_15_GB.id)
            volume_2 = Volume.create(apiclient, self.services['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=disk_offering_20_GB.id)
            vm.attach_volume(apiclient, volume=volume_1)
            vm.attach_volume(apiclient, volume=volume_2)
            expectedCount += (volume1size + volume2size)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            vm.detach_volume(apiclient, volume=volume_1)
            volume_1.delete(apiclient)
            expectedCount -= volume1size
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            expectedCount -= volume2size
            vm.detach_volume(apiclient, volume=volume_2)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
        except Exception as e:
            self.fail(('Failure: %s' % e))
    return
