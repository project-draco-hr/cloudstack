@attr(tags=['advanced'], required_hardware='false')
def test_04_create_template_snapshot(self):
    'Test create snapshot and templates from volume\n\n        # Validate the following\n        1. Create parent domain with two child sub-domains (and their admin accounts)\n        Follow these steps for both the domains\n        # 1. Create template from snapshot and verify secondary storage resource count\n        # 2. Create Volume from Snapshot and verify primary storage resource count\n        # 3. Attach volume to instance which was created from snapshot and\n        #    verify primary storage resource count\n        # 4. Detach volume from instance which was created from snapshot and\n        #    verify the primary storage resource count\n        # 5. Delete volume which was created from snapshot and verify primary storage\n             resource count'
    if (self.hypervisor.lower() in ['hyperv', 'lxc']):
        self.skipTest(('Snapshots feature is not supported on %s' % self.hypervisor.lower()))
    result = self.setupAccounts()
    if (result[0] == FAIL):
        self.fail(('Failure while setting up accounts and domains: %s' % result[1]))
    users = result[2]
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        try:
            apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
            self.assertNotEqual(apiclient, FAILED, ('Failed to create api client for account: %s' % self.account.name))
            vm = VirtualMachine.create(apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id, serviceofferingid=self.service_offering.id)
            templatesize = (self.template.size / (1024 ** 3))
            initialResourceCount = expectedCount = (templatesize + self.disk_offering.disksize)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, initialResourceCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            vm.stop(self.apiclient)
            response = createSnapshotFromVirtualMachineVolume(apiclient, self.account, vm.id)
            self.assertEqual(response[0], PASS, response[1])
            snapshot = response[1]
            response = snapshot.validateState(apiclient, Snapshot.BACKED_UP)
            self.assertEqual(response[0], PASS, response[1])
            self.services['volume']['size'] = self.services['disk_offering']['disksize']
            volume = Volume.create_from_snapshot(apiclient, snapshot_id=snapshot.id, services=self.services['volume'], account=self.account.name, domainid=self.account.domainid)
            volumeSize = (volume.size / (1024 ** 3))
            vm.attach_volume(apiclient, volume)
            expectedCount = (initialResourceCount + volumeSize)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            expectedCount -= volumeSize
            vm.detach_volume(apiclient, volume)
            volume.delete(apiclient)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
        except Exception as e:
            self.fail(('Failed with exception : %s' % e))
    return
