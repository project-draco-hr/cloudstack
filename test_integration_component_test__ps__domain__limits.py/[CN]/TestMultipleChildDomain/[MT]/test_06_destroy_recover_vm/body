@attr(tags=['advanced', 'selfservice'])
def test_06_destroy_recover_vm(self):
    'Test primary storage counts while destroying and recovering VM\n        # Steps\n        1. Create a parent domain and two sub-domains in it (also admin accounts\n           of each domain)\n        Repeat following steps for both the child domains\n        2. Deploy VM in child domain\n        3. Check if the resource count for domain is updated correctly\n        4. Destroy the VM\n        5. Verify that the primary storage resource count remains the same\n        6. Recover the VM\n        7. Verify that the primary storage resource count remains the same\n        '
    result = self.setupAccounts()
    self.assertEqual(result[0], PASS, result[1])
    users = result[2]
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        try:
            vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering.id, serviceofferingid=self.service_offering.id)
            templatesize = (self.template.size / (1024 ** 3))
            expectedCount = (templatesize + self.disk_offering.disksize)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.account.domainid, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            vm_1.delete(self.apiclient)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.account.domainid, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            vm_1.recover(self.apiclient)
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.account.domainid, expectedCount, RESOURCE_PRIMARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
        except Exception as e:
            self.fail(('Failed with exception: %s' % e))
    return
