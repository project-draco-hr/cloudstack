{
  final String bridge="gre";
  final Connection conn=Mockito.mock(Connection.class);
  final Network network=Mockito.mock(Network.class);
  final XsHost xsHost=Mockito.mock(XsHost.class);
  final OvsCreateGreTunnelCommand createGreCommand=new OvsCreateGreTunnelCommand("172.0.0.1","KEY",1l,2l);
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  when(citrixResourceBase.getHost()).thenReturn(xsHost);
  when(citrixResourceBase.setupvSwitchNetwork(conn)).thenReturn(network);
  try {
    when(network.getBridge(conn)).thenReturn(bridge);
    when(citrixResourceBase.callHostPlugin(conn,"ovsgre","ovs_create_gre","bridge",bridge,"remoteIP",createGreCommand.getRemoteIp(),"greKey",createGreCommand.getKey(),"from",Long.toString(createGreCommand.getFrom()),"to",Long.toString(createGreCommand.getTo()))).thenReturn("1:2");
  }
 catch (  final BadServerResponse e) {
    fail(e.getMessage());
  }
catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(createGreCommand,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  verify(citrixResourceBase,times(1)).setIsOvs(true);
  assertTrue(answer.getResult());
}
