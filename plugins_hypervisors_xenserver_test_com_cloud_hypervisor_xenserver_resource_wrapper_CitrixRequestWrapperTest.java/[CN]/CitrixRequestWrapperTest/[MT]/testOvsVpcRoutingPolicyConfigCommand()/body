{
  final String bridge="gre";
  final Connection conn=Mockito.mock(Connection.class);
  final Network network=Mockito.mock(Network.class);
  final OvsVpcRoutingPolicyConfigCommand.Acl[] acls=new OvsVpcRoutingPolicyConfigCommand.Acl[0];
  final OvsVpcRoutingPolicyConfigCommand.Tier[] tiers=new OvsVpcRoutingPolicyConfigCommand.Tier[0];
  final OvsVpcRoutingPolicyConfigCommand routingPolicy=new OvsVpcRoutingPolicyConfigCommand("v1","10.0.0.1/24",acls,tiers);
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  try {
    when(citrixResourceBase.findOrCreateTunnelNetwork(conn,routingPolicy.getBridgeName())).thenReturn(network);
    when(network.getBridge(conn)).thenReturn(bridge);
    when(citrixResourceBase.callHostPlugin(conn,"ovstunnel","configure_ovs_bridge_for_routing_policies","bridge",bridge,"host-id",((Long)routingPolicy.getHostId()).toString(),"config",routingPolicy.getVpcConfigInJson(),"seq-no",Long.toString(1))).thenReturn("SUCCESS");
  }
 catch (  final BadServerResponse e) {
    fail(e.getMessage());
  }
catch (  final XenAPIException e) {
    fail(e.getMessage());
  }
catch (  final XmlRpcException e) {
    fail(e.getMessage());
  }
  final Answer answer=wrapper.execute(routingPolicy,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertFalse(answer.getResult());
}
