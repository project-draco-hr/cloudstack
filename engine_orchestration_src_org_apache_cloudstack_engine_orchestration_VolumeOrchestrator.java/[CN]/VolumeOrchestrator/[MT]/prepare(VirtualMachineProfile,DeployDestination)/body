{
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("DeployDestination cannot be null, cannot prepare Volumes for the vm: " + vm);
    }
    throw new CloudRuntimeException("Unable to prepare Volume for vm because DeployDestination is null, vm:" + vm);
  }
  if (_volsDao.findByInstanceAndType(vm.getId(),Volume.Type.ROOT).isEmpty()) {
    throw new CloudRuntimeException("Unable to prepare volumes for vm as ROOT volume is missing");
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Checking if we need to prepare " + vols.size() + " volumes for "+ vm);
  }
  List<VolumeTask> tasks=getTasks(vols,dest.getStorageForDisks(),vm);
  Volume vol=null;
  StoragePool pool=null;
  for (  VolumeTask task : tasks) {
    if (task.type == VolumeTaskType.NOP) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=task.volume;
    }
 else     if (task.type == VolumeTaskType.MIGRATE) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=migrateVolume(task.volume,pool);
    }
 else     if (task.type == VolumeTaskType.RECREATE) {
      Pair<VolumeVO,DataStore> result=recreateVolume(task.volume,vm,dest);
      pool=(StoragePool)dataStoreMgr.getDataStore(result.second().getId(),DataStoreRole.Primary);
      vol=result.first();
    }
    VolumeInfo volumeInfo=volFactory.getVolume(vol.getId());
    DataTO volTO=volumeInfo.getTO();
    DiskTO disk=storageMgr.getDiskWithThrottling(volTO,vol.getVolumeType(),vol.getDeviceId(),vol.getPath(),vm.getServiceOfferingId(),vol.getDiskOfferingId());
    DataStore dataStore=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    disk.setDetails(getDetails(volumeInfo,dataStore));
    vm.addDisk(disk);
    if (vm.getHypervisorType().equals(HypervisorType.VMware)) {
      UserVmCloneType cloneType=UserVmCloneType.linked;
      Boolean value=CapacityManager.VmwareCreateCloneFull.valueIn(vol.getPoolId());
      if (value != null && value) {
        cloneType=UserVmCloneType.full;
      }
      try {
        UserVmCloneSettingVO cloneSettingVO=_vmCloneSettingDao.findByVmId(vm.getId());
        if (cloneSettingVO != null) {
          if (!cloneSettingVO.getCloneType().equals(cloneType.toString())) {
            cloneSettingVO.setCloneType(cloneType.toString());
            _vmCloneSettingDao.update(cloneSettingVO.getVmId(),cloneSettingVO);
          }
        }
 else {
          UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(vm.getId(),cloneType.toString());
          _vmCloneSettingDao.persist(vmCloneSettingVO);
        }
      }
 catch (      Throwable e) {
        s_logger.debug("[NSX_PLUGIN_LOG] ERROR: " + e.getMessage());
      }
    }
  }
}
