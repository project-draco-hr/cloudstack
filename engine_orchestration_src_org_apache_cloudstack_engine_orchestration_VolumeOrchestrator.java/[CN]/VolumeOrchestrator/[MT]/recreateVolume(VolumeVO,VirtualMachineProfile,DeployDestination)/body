{
  VolumeVO newVol;
  boolean recreate=RecreatableSystemVmEnabled.value();
  DataStore destPool=null;
  if (recreate && (dest.getStorageForDisks() == null || dest.getStorageForDisks().get(vol) == null)) {
    destPool=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    logger.debug("existing pool: " + destPool.getId());
  }
 else {
    StoragePool pool=dest.getStorageForDisks().get(vol);
    destPool=dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
  }
  if (vol.getState() == Volume.State.Allocated || vol.getState() == Volume.State.Creating) {
    newVol=vol;
  }
 else {
    newVol=switchVolume(vol,vm);
    if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
      StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
      dest.getStorageForDisks().put(newVol,poolWithOldVol);
      dest.getStorageForDisks().remove(vol);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Created new volume " + newVol + " for old volume "+ vol);
    }
  }
  VolumeInfo volume=volFactory.getVolume(newVol.getId(),destPool);
  Long templateId=newVol.getTemplateId();
  for (int i=0; i < 2; i++) {
    AsyncCallFuture<VolumeApiResult> future=null;
    if (templateId == null) {
      DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
      HypervisorType hyperType=vm.getVirtualMachine().getHypervisorType();
      volService.updateHypervisorSnapshotReserveForVolume(diskOffering,volume.getId(),hyperType);
      volume=volFactory.getVolume(newVol.getId(),destPool);
      future=volService.createVolumeAsync(volume,destPool);
    }
 else {
      TemplateInfo templ=tmplFactory.getReadyTemplateOnImageStore(templateId,dest.getDataCenter().getId());
      if (templ == null) {
        logger.debug("can't find ready template: " + templateId + " for data center "+ dest.getDataCenter().getId());
        throw new CloudRuntimeException("can't find ready template: " + templateId + " for data center "+ dest.getDataCenter().getId());
      }
      PrimaryDataStore primaryDataStore=(PrimaryDataStore)destPool;
      if (primaryDataStore.isManaged()) {
        DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
        HypervisorType hyperType=vm.getVirtualMachine().getHypervisorType();
        volService.updateHypervisorSnapshotReserveForVolume(diskOffering,volume.getId(),hyperType);
        long hostId=vm.getVirtualMachine().getHostId();
        future=volService.createManagedStorageAndVolumeFromTemplateAsync(volume,destPool.getId(),templ,hostId);
      }
 else {
        future=volService.createVolumeFromTemplateAsync(volume,destPool.getId(),templ);
      }
    }
    VolumeApiResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        if (result.getResult().contains("request template reload") && (i == 0)) {
          logger.debug("Retry template re-deploy for vmware");
          continue;
        }
 else {
          logger.debug("Unable to create " + newVol + ":"+ result.getResult());
          throw new StorageUnavailableException("Unable to create " + newVol + ":"+ result.getResult(),destPool.getId());
        }
      }
      StoragePoolVO storagePool=_storagePoolDao.findById(destPool.getId());
      if (storagePool.isManaged()) {
        long hostId=vm.getVirtualMachine().getHostId();
        Host host=_hostDao.findById(hostId);
        volService.grantAccess(volFactory.getVolume(newVol.getId()),host,destPool);
      }
      newVol=_volsDao.findById(newVol.getId());
      break;
    }
 catch (    InterruptedException e) {
      logger.error("Unable to create " + newVol,e);
      throw new StorageUnavailableException("Unable to create " + newVol + ":"+ e.toString(),destPool.getId());
    }
catch (    ExecutionException e) {
      logger.error("Unable to create " + newVol,e);
      throw new StorageUnavailableException("Unable to create " + newVol + ":"+ e.toString(),destPool.getId());
    }
  }
  return new Pair<VolumeVO,DataStore>(newVol,destPool);
}
