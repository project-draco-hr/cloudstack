{
  StoragePool pool=null;
  if (diskOffering != null && diskOffering.isCustomized()) {
    diskOffering.setDiskSize(size);
  }
  DiskProfile dskCh=null;
  if (volume.getVolumeType() == Type.ROOT && Storage.ImageFormat.ISO != template.getFormat()) {
    dskCh=createDiskCharacteristics(volume,template,dc,offering);
  }
 else {
    dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  }
  dskCh.setHyperType(hyperType);
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  pool=findStoragePool(dskCh,dc,pod,clusterId,vm.getHostId(),vm,avoidPools);
  if (pool == null) {
    s_logger.warn("Unable to find storage pool when create volume " + volume.getName());
    throw new CloudRuntimeException("Unable to find storage pool when create volume" + volume.getName());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Trying to create " + volume + " on "+ pool);
  }
  DataStore store=dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
  for (int i=0; i < 2; i++) {
    AsyncCallFuture<VolumeApiResult> future=null;
    boolean isNotCreatedFromTemplate=volume.getTemplateId() == null ? true : false;
    if (isNotCreatedFromTemplate) {
      future=volService.createVolumeAsync(volume,store);
    }
 else {
      TemplateInfo templ=tmplFactory.getTemplate(template.getId(),DataStoreRole.Image);
      future=volService.createVolumeFromTemplateAsync(volume,store.getId(),templ);
    }
    try {
      VolumeApiResult result=future.get();
      if (result.isFailed()) {
        if (result.getResult().contains("request template reload") && (i == 0)) {
          s_logger.debug("Retry template re-deploy for vmware");
          continue;
        }
 else {
          s_logger.debug("create volume failed: " + result.getResult());
          throw new CloudRuntimeException("create volume failed:" + result.getResult());
        }
      }
      return result.getVolume();
    }
 catch (    InterruptedException e) {
      s_logger.error("create volume failed",e);
      throw new CloudRuntimeException("create volume failed",e);
    }
catch (    ExecutionException e) {
      s_logger.error("create volume failed",e);
      throw new CloudRuntimeException("create volume failed",e);
    }
  }
  throw new CloudRuntimeException("create volume failed even after template re-deploy");
}
