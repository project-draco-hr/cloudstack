{
  Account account=_entityMgr.findById(Account.class,volume.getAccountId());
  final HashSet<StoragePool> poolsToAvoid=new HashSet<StoragePool>();
  StoragePool pool=null;
  Set<Long> podsToAvoid=new HashSet<Long>();
  Pair<Pod,Long> pod=null;
  DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
  DataCenter dc=_entityMgr.findById(DataCenter.class,volume.getDataCenterId());
  DiskProfile dskCh=new DiskProfile(volume,diskOffering,snapshot.getHypervisorType());
  while ((pod=_resourceMgr.findPod(null,null,dc,account.getId(),podsToAvoid)) != null) {
    podsToAvoid.add(pod.first().getId());
    while ((pool=findStoragePool(dskCh,dc,pod.first(),null,null,null,poolsToAvoid)) != null) {
      break;
    }
  }
  if (pool == null) {
    String msg="There are no available storage pools to store the volume in";
    s_logger.info(msg);
    throw new StorageUnavailableException(msg,-1);
  }
  VolumeInfo vol=volFactory.getVolume(volume.getId());
  DataStore store=dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
  SnapshotInfo snapInfo=snapshotFactory.getSnapshot(snapshot.getId(),DataStoreRole.Image);
  AsyncCallFuture<VolumeApiResult> future=volService.createVolumeFromSnapshot(vol,store,snapInfo);
  try {
    VolumeApiResult result=future.get();
    if (result.isFailed()) {
      s_logger.debug("Failed to create volume from snapshot:" + result.getResult());
      throw new CloudRuntimeException("Failed to create volume from snapshot:" + result.getResult());
    }
    return result.getVolume();
  }
 catch (  InterruptedException e) {
    s_logger.debug("Failed to create volume from snapshot",e);
    throw new CloudRuntimeException("Failed to create volume from snapshot",e);
  }
catch (  ExecutionException e) {
    s_logger.debug("Failed to create volume from snapshot",e);
    throw new CloudRuntimeException("Failed to create volume from snapshot",e);
  }
}
