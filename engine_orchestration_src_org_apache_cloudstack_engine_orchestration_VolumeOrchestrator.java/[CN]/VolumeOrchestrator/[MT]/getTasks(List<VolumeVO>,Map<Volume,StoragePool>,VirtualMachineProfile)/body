{
  boolean recreate=RecreatableSystemVmEnabled.value();
  List<VolumeTask> tasks=new ArrayList<VolumeTask>();
  for (  VolumeVO vol : vols) {
    StoragePoolVO assignedPool=null;
    if (destVols != null) {
      StoragePool pool=destVols.get(vol);
      if (pool != null) {
        assignedPool=_storagePoolDao.findById(pool.getId());
      }
    }
    if (assignedPool == null && recreate) {
      assignedPool=_storagePoolDao.findById(vol.getPoolId());
    }
    if (assignedPool != null || recreate) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated || state == Volume.State.Creating) {
        VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
        tasks.add(task);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Volume " + vol + " will be recreated on storage pool "+ assignedPool+ " assigned by deploymentPlanner");
          }
          VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
          tasks.add(task);
        }
 else {
          if (assignedPool.getId() != vol.getPoolId()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Mismatch in storage pool " + assignedPool + " assigned by deploymentPlanner and the one associated with volume "+ vol);
            }
            DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,vol.getDiskOfferingId());
            if (diskOffering.getUseLocalStorage()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug("Local volume " + vol + " cannot be recreated on storagepool "+ assignedPool+ " assigned by deploymentPlanner");
              }
              throw new CloudRuntimeException("Local volume " + vol + " cannot be recreated on storagepool "+ assignedPool+ " assigned by deploymentPlanner");
            }
 else {
              Boolean isHAOperation=(Boolean)vm.getParameter(VirtualMachineProfile.Param.HaOperation);
              Boolean storageMigrationEnabled=true;
              if (isHAOperation != null && isHAOperation) {
                storageMigrationEnabled=StorageHAMigrationEnabled.value();
              }
 else {
                storageMigrationEnabled=StorageMigrationEnabled.value();
              }
              if (storageMigrationEnabled) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug("Shared volume " + vol + " will be migrated on storage pool "+ assignedPool+ " assigned by deploymentPlanner");
                }
                VolumeTask task=new VolumeTask(VolumeTaskType.MIGRATE,vol,assignedPool);
                tasks.add(task);
              }
 else {
                throw new CloudRuntimeException("Cannot migrate volumes. Volume Migration is disabled");
              }
            }
          }
 else {
            StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
            VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
            tasks.add(task);
          }
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException("Volume has no pool associate and also no storage pool assigned in DeployDestination, Unable to create " + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("No need to recreate the volume: " + vol + ", since it already has a pool assigned: "+ vol.getPoolId()+ ", adding disk to VM");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
      tasks.add(task);
    }
  }
  return tasks;
}
