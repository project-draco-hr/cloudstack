{
  Long templateIdToUse=null;
  Long volTemplateId=existingVolume.getTemplateId();
  long vmTemplateId=vm.getTemplateId();
  if (volTemplateId != null && volTemplateId.longValue() != vmTemplateId) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("switchVolume: Old Volume's templateId: " + volTemplateId + " does not match the VM's templateId: "+ vmTemplateId+ ", updating templateId in the new Volume");
    }
    templateIdToUse=vmTemplateId;
  }
  final Long templateIdToUseFinal=templateIdToUse;
  return Transaction.execute(new TransactionCallback<VolumeVO>(){
    @Override public VolumeVO doInTransaction(    TransactionStatus status){
      VolumeVO newVolume=allocateDuplicateVolumeVO(existingVolume,templateIdToUseFinal);
      try {
        stateTransitTo(existingVolume,Volume.Event.DestroyRequested);
      }
 catch (      NoTransitionException e) {
        s_logger.debug("Unable to destroy existing volume: " + e.toString());
      }
      if (vm.getHypervisorType() == HypervisorType.VMware) {
        s_logger.info("Expunging volume " + existingVolume.getId() + " from primary data store");
        AsyncCallFuture<VolumeApiResult> future=volService.expungeVolumeAsync(volFactory.getVolume(existingVolume.getId()));
        try {
          future.get();
        }
 catch (        Exception e) {
          s_logger.debug("Failed to expunge volume:" + existingVolume.getId(),e);
        }
      }
      return newVolume;
    }
  }
);
}
