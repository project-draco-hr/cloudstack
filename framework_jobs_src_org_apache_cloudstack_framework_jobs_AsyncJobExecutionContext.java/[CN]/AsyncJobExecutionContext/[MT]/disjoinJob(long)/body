{
  assert(_job != null);
  AsyncJobJoinMapVO record=s_joinMapDao.getJoinRecord(_job.getId(),joinedJobId);
  s_jobMgr.disjoinJob(_job.getId(),joinedJobId);
  if (record.getJoinStatus() == JobInfo.Status.FAILED) {
    if (record.getJoinResult() != null) {
      Object exception=JobSerializerHelper.fromObjectSerializedString(record.getJoinResult());
      if (exception != null && exception instanceof Exception) {
        if (exception instanceof InsufficientCapacityException) {
          s_logger.error("Job " + joinedJobId + " failed with InsufficientCapacityException");
          throw (InsufficientCapacityException)exception;
        }
 else         if (exception instanceof ConcurrentOperationException) {
          s_logger.error("Job " + joinedJobId + " failed with ConcurrentOperationException");
          throw (ConcurrentOperationException)exception;
        }
 else         if (exception instanceof ResourceUnavailableException) {
          s_logger.error("Job " + joinedJobId + " failed with ResourceUnavailableException");
          throw (ResourceUnavailableException)exception;
        }
 else {
          s_logger.error("Job " + joinedJobId + " failed with exception");
          throw new RuntimeException((Exception)exception);
        }
      }
    }
 else {
      s_logger.error("Job " + joinedJobId + " failed without providing an error object");
      throw new RuntimeException("Job " + joinedJobId + " failed without providing an error object");
    }
  }
}
