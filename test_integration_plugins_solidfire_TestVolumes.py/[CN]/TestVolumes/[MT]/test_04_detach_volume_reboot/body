@attr(hypervisor='XenServer')
def test_04_detach_volume_reboot(self):
    'Detach volume from a running VM, then reboot.'
    self.virtual_machine.start(self.apiClient)
    sf_account_id = sf_util.get_sf_account_id(self.cs_api, self.account.id, self.primary_storage.id, self, TestVolumes._sf_account_id_should_be_non_zero_int_err_msg)
    sf_vag_id = sf_util.get_vag_id(self.cs_api, self.cluster.id, self.primary_storage.id, self)
    self._check_and_get_cs_volume(self.volume.id, self.testdata[TestData.volume_1][TestData.diskName])
    self.volume = self.virtual_machine.attach_volume(self.apiClient, self.volume)
    self.attached = True
    vol = self._check_and_get_cs_volume(self.volume.id, self.testdata[TestData.volume_1][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(vol.virtualmachineid, vm.id, TestVolumes._volume_vm_id_and_vm_id_do_not_match_err_msg)
    self.assertEqual(vm.state.lower(), 'running', TestVolumes._vm_not_in_running_state_err_msg)
    sf_iscsi_name = sf_util.get_iqn(self.cs_api, self.volume, self)
    sf_volume_size = sf_util.get_volume_size_with_hsr(self.cs_api, self.volume, self)
    self._verify_hsr(self.disk_offering.disksize, self.disk_offering.hypervisorsnapshotreserve, sf_volume_size)
    sf_volumes = self._get_active_sf_volumes(sf_account_id)
    sf_volume = sf_util.check_and_get_sf_volume(sf_volumes, vol.name, self)
    sf_util.check_size_and_iops(sf_volume, vol, sf_volume_size, self)
    sf_util.check_vag(sf_volume, sf_vag_id, self)
    self._check_xen_sr(sf_iscsi_name)
    self.volume = self.virtual_machine.detach_volume(self.apiClient, self.volume)
    self.attached = False
    vol = self._check_and_get_cs_volume(self.volume.id, self.testdata[TestData.volume_1][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(vol.virtualmachineid, None, 'The volume should not be attached to a VM.')
    self.assertEqual(vm.state.lower(), 'running', TestVolumes._vm_not_in_running_state_err_msg)
    sf_volumes = self._get_active_sf_volumes(sf_account_id)
    sf_volume = sf_util.check_and_get_sf_volume(sf_volumes, vol.name, self)
    self.assertEqual(len(sf_volume['volumeAccessGroups']), 0, TestVolumes._volume_should_not_be_in_a_vag)
    self._check_xen_sr(sf_iscsi_name, False)
    self.virtual_machine.reboot(self.apiClient)
    vol = self._check_and_get_cs_volume(self.volume.id, self.testdata[TestData.volume_1][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    sf_volumes = self._get_active_sf_volumes(sf_account_id)
    sf_volume = sf_util.check_and_get_sf_volume(sf_volumes, vol.name, self)
    self.assertEqual(len(sf_volume['volumeAccessGroups']), 0, TestVolumes._volume_should_not_be_in_a_vag)
    self._check_xen_sr(sf_iscsi_name, False)
