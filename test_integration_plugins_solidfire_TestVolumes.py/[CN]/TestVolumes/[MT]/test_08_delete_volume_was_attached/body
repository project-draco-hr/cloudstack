@attr(hypervisor='XenServer')
def test_08_delete_volume_was_attached(self):
    'Delete volume that was attached to a VM and is detached now'
    self.virtual_machine.start(self.apiClient)
    new_volume = Volume.create(self.apiClient, self.testdata[TestData.volume_2], account=self.account.name, domainid=self.domain.id, zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    volume_to_delete_later = new_volume
    self._check_and_get_cs_volume(new_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    new_volume = self.virtual_machine.attach_volume(self.apiClient, new_volume)
    vol = self._check_and_get_cs_volume(new_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(vol.virtualmachineid, vm.id, 'Check if attached to virtual machine')
    self.assertEqual(vm.state.lower(), 'running', str(vm.state))
    sf_account_id = self._get_sf_account_id(self.primary_storage.id, self.account.id)
    sf_volume_size = self._get_volume_size_with_hsr(new_volume)
    sf_vag_id = self._get_vag_id()
    sf_iscsi_name = self._get_iqn(new_volume)
    sf_volumes = self._get_sf_volumes(sf_account_id)
    sf_volume = self._check_and_get_sf_volume(sf_volumes, vol.name)
    self._check_size_and_iops(sf_volume, vol, sf_volume_size)
    self._check_vag(sf_volume, sf_vag_id)
    self._check_xen_sr(sf_iscsi_name)
    new_volume = self.virtual_machine.detach_volume(self.apiClient, new_volume)
    vol = self._check_and_get_cs_volume(new_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(vol.virtualmachineid, None, 'Check if attached to virtual machine')
    self.assertEqual(vm.state.lower(), 'running', str(vm.state))
    sf_volumes = self._get_sf_volumes(sf_account_id)
    sf_volume = self._check_and_get_sf_volume(sf_volumes, vol.name)
    self._check_size_and_iops(sf_volume, vol, sf_volume_size)
    self.assertEqual(len(sf_volume['volumeAccessGroups']), 0, TestVolumes._volume_should_not_be_in_a_vag)
    self._check_xen_sr(sf_iscsi_name, False)
    volume_to_delete_later.delete(self.apiClient)
    list_volumes_response = list_volumes(self.apiClient, id=new_volume.id)
    self.assertEqual(list_volumes_response, None, 'Check volume was deleted')
    sf_volumes = self._get_sf_volumes(sf_account_id)
    self._check_and_get_sf_volume(sf_volumes, vol.name, False)
