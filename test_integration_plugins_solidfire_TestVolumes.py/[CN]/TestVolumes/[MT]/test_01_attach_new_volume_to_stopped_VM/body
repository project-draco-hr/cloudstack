@attr(hypervisor='XenServer')
def test_01_attach_new_volume_to_stopped_VM(self):
    'Attach a volume to a stopped virtual machine, then start VM'
    self.virtual_machine.stop(self.apiClient)
    new_volume = Volume.create(self.apiClient, self.testdata[TestData.volume_2], account=self.account.name, domainid=self.domain.id, zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
    self.cleanup.append(new_volume)
    self._check_and_get_cs_volume(new_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    new_volume = self.virtual_machine.attach_volume(self.apiClient, new_volume)
    newvolume = self._check_and_get_cs_volume(new_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    self.virtual_machine.start(self.apiClient)
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(newvolume.virtualmachineid, vm.id, TestVolumes._volume_vm_id_and_vm_id_do_not_match_err_msg)
    self.assertEqual(vm.state.lower(), 'running', TestVolumes._vm_not_in_running_state_err_msg)
    sf_account_id = self._get_sf_account_id(self.primary_storage.id, self.account.id)
    sf_volume_size = self._get_volume_size_with_hsr(new_volume)
    sf_vag_id = self._get_vag_id()
    sf_iscsi_name = self._get_iqn(new_volume)
    sf_volumes = self._get_sf_volumes(sf_account_id)
    sf_volume = self._check_and_get_sf_volume(sf_volumes, newvolume.name)
    self._check_size_and_iops(sf_volume, newvolume, sf_volume_size)
    self._check_vag(sf_volume, sf_vag_id)
    self._check_xen_sr(sf_iscsi_name)
    new_volume = self.virtual_machine.detach_volume(self.apiClient, new_volume)
