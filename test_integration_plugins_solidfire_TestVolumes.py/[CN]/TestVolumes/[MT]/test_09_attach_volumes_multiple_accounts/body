@attr(hypervisor='XenServer')
def test_09_attach_volumes_multiple_accounts(self):
    'Attach a data disk to a VM in one account and attach another data disk to a VM in another account'
    self.virtual_machine.start(self.apiClient)
    test_account = Account.create(self.apiClient, self.testdata[TestData.testAccount], admin=1)
    self.cleanup.append(test_account)
    test_virtual_machine = VirtualMachine.create(self.apiClient, self.testdata[TestData.virtualMachine2], accountid=test_account.name, zoneid=self.zone.id, serviceofferingid=self.compute_offering.id, templateid=self.template.id, domainid=self.domain.id, startvm=True)
    test_volume = Volume.create(self.apiClient, self.testdata[TestData.volume_2], zoneid=self.zone.id, account=test_account.name, domainid=self.domain.id, diskofferingid=self.disk_offering.id)
    self._check_and_get_cs_volume(test_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    self.volume = self.virtual_machine.attach_volume(self.apiClient, self.volume)
    self.attached = True
    vol = self._check_and_get_cs_volume(self.volume.id, self.testdata[TestData.volume_1][TestData.diskName])
    vm = self._get_vm(self.virtual_machine.id)
    self.assertEqual(vol.virtualmachineid, vm.id, 'Check if attached to virtual machine')
    self.assertEqual(vm.state.lower(), 'running', str(vm.state))
    test_volume = test_virtual_machine.attach_volume(self.apiClient, test_volume)
    test_vol = self._check_and_get_cs_volume(test_volume.id, self.testdata[TestData.volume_2][TestData.diskName])
    test_vm = self._get_vm(test_virtual_machine.id)
    self.assertEqual(test_vol.virtualmachineid, test_vm.id, 'Check if attached to virtual machine of other acct')
    self.assertEqual(test_vm.state.lower(), 'running', str(test_vm.state))
    sf_vag_id = sf_util.get_vag_id(self.cs_api, self.cluster.id, self.primary_storage.id, self)
    sf_account_id = sf_util.get_sf_account_id(self.cs_api, self.account.id, self.primary_storage.id, self, TestVolumes._sf_account_id_should_be_non_zero_int_err_msg)
    sf_volumes = self._get_active_sf_volumes(sf_account_id)
    sf_volume = sf_util.check_and_get_sf_volume(sf_volumes, vol.name, self)
    sf_volume_size = sf_util.get_volume_size_with_hsr(self.cs_api, vol, self)
    self._verify_hsr(self.disk_offering.disksize, self.disk_offering.hypervisorsnapshotreserve, sf_volume_size)
    sf_util.check_size_and_iops(sf_volume, vol, sf_volume_size, self)
    sf_iscsi_name = sf_util.get_iqn(self.cs_api, self.volume, self)
    self._check_xen_sr(sf_iscsi_name)
    sf_util.check_vag(sf_volume, sf_vag_id, self)
    sf_test_account_id = sf_util.get_sf_account_id(self.cs_api, test_account.id, self.primary_storage.id, self, TestVolumes._sf_account_id_should_be_non_zero_int_err_msg)
    sf_test_volumes = self._get_active_sf_volumes(sf_test_account_id)
    sf_test_volume = sf_util.check_and_get_sf_volume(sf_test_volumes, test_vol.name, self)
    sf_test_volume_size = sf_util.get_volume_size_with_hsr(self.cs_api, test_vol, self)
    self._verify_hsr(self.disk_offering.disksize, self.disk_offering.hypervisorsnapshotreserve, sf_test_volume_size)
    sf_util.check_size_and_iops(sf_test_volume, test_vol, sf_test_volume_size, self)
    sf_test_iscsi_name = sf_util.get_iqn(self.cs_api, test_volume, self)
    self._check_xen_sr(sf_test_iscsi_name)
    sf_util.check_vag(sf_test_volume, sf_vag_id, self)
