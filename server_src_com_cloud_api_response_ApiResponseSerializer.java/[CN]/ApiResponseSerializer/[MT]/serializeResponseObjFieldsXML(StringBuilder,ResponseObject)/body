{
  boolean isAsync=false;
  if (obj instanceof AsyncJobResponse)   isAsync=true;
  Field[] fields=obj.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    String propName=field.getName();
    Method method=getGetMethod(obj,propName);
    if (method != null) {
      try {
        Object fieldValue=method.invoke(obj);
        if (fieldValue != null) {
          if (fieldValue instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)fieldValue;
            if (isAsync) {
              sb.append("<jobresult>");
            }
            serializeResponseObjXML(sb,subObj);
            if (isAsync) {
              sb.append("</jobresult>");
            }
          }
 else           if (fieldValue instanceof List<?>) {
            List<?> subResponseList=(List<Object>)fieldValue;
            for (            Object value : subResponseList) {
              if (value instanceof ResponseObject) {
                ResponseObject subObj=(ResponseObject)value;
                if (serializedName != null) {
                  subObj.setObjectName(serializedName.value());
                }
                serializeResponseObjXML(sb,subObj);
              }
            }
          }
 else           if (fieldValue instanceof Date) {
            sb.append("<" + serializedName.value() + ">"+ BaseCmd.getDateString((Date)fieldValue)+ "</"+ serializedName.value()+ ">");
          }
 else {
            sb.append("<" + serializedName.value() + ">"+ escapeSpecialXmlChars(fieldValue.toString())+ "</"+ serializedName.value()+ ">");
          }
        }
      }
 catch (      IllegalArgumentException e) {
        s_logger.error("Illegal argument exception when calling ResponseObject " + obj.getClass().getName() + " get method for property: "+ propName);
      }
catch (      IllegalAccessException e) {
        s_logger.error("Illegal access exception when calling ResponseObject " + obj.getClass().getName() + " get method for property: "+ propName);
      }
catch (      InvocationTargetException e) {
        s_logger.error("Invocation target exception when calling ResponseObject " + obj.getClass().getName() + " get method for property: "+ propName);
      }
    }
  }
}
