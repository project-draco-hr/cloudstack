{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String displayText=(String)params.get(BaseCmd.Properties.DISPLAY_TEXT.getName());
  String url=(String)params.get(BaseCmd.Properties.URL.getName());
  Boolean isPublic=(Boolean)params.get(BaseCmd.Properties.IS_PUBLIC.getName());
  Boolean featured=(Boolean)params.get(BaseCmd.Properties.IS_FEATURED.getName());
  Long guestOSId=(Long)params.get(BaseCmd.Properties.OS_TYPE_ID.getName());
  Boolean bootable=(Boolean)params.get(BaseCmd.Properties.BOOTABLE.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  Long accountId=null;
  if ((account == null) || isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Invalid domain id (" + domainId + ") ");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find account " + accountName + " in domain "+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((account != null) ? account.getId() : null);
    }
  }
 else {
    accountId=account.getId();
  }
  if (accountId == null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"No valid account specified for registering ISO.");
  }
  boolean isAdmin=getManagementServer().findAccountById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid zone Id.");
  }
  if ((!url.toLowerCase().endsWith("iso")) && (!url.toLowerCase().endsWith("iso.zip")) && (!url.toLowerCase().endsWith("iso.bz2"))&& (!url.toLowerCase().endsWith("iso.gz"))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid iso");
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(getManagementServer().getConfigurationValue("allow.public.user.templates"));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Only private ISOs can be created.");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (bootable == null) {
    bootable=Boolean.TRUE;
  }
  if (url.toLowerCase().contains("file://")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"File:// type urls are currently unsupported");
  }
  Long templateId;
  try {
    templateId=getManagementServer().createTemplate(userId,accountId,zoneId,name,displayText,isPublic.booleanValue(),featured.booleanValue(),ImageFormat.ISO.toString(),FileSystem.cdfs.toString(),url,null,true,64,false,guestOSId,bootable);
  }
 catch (  Exception ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
  VMTemplateVO template=getManagementServer().findTemplateById(templateId);
  List<Pair<String,Object>> isoTags=new ArrayList<Pair<String,Object>>();
  List<Object> iTagList=new ArrayList<Object>();
  if (template != null) {
    List<DataCenterVO> zones=null;
    if (zoneId != null) {
      zones=new ArrayList<DataCenterVO>();
      zones.add(getManagementServer().findDataCenterById(zoneId));
    }
 else {
      zones=getManagementServer().listDataCenters();
    }
    for (    DataCenterVO zone : zones) {
      VMTemplateHostVO isoHostRef=getManagementServer().findTemplateHostRef(templateId,zone.getId());
      List<Pair<String,Object>> listForEmbeddedObject=new ArrayList<Pair<String,Object>>();
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),template.getId().toString()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),template.getName()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),template.getDisplayText()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.IS_PUBLIC.getName(),Boolean.valueOf(template.isPublicTemplate()).toString()));
      if (isoHostRef != null) {
        listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(isoHostRef.getCreated())));
      }
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.IS_READY.getName(),(isoHostRef != null && isoHostRef.getDownloadState() == Status.DOWNLOADED)));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.IS_FEATURED.getName(),Boolean.valueOf(template.isFeatured()).toString()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.BOOTABLE.getName(),Boolean.valueOf(template.isBootable()).toString()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.OS_TYPE_ID.getName(),template.getGuestOSId()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.OS_TYPE_NAME.getName(),getManagementServer().findGuestOSById(template.getGuestOSId()).getName()));
      Account owner=getManagementServer().findAccountById(template.getAccountId());
      if (owner != null) {
        listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT_ID.getName(),owner.getId()));
        listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),owner.getAccountName()));
        listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),owner.getDomainId()));
      }
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),zone.getId()));
      listForEmbeddedObject.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),zone.getName()));
      iTagList.add(listForEmbeddedObject);
    }
  }
  Object[] iTag=new Object[iTagList.size()];
  for (int i=0; i < iTagList.size(); i++) {
    iTag[i]=iTagList.get(i);
  }
  Pair<String,Object> templateTag=new Pair<String,Object>("iso",iTag);
  isoTags.add(templateTag);
  return isoTags;
}
