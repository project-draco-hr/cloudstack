{
  if (owner == null) {
    s_logger.error("No account to assign an ip to.");
    return null;
  }
  final long ownerId=owner.getId();
  PublicIp ip=null;
  try {
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        Account owner=_accountDao.acquireInLockTable(ownerId);
        if (owner == null) {
          ConcurrentOperationException ex=new ConcurrentOperationException("Unable to lock account");
          throw ex;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("lock account " + ownerId + " is acquired");
        }
        PublicIp ip=fetchNewPublicIp(dcId,null,null,owner,VlanType.VirtualNetwork,guestNtwkId,isSourceNat,false,null,false,vpcId);
        IPAddressVO publicIp=ip.ip();
        markPublicIpAsAllocated(publicIp);
        _ipAddressDao.update(publicIp.getId(),publicIp);
        return ip;
      }
    }
);
    return ip;
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Releasing lock account " + ownerId);
    }
    _accountDao.releaseFromLockTable(ownerId);
    if (ip == null) {
      s_logger.error("Unable to get source nat ip address for account " + ownerId);
    }
  }
}
