{
  boolean success=true;
  try {
    logger.debug("Revoking all " + Purpose.Firewall + "rules as a part of public IP id="+ ipId+ " release...");
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,userId,caller)) {
      logger.warn("Unable to revoke all the firewall rules for ip id=" + ipId + " as a part of ip release");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    logger.warn("Unable to revoke all firewall rules for ip id=" + ipId + " as a part of ip release",e);
    success=false;
  }
  try {
    logger.debug("Revoking all " + Purpose.PortForwarding + "/"+ Purpose.StaticNat+ " rules as a part of public IP id="+ ipId+ " release...");
    if (!_rulesMgr.revokeAllPFAndStaticNatRulesForIp(ipId,userId,caller)) {
      logger.warn("Unable to revoke all the port forwarding rules for ip id=" + ipId + " as a part of ip release");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    logger.warn("Unable to revoke all the port forwarding rules for ip id=" + ipId + " as a part of ip release",e);
    success=false;
  }
  logger.debug("Revoking all " + Purpose.LoadBalancing + " rules as a part of public IP id="+ ipId+ " release...");
  if (!_lbMgr.removeAllLoadBalanacersForIp(ipId,caller,userId)) {
    logger.warn("Unable to revoke all the load balancer rules for ip id=" + ipId + " as a part of ip release");
    success=false;
  }
  logger.debug("Cleaning up remote access vpns as a part of public IP id=" + ipId + " release...");
  try {
    _vpnMgr.destroyRemoteAccessVpnForIp(ipId,caller);
  }
 catch (  ResourceUnavailableException e) {
    logger.warn("Unable to destroy remote access vpn for ip id=" + ipId + " as a part of ip release",e);
    success=false;
  }
  return success;
}
