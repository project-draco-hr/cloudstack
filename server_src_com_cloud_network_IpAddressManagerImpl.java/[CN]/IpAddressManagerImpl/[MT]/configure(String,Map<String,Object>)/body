{
  Map<Network.Service,Set<Network.Provider>> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Set<Provider> sgProviders=new HashSet<Provider>();
  sgProviders.add(Provider.SecurityGroupProvider);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup,sgProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultVPCOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultVPCOffProviders.put(Service.Dhcp,defaultProviders);
  defaultVPCOffProviders.put(Service.Dns,defaultProviders);
  defaultVPCOffProviders.put(Service.UserData,defaultProviders);
  defaultVPCOffProviders.put(Service.NetworkACL,defaultProviders);
  defaultVPCOffProviders.put(Service.Gateway,defaultProviders);
  defaultVPCOffProviders.put(Service.Lb,defaultProviders);
  defaultVPCOffProviders.put(Service.SourceNat,defaultProviders);
  defaultVPCOffProviders.put(Service.StaticNat,defaultProviders);
  defaultVPCOffProviders.put(Service.PortForwarding,defaultProviders);
  defaultVPCOffProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> internalLbOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultVpcProvider=new HashSet<Network.Provider>();
  defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);
  Set<Network.Provider> defaultInternalLbProvider=new HashSet<Network.Provider>();
  defaultInternalLbProvider.add(Network.Provider.InternalLbVm);
  internalLbOffProviders.put(Service.Dhcp,defaultVpcProvider);
  internalLbOffProviders.put(Service.Dns,defaultVpcProvider);
  internalLbOffProviders.put(Service.UserData,defaultVpcProvider);
  internalLbOffProviders.put(Service.NetworkACL,defaultVpcProvider);
  internalLbOffProviders.put(Service.Gateway,defaultVpcProvider);
  internalLbOffProviders.put(Service.Lb,defaultInternalLbProvider);
  internalLbOffProviders.put(Service.SourceNat,defaultVpcProvider);
  Map<Network.Service,Set<Network.Provider>> netscalerServiceProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> vrProvider=new HashSet<Network.Provider>();
  vrProvider.add(Provider.VirtualRouter);
  Set<Network.Provider> sgProvider=new HashSet<Network.Provider>();
  sgProvider.add(Provider.SecurityGroupProvider);
  Set<Network.Provider> nsProvider=new HashSet<Network.Provider>();
  nsProvider.add(Provider.Netscaler);
  netscalerServiceProviders.put(Service.Dhcp,vrProvider);
  netscalerServiceProviders.put(Service.Dns,vrProvider);
  netscalerServiceProviders.put(Service.UserData,vrProvider);
  netscalerServiceProviders.put(Service.SecurityGroup,sgProvider);
  netscalerServiceProviders.put(Service.StaticNat,nsProvider);
  netscalerServiceProviders.put(Service.Lb,nsProvider);
  Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> elb=new HashMap<Capability,String>();
  elb.put(Capability.ElasticLb,"true");
  Map<Capability,String> eip=new HashMap<Capability,String>();
  eip.put(Capability.ElasticIp,"true");
  serviceCapabilityMap.put(Service.Lb,elb);
  serviceCapabilityMap.put(Service.StaticNat,eip);
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and("dc",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and("allocated",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and("vlanId",AssignIpAddressSearch.entity().getVlanId(),Op.IN);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("type",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and("networkId",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join("vlan",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and("dc",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and("allocated",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and("type",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and("networkId",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and("podId",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join("podVlanMapSB",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join("vlan",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  Network.State.getStateMachine().registerListener(new NetworkStateListener(_usageEventDao,_networksDao,_configDao));
  logger.info("Network Manager is configured.");
  return true;
}
