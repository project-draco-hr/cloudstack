{
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Invalid network id is given");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException("IP " + ipToAssoc + " is not associated with any network");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException("IP " + ipToAssoc + " is not associated with network id"+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug("Unable to find ip address by id: " + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException("The owner of the network is not the same as owner of the IP");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null && !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException("IP " + ipToAssoc + " has services and rules associated in the network "+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug("Successfully associated ip address " + ip.getAddress().addr() + " to network "+ network);
    }
 else {
      s_logger.warn("Failed to associate ip address " + ip.getAddress().addr() + " to network "+ network);
    }
    return ip;
  }
  finally {
  }
}
