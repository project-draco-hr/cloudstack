{
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug("There are no static nat rules for the network elements");
    return true;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIps.add(publicIp);
    }
  }
  if (checkStaticNatIPAssocRequired(network,false,forRevoke,publicIps)) {
    applyIpAssociations(network,false,continueOnError,publicIps);
  }
  StaticNatServiceProvider element=_networkMgr.getStaticNatProviderForNetwork(network);
  try {
    success=element.applyStaticNats(network,staticNats);
  }
 catch (  ResourceUnavailableException e) {
    if (!continueOnError) {
      throw e;
    }
    s_logger.warn("Problems with " + element.getName() + " but pushing on",e);
    success=false;
  }
  for (  StaticNat staticNat : staticNats) {
    if (staticNat.isForRevoke()) {
      for (      PublicIp publicIp : publicIps) {
        if (publicIp.getId() == staticNat.getSourceIpAddressId()) {
          publicIps.remove(publicIp);
          IPAddressVO ip=_ipAddressDao.findByIdIncludingRemoved(staticNat.getSourceIpAddressId());
          ip.setAssociatedWithVmId(null);
          publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
          publicIps.add(publicIp);
          break;
        }
      }
    }
  }
  if (checkStaticNatIPAssocRequired(network,true,forRevoke,publicIps)) {
    applyIpAssociations(network,true,continueOnError,publicIps);
  }
  return success;
}
