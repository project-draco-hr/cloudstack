{
  GlobalLock portableIpLock=GlobalLock.getInternLock("PortablePublicIpRange");
  IPAddressVO ipaddr;
  try {
    portableIpLock.lock(5);
    ipaddr=Transaction.executeWithException(new TransactionCallbackWithException<IPAddressVO>(){
      @Override public IPAddressVO doInTransaction(      TransactionStatus status) throws Exception {
        PortableIpVO allocatedPortableIp;
        List<PortableIpVO> portableIpVOs=_portableIpDao.listByRegionIdAndState(1,PortableIp.State.Free);
        if (portableIpVOs == null || portableIpVOs.isEmpty()) {
          InsufficientAddressCapacityException ex=new InsufficientAddressCapacityException("Unable to find available portable IP addresses",Region.class,new Long(1));
          throw ex;
        }
        allocatedPortableIp=portableIpVOs.get(0);
        allocatedPortableIp.setAllocatedTime(new Date());
        allocatedPortableIp.setAllocatedToAccountId(ipOwner.getAccountId());
        allocatedPortableIp.setAllocatedInDomainId(ipOwner.getDomainId());
        allocatedPortableIp.setState(PortableIp.State.Allocated);
        _portableIpDao.update(allocatedPortableIp.getId(),allocatedPortableIp);
        long physicalNetworkId=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(dcId,TrafficType.Public).getId();
        Network network=_networkModel.getSystemNetworkByZoneAndTrafficType(dcId,TrafficType.Public);
        String range=allocatedPortableIp.getAddress() + "-" + allocatedPortableIp.getAddress();
        VlanVO vlan=new VlanVO(VlanType.VirtualNetwork,allocatedPortableIp.getVlan(),allocatedPortableIp.getGateway(),allocatedPortableIp.getNetmask(),dcId,range,network.getId(),physicalNetworkId,null,null,null);
        vlan=_vlanDao.persist(vlan);
        IPAddressVO ipaddr=new IPAddressVO(new Ip(allocatedPortableIp.getAddress()),dcId,networkId,vpcID,physicalNetworkId,network.getId(),vlan.getId(),true);
        ipaddr.setState(State.Allocated);
        ipaddr.setAllocatedTime(new Date());
        ipaddr.setAllocatedInDomainId(ipOwner.getDomainId());
        ipaddr.setAllocatedToAccountId(ipOwner.getId());
        ipaddr=_ipAddressDao.persist(ipaddr);
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_PORTABLE_IP_ASSIGN,ipaddr.getId(),ipaddr.getDataCenterId(),ipaddr.getId(),ipaddr.getAddress().toString(),ipaddr.isSourceNat(),null,ipaddr.getSystem(),ipaddr.getClass().getName(),ipaddr.getUuid());
        return ipaddr;
      }
    }
,InsufficientAddressCapacityException.class);
  }
  finally {
    portableIpLock.unlock();
  }
  return ipaddr;
}
