{
  final VlanType vlanType=VlanType.VirtualNetwork;
  final boolean assign=false;
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    PermissionDeniedException ex=new PermissionDeniedException("Cannot perform this operation, " + "Zone is currently disabled");
    ex.addProxyObject(zone.getUuid(),"zoneId");
    throw ex;
  }
  PublicIp ip=null;
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address called by the user " + callerUserId + " account "+ ipOwner.getId());
    }
    accountToLock=_accountDao.acquireInLockTable(ipOwner.getId());
    if (accountToLock == null) {
      s_logger.warn("Unable to lock account: " + ipOwner.getId());
      throw new ConcurrentOperationException("Unable to acquire account lock");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address lock acquired");
    }
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        PublicIp ip=fetchNewPublicIp(zone.getId(),null,null,ipOwner,vlanType,null,false,assign,null,isSystem,null,displayIp);
        if (ip == null) {
          InsufficientAddressCapacityException ex=new InsufficientAddressCapacityException("Unable to find available public IP addresses",DataCenter.class,zone.getId());
          ex.addProxyObject(ApiDBUtils.findZoneById(zone.getId()).getUuid());
          throw ex;
        }
        CallContext.current().setEventDetails("Ip Id: " + ip.getId());
        Ip ipAddress=ip.getAddress();
        s_logger.debug("Got " + ipAddress + " to assign for account "+ ipOwner.getId()+ " in zone "+ zone.getId());
        return ip;
      }
    }
);
  }
  finally {
    if (accountToLock != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Releasing lock account " + ipOwner);
      }
      _accountDao.releaseFromLockTable(ipOwner.getId());
      s_logger.debug("Associate IP address lock released");
    }
  }
  return ip;
}
