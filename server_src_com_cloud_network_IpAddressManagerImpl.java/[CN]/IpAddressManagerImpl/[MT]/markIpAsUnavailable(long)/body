{
  final IPAddressVO ip=_ipAddressDao.findById(addrId);
  if (ip.getAllocatedToAccountId() == null && ip.getAllocatedTime() == null) {
    logger.trace("Ip address id=" + addrId + " is already released");
    return ip;
  }
  if (ip.getState() != State.Releasing) {
    return Transaction.execute(new TransactionCallback<IPAddressVO>(){
      @Override public IPAddressVO doInTransaction(      TransactionStatus status){
        if (updateIpResourceCount(ip)) {
          _resourceLimitMgr.decrementResourceCount(_ipAddressDao.findById(addrId).getAllocatedToAccountId(),ResourceType.public_ip);
        }
        if (ip.getAllocatedToAccountId() != null && ip.getAllocatedToAccountId() != Account.ACCOUNT_ID_SYSTEM) {
          VlanVO vlan=_vlanDao.findById(ip.getVlanId());
          String guestType=vlan.getVlanType().toString();
          if (!isIpDedicated(ip)) {
            String eventType=ip.isPortable() ? EventTypes.EVENT_PORTABLE_IP_RELEASE : EventTypes.EVENT_NET_IP_RELEASE;
            UsageEventUtils.publishUsageEvent(eventType,ip.getAllocatedToAccountId(),ip.getDataCenterId(),addrId,ip.getAddress().addr(),ip.isSourceNat(),guestType,ip.getSystem(),ip.getClass().getName(),ip.getUuid());
          }
        }
        return _ipAddressDao.markAsUnavailable(addrId);
      }
    }
);
  }
  return ip;
}
