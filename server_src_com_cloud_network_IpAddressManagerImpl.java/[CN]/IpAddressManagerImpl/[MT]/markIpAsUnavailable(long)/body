{
  Transaction txn=Transaction.currentTxn();
  IPAddressVO ip=_ipAddressDao.findById(addrId);
  if (ip.getAllocatedToAccountId() == null && ip.getAllocatedTime() == null) {
    s_logger.trace("Ip address id=" + addrId + " is already released");
    return ip;
  }
  if (ip.getState() != State.Releasing) {
    txn.start();
    if (ip.getAssociatedWithNetworkId() != null && !isIpDedicated(ip)) {
      _resourceLimitMgr.decrementResourceCount(_ipAddressDao.findById(addrId).getAllocatedToAccountId(),ResourceType.public_ip);
    }
    if (ip.getAllocatedToAccountId() != null && ip.getAllocatedToAccountId() != Account.ACCOUNT_ID_SYSTEM) {
      VlanVO vlan=_vlanDao.findById(ip.getVlanId());
      String guestType=vlan.getVlanType().toString();
      if (!isIpDedicated(ip)) {
        String eventType=ip.isPortable() ? EventTypes.EVENT_PORTABLE_IP_RELEASE : EventTypes.EVENT_NET_IP_RELEASE;
        UsageEventUtils.publishUsageEvent(eventType,ip.getAllocatedToAccountId(),ip.getDataCenterId(),addrId,ip.getAddress().addr(),ip.isSourceNat(),guestType,ip.getSystem(),ip.getClass().getName(),ip.getUuid());
      }
    }
    ip=_ipAddressDao.markAsUnavailable(addrId);
    txn.commit();
  }
  return ip;
}
