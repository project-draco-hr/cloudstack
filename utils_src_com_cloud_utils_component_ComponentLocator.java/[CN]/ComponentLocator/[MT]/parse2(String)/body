{
  try {
    SAXParserFactory spfactory=SAXParserFactory.newInstance();
    SAXParser saxParser=spfactory.newSAXParser();
    File file=PropertiesUtil.findConfigFile(filename);
    if (file == null) {
      throw new CloudRuntimeException("Unable to find " + filename);
    }
    s_logger.info("Config file found at " + file.getAbsolutePath() + ".  Configuring "+ _serverName);
    XmlHandler handler=new XmlHandler(_serverName);
    saxParser.parse(file,handler);
    _daoMap=new LinkedHashMap<String,ComponentInfo<GenericDao<?,? extends Serializable>>>();
    _managerMap=new LinkedHashMap<String,ComponentInfo<Manager>>();
    _adapterMap=new HashMap<String,Adapters<? extends Adapter>>();
    if (handler.parent != null) {
      String[] tokens=handler.parent.split(":");
      String parentFile=filename;
      String parentName=handler.parent;
      if (tokens.length > 1) {
        parentFile=tokens[0];
        parentName=tokens[1];
      }
      _parentLocator=new ComponentLocator(parentName);
      _parentLocator.parse2(parentFile);
      _daoMap.putAll(_parentLocator._daoMap);
      _managerMap.putAll(_parentLocator._managerMap);
      _adapterMap.putAll(_parentLocator._adapterMap);
    }
    ComponentLibrary library=null;
    if (handler.library != null) {
      Class<?> clazz=Class.forName(handler.library);
      library=(ComponentLibrary)clazz.newInstance();
      _daoMap.putAll(library.getDaos());
      _managerMap.putAll(library.getManagers());
    }
    _daoMap.putAll(handler.daos);
    _managerMap.putAll(handler.managers);
    return new Pair<XmlHandler,ComponentLibrary>(handler,library);
  }
 catch (  ParserConfigurationException e) {
    s_logger.error("Unable to load " + _serverName + " due to errors while parsing "+ filename,e);
    System.exit(1);
  }
catch (  SAXException e) {
    s_logger.error("Unable to load " + _serverName + " due to errors while parsing "+ filename,e);
    System.exit(1);
  }
catch (  IOException e) {
    s_logger.error("Unable to load " + _serverName + " due to errors while reading from "+ filename,e);
    System.exit(1);
  }
catch (  CloudRuntimeException e) {
    s_logger.error("Unable to load configuration for " + _serverName + " from "+ filename,e);
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error("Unable to load configuration for " + _serverName + " from "+ filename,e);
    System.exit(1);
  }
  return null;
}
