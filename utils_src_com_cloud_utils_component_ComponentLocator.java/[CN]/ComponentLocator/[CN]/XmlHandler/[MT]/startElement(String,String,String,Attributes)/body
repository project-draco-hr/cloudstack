{
  if (qName.equals("interceptor") && s_interceptors.size() == 0) {
synchronized (s_interceptors) {
      if (s_interceptors.size() == 0) {
        String libraryName=getAttribute(atts,"library");
        try {
          Class<?> libraryClazz=Class.forName(libraryName);
          InterceptorLibrary library=(InterceptorLibrary)libraryClazz.newInstance();
          resetInterceptors(library);
        }
 catch (        ClassNotFoundException e) {
          throw new CloudRuntimeException("Unable to find " + libraryName,e);
        }
catch (        InstantiationException e) {
          throw new CloudRuntimeException("Unable to instantiate " + libraryName,e);
        }
catch (        IllegalAccessException e) {
          throw new CloudRuntimeException("Illegal access " + libraryName,e);
        }
      }
    }
  }
  if (!parse) {
    if (qName.equals(_serverName)) {
      parse=true;
      parent=getAttribute(atts,"extends");
      String implementationClass=getAttribute(atts,"class");
      if (implementationClass != null) {
        try {
          componentClass=Class.forName(implementationClass);
        }
 catch (        ClassNotFoundException e) {
          throw new CloudRuntimeException("Unable to find " + implementationClass,e);
        }
      }
      library=getAttribute(atts,"library");
    }
  }
 else   if (qName.equals("adapters")) {
    lst=new ArrayList<ComponentInfo<Adapter>>();
    String key=getAttribute(atts,"key");
    if (key == null) {
      throw new CloudRuntimeException("Missing key attribute for adapters");
    }
    adapters.put(key,lst);
  }
 else   if (qName.equals("adapter")) {
    ComponentInfo<Adapter> info=new ComponentInfo<Adapter>();
    fillInfo(atts,Adapter.class,info);
    lst.add(info);
    currentInfo=info;
  }
 else   if (qName.equals("manager")) {
    ComponentInfo<Manager> info=new ComponentInfo<Manager>();
    fillInfo(atts,Manager.class,info);
    s_logger.info("Adding Manager: " + info.name);
    for (    String key : info.keys) {
      s_logger.info("Linking " + key + " to "+ info.name);
      managers.put(key,info);
    }
    currentInfo=info;
  }
 else   if (qName.equals("param")) {
    paramName=getAttribute(atts,"name");
    value=new StringBuilder();
  }
 else   if (qName.equals("dao")) {
    ComponentInfo<GenericDao<?,?>> info=new ComponentInfo<GenericDao<?,?>>();
    fillInfo(atts,GenericDao.class,info);
    for (    String key : info.keys) {
      daos.put(key,info);
    }
    currentInfo=info;
  }
 else   if (qName.equals("checker")) {
    ComponentInfo<SystemIntegrityChecker> info=new ComponentInfo<SystemIntegrityChecker>();
    fillInfo(atts,SystemIntegrityChecker.class,info);
    checkers.put(info.name,info);
    s_logger.info("Adding system integrity checker: " + info.name);
    currentInfo=info;
  }
 else {
  }
}
