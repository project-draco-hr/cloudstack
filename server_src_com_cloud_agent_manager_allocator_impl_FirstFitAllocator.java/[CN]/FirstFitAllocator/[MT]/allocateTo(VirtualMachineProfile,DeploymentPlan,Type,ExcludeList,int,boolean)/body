{
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  ServiceOffering offering=vmProfile.getServiceOffering();
  VMTemplateVO template=(VMTemplateVO)vmProfile.getTemplate();
  Account account=vmProfile.getOwner();
  if (type == Host.Type.Storage) {
    return new ArrayList<Host>();
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Looking for hosts in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId);
  }
  String hostTagOnOffering=offering.getHostTag();
  String hostTagOnTemplate=template.getTemplateTag();
  boolean hasSvcOfferingTag=hostTagOnOffering != null ? true : false;
  boolean hasTemplateTag=hostTagOnTemplate != null ? true : false;
  List<HostVO> clusterHosts=new ArrayList<HostVO>();
  String haVmTag=(String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);
  if (haVmTag != null) {
    clusterHosts=_hostDao.listByHostTag(type,clusterId,podId,dcId,haVmTag);
  }
 else {
    if (hostTagOnOffering == null && hostTagOnTemplate == null) {
      clusterHosts=_resourceMgr.listAllUpAndEnabledNonHAHosts(type,clusterId,podId,dcId);
    }
 else {
      List<HostVO> hostsMatchingOfferingTag=new ArrayList<HostVO>();
      List<HostVO> hostsMatchingTemplateTag=new ArrayList<HostVO>();
      if (hasSvcOfferingTag) {
        if (logger.isDebugEnabled()) {
          logger.debug("Looking for hosts having tag specified on SvcOffering:" + hostTagOnOffering);
        }
        hostsMatchingOfferingTag=_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTagOnOffering);
        if (logger.isDebugEnabled()) {
          logger.debug("Hosts with tag '" + hostTagOnOffering + "' are:"+ hostsMatchingOfferingTag);
        }
      }
      if (hasTemplateTag) {
        if (logger.isDebugEnabled()) {
          logger.debug("Looking for hosts having tag specified on Template:" + hostTagOnTemplate);
        }
        hostsMatchingTemplateTag=_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTagOnTemplate);
        if (logger.isDebugEnabled()) {
          logger.debug("Hosts with tag '" + hostTagOnTemplate + "' are:"+ hostsMatchingTemplateTag);
        }
      }
      if (hasSvcOfferingTag && hasTemplateTag) {
        hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);
        clusterHosts=_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTagOnTemplate);
        if (logger.isDebugEnabled()) {
          logger.debug("Found " + hostsMatchingOfferingTag.size() + " Hosts satisfying both tags, host ids are:"+ hostsMatchingOfferingTag);
        }
        clusterHosts=hostsMatchingOfferingTag;
      }
 else {
        if (hasSvcOfferingTag) {
          clusterHosts=hostsMatchingOfferingTag;
        }
 else {
          clusterHosts=hostsMatchingTemplateTag;
        }
      }
    }
  }
  List<HostVO> allhostsInCluster=_hostDao.listAllUpAndEnabledNonHAHosts(type,clusterId,podId,dcId,null);
  allhostsInCluster.removeAll(clusterHosts);
  for (  HostVO host : allhostsInCluster) {
    avoid.addHost(host.getId());
  }
  return allocateTo(plan,offering,template,avoid,clusterHosts,returnUpTo,considerReservedCapacity,account);
}
