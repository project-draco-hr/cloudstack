{
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  ServiceOffering offering=vmProfile.getServiceOffering();
  VMTemplateVO template=(VMTemplateVO)vmProfile.getTemplate();
  Account account=vmProfile.getOwner();
  List<Host> suitableHosts=new ArrayList<Host>();
  if (type == Host.Type.Storage) {
    return suitableHosts;
  }
  String hostTagOnOffering=offering.getHostTag();
  String hostTagOnTemplate=template.getTemplateTag();
  boolean hasSvcOfferingTag=hostTagOnOffering != null ? true : false;
  boolean hasTemplateTag=hostTagOnTemplate != null ? true : false;
  String haVmTag=(String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);
  if (haVmTag != null) {
    hosts.retainAll(_hostDao.listByHostTag(type,clusterId,podId,dcId,haVmTag));
  }
 else {
    if (hostTagOnOffering == null && hostTagOnTemplate == null) {
      hosts.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type,clusterId,podId,dcId));
    }
 else {
      if (hasSvcOfferingTag) {
        hosts.retainAll(_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTagOnOffering));
      }
      if (hasTemplateTag) {
        hosts.retainAll(_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTagOnTemplate));
      }
    }
  }
  if (!hosts.isEmpty()) {
    suitableHosts=allocateTo(plan,offering,template,avoid,hosts,returnUpTo,considerReservedCapacity,account);
  }
  return suitableHosts;
}
