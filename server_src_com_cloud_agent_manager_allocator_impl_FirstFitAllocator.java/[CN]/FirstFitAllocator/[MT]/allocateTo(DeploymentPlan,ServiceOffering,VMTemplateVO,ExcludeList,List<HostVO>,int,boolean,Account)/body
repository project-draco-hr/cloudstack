{
  if (_allocationAlgorithm.equals("random") || _allocationAlgorithm.equals("userconcentratedpod_random")) {
    Collections.shuffle(hosts);
  }
 else   if (_allocationAlgorithm.equals("userdispersing")) {
    hosts=reorderHostsByNumberOfVms(plan,hosts,account);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitAllocator has " + hosts.size() + " hosts to check for allocation: "+ hosts);
  }
  hosts=prioritizeHosts(template,hosts);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Found " + hosts.size() + " hosts for allocation after prioritization: "+ hosts);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Looking for speed=" + (offering.getCpu() * offering.getSpeed()) + "Mhz, Ram="+ offering.getRamSize());
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  for (  HostVO host : hosts) {
    if (suitableHosts.size() == returnUpTo) {
      break;
    }
    if (avoid.shouldAvoid(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " is in avoid set, skipping this and trying other available hosts");
      }
      continue;
    }
    Long vmCount=_vmInstanceDao.countRunningByHostId(host.getId());
    Long maxGuestLimit=getHostMaxGuestLimit(host);
    if (vmCount.longValue() == maxGuestLimit.longValue()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " already has max Running VMs(count includes system VMs), limit is: "+ maxGuestLimit+ " , skipping this and trying other available hosts");
      }
      continue;
    }
    boolean numCpusGood=host.getCpus().intValue() >= offering.getCpu();
    boolean cpuFreqGood=host.getSpeed().intValue() >= offering.getSpeed();
    int cpu_requested=offering.getCpu() * offering.getSpeed();
    long ram_requested=offering.getRamSize() * 1024L * 1024L;
    boolean hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,_factor,considerReservedCapacity);
    if (numCpusGood && cpuFreqGood && hostHasCapacity) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Found a suitable host, adding to list: " + host.getId());
      }
      suitableHosts.add(host);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Not using host " + host.getId() + "; numCpusGood: "+ numCpusGood+ "; cpuFreqGood: "+ cpuFreqGood+ ", host has capacity?"+ hostHasCapacity);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Host Allocator returning " + suitableHosts.size() + " suitable hosts");
  }
  return suitableHosts;
}
