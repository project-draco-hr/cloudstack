{
  if (_allocationAlgorithm.equals("random")) {
    Collections.shuffle(hosts);
  }
  if (s_logger.isDebugEnabled()) {
    StringBuffer sb=new StringBuffer();
    for (    Host h : avoid) {
      sb.append(h.getName()).append(" ");
    }
    s_logger.debug("Found " + hosts.size() + " hosts for allocation and a avoid set of ["+ sb+ "]");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Looking for speed=" + (offering.getCpu() * offering.getSpeed()) + "Mhz, Ram="+ offering.getRamSize());
  }
  hosts=prioritizeHosts(template,hosts);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Found " + hosts.size() + " hosts for allocation after prioritization");
  }
  for (  HostVO host : hosts) {
    if (avoid.contains(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("host " + host.getName() + " is in avoid set, skip and try other available hosts");
      }
      continue;
    }
    long usedMemory=0;
    double totalSpeed=0d;
    List<DomainRouterVO> domainRouters=_routerDao.listUpByHostId(host.getId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found " + domainRouters.size() + " router domains on host "+ host.getId());
    }
    for (    DomainRouterVO router : domainRouters) {
      usedMemory+=router.getRamSize() * 1024L * 1024L;
    }
    List<ConsoleProxyVO> proxys=_consoleProxyDao.listUpByHostId(host.getId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found " + proxys.size() + " console proxy on host "+ host.getId());
    }
    for (    ConsoleProxyVO proxy : proxys) {
      usedMemory+=proxy.getRamSize() * 1024L * 1024L;
    }
    List<SecondaryStorageVmVO> secStorageVms=_secStorgaeVmDao.listUpByHostId(host.getId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found " + secStorageVms.size() + " secondary storage VM on host "+ host.getId());
    }
    for (    SecondaryStorageVmVO secStorageVm : secStorageVms) {
      usedMemory+=secStorageVm.getRamSize() * 1024L * 1024L;
    }
    List<UserVmVO> vms=_vmDao.listUpByHostId(host.getId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found " + vms.size() + " user VM on host "+ host.getId());
    }
    for (    UserVmVO vm : vms) {
      ServiceOffering so=_offeringDao.findById(vm.getServiceOfferingId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("vm " + vm.getId() + ": speed="+ (so.getCpu() * so.getSpeed())+ "Mhz, RAM="+ so.getRamSize()+ "MB");
      }
      usedMemory+=so.getRamSize() * 1024L * 1024L;
      totalSpeed+=so.getCpu() * (so.getSpeed() * 0.99);
    }
    if (s_logger.isDebugEnabled()) {
      long availableSpeed=(long)(host.getCpus() * host.getSpeed() * _factor);
      double desiredSpeed=offering.getCpu() * (offering.getSpeed() * 0.99);
      long coreSpeed=host.getSpeed();
      s_logger.debug("Host " + host.getId() + ": available speed="+ availableSpeed+ "Mhz, core speed="+ coreSpeed+ "Mhz, used speed="+ totalSpeed+ "Mhz, desired speed="+ desiredSpeed+ "Mhz, desired cores: "+ offering.getCpu()+ ", available cores: "+ host.getCpus()+ ", RAM="+ host.getTotalMemory()+ ", avail RAM="+ (host.getTotalMemory() - usedMemory)+ ", desired RAM="+ (offering.getRamSize() * 1024L * 1024L));
    }
    boolean numCpusGood=host.getCpus().intValue() >= offering.getCpu();
    boolean coreSpeedGood=host.getSpeed().doubleValue() >= (offering.getSpeed() * 0.99);
    boolean totalSpeedGood=((host.getCpus().doubleValue() * host.getSpeed().doubleValue() * _factor) - totalSpeed) >= (offering.getCpu() * (offering.getSpeed() * 0.99));
    boolean memoryGood=(host.getTotalMemory() - usedMemory) >= (offering.getRamSize() * 1024L * 1024L);
    if (numCpusGood && totalSpeedGood && coreSpeedGood&& memoryGood) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("found host " + host.getId());
      }
      return host;
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("not using host " + host.getId() + "; numCpusGood: "+ numCpusGood+ ", coreSpeedGood: "+ coreSpeedGood+ ", totalSpeedGood: "+ totalSpeedGood+ ", memoryGood: "+ memoryGood);
      }
    }
  }
  return null;
}
