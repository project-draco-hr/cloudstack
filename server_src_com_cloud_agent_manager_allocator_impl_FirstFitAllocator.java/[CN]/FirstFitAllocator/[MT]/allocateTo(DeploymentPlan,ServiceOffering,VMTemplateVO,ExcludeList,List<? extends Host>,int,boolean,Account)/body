{
  if (_allocationAlgorithm.equals("random") || _allocationAlgorithm.equals("userconcentratedpod_random")) {
    Collections.shuffle(hosts);
  }
 else   if (_allocationAlgorithm.equals("userdispersing")) {
    hosts=reorderHostsByNumberOfVms(plan,hosts,account);
  }
 else   if (_allocationAlgorithm.equals("firstfitleastconsumed")) {
    hosts=reorderHostsByCapacity(plan,hosts);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("FirstFitAllocator has " + hosts.size() + " hosts to check for allocation: "+ hosts);
  }
  hosts=prioritizeHosts(template,offering,hosts);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Found " + hosts.size() + " hosts for allocation after prioritization: "+ hosts);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Looking for speed=" + (offering.getCpu() * offering.getSpeed()) + "Mhz, Ram="+ offering.getRamSize());
  }
  long serviceOfferingId=offering.getId();
  List<Host> suitableHosts=new ArrayList<Host>();
  ServiceOfferingDetailsVO offeringDetails=null;
  for (  Host host : hosts) {
    if (suitableHosts.size() == returnUpTo) {
      break;
    }
    if (avoid.shouldAvoid(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " is in avoid set, skipping this and trying other available hosts");
      }
      continue;
    }
    if (_capacityMgr.checkIfHostReachMaxGuestLimit(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " already has max Running VMs(count includes system VMs), skipping this and trying other available hosts");
      }
      continue;
    }
    if ((offeringDetails=_serviceOfferingDetailsDao.findDetail(serviceOfferingId,GPU.Keys.vgpuType.toString())) != null) {
      ServiceOfferingDetailsVO groupName=_serviceOfferingDetailsDao.findDetail(serviceOfferingId,GPU.Keys.pciDevice.toString());
      if (!_resourceMgr.isGPUDeviceAvailable(host.getId(),groupName.getValue(),offeringDetails.getValue())) {
        s_logger.info("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " does not have required GPU devices available");
        continue;
      }
    }
    int cpu_requested=offering.getCpu() * offering.getSpeed();
    long ram_requested=offering.getRamSize() * 1024L * 1024L;
    Cluster cluster=_clusterDao.findById(host.getClusterId());
    ClusterDetailsVO clusterDetailsCpuOvercommit=_clusterDetailsDao.findDetail(cluster.getId(),"cpuOvercommitRatio");
    ClusterDetailsVO clusterDetailsRamOvercommmt=_clusterDetailsDao.findDetail(cluster.getId(),"memoryOvercommitRatio");
    Float cpuOvercommitRatio=Float.parseFloat(clusterDetailsCpuOvercommit.getValue());
    Float memoryOvercommitRatio=Float.parseFloat(clusterDetailsRamOvercommmt.getValue());
    boolean hostHasCpuCapability=_capacityMgr.checkIfHostHasCpuCapability(host.getId(),offering.getCpu(),offering.getSpeed());
    boolean hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,cpuOvercommitRatio,memoryOvercommitRatio,considerReservedCapacity);
    if (hostHasCpuCapability && hostHasCapacity) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Found a suitable host, adding to list: " + host.getId());
      }
      suitableHosts.add(host);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Not using host " + host.getId() + "; host has cpu capability? "+ hostHasCpuCapability+ ", host has capacity?"+ hostHasCapacity);
      }
      avoid.addHost(host.getId());
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Host Allocator returning " + suitableHosts.size() + " suitable hosts");
  }
  return suitableHosts;
}
