{
  if (aclRequestString.equalsIgnoreCase("public-read"))   return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_READ,"A");
 else   if (aclRequestString.equalsIgnoreCase("public-read-write"))   return new Triple<Integer,Integer,String>(PERMISSION_FULL,(PERMISSION_READ | PERMISSION_WRITE),"A");
 else   if (aclRequestString.equalsIgnoreCase("authenticated-read"))   return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_READ,"*");
 else   if (aclRequestString.equalsIgnoreCase("private"))   return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_FULL,null);
 else   if (aclRequestString.equalsIgnoreCase("bucket-owner-read")) {
    if (target.equalsIgnoreCase("SBucket"))     return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_FULL,null);
 else     return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_READ,ownerID);
  }
 else   if (aclRequestString.equalsIgnoreCase("bucket-owner-full-control")) {
    if (target.equalsIgnoreCase("SBucket"))     return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_FULL,null);
 else     return new Triple<Integer,Integer,String>(PERMISSION_FULL,PERMISSION_FULL,ownerID);
  }
 else   throw new UnsupportedException("Unknown Canned Access Policy: " + aclRequestString + " is not supported");
}
