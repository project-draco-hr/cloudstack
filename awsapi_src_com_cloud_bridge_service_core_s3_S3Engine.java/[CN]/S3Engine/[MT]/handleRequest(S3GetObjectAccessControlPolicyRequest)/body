{
  S3PolicyContext context=null;
  S3AccessControlPolicy policy=new S3AccessControlPolicy();
  SBucketDao bucketDao=new SBucketDao();
  String bucketName=request.getBucketName();
  SBucket sbucket=bucketDao.getByName(bucketName);
  if (sbucket == null)   throw new NoSuchObjectException("Bucket " + bucketName + " does not exist");
  SObjectDao sobjectDao=new SObjectDao();
  String nameKey=request.getKey();
  SObject sobject=sobjectDao.getByNameKey(sbucket,nameKey);
  if (sobject == null)   throw new NoSuchObjectException("Object " + request.getKey() + " does not exist");
  String deletionMark=sobject.getDeletionMark();
  if (null != deletionMark) {
    policy.setResultCode(404);
    policy.setResultDescription("Object " + request.getKey() + " has been deleted (1)");
    return policy;
  }
  SObjectItem item=null;
  int versioningStatus=sbucket.getVersioningStatus();
  String wantVersion=request.getVersion();
  if (SBucket.VERSIONING_ENABLED == versioningStatus && null != wantVersion)   item=sobject.getVersion(wantVersion);
 else   item=sobject.getLatestVersion((SBucket.VERSIONING_ENABLED != versioningStatus));
  if (item == null) {
    policy.setResultCode(404);
    policy.setResultDescription("Object " + request.getKey() + " has been deleted (2)");
    return policy;
  }
  if (SBucket.VERSIONING_ENABLED == versioningStatus) {
    context=new S3PolicyContext(PolicyActions.GetObjectVersionAcl,bucketName);
    context.setEvalParam(ConditionKeys.VersionId,wantVersion);
    policy.setVersion(item.getVersion());
  }
 else   context=new S3PolicyContext(PolicyActions.GetObjectAcl,bucketName);
  context.setKeyName(nameKey);
  verifyAccess(context,"SObjectItem",item.getId(),SAcl.PERMISSION_READ_ACL);
  S3CanonicalUser owner=new S3CanonicalUser();
  owner.setID(sobject.getOwnerCanonicalId());
  owner.setDisplayName("");
  policy.setOwner(owner);
  policy.setResultCode(200);
  SAclDao aclDao=new SAclDao();
  List<SAcl> grants=aclDao.listGrants("SObjectItem",item.getId());
  policy.setGrants(S3Grant.toGrants(grants));
  return policy;
}
