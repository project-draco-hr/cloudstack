{
  S3PutObjectInlineResponse response=new S3PutObjectInlineResponse();
  String bucketName=request.getBucketName();
  String key=request.getKey();
  S3MetaDataEntry[] meta=request.getMetaEntries();
  SBucketVO bucket=bucketDao.getByName(bucketName);
  if (bucket == null) {
    logger.error("completeMultipartUpload( failed since " + bucketName + " does not exist");
    response.setResultCode(404);
  }
  OrderedPair<SObjectVO,SObjectItemVO> object_objectitem_pair=allocObjectItem(bucket,key,meta,null,request.getCannedAccess());
  OrderedPair<SHostVO,String> host_storagelocation_pair=getBucketStorageHost(bucket);
  S3BucketAdapter bucketAdapter=getStorageHostBucketAdapter(host_storagelocation_pair.getFirst());
  String itemFileName=object_objectitem_pair.getSecond().getStoredPath();
  httpResp.setStatus(200);
  httpResp.setContentType("text/xml; charset=UTF-8");
  String version=object_objectitem_pair.getSecond().getVersion();
  if (null != version)   httpResp.addHeader("x-amz-version-id",version);
  httpResp.flushBuffer();
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.AWSAPI_DB);
  try {
    txn.start();
    OrderedPair<String,Long> result=bucketAdapter.concatentateObjects(host_storagelocation_pair.getSecond(),bucket.getName(),itemFileName,ServiceProvider.getInstance().getMultipartDir(),parts,outputStream);
    response.setETag(result.getFirst());
    response.setLastModified(DateHelper.toCalendar(object_objectitem_pair.getSecond().getLastModifiedTime()));
    SObjectItemVO item=itemDao.findById(object_objectitem_pair.getSecond().getId());
    item.setMd5(result.getFirst());
    item.setStoredSize(result.getSecond().longValue());
    itemDao.update(item.getId(),item);
    response.setResultCode(200);
  }
 catch (  Exception e) {
    logger.error("completeMultipartUpload failed due to " + e.getMessage(),e);
    txn.close();
  }
  return response;
}
