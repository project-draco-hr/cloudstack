{
  int size=bucketName.length();
  if (3 > size || size > 255)   throw new InvalidBucketName(bucketName + " is not between 3 and 255 characters long");
  if (!Character.isLetterOrDigit(bucketName.charAt(0)))   throw new InvalidBucketName(bucketName + " does not start with a number or letter");
  for (int i=0; i < bucketName.length(); i++) {
    char next=bucketName.charAt(i);
    if (Character.isLetter(next))     continue;
 else     if (Character.isDigit(next))     continue;
 else     if ('.' == next)     continue;
 else     if ('_' == next)     continue;
 else     if ('-' == next)     continue;
 else     throw new InvalidBucketName(bucketName + " contains the invalid character: " + next);
  }
  String[] parts=bucketName.split("\\.");
  if (4 == parts.length) {
    try {
      int first=Integer.parseInt(parts[0]);
      int second=Integer.parseInt(parts[1]);
      int third=Integer.parseInt(parts[2]);
      int fourth=Integer.parseInt(parts[3]);
      throw new InvalidBucketName(bucketName + " is formatted as an IP address");
    }
 catch (    NumberFormatException e) {
      throw new InvalidBucketName(bucketName);
    }
  }
  if (useDNSGuidelines) {
    if (3 > size || size > 63)     throw new InvalidBucketName("DNS requiremens, bucket name: " + bucketName + " is not between 3 and 63 characters long");
    int pos=bucketName.indexOf('_');
    if (-1 != pos)     throw new InvalidBucketName("DNS requiremens, bucket name: " + bucketName + " should not contain underscores");
    if (bucketName.endsWith("-"))     throw new InvalidBucketName("DNS requiremens, bucket name: " + bucketName + " should not end with a dash");
    pos=bucketName.indexOf("..");
    if (-1 != pos)     throw new InvalidBucketName("DNS requiremens, bucket name: " + bucketName + " should not contain \"..\"");
    if (-1 != bucketName.indexOf("-.") || -1 != bucketName.indexOf(".-"))     throw new InvalidBucketName("DNS requiremens, bucket name: " + bucketName + " should not contain \".-\" or \"-.\"");
  }
}
