{
  S3CreateBucketResponse response=new S3CreateBucketResponse();
  String cannedAccessPolicy=request.getCannedAccess();
  String bucketName=request.getBucketName();
  response.setBucketName(bucketName);
  Transaction txn=null;
  verifyBucketName(bucketName,false);
  S3PolicyContext context=new S3PolicyContext(PolicyActions.CreateBucket,bucketName);
  context.setEvalParam(ConditionKeys.Acl,cannedAccessPolicy);
  if (PolicyAccess.DENY == verifyPolicy(context))   throw new PermissionDeniedException("Access Denied - bucket policy DENY result");
  OrderedPair<SHostVO,String> shost_storagelocation_pair=null;
  boolean success=false;
  try {
    txn=Transaction.open(Transaction.AWSAPI_DB);
    if (bucketDao.getByName(request.getBucketName()) != null)     throw new ObjectAlreadyExistsException("Bucket already exists");
    shost_storagelocation_pair=allocBucketStorageHost(request.getBucketName(),null);
    SBucketVO sbucket=new SBucketVO(request.getBucketName(),DateHelper.currentGMTTime(),UserContext.current().getCanonicalUserId(),shost_storagelocation_pair.getFirst());
    shost_storagelocation_pair.getFirst().getBuckets().add(sbucket);
    sbucket=bucketDao.persist(sbucket);
    S3AccessControlList acl=request.getAcl();
    if (null != cannedAccessPolicy)     setCannedAccessControls(cannedAccessPolicy,"SBucket",sbucket.getId(),sbucket);
 else     if (null != acl)     aclDao.save("SBucket",sbucket.getId(),acl);
 else     setSingleAcl("SBucket",sbucket.getId(),SAcl.PERMISSION_FULL);
    success=true;
  }
  finally {
    if (!success && shost_storagelocation_pair != null) {
      S3BucketAdapter bucketAdapter=getStorageHostBucketAdapter(shost_storagelocation_pair.getFirst());
      bucketAdapter.deleteContainer(shost_storagelocation_pair.getSecond(),request.getBucketName());
    }
    txn.rollback();
    txn.close();
  }
  return response;
}
