{
  S3GetObjectResponse response=new S3GetObjectResponse();
  S3PolicyContext context=null;
  boolean ifRange=false;
  long bytesStart=request.getByteRangeStart();
  long bytesEnd=request.getByteRangeEnd();
  int resultCode=200;
  SBucketDao bucketDao=new SBucketDao();
  String bucketName=request.getBucketName();
  SBucket sbucket=bucketDao.getByName(bucketName);
  if (sbucket == null) {
    response.setResultCode(404);
    response.setResultDescription("Bucket " + request.getBucketName() + " does not exist");
    return response;
  }
  SObjectDao objectDao=new SObjectDao();
  String nameKey=request.getKey();
  SObject sobject=objectDao.getByNameKey(sbucket,nameKey);
  if (sobject == null) {
    response.setResultCode(404);
    response.setResultDescription("Object " + request.getKey() + " does not exist in bucket "+ request.getBucketName());
    return response;
  }
  String deletionMark=sobject.getDeletionMark();
  if (null != deletionMark) {
    response.setDeleteMarker(deletionMark);
    response.setResultCode(404);
    response.setResultDescription("Object " + request.getKey() + " has been deleted (1)");
    return response;
  }
  SObjectItem item=null;
  int versioningStatus=sbucket.getVersioningStatus();
  String wantVersion=request.getVersion();
  if (SBucket.VERSIONING_ENABLED == versioningStatus && null != wantVersion)   item=sobject.getVersion(wantVersion);
 else   item=sobject.getLatestVersion((SBucket.VERSIONING_ENABLED != versioningStatus));
  if (item == null) {
    response.setResultCode(404);
    response.setResultDescription("Object " + request.getKey() + " has been deleted (2)");
    return response;
  }
  if (SBucket.VERSIONING_ENABLED == versioningStatus) {
    context=new S3PolicyContext(PolicyActions.GetObjectVersion,bucketName);
    context.setEvalParam(ConditionKeys.VersionId,wantVersion);
  }
 else   context=new S3PolicyContext(PolicyActions.GetObject,bucketName);
  context.setKeyName(nameKey);
  verifyAccess(context,"SObjectItem",item.getId(),SAcl.PERMISSION_READ);
  if (request.isReturnCompleteObjectOnConditionFailure() && (0 <= bytesStart && 0 <= bytesEnd))   ifRange=true;
  resultCode=conditionPassed(request.getConditions(),item.getLastModifiedTime(),item.getMd5(),ifRange);
  if (-1 == resultCode) {
    resultCode=200;
    bytesStart=-1;
    bytesEnd=-1;
  }
 else   if (200 != resultCode) {
    response.setResultCode(resultCode);
    response.setResultDescription("Precondition Failed");
    return response;
  }
  SMetaDao metaDao=new SMetaDao();
  List<SMeta> itemMetaData=metaDao.getByTarget("SObjectItem",item.getId());
  if (null != itemMetaData) {
    int i=0;
    S3MetaDataEntry[] metaEntries=new S3MetaDataEntry[itemMetaData.size()];
    ListIterator<SMeta> it=itemMetaData.listIterator();
    while (it.hasNext()) {
      SMeta oneTag=(SMeta)it.next();
      S3MetaDataEntry oneEntry=new S3MetaDataEntry();
      oneEntry.setName(oneTag.getName());
      oneEntry.setValue(oneTag.getValue());
      metaEntries[i++]=oneEntry;
    }
    response.setMetaEntries(metaEntries);
  }
  if (0 <= bytesStart && 0 <= bytesEnd) {
    response.setContentLength(bytesEnd - bytesStart);
    resultCode=206;
  }
 else   response.setContentLength(item.getStoredSize());
  if (request.isReturnData()) {
    response.setETag(item.getMd5());
    response.setLastModified(DateHelper.toCalendar(item.getLastModifiedTime()));
    response.setVersion(item.getVersion());
    if (request.isInlineData()) {
      OrderedPair<SHost,String> tupleSHostInfo=getBucketStorageHost(sbucket);
      S3BucketAdapter bucketAdapter=getStorageHostBucketAdapter(tupleSHostInfo.getFirst());
      if (0 <= bytesStart && 0 <= bytesEnd)       response.setData(bucketAdapter.loadObjectRange(tupleSHostInfo.getSecond(),request.getBucketName(),item.getStoredPath(),bytesStart,bytesEnd));
 else       response.setData(bucketAdapter.loadObject(tupleSHostInfo.getSecond(),request.getBucketName(),item.getStoredPath()));
    }
  }
  response.setResultCode(resultCode);
  response.setResultDescription("OK");
  return response;
}
