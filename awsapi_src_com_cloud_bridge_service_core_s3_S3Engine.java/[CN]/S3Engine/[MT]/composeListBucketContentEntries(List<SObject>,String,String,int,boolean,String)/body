{
  List<S3ListBucketObjectEntry> entries=new ArrayList<S3ListBucketObjectEntry>();
  SObjectItem latest=null;
  boolean hitIdMarker=false;
  int count=0;
  for (  SObject sobject : l) {
    if (delimiter != null && !delimiter.isEmpty()) {
      if (StringHelper.substringInBetween(sobject.getNameKey(),prefix,delimiter) != null)       continue;
    }
    if (enableVersion) {
      hitIdMarker=(null == versionIdMarker ? true : false);
      String deletionMarker=sobject.getDeletionMark();
      if (null != deletionMarker) {
        S3ListBucketObjectEntry entry=new S3ListBucketObjectEntry();
        entry.setKey(sobject.getNameKey());
        entry.setVersion(deletionMarker);
        entry.setIsLatest(true);
        entry.setIsDeletionMarker(true);
        entry.setLastModified(Calendar.getInstance(TimeZone.getTimeZone("GMT")));
        entry.setOwnerCanonicalId(sobject.getOwnerCanonicalId());
        entry.setOwnerDisplayName("");
        entries.add(entry);
        latest=null;
      }
 else       latest=sobject.getLatestVersion(false);
      Iterator<SObjectItem> it=sobject.getItems().iterator();
      while (it.hasNext()) {
        SObjectItem item=(SObjectItem)it.next();
        if (!hitIdMarker) {
          if (item.getVersion().equalsIgnoreCase(versionIdMarker)) {
            hitIdMarker=true;
            entries.add(toListEntry(sobject,item,latest));
          }
        }
 else         entries.add(toListEntry(sobject,item,latest));
      }
    }
 else {
      Iterator<SObjectItem> it=sobject.getItems().iterator();
      SObjectItem lastestItem=null;
      int maxVersion=0;
      int version=0;
      while (it.hasNext()) {
        SObjectItem item=(SObjectItem)it.next();
        String versionStr=item.getVersion();
        if (null != versionStr)         version=Integer.parseInt(item.getVersion());
 else         lastestItem=item;
        if (version > maxVersion) {
          maxVersion=version;
          lastestItem=item;
        }
      }
      if (lastestItem != null) {
        entries.add(toListEntry(sobject,lastestItem,null));
      }
    }
    count++;
    if (count >= maxKeys)     break;
  }
  if (entries.size() > 0)   return entries.toArray(new S3ListBucketObjectEntry[0]);
 else   return null;
}
