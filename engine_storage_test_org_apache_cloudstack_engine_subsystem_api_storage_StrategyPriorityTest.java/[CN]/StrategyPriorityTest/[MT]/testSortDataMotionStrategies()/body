{
  DataMotionStrategy cantHandleStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy defaultStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy hyperStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy pluginStrategy=mock(DataMotionStrategy.class);
  DataMotionStrategy highestStrategy=mock(DataMotionStrategy.class);
  doReturn(StrategyPriority.CANT_HANDLE).when(cantHandleStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(StrategyPriority.DEFAULT).when(defaultStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(StrategyPriority.HYPERVISOR).when(hyperStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(StrategyPriority.PLUGIN).when(pluginStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  doReturn(StrategyPriority.HIGHEST).when(highestStrategy).canHandle(any(DataObject.class),any(DataObject.class));
  List<DataMotionStrategy> strategies=new ArrayList<DataMotionStrategy>(5);
  strategies.addAll(Arrays.asList(defaultStrategy,pluginStrategy,hyperStrategy,cantHandleStrategy,highestStrategy));
  StorageStrategyFactoryImpl factory=new StorageStrategyFactoryImpl();
  factory.setDataMotionStrategies(strategies);
  Iterator<DataMotionStrategy> iter=factory.getDataMotionStrategies(mock(DataObject.class),mock(DataObject.class)).iterator();
  assertEquals("Highest was not 1st.",highestStrategy,iter.next());
  assertEquals("Plugin was not 2nd.",pluginStrategy,iter.next());
  assertEquals("Hypervisor was not 3rd.",hyperStrategy,iter.next());
  assertEquals("Default was not 4th.",defaultStrategy,iter.next());
  assertTrue("Can't Handle was not 5th.",!iter.hasNext());
}
