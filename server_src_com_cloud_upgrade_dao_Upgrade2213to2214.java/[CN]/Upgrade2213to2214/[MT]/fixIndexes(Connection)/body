{
  List<String> keys=new ArrayList<String>();
  keys.add("i_usage_event__created");
  DbUpgradeUtils.dropKeysIfExist(conn,"usage_event",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to execute usage_event table update",e);
  }
  keys=new ArrayList<String>();
  keys.add("i_usage_event__created");
  DbUpgradeUtils.dropKeysIfExist(conn,"cloud_usage.usage_event",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud_usage`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to execute cloud_usage usage_event table update",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,"cloud.netapp_volume");
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud`.`netapp_volume` add PRIMARY KEY (`id`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to update primary key for netapp_volume",e);
  }
  keys=new ArrayList<String>();
  keys.add("i_snapshots__removed");
  DbUpgradeUtils.dropKeysIfExist(conn,"cloud.snapshots",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud`.`snapshots` ADD INDEX `i_snapshots__removed`(`removed`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to insert index for removed column in snapshots",e);
  }
  keys=new ArrayList<String>();
  keys.add("i_op_vm_ruleset_log__instance_id");
  DbUpgradeUtils.dropKeysIfExist(conn,"cloud.op_vm_ruleset_log",keys,false);
  keys=new ArrayList<String>();
  keys.add("u_op_vm_ruleset_log__instance_id");
  DbUpgradeUtils.dropKeysIfExist(conn,"cloud.op_vm_ruleset_log",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud`.`op_vm_ruleset_log` ADD CONSTRAINT `u_op_vm_ruleset_log__instance_id` UNIQUE (`instance_id`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to execute changes for op_vm_ruleset_log",e);
  }
  keys=new ArrayList<String>();
  keys.add("i_async__removed");
  keys.add("i_async_job__removed");
  DbUpgradeUtils.dropKeysIfExist(conn,"cloud.async_job",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement("ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to insert index for removed column in async_job",e);
  }
}
