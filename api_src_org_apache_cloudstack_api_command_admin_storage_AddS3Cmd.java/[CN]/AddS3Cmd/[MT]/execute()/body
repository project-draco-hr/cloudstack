{
  AddImageStoreCmd cmd=new AddImageStoreCmd();
  cmd.setProviderName("S3");
  Map<String,String> details=new HashMap<String,String>();
  details.put(ApiConstants.S3_ACCESS_KEY,this.getAccessKey());
  details.put(ApiConstants.S3_SECRET_KEY,this.getSecretKey());
  details.put(ApiConstants.S3_END_POINT,this.getEndPoint());
  details.put(ApiConstants.S3_BUCKET_NAME,this.getBucketName());
  if (this.getHttpsFlag() != null) {
    details.put(ApiConstants.S3_HTTPS_FLAG,this.getHttpsFlag().toString());
  }
  if (this.getConnectionTimeout() != null) {
    details.put(ApiConstants.S3_CONNECTION_TIMEOUT,this.getConnectionTimeout().toString());
  }
  if (this.getMaxErrorRetry() != null) {
    details.put(ApiConstants.S3_MAX_ERROR_RETRY,this.getMaxErrorRetry().toString());
  }
  if (this.getSocketTimeout() != null) {
    details.put(ApiConstants.S3_SOCKET_TIMEOUT,this.getSocketTimeout().toString());
  }
  try {
    ImageStore result=_storageService.discoverImageStore(cmd);
    ImageStoreResponse storeResponse=null;
    if (result != null) {
      storeResponse=_responseGenerator.createImageStoreResponse(result);
      storeResponse.setResponseName(getCommandName());
      storeResponse.setObjectName("secondarystorage");
      this.setResponseObject(storeResponse);
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,"Failed to add secondary storage");
    }
  }
 catch (  DiscoveryException ex) {
    s_logger.warn("Exception: ",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
}
