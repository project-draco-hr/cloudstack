{
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  Field[] fields=cmd.getClass().getDeclaredFields();
  for (  Field field : fields) {
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if (parameterAnnotation == null) {
      continue;
    }
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to execute API command " + cmd.getName() + " due to missing parameter "+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unable to execute API command " + cmd.getName() + " due to invalid value "+ paramObj+ " for parameter "+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to execute API command " + cmd.getName() + " due to invalid value "+ paramObj+ " for parameter "+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Invalid date parameter " + paramObj + " passed to command "+ cmd.getName());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to parse date " + paramObj + " for command "+ cmd.getName()+ ", please pass dates in the format yyyy-MM-dd");
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error executing API command " + cmd.getName());
    }
  }
  Implementation impl=cmd.getClass().getAnnotation(Implementation.class);
  String methodName=impl.method();
  Object mgr=_mgmtServer;
switch (impl.manager()) {
case NetworkManager:
    mgr=_networkMgr;
  break;
case StorageManager:
mgr=_storageMgr;
break;
case UserVmManager:
mgr=_userVmMgr;
break;
}
try {
Method method=mgr.getClass().getMethod(methodName,cmd.getClass());
method.invoke(mgr,cmd);
}
 catch (NoSuchMethodException nsme) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),nsme);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", unable to find implementation.");
}
catch (InvocationTargetException ite) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),ite);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
catch (IllegalAccessException iae) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iae);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
catch (IllegalArgumentException iArgEx) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iArgEx);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
}
