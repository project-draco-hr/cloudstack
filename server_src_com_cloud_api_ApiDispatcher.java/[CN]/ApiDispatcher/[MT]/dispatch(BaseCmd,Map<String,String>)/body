{
  setupParameters(cmd,params);
  ApiDispatcher.plugService(cmd);
  try {
    UserContext ctx=UserContext.current();
    ctx.setAccountId(cmd.getEntityOwnerId());
    if (cmd instanceof BaseAsyncCmd) {
      BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmd;
      String startEventId=params.get("ctxStartEventId");
      ctx.setStartEventId(Long.valueOf(startEventId));
      if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {
        _asyncMgr.syncAsyncJobExecution(asyncCmd.getJob(),asyncCmd.getSyncObjType(),asyncCmd.getSyncObjId().longValue());
      }
    }
    cmd.execute();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException) {
      InvalidParameterValueException ref=(InvalidParameterValueException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.info(t.getMessage() + " db_id: " + id.getValue());
        }
      }
 else {
        s_logger.info(t.getMessage());
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof IllegalArgumentException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      PermissionDeniedException ref=(PermissionDeniedException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.info("PermissionDenied: " + t.getMessage() + "db_id: "+ id.getValue());
        }
      }
 else {
        s_logger.info("PermissionDenied: " + t.getMessage());
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof AccountLimitException) {
      AccountLimitException ref=(AccountLimitException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.info(t.getMessage() + "db_id: " + id.getValue());
        }
      }
 else {
        s_logger.info(t.getMessage());
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof InsufficientCapacityException) {
      InsufficientCapacityException ref=(InsufficientCapacityException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.info(t.getMessage() + "db_id: " + id.getValue());
        }
      }
 else {
        s_logger.info(t.getMessage());
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof ResourceAllocationException) {
      ResourceAllocationException ref=(ResourceAllocationException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.warn("Exception: " + t.getMessage() + "db_id: "+ id.getValue());
        }
      }
 else {
        s_logger.warn("Exception: ",t);
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof ResourceUnavailableException) {
      ResourceUnavailableException ref=(ResourceUnavailableException)t;
      ServerApiException ex=new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
      ArrayList<IdentityProxy> idList=ref.getIdProxyList();
      if (idList != null) {
        for (int i=0; i < idList.size(); i++) {
          IdentityProxy id=idList.get(i);
          ex.addProxyObject(id.getTableName(),id.getValue(),id.getidFieldName());
          s_logger.warn("Exception: " + t.getMessage() + "db_id: "+ id.getValue());
        }
      }
 else {
        s_logger.warn("Exception: ",t);
      }
      ex.setCSErrorCode(ref.getCSErrorCode());
      throw ex;
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + " : " + ((ServerApiException)t).getDescription());
      throw (ServerApiException)t;
    }
 else {
      s_logger.error("Exception while executing " + cmd.getClass().getSimpleName() + ":",t);
      ServerApiException ex;
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        ex=new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        ex=new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
      ex.setCSErrorCode(CSExceptionErrorCode.getCSErrCode(ex.getClass().getName()));
      throw ex;
    }
  }
}
