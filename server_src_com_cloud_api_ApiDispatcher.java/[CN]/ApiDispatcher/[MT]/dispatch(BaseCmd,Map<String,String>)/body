{
  setupParameters(cmd,params);
  Implementation impl=cmd.getClass().getAnnotation(Implementation.class);
  if (impl == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute command " + cmd.getClass().getName() + ", no implementation specified.");
  }
  String methodName=impl.method();
  Class<?> mgrClass=impl.manager();
  Object mgr=null;
  if (mgrClass.equals(ManagementServer.class)) {
    mgr=ComponentLocator.getComponent(ManagementServer.Name);
  }
 else {
    mgr=_locator.getManager(impl.manager());
  }
  if (mgr == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", unable to find manager "+ impl.manager()+ " to execute method "+ methodName);
  }
  try {
    Method method=mgr.getClass().getMethod(methodName,cmd.getClass());
    Object result=method.invoke(mgr,cmd);
    cmd.setResponseObject(result);
  }
 catch (  NoSuchMethodException nsme) {
    s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),nsme);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", unable to find implementation.");
  }
catch (  InvocationTargetException ite) {
    Throwable cause=ite.getCause();
    if (cause instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)cause;
    }
    if (cause instanceof InvalidParameterValueException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,cause.getMessage());
    }
 else     if (cause instanceof PermissionDeniedException) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,cause.getMessage());
    }
 else     if (cause instanceof ServerApiException) {
      throw (ServerApiException)cause;
    }
    s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),ite);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
  }
catch (  IllegalAccessException iae) {
    s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iae);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
  }
catch (  IllegalArgumentException iArgEx) {
    s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iArgEx);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
  }
}
