{
  String errorMsg="";
  setupParameters(cmd,params);
  try {
    if (cmd instanceof BaseAsyncCmd) {
      UserContext ctx=UserContext.current();
      BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmd;
      ctx.setAccountId(asyncCmd.getEntityOwnerId());
      String startEventId=params.get("ctxStartEventId");
      ctx.setStartEventId(Long.valueOf(startEventId));
      if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {
        _asyncMgr.syncAsyncJobExecution(asyncCmd.getJob(),asyncCmd.getSyncObjType(),asyncCmd.getSyncObjId().longValue());
      }
    }
    cmd.execute();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t.getMessage());
      errorMsg="Parameter error";
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info("PermissionDenied: " + t.getMessage());
      errorMsg="Permission denied";
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t.getMessage());
      errorMsg="Account resource limit error";
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t.getMessage());
      errorMsg="Insufficient capacity";
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.warn("Exception: ",t);
      errorMsg="Resource allocation error";
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn("Exception: ",t);
      errorMsg="Resource unavailable error";
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      errorMsg=((ServerApiException)t).getDescription();
      s_logger.warn(t.getClass() + " : " + ((ServerApiException)t).getDescription());
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
 else {
      errorMsg="Internal error";
      s_logger.error("Exception while executing " + cmd.getClass().getSimpleName() + ":",t);
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
  }
}
