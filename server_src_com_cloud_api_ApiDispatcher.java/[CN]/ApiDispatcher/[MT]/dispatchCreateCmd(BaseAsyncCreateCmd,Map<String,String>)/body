{
  setupParameters(cmd,params);
  Implementation impl=cmd.getClass().getAnnotation(Implementation.class);
  String methodName=impl.createMethod();
  Object mgr=_mgmtServer;
switch (impl.manager()) {
case AccountManager:
    mgr=_accountMgr;
  break;
case AgentManager:
mgr=_agentMgr;
break;
case ConfigManager:
mgr=_configMgr;
break;
case ConsoleProxyManager:
mgr=_consoleProxyMgr;
break;
case NetworkGroupManager:
mgr=_networkGroupMgr;
break;
case NetworkManager:
mgr=_networkMgr;
break;
case SnapshotManager:
mgr=_snapshotMgr;
break;
case StorageManager:
mgr=_storageMgr;
break;
case TemplateManager:
mgr=_templateMgr;
break;
case UserVmManager:
mgr=_userVmMgr;
break;
}
try {
Method method=mgr.getClass().getMethod(methodName,cmd.getClass());
Object dbObject=method.invoke(mgr,cmd);
Method getIdMethod=dbObject.getClass().getMethod("getId");
Object id=getIdMethod.invoke(dbObject);
return (Long)id;
}
 catch (NoSuchMethodException nsme) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),nsme);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", unable to find implementation.");
}
catch (InvocationTargetException ite) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),ite);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
catch (IllegalAccessException iae) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iae);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
catch (IllegalArgumentException iArgEx) {
s_logger.warn("Exception executing method " + methodName + " for command "+ cmd.getClass().getSimpleName(),iArgEx);
throw new CloudRuntimeException("Unable to execute method " + methodName + " for command "+ cmd.getClass().getSimpleName()+ ", internal error in the implementation.");
}
}
