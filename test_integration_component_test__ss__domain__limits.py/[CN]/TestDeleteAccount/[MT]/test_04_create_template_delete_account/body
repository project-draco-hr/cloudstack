@attr(tags=['advanced'], required_hardware='true')
def test_04_create_template_delete_account(self):
    'Test secondary storage limit of domain and its sub-domains\n\n        # Steps\n        1. Create a parent domain and two sub-domains in it (also admin accounts\n           of each domain)\n        2. Register template in child domain 1\n        3. Verify that the secondary storage count for child domain 1 equals\n           the template size\n        4. Register template in child domain 2\n        5. Vreify that the seconday storage count for child domain 2 equals\n           the template size\n        6. Verify that the secondary storage count for parent domain equals\n           double of template size\n        7. Delete child domain 1 admin account\n        8. Verify that secondary storage count for parent domain now equals\n           to only 1 template size\n        '
    result = self.setupAccounts()
    self.assertEqual(result[0], PASS, result[1])
    try:
        builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
        self.services['template_2']['url'] = builtin_info[0]
        self.services['template_2']['hypervisor'] = builtin_info[1]
        self.services['template_2']['format'] = builtin_info[2]
        template = Template.register(self.apiclient, self.services['template_2'], zoneid=self.zone.id, account=self.cadmin_1.name, domainid=self.cadmin_1.domainid)
        template.download(self.apiclient)
        templates = Template.list(self.apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
        if (validateList(templates)[0] == FAIL):
            raise Exception('templates list validation failed')
        self.templateSize = int((int(templates[0].size) / (1024 ** 3)))
    except Exception as e:
        self.fail(('Failed with exception as ee: %s' % e))
    expectedCount = self.templateSize
    result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.cadmin_1.domainid, expectedCount, RESOURCE_SECONDARY_STORAGE)
    self.assertFalse(result[0], result[1])
    self.assertTrue(result[2], 'Resource count does not match')
    try:
        template = Template.register(self.apiclient, self.services['template_2'], zoneid=self.zone.id, account=self.cadmin_2.name, domainid=self.cadmin_2.domainid)
        template.download(self.apiclient)
    except Exception as e:
        self.fail(('Failed while registering/downloading template: %s' % e))
    result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.cadmin_2.domainid, expectedCount, RESOURCE_SECONDARY_STORAGE)
    self.assertFalse(result[0], result[1])
    self.assertTrue(result[2], 'Resource count does not match')
    self.templateSize = int(((int(templates[0].size) * 2) / (1024 ** 3)))
    expectedCount = self.templateSize
    result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.parent_domain.id, expectedCount, RESOURCE_SECONDARY_STORAGE)
    self.assertFalse(result[0], result[1])
    self.assertTrue(result[2], 'Resource count does not match')
    try:
        self.cadmin_1.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete account: %s' % e))
    expectedCount /= 2
    result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.parent_domain.id, expectedCount, RESOURCE_SECONDARY_STORAGE)
    self.assertFalse(result[0], result[1])
    self.assertTrue(result[2], 'Resource count does not match')
    return
