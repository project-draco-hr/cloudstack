@attr(tags=['advanced'], required_hardware='true')
def test_02_multiple_domains_secondary_storage_counts(self):
    'Test secondary storage counts in multiple child domains\n        # Steps\n        1. Create a parent domain and two sub-domains in it (also admin accounts\n           of each domain)\n        Repeat following steps for both the child domains\n        2. Register template in child domain\n        3. Check if the resource count for domain is updated correctly\n        4. Delete the template\n        5. Verify that the resource count for the domain is 0\n\n        '
    users = None
    result = self.setupAccounts()
    self.assertEqual(result[0], PASS, result[1])
    users = result[2]
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        try:
            builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
            self.services['template_2']['url'] = builtin_info[0]
            self.services['template_2']['hypervisor'] = builtin_info[1]
            self.services['template_2']['format'] = builtin_info[2]
            template = Template.register(self.apiclient, self.services['template_2'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
            template.download(self.apiclient)
            templates = Template.list(self.apiclient, templatefilter=self.services['template_2']['templatefilter'], id=template.id)
            if (validateList(templates)[0] == FAIL):
                raise Exception('templates list validation failed')
            templateSize = int((int(templates[0].size) / (1024 ** 3)))
            expectedCount = templateSize
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_SECONDARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
            template.delete(self.apiclient)
            expectedCount = 0
            result = isDomainResourceCountEqualToExpectedCount(self.apiclient, self.domain.id, expectedCount, RESOURCE_SECONDARY_STORAGE)
            self.assertFalse(result[0], result[1])
            self.assertTrue(result[2], 'Resource count does not match')
        except Exception as e:
            self.fail(('Failed to get zone list: %s' % e))
        return
