{
  try {
    Connection conn=getConnection();
    String option=cmd.getOption();
    String publicIp=cmd.getGatewayIP();
    String args=" -l " + publicIp + " ";
    if (option.equals("get")) {
      args+="-g";
    }
 else     if (option.equals("create")) {
      args+="-c";
      String vpcCIDR=cmd.getVpcCIDR();
      args+=" -v " + vpcCIDR;
    }
 else     if (option.equals("reset")) {
      args+="-r";
    }
 else     if (option.equals("vpn")) {
      args+="-n";
    }
 else     if (option.equals("remove")) {
      args+="-d";
    }
 else {
      return new NetworkUsageAnswer(cmd,"success",0L,0L);
    }
    ExecutionResult result=executeInVR(cmd.getPrivateIP(),"vpc_netusage.sh",args);
    String detail=result.getDetails();
    if (!result.isSuccess()) {
      throw new Exception(" vpc network usage plugin call failed ");
    }
    if (option.equals("get") || option.equals("vpn")) {
      long[] stats=new long[2];
      if (detail != null) {
        String[] splitResult=detail.split(":");
        int i=0;
        while (i < splitResult.length - 1) {
          stats[0]+=(new Long(splitResult[i++])).longValue();
          stats[1]+=(new Long(splitResult[i++])).longValue();
        }
        return new NetworkUsageAnswer(cmd,"success",stats[0],stats[1]);
      }
    }
    return new NetworkUsageAnswer(cmd,"success",0L,0L);
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to get network usage stats due to ",ex);
    return new NetworkUsageAnswer(cmd,ex);
  }
}
