def checkProcessStatus(process):
    '\n    Check the process running status, if not running tries to restart\n    '
    process_name = process.get('processname')
    service_name = process.get('servicename')
    pidfile = process.get('pidfile')
    restartFailed = False
    pidFileMatched = False
    pids = ''
    cmd = ''
    if (process_name is None):
        printd('\n Invalid Process Name')
        return StatusCodes.INVALID_INP
    (status, pids) = checkProcessRunningStatus(process_name, pidfile)
    if (status == True):
        printd('The process is running ....')
        return StatusCodes.RUNNING
    else:
        printd(('Process %s is not running trying to recover' % process_name))
        for i in range(1, Config.RETRY_ITERATIONS):
            time.sleep(Config.SLEEP_SEC)
            if (i < Config.RETRY_FOR_RESTART):
                (status, pids) = checkProcessRunningStatus(process_name, pidfile)
                if (status == True):
                    raisealert(Log.ALERT, 'The process detected as running', process_name)
                    break
                else:
                    printd(('Process %s is not running checking the status again...' % process_name))
                    continue
            else:
                msg = (('The process ' + process_name) + ' is not running trying recover ')
                raisealert(Log.INFO, process_name, msg)
                if (service_name == 'apache2'):
                    for pid in pids:
                        cmd = ('kill -9 ' + pid)
                        printd(cmd)
                        Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT)
                if (restartService(service_name) == True):
                    break
                else:
                    restartFailed = True
                    continue
        if (restartFailed == True):
            msg = ('The process %s recover failed ' % process_name)
            raisealert(Log.ALERT, process_name, msg)
            printd('Restart failed after number of retries')
            return StatusCodes.STOPPED
    return StatusCodes.RUNNING
