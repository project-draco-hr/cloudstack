def monitProcess(processes_info):
    '\n    Monitors the processes which got from the config file\n    '
    if (len(processes_info) == 0):
        printd('Invalid Input')
        return StatusCodes.INVALID_INP
    dict_unmonit = {}
    umonit_update = {}
    if (not path.isfile(Config.UNMONIT_PS_FILE)):
        printd('Unmonit File not exist')
    else:
        dict_unmonit = loadPsFromUnMonitFile()
    csec = repr(time.time()).split('.')[0]
    unMonitPs = False
    for (process, properties) in processes_info.items():
        printd(('checking the process %s \n' % process))
        if (not is_emtpy(dict_unmonit)):
            if dict_unmonit.has_key(process):
                ts = dict_unmonit[process]
                printd(('Time difference=%s' % str((int(csec) - int(ts)))))
                tmin = ((int(csec) - int(ts)) / 60)
                if (((int(csec) - int(ts)) / 60) < Config.MONIT_AFTER_MINS):
                    raisealert(Log.ALERT, ('The %s get monitor after %s minutes ' % (process, Config.MONIT_AFTER_MINS)))
                    printd(('process will be monitored after %s min' % str((int(Config.MONIT_AFTER_MINS) - tmin))))
                    unMonitPs = True
                    continue
        if (checkProcessStatus(properties) != StatusCodes.RUNNING):
            printd(('\n Process %s is not Running' % process))
            printd(('updating the process for unmonit %s\n' % process))
            umonit_update[process] = csec
    if (not is_emtpy(umonit_update)):
        writePsListToUnmonitFile(umonit_update)
    elif (is_emtpy(umonit_update) and (unMonitPs == False)):
        if path.isfile(Config.UNMONIT_PS_FILE):
            printd(('Removing the file %s' % Config.UNMONIT_PS_FILE))
            os.remove(Config.UNMONIT_PS_FILE)
