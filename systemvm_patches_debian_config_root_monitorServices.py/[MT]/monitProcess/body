def monitProcess(processes_info):
    '\n    Monitors the processes which got from the config file\n    '
    if (len(processes_info) == 0):
        printd('Invalid Input')
        return StatusCodes.INVALID_INP
    dict_unmonit = {}
    umonit_update = {}
    unMonitPs = False
    if (not path.isfile(Config.UNMONIT_PS_FILE)):
        printd('Unmonit File not exist')
    else:
        dict_unmonit = loadPsFromUnMonitFile()
    csec = repr(time.time()).split('.')[0]
    for (process, properties) in processes_info.items():
        printd(('checking the service %s \n' % process))
        if (not is_emtpy(dict_unmonit)):
            if dict_unmonit.has_key(process):
                ts = dict_unmonit[process]
                if (checkPsTimeStampForMonitor(csec, ts, properties) == False):
                    unMonitPs = True
                    continue
        if (checkProcessStatus(properties) != StatusCodes.RUNNING):
            printd(('\n Service %s is not Running' % process))
            printd(('updating the service for unmonit %s\n' % process))
            umonit_update[process] = csec
    if (not is_emtpy(umonit_update)):
        writePsListToUnmonitFile(umonit_update)
    elif (is_emtpy(umonit_update) and (unMonitPs == False)):
        removeFile(Config.UNMONIT_PS_FILE)
