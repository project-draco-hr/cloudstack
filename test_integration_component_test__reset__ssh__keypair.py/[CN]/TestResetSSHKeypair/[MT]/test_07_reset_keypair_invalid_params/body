@attr(tags=['simulator', 'basic', 'advanced'])
def test_07_reset_keypair_invalid_params(self):
    'Verify API resetSSHKeyForVirtualMachine with incorrect parameters'
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.pw_ssh_enabled_template.id, accountid=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id, serviceofferingid=self.service_offering.id, keypair=self.keypair.name, mode=self.services['mode'])
    self.debug('Check if the VM is properly deployed or not?')
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return the valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM state should be running after deployment')
    self.debug(('Creating a new SSH keypair for account: %s' % self.account.name))
    new_keypair = SSHKeyPair.create(self.apiclient, name=(random_gen() + '.pem'), account=self.account.name, domainid=self.account.domainid)
    self.debug(('Created a new keypair with name: %s' % new_keypair.name))
    self.debug('Writing the private key to local file')
    keyPairFilePath = ((tempfile.gettempdir() + os.sep) + new_keypair.name)
    self.debug(('File path: %s' % keyPairFilePath))
    f = open(keyPairFilePath, 'w+')
    f.write(new_keypair.privatekey)
    f.close()
    os.system(('chmod 400 ' + keyPairFilePath))
    self.debug(('Resetting the SSH key pair for instance: %s' % virtual_machine.name))
    with self.assertRaises(Exception):
        virtual_machine.resetSshKey(self.apiclient, keypair=(random_gen() + '.pem'), name=new_keypair.name, account=self.account.name, domainid=self.account.domainid)
    self.debug('Reset SSH key pair failed due to invalid parameters')
    virtual_machine.delete(self.apiclient, expunge=True)
    return
