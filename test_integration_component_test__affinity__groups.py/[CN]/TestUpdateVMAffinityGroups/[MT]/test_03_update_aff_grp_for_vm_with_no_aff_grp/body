@attr(tags=['simulator', 'basic', 'advanced', 'multihost', 'selfservice'])
def test_03_update_aff_grp_for_vm_with_no_aff_grp(self):
    '\n            Update the list of affinityGroups for vm which is not associated\n            with any affinity groups.\n\n        '
    self.create_aff_grp(aff_grp=self.services['host_anti_affinity'], acc=self.account.name, domainid=self.domain.id)
    self.create_aff_grp(aff_grp=self.services['host_anti_affinity'], acc=self.account.name, domainid=self.domain.id)
    (vm1, hostid1) = self.create_vm_in_aff_grps([], account_name=self.account.name, domain_id=self.domain.id)
    (vm2, hostid2) = self.create_vm_in_aff_grps([self.aff_grp[0].name], account_name=self.account.name, domain_id=self.domain.id)
    vm1.stop(self.api_client)
    vm1.update_affinity_group(self.api_client, affinitygroupnames=[self.aff_grp[0].name])
    vm1.start(self.api_client)
    vm_status = VirtualMachine.list(self.api_client, id=vm1.id)
    self.assertNotEqual(vm_status[0].hostid, hostid2, ('The virtual machine started on host %s violating the host anti-affinityrule' % vm_status[0].hostid))
    vm1.delete(self.api_client)
    vm2.delete(self.api_client)
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    aff_grps = [self.aff_grp[0], self.aff_grp[1]]
    for aff_grp in aff_grps:
        aff_grp.delete(self.api_client)
