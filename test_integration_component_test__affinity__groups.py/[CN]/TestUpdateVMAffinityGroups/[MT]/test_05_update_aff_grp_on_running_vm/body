@attr(tags=['simulator', 'basic', 'advanced', 'multihost', 'selfservice'])
def test_05_update_aff_grp_on_running_vm(self):
    '\n            Update the list of Affinity Groups on running vm\n        '
    self.create_aff_grp(aff_grp=self.services['host_anti_affinity'], acc=self.account.name, domainid=self.domain.id)
    self.create_aff_grp(aff_grp=self.services['host_anti_affinity'], acc=self.account.name, domainid=self.domain.id)
    (vm1, hostid1) = self.create_vm_in_aff_grps([self.aff_grp[0].name], account_name=self.account.name, domain_id=self.domain.id)
    aff_grps = [self.aff_grp[0], self.aff_grp[1]]
    response = vm1.update_affinity_group(self.api_client, affinitygroupnames=[])
    self.assertEqual(response.errorcode, ERROR_CODE_530, ('Job should                          have failed with error code %s, instead got response                          %s' % (ERROR_CODE_530, str(response))))
    vm1.delete(self.api_client)
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    for aff_grp in aff_grps:
        aff_grp.delete(self.api_client)
