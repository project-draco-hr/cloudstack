@attr(tags=['simulator', 'basic', 'advanced'])
def test_07_delete_aff_grp_of_other_user(self):
    '\n            Delete Affinity Group belonging to regular user\n        '
    self.user1 = Account.create(self.api_client, self.services['new_account'])
    self.cleanup.append(self.user1)
    userapiclient = self.testClient.getUserApiClient(UserName=self.user1.name, DomainName=self.user1.domain, type=0)
    aff_grp = self.create_aff_grp(api_client=userapiclient, aff_grp=self.services['host_anti_affinity'])
    list_aff_grps = AffinityGroup.list(userapiclient)
    aff_grp_by_id = AffinityGroup.list(self.api_client, id=list_aff_grps[0].id)
    self.assertNotEqual(aff_grp_by_id, [], 'Admin not able to list Affinity Groups of users')
    self.assertEqual(len(aff_grp_by_id), 1, ('%s affinity groups listed by admin with id %s. Expected 1' % (len(aff_grp_by_id), list_aff_grps[0].id)))
    self.assertEqual(aff_grp_by_id[0].name, aff_grp.name, ('Incorrect name returned when listing user affinity groups as admin by id Expected : %s Got: %s' % (aff_grp.name, aff_grp_by_id[0].name)))
    aff_grp.delete(self.api_client)
