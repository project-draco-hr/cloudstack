{
  if (_snmpManagerIpAddresses == null || _snmpManagerIpAddresses.trim().isEmpty() || _snmpManagerCommunities == null || _snmpManagerCommunities.trim().isEmpty() || _snmpManagerPorts == null || _snmpManagerPorts.trim().isEmpty()) {
    reset();
    return;
  }
  if (_oldSnmpManagerIpAddresses != null && _oldSnmpManagerIpAddresses.equals(_snmpManagerIpAddresses) && _oldSnmpManagerCommunities.equals(_snmpManagerCommunities) && _oldSnmpManagerPorts.equals(_snmpManagerPorts)) {
    return;
  }
  _oldSnmpManagerIpAddresses=_snmpManagerIpAddresses;
  _oldSnmpManagerPorts=_snmpManagerPorts;
  _oldSnmpManagerCommunities=_snmpManagerCommunities;
  _ipAddresses=parse(_snmpManagerIpAddresses);
  _communities=parse(_snmpManagerCommunities);
  _ports=parse(_snmpManagerPorts);
  if (!(_ipAddresses.size() == _communities.size() && _ipAddresses.size() == _ports.size())) {
    reset();
    errorHandler.error(" size of ip addresses , communities, " + "and ports list doesn't match, " + "setting all to null");
    return;
  }
  if (!validateIpAddresses() || !validatePorts()) {
    reset();
    errorHandler.error(" Invalid format for the IP Addresses or Ports parameter ");
    return;
  }
  String address;
  for (int i=0; i < _ipAddresses.size(); i++) {
    address=_ipAddresses.get(i) + "/" + _ports.get(i);
    try {
      _snmpHelpers.add(new SnmpHelper(address,_communities.get(i)));
    }
 catch (    Exception e) {
      errorHandler.error(e.getMessage());
    }
  }
}
