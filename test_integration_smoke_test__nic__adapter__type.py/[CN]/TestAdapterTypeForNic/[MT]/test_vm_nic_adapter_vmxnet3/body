@unittest.skip('VCenter API Integration Remaining')
@attr(tags=['advanced'])
def test_vm_nic_adapter_vmxnet3(self):
    '\n\n        # 1. Register a template for VMware with nicAdapter vmxnet3\n        # 2. Deploy a VM using this template\n        # 3. Create an isolated network\n        # 4. Add network to VM\n        # 5. Verify that the NIC adapter for VM for both the nics\n        #    is vmxnet3\n        '
    if (self.hypervisor.lower() not in ['vmware']):
        raise unittest.SkipTest('This test case is written specifically                    for Vmware hypervisor')
    template = Template.register(self.userapiclient, self.testdata['configurableData']['vmxnet3template'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, details=[{'nicAdapter': self.testdata['configurableData']['vmxnet3template']['nicadapter'], }])
    self.cleanup.append(template)
    template.download(self.apiclient)
    templates = Template.list(self.userapiclient, listall=True, id=template.id, templatefilter='self')
    self.assertEqual(validateList(templates)[0], PASS, 'Templates list validation failed')
    self.testdata['virtual_machine']['zoneid'] = self.zone.id
    self.testdata['virtual_machine']['template'] = template.id
    virtual_machine = VirtualMachine.create(self.apiclient, self.testdata['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    isolated_network = Network.create(self.apiclient, self.testdata['isolated_network'], self.account.name, self.account.domainid, networkofferingid=self.isolated_network_offering.id)
    virtual_machine.add_nic(self.apiclient, isolated_network.id)
    return
