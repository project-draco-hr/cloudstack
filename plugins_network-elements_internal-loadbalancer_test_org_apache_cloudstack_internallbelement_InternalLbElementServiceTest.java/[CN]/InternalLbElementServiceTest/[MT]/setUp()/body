{
  ComponentContext.initComponentsLifeCycle();
  VirtualRouterProviderVO validElement=new VirtualRouterProviderVO(1,Type.InternalLbVm);
  VirtualRouterProviderVO invalidElement=new VirtualRouterProviderVO(1,Type.VirtualRouter);
  Mockito.when(_vrProviderDao.findById(validElId)).thenReturn(validElement);
  Mockito.when(_vrProviderDao.findById(invalidElId)).thenReturn(invalidElement);
  Mockito.when(_vrProviderDao.persist(validElement)).thenReturn(validElement);
  Mockito.when(_vrProviderDao.findByNspIdAndType(validProviderId,Type.InternalLbVm)).thenReturn(validElement);
  PhysicalNetworkServiceProviderVO validProvider=new PhysicalNetworkServiceProviderVO(1,"InternalLoadBalancerElement");
  PhysicalNetworkServiceProviderVO invalidProvider=new PhysicalNetworkServiceProviderVO(1,"Invalid name!");
  Mockito.when(_pNtwkProviderDao.findById(validProviderId)).thenReturn(validProvider);
  Mockito.when(_pNtwkProviderDao.findById(invalidProviderId)).thenReturn(invalidProvider);
  Mockito.when(_vrProviderDao.persist(Mockito.any(VirtualRouterProviderVO.class))).thenReturn(validElement);
}
