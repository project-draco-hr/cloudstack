{
  final Network network=firewall.getNetwork();
  final VirtualRouter router=firewall.getRouter();
  final List<? extends FirewallRule> rules=firewall.getRules();
  final List<LoadBalancingRule> loadbalancingRules=firewall.getLoadbalancingRules();
  final Purpose purpose=firewall.getPurpose();
  final Commands cmds=new Commands(Command.OnError.Continue);
  if (purpose == Purpose.LoadBalancing) {
    firewall.createApplyLoadBalancingRulesCommands(loadbalancingRules,router,cmds,network.getId());
    return _networkGeneralHelper.sendCommandsToRouter(router,cmds);
  }
 else   if (purpose == Purpose.PortForwarding) {
    firewall.createApplyPortForwardingRulesCommands((List<? extends PortForwardingRule>)rules,router,cmds,network.getId());
    return _networkGeneralHelper.sendCommandsToRouter(router,cmds);
  }
 else   if (purpose == Purpose.StaticNat) {
    firewall.createApplyStaticNatRulesCommands((List<StaticNatRule>)rules,router,cmds,network.getId());
    return _networkGeneralHelper.sendCommandsToRouter(router,cmds);
  }
 else   if (purpose == Purpose.Firewall) {
    firewall.createApplyFirewallRulesCommands(rules,router,cmds,network.getId());
    return _networkGeneralHelper.sendCommandsToRouter(router,cmds);
  }
  s_logger.warn("Unable to apply rules of purpose: " + rules.get(0).getPurpose());
  return false;
}
