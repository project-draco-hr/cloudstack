{
  int nSubrects=rfb.is.readInt();
  byte[] bg_buf=new byte[bytesPixel];
  rfb.readFully(bg_buf);
  Color pixel;
  if (bytesPixel == 1) {
    pixel=colors[bg_buf[0] & 0xFF];
  }
 else {
    pixel=new Color(bg_buf[2] & 0xFF,bg_buf[1] & 0xFF,bg_buf[0] & 0xFF);
  }
  memGraphics.setColor(pixel);
  memGraphics.fillRect(x,y,w,h);
  byte[] buf=new byte[nSubrects * (bytesPixel + 8)];
  rfb.readFully(buf);
  DataInputStream ds=new DataInputStream(new ByteArrayInputStream(buf));
  if (rfb.rec != null) {
    rfb.rec.writeIntBE(nSubrects);
    rfb.rec.write(bg_buf);
    rfb.rec.write(buf);
  }
  int sx, sy, sw, sh;
  for (int j=0; j < nSubrects; j++) {
    if (bytesPixel == 1) {
      pixel=colors[ds.readUnsignedByte()];
    }
 else {
      ds.skip(4);
      pixel=new Color(buf[j * 12 + 2] & 0xFF,buf[j * 12 + 1] & 0xFF,buf[j * 12] & 0xFF);
    }
    sx=x + ds.readUnsignedShort();
    sy=y + ds.readUnsignedShort();
    sw=ds.readUnsignedShort();
    sh=ds.readUnsignedShort();
    memGraphics.setColor(pixel);
    memGraphics.fillRect(sx,sy,sw,sh);
  }
  scheduleRepaint(x,y,w,h);
}
