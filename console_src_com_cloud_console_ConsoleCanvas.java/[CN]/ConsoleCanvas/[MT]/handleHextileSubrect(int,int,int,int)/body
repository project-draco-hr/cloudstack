{
  int subencoding=rfb.is.readUnsignedByte();
  if (rfb.rec != null) {
    rfb.rec.writeByte(subencoding);
  }
  if ((subencoding & rfb.HextileRaw) != 0) {
    handleRawRect(tx,ty,tw,th,false);
    return;
  }
  byte[] cbuf=new byte[bytesPixel];
  if ((subencoding & rfb.HextileBackgroundSpecified) != 0) {
    rfb.readFully(cbuf);
    if (bytesPixel == 1) {
      hextile_bg=colors[cbuf[0] & 0xFF];
    }
 else {
      hextile_bg=new Color(cbuf[2] & 0xFF,cbuf[1] & 0xFF,cbuf[0] & 0xFF);
    }
    if (rfb.rec != null) {
      rfb.rec.write(cbuf);
    }
  }
  memGraphics.setColor(hextile_bg);
  memGraphics.fillRect(tx,ty,tw,th);
  if ((subencoding & rfb.HextileForegroundSpecified) != 0) {
    rfb.readFully(cbuf);
    if (bytesPixel == 1) {
      hextile_fg=colors[cbuf[0] & 0xFF];
    }
 else {
      hextile_fg=new Color(cbuf[2] & 0xFF,cbuf[1] & 0xFF,cbuf[0] & 0xFF);
    }
    if (rfb.rec != null) {
      rfb.rec.write(cbuf);
    }
  }
  if ((subencoding & rfb.HextileAnySubrects) == 0)   return;
  int nSubrects=rfb.is.readUnsignedByte();
  int bufsize=nSubrects * 2;
  if ((subencoding & rfb.HextileSubrectsColoured) != 0) {
    bufsize+=nSubrects * bytesPixel;
  }
  byte[] buf=new byte[bufsize];
  rfb.readFully(buf);
  if (rfb.rec != null) {
    rfb.rec.writeByte(nSubrects);
    rfb.rec.write(buf);
  }
  int b1, b2, sx, sy, sw, sh;
  int i=0;
  if ((subencoding & rfb.HextileSubrectsColoured) == 0) {
    memGraphics.setColor(hextile_fg);
    for (int j=0; j < nSubrects; j++) {
      b1=buf[i++] & 0xFF;
      b2=buf[i++] & 0xFF;
      sx=tx + (b1 >> 4);
      sy=ty + (b1 & 0xf);
      sw=(b2 >> 4) + 1;
      sh=(b2 & 0xf) + 1;
      memGraphics.fillRect(sx,sy,sw,sh);
    }
  }
 else   if (bytesPixel == 1) {
    for (int j=0; j < nSubrects; j++) {
      hextile_fg=colors[buf[i++] & 0xFF];
      b1=buf[i++] & 0xFF;
      b2=buf[i++] & 0xFF;
      sx=tx + (b1 >> 4);
      sy=ty + (b1 & 0xf);
      sw=(b2 >> 4) + 1;
      sh=(b2 & 0xf) + 1;
      memGraphics.setColor(hextile_fg);
      memGraphics.fillRect(sx,sy,sw,sh);
    }
  }
 else {
    for (int j=0; j < nSubrects; j++) {
      hextile_fg=new Color(buf[i + 2] & 0xFF,buf[i + 1] & 0xFF,buf[i] & 0xFF);
      i+=4;
      b1=buf[i++] & 0xFF;
      b2=buf[i++] & 0xFF;
      sx=tx + (b1 >> 4);
      sy=ty + (b1 & 0xf);
      sw=(b2 >> 4) + 1;
      sh=(b2 & 0xf) + 1;
      memGraphics.setColor(hextile_fg);
      memGraphics.fillRect(sx,sy,sw,sh);
    }
  }
}
