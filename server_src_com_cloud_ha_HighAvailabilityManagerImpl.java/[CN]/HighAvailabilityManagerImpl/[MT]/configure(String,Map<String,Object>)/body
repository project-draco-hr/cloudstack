{
  _name=name;
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  _investigators=locator.getAdapters(Investigator.class);
  _fenceBuilders=locator.getAdapters(FenceBuilder.class);
  Map<String,String> params=new HashMap<String,String>();
  final ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao != null) {
    params=configDao.getConfiguration(Long.toHexString(_serverId),xmlParams);
  }
  String value=params.get("workers");
  final int count=NumbersUtil.parseInt(value,1);
  _workers=new WorkerThread[count];
  for (int i=0; i < _workers.length; i++) {
    _workers[i]=new WorkerThread("HA-Worker-" + i);
  }
  value=params.get("force.ha");
  _forceHA=Boolean.parseBoolean(value);
  value=params.get("time.to.sleep");
  _timeToSleep=NumbersUtil.parseInt(value,60) * 1000;
  value=params.get("max.retries");
  _maxRetries=NumbersUtil.parseInt(value,5);
  value=params.get("time.between.failures");
  _timeBetweenFailures=NumbersUtil.parseLong(value,3600) * 1000;
  value=params.get("time.between.cleanup");
  _timeBetweenCleanups=NumbersUtil.parseLong(value,3600 * 24);
  value=params.get("stop.retry.interval");
  _stopRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get("restart.retry.interval");
  _restartRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get("investigate.retry.interval");
  _investigateRetryInterval=NumbersUtil.parseInt(value,1 * 60);
  value=params.get("migrate.retry.interval");
  _migrateRetryInterval=NumbersUtil.parseInt(value,2 * 60);
  _instance=params.get("instance");
  if (_instance == null) {
    _instance="VMOPS";
  }
  _stopped=true;
  _executor=Executors.newScheduledThreadPool(count,new NamedThreadFactory("HA"));
  return true;
}
