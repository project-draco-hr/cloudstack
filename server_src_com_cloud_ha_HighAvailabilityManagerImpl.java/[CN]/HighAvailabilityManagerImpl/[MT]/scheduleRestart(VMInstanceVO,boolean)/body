{
  Long hostId=vm.getHostId();
  if (hostId == null) {
    _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM does not require investigation so I'm marking it as Stopped: " + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc="id:" + vm.getHostId() + ", availability zone id:"+ vm.getDataCenterId()+ ", pod id:"+ vm.getPodId();
      _alertMgr.sendAlert(alertType,vm.getDataCenterId(),vm.getPodId(),"VM (name: " + vm.getHostName() + ", id: "+ vm.getId()+ ") stopped unexpectedly on host "+ hostDesc,"Virtual Machine " + vm.getHostName() + " (id: "+ vm.getId()+ ") running on host ["+ vm.getHostId()+ "] stopped unexpectedly.");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("VM is not HA enabled so we're done.");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  final List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  boolean NeedToAddNew=true;
  for (  final HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  for (  final HaWorkVO item : items) {
    if (!(item.getStep() == Step.Error || item.getStep() == Step.Done || item.getStep() == Step.Cancelled)) {
      NeedToAddNew=false;
    }
  }
  if (NeedToAddNew) {
    final HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
    _haDao.persist(work);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Schedule vm for HA:  " + vm.toString());
  }
  wakeupWorkers();
}
