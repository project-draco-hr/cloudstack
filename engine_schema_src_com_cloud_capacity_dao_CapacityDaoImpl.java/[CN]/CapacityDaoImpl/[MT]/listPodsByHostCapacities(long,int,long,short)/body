{
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  StringBuilder sql=new StringBuilder(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);
  sql.append("AND capacity.pod_id IN (");
  sql.append(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);
  sql.append(")");
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setLong(1,zoneId);
    pstmt.setShort(2,CapacityVO.CAPACITY_TYPE_CPU);
    pstmt.setString(3,"cpuOvercommitRatio");
    pstmt.setLong(4,requiredCpu);
    pstmt.setLong(5,zoneId);
    pstmt.setShort(6,CapacityVO.CAPACITY_TYPE_MEMORY);
    pstmt.setString(7,"memoryOvercommitRatio");
    pstmt.setLong(8,requiredRam);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      result.add(rs.getLong(1));
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("DB Exception on: " + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException("Caught: " + sql,e);
  }
}
