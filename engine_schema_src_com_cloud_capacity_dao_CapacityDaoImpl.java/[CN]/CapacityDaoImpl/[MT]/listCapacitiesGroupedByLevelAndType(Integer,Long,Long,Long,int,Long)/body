{
  StringBuilder finalQuery=new StringBuilder();
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<SummedCapacity> results=new ArrayList<SummedCapacity>();
  List<Long> resourceIdList=new ArrayList<Long>();
switch (level) {
case 1:
    finalQuery.append(LIST_CAPACITY_GROUP_BY_ZONE_TYPE_PART1);
  break;
case 2:
finalQuery.append(LIST_CAPACITY_GROUP_BY_POD_TYPE_PART1);
break;
case 3:
finalQuery.append(LIST_CAPACITY_GROUP_BY_CLUSTER_TYPE_PART1);
break;
}
if (zoneId != null) {
finalQuery.append(" AND data_center_id = ?");
resourceIdList.add(zoneId);
}
if (podId != null) {
finalQuery.append(" AND pod_id = ?");
resourceIdList.add(podId);
}
if (clusterId != null) {
finalQuery.append(" AND cluster_id = ?");
resourceIdList.add(clusterId);
}
if (capacityType != null) {
finalQuery.append(" AND capacity_type = ?");
resourceIdList.add(capacityType.longValue());
}
switch (level) {
case 1:
finalQuery.append(LIST_CAPACITY_GROUP_BY_CLUSTER_TYPE_PART2);
break;
case 2:
finalQuery.append(LIST_CAPACITY_GROUP_BY_CLUSTER_TYPE_PART2);
break;
case 3:
finalQuery.append(LIST_CAPACITY_GROUP_BY_CLUSTER_TYPE_PART2);
break;
}
finalQuery.append("?");
resourceIdList.add((long)limit);
try {
pstmt=txn.prepareAutoCloseStatement(finalQuery.toString());
for (int i=0; i < resourceIdList.size(); i++) {
pstmt.setLong(1 + i,resourceIdList.get(i));
}
ResultSet rs=pstmt.executeQuery();
while (rs.next()) {
Long capacityPodId=null;
Long capacityClusterId=null;
if (level != 1 && rs.getLong(6) != 0) capacityPodId=rs.getLong(6);
if (level == 3 && rs.getLong(7) != 0) capacityClusterId=rs.getLong(7);
SummedCapacity summedCapacity=new SummedCapacity(rs.getLong(1),rs.getLong(2),rs.getLong(3),rs.getFloat(4),(short)rs.getLong(5),rs.getLong(6),capacityPodId,capacityClusterId);
results.add(summedCapacity);
}
HashMap<Integer,SummedCapacity> capacityMap=new HashMap<Integer,SummedCapacity>();
for (SummedCapacity result : results) {
if (capacityMap.containsKey(result.getCapacityType().intValue())) {
SummedCapacity tempCapacity=capacityMap.get(result.getCapacityType().intValue());
tempCapacity.setUsedCapacity(tempCapacity.getUsedCapacity() + result.getUsedCapacity());
tempCapacity.setReservedCapacity(tempCapacity.getReservedCapacity() + result.getReservedCapacity());
tempCapacity.setSumTotal(tempCapacity.getTotalCapacity() + result.getTotalCapacity());
}
 else {
capacityMap.put(result.getCapacityType().intValue(),result);
}
}
List<SummedCapacity> summedCapacityList=new ArrayList<SummedCapacity>();
for (Integer capacity_type : capacityMap.keySet()) {
summedCapacityList.add(capacityMap.get(capacity_type));
}
return summedCapacityList;
}
 catch (SQLException e) {
throw new CloudRuntimeException("DB Exception on: " + finalQuery,e);
}
catch (Throwable e) {
throw new CloudRuntimeException("Caught: " + finalQuery,e);
}
}
