{
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<SummedCapacity> result=new ArrayList<SummedCapacity>();
  StringBuilder sql=new StringBuilder(LIST_CAPACITY_GROUP_BY_CAPACITY_PART1);
  List<Long> resourceIdList=new ArrayList<Long>();
  if (zoneId != null) {
    sql.append(" AND capacity.data_center_id = ?");
    resourceIdList.add(zoneId);
  }
  if (podId != null) {
    sql.append(" AND capacity.pod_id = ?");
    resourceIdList.add(podId);
  }
  if (clusterId != null) {
    sql.append(" AND capacity.cluster_id = ?");
    resourceIdList.add(clusterId);
  }
  sql.append(LIST_CAPACITY_GROUP_BY_CAPACITY_PART2);
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    for (int i=0; i < resourceIdList.size(); i++) {
      pstmt.setLong(i + 1,resourceIdList.get(i));
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      SummedCapacity summedCapacity=new SummedCapacity(rs.getLong(1),rs.getLong(2),rs.getLong(3),(short)rs.getLong(5),null,null,rs.getLong(6));
      result.add(summedCapacity);
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("DB Exception on: " + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException("Caught: " + sql,e);
  }
}
