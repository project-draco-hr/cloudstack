{
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  Map<Long,Double> podCapacityMap=new HashMap<Long,Double>();
  StringBuilder sql=null;
  try {
    if (capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_CPU | capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_MEMORY) {
      sql=new StringBuilder(ORDER_PODS_BY_AGGREGATE_OVERCOMMIT_CAPACITY);
      pstmt=txn.prepareAutoCloseStatement(sql.toString());
      pstmt.setLong(1,zoneId);
      pstmt.setShort(2,capacityTypeForOrdering);
      if (capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_CPU) {
        pstmt.setString(3,"cpuOvercommitRatio");
      }
 else       if (capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_MEMORY) {
        pstmt.setString(3,"memoryOvercommitRatio");
      }
    }
 else {
      sql=new StringBuilder(ORDER_PODS_BY_AGGREGATE_CAPACITY);
      pstmt=txn.prepareAutoCloseStatement(sql.toString());
      pstmt.setLong(1,zoneId);
      pstmt.setShort(2,capacityTypeForOrdering);
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long podId=rs.getLong(1);
      result.add(podId);
      podCapacityMap.put(podId,rs.getDouble(2));
    }
    return new Pair<List<Long>,Map<Long,Double>>(result,podCapacityMap);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("DB Exception on: " + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException("Caught: " + sql,e);
  }
}
