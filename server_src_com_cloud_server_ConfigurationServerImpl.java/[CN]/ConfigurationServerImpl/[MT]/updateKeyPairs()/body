{
  String userid=System.getProperty("user.name");
  if (!userid.startsWith("cloud")) {
    return;
  }
  String already=_configDao.getValue("ssh.privatekey");
  String homeDir=Script.runSimpleBashScript("echo ~");
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Processing updateKeyPairs");
  }
  if (homeDir != null && homeDir.equalsIgnoreCase("~")) {
    s_logger.error("No home directory was detected.  Set the HOME environment variable to point to your user profile or home directory.");
    throw new CloudRuntimeException("No home directory was detected.  Set the HOME environment variable to point to your user profile or home directory.");
  }
  File privkeyfile=new File(homeDir + "/.ssh/id_rsa");
  File pubkeyfile=new File(homeDir + "/.ssh/id_rsa.pub");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Systemvm keypairs not found in database. Need to store them in the database");
    }
    Script.runSimpleBashScript("if [ -f ~/.ssh/id_rsa ] ; then rm -f ~/.ssh/id_rsa ; fi; ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -q");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error("Cannot read the private key file",e);
      throw new CloudRuntimeException("Cannot read the private key file");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn("Cannot read the public key file",e);
      throw new CloudRuntimeException("Cannot read the public key file");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.privatekey', '" + DBEncryptionUtil.encrypt(privateKey) + "','Private key for the entire CloudStack')";
    String insertSql2="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.publickey', '" + DBEncryptionUtil.encrypt(publicKey) + "','Public key for the entire CloudStack')";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Private key inserted into database");
      }
    }
 catch (    SQLException ex) {
      s_logger.error("SQL of the private key failed",ex);
      throw new CloudRuntimeException("SQL of the private key failed");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Public key inserted into database");
      }
    }
 catch (    SQLException ex) {
      s_logger.error("SQL of the public key failed",ex);
      throw new CloudRuntimeException("SQL of the public key failed");
    }
  }
 else {
    s_logger.info("Keypairs already in database");
    if (userid.startsWith("cloud")) {
      s_logger.info("Keypairs already in database, updating local copy");
      updateKeyPairsOnDisk(homeDir);
    }
 else {
      s_logger.info("Keypairs already in database, skip updating local copy (not running as cloud user)");
    }
  }
  s_logger.info("Going to update systemvm iso with generated keypairs if needed");
  injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
}
