{
  String username=System.getProperty("user.name");
  Boolean devel=Boolean.valueOf(_configDao.getValue("developer"));
  if (!username.equalsIgnoreCase("cloud") && !devel) {
    s_logger.warn("Systemvm keypairs could not be set. Management server should be run as cloud user, or in development mode.");
    return;
  }
  String already=_configDao.getValue("ssh.privatekey");
  String homeDir=System.getProperty("user.home");
  if (homeDir == null) {
    throw new CloudRuntimeException("Cannot get home directory for account: " + username);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Processing updateKeyPairs");
  }
  if (homeDir != null && homeDir.startsWith("~")) {
    s_logger.error("No home directory was detected for the user '" + username + "'. Please check the profile of this user.");
    throw new CloudRuntimeException("No home directory was detected for the user '" + username + "'. Please check the profile of this user.");
  }
  File privkeyfile=null;
  File pubkeyfile=null;
  if (devel) {
    privkeyfile=new File(homeDir + "/.ssh/id_rsa.cloud");
    pubkeyfile=new File(homeDir + "/.ssh/id_rsa.cloud.pub");
  }
 else {
    privkeyfile=new File(homeDir + "/.ssh/id_rsa");
    pubkeyfile=new File(homeDir + "/.ssh/id_rsa.pub");
  }
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Systemvm keypairs not found in database. Need to store them in the database");
    }
    Script.runSimpleBashScript("if [ -f " + privkeyfile + " ]; then rm -f "+ privkeyfile+ "; fi; ssh-keygen -t rsa -N '' -f "+ privkeyfile+ " -q");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error("Cannot read the private key file",e);
      throw new CloudRuntimeException("Cannot read the private key file");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn("Cannot read the public key file",e);
      throw new CloudRuntimeException("Cannot read the public key file");
    }
    String publicKey=new String(arr2).trim();
    final String insertSql1="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.privatekey', '" + DBEncryptionUtil.encrypt(privateKey) + "','Private key for the entire CloudStack')";
    final String insertSql2="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.publickey', '" + DBEncryptionUtil.encrypt(publicKey) + "','Public key for the entire CloudStack')";
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        TransactionLegacy txn=TransactionLegacy.currentTxn();
        try {
          PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
          stmt1.executeUpdate();
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Private key inserted into database");
          }
        }
 catch (        SQLException ex) {
          s_logger.error("SQL of the private key failed",ex);
          throw new CloudRuntimeException("SQL of the private key failed");
        }
        try {
          PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
          stmt2.executeUpdate();
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Public key inserted into database");
          }
        }
 catch (        SQLException ex) {
          s_logger.error("SQL of the public key failed",ex);
          throw new CloudRuntimeException("SQL of the public key failed");
        }
      }
    }
);
  }
 else {
    s_logger.info("Keypairs already in database, updating local copy");
    updateKeyPairsOnDisk(homeDir);
  }
  s_logger.info("Going to update systemvm iso with generated keypairs if needed");
  try {
    injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
  }
 catch (  CloudRuntimeException e) {
    if (!devel) {
      throw new CloudRuntimeException(e.getMessage());
    }
  }
}
