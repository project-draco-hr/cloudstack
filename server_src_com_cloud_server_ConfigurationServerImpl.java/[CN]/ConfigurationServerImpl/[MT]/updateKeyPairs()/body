{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Processing updateKeyPairs");
  }
  String already=_configDao.getValue("ssh.privatekey");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Need to store in the database");
    }
    String homeDir=Script.runSimpleBashScript("echo ~");
    if (homeDir == "~") {
      s_logger.error("No home directory was detected.  Set the HOME environment variable to point to your user profile or home directory.");
      throw new RuntimeException("No home directory was detected.  Set the HOME environment variable to point to your user profile or home directory.");
    }
    String keygenOutput=Script.runSimpleBashScript("if [ -f ~/.ssh/id_rsa ] ; then true ; else yes '' | ssh-keygen -t rsa -q ; fi");
    File privkeyfile=new File(homeDir + "/.ssh/id_rsa");
    File pubkeyfile=new File(homeDir + "/.ssh/id_rsa.pub");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error("Cannot read the private key file",e);
      throw new RuntimeException("Cannot read the private key file");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn("Cannot read the public key file",e);
      throw new RuntimeException("Cannot read the public key file");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.privatekey', '" + privateKey + "','Private key for the entire CloudStack')";
    String insertSql2="INSERT INTO `cloud`.`configuration` (category, instance, component, name, value, description) " + "VALUES ('Hidden','DEFAULT', 'management-server','ssh.publickey', '" + publicKey + "','Public key for the entire CloudStack')";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Private key inserted into database");
      }
    }
 catch (    SQLException ex) {
      s_logger.error("SQL of the private key failed",ex);
      throw new RuntimeException("SQL of the private key failed");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Public key inserted into database");
      }
    }
 catch (    SQLException ex) {
      s_logger.error("SQL of the public key failed",ex);
      throw new RuntimeException("SQL of the public key failed");
    }
    injectSshKeyIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Public key inserted into systemvm iso");
    }
  }
 else {
    s_logger.info("Keypairs already in database");
  }
}
