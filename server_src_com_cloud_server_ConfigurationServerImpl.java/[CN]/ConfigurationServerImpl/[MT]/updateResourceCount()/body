{
  ResourceType[] resourceTypes=Resource.ResourceType.values();
  List<AccountVO> accounts=_accountDao.listAll();
  List<DomainVO> domains=_domainDao.listAll();
  List<ResourceCountVO> domainResourceCount=_resourceCountDao.listResourceCountByOwnerType(ResourceOwnerType.Domain);
  List<ResourceCountVO> accountResourceCount=_resourceCountDao.listResourceCountByOwnerType(ResourceOwnerType.Account);
  final List<ResourceType> accountSupportedResourceTypes=new ArrayList<ResourceType>();
  final List<ResourceType> domainSupportedResourceTypes=new ArrayList<ResourceType>();
  for (  ResourceType resourceType : resourceTypes) {
    if (resourceType.supportsOwner(ResourceOwnerType.Account)) {
      accountSupportedResourceTypes.add(resourceType);
    }
    if (resourceType.supportsOwner(ResourceOwnerType.Domain)) {
      domainSupportedResourceTypes.add(resourceType);
    }
  }
  final int accountExpectedCount=accountSupportedResourceTypes.size();
  final int domainExpectedCount=domainSupportedResourceTypes.size();
  if ((domainResourceCount.size() < domainExpectedCount * domains.size())) {
    s_logger.debug("resource_count table has records missing for some domains...going to insert them");
    for (    final DomainVO domain : domains) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _domainDao.lockRow(domain.getId(),true);
          List<ResourceCountVO> domainCounts=_resourceCountDao.listByOwnerId(domain.getId(),ResourceOwnerType.Domain);
          List<String> domainCountStr=new ArrayList<String>();
          for (          ResourceCountVO domainCount : domainCounts) {
            domainCountStr.add(domainCount.getType().toString());
          }
          if (domainCountStr.size() < domainExpectedCount) {
            for (            ResourceType resourceType : domainSupportedResourceTypes) {
              if (!domainCountStr.contains(resourceType.toString())) {
                ResourceCountVO resourceCountVO=new ResourceCountVO(resourceType,0,domain.getId(),ResourceOwnerType.Domain);
                s_logger.debug("Inserting resource count of type " + resourceType + " for domain id="+ domain.getId());
                _resourceCountDao.persist(resourceCountVO);
              }
            }
          }
        }
      }
);
    }
  }
  if ((accountResourceCount.size() < accountExpectedCount * accounts.size())) {
    s_logger.debug("resource_count table has records missing for some accounts...going to insert them");
    for (    final AccountVO account : accounts) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _accountDao.lockRow(account.getId(),true);
          List<ResourceCountVO> accountCounts=_resourceCountDao.listByOwnerId(account.getId(),ResourceOwnerType.Account);
          List<String> accountCountStr=new ArrayList<String>();
          for (          ResourceCountVO accountCount : accountCounts) {
            accountCountStr.add(accountCount.getType().toString());
          }
          if (accountCountStr.size() < accountExpectedCount) {
            for (            ResourceType resourceType : accountSupportedResourceTypes) {
              if (!accountCountStr.contains(resourceType.toString())) {
                ResourceCountVO resourceCountVO=new ResourceCountVO(resourceType,0,account.getId(),ResourceOwnerType.Account);
                s_logger.debug("Inserting resource count of type " + resourceType + " for account id="+ account.getId());
                _resourceCountDao.persist(resourceCountVO);
              }
            }
          }
        }
      }
);
    }
  }
}
