{
  saveUser();
  String init=_configDao.getValue("init");
  if (init == null || init.equals("false")) {
    s_logger.debug("ConfigurationServer is saving default values to the database.");
    List<String> categories=Config.getCategories();
    for (    String category : categories) {
      if (!_configDao.isPremium() && category.equals("Premium")) {
        continue;
      }
      List<Config> configs=Config.getConfigs(category);
      for (      Config c : configs) {
        String name=c.key();
        if (_configDao.findByName(name) != null) {
          continue;
        }
        String instance="DEFAULT";
        String component=c.getComponent();
        String value=c.getDefaultValue();
        value=("Hidden".equals(category) || "Secure".equals(category)) ? DBEncryptionUtil.encrypt(value) : value;
        String description=c.getDescription();
        ConfigurationVO configVO=new ConfigurationVO(category,instance,component,name,value,description);
        _configDao.persist(configVO);
      }
    }
    _configDao.update(Config.UseSecondaryStorageVm.key(),Config.UseSecondaryStorageVm.getCategory(),"true");
    s_logger.debug("ConfigurationServer made secondary storage vm required.");
    _configDao.update(Config.SecStorageEncryptCopy.key(),Config.SecStorageEncryptCopy.getCategory(),"true");
    s_logger.debug("ConfigurationServer made secondary storage copy encrypted.");
    _configDao.update("secstorage.secure.copy.cert","realhostip");
    s_logger.debug("ConfigurationServer made secondary storage copy use realhostip.");
    createServiceOffering(User.UID_SYSTEM,"Small Instance",1,512,500,"Small Instance",false,false,null);
    createServiceOffering(User.UID_SYSTEM,"Medium Instance",1,1024,1000,"Medium Instance",false,false,null);
    createdefaultDiskOffering(null,"Small","Small Disk, 5 GB",5,null,false,false);
    createdefaultDiskOffering(null,"Medium","Medium Disk, 20 GB",20,null,false,false);
    createdefaultDiskOffering(null,"Large","Large Disk, 100 GB",100,null,false,false);
    createdefaultDiskOffering(null,"Large","Large Disk, 100 GB",100,null,false,false);
    createdefaultDiskOffering(null,"Custom","Custom Disk",0,null,true,false);
    String mountParent=getMountParent();
    if (mountParent != null) {
      _configDao.update(Config.MountParent.key(),Config.MountParent.getCategory(),mountParent);
      s_logger.debug("ConfigurationServer saved \"" + mountParent + "\" as mount.parent.");
    }
 else {
      s_logger.debug("ConfigurationServer could not detect mount.parent.");
    }
    String hostIpAdr=NetUtils.getDefaultHostIp();
    boolean needUpdateHostIp=true;
    if (hostIpAdr != null) {
      Boolean devel=Boolean.valueOf(_configDao.getValue("developer"));
      if (devel) {
        String value=_configDao.getValue(ClusterManager.ManagementHostIPAdr.key());
        if (value != null && !value.equals("localhost")) {
          needUpdateHostIp=false;
        }
      }
      if (needUpdateHostIp) {
        _configDao.update(ClusterManager.ManagementHostIPAdr.key(),ClusterManager.ManagementHostIPAdr.category(),hostIpAdr);
        s_logger.debug("ConfigurationServer saved \"" + hostIpAdr + "\" as host.");
      }
    }
    updateSSOKey();
    createDefaultNetworkOfferings();
    createDefaultNetworks();
    List<VlanVO> vlans=_vlanDao.listAll();
    if (vlans != null && !vlans.isEmpty()) {
      for (      final VlanVO vlan : vlans) {
        if (vlan.getNetworkId().longValue() == 0) {
          updateVlanWithNetworkId(vlan);
        }
        String ipPange=vlan.getIpRange();
        String[] range=ipPange.split("-");
        final String startIp=range[0];
        final String endIp=range[1];
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            IPRangeConfig config=new IPRangeConfig();
            long startIPLong=NetUtils.ip2Long(startIp);
            long endIPLong=NetUtils.ip2Long(endIp);
            config.savePublicIPRange(TransactionLegacy.currentTxn(),startIPLong,endIPLong,vlan.getDataCenterId(),vlan.getId(),vlan.getNetworkId(),vlan.getPhysicalNetworkId());
          }
        }
);
      }
    }
  }
  updateResourceCount();
  updateSSLKeystore();
  updateKeyPairs();
  updateSystemvmPassword();
  generateSecStorageVmCopyPassword();
  updateCloudIdentifier();
  _configDepotAdmin.populateConfigurations();
  initiateXenServerPVDriverVersion();
  _configDao.update("init","Hidden","true");
  _configDao.invalidateCache();
}
