{
  String insertSql="INSERT INTO `cloud`.`account` (id, account_name, type, domain_id) VALUES (1, 'system', '1', '1')";
  Transaction txn=Transaction.currentTxn();
  txn.start();
  AccountVO systemAccount=new AccountVO(1);
  systemAccount.setAccountName("system");
  systemAccount.setType(Account.ACCOUNT_TYPE_ADMIN);
  ;
  systemAccount.setDomainId(1);
  systemAccount.setState(Account.State.enabled);
  _accountDao.persist(systemAccount);
  AccountVO adminAccount=new AccountVO(1);
  adminAccount.setAccountName("admin");
  adminAccount.setType(Account.ACCOUNT_TYPE_ADMIN);
  ;
  adminAccount.setDomainId(1);
  adminAccount.setState(Account.State.enabled);
  _accountDao.persist(adminAccount);
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance("MD5");
  }
 catch (  NoSuchAlgorithmException e) {
    return;
  }
  String password="password";
  md5.reset();
  BigInteger pwInt=new BigInteger(1,md5.digest(password.getBytes()));
  String pwStr=pwInt.toString(16);
  int padding=32 - pwStr.length();
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding; i++) {
    sb.append('0');
  }
  sb.append(pwStr);
  password=sb.toString();
  UserVO systemUser=new UserVO(1);
  systemUser.setUsername("system");
  systemUser.setPassword("");
  systemUser.setAccountId(1);
  systemUser.setFirstname("system");
  systemUser.setLastname("system");
  systemUser.setState(Account.State.enabled);
  _userDao.persist(systemUser);
  UserVO adminUser=new UserVO(2);
  adminUser.setUsername("admin");
  adminUser.setPassword(password);
  adminUser.setAccountId(2);
  adminUser.setFirstname("admin");
  adminUser.setLastname("cloud");
  adminUser.setState(Account.State.enabled);
  _userDao.persist(adminUser);
  try {
    _resourceCountDao.createResourceCounts(1,OwnerType.Account);
    _resourceCountDao.createResourceCounts(2,OwnerType.Account);
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to create initial resource counts for system/admin accounts");
  }
  try {
    String tableName="security_group";
    try {
      String checkSql="SELECT * from network_group";
      PreparedStatement stmt=txn.prepareAutoCloseStatement(checkSql);
      stmt.executeQuery();
      tableName="network_group";
    }
 catch (    Exception ex) {
    }
    insertSql="SELECT * FROM " + tableName + " where account_id=2 and name='default'";
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    ResultSet rs=stmt.executeQuery();
    if (!rs.next()) {
      if (tableName.equals("security_group")) {
        insertSql="INSERT INTO " + tableName + " (name, description, account_id, domain_id) "+ "VALUES ('default', 'Default Security Group', 2, 1)";
      }
 else {
        insertSql="INSERT INTO " + tableName + " (name, description, account_id, domain_id, account_name) "+ "VALUES ('default', 'Default Security Group', 2, 1, 'admin')";
      }
      try {
        stmt=txn.prepareAutoCloseStatement(insertSql);
        stmt.executeUpdate();
      }
 catch (      SQLException ex) {
        s_logger.warn("Failed to create default security group for default admin account due to ",ex);
      }
    }
    rs.close();
  }
 catch (  Exception ex) {
    s_logger.warn("Failed to create default security group for default admin account due to ",ex);
  }
 finally {
    txn.commit();
  }
}
