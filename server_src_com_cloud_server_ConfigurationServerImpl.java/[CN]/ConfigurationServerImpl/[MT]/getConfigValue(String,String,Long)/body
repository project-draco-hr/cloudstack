{
  Config c=Config.getConfig(name);
  if (c == null) {
    throw new CloudRuntimeException("Missing configuration variable " + name + " in configuration table");
  }
  String configScope=c.getScope();
  if (scope != null && !scope.isEmpty()) {
    if (!configScope.contains(scope)) {
      throw new CloudRuntimeException("Invalid scope " + scope + " for the parameter "+ name);
    }
    if (resourceId != null) {
switch (Config.ConfigurationParameterScope.valueOf(scope)) {
case zone:
        DataCenterVO zone=_zoneDao.findById(resourceId);
      if (zone == null) {
        throw new InvalidParameterValueException("unable to find zone by id " + resourceId);
      }
    DcDetailVO dcDetailVO=_dcDetailsDao.findDetail(resourceId,name);
  if (dcDetailVO != null && dcDetailVO.getValue() != null) {
    return dcDetailVO.getValue();
  }
break;
case cluster:
ClusterVO cluster=_clusterDao.findById(resourceId);
if (cluster == null) {
throw new InvalidParameterValueException("unable to find cluster by id " + resourceId);
}
ClusterDetailsVO clusterDetailsVO=_clusterDetailsDao.findDetail(resourceId,name);
if (clusterDetailsVO != null && clusterDetailsVO.getValue() != null) {
return clusterDetailsVO.getValue();
}
break;
case storagepool:
StoragePoolVO pool=_storagePoolDao.findById(resourceId);
if (pool == null) {
throw new InvalidParameterValueException("unable to find storage pool by id " + resourceId);
}
StoragePoolDetailVO storagePoolDetailVO=_storagePoolDetailsDao.findDetail(resourceId,name);
if (storagePoolDetailVO != null && storagePoolDetailVO.getValue() != null) {
return storagePoolDetailVO.getValue();
}
break;
case account:
AccountVO account=_accountDao.findById(resourceId);
if (account == null) {
throw new InvalidParameterValueException("unable to find account by id " + resourceId);
}
AccountDetailVO accountDetailVO=_accountDetailsDao.findDetail(resourceId,name);
if (accountDetailVO != null && accountDetailVO.getValue() != null) {
return accountDetailVO.getValue();
}
break;
default :
}
}
}
return _configDao.getValue(name);
}
