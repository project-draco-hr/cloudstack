{
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemPublicNetwork,TrafficType.Public,true);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemManagementNetwork,TrafficType.Management,false);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemControlNetwork,TrafficType.Control,false);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOfferingVO.SystemStorageNetwork,TrafficType.Storage,true);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  Map<Network.Service,Network.Provider> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  Map<Network.Service,Network.Provider> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  Map<Network.Service,Network.Provider> defaultSharedSGNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedSGNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  Map<Network.Service,Network.Provider> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,Provider.VirtualRouter);
  Map<Network.Service,Network.Provider> netscalerServiceProviders=new HashMap<Network.Service,Network.Provider>();
  netscalerServiceProviders.put(Service.Dhcp,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.Dns,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.UserData,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  netscalerServiceProviders.put(Service.StaticNat,Provider.Netscaler);
  netscalerServiceProviders.put(Service.Lb,Provider.Netscaler);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkOfferingVO defaultSharedSGNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,"Offering for Shared Security group enabled networks",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true);
  defaultSharedSGNetworkOffering.setState(NetworkOffering.State.Enabled);
  defaultSharedSGNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedSGNetworkOffering);
  for (  Service service : defaultSharedSGNetworkOfferingProviders.keySet()) {
    NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedSGNetworkOffering.getId(),service,defaultSharedSGNetworkOfferingProviders.get(service));
    _ntwkOfferingServiceMapDao.persist(offService);
    s_logger.trace("Added service for the network offering: " + offService);
  }
  NetworkOfferingVO defaultSharedNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOffering,"Offering for Shared networks",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true);
  defaultSharedNetworkOffering.setState(NetworkOffering.State.Enabled);
  defaultSharedNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedNetworkOffering);
  for (  Service service : defaultSharedNetworkOfferingProviders.keySet()) {
    NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedNetworkOffering.getId(),service,defaultSharedNetworkOfferingProviders.get(service));
    _ntwkOfferingServiceMapDao.persist(offService);
    s_logger.trace("Added service for the network offering: " + offService);
  }
  NetworkOfferingVO defaultIsolatedSourceNatEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,"Offering for Isolated networks with Source Nat service enabled",TrafficType.Guest,false,false,null,null,true,Availability.Required,null,Network.GuestType.Isolated,true,false);
  defaultIsolatedSourceNatEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
  defaultIsolatedSourceNatEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedSourceNatEnabledNetworkOffering);
  for (  Service service : defaultIsolatedSourceNatEnabledNetworkOfferingProviders.keySet()) {
    NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedSourceNatEnabledNetworkOffering.getId(),service,defaultIsolatedSourceNatEnabledNetworkOfferingProviders.get(service));
    _ntwkOfferingServiceMapDao.persist(offService);
    s_logger.trace("Added service for the network offering: " + offService);
  }
  NetworkOfferingVO defaultIsolatedEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOffering,"Offering for Isolated networks with no Source Nat service",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,true,true);
  defaultIsolatedEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
  defaultIsolatedEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedEnabledNetworkOffering);
  for (  Service service : defaultIsolatedNetworkOfferingProviders.keySet()) {
    NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedEnabledNetworkOffering.getId(),service,defaultIsolatedNetworkOfferingProviders.get(service));
    _ntwkOfferingServiceMapDao.persist(offService);
    s_logger.trace("Added service for the network offering: " + offService);
  }
  NetworkOfferingVO defaultNetscalerNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,"Offering for Shared networks with Elastic IP and Elastic LB capabilities",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,false,false,false,true,true,true);
  defaultNetscalerNetworkOffering.setState(NetworkOffering.State.Enabled);
  defaultNetscalerNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetscalerNetworkOffering);
  for (  Service service : netscalerServiceProviders.keySet()) {
    NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetscalerNetworkOffering.getId(),service,netscalerServiceProviders.get(service));
    _ntwkOfferingServiceMapDao.persist(offService);
    s_logger.trace("Added service for the network offering: " + offService);
  }
  txn.commit();
}
