@classmethod
def create(cls, apiclient, services, networkid=None, protocol=None, number=None, aclid=None, action='Allow', traffictype=None, cidrlist=[]):
    'Create network ACL rules(Ingress/Egress)'
    cmd = createNetworkACL.createNetworkACLCmd()
    if ('networkid' in services):
        cmd.networkid = services['networkid']
    elif networkid:
        cmd.networkid = networkid
    if ('protocol' in services):
        cmd.protocol = services['protocol']
        if (services['protocol'] == 'ICMP'):
            cmd.icmptype = (-1)
            cmd.icmpcode = (-1)
    elif protocol:
        cmd.protocol = protocol
    if ('startport' in services):
        cmd.startport = services['startport']
    if ('endport' in services):
        cmd.endport = services['endport']
    if ('cidrlist' in services):
        cmd.cidrlist = services['cidrlist']
    elif cidrlist:
        cmd.cidrlist = cidrlist
    if ('traffictype' in services):
        cmd.traffictype = services['traffictype']
    elif traffictype:
        cmd.traffictype = traffictype
    if ('action' in services):
        cmd.action = services['action']
    elif action:
        cmd.action = action
    if ('number' in services):
        cmd.number = services['number']
    elif number:
        cmd.number = number
    if ('aclid' in services):
        cmd.aclid = services['aclid']
    elif aclid:
        cmd.aclid = aclid
    return NetworkACL(apiclient.createNetworkACL(cmd).__dict__)
