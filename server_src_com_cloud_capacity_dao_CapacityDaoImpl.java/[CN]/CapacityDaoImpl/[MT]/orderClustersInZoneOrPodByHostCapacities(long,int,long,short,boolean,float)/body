{
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  StringBuilder sql=new StringBuilder(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART1);
  if (isZone) {
    sql.append("capacity.data_center_id = ?");
  }
 else {
    sql.append("capacity.pod_id = ?");
  }
  sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART2);
  if (isZone) {
    sql.append("capacity.data_center_id = ?");
  }
 else {
    sql.append("capacity.pod_id = ?");
  }
  sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART3);
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setLong(1,id);
    if (capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_CPU) {
      pstmt.setShort(2,CapacityVO.CAPACITY_TYPE_CPU);
      pstmt.setFloat(3,cpuOverprovisioningFactor);
      pstmt.setLong(4,requiredCpu);
      pstmt.setLong(5,id);
      pstmt.setShort(6,CapacityVO.CAPACITY_TYPE_MEMORY);
      pstmt.setFloat(7,1);
      pstmt.setLong(8,requiredRam);
      pstmt.setFloat(9,cpuOverprovisioningFactor);
    }
 else {
      pstmt.setShort(2,CapacityVO.CAPACITY_TYPE_MEMORY);
      pstmt.setFloat(3,1);
      pstmt.setLong(4,requiredRam);
      pstmt.setLong(5,id);
      pstmt.setShort(6,CapacityVO.CAPACITY_TYPE_CPU);
      pstmt.setFloat(7,cpuOverprovisioningFactor);
      pstmt.setLong(8,requiredCpu);
      pstmt.setFloat(9,1);
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      result.add(rs.getLong(1));
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("DB Exception on: " + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException("Caught: " + sql,e);
  }
}
