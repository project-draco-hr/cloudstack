{
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  Map<Long,Double> clusterCapacityMap=new HashMap<Long,Double>();
  StringBuilder sql=new StringBuilder(ORDER_CLUSTERS_BY_AGGREGATE_CAPACITY_PART1);
  if (isZone) {
    sql.append("data_center_id = ?");
  }
 else {
    sql.append("pod_id = ?");
  }
  sql.append(ORDER_CLUSTERS_BY_AGGREGATE_CAPACITY_PART2);
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    if (capacityTypeForOrdering == CapacityVO.CAPACITY_TYPE_CPU) {
      pstmt.setFloat(1,cpuOverprovisioningFactor);
      pstmt.setFloat(4,cpuOverprovisioningFactor);
    }
 else {
      pstmt.setFloat(1,1);
      pstmt.setFloat(4,1);
    }
    pstmt.setLong(2,id);
    pstmt.setShort(3,capacityTypeForOrdering);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long clusterId=rs.getLong(1);
      result.add(clusterId);
      clusterCapacityMap.put(clusterId,rs.getDouble(2));
    }
    return new Pair<List<Long>,Map<Long,Double>>(result,clusterCapacityMap);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("DB Exception on: " + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException("Caught: " + sql,e);
  }
}
