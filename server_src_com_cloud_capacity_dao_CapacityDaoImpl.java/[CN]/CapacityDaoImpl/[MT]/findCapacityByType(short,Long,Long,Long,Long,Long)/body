{
  SummedCapacitySearch=createSearchBuilder(SummedCapacity.class);
  SummedCapacitySearch.select("sumUsed",Func.SUM,SummedCapacitySearch.entity().getUsedCapacity());
  SummedCapacitySearch.select("sumTotal",Func.SUM,SummedCapacitySearch.entity().getTotalCapacity());
  SummedCapacitySearch.select("clusterId",Func.NATIVE,SummedCapacitySearch.entity().getClusterId());
  SummedCapacitySearch.select("podId",Func.NATIVE,SummedCapacitySearch.entity().getPodId());
  SummedCapacitySearch.and("dcId",SummedCapacitySearch.entity().getDataCenterId(),Op.EQ);
  SummedCapacitySearch.and("capacityType",SummedCapacitySearch.entity().getCapacityType(),Op.EQ);
  SummedCapacitySearch.groupBy(SummedCapacitySearch.entity().getClusterId());
  if (podId != null) {
    SummedCapacitySearch.and("podId",SummedCapacitySearch.entity().getPodId(),Op.EQ);
  }
  if (clusterId != null) {
    SummedCapacitySearch.and("clusterId",SummedCapacitySearch.entity().getClusterId(),Op.EQ);
  }
  SummedCapacitySearch.done();
  SearchCriteria<SummedCapacity> sc=SummedCapacitySearch.create();
  sc.setParameters("dcId",zoneId);
  sc.setParameters("capacityType",capacityType);
  if (podId != null) {
    sc.setParameters("podId",podId);
  }
  if (clusterId != null) {
    sc.setParameters("clusterId",clusterId);
  }
  Filter filter=new Filter(CapacityVO.class,null,true,startIndex,pageSize);
  List<SummedCapacity> results=customSearchIncludingRemoved(sc,filter);
  return results;
}
