{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Trying SAML2 auth for user: " + username);
  }
  if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {
    s_logger.debug("Username or Password cannot be empty");
    return new Pair<Boolean,ActionOnFailedAuthentication>(false,null);
  }
  final UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
  if (userAccount == null || userAccount.getSource() != User.Source.SAML2) {
    s_logger.debug("Unable to find user with " + username + " in domain "+ domainId+ ", or user source is not SAML2");
    return new Pair<Boolean,ActionOnFailedAuthentication>(false,null);
  }
 else {
    User user=_userDao.getUser(userAccount.getId());
    if (user != null && requestParameters != null && requestParameters.containsKey(SAMLPluginConstants.SAML_RESPONSE)) {
      final String samlResponse=((String[])requestParameters.get(SAMLPluginConstants.SAML_RESPONSE))[0];
      Response responseObject=null;
      try {
        DefaultBootstrap.bootstrap();
        responseObject=SAMLUtils.decodeSAMLResponse(samlResponse);
      }
 catch (      ConfigurationException|FactoryConfigurationError|ParserConfigurationException|SAXException|IOException|UnmarshallingException e) {
        return new Pair<Boolean,ActionOnFailedAuthentication>(false,null);
      }
      if (!responseObject.getStatus().getStatusCode().getValue().equals(StatusCode.SUCCESS_URI)) {
        return new Pair<Boolean,ActionOnFailedAuthentication>(false,null);
      }
      return new Pair<Boolean,ActionOnFailedAuthentication>(true,null);
    }
  }
  return new Pair<Boolean,ActionOnFailedAuthentication>(false,ActionOnFailedAuthentication.INCREMENT_INCORRECT_LOGIN_ATTEMPT_COUNT);
}
