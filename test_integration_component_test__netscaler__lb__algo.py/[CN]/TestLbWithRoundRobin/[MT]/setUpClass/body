@classmethod
def setUpClass(cls):
    cls._cleanup = []
    cls.testClient = super(TestLbWithRoundRobin, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.testdata = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.testdata['ostype'])
    cls.testdata['configurableData']['netscaler']['lbdevicededicated'] = False
    cls._cleanup = []
    try:
        cls.exception_string = 'Connection limit to CFE exceeded'
        cls.skiptest = False
        cls.netscaler = add_netscaler(cls.api_client, cls.zone.id, cls.testdata['configurableData']['netscaler'])
        cls._cleanup.append(cls.netscaler)
        cls.network_offering = NetworkOffering.create(cls.api_client, cls.testdata['nw_off_isolated_netscaler'], conservemode='True')
        cls.network_offering.update(cls.api_client, state='Enabled')
        cls.testdata['small']['zoneid'] = cls.zone.id
        cls.testdata['small']['template'] = cls.template.id
        cls.service_offering = ServiceOffering.create(cls.api_client, cls.testdata['service_offering'])
    except Exception as e:
        if (cls.exception_string.lower() in e.lower()):
            cls.skiptest = True
            cls.exception_msg = e
        else:
            cls.tearDownClass()
            raise Exception(('Warning: Exception in setUpClass: %s' % e))
    return
