{
  s_logger.info("Database upgrade must be performed from " + dbVersion + " to "+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(new Pair<String,String>(trimmedDbVersion,trimmedCurrentVersion));
  if (upgrades == null) {
    throw new CloudRuntimeException("There is no upgrade path from " + dbVersion + " to "+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    throw new CloudRuntimeException("The end upgrade version is actually at " + upgrades[upgrades.length - 1].getUpgradedVersion() + " but our management server code version is at "+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade) {
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info("Running upgrade " + upgrade.getClass().getSimpleName() + " to upgrade from "+ upgrade.getUpgradableVersionRange()[0]+ "-"+ upgrade.getUpgradableVersionRange()[1]+ " to "+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open("Upgrade");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("Unable to upgrade the database",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
      _dao.persist(version);
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info("Cleanup upgrade " + upgrade.getClass().getSimpleName() + " to upgrade from "+ upgrade.getUpgradableVersionRange()[0]+ "-"+ upgrade.getUpgradableVersionRange()[1]+ " to "+ upgrade.getUpgradedVersion());
    VersionVO version=_dao.findByVersion(upgrade.getUpgradedVersion(),Step.Upgrade);
    Transaction txn=Transaction.open("Cleanup");
    txn.start();
    try {
      File[] scripts=upgrade.getCleanupScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      version.setStep(Step.Complete);
      version.setUpdated(new Date());
      _dao.update(version.getId(),version);
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
}
