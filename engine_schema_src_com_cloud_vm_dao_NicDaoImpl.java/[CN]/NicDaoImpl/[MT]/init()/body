{
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and("instance",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and("network",AllFieldsSearch.entity().getNetworkId(),Op.EQ);
  AllFieldsSearch.and("gateway",AllFieldsSearch.entity().getGateway(),Op.EQ);
  AllFieldsSearch.and("vmType",AllFieldsSearch.entity().getVmType(),Op.EQ);
  AllFieldsSearch.and("address",AllFieldsSearch.entity().getIp4Address(),Op.EQ);
  AllFieldsSearch.and("isDefault",AllFieldsSearch.entity().isDefaultNic(),Op.EQ);
  AllFieldsSearch.and("broadcastUri",AllFieldsSearch.entity().getBroadcastUri(),Op.EQ);
  AllFieldsSearch.and("secondaryip",AllFieldsSearch.entity().getSecondaryIp(),Op.EQ);
  AllFieldsSearch.and("nicid",AllFieldsSearch.entity().getId(),Op.EQ);
  AllFieldsSearch.and("strategy",AllFieldsSearch.entity().getReservationStrategy(),Op.EQ);
  AllFieldsSearch.done();
  IpSearch=createSearchBuilder(String.class);
  IpSearch.select(null,Func.DISTINCT,IpSearch.entity().getIp4Address());
  IpSearch.and("network",IpSearch.entity().getNetworkId(),Op.EQ);
  IpSearch.and("address",IpSearch.entity().getIp4Address(),Op.NNULL);
  IpSearch.done();
  NonReleasedSearch=createSearchBuilder();
  NonReleasedSearch.and("instance",NonReleasedSearch.entity().getInstanceId(),Op.EQ);
  NonReleasedSearch.and("network",NonReleasedSearch.entity().getNetworkId(),Op.EQ);
  NonReleasedSearch.and("state",NonReleasedSearch.entity().getState(),Op.NOTIN);
  NonReleasedSearch.done();
  CountBy=createSearchBuilder(Integer.class);
  CountBy.select(null,Func.COUNT,CountBy.entity().getId());
  CountBy.and("vmId",CountBy.entity().getInstanceId(),Op.EQ);
  CountBy.and("removed",CountBy.entity().getRemoved(),Op.NULL);
  CountBy.done();
  CountByForStartingVms=createSearchBuilder(Integer.class);
  CountByForStartingVms.select(null,Func.COUNT,CountByForStartingVms.entity().getId());
  CountByForStartingVms.and("networkId",CountByForStartingVms.entity().getNetworkId(),Op.EQ);
  CountByForStartingVms.and("removed",CountByForStartingVms.entity().getRemoved(),Op.NULL);
  SearchBuilder<VMInstanceVO> join1=_vmDao.createSearchBuilder();
  join1.and("state",join1.entity().getState(),Op.EQ);
  CountByForStartingVms.join("vm",join1,CountByForStartingVms.entity().getInstanceId(),join1.entity().getId(),JoinBuilder.JoinType.INNER);
  CountByForStartingVms.done();
}
