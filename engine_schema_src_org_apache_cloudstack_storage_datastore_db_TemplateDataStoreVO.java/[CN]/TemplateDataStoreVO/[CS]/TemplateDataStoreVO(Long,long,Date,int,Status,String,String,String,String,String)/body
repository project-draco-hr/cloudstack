{
  super();
  dataStoreId=hostId;
  this.templateId=templateId;
  this.lastUpdated=lastUpdated;
  this.downloadPercent=downloadPercent;
  this.downloadState=downloadState;
  this.localDownloadPath=localDownloadPath;
  this.errorString=errorString;
  this.jobId=jobId;
  refCnt=0L;
  this.installPath=installPath;
  setDownloadUrl(downloadUrl);
switch (downloadState) {
case DOWNLOADED:
    state=ObjectInDataStoreStateMachine.State.Ready;
  break;
case CREATING:
case DOWNLOAD_IN_PROGRESS:
case UPLOAD_IN_PROGRESS:
state=ObjectInDataStoreStateMachine.State.Creating2;
break;
case DOWNLOAD_ERROR:
case UPLOAD_ERROR:
state=ObjectInDataStoreStateMachine.State.Failed;
break;
case ABANDONED:
state=ObjectInDataStoreStateMachine.State.Destroyed;
break;
default :
state=ObjectInDataStoreStateMachine.State.Allocated;
break;
}
}
