@attr(tags=['advanced', 'intervlan'], required_hardware='true')
def test_02_routervm_iptables_policies(self):
    ' Test iptables default INPUT/FORWARD policy on RouterVM '
    self.logger.debug('Starting test_02_routervm_iptables_policies')
    vm1 = self.entity_manager.deployvm()
    routers = self.entity_manager.query_routers()
    self.assertEqual(isinstance(routers, list), True, 'Check for list routers response return valid data')
    for router in routers:
        if ((not router.isredundantrouter) and (not router.vpcid)):
            hosts = list_hosts(self.apiclient, id=router.hostid)
            self.assertEqual(isinstance(hosts, list), True, 'Check for list hosts response return valid data')
            host = hosts[0]
            host.user = self.hostConfig['username']
            host.passwd = self.hostConfig['password']
            host.port = self.services['configurableData']['host']['port']
            tables = [self.services['configurableData']['input'], self.services['configurableData']['forward']]
            for table in tables:
                result = None
                if (self.hypervisor.lower() in ('vmware', 'hyperv')):
                    result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, ('iptables -L %s' % table), hypervisor=self.hypervisor)
                else:
                    try:
                        result = get_process_status(host.ipaddress, host.port, host.user, host.passwd, router.linklocalip, ('iptables -L %s' % table))
                    except KeyError:
                        self.skipTest(('Provide a marvin config file with host                                        credentials to run %s' % self._testMethodName))
                self.logger.debug(('iptables -L %s: %s' % (table, result)))
                res = str(result)
                self.assertEqual(res.count('DROP'), 1, ('%s Default Policy should be DROP' % table))
