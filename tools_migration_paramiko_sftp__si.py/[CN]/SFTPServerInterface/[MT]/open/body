def open(self, path, flags, attr):
    '\n        Open a file on the server and create a handle for future operations\n        on that file.  On success, a new object subclassed from L{SFTPHandle}\n        should be returned.  This handle will be used for future operations\n        on the file (read, write, etc).  On failure, an error code such as\n        L{SFTP_PERMISSION_DENIED} should be returned.\n\n        C{flags} contains the requested mode for opening (read-only,\n        write-append, etc) as a bitset of flags from the C{os} module:\n            - C{os.O_RDONLY}\n            - C{os.O_WRONLY}\n            - C{os.O_RDWR}\n            - C{os.O_APPEND}\n            - C{os.O_CREAT}\n            - C{os.O_TRUNC}\n            - C{os.O_EXCL}\n        (One of C{os.O_RDONLY}, C{os.O_WRONLY}, or C{os.O_RDWR} will always\n        be set.)\n\n        The C{attr} object contains requested attributes of the file if it\n        has to be created.  Some or all attribute fields may be missing if\n        the client didn\'t specify them.\n        \n        @note: The SFTP protocol defines all files to be in "binary" mode.\n            There is no equivalent to python\'s "text" mode.\n\n        @param path: the requested path (relative or absolute) of the file\n            to be opened.\n        @type path: str\n        @param flags: flags or\'d together from the C{os} module indicating the\n            requested mode for opening the file.\n        @type flags: int\n        @param attr: requested attributes of the file if it is newly created.\n        @type attr: L{SFTPAttributes}\n        @return: a new L{SFTPHandle} I{or error code}.\n        @rtype L{SFTPHandle}\n        '
    return SFTP_OP_UNSUPPORTED
