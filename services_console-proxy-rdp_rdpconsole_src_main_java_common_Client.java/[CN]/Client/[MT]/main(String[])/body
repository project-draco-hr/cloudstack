{
  try {
    if (args.length < 4) {
      System.out.println("Usage: \n  java common.Client vnc IP PORT PASSWORD\n  java common.Client rdp IP PORT username\n");
      System.exit(0);
    }
    String connectionType=args[0];
    String hostname=args[1];
    int port=Integer.parseInt(args[2]);
    String userNameOrPassword=args[3];
    InetSocketAddress address=new InetSocketAddress(hostname,port);
    socket=new SocketWrapper("socket");
    screen=new ScreenDescription();
    canvas=new BufferedImageCanvas(1024,768);
    screen.addSizeChangeListener(new SizeChangeListener(){
      @Override public void sizeChanged(      int width,      int height){
        if (canvas != null) {
          canvas.setCanvasSize(width,height);
          if (scroller != null)           scroller.setSize(canvas.getWidth(),canvas.getHeight());
        }
      }
    }
);
    Element main;
    if ("vnc".equals(connectionType)) {
      main=new VncClient("client",userNameOrPassword,screen,canvas);
    }
 else     if ("rdp".equals(connectionType)) {
      main=new RdpClient("client",userNameOrPassword,screen,canvas);
    }
 else {
      throw new RuntimeException("Unknown connection type. Expected value: \"vnc\" or \"rdp\", actual value: \"" + connectionType + "\".");
    }
    Pipeline pipeline=new PipelineImpl("Client");
    pipeline.add(socket,main);
    pipeline.link("socket",main.getId(),"socket");
    pipeline.validate();
    frame=createVncClientMainWindow(canvas,"VNC",new WindowAdapter(){
      @Override public void windowClosing(      WindowEvent evt){
        shutdown();
      }
    }
);
    try {
      socket.connect(address);
    }
  finally {
      shutdown();
    }
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
  }
}
