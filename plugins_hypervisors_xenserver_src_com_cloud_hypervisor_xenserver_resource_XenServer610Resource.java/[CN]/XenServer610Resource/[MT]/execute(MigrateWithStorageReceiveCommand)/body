{
  final Connection connection=getConnection();
  final VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  final Map<VolumeTO,StorageFilerTO> volumeToFiler=cmd.getVolumeToFiler();
  try {
    final Map<VolumeTO,Object> volumeToSr=new HashMap<VolumeTO,Object>();
    for (    final Map.Entry<VolumeTO,StorageFilerTO> entry : volumeToFiler.entrySet()) {
      final SR sr=getStorageRepository(connection,entry.getValue().getUuid());
      volumeToSr.put(entry.getKey(),sr);
    }
    final Map<NicTO,Object> nicToNetwork=new HashMap<NicTO,Object>();
    for (    final NicTO nicTo : vmSpec.getNics()) {
      final Network network=getNetwork(connection,nicTo);
      nicToNetwork.put(nicTo,network);
    }
    final Map<String,String> other=new HashMap<String,String>();
    other.put("live","true");
    final Network network=getNativeNetworkForTraffic(connection,TrafficType.Storage,null).getNetwork();
    final Host host=Host.getByUuid(connection,_host.getUuid());
    final Map<String,String> token=host.migrateReceive(connection,network,other);
    return new MigrateWithStorageReceiveAnswer(cmd,volumeToSr,nicToNetwork,token);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error("Migration of vm " + vmSpec.getName() + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(cmd,e);
  }
catch (  final Exception e) {
    s_logger.error("Migration of vm " + vmSpec.getName() + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(cmd,e);
  }
}
