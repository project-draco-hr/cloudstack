{
  final Connection connection=getConnection();
  final VirtualMachineTO vmSpec=cmd.getVirtualMachine();
  final Map<VolumeTO,Object> volumeToSr=cmd.getVolumeToSr();
  final Map<NicTO,Object> nicToNetwork=cmd.getNicToNetwork();
  final Map<String,String> token=cmd.getToken();
  final String vmName=vmSpec.getName();
  final Set<VolumeTO> volumeToSet=null;
  Task task=null;
  try {
    final Set<VM> vms=VM.getByNameLabel(connection,vmSpec.getName());
    final VM vmToMigrate=vms.iterator().next();
    final Map<String,String> other=new HashMap<String,String>();
    other.put("live","true");
    final Map<VDI,SR> vdiMap=new HashMap<VDI,SR>();
    for (    final Map.Entry<VolumeTO,Object> entry : volumeToSr.entrySet()) {
      if (entry.getValue() instanceof SR) {
        final SR sr=(SR)entry.getValue();
        final VDI vdi=getVDIbyUuid(connection,entry.getKey().getPath());
        vdiMap.put(vdi,sr);
      }
 else {
        throw new CloudRuntimeException("The object " + entry.getValue() + " passed is not of type SR.");
      }
    }
    final Map<VIF,Network> vifMap=new HashMap<VIF,Network>();
    for (    final Map.Entry<NicTO,Object> entry : nicToNetwork.entrySet()) {
      if (entry.getValue() instanceof Network) {
        final Network network=(Network)entry.getValue();
        final VIF vif=getVifByMac(connection,vmToMigrate,entry.getKey().getMac());
        vifMap.put(vif,network);
      }
 else {
        throw new CloudRuntimeException("The object " + entry.getValue() + " passed is not of type Network.");
      }
    }
    task=vmToMigrate.assertCanMigrateAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=_migratewait * 1000L;
      waitForTask(connection,task,1000,timeout);
      checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error("Error while checking if vm " + vmName + " can be migrated.",e);
      throw new CloudRuntimeException("Error while checking if vm " + vmName + " can be migrated.",e);
    }
    task=vmToMigrate.migrateSendAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=_migratewait * 1000L;
      waitForTask(connection,task,1000,timeout);
      checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error("Error while migrating vm " + vmName,e);
      throw new CloudRuntimeException("Error while migrating vm " + vmName,e);
    }
    return new MigrateWithStorageSendAnswer(cmd,volumeToSet);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error("Migration of vm " + vmName + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(cmd,e);
  }
catch (  final Exception e) {
    s_logger.error("Migration of vm " + vmName + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(cmd,e);
  }
 finally {
    if (task != null) {
      try {
        task.destroy(connection);
      }
 catch (      final Exception e) {
        s_logger.debug("Unable to destroy task " + task.toString() + " on host "+ _host.getUuid()+ " due to "+ e.toString());
      }
    }
  }
}
