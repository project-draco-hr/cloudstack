{
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  int wait=cmd.getWait();
  TemplateObjectTO template=(TemplateObjectTO)destData;
  DataStoreTO imageStore=template.getDataStore();
  VolumeObjectTO volume=(VolumeObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer("unsupported protocol");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  KVMStoragePool secondaryStorage=null;
  KVMStoragePool primary=null;
  try {
    String templateFolder=template.getPath();
    secondaryStorage=storagePoolMgr.getStoragePoolByURI(nfsImageStore.getUrl());
    try {
      primary=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    }
 catch (    CloudRuntimeException e) {
      if (e.getMessage().contains("not found")) {
        primary=storagePoolMgr.createStoragePool(primaryStore.getUuid(),primaryStore.getHost(),primaryStore.getPort(),primaryStore.getPath(),null,primaryStore.getPoolType());
      }
 else {
        return new CopyCmdAnswer(e.getMessage());
      }
    }
    KVMPhysicalDisk disk=primary.getPhysicalDisk(volume.getPath());
    String tmpltPath=secondaryStorage.getLocalPath() + File.separator + templateFolder;
    this.storageLayer.mkdirs(tmpltPath);
    String templateName=UUID.randomUUID().toString();
    if (primary.getType() != StoragePoolType.RBD) {
      Script command=new Script(_createTmplPath,wait * 1000,s_logger);
      command.add("-f",disk.getPath());
      command.add("-t",tmpltPath);
      command.add("-n",templateName + ".qcow2");
      String result=command.execute();
      if (result != null) {
        s_logger.debug("failed to create template: " + result);
        return new CopyCmdAnswer(result);
      }
    }
 else {
      s_logger.debug("Converting RBD disk " + disk.getPath() + " into template "+ templateName);
      QemuImgFile srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(),primary.getSourcePort(),primary.getAuthUserName(),primary.getAuthSecret(),disk.getPath()));
      srcFile.setFormat(PhysicalDiskFormat.RAW);
      QemuImgFile destFile=new QemuImgFile(tmpltPath + "/" + templateName+ ".qcow2");
      destFile.setFormat(PhysicalDiskFormat.QCOW2);
      QemuImg q=new QemuImg();
      try {
        q.convert(srcFile,destFile);
      }
 catch (      QemuImgException e) {
        s_logger.error("Failed to create new template while converting " + srcFile.getFileName() + " to "+ destFile.getFileName()+ " the error was: "+ e.getMessage());
      }
      File templateProp=new File(tmpltPath + "/template.properties");
      if (!templateProp.exists()) {
        templateProp.createNewFile();
      }
      String templateContent="filename=" + templateName + ".qcow2"+ System.getProperty("line.separator");
      DateFormat dateFormat=new SimpleDateFormat("MM_dd_yyyy");
      Date date=new Date();
      templateContent+="snapshot.name=" + dateFormat.format(date) + System.getProperty("line.separator");
      FileOutputStream templFo=new FileOutputStream(templateProp);
      templFo.write(templateContent.getBytes());
      templFo.flush();
      templFo.close();
    }
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,this.storageLayer);
    Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure("QCOW2 Processor",params);
    FormatInfo info=qcow2Processor.process(tmpltPath,null,templateName);
    TemplateLocation loc=new TemplateLocation(this.storageLayer,tmpltPath);
    loc.create(1,true,templateName);
    loc.addFormat(info);
    loc.save();
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(templateFolder + File.separator + templateName+ ".qcow2");
    newTemplate.setSize(info.virtualSize);
    newTemplate.setPhysicalSize(info.size);
    newTemplate.setFormat(ImageFormat.QCOW2);
    newTemplate.setName(templateName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Exception e) {
    s_logger.debug("Failed to create template from volume: " + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStorage != null) {
      secondaryStorage.delete();
    }
  }
}
