{
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  int wait=cmd.getWait();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)snapshot.getDataStore();
  SnapshotObjectTO destSnapshot=(SnapshotObjectTO)destData;
  DataStoreTO imageStore=destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer("unsupported protocol");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String secondaryStoragePoolUrl=nfsImageStore.getUrl();
  int index=snapshot.getPath().lastIndexOf("/");
  String snapshotName=snapshot.getPath().substring(index + 1);
  String volumePath=snapshot.getVolume().getPath();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  String vmName=snapshot.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  try {
    Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=destSnapshot.getPath();
    snapshotDestPath=ssPmountPath + File.separator + snapshotRelPath;
    KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk snapshotDisk=primaryPool.getPhysicalDisk(volumePath);
    Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
    command.add("-b",snapshotDisk.getPath());
    command.add("-n",snapshotName);
    command.add("-p",snapshotDestPath);
    command.add("-t",snapshotName);
    String result=command.execute();
    if (result != null) {
      s_logger.debug("Failed to backup snaptshot: " + result);
      return new CopyCmdAnswer(result);
    }
    DomainInfo.DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=this.resource.getDomain(conn,vmName);
        state=vm.getInfo().state;
      }
 catch (      LibvirtException e) {
        s_logger.trace("Ignoring libvirt error.",e);
      }
    }
    KVMStoragePool primaryStorage=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      snap.delete(0);
      vm=this.resource.getDomain(conn,vmName);
      state=vm.getInfo().state;
      if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
      command.add("-d",snapshotDisk.getPath());
      command.add("-n",snapshotName);
      result=command.execute();
      if (result != null) {
        s_logger.debug("Failed to backup snapshot: " + result);
        return new CopyCmdAnswer("Failed to backup snapshot: " + result);
      }
    }
    SnapshotObjectTO newSnapshot=new SnapshotObjectTO();
    newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);
    return new CopyCmdAnswer(newSnapshot);
  }
 catch (  LibvirtException e) {
    s_logger.debug("Failed to backup snapshot: " + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
catch (  CloudRuntimeException e) {
    s_logger.debug("Failed to backup snapshot: " + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      secondaryStoragePool.delete();
    }
  }
}
