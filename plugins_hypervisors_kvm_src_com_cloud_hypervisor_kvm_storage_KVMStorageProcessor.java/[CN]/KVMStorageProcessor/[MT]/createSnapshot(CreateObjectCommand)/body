{
  final SnapshotObjectTO snapshotTO=(SnapshotObjectTO)cmd.getData();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)snapshotTO.getDataStore();
  final VolumeObjectTO volume=snapshotTO.getVolume();
  final String snapshotName=UUID.randomUUID().toString();
  final String vmName=volume.getVmName();
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    DomainInfo.DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=resource.getDomain(conn,vmName);
        state=vm.getInfo().state;
      }
 catch (      final LibvirtException e) {
        s_logger.trace("Ignoring libvirt error.",e);
      }
    }
    final KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    final KVMPhysicalDisk disk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),volume.getPath());
    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {
      final String vmUuid=vm.getUUIDString();
      final Object[] args=new Object[]{snapshotName,vmUuid};
      final String snapshot=SnapshotXML.format(args);
      final long start=System.currentTimeMillis();
      vm.snapshotCreateXML(snapshot);
      final long total=(System.currentTimeMillis() - start) / 1000;
      s_logger.debug("snapshot takes " + total + " seconds to finish");
      vm=resource.getDomain(conn,vmName);
      state=vm.getInfo().state;
      if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      if (primaryPool.getType() == StoragePoolType.RBD) {
        try {
          final Rados r=new Rados(primaryPool.getAuthUserName());
          r.confSet("mon_host",primaryPool.getSourceHost() + ":" + primaryPool.getSourcePort());
          r.confSet("key",primaryPool.getAuthSecret());
          r.confSet("client_mount_timeout","30");
          r.connect();
          s_logger.debug("Succesfully connected to Ceph cluster at " + r.confGet("mon_host"));
          final IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
          final Rbd rbd=new Rbd(io);
          final RbdImage image=rbd.open(disk.getName());
          s_logger.debug("Attempting to create RBD snapshot " + disk.getName() + "@"+ snapshotName);
          image.snapCreate(snapshotName);
          rbd.close(image);
          r.ioCtxDestroy(io);
        }
 catch (        final Exception e) {
          s_logger.error("A RBD snapshot operation on " + disk.getName() + " failed. The error was: "+ e.getMessage());
        }
      }
 else {
        final Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
        command.add("-c",disk.getPath());
        command.add("-n",snapshotName);
        final String result=command.execute();
        if (result != null) {
          s_logger.debug("Failed to manage snapshot: " + result);
          return new CreateObjectAnswer("Failed to manage snapshot: " + result);
        }
      }
    }
    final SnapshotObjectTO newSnapshot=new SnapshotObjectTO();
    newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);
    return new CreateObjectAnswer(newSnapshot);
  }
 catch (  final LibvirtException e) {
    s_logger.debug("Failed to manage snapshot: ",e);
    return new CreateObjectAnswer("Failed to manage snapshot: " + e.toString());
  }
}
