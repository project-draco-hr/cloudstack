{
  final DataTO srcData=cmd.getSrcTO();
  final DataTO destData=cmd.getDestTO();
  final TemplateObjectTO template=(TemplateObjectTO)srcData;
  final DataStoreTO imageStore=template.getDataStore();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer("unsupported protocol");
  }
  final NfsTO nfsImageStore=(NfsTO)imageStore;
  final String tmplturl=nfsImageStore.getUrl() + File.separator + template.getPath();
  final int index=tmplturl.lastIndexOf("/");
  final String mountpoint=tmplturl.substring(0,index);
  String tmpltname=null;
  if (index < tmplturl.length() - 1) {
    tmpltname=tmplturl.substring(index + 1);
  }
  KVMPhysicalDisk tmplVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (tmpltname == null) {
      secondaryPool.refresh();
      final List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        return new PrimaryStorageDownloadAnswer("Failed to get volumes from pool: " + secondaryPool.getUuid());
      }
      for (      final KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith("qcow2")) {
          tmplVol=disk;
          break;
        }
      }
    }
 else {
      tmplVol=secondaryPool.getPhysicalDisk(tmpltname);
    }
    if (tmplVol == null) {
      return new PrimaryStorageDownloadAnswer("Failed to get template from pool: " + secondaryPool.getUuid());
    }
    s_logger.debug("Copying template to primary storage, template format is " + tmplVol.getFormat());
    final KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk primaryVol=null;
    if (destData instanceof VolumeObjectTO) {
      final VolumeObjectTO volume=(VolumeObjectTO)destData;
      if (volume.getSize() != null && volume.getSize() > tmplVol.getVirtualSize()) {
        s_logger.debug("Using configured size of " + volume.getSize());
        tmplVol.setSize(volume.getSize());
        tmplVol.setVirtualSize(volume.getSize());
      }
 else {
        s_logger.debug("Using template's size of " + tmplVol.getVirtualSize());
      }
      primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,volume.getUuid(),primaryPool,cmd.getWaitInMillSeconds());
    }
 else     if (destData instanceof TemplateObjectTO) {
      final TemplateObjectTO destTempl=(TemplateObjectTO)destData;
      primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,destTempl.getUuid(),primaryPool,cmd.getWaitInMillSeconds());
    }
 else {
      primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,UUID.randomUUID().toString(),primaryPool,cmd.getWaitInMillSeconds());
    }
    DataTO data=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      final TemplateObjectTO newTemplate=new TemplateObjectTO();
      newTemplate.setPath(primaryVol.getName());
      newTemplate.setSize(primaryVol.getSize());
      if (primaryPool.getType() == StoragePoolType.RBD) {
        newTemplate.setFormat(ImageFormat.RAW);
      }
 else {
        newTemplate.setFormat(ImageFormat.QCOW2);
      }
      data=newTemplate;
    }
 else     if (destData.getObjectType() == DataObjectType.VOLUME) {
      final VolumeObjectTO volumeObjectTO=new VolumeObjectTO();
      volumeObjectTO.setPath(primaryVol.getName());
      volumeObjectTO.setSize(primaryVol.getSize());
      if (primaryVol.getFormat() == PhysicalDiskFormat.RAW) {
        volumeObjectTO.setFormat(ImageFormat.RAW);
      }
 else       if (primaryVol.getFormat() == PhysicalDiskFormat.QCOW2) {
        volumeObjectTO.setFormat(ImageFormat.QCOW2);
      }
      data=volumeObjectTO;
    }
    return new CopyCmdAnswer(data);
  }
 catch (  final CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    try {
      if (secondaryPool != null) {
        secondaryPool.delete();
      }
    }
 catch (    final Exception e) {
      s_logger.debug("Failed to clean up secondary storage",e);
    }
  }
}
