{
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  final KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      final LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      final String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug("RBD device on host is: " + device);
            attachingDisk.setPath(device);
          }
        }
      }
      for (      final DiskDef disk : disks) {
        final String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException("disk: " + attachingDisk.getPath() + " is not attached before");
      }
    }
 else {
      diskdef=new DiskDef();
      diskdef.setSerial(serial);
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug("RBD device on host is: " + device);
            diskdef.defBlockBasedDisk(device,devId,DiskDef.DiskBus.VIRTIO);
          }
 else {
            throw new InternalErrorException("Error while mapping disk " + attachingDisk.getPath() + " on host");
          }
        }
 else {
          diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.RBD,DiskDef.DiskFmtType.RAW);
        }
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        final String mountpoint=attachingPool.getLocalPath();
        final String path=attachingDisk.getPath();
        final String glusterVolume=attachingPool.getSourceDir().replace("/","");
        diskdef.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.GLUSTER,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0)) {
        diskdef.setBytesReadRate(bytesReadRate);
      }
      if ((bytesWriteRate != null) && (bytesWriteRate > 0)) {
        diskdef.setBytesWriteRate(bytesWriteRate);
      }
      if ((iopsReadRate != null) && (iopsReadRate > 0)) {
        diskdef.setIopsReadRate(iopsReadRate);
      }
      if ((iopsWriteRate != null) && (iopsWriteRate > 0)) {
        diskdef.setIopsWriteRate(iopsWriteRate);
      }
    }
    final String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}
