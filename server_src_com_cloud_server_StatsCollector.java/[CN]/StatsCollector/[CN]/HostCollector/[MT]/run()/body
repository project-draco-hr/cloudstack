{
  try {
    s_logger.debug("HostStatsCollector is running...");
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("resourceState",SearchCriteria.Op.NIN,ResourceState.Maintenance,ResourceState.PrepareForMaintenance,ResourceState.ErrorInMaintenance);
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.Storage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.ConsoleProxy.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.SecondaryStorage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.LocalSecondaryStorage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.TrafficMonitor.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.SecondaryStorageVM.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.ExternalFirewall.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.ExternalLoadBalancer.toString());
    ConcurrentHashMap<Long,HostStats> hostStats=new ConcurrentHashMap<Long,HostStats>();
    List<HostVO> hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      HostStatsEntry stats=(HostStatsEntry)_resourceMgr.getHostStatistics(host.getId());
      if (stats != null) {
        hostStats.put(host.getId(),stats);
      }
 else {
        s_logger.warn("Received invalid host stats for host: " + host.getId());
      }
    }
    _hostStats=hostStats;
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve host stats",t);
  }
}
