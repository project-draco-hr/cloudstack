{
  try {
    logger.debug("VmStatsCollector is running...");
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("resourceState",SearchCriteria.Op.NIN,ResourceState.Maintenance,ResourceState.PrepareForMaintenance,ResourceState.ErrorInMaintenance);
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.Storage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.ConsoleProxy.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.SecondaryStorage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.LocalSecondaryStorage.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.TrafficMonitor.toString());
    sc.addAnd("type",SearchCriteria.Op.NEQ,Host.Type.SecondaryStorageVM.toString());
    List<HostVO> hosts=_hostDao.search(sc,null);
    HashMap metrics=new HashMap<String,Integer>();
    for (    HostVO host : hosts) {
      List<UserVmVO> vms=_userVmDao.listRunningByHostId(host.getId());
      List<Long> vmIds=new ArrayList<Long>();
      for (      UserVmVO vm : vms) {
        vmIds.add(vm.getId());
      }
      try {
        HashMap<Long,VmStatsEntry> vmStatsById=_userVmMgr.getVirtualMachineStatistics(host.getId(),host.getName(),vmIds);
        if (vmStatsById != null) {
          VmStatsEntry statsInMemory=null;
          Set<Long> vmIdSet=vmStatsById.keySet();
          for (          Long vmId : vmIdSet) {
            VmStatsEntry statsForCurrentIteration=vmStatsById.get(vmId);
            statsInMemory=(VmStatsEntry)_VmStats.get(vmId);
            if (statsInMemory == null) {
              _VmStats.put(vmId,statsForCurrentIteration);
            }
 else {
              statsInMemory.setCPUUtilization(statsForCurrentIteration.getCPUUtilization());
              statsInMemory.setNumCPUs(statsForCurrentIteration.getNumCPUs());
              statsInMemory.setNetworkReadKBs(statsInMemory.getNetworkReadKBs() + statsForCurrentIteration.getNetworkReadKBs());
              statsInMemory.setNetworkWriteKBs(statsInMemory.getNetworkWriteKBs() + statsForCurrentIteration.getNetworkWriteKBs());
              statsInMemory.setDiskWriteKBs(statsInMemory.getDiskWriteKBs() + statsForCurrentIteration.getDiskWriteKBs());
              statsInMemory.setDiskReadIOs(statsInMemory.getDiskReadIOs() + statsForCurrentIteration.getDiskReadIOs());
              statsInMemory.setDiskWriteIOs(statsInMemory.getDiskWriteIOs() + statsForCurrentIteration.getDiskWriteIOs());
              statsInMemory.setDiskReadKBs(statsInMemory.getDiskReadKBs() + statsForCurrentIteration.getDiskReadKBs());
              _VmStats.put(vmId,statsInMemory);
            }
            if (externalStatsEnabled) {
              VMInstanceVO vmVO=_vmInstance.findById(vmId);
              String vmName=vmVO.getUuid();
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".cpu.num",statsForCurrentIteration.getNumCPUs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".cpu.utilization",statsForCurrentIteration.getCPUUtilization());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".network.read_kbs",statsForCurrentIteration.getNetworkReadKBs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".network.write_kbs",statsForCurrentIteration.getNetworkWriteKBs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".disk.write_kbs",statsForCurrentIteration.getDiskWriteKBs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".disk.read_kbs",statsForCurrentIteration.getDiskReadKBs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".disk.write_iops",statsForCurrentIteration.getDiskWriteIOs());
              metrics.put(externalStatsPrefix + "cloudstack.stats.instances." + vmName+ ".disk.read_iops",statsForCurrentIteration.getDiskReadIOs());
            }
          }
          if (!metrics.isEmpty()) {
            if (externalStatsType != null && externalStatsType == externalStatsProtocol.GRAPHITE) {
              if (externalStatsPort == -1) {
                externalStatsPort=2003;
              }
              logger.debug("Sending VmStats of host " + host.getId() + " to Graphite host "+ externalStatsHost+ ":"+ externalStatsPort);
              try {
                GraphiteClient g=new GraphiteClient(externalStatsHost,externalStatsPort);
                g.sendMetrics(metrics);
              }
 catch (              GraphiteException e) {
                logger.debug("Failed sending VmStats to Graphite host " + externalStatsHost + ":"+ externalStatsPort+ ": "+ e.getMessage());
              }
              metrics.clear();
            }
          }
        }
      }
 catch (      Exception e) {
        logger.debug("Failed to get VM stats for host with ID: " + host.getId());
        continue;
      }
    }
  }
 catch (  Throwable t) {
    logger.error("Error trying to retrieve VM stats",t);
  }
}
