{
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StorageCollector is running...");
    }
    List<DataStore> stores=_dataStoreMgr.listImageStores();
    ConcurrentHashMap<Long,StorageStats> storageStats=new ConcurrentHashMap<Long,StorageStats>();
    for (    DataStore store : stores) {
      if (store.getUri() == null) {
        continue;
      }
      GetStorageStatsCommand command=new GetStorageStatsCommand(store.getTO());
      EndPoint ssAhost=_epSelector.select(store);
      if (ssAhost == null) {
        s_logger.debug("There is no secondary storage VM for secondary storage host " + store.getName());
        continue;
      }
      long storeId=store.getId();
      Answer answer=ssAhost.sendMessage(command);
      if (answer != null && answer.getResult()) {
        storageStats.put(storeId,(StorageStats)answer);
        s_logger.trace("HostId: " + storeId + " Used: "+ ((StorageStats)answer).getByteUsed()+ " Total Available: "+ ((StorageStats)answer).getCapacityBytes());
      }
    }
    _storageStats=storageStats;
    ConcurrentHashMap<Long,StorageStats> storagePoolStats=new ConcurrentHashMap<Long,StorageStats>();
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      List<Long> hostIds=_storageManager.getUpHostsInPool(pool.getId());
      if (hostIds == null || hostIds.isEmpty())       continue;
      GetStorageStatsCommand command=new GetStorageStatsCommand(pool.getUuid(),pool.getPoolType(),pool.getPath());
      long poolId=pool.getId();
      try {
        Answer answer=_storageManager.sendToPool(pool,command);
        if (answer != null && answer.getResult()) {
          storagePoolStats.put(pool.getId(),(StorageStats)answer);
          if (_storagePoolStats.get(poolId) != null && _storagePoolStats.get(poolId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()) {
            pool.setCapacityBytes(((StorageStats)answer).getCapacityBytes());
            _storagePoolDao.update(pool.getId(),pool);
          }
        }
      }
 catch (      StorageUnavailableException e) {
        s_logger.info("Unable to reach " + pool,e);
      }
catch (      Exception e) {
        s_logger.warn("Unable to get stats for " + pool,e);
      }
    }
    _storagePoolStats=storagePoolStats;
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve storage stats",t);
  }
}
