{
  try {
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    ConcurrentHashMap<Long,StorageStats> storageStats=new ConcurrentHashMap<Long,StorageStats>();
    List<HostVO> hosts=_hostDao.search(sc,null);
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("type",SearchCriteria.Op.EQ,Host.Type.SecondaryStorage.toString());
    hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getGuid());
      long hostId=host.getId();
      Answer answer=_agentMgr.easySend(hostId,command);
      if (answer != null && answer.getResult()) {
        storageStats.put(hostId,(StorageStats)answer);
        if (_storageStats.get(hostId) != null && _storageStats.get(hostId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()) {
          host.setTotalSize(((StorageStats)answer).getCapacityBytes());
          _hostDao.update(hostId,host);
        }
      }
    }
    _storageStats=storageStats;
    ConcurrentHashMap<Long,StorageStats> storagePoolStats=new ConcurrentHashMap<Long,StorageStats>();
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(pool.getUuid(),pool.getPoolType(),pool.getPath());
      long poolId=pool.getId();
      Answer answer=_storageManager.sendToPool(pool,command);
      if (answer != null && answer.getResult()) {
        storagePoolStats.put(pool.getId(),(StorageStats)answer);
        if (_storagePoolStats.get(poolId) != null && _storagePoolStats.get(poolId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()) {
          pool.setCapacityBytes(((StorageStats)answer).getCapacityBytes());
          _storagePoolDao.update(pool.getId(),pool);
        }
      }
    }
    _storagePoolStats=storagePoolStats;
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve storage stats",t);
  }
}
