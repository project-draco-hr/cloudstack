{
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StorageCollector is running...");
    }
    List<HostVO> hosts=_hostDao.listSecondaryStorageHosts();
    ConcurrentHashMap<Long,StorageStats> storageStats=new ConcurrentHashMap<Long,StorageStats>();
    for (    HostVO host : hosts) {
      if (host.getStorageUrl() == null) {
        continue;
      }
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getStorageUrl());
      HostVO ssAhost=_agentMgr.getSSAgent(host);
      if (ssAhost == null) {
        s_logger.warn("There is no secondary storage VM for secondary storage host " + host.getName());
        continue;
      }
      long hostId=host.getId();
      Answer answer=_agentMgr.easySend(ssAhost.getId(),command);
      if (answer != null && answer.getResult()) {
        storageStats.put(hostId,(StorageStats)answer);
        s_logger.trace("HostId: " + hostId + " Used: "+ ((StorageStats)answer).getByteUsed()+ " Total Available: "+ ((StorageStats)answer).getCapacityBytes());
        if (_storageStats.get(hostId) != null && _storageStats.get(hostId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()) {
          host.setTotalSize(((StorageStats)answer).getCapacityBytes());
          _hostDao.update(hostId,host);
        }
      }
    }
    _storageStats=storageStats;
    ConcurrentHashMap<Long,StorageStats> storagePoolStats=new ConcurrentHashMap<Long,StorageStats>();
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(pool.getUuid(),pool.getPoolType(),pool.getPath());
      long poolId=pool.getId();
      try {
        Answer answer=_storageManager.sendToPool(pool,command);
        if (answer != null && answer.getResult()) {
          storagePoolStats.put(pool.getId(),(StorageStats)answer);
          if (_storagePoolStats.get(poolId) != null && _storagePoolStats.get(poolId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()) {
            pool.setCapacityBytes(((StorageStats)answer).getCapacityBytes());
            _storagePoolDao.update(pool.getId(),pool);
          }
        }
      }
 catch (      StorageUnavailableException e) {
        s_logger.info("Unable to reach " + pool);
      }
catch (      Exception e) {
        s_logger.warn("Unable to get stats for " + pool);
      }
    }
    _storagePoolStats=storagePoolStats;
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve storage stats",t);
  }
}
