{
  try {
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("type",SearchCriteria.Op.EQ,Host.Type.Storage.toString());
    ConcurrentHashMap<Long,StorageStats> storageStats=new ConcurrentHashMap<Long,StorageStats>();
    List<HostVO> hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getGuid());
      Answer answer=_agentMgr.easySend(host.getId(),command);
      if (answer != null && answer.getResult()) {
        storageStats.put(host.getId(),(StorageStats)answer);
      }
    }
    sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("type",SearchCriteria.Op.EQ,Host.Type.SecondaryStorage.toString());
    hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getGuid());
      Answer answer=_agentMgr.easySend(host.getId(),command);
      if (answer != null && answer.getResult()) {
        storageStats.put(host.getId(),(StorageStats)answer);
      }
    }
    _storageStats=storageStats;
    ConcurrentHashMap<Long,StorageStats> storagePoolStats=new ConcurrentHashMap<Long,StorageStats>();
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(pool.getUuid(),pool.getPoolType(),pool.getPath());
      Answer answer=_storageManager.sendToPool(pool,command);
      if (answer != null && answer.getResult()) {
        storagePoolStats.put(pool.getId(),(StorageStats)answer);
      }
    }
    _storagePoolStats=storagePoolStats;
    List<CapacityVO> newCapacities=new ArrayList<CapacityVO>();
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("recalculating system storage capacity");
      }
      txn.start();
      for (      Long hostId : storageStats.keySet()) {
        StorageStats stats=storageStats.get(hostId);
        short capacityType=-1;
        HostVO host=_hostDao.findById(hostId);
        host.setTotalSize(stats.getCapacityBytes());
        _hostDao.update(host.getId(),host);
        SearchCriteria<CapacityVO> capacitySC=_capacityDao.createSearchCriteria();
        capacitySC.addAnd("hostOrPoolId",SearchCriteria.Op.EQ,hostId);
        capacitySC.addAnd("dataCenterId",SearchCriteria.Op.EQ,host.getDataCenterId());
        if (Host.Type.SecondaryStorage.equals(host.getType())) {
          capacityType=CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE;
        }
 else         if (Host.Type.Storage.equals(host.getType())) {
          capacityType=CapacityVO.CAPACITY_TYPE_STORAGE;
        }
        if (-1 != capacityType) {
          capacitySC.addAnd("capacityType",SearchCriteria.Op.EQ,capacityType);
          List<CapacityVO> capacities=_capacityDao.search(capacitySC,null);
          if (capacities.size() == 0) {
            CapacityVO capacity=new CapacityVO(host.getId(),host.getDataCenterId(),host.getPodId(),stats.getByteUsed(),stats.getCapacityBytes(),capacityType);
            _capacityDao.persist(capacity);
          }
 else {
            CapacityVO capacity=capacities.get(0);
            capacity.setUsedCapacity(stats.getByteUsed());
            capacity.setTotalCapacity(stats.getCapacityBytes());
            _capacityDao.update(capacity.getId(),capacity);
          }
        }
      }
      txn.commit();
    }
 catch (    Exception ex) {
      txn.rollback();
      s_logger.error("Unable to start transaction for storage capacity update");
    }
 finally {
      txn.close();
    }
    for (    Long poolId : storagePoolStats.keySet()) {
      StorageStats stats=storagePoolStats.get(poolId);
      StoragePoolVO pool=_storagePoolDao.findById(poolId);
      if (pool == null) {
        continue;
      }
      pool.setCapacityBytes(stats.getCapacityBytes());
      long available=stats.getCapacityBytes() - stats.getByteUsed();
      if (available < 0) {
        available=0;
      }
      pool.setAvailableBytes(available);
      _storagePoolDao.update(pool.getId(),pool);
      _storageManager.createCapacityEntry(pool,0L);
    }
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve storage stats",t);
  }
}
