{
  try {
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("type",SearchCriteria.Op.EQ,Host.Type.Storage.toString());
    ConcurrentHashMap<Long,StorageStats> storageStats=new ConcurrentHashMap<Long,StorageStats>();
    List<HostVO> hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getGuid());
      Answer answer=_agentMgr.easySend(host.getId(),command);
      if (answer != null && answer.getResult()) {
        storageStats.put(host.getId(),(StorageStats)answer);
      }
    }
    sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    sc.addAnd("type",SearchCriteria.Op.EQ,Host.Type.SecondaryStorage.toString());
    hosts=_hostDao.search(sc,null);
    for (    HostVO host : hosts) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(host.getGuid());
      Answer answer=_agentMgr.easySend(host.getId(),command);
      if (answer != null && answer.getResult()) {
        storageStats.put(host.getId(),(StorageStats)answer);
      }
    }
    _storageStats=storageStats;
    ConcurrentHashMap<Long,StorageStats> storagePoolStats=new ConcurrentHashMap<Long,StorageStats>();
    List<StoragePoolVO> storagePools=_storagePoolDao.listAllActive();
    for (    StoragePoolVO pool : storagePools) {
      GetStorageStatsCommand command=new GetStorageStatsCommand(pool.getUuid(),pool.getPoolType(),pool.getPath());
      Answer answer=_storageManager.sendToPool(pool,command);
      if (answer != null && answer.getResult()) {
        storagePoolStats.put(pool.getId(),(StorageStats)answer);
      }
    }
    _storagePoolStats=storagePoolStats;
    if (m_capacityCheckLock.lock(5)) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("recalculating system storage capacity");
      }
      try {
        _capacityDao.clearStorageCapacities();
        for (        Long hostId : storageStats.keySet()) {
          StorageStats stats=storageStats.get(hostId);
          HostVO host=_hostDao.findById(hostId);
          host.setTotalSize(stats.getCapacityBytes());
          _hostDao.update(host.getId(),host);
          if (Host.Type.SecondaryStorage.equals(host.getType())) {
            CapacityVO capacity=new CapacityVO(host.getId(),host.getDataCenterId(),host.getPodId(),stats.getByteUsed(),stats.getCapacityBytes(),CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE);
            _capacityDao.persist(capacity);
          }
 else           if (Host.Type.Storage.equals(host.getType())) {
            CapacityVO capacity=new CapacityVO(host.getId(),host.getDataCenterId(),host.getPodId(),stats.getByteUsed(),stats.getCapacityBytes(),CapacityVO.CAPACITY_TYPE_STORAGE);
            _capacityDao.persist(capacity);
          }
        }
        for (        Long poolId : storagePoolStats.keySet()) {
          StorageStats stats=storagePoolStats.get(poolId);
          StoragePoolVO pool=_storagePoolDao.findById(poolId);
          if (pool == null) {
            continue;
          }
          pool.setCapacityBytes(stats.getCapacityBytes());
          long available=stats.getCapacityBytes() - stats.getByteUsed();
          if (available < 0) {
            available=0;
          }
          pool.setAvailableBytes(available);
          _storagePoolDao.update(pool.getId(),pool);
          CapacityVO capacity=new CapacityVO(poolId,pool.getDataCenterId(),pool.getPodId(),stats.getByteUsed(),stats.getCapacityBytes(),CapacityVO.CAPACITY_TYPE_STORAGE);
          _capacityDao.persist(capacity);
        }
      }
  finally {
        m_capacityCheckLock.unlock();
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("done recalculating system storage capacity");
      }
    }
 else {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("not recalculating system storage capacity, unable to lock capacity table");
      }
    }
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to retrieve storage stats",t);
  }
}
