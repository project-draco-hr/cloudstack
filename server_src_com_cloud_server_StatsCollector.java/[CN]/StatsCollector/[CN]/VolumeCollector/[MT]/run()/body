{
  try {
    List<VolumeVO> volumes=_volsDao.listAll();
    Map<Long,List<VolumeCommand>> commandsByPool=new HashMap<Long,List<VolumeCommand>>();
    for (    VolumeVO volume : volumes) {
      List<VolumeCommand> commands=commandsByPool.get(volume.getPoolId());
      if (commands == null) {
        commands=new ArrayList<VolumeCommand>();
        commandsByPool.put(volume.getPoolId(),commands);
      }
      VolumeCommand vCommand=new VolumeCommand();
      vCommand.volumeId=volume.getId();
      vCommand.command=new GetFileStatsCommand(volume);
      commands.add(vCommand);
    }
    ConcurrentHashMap<Long,VolumeStats> volumeStats=new ConcurrentHashMap<Long,VolumeStats>();
    for (Iterator<Long> iter=commandsByPool.keySet().iterator(); iter.hasNext(); ) {
      Long poolId=iter.next();
      List<VolumeCommand> commandsList=commandsByPool.get(poolId);
      long[] volumeIdArray=new long[commandsList.size()];
      Commands commands=new Commands(OnError.Continue);
      for (int i=0; i < commandsList.size(); i++) {
        VolumeCommand vCommand=commandsList.get(i);
        volumeIdArray[i]=vCommand.volumeId;
        commands.addCommand(vCommand.command);
      }
      List<StoragePoolHostVO> poolhosts=_storagePoolHostDao.listByPoolId(poolId);
      for (      StoragePoolHostVO poolhost : poolhosts) {
        Answer[] answers=_agentMgr.send(poolhost.getHostId(),commands);
        if (answers != null) {
          long totalBytes=0L;
          for (int i=0; i < answers.length; i++) {
            if (answers[i].getResult()) {
              VolumeStats vStats=(VolumeStats)answers[i];
              volumeStats.put(volumeIdArray[i],vStats);
              totalBytes+=vStats.getBytesUsed();
            }
          }
          break;
        }
      }
    }
    _volumeStats=volumeStats;
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(e.getMessage());
  }
catch (  Throwable t) {
    s_logger.error("Error trying to retrieve volume stats",t);
  }
}
