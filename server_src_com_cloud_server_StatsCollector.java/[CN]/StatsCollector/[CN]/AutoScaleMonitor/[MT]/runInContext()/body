{
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("AutoScaling Monitor is running...");
    }
    List<AutoScaleVmGroupVO> asGroups=_asGroupDao.listAll();
    for (    AutoScaleVmGroupVO asGroup : asGroups) {
      if ((asGroup.getState().equals("enabled")) && (is_native(asGroup.getId()))) {
        Integer currentVM=_asGroupVmDao.countByGroup(asGroup.getId());
        if (currentVM < asGroup.getMinMembers()) {
          _asManager.doScaleUp(asGroup.getId(),asGroup.getMinMembers() - currentVM);
          continue;
        }
        long now=(new Date()).getTime();
        if (asGroup.getLastInterval() != null)         if ((now - asGroup.getLastInterval().getTime()) < (long)asGroup.getInterval()) {
          continue;
        }
        asGroup.setLastInterval(new Date());
        _asGroupDao.persist(asGroup);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("[AutoScale] Collecting RRDs data...");
        }
        Map<String,String> params=new HashMap<String,String>();
        List<AutoScaleVmGroupVmMapVO> asGroupVmVOs=_asGroupVmDao.listByGroup(asGroup.getId());
        params.put("total_vm",String.valueOf(asGroupVmVOs.size()));
        for (int i=0; i < asGroupVmVOs.size(); i++) {
          long vmId=asGroupVmVOs.get(i).getInstanceId();
          VMInstanceVO vmVO=_vmInstance.findById(vmId);
          params.put("vmname" + String.valueOf(i + 1),vmVO.getInstanceName());
          params.put("vmid" + String.valueOf(i + 1),String.valueOf(vmVO.getId()));
        }
        long vmId=asGroupVmVOs.get(0).getInstanceId();
        VMInstanceVO vmVO=_vmInstance.findById(vmId);
        Long receiveHost=vmVO.getHostId();
        List<Pair<String,Integer>> lstPair=getPairofCounternameAndDuration(asGroup.getId());
        int total_counter=0;
        String[] lstCounter=new String[lstPair.size()];
        for (int i=0; i < lstPair.size(); i++) {
          Pair<String,Integer> pair=lstPair.get(i);
          String strCounterNames=pair.first();
          Integer duration=pair.second();
          lstCounter[i]=strCounterNames.split(",")[0];
          total_counter++;
          params.put("duration" + String.valueOf(total_counter),duration.toString());
          params.put("counter" + String.valueOf(total_counter),lstCounter[i]);
          params.put("con" + String.valueOf(total_counter),strCounterNames.split(",")[1]);
        }
        params.put("total_counter",String.valueOf(total_counter));
        PerformanceMonitorCommand perfMon=new PerformanceMonitorCommand(params,20);
        try {
          Answer answer=_agentMgr.send(receiveHost,perfMon);
          if (answer == null || !answer.getResult()) {
            s_logger.debug("Failed to send data to node !");
          }
 else {
            String result=answer.getDetails();
            s_logger.debug("[AutoScale] RRDs collection answer: " + result);
            HashMap<Long,Double> avgCounter=new HashMap<Long,Double>();
            String[] counterElements=result.split(",");
            if ((counterElements != null) && (counterElements.length > 0)) {
              for (              String string : counterElements) {
                try {
                  String[] counterVals=string.split(":");
                  String[] counter_vm=counterVals[0].split("\\.");
                  Long counterId=Long.parseLong(counter_vm[1]);
                  Long conditionId=Long.parseLong(params.get("con" + counter_vm[1]));
                  Double coVal=Double.parseDouble(counterVals[1]);
                  if (avgCounter.get(counterId) == null) {
                    avgCounter.put(counterId,new Double(0));
                  }
                  String counterName=getCounternamebyCondition(conditionId.longValue());
                  if (counterName == Counter.Source.memory.toString()) {
                    Long profileId=asGroup.getProfileId();
                    AutoScaleVmProfileVO profileVo=_asProfileDao.findById(profileId);
                    ServiceOfferingVO serviceOff=_serviceOfferingDao.findById(profileVo.getServiceOfferingId());
                    int maxRAM=serviceOff.getRamSize();
                    coVal=coVal / maxRAM;
                  }
 else {
                    coVal=coVal * 100;
                  }
                  avgCounter.put(counterId,avgCounter.get(counterId) + coVal);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
              String scaleAction=getAutoscaleAction(avgCounter,asGroup.getId(),currentVM,params);
              if (scaleAction != null) {
                s_logger.debug("[AutoScale] Doing scale action: " + scaleAction + " for group "+ asGroup.getId());
                if (scaleAction.equals("scaleup")) {
                  _asManager.doScaleUp(asGroup.getId(),1);
                }
 else {
                  _asManager.doScaleDown(asGroup.getId());
                }
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  Throwable t) {
    s_logger.error("Error trying to monitor autoscaling",t);
  }
}
