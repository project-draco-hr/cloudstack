{
  ComponentContext.initComponentsLifeCycle();
  Mockito.when(_lbDao.findById(1L)).thenReturn(new ApplicationLoadBalancerRuleVO());
  Mockito.when(_lbDao.findById(2L)).thenReturn(null);
  Mockito.when(_lbMgr.deleteLoadBalancerRule(existingLbId,true)).thenReturn(true);
  Mockito.when(_lbMgr.deleteLoadBalancerRule(nonExistingLbId,true)).thenReturn(false);
  NetworkVO guestNetwork=new NetworkVO(TrafficType.Guest,null,null,1,null,1,1L);
  setId(guestNetwork,validGuestNetworkId);
  guestNetwork.setCidr("10.1.1.1/24");
  NetworkVO publicNetwork=new NetworkVO(TrafficType.Public,null,null,1,null,1,1L);
  Mockito.when(_ntwkModel.getNetwork(validGuestNetworkId)).thenReturn(guestNetwork);
  Mockito.when(_ntwkModel.getNetwork(invalidGuestNetworkId)).thenReturn(null);
  Mockito.when(_ntwkModel.getNetwork(validPublicNetworkId)).thenReturn(publicNetwork);
  Mockito.when(_accountMgr.getAccount(validAccountId)).thenReturn(new AccountVO());
  Mockito.when(_accountMgr.getAccount(invalidAccountId)).thenReturn(null);
  Mockito.when(_ntwkModel.areServicesSupportedInNetwork(validGuestNetworkId,Service.Lb)).thenReturn(true);
  Mockito.when(_ntwkModel.areServicesSupportedInNetwork(invalidGuestNetworkId,Service.Lb)).thenReturn(false);
  ApplicationLoadBalancerRuleVO lbRule=new ApplicationLoadBalancerRuleVO("new","new",22,22,"roundrobin",validGuestNetworkId,validAccountId,1L,new Ip(validRequestedIp),validGuestNetworkId,Scheme.Internal);
  Mockito.when(_lbDao.persist(Mockito.any(ApplicationLoadBalancerRuleVO.class))).thenReturn(lbRule);
  Mockito.when(_lbMgr.validateLbRule(Mockito.any(LoadBalancingRule.class))).thenReturn(true);
  Mockito.when(_firewallDao.setStateToAdd(Mockito.any(FirewallRuleVO.class))).thenReturn(true);
  Mockito.when(_accountMgr.getSystemUser()).thenReturn(new UserVO(1));
  Mockito.when(_accountMgr.getSystemAccount()).thenReturn(new AccountVO(2));
  CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
  Mockito.when(_ntwkModel.areServicesSupportedInNetwork(Mockito.anyLong(),Mockito.any(Network.Service.class))).thenReturn(true);
  Map<Network.Capability,String> caps=new HashMap<Network.Capability,String>();
  caps.put(Capability.SupportedProtocols,NetUtils.TCP_PROTO);
  Mockito.when(_ntwkModel.getNetworkServiceCapabilities(Mockito.anyLong(),Mockito.any(Network.Service.class))).thenReturn(caps);
  Mockito.when(_lbDao.countBySourceIp(new Ip(validRequestedIp),validGuestNetworkId)).thenReturn(1L);
}
