@attr(tags=['advanced', 'basic', 'provisioning'])
def test_03_edit_template_details(self):
    '  \n        @Desc: Test to Edit Template name, displaytext, OSType\n        @steps:\n        Step1: Listing all the Templates for a user\n        Step2: Verifying that no Templates are listed\n        Step3: Creating a Templates\n        Step4: Listing all the Templates again for a user\n        Step5: Verifying that list size is 1\n        Step6: Verifying if the template is in ready state. \n                If yes the continuing \n                If not waiting and checking for template to be ready till timeout\n        Step7: Editing the template name\n        Step8: Verifying that Template name is edited\n        Step9: Editing the template displaytext\n        Step10: Verifying that Template displaytext is edited\n        Step11: Editing the template ostypeid\n        Step12: Verifying that Template ostypeid is edited\n        Step13: Editing the template name, displaytext\n        Step14: Verifying that Template name, displaytext are edited\n        Step15: Editing the template name, displaytext, ostypeid\n        Step16: Verifying that Template name, displaytext and ostypeid are edited\n        '
    list_templates_before = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    self.assertIsNone(list_templates_before, 'Templates listed for newly created User')
    self.services['template']['url'] = 'http://10.147.28.7/templates/ttylinux_pv.vhd'
    self.services['template']['format'] = 'VHD'
    self.services['template']['ostype'] = self.services['ostype']
    template_created = Template.register(self.userapiclient, self.services['template'], self.zone.id, hypervisor=self.hypervisor)
    self.assertIsNotNone(template_created, 'Template creation failed')
    self.cleanup.append(template_created)
    list_templates_after = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    status = validateList(list_templates_after)
    self.assertEquals(PASS, status[0], 'Templates creation failed')
    self.assertEquals(1, len(list_templates_after), 'Failed to create a Template')
    template_ready = False
    count = 0
    while (template_ready is False):
        list_template = Template.list(self.userapiclient, id=template_created.id, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
        status = validateList(list_template)
        self.assertEquals(PASS, status[0], 'Failed to list Templates by Id')
        if (list_template[0].isready is True):
            template_ready = True
        elif (str(list_template[0].status) == 'Error'):
            self.fail('Created Template is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before Template came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    edited_template = Template.update(template_created, self.userapiclient, name='NewTemplateName')
    self.assertIsNotNone(edited_template, 'Editing Template failed')
    expected_dict = {'id': template_created.id, 'name': 'NewTemplateName', 'displaytest': template_created.displaytext, 'account': template_created.account, 'domainid': template_created.domainid, 'format': template_created.format, 'ostypeid': template_created.ostypeid, 'templatetype': template_created.templatetype, }
    actual_dict = {'id': edited_template.id, 'name': edited_template.name, 'displaytest': edited_template.displaytext, 'account': edited_template.account, 'domainid': edited_template.domainid, 'format': edited_template.format, 'ostypeid': edited_template.ostypeid, 'templatetype': edited_template.templatetype, }
    edit_template_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_template_status, 'Edited Template details are not as expected')
    edited_template = Template.update(template_created, self.userapiclient, displaytext='TemplateDisplaytext')
    self.assertIsNotNone(edited_template, 'Editing Template failed')
    expected_dict = {'id': template_created.id, 'name': 'NewTemplateName', 'displaytest': 'TemplateDisplaytext', 'account': template_created.account, 'domainid': template_created.domainid, 'format': template_created.format, 'ostypeid': template_created.ostypeid, 'templatetype': template_created.templatetype, }
    actual_dict = {'id': edited_template.id, 'name': edited_template.name, 'displaytest': edited_template.displaytext, 'account': edited_template.account, 'domainid': edited_template.domainid, 'format': edited_template.format, 'ostypeid': edited_template.ostypeid, 'templatetype': edited_template.templatetype, }
    edit_template_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_template_status, 'Edited Template details are not as expected')
    ostype_list = list_os_types(self.userapiclient)
    status = validateList(ostype_list)
    self.assertEquals(PASS, status[0], 'Failed to list OS Types')
    for i in range(0, len(ostype_list)):
        if (ostype_list[i].id != template_created.ostypeid):
            newostypeid = ostype_list[i].id
            break
    edited_template = Template.update(template_created, self.userapiclient, ostypeid=newostypeid)
    self.assertIsNotNone(edited_template, 'Editing Template failed')
    expected_dict = {'id': template_created.id, 'name': 'NewTemplateName', 'displaytest': 'TemplateDisplaytext', 'account': template_created.account, 'domainid': template_created.domainid, 'format': template_created.format, 'ostypeid': newostypeid, 'templatetype': template_created.templatetype, }
    actual_dict = {'id': edited_template.id, 'name': edited_template.name, 'displaytest': edited_template.displaytext, 'account': edited_template.account, 'domainid': edited_template.domainid, 'format': edited_template.format, 'ostypeid': edited_template.ostypeid, 'templatetype': edited_template.templatetype, }
    edit_template_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_template_status, 'Edited Template details are not as expected')
    edited_template = Template.update(template_created, self.userapiclient, name=template_created.name, displaytext=template_created.displaytext)
    self.assertIsNotNone(edited_template, 'Editing Template failed')
    expected_dict = {'id': template_created.id, 'name': template_created.name, 'displaytest': template_created.displaytext, 'account': template_created.account, 'domainid': template_created.domainid, 'format': template_created.format, 'ostypeid': newostypeid, 'templatetype': template_created.templatetype, }
    actual_dict = {'id': edited_template.id, 'name': edited_template.name, 'displaytest': edited_template.displaytext, 'account': edited_template.account, 'domainid': edited_template.domainid, 'format': edited_template.format, 'ostypeid': edited_template.ostypeid, 'templatetype': edited_template.templatetype, }
    edit_template_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_template_status, 'Edited Template details are not as expected')
    edited_template = Template.update(template_created, self.userapiclient, name='NewTemplateName', displaytext='TemplateDisplaytext', ostypeid=template_created.ostypeid)
    self.assertIsNotNone(edited_template, 'Editing Template failed')
    expected_dict = {'id': template_created.id, 'name': 'NewTemplateName', 'displaytest': 'TemplateDisplaytext', 'account': template_created.account, 'domainid': template_created.domainid, 'format': template_created.format, 'ostypeid': template_created.ostypeid, 'templatetype': template_created.templatetype, }
    actual_dict = {'id': edited_template.id, 'name': edited_template.name, 'displaytest': edited_template.displaytext, 'account': edited_template.account, 'domainid': edited_template.domainid, 'format': edited_template.format, 'ostypeid': edited_template.ostypeid, 'templatetype': edited_template.templatetype, }
    edit_template_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_template_status, 'Edited Template details are not as expected')
    del self.services['template']['url']
    del self.services['template']['format']
    del self.services['template']['ostype']
    return
