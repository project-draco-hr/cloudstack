@attr(tags=['advanced', 'basic', 'selfservice'])
def test_07_list_vm_by_name_state(self):
    "  \n        @Desc: Test List VM's by Name and State\n        @Steps:\n        Step1: Listing all the VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a VM\n        Step4: Listing all the VMs for a user again\n        Step5: Verifying that list size is increased by 1\n        Step6: Listing the VM by specifying name of VM created in step3 and state as Running (matching name and state)\n        Step7: Verifying that the size of the list is 1\n        Step8: Verifying that the details of the listed VM are same as the VM created in step3\n        Step9: Listing the VM by specifying name of VM created in step3 and state as Stopped (non matching state)\n        Step10: Verifying that the size of the list is 0\n        Step11: Listing the VM by specifying non matching name and state as Running (non matching name)\n        Step12: Verifying that the size of the list is 0\n        "
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], "VM's creation failed")
    self.assertEquals(1, len(list_vms_after), "VM's list count is not matching")
    list_running_vm = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, name=vm_created.name, state='Running')
    status = validateList(list_running_vm)
    self.assertEquals(PASS, status[0], 'List VM by name and state failed')
    self.assertEquals(1, len(list_running_vm), 'Count of VM list by name and state is not matching')
    expected_dict = {'id': vm_created.id, 'name': vm_created.name, 'displayname': vm_created.displayname, 'state': 'Running', 'zoneid': vm_created.zoneid, 'account': vm_created.account, 'template': vm_created.templateid, }
    actual_dict = {'id': list_running_vm[0].id, 'name': list_running_vm[0].name, 'displayname': list_running_vm[0].displayname, 'state': list_running_vm[0].state, 'zoneid': list_running_vm[0].zoneid, 'account': list_running_vm[0].account, 'template': list_running_vm[0].templateid, }
    list_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_vm_status, 'Listed VM details are not as expected')
    list_running_vm = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, name=vm_created.name, state='Stopped')
    self.assertIsNone(list_running_vm, 'Listed VM with non matching state')
    list_running_vm = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, name='name', state='Running')
    self.assertIsNone(list_running_vm, 'Listed VM with non matching name')
    return
