@attr(tags=['advanced', 'basic', 'selfservice'])
def test_05_list_vm_by_id(self):
    '\n        @Desc: Test List VM by Id\n        @Steps:\n        Step1: Listing all the VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a VM\n        Step4: Listing all the VMs for a user again\n        Step5: Verifying that the size of the list is increased by 1\n        Step6: List a VM by specifying the Id if the VM deployed in Step3\n        Step7: Verifying that the details of the Listed VM are same as the VM deployed in Step3\n        '
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, account=self.account.name)
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, account=self.account.name)
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'Listing of VM after creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    list_vm_byid = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], id=vm_created.id)
    status = validateList(list_vm_byid)
    self.assertEquals(PASS, status[0], 'Listing of VM by Id failed')
    listed_vm = list_vm_byid[0]
    expected_dict = {'id': vm_created.id, 'name': vm_created.name, 'displayname': vm_created.displayname, 'state': vm_created.state, 'zoneid': vm_created.zoneid, 'account': vm_created.account, 'template': vm_created.templateid, }
    actual_dict = {'id': listed_vm.id, 'name': listed_vm.name, 'displayname': listed_vm.displayname, 'state': listed_vm.state, 'zoneid': listed_vm.zoneid, 'account': listed_vm.account, 'template': listed_vm.templateid, }
    list_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_vm_status, 'Listed VM by Id details are not as expected')
    return
