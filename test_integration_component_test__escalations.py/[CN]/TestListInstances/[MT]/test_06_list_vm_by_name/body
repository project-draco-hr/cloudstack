@attr(tags=['advanced', 'basic', 'selfservice'])
def test_06_list_vm_by_name(self):
    "  \n        @Desc: Test List VM's by Name\n        @Steps:\n        Step1: Listing all the VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a 2 VM's\n        Step4: Listing all the VMs for a user again\n        Step5: Verifying that list size is increased by 2\n        Step6: Listing the VM by specifying complete name of VM-1 created in step3\n        Step7: Verifying that the size of the list is 1\n        Step8: Verifying that the details of the listed VM are same as the VM-1 created in step3\n        Step9: Listing the VM by specifying the partial name of VM\n        Step10: Verifying that the size of the list is 2\n        "
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vms = {}
    for i in range(0, 2):
        vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'VM creation failed')
        self.cleanup.append(vm_created)
        vms.update({i: vm_created, })
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], "VM's creation failed")
    self.assertEquals(2, len(list_vms_after), "VM's list count is not matching")
    list_vm_byfullname = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, name=vms[0].name)
    status = validateList(list_vm_byfullname)
    self.assertEquals(PASS, status[0], 'Failed to list VM by Name')
    self.assertEquals(1, len(list_vm_byfullname), 'VM list by full name count is not matching')
    expected_dict = {'id': vms[0].id, 'name': vms[0].name, 'displayname': vms[0].displayname, 'state': vms[0].state, 'zoneid': vms[0].zoneid, 'account': vms[0].account, 'template': vms[0].templateid, }
    actual_dict = {'id': list_vm_byfullname[0].id, 'name': list_vm_byfullname[0].name, 'displayname': list_vm_byfullname[0].displayname, 'state': list_vm_byfullname[0].state, 'zoneid': list_vm_byfullname[0].zoneid, 'account': list_vm_byfullname[0].account, 'template': list_vm_byfullname[0].templateid, }
    list_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, list_vm_status, 'Listed VM details are not as expected')
    list_vm_bypartialname = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], domainid=self.account.domainid, name=vms[0].name[:1])
    status = validateList(list_vm_bypartialname)
    self.assertEquals(PASS, status[0], 'Failed to list VM by Name')
    self.assertEquals(2, len(list_vm_bypartialname), 'VM list by full name count is not matching')
    return
