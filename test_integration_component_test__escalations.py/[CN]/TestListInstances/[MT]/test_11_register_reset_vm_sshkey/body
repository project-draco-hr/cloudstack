@attr(tags=['advanced', 'basic', 'provisioning'])
def test_11_register_reset_vm_sshkey(self):
    '  \n        @Desc: Test to verify registering and reset of SSH Key for VM\n        @Steps:\n        Step1: Deploying a VM\n        Step2: Stopping the VM deployed in step1\n        Step3: Listing all the SSH Key pairs\n        Step4: Registering a SSH Key pair\n        Step5: Listing all the SSh Key pairs again\n        Step6: Verifying that the key pairs list is increased by 1\n        Step7: Resetting the VM SSH Key to the key pair registered in step4\n        Step8: Verifying that the registered SSH Key pair is set to the VM\n        '
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    vm_created.stop(self.userapiclient, forced=True)
    list_keypairs_before = SSHKeyPair.list(self.userapiclient)
    list_keypairs_before_size = 0
    if (list_keypairs_before is not None):
        list_keypairs_before_size = len(list_keypairs_before)
    new_keypair = SSHKeyPair.register(self.userapiclient, name='keypair1', publickey='ssh-rsa: e6:9a:1e:b5:98:75:88:5d:56:bc:92:7b:43:48:05:b2')
    self.assertIsNotNone(new_keypair, 'New Key pair generation failed')
    self.assertEquals('keypair1', new_keypair.name, 'Key Pair not created with given name')
    list_keypairs_after = SSHKeyPair.list(self.userapiclient)
    status = validateList(list_keypairs_after)
    self.assertEquals(PASS, status[0], 'Listing of Key pairs failed')
    self.assertEquals((list_keypairs_before_size + 1), len(list_keypairs_after), 'List count is not matching')
    vm_created.resetSshKey(self.userapiclient, keypair=new_keypair.name)
    list_vm = VirtualMachine.list(self.userapiclient, id=vm_created.id)
    status = validateList(list_vm)
    self.assertEquals(PASS, status[0], 'Listing of VM failed')
    self.assertEquals(1, len(list_vm), 'VMs list is not as expected')
    self.assertEquals(new_keypair.name, list_vm[0].keypair, 'VM is not set to newly created SSH Key pair')
    return
