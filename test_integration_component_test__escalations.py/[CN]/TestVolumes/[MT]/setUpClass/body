@classmethod
def setUpClass(cls):
    cls.testClient = super(TestVolumes, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    if cls.zone.localstorageenabled:
        cls.storagetype = 'local'
        cls.services['service_offerings']['tiny']['storagetype'] = 'local'
        cls.services['disk_offering']['storagetype'] = 'local'
    else:
        cls.storagetype = 'shared'
        cls.services['service_offerings']['tiny']['storagetype'] = 'shared'
        cls.services['disk_offering']['storagetype'] = 'shared'
    cls.services['mode'] = cls.zone.networktype
    cls.services['virtual_machine']['hypervisor'] = 'XenServer'
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.services['custom_volume']['zoneid'] = cls.zone.id
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offerings']['tiny'])
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.user = cls.account.user[0]
    cls.userapiclient = cls.testClient.getUserApiClient(cls.user.username, cls.domain.name)
    cls.virtual_machine = VirtualMachine.create(cls.userapiclient, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id)
    cls._cleanup = [cls.virtual_machine, cls.disk_offering, cls.service_offering, cls.account]
