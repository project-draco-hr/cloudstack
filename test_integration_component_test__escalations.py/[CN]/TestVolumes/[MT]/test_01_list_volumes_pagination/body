@attr(tags=['advanced', 'basic', 'provisioning'])
def test_01_list_volumes_pagination(self):
    '  \n        @summary: Test List Volumes pagination\n        \n        Step1: Listing all the volumes for a user\n        Step2: Verifying listed volumes for account created at class level\n        Step3: If number of volumes is less than (page size + 1), then creating them\n        Step4: Listing all the volumes again after creation of volumes\n        Step5: Verifying the length of the volumes is (page size + 1)\n        Step6: Listing all the volumes in page1\n        Step7: Verifying that the length of the volumes in page 1 is (page size)\n        Step8: Listing all the volumes in page2\n        Step9: Verifying that the length of the volumes in page 2 is 1\n        Step10: Deleting the volume present in page 2\n        Step11: Listing for the volumes on page 2\n        Step12: Verifying that there are no volumes present in page 2\n        '
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNotNone(list_volumes_before, 'create volume from VM failed at class setup method')
    self.assertEqual(len(list_volumes_before), 1, 'more than 1 volume created from VM at class level')
    for i in range(0, self.services['pagesize']):
        volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
        self.assertIsNotNone(volume_created, 'Volume is not created')
        if (i < (self.services['pagesize'] - 1)):
            self.cleanup.append(volume_created)
        self.assertEqual(self.services['volume']['diskname'], volume_created.name, 'Newly created volume name and the test data volume name are not matching')
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'])
    self.assertEqual(len(list_volumes_after), (self.services['pagesize'] + 1), 'Number of volumes created is not matching expected')
    list_volumes_page1 = Volume.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'])
    self.assertIsNotNone(list_volumes_page1, 'No volumes found in Page 1')
    self.assertEqual(len(list_volumes_page1), self.services['pagesize'], 'List Volume response is not matching with the page size length for page 1')
    list_volumes_page2 = Volume.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNotNone(list_volumes_page2, 'No volumes found in Page 2')
    self.assertEqual(len(list_volumes_page2), 1, 'List Volume response is not matching with the page size length for page 2')
    volume_page2 = list_volumes_page2[0]
    for i in range(0, len(list_volumes_page1)):
        volume_page1 = list_volumes_page1[i]
        self.assertNotEquals(volume_page2.id, volume_page1.id, 'Volume listed in page 2 is also listed in page 1')
    Volume.delete(volume_created, self.userapiclient)
    list_volume_response = Volume.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertEqual(list_volume_response, None, 'Volume was not deleted')
    return
