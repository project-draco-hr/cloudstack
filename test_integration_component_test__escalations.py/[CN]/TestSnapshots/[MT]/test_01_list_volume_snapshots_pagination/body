@attr(tags=['advanced', 'basic', 'provisioning'])
def test_01_list_volume_snapshots_pagination(self):
    '  \n        @Desc: Test to List Volume Snapshots pagination\n        @steps:\n        Step1: Listing all the volume snapshots for a user\n        Step2: Verifying that list size is 0\n        Step3: Creating (page size + 1) number of volume snapshots\n        Step4: Listing all the volume snapshots again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the volume snapshots in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the volume snapshots in page2\n        Step9: Verifying that list size is 1\n        Step10: Deleting the volume snapshot present in page 2\n        Step11: Listing all the volume snapshots in page2\n        Step12: Verifying that list size is 0\n        '
    list_vol_snaps_before = Snapshot.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vol_snaps_before, 'Volume snapshots exists for newly created user')
    volumes_list = Volume.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(volumes_list)
    self.assertEquals(PASS, status[0], 'Root volume did not get created while deploying a VM')
    self.assertEquals(1, len(volumes_list), 'More than 1 root volume created for deployed VM')
    root_volume = volumes_list[0]
    for i in range(0, (self.services['pagesize'] + 1)):
        snapshot_created = Snapshot.create(self.userapiclient, root_volume.id)
        self.assertIsNotNone(snapshot_created, 'Snapshot creation failed')
        self.cleanup.append(snapshot_created)
    list_vol_snaps_after = Snapshot.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vol_snaps_after)
    self.assertEquals(PASS, status[0], 'Volume snapshot creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_vol_snaps_after), 'Failed to create pagesize + 1 number of Volume snapshots')
    list_vol_snaps_page1 = Snapshot.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_vol_snaps_page1)
    self.assertEquals(PASS, status[0], 'Failed to list volume snapshots in page 1')
    self.assertEquals(self.services['pagesize'], len(list_vol_snaps_page1), 'Size of volume snapshots in page 1 is not matching')
    list_vol_snaps_page2 = Snapshot.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_vol_snaps_page2)
    self.assertEquals(PASS, status[0], 'Failed to list volume snapshots in page 2')
    self.assertEquals(1, len(list_vol_snaps_page2), 'Size of volume snapshots in page 2 is not matching')
    Snapshot.delete(snapshot_created, self.userapiclient)
    list_vol_snaps_page2 = Snapshot.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_vol_snaps_page2, 'Volume snapshot not deleted from page 2')
    return
