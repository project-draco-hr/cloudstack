@attr(tags=['advanced', 'selfservice'])
def test_22_deploy_vm_multiple_networks(self):
    "  \n        @Desc: Test to verify deploy VM with multiple networks\n        @Steps:\n        Step1: List all the networks for user\n        Step2: If size of list networks is greater than 2 then get all the networks id's\n                Else create 2 networks and get network id's\n        Step3: List all the VM's for a user\n        Step4: Deploy a VM with multiple network id's\n        Step5: Listing all the VM's again for the user\n        Step6: Verifying that list size is increased by 1\n        Step7: Verify that VM is associated with multiple networks\n        "
    networks_list_before = Network.list(self.userapiclient, listall=self.services['listall'])
    networks_list_size = 0
    if (networks_list_before is not None):
        networks_list_size = len(networks_list_before)
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat enabled are not found')
    while (networks_list_size < 2):
        network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
        self.assertIsNotNone(network, 'Network creation failed')
        self.cleanup.append(network)
        networks_list_size = (networks_list_size + 1)
    networks_list_after = Network.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Listing networks failed')
    networkids = ((networks_list_after[0].id + ',') + networks_list_after[1].id)
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=networkids, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    vm_nics = vm_created.nic
    self.assertEquals(2, len(vm_nics), "NIC's count in VM created is not matching")
    for i in range(0, len(vm_nics)):
        if (vm_nics[i].isdefault is True):
            self.assertEquals(networks_list_after[0].id, vm_nics[i].networkid, 'Default NIC is not as expected')
        else:
            self.assertEquals(networks_list_after[1].id, vm_nics[i].networkid, 'Non Default NIC is not as expected')
    return
