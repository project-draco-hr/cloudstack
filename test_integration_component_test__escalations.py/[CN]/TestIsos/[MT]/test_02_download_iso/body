@attr(tags=['advanced', 'basic', 'provisioning'])
def test_02_download_iso(self):
    "\n        @Desc: Test to Download ISO\n        @steps:\n        Step1: Listing all the ISO's for a user\n        Step2: Verifying that no ISO's are listed\n        Step3: Creating an ISO\n        Step4: Listing all the ISO's again for a user\n        Step5: Verifying that list size is 1\n        Step6: Verifying if the ISO is in ready state.\n                If yes the continuing\n                If not waiting and checking for template to be ready till timeout\n        Step7: Downloading the ISO (Extract)\n        Step8: Verifying the details of downloaded ISO\n        "
    list_iso_before = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    self.assertIsNone(list_iso_before, 'ISOs listed for newly created User')
    self.services['iso']['zoneid'] = self.zone.id
    self.services['iso']['isextractable'] = True
    iso_created = Iso.create(self.userapiclient, self.services['iso'])
    self.assertIsNotNone(iso_created, 'ISO creation failed')
    self.cleanup.append(iso_created)
    list_iso_after = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    status = validateList(list_iso_after)
    self.assertEquals(PASS, status[0], "ISO's creation failed")
    self.assertEquals(1, len(list_iso_after), "Failed to create an ISO's")
    iso_ready = False
    count = 0
    while (iso_ready is False):
        list_iso = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], id=iso_created.id)
        status = validateList(list_iso)
        self.assertEquals(PASS, status[0], 'Failed to list ISO by Id')
        if (list_iso[0].isready is True):
            iso_ready = True
        elif (str(list_iso[0].status) == 'Error'):
            self.fail('Created ISO is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before ISO came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    download_iso = Iso.extract(self.userapiclient, iso_created.id, mode='HTTP_DOWNLOAD', zoneid=self.zone.id)
    self.assertIsNotNone(download_iso, 'Download ISO failed')
    self.assertEquals('DOWNLOAD_URL_CREATED', download_iso.state, 'Download URL not created for ISO')
    self.assertIsNotNone(download_iso.url, 'Download URL not created for ISO')
    self.assertEquals(iso_created.id, download_iso.id, 'Download ISO details are not same as ISO created')
    del self.services['iso']['zoneid']
    del self.services['iso']['isextractable']
    return
