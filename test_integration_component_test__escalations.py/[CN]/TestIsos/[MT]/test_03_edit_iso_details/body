@attr(tags=['advanced', 'basic', 'provisioning'])
def test_03_edit_iso_details(self):
    "  \n        @Desc: Test to Edit ISO name, displaytext, OSType\n        @steps:\n        Step1: Listing all the ISO's for a user\n        Step2: Verifying that no ISO's are listed\n        Step3: Creating an ISO\n        Step4: Listing all the ISO's again for a user\n        Step5: Verifying that list size is 1\n        Step6: Verifying if the ISO is in ready state. \n                If yes the continuing \n                If not waiting and checking for template to be ready till timeout\n        Step7: Editing the ISO's name, displaytext\n        Step8: Verifying that ISO name and displaytext are edited\n        Step9: Editing the ISO name, displaytext, ostypeid\n        Step10: Verifying that ISO name, displaytext and ostypeid are edited\n        "
    list_iso_before = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    self.assertIsNone(list_iso_before, 'ISOs listed for newly created User')
    self.services['iso']['zoneid'] = self.zone.id
    iso_created = Iso.create(self.userapiclient, self.services['iso'])
    self.assertIsNotNone(iso_created, 'ISO creation failed')
    self.cleanup.append(iso_created)
    list_iso_after = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    status = validateList(list_iso_after)
    self.assertEquals(PASS, status[0], "ISO's creation failed")
    self.assertEquals(1, len(list_iso_after), "Failed to create an ISO's")
    iso_ready = False
    count = 0
    while (iso_ready is False):
        list_iso = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], id=iso_created.id)
        status = validateList(list_iso)
        self.assertEquals(PASS, status[0], 'Failed to list ISO by Id')
        if (list_iso[0].isready is True):
            iso_ready = True
        elif (str(list_iso[0].status) == 'Error'):
            self.fail('Created ISO is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before ISO came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    edited_iso = Iso.update(iso_created, self.userapiclient, name='NewISOName', displaytext='NewISODisplayText')
    self.assertIsNotNone(edited_iso, 'Editing ISO failed')
    expected_dict = {'id': iso_created.id, 'name': 'NewISOName', 'displaytest': 'NewISODisplayText', 'account': iso_created.account, 'domainid': iso_created.domainid, 'isfeatured': iso_created.isfeatured, 'ostypeid': iso_created.ostypeid, 'ispublic': iso_created.ispublic, }
    actual_dict = {'id': edited_iso.id, 'name': edited_iso.name, 'displaytest': edited_iso.displaytext, 'account': edited_iso.account, 'domainid': edited_iso.domainid, 'isfeatured': edited_iso.isfeatured, 'ostypeid': edited_iso.ostypeid, 'ispublic': edited_iso.ispublic, }
    edit_iso_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_iso_status, 'Edited ISO details are not as expected')
    ostype_list = list_os_types(self.userapiclient)
    status = validateList(ostype_list)
    self.assertEquals(PASS, status[0], 'Failed to list OS Types')
    for i in range(0, len(ostype_list)):
        if (ostype_list[i].id != iso_created.ostypeid):
            newostypeid = ostype_list[i].id
            break
    edited_iso = Iso.update(iso_created, self.userapiclient, name=iso_created.name, displaytext=iso_created.displaytext, ostypeid=newostypeid)
    self.assertIsNotNone(edited_iso, 'Editing ISO failed')
    expected_dict = {'id': iso_created.id, 'name': iso_created.name, 'displaytest': iso_created.displaytext, 'account': iso_created.account, 'domainid': iso_created.domainid, 'isfeatured': iso_created.isfeatured, 'ostypeid': newostypeid, 'ispublic': iso_created.ispublic, }
    actual_dict = {'id': edited_iso.id, 'name': edited_iso.name, 'displaytest': edited_iso.displaytext, 'account': edited_iso.account, 'domainid': edited_iso.domainid, 'isfeatured': edited_iso.isfeatured, 'ostypeid': edited_iso.ostypeid, 'ispublic': edited_iso.ispublic, }
    edit_iso_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, edit_iso_status, 'Edited ISO details are not as expected')
    del self.services['iso']['zoneid']
    return
