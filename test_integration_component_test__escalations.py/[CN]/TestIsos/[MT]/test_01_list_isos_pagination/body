@attr(tags=['advanced', 'basic', 'provisioning'])
def test_01_list_isos_pagination(self):
    "\n        @Desc: Test to List ISO's pagination\n        @steps:\n        Step1: Listing all the ISO's for a user\n        Step2: Verifying that no ISO's are listed\n        Step3: Creating (page size + 1) number of ISO's\n        Step4: Listing all the ISO's again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the ISO's in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the ISO's in page2\n        Step9: Verifying that list size is 1\n        Step10: Listing the ISO's by Id\n        Step11: Verifying if the ISO is downloaded and ready.\n                If yes the continuing\n                If not waiting and checking for iso to be ready till timeout\n        Step12: Deleting the ISO present in page 2\n        Step13: Listing all the ISO's in page2\n        Step14: Verifying that no ISO's are listed\n        "
    list_iso_before = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    self.assertIsNone(list_iso_before, 'ISOs listed for newly created User')
    self.services['iso']['zoneid'] = self.zone.id
    for i in range(0, (self.services['pagesize'] + 1)):
        iso_created = Iso.create(self.userapiclient, self.services['iso'])
        self.assertIsNotNone(iso_created, 'ISO creation failed')
        if (i < self.services['pagesize']):
            self.cleanup.append(iso_created)
    list_iso_after = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'])
    status = validateList(list_iso_after)
    self.assertEquals(PASS, status[0], "ISO's creation failed")
    self.assertEquals((self.services['pagesize'] + 1), len(list_iso_after), "Failed to create pagesize + 1 number of ISO's")
    list_iso_page1 = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_iso_page1)
    self.assertEquals(PASS, status[0], "Failed to list ISO's in page 1")
    self.assertEquals(self.services['pagesize'], len(list_iso_page1), "Size of ISO's in page 1 is not matching")
    list_iso_page2 = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_iso_page2)
    self.assertEquals(PASS, status[0], "Failed to list ISo's in page 2")
    self.assertEquals(1, len(list_iso_page2), "Size of ISO's in page 2 is not matching")
    iso_ready = False
    count = 0
    while (iso_ready is False):
        list_iso = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], id=iso_created.id)
        status = validateList(list_iso)
        self.assertEquals(PASS, status[0], 'Failed to list ISO by Id')
        if (list_iso[0].isready is True):
            iso_ready = True
        elif (str(list_iso[0].status) == 'Error'):
            self.fail('Created ISO is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before ISO came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    Iso.delete(iso_created, self.userapiclient)
    list_iso_page2 = Iso.list(self.userapiclient, listall=self.services['listall'], isofilter=self.services['templatefilter'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_iso_page2, "ISO's not deleted from page 2")
    del self.services['iso']['zoneid']
    return
