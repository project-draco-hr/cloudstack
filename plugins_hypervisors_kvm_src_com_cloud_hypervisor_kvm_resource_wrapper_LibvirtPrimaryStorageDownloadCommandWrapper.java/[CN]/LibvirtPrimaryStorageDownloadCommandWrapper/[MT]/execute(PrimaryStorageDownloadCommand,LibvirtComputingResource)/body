{
  final String tmplturl=command.getUrl();
  final int index=tmplturl.lastIndexOf("/");
  final String mountpoint=tmplturl.substring(0,index);
  String tmpltname=null;
  if (index < tmplturl.length() - 1) {
    tmpltname=tmplturl.substring(index + 1);
  }
  KVMPhysicalDisk tmplVol=null;
  KVMStoragePool secondaryPool=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (tmpltname == null) {
      secondaryPool.refresh();
      final List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        return new PrimaryStorageDownloadAnswer("Failed to get volumes from pool: " + secondaryPool.getUuid());
      }
      for (      final KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith("qcow2")) {
          tmplVol=disk;
          break;
        }
      }
      if (tmplVol == null) {
        return new PrimaryStorageDownloadAnswer("Failed to get template from pool: " + secondaryPool.getUuid());
      }
    }
 else {
      tmplVol=secondaryPool.getPhysicalDisk(tmpltname);
    }
    final KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPoolUuid());
    final KVMPhysicalDisk primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,UUID.randomUUID().toString(),primaryPool,0);
    return new PrimaryStorageDownloadAnswer(primaryVol.getName(),primaryVol.getSize());
  }
 catch (  final CloudRuntimeException e) {
    return new PrimaryStorageDownloadAnswer(e.toString());
  }
 finally {
    if (secondaryPool != null) {
      storagePoolMgr.deleteStoragePool(secondaryPool.getType(),secondaryPool.getUuid());
    }
  }
}
