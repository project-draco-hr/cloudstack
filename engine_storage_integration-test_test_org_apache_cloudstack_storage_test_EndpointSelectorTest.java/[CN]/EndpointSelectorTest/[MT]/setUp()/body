{
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,DataCenter.NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),dc.getId(),"10.223.0.1","10.233.2.2/25",8,"test");
  pod=podDao.persist(pod);
  podId=pod.getId();
  ClusterVO cluster=new ClusterVO(dc.getId(),pod.getId(),"devcloud cluster");
  cluster.setHypervisorType(Hypervisor.HypervisorType.XenServer.toString());
  cluster.setClusterType(Cluster.ClusterType.CloudManaged);
  cluster.setManagedState(Managed.ManagedState.Managed);
  cluster=clusterDao.persist(cluster);
  clusterId=cluster.getId();
  imageStore=new ImageStoreVO();
  imageStore.setName(UUID.randomUUID().toString());
  imageStore.setDataCenterId(dcId);
  imageStore.setProviderName(DataStoreProvider.NFS_IMAGE);
  imageStore.setRole(DataStoreRole.Image);
  imageStore.setUrl(UUID.randomUUID().toString());
  imageStore.setUuid(UUID.randomUUID().toString());
  imageStore.setProtocol("nfs");
  imageStore=imageStoreDao.persist(imageStore);
  when(primaryDataStoreProvider.configure(Matchers.anyMap())).thenReturn(true);
  Set<DataStoreProvider.DataStoreProviderType> types=new HashSet<DataStoreProvider.DataStoreProviderType>();
  types.add(DataStoreProvider.DataStoreProviderType.PRIMARY);
  when(primaryDataStoreProvider.getTypes()).thenReturn(types);
  when(primaryDataStoreProvider.getName()).thenReturn(DataStoreProvider.DEFAULT_PRIMARY);
  when(primaryDataStoreProvider.getDataStoreDriver()).thenReturn(driver);
  User user=mock(User.class);
  when(user.getId()).thenReturn(1L);
  Account account=mock(Account.class);
  when(account.getId()).thenReturn(1L);
  when(accountManager.getSystemAccount()).thenReturn(account);
  when(accountManager.getSystemUser()).thenReturn(user);
  if (Merovingian2.getLockMaster() == null) {
    _lockMaster=Merovingian2.createLockMaster(1234);
  }
 else {
    _lockMaster=Merovingian2.getLockMaster();
  }
  _lockMaster.cleanupThisServer();
  ComponentContext.initComponentsLifeCycle();
}
