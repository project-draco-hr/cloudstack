{
  Long domainId=(Long)params.get(BaseCmd.Properties.ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Boolean cleanup=(Boolean)params.get(BaseCmd.Properties.CLEANUP.getName());
  if (account == null) {
    account=getManagementServer().findAccountById(Long.valueOf(1L));
  }
  if ((domainId.longValue() == DomainVO.ROOT_DOMAIN) || !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to delete domain " + domainId + ", permission denied.");
  }
  DomainVO domain=getManagementServer().findDomainIdById(domainId);
  if (domain == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find domain " + domainId);
  }
  long jobId=getManagementServer().deleteDomainAsync(domainId,account.getId(),cleanup);
  if (jobId == 0) {
    s_logger.warn("Unable to schedule async-job for DeleteDomain comamnd");
  }
 else {
    if (s_logger.isDebugEnabled())     s_logger.debug("DeleteDomain command has been accepted, job id: " + jobId);
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
  return returnValues;
}
