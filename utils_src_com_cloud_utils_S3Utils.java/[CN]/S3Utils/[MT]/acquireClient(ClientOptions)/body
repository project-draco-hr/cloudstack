{
  final AWSCredentials credentials=new BasicAWSCredentials(clientOptions.getAccessKey(),clientOptions.getSecretKey());
  final ClientConfiguration configuration=new ClientConfiguration();
  if (clientOptions.isHttps() != null) {
    configuration.setProtocol(clientOptions.isHttps() == true ? HTTPS : HTTP);
  }
  if (clientOptions.getConnectionTimeout() != null) {
    configuration.setConnectionTimeout(clientOptions.getConnectionTimeout());
  }
  if (clientOptions.getMaxErrorRetry() != null) {
    configuration.setMaxErrorRetry(clientOptions.getMaxErrorRetry());
  }
  if (clientOptions.getSocketTimeout() != null) {
    configuration.setSocketTimeout(clientOptions.getSocketTimeout());
  }
  if (clientOptions.getUseTCPKeepAlive() != null) {
    LOGGER.debug("useTCPKeepAlive not supported by old AWS SDK");
  }
  if (clientOptions.getConnectionTtl() != null) {
    LOGGER.debug("connectionTtl not supported by old AWS SDK");
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(format("Creating S3 client with configuration: [protocol: %1$s, connectionTimeOut: " + "%2$s, maxErrorRetry: %3$s, socketTimeout: %4$s, useTCPKeepAlive: %5$s, connectionTtl: %6$s]",configuration.getProtocol(),configuration.getConnectionTimeout(),configuration.getMaxErrorRetry(),configuration.getSocketTimeout(),-1,-1));
  }
  final AmazonS3Client client=new AmazonS3Client(credentials,configuration);
  if (isNotBlank(clientOptions.getEndPoint())) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(format("Setting the end point for S3 client %1$s to %2$s.",client,clientOptions.getEndPoint()));
    }
    client.setEndpoint(clientOptions.getEndPoint());
  }
  return client;
}
