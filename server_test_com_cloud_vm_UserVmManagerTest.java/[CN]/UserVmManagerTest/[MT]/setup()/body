{
  MockitoAnnotations.initMocks(this);
  _userVmMgr._vmDao=_vmDao;
  _userVmMgr._vmInstanceDao=_vmInstanceDao;
  _userVmMgr._templateDao=_templateDao;
  _userVmMgr._volsDao=_volsDao;
  _userVmMgr._usageEventDao=_usageEventDao;
  _userVmMgr._itMgr=_itMgr;
  _userVmMgr.volumeMgr=_storageMgr;
  _userVmMgr._accountDao=_accountDao;
  _userVmMgr._accountService=_accountService;
  _userVmMgr._userDao=_userDao;
  _userVmMgr._accountMgr=_accountMgr;
  _userVmMgr._configMgr=_configMgr;
  _userVmMgr._offeringDao=_offeringDao;
  _userVmMgr._capacityMgr=_capacityMgr;
  _userVmMgr._resourceLimitMgr=_resourceLimitMgr;
  _userVmMgr._scaleRetry=2;
  _userVmMgr._entityMgr=_entityMgr;
  _userVmMgr._storagePoolDao=_storagePoolDao;
  _userVmMgr._vmSnapshotDao=_vmSnapshotDao;
  doReturn(3L).when(_account).getId();
  doReturn(8L).when(_vmMock).getAccountId();
  when(_accountDao.findById(anyLong())).thenReturn(_accountMock);
  when(_userDao.findById(anyLong())).thenReturn(_userMock);
  doReturn(Account.State.enabled).when(_account).getState();
  when(_vmMock.getId()).thenReturn(314L);
  when(_vmInstance.getId()).thenReturn(1L);
  when(_vmInstance.getServiceOfferingId()).thenReturn(2L);
  List<VMSnapshotVO> mockList=mock(List.class);
  when(_vmSnapshotDao.findByVm(anyLong())).thenReturn(mockList);
  when(mockList.size()).thenReturn(0);
}
