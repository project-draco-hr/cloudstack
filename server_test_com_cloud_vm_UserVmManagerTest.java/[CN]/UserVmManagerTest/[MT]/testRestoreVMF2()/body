{
  doReturn(VirtualMachine.State.Stopped).when(_vmMock).getState();
  when(_vmDao.findById(anyLong())).thenReturn(_vmMock);
  when(_volsDao.findByInstanceAndType(314L,Volume.Type.ROOT)).thenReturn(_rootVols);
  doReturn(false).when(_rootVols).isEmpty();
  when(_rootVols.get(eq(0))).thenReturn(_volumeMock);
  doReturn(3L).when(_volumeMock).getTemplateId();
  when(_templateDao.findById(anyLong())).thenReturn(_templateMock);
  when(_storageMgr.allocateDuplicateVolume(_volumeMock,null)).thenReturn(_volumeMock);
  doNothing().when(_volsDao).attachVolume(anyLong(),anyLong(),anyLong());
  when(_volumeMock.getId()).thenReturn(3L);
  doNothing().when(_volsDao).detachVolume(anyLong());
  when(_templateMock.getUuid()).thenReturn("e0552266-7060-11e2-bbaa-d55f5db67735");
  Account account=new AccountVO("testaccount",1L,"networkdomain",(short)0,"uuid");
  UserVO user=new UserVO(1,"testuser","password","firstname","lastName","email","timezone",UUID.randomUUID().toString());
  StoragePoolVO storagePool=new StoragePoolVO();
  storagePool.setManaged(false);
  when(_storagePoolDao.findById(anyLong())).thenReturn(storagePool);
  CallContext.register(user,account);
  try {
    _userVmMgr.restoreVMInternal(_account,_vmMock,null);
  }
  finally {
    CallContext.unregister();
  }
}
