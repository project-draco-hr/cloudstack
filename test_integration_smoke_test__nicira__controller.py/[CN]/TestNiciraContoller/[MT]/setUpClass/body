@classmethod
def setUpClass(cls):
    test_case = super(TestNiciraContoller, cls)
    test_client = test_case.getClsTestClient()
    cls.config = test_case.getClsConfig()
    cls.api_client = test_client.getApiClient()
    cls.physical_networks = cls.config.zones[0].physical_networks
    cls.nicira_hosts = cls.config.niciraNvp.hosts
    cls.physical_network_id = cls.get_nicira_enabled_physical_network_id(cls.physical_networks)
    cls.network_offerring_services = {'name': 'NiciraEnabledNetwork', 'displaytext': 'NiciraEnabledNetwork', 'guestiptype': 'Isolated', 'supportedservices': 'SourceNat,Firewall,PortForwarding,Connectivity', 'traffictype': 'GUEST', 'availability': 'Optional', 'serviceProviderList': {'SourceNat': 'VirtualRouter', 'Firewall': 'VirtualRouter', 'PortForwarding': 'VirtualRouter', 'Connectivity': 'NiciraNvp', }, }
    cls.network_offering = NetworkOffering.create(cls.api_client, cls.network_offerring_services)
    cls.network_offering.update(cls.api_client, state='Enabled')
    cls.nicira_credentials = {'username': 'admin', 'password': 'admin', }
    cls.nicira_master_controller = cls.determine_master_controller(cls.nicira_hosts, cls.nicira_credentials)
    cls.transport_zone_uuid = cls.get_transport_zone_from_controller(cls.nicira_master_controller, cls.nicira_credentials)
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, test_client.getZoneForTests())
    template = get_template(cls.api_client, cls.zone.id)
    if (template == FAILED):
        raise Exception(('get_template() failed to return template with description %s' % cls.services['ostype']))
    cls.vm_services = {'mode': cls.zone.networktype, 'small': {'zoneid': cls.zone.id, 'template': template.id, 'displayname': 'testserver', 'username': cls.config.zones[0].pods[0].clusters[0].hosts[0].username, 'password': cls.config.zones[0].pods[0].clusters[0].hosts[0].password, 'ssh_port': 22, 'hypervisor': cls.config.zones[0].pods[0].clusters[0].hypervisor, 'privateport': 22, 'publicport': 22, 'protocol': 'TCP', }, 'service_offerings': {'tiny': {'name': 'Tiny Instance', 'displaytext': 'Tiny Instance', 'cpunumber': 1, 'cpuspeed': 100, 'memory': 64, }, }, }
    if (cls.zone.localstorageenabled == True):
        cls.vm_services['service_offerings']['tiny']['storagetype'] = 'local'
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.vm_services['service_offerings']['tiny'])
    cls.cleanup = [cls.network_offering, cls.service_offering]
