{
  String agentId=(String)req.getParams().getParameter("agentId");
  String gsonPackage=(String)req.getParams().getParameter("gsonPackage");
  String stopOnError=(String)req.getParams().getParameter("stopOnError");
  String callingPeer=(String)req.getParams().getParameter("caller");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Async " + callingPeer + " |-> "+ agentId+ " "+ gsonPackage);
  }
  Command[] cmds=null;
  try {
    cmds=gson.fromJson(gsonPackage,Command[].class);
  }
 catch (  Throwable e) {
    assert(false);
    s_logger.error("Excection in gson decoding : ",e);
  }
  Listener listener=new ClusterAsyncExectuionListener(manager,callingPeer);
  long seq=-1;
  try {
    long startTick=System.currentTimeMillis();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Send Async " + callingPeer + " |-> "+ agentId+ " "+ gsonPackage+ " to agent manager");
    }
    seq=manager.sendToAgent(Long.parseLong(agentId),cmds,Integer.parseInt(stopOnError) != 0 ? true : false,listener);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Complated Async " + callingPeer + " |-> "+ agentId+ " "+ gsonPackage+ " in "+ +(System.currentTimeMillis() - startTick)+ " ms, returned seq: "+ seq);
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn("Agent is unavailable",e);
    seq=-1;
  }
  return gson.toJson(seq);
}
