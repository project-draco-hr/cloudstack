{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Parsing all SecurityGroup usage events for account: " + account.getId());
  }
  if ((endDate == null) || endDate.after(new Date())) {
    endDate=new Date();
  }
  List<UsageSecurityGroupVO> usageSGs=m_usageSecurityGroupDao.getUsageRecords(account.getId(),account.getDomainId(),startDate,endDate,false,0);
  if (usageSGs.isEmpty()) {
    s_logger.debug("No SecurityGroup usage events for this period");
    return true;
  }
  Map<String,Pair<Long,Long>> usageMap=new HashMap<String,Pair<Long,Long>>();
  Map<String,SGInfo> sgMap=new HashMap<String,SGInfo>();
  for (  UsageSecurityGroupVO usageSG : usageSGs) {
    long vmId=usageSG.getVmInstanceId();
    long sgId=usageSG.getSecurityGroupId();
    String key="" + vmId + "SG"+ sgId;
    sgMap.put(key,new SGInfo(vmId,usageSG.getZoneId(),sgId));
    Date sgCreateDate=usageSG.getCreated();
    Date sgDeleteDate=usageSG.getDeleted();
    if ((sgDeleteDate == null) || sgDeleteDate.after(endDate)) {
      sgDeleteDate=endDate;
    }
    if (sgCreateDate.before(startDate)) {
      sgCreateDate=startDate;
    }
    long currentDuration=(sgDeleteDate.getTime() - sgCreateDate.getTime()) + 1;
    updateSGUsageData(usageMap,key,usageSG.getVmInstanceId(),currentDuration);
  }
  for (  String sgIdKey : usageMap.keySet()) {
    Pair<Long,Long> sgtimeInfo=usageMap.get(sgIdKey);
    long useTime=sgtimeInfo.second().longValue();
    if (useTime > 0L) {
      SGInfo info=sgMap.get(sgIdKey);
      createUsageRecord(UsageTypes.SECURITY_GROUP,useTime,startDate,endDate,account,info.getVmId(),info.getSGId(),info.getZoneId());
    }
  }
  return true;
}
