{
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> connectivityCapabilities=new HashMap<Capability,String>();
  connectivityCapabilities.put(Capability.DistributedRouter,null);
  connectivityCapabilities.put(Capability.StretchedL2Subnet,null);
  connectivityCapabilities.put(Capability.RegionLevelVpc,null);
  capabilities.put(Service.Connectivity,connectivityCapabilities);
  capabilities.put(Service.PortForwarding,null);
  capabilities.put(Service.StaticNat,null);
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,"roundrobin,leastconn,source");
  lbCapabilities.put(Capability.SupportedLBIsolation,"dedicated");
  lbCapabilities.put(Capability.SupportedProtocols,"tcp, udp");
  lbCapabilities.put(Capability.SupportedStickinessMethods,getHAProxyStickinessCapability());
  lbCapabilities.put(Capability.LbSchemes,LoadBalancerContainer.Scheme.Public.toString());
  capabilities.put(Service.Lb,lbCapabilities);
  return capabilities;
}
