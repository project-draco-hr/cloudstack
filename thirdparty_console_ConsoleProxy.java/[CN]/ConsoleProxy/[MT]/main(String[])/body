{
  System.setProperty("java.awt.headless","true");
  InputStream confs=ConsoleProxy.class.getResourceAsStream("vmops.properties");
  if (confs == null) {
    Logger.log(Logger.INFO,"Can't load vmops.properties from classpath, will use default configuration");
  }
 else {
    Properties conf=new Properties();
    try {
      conf.load(confs);
      String s=conf.getProperty("tcpListenPort");
      if (s != null) {
        tcpListenPort=Integer.parseInt(s);
        Logger.log(Logger.INFO,"Setting tcpListenPort=" + s);
      }
      s=conf.getProperty("httpListenPort");
      if (s != null) {
        httpListenPort=Integer.parseInt(s);
        Logger.log(Logger.INFO,"Setting httpListenPort=" + s);
      }
      s=conf.getProperty("httpCmdListenPort");
      if (s != null) {
        httpCmdListenPort=Integer.parseInt(s);
        Logger.log(Logger.INFO,"Setting httpCmdListenPort=" + s);
      }
      s=conf.getProperty("jarDir");
      if (s != null) {
        jarDir=s;
        Logger.log(Logger.INFO,"Setting jarDir=" + s);
      }
      s=conf.getProperty("viewerLinger");
      if (s != null) {
        viewerLinger=Integer.parseInt(s);
        Logger.log(Logger.INFO,"Setting viewerLinger=" + s);
      }
      s=conf.getProperty("compressServerMessage");
      if (s != null) {
        compressServerMessage=Boolean.parseBoolean(s);
        Logger.log(Logger.INFO,"Setting compressServerMessage=" + s);
      }
    }
 catch (    Exception e) {
      Logger.log(Logger.ERROR,e.toString(),e);
      System.exit(1);
    }
  }
  SSLContext sslContext=null;
  try {
    char[] passphrase="vmops.com".toCharArray();
    KeyStore ks=KeyStore.getInstance("JKS");
    ks.load(new FileInputStream("../certs/realhostip.keystore"),passphrase);
    KeyManagerFactory kmf=KeyManagerFactory.getInstance("SunX509");
    kmf.init(ks,passphrase);
    TrustManagerFactory tmf=TrustManagerFactory.getInstance("SunX509");
    tmf.init(ks);
    sslContext=SSLContext.getInstance("TLS");
    sslContext.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
    HttpsServer server=HttpsServer.create(new InetSocketAddress(httpListenPort),2);
    Logger.log(Logger.INFO,"Listening for HTTP on port " + httpListenPort);
    server.createContext("/getscreen",new ScreenHandler());
    server.createContext("/getjar/",new JARHandler());
    server.setExecutor(new ThreadExecutor());
    server.setHttpsConfigurator(new HttpsConfigurator(sslContext){
      public void configure(      HttpsParameters params){
        InetSocketAddress remote=params.getClientAddress();
        SSLContext c=getSSLContext();
        SSLParameters sslparams=c.getDefaultSSLParameters();
        params.setSSLParameters(sslparams);
      }
    }
);
    server.start();
    HttpServer cmdServer=HttpServer.create(new InetSocketAddress(httpCmdListenPort),2);
    Logger.log(Logger.INFO,"Listening for HTTP CMDs on port " + httpCmdListenPort);
    cmdServer.createContext("/cmd",new CmdHandler());
    cmdServer.setExecutor(new ThreadExecutor());
    cmdServer.start();
  }
 catch (  Exception ioe) {
    Logger.log(Logger.ERROR,ioe.toString(),ioe);
    System.exit(1);
  }
  ViewerGCThread cthread=new ViewerGCThread(connectionMap);
  cthread.setName("Viewer GC Thread");
  cthread.start();
  SSLServerSocket srvSock=null;
  try {
    SSLServerSocketFactory ssf=sslContext.getServerSocketFactory();
    srvSock=(SSLServerSocket)ssf.createServerSocket(tcpListenPort);
    Logger.log(Logger.INFO,"Listening for TCP on port " + tcpListenPort);
  }
 catch (  IOException ioe) {
    Logger.log(Logger.ERROR,ioe.toString(),ioe);
    System.exit(1);
  }
  while (true) {
    Socket conn=null;
    try {
      conn=srvSock.accept();
      String srcinfo=conn.getInetAddress().getHostAddress() + ":" + conn.getPort();
      Logger.log(Logger.INFO,"Accepted connection from " + srcinfo);
      conn.setSoLinger(false,0);
      WorkerThread worker=new WorkerThread(conn);
      worker.setName("Proxy Thread " + worker.getId() + " <"+ srcinfo);
      worker.start();
    }
 catch (    IOException ioe2) {
      Logger.log(Logger.ERROR,ioe2.toString(),ioe2);
      try {
        if (conn != null) {
          conn.close();
        }
      }
 catch (      IOException ioe) {
      }
    }
catch (    Throwable e) {
      Logger.log(Logger.ERROR,e.toString(),e);
      System.exit(1);
    }
  }
}
