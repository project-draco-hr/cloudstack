{
  String apiUserName="root";
  String apiPassword="password";
  String apid="2ad644fb479871a0f5543dd6d29fe9ed";
  StringBuffer askApid=new StringBuffer();
  askApid.append("http://");
  askApid.append(_ip);
  askApid.append("/tftpboot/www/lbmp-API.php?actiontype=provision&apid=");
  askApid.append(apid);
  askApid.append("&auth_user=");
  askApid.append(apiUserName);
  askApid.append("&auth_user_pw=");
  askApid.append(apiPassword);
  askApid.append("&rtn_format=XML&action=authorize");
  InputSource s=httpCall(askApid.toString());
  if (s == null) {
    return new PrepareLinMinPxeServerAnswer(cmd,"Http call failed");
  }
  try {
    XmlReturn r=new XmlReturn(s,"LinMinBareMetalAPI");
    String res=r.getValue("actionResultsMsg");
    s_logger.debug(s.toString());
    if (!res.startsWith("Successful")) {
      return new PrepareLinMinPxeServerAnswer(cmd,"Acquire APID failed");
    }
    String apid5=r.getValue("apid");
    if (apid5 == null) {
      return new PrepareLinMinPxeServerAnswer(cmd,"Cannot get 5 minutes APID " + apid5);
    }
    StringBuffer addRole=new StringBuffer();
    addRole.append("http://");
    addRole.append(_ip);
    addRole.append("/tftpboot/www/lbmp-API.php?actiontype=provision&user_supplied_id=");
    addRole.append(cmd.getVmName());
    addRole.append("&mac_address=");
    addRole.append(cmd.getMac().replaceAll(":","%3A"));
    addRole.append("&apid=");
    addRole.append(apid5);
    addRole.append("&control_file_template=");
    addRole.append(cmd.getTemplate().replace(' ','+'));
    addRole.append("&node_name=");
    addRole.append(cmd.getHostName());
    addRole.append("&node_domain=");
    addRole.append(cmd.getHostName());
    addRole.append("&node_password=password");
    addRole.append("&node_time_zone=Etc%2FGMT-8");
    if (cmd.getIp() != null) {
      addRole.append("&node_ip_address=");
      addRole.append(cmd.getIp());
    }
    if (cmd.getNetMask() != null) {
      addRole.append("&node_subnet_mask=");
      addRole.append(cmd.getNetMask());
    }
    if (cmd.getDns() != null) {
      addRole.append("&node_nameserver=");
      addRole.append(cmd.getDns());
    }
    if (cmd.getGateWay() != null) {
      addRole.append("&node_default_gateway=");
      addRole.append(cmd.getGateWay());
    }
    addRole.append("&enable_provisioning_flag=nextbootonly&rtn_format=XML&action=add");
    s=httpCall(addRole.toString());
    if (s == null) {
      return new PrepareLinMinPxeServerAnswer(cmd,"Http call failed");
    }
    r=new XmlReturn(s,"LinMinBareMetalAPI");
    res=r.getValue("actionResultsMsg");
    s_logger.debug(s.toString());
    if (!res.startsWith("Successful")) {
      return new PrepareLinMinPxeServerAnswer(cmd,"Add LinMin role failed");
    }
  }
 catch (  Exception e) {
    s_logger.warn("Cannot parse result from Lin Min server",e);
    return new PrepareLinMinPxeServerAnswer(cmd,e.getMessage());
  }
  s_logger.debug("Prepare LinMin PXE server successfully");
  return new PrepareLinMinPxeServerAnswer(cmd);
}
