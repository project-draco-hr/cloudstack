{
  String description=(String)params.get(BaseCmd.Properties.DISPLAY_TEXT.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long volumeId=(Long)params.get(BaseCmd.Properties.VOLUME_ID.getName());
  Long guestOSId=(Long)params.get(BaseCmd.Properties.OS_TYPE_ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Boolean requiresHvm=(Boolean)params.get(BaseCmd.Properties.REQUIRES_HVM.getName());
  Integer bits=(Integer)params.get(BaseCmd.Properties.BITS.getName());
  Boolean passwordEnabled=(Boolean)params.get(BaseCmd.Properties.PASSWORD_ENABLED.getName());
  Boolean isPublic=(Boolean)params.get(BaseCmd.Properties.IS_PUBLIC.getName());
  Boolean featured=(Boolean)params.get(BaseCmd.Properties.IS_FEATURED.getName());
  Long snapshotId=(Long)params.get(BaseCmd.Properties.SNAPSHOT_ID.getName());
  if (volumeId == null && snapshotId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Specify at least one of the two parameters volumeId or snapshotId");
  }
  VolumeVO volume=null;
  if (snapshotId != null) {
    Snapshot snapshot=getManagementServer().findSnapshotById(snapshotId);
    if (snapshot == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"No snapshot exists with the given id: " + snapshotId);
    }
    if (volumeId != null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Specify only one of the two parameters volumeId or snapshotId");
    }
    volumeId=snapshot.getVolumeId();
    volume=getManagementServer().findAnyVolumeById(volumeId);
  }
 else {
    volume=getManagementServer().findAnyVolumeById(volumeId);
  }
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find a volume with id " + volumeId);
  }
  boolean isAdmin=((account == null) || isAdmin(account.getType()));
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"unable to find a volume with id " + volumeId + " for this account");
    }
  }
 else   if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to create a template from volume with id " + volumeId + ", permission denied.");
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(getManagementServer().getConfigurationValue("allow.public.user.templates"));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Only private templates can be created.");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  Criteria c=new Criteria();
  c.addCriteria(Criteria.NAME,name);
  c.addCriteria(Criteria.CREATED_BY,Long.valueOf(volume.getAccountId()));
  List<VMTemplateVO> templates=getManagementServer().searchForTemplates(c);
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  try {
    long jobId=getManagementServer().createPrivateTemplateAsync(userId,volumeId,name,description,guestOSId,requiresHvm,bits,passwordEnabled,isPublic,featured,snapshotId);
    if (jobId == 0) {
      s_logger.warn("Unable to schedule async-job for CreateTemplate command");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug("CreateTemplate command has been accepted, job id: " + jobId);
    }
    long templateId=waitInstanceCreation(jobId);
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_ID.getName(),Long.valueOf(templateId)));
    return returnValues;
  }
 catch (  Exception ex) {
    throw new ServerApiException(BaseCmd.CREATE_PRIVATE_TEMPLATE_ERROR,"Unhandled exception while creating template name: " + name + " for volume "+ volumeId+ ", reason, "+ ex.getMessage());
  }
}
