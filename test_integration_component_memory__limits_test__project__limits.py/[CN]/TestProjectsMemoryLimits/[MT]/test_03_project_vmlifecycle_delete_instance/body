@attr(tags=['advanced', 'advancedns', 'simulator'])
def test_03_project_vmlifecycle_delete_instance(self):
    self.debug(('Checking memory resource count for project: %s' % self.project.name))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.debug(project_list)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count = project_list[0].memorytotal
    self.debug(resource_count)
    self.debug(('Destroying instance: %s' % self.vm.name))
    try:
        self.vm.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete instance: %s' % e))
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    self.debug(('Checking memory resource count for project: %s' % self.project.name))
    project_list = Project.list(self.apiclient, id=self.project.id, listall=True)
    self.assertIsInstance(project_list, list, 'List Projects should return a valid response')
    resource_count_after_delete = project_list[0].memorytotal
    self.assertEqual(resource_count_after_delete, 0, ('Resource count for %s should be 0' % get_resource_type(resource_id=9)))
    return
