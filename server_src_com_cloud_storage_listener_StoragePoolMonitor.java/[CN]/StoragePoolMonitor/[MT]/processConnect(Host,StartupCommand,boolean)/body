{
  if (cmd instanceof StartupRoutingCommand) {
    StartupRoutingCommand scCmd=(StartupRoutingCommand)cmd;
    if (scCmd.getHypervisorType() == HypervisorType.XenServer || scCmd.getHypervisorType() == HypervisorType.KVM || scCmd.getHypervisorType() == HypervisorType.VMware || scCmd.getHypervisorType() == HypervisorType.Simulator || scCmd.getHypervisorType() == HypervisorType.Ovm || scCmd.getHypervisorType() == HypervisorType.Hyperv || scCmd.getHypervisorType() == HypervisorType.LXC || scCmd.getHypervisorType() == HypervisorType.Ovm3) {
      List<StoragePoolVO> pools=_poolDao.listBy(host.getDataCenterId(),host.getPodId(),host.getClusterId(),ScopeType.CLUSTER);
      List<StoragePoolVO> zoneStoragePoolsByTags=_poolDao.findZoneWideStoragePoolsByTags(host.getDataCenterId(),null);
      List<StoragePoolVO> zoneStoragePoolsByHypervisor=_poolDao.findZoneWideStoragePoolsByHypervisor(host.getDataCenterId(),scCmd.getHypervisorType());
      zoneStoragePoolsByTags.retainAll(zoneStoragePoolsByHypervisor);
      pools.addAll(zoneStoragePoolsByTags);
      List<StoragePoolVO> zoneStoragePoolsByAnyHypervisor=_poolDao.findZoneWideStoragePoolsByHypervisor(host.getDataCenterId(),HypervisorType.Any);
      pools.addAll(zoneStoragePoolsByAnyHypervisor);
      for (      StoragePoolVO pool : pools) {
        if (pool.getStatus() != StoragePoolStatus.Up) {
          continue;
        }
        if (!pool.isShared()) {
          continue;
        }
        if (pool.getPoolType() == StoragePoolType.OCFS2 && !_ocfs2Mgr.prepareNodes(pool.getClusterId())) {
          throw new ConnectionException(true,"Unable to prepare OCFS2 nodes for pool " + pool.getId());
        }
        Long hostId=host.getId();
        s_logger.debug("Host " + hostId + " connected, sending down storage pool information ...");
        try {
          _storageManager.connectHostToSharedPool(hostId,pool.getId());
          _storageManager.createCapacityEntry(pool.getId());
        }
 catch (        Exception e) {
          s_logger.warn("Unable to connect host " + hostId + " to pool "+ pool+ " due to "+ e.toString(),e);
        }
      }
    }
  }
}
