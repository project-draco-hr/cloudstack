{
  Long accountId=cmd.getAccountId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Account userAccount=null;
  Account account=(Account)UserContext.current().getCaller();
  Long usageType=cmd.getUsageType();
  if ((accountId == null) && (accountName != null) && (domainId != null)) {
    if (_domainDao.isChildDomain(account.getDomainId(),domainId)) {
      Filter filter=new Filter(AccountVO.class,"id",Boolean.FALSE,null,null);
      List<AccountVO> accounts=_accountDao.listAccounts(accountName,domainId,filter);
      if (accounts.size() > 0) {
        userAccount=accounts.get(0);
      }
      if (userAccount != null) {
        accountId=userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
      }
    }
 else {
      throw new PermissionDeniedException("Invalid Domain Id or Account");
    }
  }
  boolean isAdmin=false;
  if (accountId == null) {
    accountId=account.getId();
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      isAdmin=true;
    }
    s_logger.debug("Account details not available. Using userContext accountId: " + accountId);
  }
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  if (startDate.after(endDate)) {
    throw new InvalidParameterValueException("Incorrect Date Range. Start date: " + startDate + " is after end date:"+ endDate);
  }
  TimeZone usageTZ=getUsageTimezone();
  Date adjustedStartDate=computeAdjustedTime(startDate,usageTZ,true);
  Date adjustedEndDate=computeAdjustedTime(endDate,usageTZ,false);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("getting usage records for account: " + accountId + ", domainId: "+ domainId+ ", between "+ startDate+ " and "+ endDate+ ", using pageSize: "+ cmd.getPageSizeVal()+ " and startIndex: "+ cmd.getStartIndex());
  }
  Filter usageFilter=new Filter(UsageVO.class,"startDate",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<UsageVO> sc=_usageDao.createSearchCriteria();
  if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin) {
    sc.addAnd("accountId",SearchCriteria.Op.EQ,accountId);
  }
  if (domainId != null) {
    sc.addAnd("domainId",SearchCriteria.Op.EQ,domainId);
  }
  if (usageType != null) {
    sc.addAnd("usageType",SearchCriteria.Op.EQ,usageType);
  }
  if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {
    sc.addAnd("startDate",SearchCriteria.Op.BETWEEN,adjustedStartDate,adjustedEndDate);
    sc.addAnd("endDate",SearchCriteria.Op.BETWEEN,adjustedStartDate,adjustedEndDate);
  }
 else {
    return new ArrayList<UsageVO>();
  }
  List<UsageVO> usageRecords=null;
  Transaction txn=Transaction.open(Transaction.USAGE_DB);
  try {
    usageRecords=_usageDao.searchAllRecords(sc,usageFilter);
  }
  finally {
    txn.close();
    Transaction swap=Transaction.open(Transaction.CLOUD_DB);
    swap.close();
  }
  cmd.setUsageTimezone(getUsageTimezone());
  return usageRecords;
}
