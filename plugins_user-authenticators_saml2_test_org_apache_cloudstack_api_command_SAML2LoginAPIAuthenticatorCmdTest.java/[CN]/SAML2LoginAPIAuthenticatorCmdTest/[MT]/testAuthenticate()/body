{
  SAML2LoginAPIAuthenticatorCmd cmd=Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());
  Field apiServerField=SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField("_apiServer");
  apiServerField.setAccessible(true);
  apiServerField.set(cmd,apiServer);
  Field managerField=SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField("_samlAuthManager");
  managerField.setAccessible(true);
  managerField.set(cmd,samlAuthManager);
  Field accountServiceField=BaseCmd.class.getDeclaredField("_accountService");
  accountServiceField.setAccessible(true);
  accountServiceField.set(cmd,accountService);
  Field entityMgrField=SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField("_entityMgr");
  entityMgrField.setAccessible(true);
  entityMgrField.set(cmd,entityMgr);
  Field domainMgrField=SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField("_domainMgr");
  domainMgrField.setAccessible(true);
  domainMgrField.set(cmd,domainMgr);
  Field configDaoField=SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField("_configDao");
  configDaoField.setAccessible(true);
  configDaoField.set(cmd,configDao);
  String spId="someSPID";
  String url="someUrl";
  X509Certificate cert=SAMLUtils.generateRandomX509Certificate();
  Mockito.when(samlAuthManager.getServiceProviderId()).thenReturn(spId);
  Mockito.when(samlAuthManager.getIdpSigningKey()).thenReturn(null);
  Mockito.when(samlAuthManager.getIdpSingleSignOnUrl()).thenReturn(url);
  Mockito.when(samlAuthManager.getSpSingleSignOnUrl()).thenReturn(url);
  Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);
  Mockito.when(configDao.getValue(Mockito.anyString())).thenReturn("someString");
  Mockito.when(domain.getId()).thenReturn(1L);
  Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);
  UserVO user=new UserVO();
  user.setUuid(SAMLUtils.createSAMLId("someUID"));
  Mockito.when(entityMgr.findByUuid(Mockito.eq(User.class),Mockito.anyString())).thenReturn((User)user);
  Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  cmd.authenticate("command",params,session,"random",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),resp);
  Mockito.verify(resp,Mockito.times(1)).sendRedirect(Mockito.anyString());
  params.put(SAMLUtils.SAML_RESPONSE,new String[]{"Some String"});
  Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());
  try {
    cmd.authenticate("command",params,session,"random",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),resp);
  }
 catch (  ServerApiException ignored) {
  }
  Mockito.verify(configDao,Mockito.atLeastOnce()).getValue(Mockito.anyString());
  Mockito.verify(domainMgr,Mockito.times(1)).getDomain(Mockito.anyString());
  Mockito.verify(entityMgr,Mockito.times(1)).findByUuid(Mockito.eq(User.class),Mockito.anyString());
  Mockito.verify(apiServer,Mockito.times(1)).verifyUser(Mockito.anyLong());
}
