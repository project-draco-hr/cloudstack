def createLogs(self, test_module_name=None, log_cfg=None):
    '\n        @Name : createLogs\n        @Desc : Gets the Logger with file paths initialized and created\n        @Inputs :test_module_name: Test Module Name to use for logs while\n                 creating log folder path\n                 log_cfg: Log Configuration provided inside of\n                 Configuration\n        @Output : SUCCESS\\FAILED\n        '
    try:
        temp_ts = time.strftime('%b_%d_%Y_%H_%M_%S', time.localtime())
        if (test_module_name is None):
            temp_path = temp_ts
        else:
            temp_path = ((str(test_module_name) + '__') + str(temp_ts))
        temp_dir = 'MarvinLogs'
        if ((log_cfg is not None) and ('LogFolderPath' in log_cfg.__dict__.keys()) and (log_cfg.__dict__.get('LogFolderPath') is not None)):
            temp_dir = (log_cfg.__dict__.get('LogFolderPath') + '/MarvinLogs')
        self.__logFolderDir = ((temp_dir + '//') + temp_path)
        print ('\n*********Log Folder Path: %s. All logs will be available here **************' % str(self.__logFolderDir))
        os.makedirs(self.__logFolderDir)
        '\n            Log File Paths\n            1. FailedExceptionLog\n            2. RunLog contains the complete Run Information for Test Run\n            3. ResultFile contains the TC result information for Test Run\n            '
        tc_failed_exception_log = (self.__logFolderDir + '/failed_plus_exceptions.txt')
        tc_run_log = (self.__logFolderDir + '/runinfo.txt')
        if (self.__setLogHandler(tc_run_log, log_level=logging.DEBUG) != FAILED):
            self.__setLogHandler(tc_failed_exception_log, log_level=logging.FATAL)
            return SUCCESS
        return FAILED
    except Exception as e:
        print ('\n Exception Occurred Under createLogs :%s' % GetDetailExceptionInfo(e))
        return FAILED
