{
  try (PreparedStatement selectConfiguration=conn.prepareStatement("select value from `cloud`.`configuration` where name=?")){
    String cpuoverprov="1";
    selectConfiguration.setString(1,"cpu.overprovisioning.factor");
    try (ResultSet configData=selectConfiguration.executeQuery()){
      if (configData.next()) {
        cpuoverprov=configData.getString(1);
      }
    }
     String memoverprov="1";
    selectConfiguration.setString(1,"mem.overprovisioning.factor");
    try (ResultSet configData=selectConfiguration.executeQuery()){
      if (configData.next()) {
        memoverprov=configData.getString(1);
      }
    }
     s_logger.debug("Starting updating user_vm_details with cpu/memory overprovisioning factors");
    try (PreparedStatement pstmt2=conn.prepareStatement("select id, hypervisor_type from `cloud`.`vm_instance` where removed is null and id not in (select vm_id from  `cloud`.`user_vm_details` where name='cpuOvercommitRatio')");PreparedStatement pstmt3=conn.prepareStatement("INSERT IGNORE INTO cloud.user_vm_details (vm_id, name, value) VALUES (?, ?, ?)");ResultSet result2=pstmt2.executeQuery()){
      while (result2.next()) {
        String hypervisor_type=result2.getString(2);
        if (hypervisor_type.equalsIgnoreCase(Hypervisor.HypervisorType.VMware.name())) {
          pstmt3.setLong(1,result2.getLong(1));
          pstmt3.setString(2,"cpuOvercommitRatio");
          pstmt3.setString(3,cpuoverprov);
          pstmt3.executeUpdate();
          pstmt3.setLong(1,result2.getLong(1));
          pstmt3.setString(2,"memoryOvercommitRatio");
          pstmt3.setString(3,memoverprov);
          pstmt3.executeUpdate();
        }
 else {
          pstmt3.setLong(1,result2.getLong(1));
          pstmt3.setString(2,"cpuOvercommitRatio");
          pstmt3.setString(3,cpuoverprov);
          pstmt3.executeUpdate();
          pstmt3.setLong(1,result2.getLong(1));
          pstmt3.setString(2,"memoryOvercommitRatio");
          pstmt3.setString(3,"1");
          pstmt3.executeUpdate();
        }
      }
    }
     s_logger.debug("Done updating user_vm_details with cpu/memory overprovisioning factors");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to update cpu/memory overprovisioning factors",e);
  }
}
