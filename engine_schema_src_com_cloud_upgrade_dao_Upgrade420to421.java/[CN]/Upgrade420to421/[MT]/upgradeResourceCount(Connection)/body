{
  s_logger.debug("upgradeResourceCount start");
  String sqlSelectAccountIds="select id, domain_id FROM `cloud`.`account` where removed is NULL ";
  String sqlSelectOfferingTotals="SELECT SUM(service_offering.cpu), SUM(service_offering.ram_size)" + " FROM `cloud`.`vm_instance`, `cloud`.`service_offering`" + " WHERE vm_instance.service_offering_id = service_offering.id AND vm_instance.account_id = ?"+ " AND vm_instance.removed is NULL"+ " AND vm_instance.vm_type='User' AND state not in ('Destroyed', 'Error', 'Expunging')";
  String sqlSelectTotalVolumeSize="SELECT sum(size) FROM `cloud`.`volumes` WHERE account_id= ?" + " AND (path is not NULL OR state in ('Allocated')) AND removed is NULL" + " AND instance_id IN (SELECT id FROM `cloud`.`vm_instance` WHERE vm_type='User')";
  String sqlSelectTotalPathlessVolumeSize="SELECT sum(size) FROM `cloud`.`volumes` WHERE account_id= ?" + " AND path is NULL AND state not in ('Allocated') AND removed is NULL";
  String sqlSelectTotalSnapshotSize="SELECT sum(size) FROM `cloud`.`snapshots` WHERE account_id= ? AND removed is NULL";
  String sqlSelectTotalTemplateStoreSize="SELECT sum(template_store_ref.size) FROM `cloud`.`template_store_ref`,`cloud`.`vm_template` WHERE account_id = ?" + " AND template_store_ref.template_id = vm_template.id AND download_state = 'DOWNLOADED' AND destroyed = false AND removed is NULL";
  String sqlSelectDomainIds="select id FROM `cloud`.`domain`";
  String sqlSelectAccountCount="select account.domain_id,sum(resource_count.count) from `cloud`.`account` left join `cloud`.`resource_count` on account.id=resource_count.account_id " + "where resource_count.type=? group by account.domain_id;";
  try (PreparedStatement pstmtSelectAccountIds=conn.prepareStatement(sqlSelectAccountIds);PreparedStatement pstmtSelectOfferingTotals=conn.prepareStatement(sqlSelectOfferingTotals);PreparedStatement pstmtSelectTotalVolumeSize=conn.prepareStatement(sqlSelectTotalVolumeSize);PreparedStatement pstmtSelectTotalPathlessVolumeSize=conn.prepareStatement(sqlSelectTotalPathlessVolumeSize);PreparedStatement pstmtSelectTotalSnapshotSize=conn.prepareStatement(sqlSelectTotalSnapshotSize);PreparedStatement pstmtSelectTotalTemplateStoreSize=conn.prepareStatement(sqlSelectTotalTemplateStoreSize);PreparedStatement pstmtSelectDomainIds=conn.prepareStatement(sqlSelectDomainIds);PreparedStatement pstmtSelectAccountCount=conn.prepareStatement(sqlSelectAccountCount);ResultSet rsAccount=pstmtSelectAccountIds.executeQuery()){
    while (rsAccount.next()) {
      long account_id=rsAccount.getLong(1);
      long domain_id=rsAccount.getLong(2);
      pstmtSelectOfferingTotals.setLong(1,account_id);
      try (ResultSet rsOfferingTotals=pstmtSelectOfferingTotals.executeQuery()){
        if (rsOfferingTotals.next()) {
          upgradeResourceCountforAccount(conn,account_id,domain_id,"cpu",rsOfferingTotals.getLong(1));
          upgradeResourceCountforAccount(conn,account_id,domain_id,"memory",rsOfferingTotals.getLong(2));
        }
 else {
          upgradeResourceCountforAccount(conn,account_id,domain_id,"cpu",0L);
          upgradeResourceCountforAccount(conn,account_id,domain_id,"memory",0L);
        }
      }
       pstmtSelectTotalVolumeSize.setLong(1,account_id);
      try (ResultSet rsTotalVolumeSize=pstmtSelectTotalVolumeSize.executeQuery()){
        if (rsTotalVolumeSize.next()) {
          upgradeResourceCountforAccount(conn,account_id,domain_id,"primary_storage",rsTotalVolumeSize.getLong(1));
        }
 else {
          upgradeResourceCountforAccount(conn,account_id,domain_id,"primary_storage",0L);
        }
      }
       long totalVolumesSize=0;
      long totalSnapshotsSize=0;
      long totalTemplatesSize=0;
      pstmtSelectTotalPathlessVolumeSize.setLong(1,account_id);
      try (ResultSet rsTotalPathlessVolumeSize=pstmtSelectTotalPathlessVolumeSize.executeQuery()){
        if (rsTotalPathlessVolumeSize.next()) {
          totalVolumesSize=rsTotalPathlessVolumeSize.getLong(1);
        }
      }
       pstmtSelectTotalSnapshotSize.setLong(1,account_id);
      try (ResultSet rsTotalSnapshotSize=pstmtSelectTotalSnapshotSize.executeQuery()){
        if (rsTotalSnapshotSize.next()) {
          totalSnapshotsSize=rsTotalSnapshotSize.getLong(1);
        }
      }
       pstmtSelectTotalTemplateStoreSize.setLong(1,account_id);
      try (ResultSet rsTotalTemplateStoreSize=pstmtSelectTotalTemplateStoreSize.executeQuery()){
        if (rsTotalTemplateStoreSize.next()) {
          totalTemplatesSize=rsTotalTemplateStoreSize.getLong(1);
        }
      }
       upgradeResourceCountforAccount(conn,account_id,domain_id,"secondary_storage",totalVolumesSize + totalSnapshotsSize + totalTemplatesSize);
    }
    rsAccount.close();
    String resource_types[]={"cpu","memory","primary_storage","secondary_storage"};
    try (ResultSet rsDomainIds=pstmtSelectDomainIds.executeQuery()){
      while (rsDomainIds.next()) {
        long domain_id=rsDomainIds.getLong(1);
        for (int count=0; count < resource_types.length; count++) {
          String resource_type=resource_types[count];
          upgradeResourceCountforDomain(conn,domain_id,resource_type,0L);
        }
      }
    }
     for (int count=0; count < resource_types.length; count++) {
      String resource_type=resource_types[count];
      pstmtSelectAccountCount.setString(1,resource_type);
      try (ResultSet rsAccountCount=pstmtSelectAccountCount.executeQuery()){
        while (rsAccountCount.next()) {
          long domain_id=rsAccountCount.getLong(1);
          long resource_count=rsAccountCount.getLong(2);
          upgradeResourceCountforDomain(conn,domain_id,resource_type,resource_count);
        }
      }
     }
    s_logger.debug("upgradeResourceCount finish");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
  }
}
