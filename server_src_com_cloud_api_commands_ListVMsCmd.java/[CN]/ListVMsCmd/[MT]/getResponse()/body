{
  List<UserVmVO> userVms=(List<UserVmVO>)getResponseObject();
  List<UserVmResponse> response=new ArrayList<UserVmResponse>();
  for (  UserVmVO userVm : userVms) {
    UserVmResponse userVmResponse=new UserVmResponse();
    userVmResponse.setId(userVm.getId());
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob("vm_instance",userVm.getId());
    if (asyncJob != null) {
      userVmResponse.setJobId(asyncJob.getId());
      userVmResponse.setJobStatus(asyncJob.getStatus());
    }
    userVmResponse.setName(userVm.getName());
    userVmResponse.setCreated(userVm.getCreated());
    userVmResponse.setPrivateIp(userVm.getPrivateIpAddress());
    if (userVm.getState() != null) {
      userVmResponse.setState(userVm.getState().toString());
    }
    Account acct=getManagementServer().findAccountById(Long.valueOf(userVm.getAccountId()));
    if (acct != null) {
      userVmResponse.setAccountName(acct.getAccountName());
      userVmResponse.setDomainId(acct.getDomainId());
      userVmResponse.setDomainName(getManagementServer().findDomainIdById(acct.getDomainId()).getName());
    }
    userVmResponse.setHaEnable(userVm.isHaEnabled());
    if (userVm.getDisplayName() != null) {
      userVmResponse.setDisplayName(userVm.getDisplayName());
    }
 else {
      userVmResponse.setDisplayName(userVm.getName());
    }
    userVmResponse.setGroup(userVm.getGroup());
    userVmResponse.setZoneId(userVm.getDataCenterId());
    userVmResponse.setZoneName(getManagementServer().findDataCenterById(userVm.getDataCenterId()).getName());
    Account account=(Account)UserContext.current().getAccountObject();
    if (((account == null) || isAdmin(account.getType())) && (userVm.getHostId() != null)) {
      userVmResponse.setHostId(userVm.getHostId());
      userVmResponse.setHostName(getManagementServer().getHostBy(userVm.getHostId()).getName());
    }
    VMTemplateVO template=getManagementServer().findTemplateById(userVm.getTemplateId());
    if (template != null) {
      userVmResponse.setTemplateId(userVm.getTemplateId());
      userVmResponse.setTemplateName(template.getName());
      userVmResponse.setTemplateDisplayText(template.getDisplayText());
      userVmResponse.setPasswordEnabled(template.getEnablePassword());
    }
 else {
      userVmResponse.setTemplateId(-1L);
      userVmResponse.setTemplateName("ISO Boot");
      userVmResponse.setTemplateDisplayText("ISO Boot");
      userVmResponse.setPasswordEnabled(false);
    }
    if (userVm.getIsoId() != null) {
      VMTemplateVO iso=getManagementServer().findTemplateById(userVm.getIsoId().longValue());
      if (iso != null) {
        userVmResponse.setIsoId(userVm.getIsoId());
        userVmResponse.setIsoName(iso.getName());
      }
    }
    ServiceOfferingVO offering=getManagementServer().findServiceOfferingById(vmInstance.getServiceOfferingId());
    userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
    userVmResponse.setServiceOfferingName(offering.getName());
    userVmResponse.setCpuNumber(offering.getCpu());
    userVmResponse.setCpuSpeed(offering.getSpeed());
    userVmResponse.setMemory(offering.getRamSize());
    DecimalFormat decimalFormat=new DecimalFormat("#.##");
    String cpuUsed=null;
    VmStats vmStats=getManagementServer().getVmStatistics(userVm.getId());
    if (vmStats != null) {
      float cpuUtil=(float)vmStats.getCPUUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + "%";
      userVmResponse.setCpuUsed(cpuUsed);
      long networkKbRead=(long)vmStats.getNetworkReadKBs();
      userVmResponse.setNetworkKbsRead(networkKbRead);
      long networkKbWrite=(long)vmStats.getNetworkWriteKBs();
      userVmResponse.setNetworkKbsWrite(networkKbWrite);
    }
    userVmResponse.setOsTypeId(userVm.getGuestOSId());
    userVmResponse.setNetworkGroupList(getManagementServer().getNetworkGroupsNamesForVm(userVm.getId()));
    response.add(userVmResponse);
  }
  return SerializerHelper.toSerializedString(response);
}
