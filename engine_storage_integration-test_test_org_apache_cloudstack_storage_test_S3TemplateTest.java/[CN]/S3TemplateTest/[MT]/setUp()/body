{
  ComponentContext.initComponentsLifeCycle();
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),"test","8.8.8.8",null,"10.0.0.1",null,"10.0.0.1/24",null,null,NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  Map<String,Object> sParams=new HashMap<String,Object>();
  sParams.put("name","test");
  sParams.put("protocol","http");
  sParams.put("providerName","S3");
  sParams.put("scope",ScopeType.REGION);
  sParams.put("role",DataStoreRole.Image);
  Map<String,String> sDetails=new HashMap<String,String>();
  sDetails.put(ApiConstants.S3_ACCESS_KEY,this.getS3AccessKey());
  sDetails.put(ApiConstants.S3_SECRET_KEY,this.getS3SecretKey());
  sDetails.put(ApiConstants.S3_BUCKET_NAME,this.getS3TemplateBucket());
  sDetails.put(ApiConstants.S3_END_POINT,this.getS3EndPoint());
  this.imageStoreHelper.createImageStore(sParams,sDetails);
  VMTemplateVO image=new VMTemplateVO();
  image.setTemplateType(TemplateType.SYSTEM);
  image.setUrl(this.getTemplateUrl());
  image.setUniqueName(UUID.randomUUID().toString());
  image.setName(UUID.randomUUID().toString());
  image.setPublicTemplate(false);
  image.setFeatured(false);
  image.setRequiresHvm(false);
  image.setBits(64);
  image.setFormat(Storage.ImageFormat.VHD);
  image.setEnablePassword(false);
  image.setEnableSshKey(false);
  image.setGuestOSId(133);
  image.setBootable(true);
  image.setPrepopulate(true);
  image.setCrossZones(true);
  image.setExtractable(true);
  image=templateDao.persist(image);
  templateId=image.getId();
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Mockito.any(DataObject.class))).thenReturn(ep);
  Mockito.when(epSelector.select(Mockito.any(DataStore.class))).thenReturn(ep);
}
