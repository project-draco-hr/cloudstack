@attr(tags=['advanced'])
def test_change_persistent_network_to_non_persistent(self):
    account = Account.create(self.api_client, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    network = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.isolated_persistent_network_offering.id, accountid=account.name, domainid=self.domain.id, zoneid=self.zone.id)
    self.assertEqual(str(network.state).lower(), 'implemented', ('network state should be implemented, it is %s' % network.state))
    self.assertIsNotNone(network.vlan, 'vlan must not be null for persistent network')
    network.update(self.apiclient, networkofferingid=self.isolated_network_offering.id)
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    self.debug(('Associating public IP for network: %s' % network.id))
    ipaddress = PublicIPAddress.create(self.api_client, accountid=account.name, zoneid=self.zone.id, domainid=account.domainid, networkid=network.id)
    FireWallRule.create(self.apiclient, ipaddressid=ipaddress.ipaddress.id, protocol='TCP', cidrlist=[self.services['fwrule']['cidr']], startport=self.services['fwrule']['startport'], endport=self.services['fwrule']['endport'])
    NATRule.create(self.api_client, virtual_machine, self.services['natrule'], ipaddressid=ipaddress.ipaddress.id, networkid=network.id)
    try:
        virtual_machine.get_ssh_client(ipaddress=ipaddress.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('Exception while SSHing to VM %s with IP %s' % (virtual_machine.id, ipaddress.ipaddress.ipaddress)))
    virtual_machine.delete(self.api_client)
    self.verifyVmExpungement(virtual_machine)
    wait_for_cleanup(self.api_client, ['network.gc.interval', 'network.gc.wait'])
    response = verifyNetworkState(self.api_client, network.id, 'allocated')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    return
