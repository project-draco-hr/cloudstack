@classmethod
def setUpClass(cls):
    cls.testClient = super(TestPersistentNetworks, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.isolated_persistent_network_offering = cls.createNetworkOffering('nw_off_isolated_persistent')
    cls.isolated_persistent_network_offering_netscaler = cls.createNetworkOffering('nw_off_isolated_persistent_netscaler')
    cls.isolated_persistent_network_offering_RVR = cls.createNetworkOffering('nw_off_persistent_RVR')
    cls.isolated_network_offering = cls.createNetworkOffering('isolated_network_offering')
    cls.isolated_network_offering_netscaler = cls.createNetworkOffering('nw_off_isolated_netscaler')
    cls.services['configurableData']['netscaler']['lbdevicededicated'] = False
    cls.ns_configured = False
    try:
        cls.netscaler = add_netscaler(cls.api_client, cls.zone.id, cls.services['configurableData']['netscaler'])
        cls._cleanup.append(cls.netscaler)
        cls.ns_configured = True
    except Exception:
        cls.ns_configured = False
    cls._cleanup = [cls.account, cls.service_offering, cls.isolated_persistent_network_offering, cls.isolated_network_offering, cls.isolated_persistent_network_offering_RVR, cls.isolated_persistent_network_offering_netscaler, cls.isolated_network_offering_netscaler]
    return
