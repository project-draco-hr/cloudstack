@attr(tags=['advanced'], required_hardware='false')
def test_network_state_after_destroying_vms(self):
    network = Network.create(self.apiclient, self.services['isolated_network'], networkofferingid=self.isolated_persistent_network_offering.id, accountid=self.account.name, domainid=self.domain.id, zoneid=self.zone.id)
    self.cleanup.append(network)
    response = verifyNetworkState(self.apiclient, network.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(network.vlan, 'vlan must not be null for persistent network')
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.domain.id)
        virtual_machine.delete(self.apiclient)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    self.verifyVmExpungement(virtual_machine)
    wait_for_cleanup(self.api_client, ['network.gc.interval', 'network.gc.wait'])
    verifyNetworkState(self.api_client, network.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    return
