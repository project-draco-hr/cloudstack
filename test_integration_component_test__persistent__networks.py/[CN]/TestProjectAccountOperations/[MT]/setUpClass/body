@classmethod
def setUpClass(cls):
    cls.testClient = super(TestProjectAccountOperations, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.isolated_persistent_network_offering = NetworkOffering.create(cls.api_client, cls.services['nw_off_isolated_persistent'], conservemode=False)
    cls.isolated_persistent_network_offering.update(cls.api_client, state='enabled')
    cls._cleanup = [cls.service_offering, cls.isolated_persistent_network_offering]
    return
