@data('locked', 'disabled')
@attr(tags=['advanced'])
def test_account_operations(self, value):
    account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    network = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.isolated_persistent_network_offering.id, accountid=account.name, domainid=self.domain.id, zoneid=self.zone.id)
    response = verifyNetworkState(self.api_client, network.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(network.vlan, 'vlan must not be null for persistent network')
    if (value == 'disabled'):
        account.disable(self.apiclient)
    elif (value == 'locked'):
        account.disable(self.apiclient, lock=True)
    accounts = Account.list(self.apiclient, id=account.id)
    self.assertEqual(validateList(accounts)[0], PASS, ('accounts list validation failed, list id %s' % accounts))
    self.assertEqual(str(accounts[0].state).lower(), value, ('account state should be %s, it is %s' % (value, accounts[0].state)))
    wait_for_cleanup(self.api_client, ['network.gc.interval', 'network.gc.wait'])
    networks = Network.list(self.apiclient, account=account.name, domainid=account.domainid)
    self.assertEqual(validateList(networks)[0], PASS, ('networks list validation failed, list is %s' % networks))
    response = verifyNetworkState(self.api_client, networks[0].id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(networks[0].vlan, 'vlan must not be null for persistent network')
    return
