@unittest.skip('WIP')
@attr(tags=['advanced'])
def test_vpc_private_gateway_static_route(self):
    account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=account.name, domainid=account.domainid)
    vpcs = VPC.list(self.apiclient, id=vpc.id)
    self.assertEqual(validateList(vpcs)[0], PASS, ('VPC list validation failed, vpc list is %s' % vpcs))
    persistent_network_1 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_NoLB.id, accountid=account.name, domainid=account.domainid, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.1.1', netmask='255.255.255.0')
    response = verifyNetworkState(self.apiclient, persistent_network_1.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(persistent_network_1.vlan, ('vlan must not be null for persistent network %s' % persistent_network_1.id))
    persistent_network_2 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_LB.id, accountid=account.name, domainid=account.domainid, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.2.1', netmask='255.255.255.0')
    response = verifyNetworkState(self.apiclient, persistent_network_2.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(persistent_network_2.vlan, ('vlan must not be null for persistent network: %s' % persistent_network_2.id))
    try:
        virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_1.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_1.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_2.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_4 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_2.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    ipaddress_1 = self.GetAssociatedIpForNetwork(persistent_network_1.id, vpcid=vpc.id, account=account)
    ipaddress_2 = self.GetAssociatedIpForNetwork(persistent_network_1.id, vpcid=vpc.id, account=account)
    ipaddress_3 = self.GetAssociatedIpForNetwork(persistent_network_2.id, vpcid=vpc.id, account=account)
    NATRule.create(self.api_client, virtual_machine_1, self.services['natrule'], ipaddressid=ipaddress_1.ipaddress.id, networkid=persistent_network_1.id)
    StaticNATRule.enable(self.apiclient, ipaddressid=ipaddress_2.ipaddress.id, virtualmachineid=virtual_machine_2.id, networkid=persistent_network_1.id)
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ipaddress_3.ipaddress.id, accountid=account.name, networkid=persistent_network_2.id, domainid=account.domainid)
    lb_rule.assign(self.api_client, [virtual_machine_3, virtual_machine_4])
    (ingressAclNetwork1, egressAclNetwork1) = self.CreateIngressEgressNetworkACLForNetwork(persistent_network_1.id)
    (ingressAclNetwork2, egressAclNetwork2) = self.CreateIngressEgressNetworkACLForNetwork(persistent_network_2.id)
    'private_gateway = PrivateGateway.create(\n            self.apiclient,gateway=\'10.1.4.1\',\n            ipaddress=\'10.1.4.100\',\n            netmask=\'255.255.255.0\',\n            vlan=679,\n            vpcid=vpc.id)\n\n        gateways = PrivateGateway.list(\n            self.apiclient,\n            id=private_gateway.id,\n            listall=True)\n        self.assertEqual(\n            validateList(gateways)[0],\n            PASS,\n            "gateways list validation failed, list is %s" % gateways\n            )\n\n        static_route = StaticRoute.create(\n            self.apiclient,\n            cidr=\'11.1.1.1/24\',\n            gatewayid=private_gateway.id)\n        static_routes = StaticRoute.list(\n            self.apiclient,\n            id=static_route.id,\n            listall=True)\n        self.assertEqual(\n            validateList(static_routes)[0],\n            PASS,\n            "static routes list validation failed, list is %s"\n            % static_routes)'
    self.CheckIngressEgressConnectivityofVM(virtual_machine_1, ipaddress_1.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_2, ipaddress_2.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_3, ipaddress_3.ipaddress.ipaddress)
    'self.CheckIngressEgressConnectivityofVM(virtual_machine_4,\n        ipaddress_3.ipaddress.ipaddress)'
    vpc.restart(self.apiclient)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_1, ipaddress_1.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_2, ipaddress_2.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_3, ipaddress_3.ipaddress.ipaddress)
    'self.CheckIngressEgressConnectivityofVM(virtual_machine_4,\n        ipaddress_3.ipaddress.ipaddress)'
    return
