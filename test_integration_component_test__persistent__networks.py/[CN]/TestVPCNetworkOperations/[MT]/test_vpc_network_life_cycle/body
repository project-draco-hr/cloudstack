@data('delete', 'restart')
@attr(tags=['advanced'])
def test_vpc_network_life_cycle(self, value):
    account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(account)
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    self.debug(('creating a VPC network in the account: %s' % account.name))
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=account.name, domainid=account.domainid)
    vpcs = VPC.list(self.apiclient, id=vpc.id)
    self.assertEqual(validateList(vpcs)[0], PASS, ('VPC list validation failed, vpc list is %s' % vpcs))
    VpcRouters = Router.list(self.apiclient, vpcid=vpc.id, listall=True)
    self.assertEqual(validateList(VpcRouters)[0], PASS, ('VpcRouters list validation failed, list is %s' % VpcRouters))
    vpcrouter = VpcRouters[0]
    publicipaddresses = PublicIPAddress.list(self.apiclient, vpcid=vpc.id, listall=True)
    self.assertEqual(validateList(publicipaddresses)[0], PASS, ('Public IP Addresses list validation failed, list is %s' % publicipaddresses))
    persistent_network_1 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_NoLB.id, accountid=account.name, domainid=self.domain.id, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.1.1', netmask='255.255.255.0')
    response = verifyNetworkState(self.apiclient, persistent_network_1.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(persistent_network_1.vlan, ('vlan must not be null for persistent network %s' % persistent_network_1.id))
    persistent_network_2 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_NoLB.id, accountid=account.name, domainid=self.domain.id, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.2.1', netmask='255.255.255.0')
    response = verifyNetworkState(self.apiclient, persistent_network_2.id, 'implemented')
    exceptionOccured = response[0]
    isNetworkInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not isNetworkInDesiredState)):
        self.fail(exceptionMessage)
    self.assertIsNotNone(persistent_network_2.vlan, ('vlan must not be null for persistent network: %s' % persistent_network_2.id))
    if (value == 'restart'):
        vpc.restart(self.apiclient)
        response = verifyNetworkState(self.apiclient, persistent_network_1.id, 'implemented')
        exceptionOccured = response[0]
        isNetworkInDesiredState = response[1]
        exceptionMessage = response[2]
        if (exceptionOccured or (not isNetworkInDesiredState)):
            self.fail(exceptionMessage)
        response = verifyNetworkState(self.apiclient, persistent_network_2.id, 'implemented')
        exceptionOccured = response[0]
        isNetworkInDesiredState = response[1]
        exceptionMessage = response[2]
        if (exceptionOccured or (not isNetworkInDesiredState)):
            self.fail(exceptionMessage)
    elif (value == 'delete'):
        vpc.delete(self.apiclient)
        vpcs = VPC.list(self.apiclient, id=vpc.id)
        self.assertEqual(validateList(vpcs)[0], FAIL, ('vpc list should be empty, list is %s' % vpcs))
        routers = Router.list(self.apiclient, id=vpcrouter.id)
        self.assertEqual(validateList(routers)[0], FAIL, ('routers list should be empty, it is %s' % routers))
        ipaddresses = PublicIPAddress.list(self.apiclient, id=publicipaddresses[0].id)
        self.assertEqual(validateList(ipaddresses)[0], FAIL, ('public ip addresses list should be empty, list is %s' % ipaddresses))
    return
