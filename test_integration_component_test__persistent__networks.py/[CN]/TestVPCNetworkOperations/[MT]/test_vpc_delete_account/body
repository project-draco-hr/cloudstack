@attr(tags=['advanced'])
def test_vpc_delete_account(self):
    account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.services['vpc']['cidr'] = '10.1.1.1/16'
    vpc = VPC.create(self.apiclient, self.services['vpc'], vpcofferingid=self.vpc_off.id, zoneid=self.zone.id, account=account.name, domainid=account.domainid)
    vpcs = VPC.list(self.apiclient, id=vpc.id)
    self.assertEqual(validateList(vpcs)[0], PASS, ('VPC list validation failed, vpc list is %s' % vpcs))
    persistent_network_1 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_NoLB.id, accountid=account.name, domainid=account.domainid, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.1.1', netmask='255.255.255.0')
    verifyNetworkState(self.apiclient, persistent_network_1.id, 'implemented')
    self.assertIsNotNone(persistent_network_1.vlan, ('vlan must not be null for persistent network %s' % persistent_network_1.id))
    persistent_network_2 = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.persistent_network_offering_LB.id, accountid=account.name, domainid=account.domainid, zoneid=self.zone.id, vpcid=vpc.id, gateway='10.1.2.1', netmask='255.255.255.0')
    verifyNetworkState(self.apiclient, persistent_network_2.id, 'implemented')
    self.assertIsNotNone(persistent_network_2.vlan, ('vlan must not be null for persistent network: %s' % persistent_network_2.id))
    try:
        virtual_machine_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_1.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_1.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_3 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_2.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
        virtual_machine_4 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[persistent_network_2.id], serviceofferingid=self.service_offering.id, accountid=account.name, domainid=self.domain.id)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    ipaddress_1 = self.GetAssociatedIpForNetwork(persistent_network_1.id, vpcid=vpc.id, account=account)
    ipaddress_2 = self.GetAssociatedIpForNetwork(persistent_network_1.id, vpcid=vpc.id, account=account)
    ipaddress_3 = self.GetAssociatedIpForNetwork(persistent_network_2.id, vpcid=vpc.id, account=account)
    NATRule.create(self.api_client, virtual_machine_1, self.services['natrule'], ipaddressid=ipaddress_1.ipaddress.id, networkid=persistent_network_1.id)
    StaticNATRule.enable(self.apiclient, ipaddressid=ipaddress_2.ipaddress.id, virtualmachineid=virtual_machine_2.id, networkid=persistent_network_1.id)
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ipaddress_3.ipaddress.id, accountid=account.name, networkid=persistent_network_2.id, domainid=account.domainid)
    lb_rule.assign(self.api_client, [virtual_machine_3, virtual_machine_4])
    (ingressAclNetwork1, egressAclNetwork1) = self.CreateIngressEgressNetworkACLForNetwork(persistent_network_1.id)
    (ingressAclNetwork2, egressAclNetwork2) = self.CreateIngressEgressNetworkACLForNetwork(persistent_network_2.id)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_1, ipaddress_1.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_2, ipaddress_2.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_3, ipaddress_3.ipaddress.ipaddress)
    self.CheckIngressEgressConnectivityofVM(virtual_machine_4, ipaddress_3.ipaddress.ipaddress)
    account.delete(self.apiclient)
    self.debug(('Waiting for account.cleanup.interval' + ' to cleanup any remaining resouces'))
    wait_for_cleanup(self.apiclient, (['account.cleanup.interval'] * 3))
    self.VerifyVpcCleanup(vpc.id)
    self.VerifyNetworkCleanup(persistent_network_1.id)
    self.VerifyNetworkCleanup(persistent_network_2.id)
    self.VerifyVirtualMachineCleanup(virtual_machine_1.id)
    self.VerifyVirtualMachineCleanup(virtual_machine_2.id)
    self.VerifyVirtualMachineCleanup(virtual_machine_3.id)
    self.VerifyVirtualMachineCleanup(virtual_machine_4.id)
    self.VerifyAclRuleCleanup(ingressAclNetwork1.id)
    self.VerifyAclRuleCleanup(egressAclNetwork1.id)
    self.VerifyAclRuleCleanup(ingressAclNetwork2.id)
    self.VerifyAclRuleCleanup(egressAclNetwork2.id)
    return
