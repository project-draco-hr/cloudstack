def createTestClient(self):
    '\n        @Name : createTestClient\n        @Desc : Creates the Test Client.\n                The test Client is used by test suites\n                Here we create ParsedTestData Config.\n                Creates a DB Connection.\n                Creates an API Client\n        @Output : FAILED In case of an issue\\Failure\n                  SUCCESS in case of Success of this function\n        '
    try:
        '\n            1. Create Config Object\n               Provides the Configuration Object to test suites through\n               getConfigParser. The purpose of this config object is to\n               parse the default config and provide dictionary of the\n               config so users can use that configuration.\n               Users can later call getConfig on this object and it will\n               return the default parsed config dictionary from default\n               configuration file. They can overwrite it with\n               providing their own configuration file as well.\n            '
        '\n            1. Check Config,Zone,Hypervisor Information\n            '
        self.__configObj = ConfigManager(self.__testDataFilePath)
        if ((not self.__configObj) or (not self.__hypervisor)):
            self.__logger.error('createTestClient : Either Hypervisor is None or Not able to create ConfigManager Object')
            return FAILED
        self.__parsedTestDataConfig = self.__configObj.getConfig()
        self.__logger.debug('Parsing Test data successful')
        '\n            2. Create DB Connection\n            '
        self.__createDbConnection()
        '\n            3. Creates API Client\n            '
        ret = self.__createApiClient()
        if (ret == FAILED):
            self.__logger.error('==== Test Client Creation Failed ====')
        else:
            self.__logger.debug('==== Test Client Creation Successful ====')
        return ret
    except Exception as e:
        self.__logger.exception(('Exception Occurred Under createTestClient : %s' % GetDetailExceptionInfo(e)))
        return FAILED
