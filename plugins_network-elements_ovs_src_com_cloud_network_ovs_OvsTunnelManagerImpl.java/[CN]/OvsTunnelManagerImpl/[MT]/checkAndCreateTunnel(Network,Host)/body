{
  logger.debug("Creating tunnels with OVS tunnel manager");
  long hostId=host.getId();
  int key=getGreKey(nw);
  String bridgeName=generateBridgeName(nw,key);
  List<Long> toHostIds=new ArrayList<Long>();
  List<Long> fromHostIds=new ArrayList<Long>();
  List<Long> networkSpannedHosts=_ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());
  for (  Long rh : networkSpannedHosts) {
    if (rh == hostId) {
      continue;
    }
    OvsTunnelNetworkVO ta=_tunnelNetworkDao.getByFromToNetwork(hostId,rh.longValue(),nw.getId());
    if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
      logger.debug("Attempting to create tunnel from:" + hostId + " to:"+ rh.longValue());
      if (ta == null) {
        createTunnelRecord(hostId,rh.longValue(),nw.getId(),key);
      }
      if (!toHostIds.contains(rh)) {
        toHostIds.add(rh);
      }
    }
    ta=_tunnelNetworkDao.getByFromToNetwork(rh.longValue(),hostId,nw.getId());
    if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
      logger.debug("Attempting to create tunnel from:" + rh.longValue() + " to:"+ hostId);
      if (ta == null) {
        createTunnelRecord(rh.longValue(),hostId,nw.getId(),key);
      }
      if (!fromHostIds.contains(rh)) {
        fromHostIds.add(rh);
      }
    }
  }
  try {
    String myIp=getGreEndpointIP(host,nw);
    if (myIp == null)     throw new GreTunnelException("Unable to retrieve the source " + "endpoint for the GRE tunnel." + "Failure is on host:"+ host.getId());
    boolean noHost=true;
    for (    Long i : toHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      if (otherIp == null)       throw new GreTunnelException("Unable to retrieve the remote " + "endpoint for the GRE tunnel." + "Failure is on host:"+ rHost.getId());
      Commands cmds=new Commands(new OvsCreateTunnelCommand(otherIp,key,Long.valueOf(hostId),i,nw.getId(),myIp,bridgeName,nw.getUuid()));
      logger.debug("Attempting to create tunnel from:" + hostId + " to:"+ i+ " for the network "+ nw.getId());
      logger.debug("Ask host " + hostId + " to create gre tunnel to "+ i);
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    for (    Long i : fromHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      Commands cmds=new Commands(new OvsCreateTunnelCommand(myIp,key,i,Long.valueOf(hostId),nw.getId(),otherIp,bridgeName,nw.getUuid()));
      logger.debug("Ask host " + i + " to create gre tunnel to "+ hostId);
      Answer[] answers=_agentMgr.send(i,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    if (noHost) {
      Commands cmds=new Commands(new OvsSetupBridgeCommand(bridgeName,hostId,nw.getId()));
      logger.debug("Ask host " + hostId + " to configure bridge for network:"+ nw.getId());
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleSetupBridgeAnswer(answers);
    }
  }
 catch (  GreTunnelException|OperationTimedoutException|AgentUnavailableException e) {
    logger.warn("Ovs Tunnel network created tunnel failed",e);
  }
}
