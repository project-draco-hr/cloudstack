{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Deallocate network: networkId: " + nic.getNetworkId() + ", ip: "+ nic.getIPv4Address());
  }
  if (nic.getIPv4Address() != null) {
    final IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIPv4Address());
    if (ip != null) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
          if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {
            s_logger.debug("Not releasing direct ip " + ip.getId() + " yet as its ip is saved in the placeholder");
          }
 else {
            _ipAddrMgr.markIpAsUnavailable(ip.getId());
            _ipAddressDao.unassignIpAddress(ip.getId());
          }
          s_logger.debug("remove nic " + nic.getId() + " secondary ip ");
          List<String> nicSecIps=null;
          nicSecIps=_nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());
          for (          String secIp : nicSecIps) {
            IPAddressVO pubIp=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),secIp);
            _ipAddrMgr.markIpAsUnavailable(pubIp.getId());
            _ipAddressDao.unassignIpAddress(pubIp.getId());
          }
        }
      }
);
    }
  }
  if (nic.getIPv6Address() != null) {
    _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(),nic.getIPv6Address());
  }
  nic.deallocate();
}
