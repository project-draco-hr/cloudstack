{
  final List<NicVO> nics=_nicDao.listPlaceholderNicsByNetworkId(network.getId());
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      Nic nic : nics) {
        if (nic.getIp4Address() != null) {
          s_logger.debug("Releasing ip " + nic.getIp4Address() + " of placeholder nic "+ nic);
          IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIp4Address());
          _ipAddrMgr.markIpAsUnavailable(ip.getId());
          _ipAddressDao.unassignIpAddress(ip.getId());
          s_logger.debug("Removing placeholder nic " + nic);
          _nicDao.remove(nic.getId());
        }
      }
    }
  }
);
  return true;
}
