{
  try {
    Transaction.executeWithException(new TransactionCallbackWithException<Object>(){
      @Override public Object doInTransaction(      TransactionStatus status) throws InsufficientCapacityException {
        _ipAddrMgr.allocateDirectIp(nic,dc,vm,network,requestedIp4Addr,requestedIp6Addr);
        if (vm.getType() == VirtualMachine.Type.DomainRouter) {
          Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
          if (placeholderNic == null) {
            s_logger.debug("Saving placeholder nic with ip4 address " + nic.getIp4Address() + " and ipv6 address "+ nic.getIp6Address()+ " for the network "+ network);
            _networkMgr.savePlaceholderNic(network,nic.getIp4Address(),nic.getIp6Address(),VirtualMachine.Type.DomainRouter);
          }
        }
        return null;
      }
    }
,InsufficientCapacityException.class);
  }
 catch (  InsufficientCapacityException e) {
    ExceptionUtil.rethrow(e,InsufficientVirtualNetworkCapcityException.class);
    ExceptionUtil.rethrow(e,InsufficientAddressCapacityException.class);
    throw new IllegalStateException(e);
  }
}
