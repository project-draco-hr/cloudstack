{
  try {
    Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException {
        if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {
          _ipAddrMgr.allocateDirectIp(nic,dc,vm,network,requestedIp4Addr,requestedIp6Addr);
        }
 else {
          if (vm.getType() == VirtualMachine.Type.DomainRouter) {
            Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
            if (placeholderNic == null) {
              s_logger.debug("Saving placeholder nic with ip4 address " + nic.getIp4Address() + " and ipv6 address "+ nic.getIp6Address()+ " for the network "+ network);
              _networkMgr.savePlaceholderNic(network,nic.getIp4Address(),nic.getIp6Address(),VirtualMachine.Type.DomainRouter);
            }
          }
        }
      }
    }
);
  }
 catch (  InsufficientCapacityException e) {
    ExceptionUtil.rethrow(e,InsufficientVirtualNetworkCapacityException.class);
    ExceptionUtil.rethrow(e,InsufficientAddressCapacityException.class);
    throw new IllegalStateException(e);
  }
}
