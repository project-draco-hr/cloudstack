{
  File file;
  this.closeFile();
  LogLog.debug("rolling over count=" + ((CountingQuietWriter)qw).getCount());
  LogLog.debug("maxSizeRollBackups = " + maxSizeRollBackups);
  LogLog.debug("curSizeRollBackups = " + curSizeRollBackups);
  LogLog.debug("countDirection = " + countDirection);
  if (maxSizeRollBackups != 0) {
    if (countDirection < 0) {
      if (curSizeRollBackups == maxSizeRollBackups) {
        deleteFile(fileName + '.' + maxSizeRollBackups);
        curSizeRollBackups--;
      }
      for (int i=curSizeRollBackups; i >= 1; i--) {
        rollFile((fileName + "." + i),(fileName + '.' + (i + 1)));
      }
      curSizeRollBackups++;
      rollFile(fileName,fileName + ".1");
    }
 else     if (countDirection == 0) {
      curSizeRollBackups++;
      now.setTime(System.currentTimeMillis());
      scheduledFilename=fileName + sdf.format(now);
      rollFile(fileName,scheduledFilename);
    }
 else {
      if (curSizeRollBackups >= maxSizeRollBackups && maxSizeRollBackups > 0) {
        int oldestFileIndex=curSizeRollBackups - maxSizeRollBackups + 1;
        deleteFile(fileName + '.' + oldestFileIndex);
      }
      if (staticLogFileName) {
        curSizeRollBackups++;
        rollFile(fileName,fileName + '.' + curSizeRollBackups);
      }
    }
  }
  try {
    this.setFile(baseFileName,false);
  }
 catch (  IOException e) {
    LogLog.error("setFile(" + fileName + ", false) call failed.",e);
  }
}
