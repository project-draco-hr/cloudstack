{
  org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[11].getName());
  _operationClient.getOptions().setAction("CreateNetworkAclEntry");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
  org.apache.axiom.soap.SOAPEnvelope env=null;
  final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();
  env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),createNetworkAclEntry22,optimizeContent(new javax.xml.namespace.QName("http://ec2.amazonaws.com/doc/2012-08-15/","createNetworkAclEntry")));
  _serviceClient.addHeadersToEnvelope(env);
  _messageContext.setEnvelope(env);
  _operationClient.addMessageContext(_messageContext);
  _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
    public void onMessage(    org.apache.axis2.context.MessageContext resultContext){
      try {
        org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();
        java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),com.amazon.ec2.client.AmazonEC2Stub.CreateNetworkAclEntryResponse.class,getEnvelopeNamespaces(resultEnv));
        callback.receiveResultcreateNetworkAclEntry((com.amazon.ec2.client.AmazonEC2Stub.CreateNetworkAclEntryResponse)object);
      }
 catch (      org.apache.axis2.AxisFault e) {
        callback.receiveErrorcreateNetworkAclEntry(e);
      }
    }
    public void onError(    java.lang.Exception error){
      if (error instanceof org.apache.axis2.AxisFault) {
        org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault)error;
        org.apache.axiom.om.OMElement faultElt=f.getDetail();
        if (faultElt != null) {
          if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
            try {
              java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
              java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
              java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();
              java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());
              java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
              java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
              java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
              m.invoke(ex,new java.lang.Object[]{messageObject});
              callback.receiveErrorcreateNetworkAclEntry(new java.rmi.RemoteException(ex.getMessage(),ex));
            }
 catch (            java.lang.ClassCastException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            java.lang.ClassNotFoundException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            java.lang.NoSuchMethodException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            java.lang.reflect.InvocationTargetException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            java.lang.IllegalAccessException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            java.lang.InstantiationException e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
catch (            org.apache.axis2.AxisFault e) {
              callback.receiveErrorcreateNetworkAclEntry(f);
            }
          }
 else {
            callback.receiveErrorcreateNetworkAclEntry(f);
          }
        }
 else {
          callback.receiveErrorcreateNetworkAclEntry(f);
        }
      }
 else {
        callback.receiveErrorcreateNetworkAclEntry(error);
      }
    }
    public void onFault(    org.apache.axis2.context.MessageContext faultContext){
      org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
      onError(fault);
    }
    public void onComplete(){
      try {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
 catch (      org.apache.axis2.AxisFault axisFault) {
        callback.receiveErrorcreateNetworkAclEntry(axisFault);
      }
    }
  }
);
  org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
  if (_operations[11].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
    _callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
    _operations[11].setMessageReceiver(_callbackReceiver);
  }
  _operationClient.execute(false);
}
