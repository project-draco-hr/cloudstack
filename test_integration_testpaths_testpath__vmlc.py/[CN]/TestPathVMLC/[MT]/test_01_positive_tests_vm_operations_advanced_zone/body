@attr(tags=['advanced'], required_hardware='True')
@data(ISOLATED_NETWORK, VPC_NETWORK)
def test_01_positive_tests_vm_operations_advanced_zone(self, value):
    ' Positive tests for VMLC test path - Advanced Zone\n\n        # 1.  List created service offering in setUpClass by name\n        # 2.  List registered template with name\n        # 3.  Create VM in account\n        # 4.  Enable networking for reaching to VM thorugh SSH\n        # 5.  Check VM accessibility through SSH\n        # 6.  Stop vm and verify vm is not accessible\n        # 7.  Start vm and verify vm is not accessible\n        # 8.  Reboot vm and verify vm is not accessible\n        # 9.  Destroy and recover VM\n        # 10. Change service offering of VM to a different service offering\n        # 11. Verify that the cpuspeed, cpunumber and memory of VM matches to\n        #     as specified in new service offering\n        # 12. Start VM and verify VM accessibility\n        # 13. Find suitable host for VM to migrate and migrate the VM\n        # 14. Verify VM accessibility on new host\n        '
    if ((self.hypervisor.lower() == 'hyperv') and (value == VPC_NETWORK)):
        self.skipTest("cann't be run for {} hypervisor".format(self.hypervisor))
    listServiceOfferings = ServiceOffering.list(self.apiclient, name=self.service_offering_1.name, listall=True)
    self.assertEqual(validateList(listServiceOfferings)[0], PASS, 'List validation failed for service offerings list')
    self.assertEqual(listServiceOfferings[0].name, self.service_offering_1.name, 'Names of created service offering                         and listed service offering not matching')
    listTemplates = Template.list(self.userapiclient, templatefilter='self', name=self.template.name, listall=True, zone=self.zone.id)
    self.assertEqual(validateList(listTemplates)[0], PASS, 'List validation failed for templates list')
    self.assertEqual(listTemplates[0].name, self.template.name, 'Names of created template and listed template                         not matching')
    network = CreateNetwork(self, value)
    self.virtual_machine = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_1.id, networkids=[network.id], zoneid=self.zone.id)
    publicip = PublicIPAddress.create(self.userapiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id, vpcid=self.vpcid)
    if (value == VPC_NETWORK):
        lb_rule = LoadBalancerRule.create(self.apiclient, self.testdata['vpclbrule'], ipaddressid=publicip.ipaddress.id, accountid=self.account.name, domainid=self.account.domainid, networkid=network.id, vpcid=self.vpcid)
        lb_rule.assign(self.apiclient, [self.virtual_machine])
        NetworkACL.create(self.apiclient, networkid=network.id, services=self.testdata['natrule'], traffictype='Ingress')
    elif (value == ISOLATED_NETWORK):
        FireWallRule.create(self.userapiclient, ipaddressid=publicip.ipaddress.id, protocol='TCP', cidrlist=[self.testdata['fwrule']['cidr']], startport=self.testdata['fwrule']['startport'], endport=self.testdata['fwrule']['endport'])
        NATRule.create(self.userapiclient, self.virtual_machine, self.testdata['natrule'], ipaddressid=publicip.ipaddress.id, networkid=network.id)
    try:
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception while SSHing to VM: %s' % e))
    self.virtual_machine.stop(self.userapiclient)
    with self.assertRaises(Exception):
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password, retries=0)
    self.virtual_machine.start(self.userapiclient)
    try:
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception while SSHing to VM: %s' % e))
    self.virtual_machine.reboot(self.userapiclient)
    try:
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception while SSHing to VM: %s' % e))
    self.virtual_machine.delete(self.apiclient, expunge=False)
    self.virtual_machine.recover(self.apiclient)
    self.virtual_machine.change_service_offering(self.userapiclient, serviceOfferingId=self.service_offering_2.id)
    VerifyChangeInServiceOffering(self, self.virtual_machine, self.service_offering_2)
    self.virtual_machine.start(self.userapiclient)
    try:
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception while SSHing to VM: %s' % e))
    host = findSuitableHostForMigration(self.apiclient, self.virtual_machine.id)
    if (host is None):
        self.fail(ERROR_NO_HOST_FOR_MIGRATION)
    self.virtual_machine.migrate(self.apiclient, host.id)
    try:
        SshClient(host=publicip.ipaddress.ipaddress, port=22, user=self.virtual_machine.username, passwd=self.virtual_machine.password)
    except Exception as e:
        self.fail(('Exception while SSHing to VM: %s' % e))
    return
