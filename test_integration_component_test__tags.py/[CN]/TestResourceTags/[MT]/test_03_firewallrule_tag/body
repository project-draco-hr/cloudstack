@attr(tags=['advanced'])
def test_03_firewallrule_tag(self):
    ' Test Create tag on firewall rule and remove the firewall rule\n        '
    self.debug(('Fetching the network details for account: %s' % self.account.name))
    networks = Network.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should not return an empty response')
    network = networks[0]
    self.debug(('Network for the account: %s is %s' % (self.account.name, network.name)))
    self.debug(('Associating public IP for network: %s' % network.id))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id)
    self.cleanup.append(public_ip)
    self.debug(('Creating firewall rule on public IP: %s' % public_ip.ipaddress.ipaddress))
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug(('Created firewall rule: %s' % fw_rule.id))
    fw_rules = FireWallRule.list(self.apiclient, id=fw_rule.id)
    self.assertEqual(isinstance(fw_rules, list), True, 'List fw rules should return a valid firewall rules')
    self.assertNotEqual(len(fw_rules), 0, 'Length of fw rules response should not be zero')
    self.debug('Creating a tag for firewall rule')
    tag = Tag.create(self.apiclient, resourceIds=fw_rule.id, resourceType='FirewallRule', tags={'FW': '40', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='FirewallRule', account=self.account.name, domainid=self.account.domainid, key='FW', value='40')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, '40', 'The tag value should match with the original value')
    fw_rules = FireWallRule.list(self.apiclient, listall=True, key='FW', value='40')
    self.assertEqual(isinstance(fw_rules, list), True, 'List fw rules should return a valid firewall rules')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=fw_rule.id, resourceType='FirewallRule', tags={'FW': '40', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.apiclient, listall=True, resourceType='FirewallRule', account=self.account.name, domainid=self.account.domainid, key='FW', value='40')
    self.assertEqual(tags, None, 'List tags should return empty response')
    self.debug('Deleting the firewall rule')
    try:
        fw_rule.delete(self.apiclient)
    except Exception as e:
        self.fail(('failed to delete firewall rule! - %s' % e))
    return
