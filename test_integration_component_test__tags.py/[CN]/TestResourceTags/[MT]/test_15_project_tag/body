@attr(tags=['advanced'], required_hardware='false')
def test_15_project_tag(self):
    ' Test creation, listing and deletion tags on projects\n        '
    project = Project.create(self.apiclient, self.services['project'], account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    self.debug('Creating a tag for the project')
    tag = Tag.create(self.apiclient, resourceIds=project.id, resourceType='project', tags={'region': 'India', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='project', resourceIds=project.id, key='region')
    self.debug(('tags = %s' % tags))
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'India', 'The tag should have original value')
    projects = Project.list(self.apiclient, listall=True, key='region', value='India')
    self.assertEqual(isinstance(projects, list), True, 'List Project should return valid list')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=project.id, resourceType='project', tags={'region': 'India', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.apiclient, listall=True, resourceType='project', account=self.account.name, domainid=self.account.domainid, key='region', value='India')
    self.assertEqual(tags, None, 'List tags should return empty response')
    return
