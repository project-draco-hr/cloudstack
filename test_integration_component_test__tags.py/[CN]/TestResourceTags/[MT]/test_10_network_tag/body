@attr(tags=['advanced', 'selfservice'])
def test_10_network_tag(self):
    ' Testcreation, listing and deletion tags on guest network\n        '
    self.debug(('Fetching the network details for account: %s' % self.account.name))
    networks = Network.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should not return an empty response')
    network = networks[0]
    self.debug(('Network for the account: %s is %s' % (self.account.name, network.name)))
    self.debug('Creating a tag for load balancer rule')
    tag = Tag.create(self.apiclient, resourceIds=network.id, resourceType='Network', tags={'region': 'India', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='Network', account=self.account.name, domainid=self.account.domainid, key='region', value='India')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'India', 'The tag should have original value')
    networks = Network.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True, key='region', value='India')
    self.assertEqual(isinstance(networks, list), True, 'List networks should not return an empty response')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=network.id, resourceType='Network', tags={'region': 'India', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.apiclient, listall=True, resourceType='Network', account=self.account.name, domainid=self.account.domainid, key='region', value='India')
    self.assertEqual(tags, None, 'List tags should return empty response')
    return
