@attr(tags=['advanced', 'basic', 'selfservice'])
def test_07_iso_tag(self):
    ' Test creation, listing and deletion tags on ISO\n        '
    iso = Iso.create(self.apiclient, self.services['iso'], account=self.account.name, domainid=self.account.domainid)
    self.debug(('ISO created with ID: %s' % iso.id))
    list_iso_response = Iso.list(self.apiclient, id=iso.id)
    self.assertEqual(isinstance(list_iso_response, list), True, 'Check list response returns a valid list')
    self.debug('Creating a tag for the ISO')
    tag = Tag.create(self.apiclient, resourceIds=iso.id, resourceType='ISO', tags={'OS': 'CentOS', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='ISO', account=self.account.name, domainid=self.account.domainid, key='OS', value='CentOS')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'CentOS', 'The tag should have original value')
    isos = Iso.list(self.apiclient, key='OS', value='CentOS', account=self.account.name, domainid=self.account.domainid, isofilter='all')
    self.assertEqual(isinstance(isos, list), True, 'List isos should not return an empty response')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=iso.id, resourceType='ISO', tags={'OS': 'CentOS', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.apiclient, listall=True, resourceType='ISO', account=self.account.name, domainid=self.account.domainid, key='OS', value='CentOS')
    self.assertEqual(tags, None, 'List tags should return empty response')
    return
