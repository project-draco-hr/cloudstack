@attr(tags=['advanced', 'basic'])
def test_21_create_tag_stopped_vm(self):
    'Test creation of tag on stopped vm.'
    self.debug(('Stopping the virtual machine: %s' % self.vm_1.name))
    self.vm_1.stop(self.apiclient)
    timeout = self.services['timeout']
    time.sleep(self.services['sleep'])
    list_vm_response = list_virtual_machines(self.apiclient, id=self.vm_1.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.vm_1.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check list response returns a valid list')
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.state, 'Stopped', 'VM should be in stopped state after deployment')
    self.debug('Creating a tag for user VM')
    tag = Tag.create(self.apiclient, resourceIds=self.vm_1.id, resourceType='userVM', tags={'region': 'India', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='userVM', account=self.account.name, domainid=self.account.account.domainid, key='region', value='India')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'India', 'Tag created with incorrect value')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=self.vm_1.id, resourceType='userVM', tags={'region': 'India', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    return
