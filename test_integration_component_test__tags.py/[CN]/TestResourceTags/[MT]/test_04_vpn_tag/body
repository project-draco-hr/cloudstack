@attr(tags=['advanced'], required_hardware='false')
def test_04_vpn_tag(self):
    ' Test Create tag on vpn and remove the vpn\n        '
    self.skipTest('VPN resource tags are unsupported in 4.0')
    self.debug(('Fetching the network details for account: %s' % self.account.name))
    networks = Network.list(self.apiclient, account=self.account.name, domainid=self.account.domainid, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should not return an empty response')
    network = networks[0]
    self.debug(('Network for the account: %s is %s' % (self.account.name, network.name)))
    self.debug(('Associating public IP for network: %s' % network.id))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id)
    self.cleanup.append(public_ip)
    nat_rule = NATRule.create(self.apiclient, self.vm_1, self.services['natrule'], ipaddressid=public_ip.ipaddress.id)
    nat_rules = NATRule.list(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(nat_rules, list), True, 'List NAT rules should return valid list')
    self.debug(('Creating VPN with public NAT IP: %s' % public_ip.ipaddress.ipaddress))
    try:
        vpn = Vpn.create(self.apiclient, public_ip.ipaddress.id, account=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        print e
    vpns = Vpn.list(self.apiclient, publicipid=public_ip.ipaddress.id, listall=True)
    self.assertEqual(isinstance(vpns, list), True, 'List VPNs should return a valid VPN list')
    self.assertNotEqual(len(vpns), 0, 'Length of list VPN response should not be zero')
    self.debug('Creating a tag for VPN rule')
    tag = Tag.create(self.apiclient, resourceIds=nat_rule.id, resourceType='VPN', tags={'protocol': 'L2TP', })
    self.debug(('Tag created: %s' % tag.__dict__))
    tags = Tag.list(self.apiclient, listall=True, resourceType='VPN', account=self.account.name, domainid=self.account.domainid, key='protocol', value='L2TP')
    self.assertEqual(isinstance(tags, list), True, 'List tags should not return empty response')
    self.assertEqual(tags[0].value, 'L2TP', 'The tag value should match with the original value')
    self.debug('Deleting the created tag..')
    try:
        tag.delete(self.apiclient, resourceIds=vpn.id, resourceType='VPN', tags={'protocol': 'L2TP', })
    except Exception as e:
        self.fail(('Failed to delete the tag - %s' % e))
    self.debug('Verifying if tag is actually deleted!')
    tags = Tag.list(self.apiclient, listall=True, resourceType='VPN', account=self.account.name, domainid=self.account.domainid, key='protocol', value='L2TP')
    self.assertEqual(tags, None, 'List tags should return empty response')
    self.debug('Disabling the VPN')
    try:
        vpn.delete(self.apiclient)
    except Exception as e:
        self.fail(('failed to disable VPN! - %s' % e))
    return
