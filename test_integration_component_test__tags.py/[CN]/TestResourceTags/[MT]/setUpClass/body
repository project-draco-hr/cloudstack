@classmethod
def setUpClass(cls):
    cls.testClient = super(TestResourceTags, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.domain = get_domain(cls.api_client)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True)
    cls.user_api_client = cls.testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
    cls.services['iso']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.vm_1 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.zone.networktype)
    cls.vm_2 = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.zone.networktype)
    cls._cleanup = [cls.account, cls.service_offering, cls.disk_offering]
    return
