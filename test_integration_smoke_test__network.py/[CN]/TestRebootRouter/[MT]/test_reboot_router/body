@attr(tags=['advanced', 'advancedns', 'smoke', 'dvs'], required_hardware='true')
def test_reboot_router(self):
    'Test for reboot router'
    logger.debug(('Public IP: %s' % self.vm_1.ssh_ip))
    logger.debug(('Public IP: %s' % self.public_ip.ipaddress.ipaddress))
    routers = list_routers(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    self.assertEqual(isinstance(routers, list), True, 'Check list routers returns a valid list')
    router = routers[0]
    logger.debug(('Rebooting the router (ID: %s)' % router.id))
    cmd = rebootRouter.rebootRouterCmd()
    cmd.id = router.id
    self.apiclient.rebootRouter(cmd)
    timeout = self.services['timeout']
    while True:
        time.sleep(self.services['sleep'])
        list_vm_response = list_virtual_machines(self.apiclient, id=self.vm_1.id)
        if isinstance(list_vm_response, list):
            vm = list_vm_response[0]
            if (vm.state == 'Running'):
                logger.debug(('VM state: %s' % vm.state))
                break
        if (timeout == 0):
            raise Exception(('Failed to start VM (ID: %s) in change service offering' % vm.id))
        timeout = (timeout - 1)
    try:
        logger.debug(('SSH into VM (ID : %s ) after reboot' % self.vm_1.id))
        SshClient(self.public_ip.ipaddress.ipaddress, self.services['natrule']['publicport'], self.vm_1.username, self.vm_1.password, retries=5)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.public_ip.ipaddress.ipaddress, e)))
    return
