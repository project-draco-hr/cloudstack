def setUp(self):
    self.apiclient = self.testClient.getApiClient()
    self.services = self.testClient.testClient.getParsedTestDataConfig()
    self.domain = get_domain(self.apiclient)
    self.zone = get_zone(self.apiclient, self.testClient.getZoneForTests())
    template = get_template(self.apiclient, self.zone.id, self.services['ostype'])
    if (template == FAILED):
        self.fail(('get_template() failed to return template with description %s' % self.services['ostype']))
    self.services['virtual_machine']['zoneid'] = self.zone.id
    self.account = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.domain.id)
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offerings'])
    self.vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    time.sleep(120)
    src_nat_ip_addrs = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    try:
        src_nat_ip_addr = src_nat_ip_addrs[0]
    except Exception as e:
        raise Exception(('Warning: Exception during fetching source NAT: %s' % e))
    self.public_ip = PublicIPAddress.create(self.apiclient, self.vm_1.account, self.vm_1.zoneid, self.vm_1.domainid, self.services['virtual_machine'])
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=self.public_ip.ipaddress.id, protocol=self.services['lbrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['lbrule']['publicport'], endport=self.services['lbrule']['publicport'])
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], src_nat_ip_addr.id, self.account.name)
    lb_rule.assign(self.apiclient, [self.vm_1])
    self.nat_rule = NATRule.create(self.apiclient, self.vm_1, self.services['natrule'], ipaddressid=self.public_ip.ipaddress.id)
    self.cleanup = [self.vm_1, lb_rule, self.nat_rule, self.service_offering, self.account]
    return
