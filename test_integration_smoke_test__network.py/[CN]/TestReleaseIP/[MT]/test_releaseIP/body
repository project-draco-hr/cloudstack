def test_releaseIP(self):
    'Test for Associate/Disassociate public IP address'
    self.debug(('Deleting Public IP : %s' % self.ip_addr.id))
    self.ip_address.delete(self.apiclient)
    time.sleep(self.services['sleep'])
    list_pub_ip_addr_resp = list_publicIP(self.apiclient, id=self.ip_addr.id)
    self.debug(('List Public IP response' + str(list_pub_ip_addr_resp)))
    self.assertEqual(list_pub_ip_addr_resp, None, 'Check if disassociated IP Address is no longer available')
    list_nat_rule = list_nat_rules(self.apiclient, id=self.nat_rule.id)
    self.debug(('List NAT Rule response' + str(list_nat_rule)))
    self.assertEqual(list_nat_rule, None, 'Check if PF rules are no longer available for IP address')
    list_lb_rule = list_lb_rules(self.apiclient, id=self.lb_rule.id)
    self.debug(('List LB Rule response' + str(list_lb_rule)))
    self.assertEqual(list_lb_rule, None, 'Check if LB rules for IP Address are no longer available')
    with self.assertRaises(Exception):
        ssh_2 = remoteSSHClient.remoteSSHClient(self.ip_addr.ipaddress, self.services['natrule']['publicport'], self.virtual_machine.username, self.virtual_machine.password)
    return
