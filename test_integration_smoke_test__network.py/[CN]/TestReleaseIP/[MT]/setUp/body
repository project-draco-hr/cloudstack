def setUp(self):
    self.apiclient = self.testClient.getApiClient()
    self.services = Services().services
    self.domain = get_domain(self.apiclient, self.services)
    self.zone = get_zone(self.apiclient, self.services)
    template = get_template(self.apiclient, self.zone.id, self.services['ostypeid'])
    self.services['server']['zoneid'] = self.zone.id
    self.account = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.domain.id)
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering'])
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['server'], templateid=template.id, accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.ip_address = PublicIPAddress.create(self.apiclient, self.account.account.name, self.zone.id, self.account.account.domainid)
    ip_addrs = list_publicIP(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    try:
        self.ip_addr = ip_addrs[0]
    except Exception as e:
        raise Exception(('Failed: During acquiring source NAT for account: %s' % self.account.account.name))
    self.nat_rule = NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], self.ip_addr.id)
    self.lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], self.ip_addr.id, accountid=self.account.account.name)
    self.cleanup = [self.virtual_machine, self.account]
    return
