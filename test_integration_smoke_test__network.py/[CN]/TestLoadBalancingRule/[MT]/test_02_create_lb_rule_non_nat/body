def test_02_create_lb_rule_non_nat(self):
    'Test to create Load balancing rule with source NAT'
    vm_response = VirtualMachine.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM returns a valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check Port Forwarding Rule is created')
    for vm in vm_response:
        self.assertEqual(vm.state, 'Running', 'VM state should be Running before creating a NAT rule.')
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], self.non_src_nat_ip.ipaddress.id, accountid=self.account.account.name)
    self.cleanup.append(lb_rule)
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    lb_rules = list_lb_rules(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_rules), 0, 'Check Load Balancer Rule in its List')
    self.assertEqual(lb_rules[0].id, lb_rule.id, 'Check List Load Balancer Rules returns valid Rule')
    lb_instance_rules = list_lb_instances(self.apiclient, id=lb_rule.id)
    self.assertEqual(isinstance(lb_instance_rules, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(lb_instance_rules), 0, 'Check Load Balancer instances Rule in its List')
    self.assertIn(lb_instance_rules[0].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    self.assertIn(lb_instance_rules[1].id, [self.vm_1.id, self.vm_2.id], 'Check List Load Balancer instances Rules returns valid VM ID')
    try:
        self.debug(('SSHing into IP address: %s after adding VMs (ID: %s , %s)' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_1.id, self.vm_2.id)))
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        hostnames = [ssh_1.execute('hostname')[0]]
        time.sleep(self.services['lb_switch_wait'])
        self.debug(('SSHing again into IP address: %s with VMs (ID: %s , %s) added to LB rule' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_1.id, self.vm_2.id)))
        ssh_2 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        hostnames.append(ssh_2.execute('hostname')[0])
        self.debug(('Hostnames after adding 2 VMs to LB rule: %s' % str(hostnames)))
        self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
        self.assertIn(self.vm_2.name, hostnames, 'Check if ssh succeeded for server2')
        lb_rule.remove(self.apiclient, [self.vm_2])
        self.debug(('SSHing into IP address: %s after removing VM (ID: %s) from LB rule' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_2.id)))
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        hostnames.append(ssh_1.execute('hostname')[0])
        self.debug(('Hostnames after removing VM2: %s' % str(hostnames)))
    except Exception as e:
        self.fail(('%s: SSH failed for VM with IP Address: %s' % (e, self.non_src_nat_ip.ipaddress.ipaddress)))
    self.assertIn(self.vm_1.name, hostnames, 'Check if ssh succeeded for server1')
    lb_rule.remove(self.apiclient, [self.vm_1])
    with self.assertRaises(Exception):
        self.fail(('SSHing into IP address: %s after removing VM (ID: %s) from LB rule' % (self.non_src_nat_ip.ipaddress.ipaddress, self.vm_1.id)))
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        ssh_1.execute('hostname')[0]
    return
