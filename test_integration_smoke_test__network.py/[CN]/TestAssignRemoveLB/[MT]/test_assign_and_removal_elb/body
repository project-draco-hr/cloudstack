def test_assign_and_removal_elb(self):
    'Test for assign & removing load balancing rule'
    src_nat_ip_addrs = list_publicIP(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(src_nat_ip_addrs, list), True, 'Check list response returns a valid list')
    self.non_src_nat_ip = src_nat_ip_addrs[0]
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=self.non_src_nat_ip.id, protocol=self.services['lbrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['lbrule']['publicport'], endport=self.services['lbrule']['publicport'])
    vm_response = VirtualMachine.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM returns a valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check Port Forwarding Rule is created')
    for vm in vm_response:
        self.assertEqual(vm.state, 'Running', 'VM state should be Running before creating a NAT rule.')
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], self.non_src_nat_ip.id, self.account.account.name)
    lb_rule.assign(self.apiclient, [self.vm_1, self.vm_2])
    try:
        self.debug(('SSHing into IP address: %s with VMs (ID: %s , %s) added to LB rule' % (self.non_src_nat_ip.ipaddress, self.vm_1.id, self.vm_2.id)))
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.non_src_nat_ip.ipaddress))
    try:
        self.debug(('SSHing again into IP address: %s with VMs (ID: %s , %s) added to LB rule' % (self.non_src_nat_ip.ipaddress, self.vm_1.id, self.vm_2.id)))
        ssh_2 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress, self.services['lbrule']['publicport'], self.vm_2.username, self.vm_2.password)
        res_1 = ssh_1.execute('hostname')[0]
        self.debug(res_1)
        time.sleep(self.services['lb_switch_wait'])
        res_2 = ssh_2.execute('hostname')[0]
        self.debug(res_2)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.non_src_nat_ip.ipaddress))
    self.assertIn(self.vm_1.name, res_1, 'Check if ssh succeeded for server1')
    self.assertIn(self.vm_2.name, res_2, 'Check if ssh succeeded for server2')
    lb_rule.remove(self.apiclient, [self.vm_2])
    try:
        self.debug(('SSHing again into IP address: %s with VM (ID: %s) added to LB rule' % (self.non_src_nat_ip.ipaddress, self.vm_1.id)))
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        res_1 = ssh_1.execute('hostname')[0]
        self.debug(res_1)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.non_src_nat_ip.ipaddress))
    self.assertIn(self.vm_1.name, res_1, 'Check if ssh succeeded for server1')
    lb_rule.assign(self.apiclient, [self.vm_3])
    try:
        ssh_1 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress, self.services['lbrule']['publicport'], self.vm_1.username, self.vm_1.password)
        ssh_3 = remoteSSHClient.remoteSSHClient(self.non_src_nat_ip.ipaddress, self.services['lbrule']['publicport'], self.vm_3.username, self.vm_3.password)
        res_1 = ssh_1.execute('hostname')[0]
        self.debug(res_1)
        time.sleep(self.services['lb_switch_wait'])
        res_3 = ssh_3.execute('hostname')[0]
        self.debug(res_3)
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s' % self.non_src_nat_ip.ipaddress))
    self.assertIn(self.vm_1.name, res_1, 'Check if ssh succeeded for server1')
    self.assertIn(self.vm_3.name, res_3, 'Check if ssh succeeded for server3')
    return
