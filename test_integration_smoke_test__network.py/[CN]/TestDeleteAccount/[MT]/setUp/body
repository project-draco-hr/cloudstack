def setUp(self):
    self.apiclient = self.testClient.getApiClient()
    self.services = self.testClient.getParsedTestDataConfig()
    self.domain = get_domain(self.apiclient)
    self.zone = get_zone(self.apiclient, self.testClient.getZoneForTests())
    template = get_template(self.apiclient, self.zone.id, self.services['ostype'])
    self.services['virtual_machine']['zoneid'] = self.zone.id
    self.account = Account.create(self.apiclient, self.services['account'], admin=True, domainid=self.domain.id)
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offerings'])
    self.vm_1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    src_nat_ip_addrs = list_publicIP(self.apiclient, account=self.account.name, domainid=self.account.domainid)
    try:
        src_nat_ip_addr = src_nat_ip_addrs[0]
    except Exception as e:
        self.fail(('SSH failed for VM with IP: %s %s' % (src_nat_ip_addr.ipaddress, e)))
    self.lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], src_nat_ip_addr.id, self.account.name)
    self.lb_rule.assign(self.apiclient, [self.vm_1])
    self.nat_rule = NATRule.create(self.apiclient, self.vm_1, self.services['natrule'], src_nat_ip_addr.id)
    self.cleanup = []
    return
