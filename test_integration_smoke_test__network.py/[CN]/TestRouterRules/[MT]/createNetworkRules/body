def createNetworkRules(self, rule, ipaddressobj, networkid):
    ' Create specified rule on acquired public IP and\n        default network of virtual machine\n        '
    self.fw_rule = FireWallRule.create(self.apiclient, ipaddressid=ipaddressobj.ipaddress.id, protocol=self.services['fwrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.services['fwrule']['startport'], endport=self.services['fwrule']['endport'])
    if (rule == STATIC_NAT_RULE):
        StaticNATRule.enable(self.apiclient, ipaddressobj.ipaddress.id, self.virtual_machine.id, networkid)
    elif (rule == LB_RULE):
        self.lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=ipaddressobj.ipaddress.id, accountid=self.account.name, networkid=self.virtual_machine.nic[0].networkid, domainid=self.account.domainid)
        vmidipmap = [{'vmid': str(self.virtual_machine.id), 'vmip': str(self.virtual_machine.nic[0].ipaddress), }]
        self.lb_rule.assign(self.apiclient, vmidipmap=vmidipmap)
    else:
        self.nat_rule = NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], ipaddressobj.ipaddress.id)
    return
