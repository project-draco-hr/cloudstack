@data(STATIC_NAT_RULE, NAT_RULE, LB_RULE)
@attr(tags=['advanced', 'advancedns', 'smoke'], required_hardware='true')
def test_network_rules_acquired_public_ip(self, value):
    'Test for Router rules for network rules on acquired public IP'
    self.ipaddress = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.defaultNetworkId)
    self.cleanup.append(self.ipaddress)
    self.createNetworkRules(rule=value, ipaddressobj=self.ipaddress, networkid=self.defaultNetworkId)
    router = Router.list(self.apiclient, networkid=self.virtual_machine.nic[0].networkid, listall=True)[0]
    response = self.getCommandResultFromRouter(router, 'ip addr')
    self.debug(response)
    stringToMatch = ('inet %s' % self.ipaddress.ipaddress.ipaddress)
    self.assertTrue((stringToMatch in str(response)), 'IP address is                not removed from VR even after disabling statin NAT')
    try:
        self.debug(('SSHing into VM with IP address %s with NAT IP %s' % (self.virtual_machine.ipaddress, self.ipaddress.ipaddress.ipaddress)))
        self.virtual_machine.get_ssh_client(self.ipaddress.ipaddress.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machine.ipaddress, e)))
    self.removeNetworkRules(rule=value, ipaddressobj=self.ipaddress)
    response = self.getCommandResultFromRouter(router, 'ip addr')
    self.debug(response)
    stringToMatch = ('inet %s' % self.ipaddress.ipaddress.ipaddress)
    self.assertFalse((stringToMatch in str(response)), 'IP address is                not removed from VR even after disabling statin NAT')
    with self.assertRaises(Exception):
        self.debug(('SSHing into VM with IP address %s after NAT rule deletion' % self.virtual_machine.ipaddress))
        SshClient(self.ipaddress.ipaddress.ipaddress, self.virtual_machine.ssh_port, self.virtual_machine.username, self.virtual_machine.password, retries=2, delay=0)
    return
