def test_01_port_fwd_on_src_nat(self):
    'Test for port forwarding on source NAT'
    src_nat_ip_addrs = list_publicIP(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(src_nat_ip_addrs, list), True, 'Check list response returns a valid list')
    src_nat_ip_addr = src_nat_ip_addrs[0]
    vm_response = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id)
    self.assertEqual(isinstance(vm_response, list), True, 'Check list VM returns a valid list')
    self.assertNotEqual(len(vm_response), 0, 'Check Port Forwarding Rule is created')
    self.assertEqual(vm_response[0].state, 'Running', 'VM state should be Running before creating a NAT rule.')
    nat_rule = NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], src_nat_ip_addr.id)
    list_nat_rule_response = list_nat_rules(self.apiclient, id=nat_rule.id)
    self.assertEqual(isinstance(list_nat_rule_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_nat_rule_response), 0, 'Check Port Forwarding Rule is created')
    self.assertEqual(list_nat_rule_response[0].id, nat_rule.id, 'Check Correct Port forwarding Rule is returned')
    try:
        self.debug(('SSHing into VM with IP address %s with NAT IP %s' % (self.virtual_machine.ipaddress, src_nat_ip_addr.ipaddress)))
        self.virtual_machine.get_ssh_client(src_nat_ip_addr.ipaddress)
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machine.ipaddress, e)))
    nat_rule.delete(self.apiclient)
    list_nat_rule_response = list_nat_rules(self.apiclient, id=nat_rule.id)
    self.assertEqual(list_nat_rule_response, None, 'Check Port Forwarding Rule is deleted')
    with self.assertRaises(Exception):
        self.debug(('SSHing into VM with IP address %s after NAT rule deletion' % self.virtual_machine.ipaddress))
        remoteSSHClient.remoteSSHClient(src_nat_ip_addr.ipaddress, self.virtual_machine.ssh_port, self.virtual_machine.username, self.virtual_machine.password)
    return
