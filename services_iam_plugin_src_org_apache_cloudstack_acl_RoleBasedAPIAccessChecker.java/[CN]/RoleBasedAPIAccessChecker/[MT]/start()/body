{
  for (  RoleType role : RoleType.values()) {
    Long policyId=getDefaultPolicyId(role);
    if (policyId != null) {
      _iamSrv.resetAclPolicy(policyId);
    }
  }
  _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_ADMIN + 1),null,null,null,"SystemCapability",null,Permission.Allow,false);
  _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_DOMAIN_ADMIN + 1),null,null,null,"DomainCapability",null,Permission.Allow,false);
  _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN + 1),null,null,null,"DomainResourceCapability",null,Permission.Allow,false);
  List<VMTemplateVO> pTmplts=_templateDao.listByPublic();
  for (  VMTemplateVO tmpl : pTmplts) {
    _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_DOMAIN_ADMIN + 1),AclEntityType.VirtualMachineTemplate.toString(),PermissionScope.RESOURCE.toString(),tmpl.getId(),"listTemplates",AccessType.UseEntry.toString(),Permission.Allow,false);
    _iamSrv.addAclPermissionToAclPolicy(new Long(Account.ACCOUNT_TYPE_NORMAL + 1),AclEntityType.VirtualMachineTemplate.toString(),PermissionScope.RESOURCE.toString(),tmpl.getId(),"listTemplates",AccessType.UseEntry.toString(),Permission.Allow,false);
  }
  for (  PluggableService service : _services) {
    for (    Class<?> cmdClass : service.getCommands()) {
      APICommand command=cmdClass.getAnnotation(APICommand.class);
      if (!commandsPropertiesOverrides.contains(command.name())) {
        for (        RoleType role : command.authorized()) {
          addDefaultAclPolicyPermission(command.name(),cmdClass,role);
        }
      }
    }
  }
  for (  String apiName : commandsPropertiesOverrides) {
    Class<?> cmdClass=_apiServer.getCmdClass(apiName);
    for (    RoleType role : RoleType.values()) {
      if (commandsPropertiesRoleBasedApisMap.get(role).contains(apiName)) {
        addDefaultAclPolicyPermission(apiName,cmdClass,role);
      }
    }
  }
  return super.start();
}
