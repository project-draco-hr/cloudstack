{
  ServiceOfferingVO svo=_offeringsDao.findById(vm.getServiceOfferingId());
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(destHostId,CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO capacityMemory=_capacityDao.findByHostIdType(destHostId,CapacityVO.CAPACITY_TYPE_MEMORY);
  int vmCPU=svo.getCpu() * svo.getSpeed();
  long vmMem=svo.getRamSize() * 1024L * 1024L;
  capacityCpu=_capacityDao.lockRow(capacityCpu.getId(),true);
  capacityMemory=_capacityDao.lockRow(capacityMemory.getId(),true);
  long usedCpu=capacityCpu.getUsedCapacity();
  long usedMem=capacityMemory.getUsedCapacity();
  long reservedCpu=capacityCpu.getReservedCapacity();
  long reservedMem=capacityMemory.getReservedCapacity();
  long totalCpu=capacityCpu.getTotalCapacity();
  long totalMem=capacityMemory.getTotalCapacity();
  if (usedCpu + reservedCpu + vmCPU <= totalCpu) {
    capacityCpu.setUsedCapacity(usedCpu + vmCPU);
  }
 else {
    s_logger.debug("What's the heck? :u:" + usedCpu + ",r:"+ reservedCpu+ ",vm:"+ vmCPU+ " > "+ totalCpu);
  }
  if (usedMem + reservedMem + vmMem <= totalMem) {
    capacityMemory.setUsedCapacity(usedMem + vmMem);
  }
 else {
    s_logger.debug("What's the heck? :u:" + usedMem + ",r:"+ reservedMem+ ",vm:"+ vmMem+ " > "+ totalMem);
  }
  _capacityDao.update(capacityCpu.getId(),capacityCpu);
  _capacityDao.update(capacityMemory.getId(),capacityMemory);
}
