{
  List<NetworkGroupRulesVO> networkGroups=(List<NetworkGroupRulesVO>)getResponseObject();
  List<NetworkGroupResultObject> groupResultObjs=NetworkGroupResultObject.transposeNetworkGroups(networkGroups);
  List<NetworkGroupResponse> response=new ArrayList<NetworkGroupResponse>();
  for (  NetworkGroupResultObject networkGroup : groupResultObjs) {
    NetworkGroupResponse netGrpResponse=new NetworkGroupResponse();
    netGrpResponse.setId(networkGroup.getId());
    netGrpResponse.setName(networkGroup.getName());
    netGrpResponse.setDescription(networkGroup.getDescription());
    netGrpResponse.setAccountName(networkGroup.getAccountName());
    netGrpResponse.setDomainId(networkGroup.getDomainId());
    netGrpResponse.setDomainName(getManagementServer().findDomainIdById(networkGroup.getDomainId()).getName());
    List<IngressRuleResultObject> ingressRules=networkGroup.getIngressRules();
    if ((ingressRules != null) && !ingressRules.isEmpty()) {
      List<IngressRuleResponse> ingressRulesResponse=new ArrayList<IngressRuleResponse>();
      for (      IngressRuleResultObject ingressRule : ingressRules) {
        IngressRuleResponse ingressData=new IngressRuleResponse();
        ingressData.setRuleId(ingressRule.getId());
        ingressData.setProtocol(ingressRule.getProtocol());
        if ("icmp".equalsIgnoreCase(ingressRule.getProtocol())) {
          ingressData.setIcmpType(ingressRule.getStartPort());
          ingressData.setIcmpCode(ingressRule.getEndPort());
        }
 else {
          ingressData.setStartPort(ingressRule.getStartPort());
          ingressData.setEndPort(ingressRule.getEndPort());
        }
        if (ingressRule.getAllowedNetworkGroup() != null) {
          ingressData.setNetworkGroupName(ingressRule.getAllowedNetworkGroup());
          ingressData.setAccountName(ingressRule.getAllowedNetGroupAcct());
        }
 else {
          ingressData.setCidr(ingressRule.getAllowedSourceIpCidr());
        }
        ingressRulesResponse.add(ingressData);
      }
      netGrpResponse.setIngressRules(ingressRulesResponse);
    }
    response.add(netGrpResponse);
  }
  return SerializerHelper.toSerializedString(response);
}
