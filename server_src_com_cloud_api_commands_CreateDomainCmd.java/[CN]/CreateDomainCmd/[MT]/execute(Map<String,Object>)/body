{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long parentDomainId=(Long)params.get(BaseCmd.Properties.PARENT_DOMAIN_ID.getName());
  if (account == null) {
    account=getManagementServer().findAccountById(Long.valueOf(1L));
  }
  if (parentDomainId == null) {
    parentDomainId=DomainVO.ROOT_DOMAIN;
  }
 else {
    DomainVO parentDomain=null;
    parentDomain=getManagementServer().findDomainIdById(parentDomainId);
    if (parentDomain == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"unable to find parent domain " + parentDomainId);
    }
  }
  if (!getManagementServer().isChildDomain(account.getDomainId(),parentDomainId)) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Invalid parent domain " + parentDomainId + ", unable to create domain "+ name);
  }
  DomainVO domain=null;
  try {
    domain=getManagementServer().createDomain(name,account.getId(),parentDomainId);
  }
 catch (  IllegalArgumentException illArgEx) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Failed to create domain " + name + " due to invalid name given.");
    }
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Failed to create domain " + name + ", invalid name given.  The character '/' is not valid for domain names.");
  }
catch (  Exception ex) {
    s_logger.error("Exception creating domain",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to create domain " + name + ":  internal error.");
  }
  List<Pair<String,Object>> embeddedObject=new ArrayList<Pair<String,Object>>();
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  if (domain == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Failed to create domain " + name + ":  a domain with that name already exists.");
  }
 else {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),domain.getId()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),domain.getName()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.LEVEL.getName(),domain.getLevel().toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PARENT_DOMAIN_ID.getName(),domain.getParent().toString()));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.PARENT_DOMAIN_NAME.getName(),getManagementServer().findDomainIdById(domain.getParent()).getName()));
    embeddedObject.add(new Pair<String,Object>("domain",new Object[]{returnValues}));
  }
  return embeddedObject;
}
