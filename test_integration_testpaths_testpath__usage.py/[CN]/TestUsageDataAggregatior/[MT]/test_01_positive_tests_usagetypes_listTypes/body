@attr(tags=['advanced'], required_hardware='true')
def test_01_positive_tests_usagetypes_listTypes(self):
    ' 1. List Usage Types\n            2. Verify Usage Id and Type mapping\n        '
    usageTypes = [{'usagetypeid': 1, 'description': u'Running Vm Usage', }, {'usagetypeid': 2, 'description': u'Allocated Vm Usage', }, {'usagetypeid': 3, 'description': u'IP Address Usage', }, {'usagetypeid': 4, 'description': u'Network Usage (Bytes Sent)', }, {'usagetypeid': 5, 'description': u'Network Usage (Bytes Received)', }, {'usagetypeid': 6, 'description': u'Volume Usage', }, {'usagetypeid': 7, 'description': u'Template Usage', }, {'usagetypeid': 8, 'description': u'ISO Usage', }, {'usagetypeid': 9, 'description': u'Snapshot Usage', }, {'usagetypeid': 11, 'description': u'Load Balancer Usage', }, {'usagetypeid': 12, 'description': u'Port Forwarding Usage', }, {'usagetypeid': 13, 'description': u'Network Offering Usage', }, {'usagetypeid': 14, 'description': u'VPN users usage', }]
    listTypes = []
    response = self.listUsageTypes()
    respTypes = response[1]
    for res in respTypes:
        dictTypes = {'usagetypeid': res.usagetypeid, 'description': res.description, }
        listTypes.append(dictTypes)
    for type in usageTypes:
        if (type not in listTypes):
            self.fail(('Usage Type %s not present in list' % type))
    return
