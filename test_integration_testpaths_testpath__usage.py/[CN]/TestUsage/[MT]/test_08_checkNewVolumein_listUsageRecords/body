@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_08_checkNewVolumein_listUsageRecords(self):
    ' Test case to check if new volume crated after\n        restore VM is listed in listUsageRecords\n        # 1. Launch a VM\n        # 2. Restore the VM\n        # 3. Check if the new volume created is listed in listUsageRecords API\n        '
    vm = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    volumes_root_list = list_volumes(self.apiclient, virtualmachineid=vm.id, type='ROOT', listall=True)
    list_validation = validateList(volumes_root_list)
    self.assertEqual(list_validation[0], PASS, ('Volume list validation failed due to %s' % list_validation[2]))
    root_volume = volumes_root_list[0]
    vm.restore(self.apiclient)
    qresultset = self.dbclient.execute(("select id from volumes where name='%s' and state='Ready';" % root_volume.name))
    db_list_validation = validateList(qresultset)
    self.assertEqual(db_list_validation[0], PASS, ('Database list validation failed due to %s' % db_list_validation[2]))
    self.assertNotEqual(len(qresultset), 0, 'Check DB Query result set')
    volumeCheck = (('Volume Id: ' + str(qresultset[0][0])) + ' usage time')
    response = self.listUsageRecords(usagetype=6)
    self.assertEqual(response[0], PASS, response[1])
    UsageRecords = [record for record in response[1] if (volumeCheck in record.description)]
    if (not UsageRecords):
        self.fail('listUsageRecords not returning usage for newly created volume')
