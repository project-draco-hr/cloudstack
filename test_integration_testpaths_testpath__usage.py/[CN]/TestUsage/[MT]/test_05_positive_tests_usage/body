@attr(tags=['advanced'], required_hardware='true')
def test_05_positive_tests_usage(self):
    ' Positive test for usage test path T61 - T62\n        Steps:\n        # 1. Deploy a VM\n        # 2. Take Vm snapshot and verify usage is generated for VM snapshot\n        # 3. Delete VM snapshot and verify that usage stops\n        '
    time.sleep(180)
    if (self.hypervisor.lower() in ['kvm', 'hyperv']):
        self.skipTest(('This feature is not supported on %s' % self.hypervisor))
    virtual_machine = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    vmsnapshot = VmSnapshot.create(self.userapiclient, virtual_machine.id)
    response = self.listUsageRecords(usagetype=25)
    self.assertEqual(response[0], PASS, response[1])
    VmSnapshot.deleteVMSnapshot(self.userapiclient, vmsnapshot.id)
    response = self.listUsageRecords(usagetype=25)
    self.assertEqual(response[0], PASS, response[1])
    vmSnapshotUsageRecords_t1 = response[1]
    vmSnapshotUsage_t1 = sum((float(record.rawusage) for record in vmSnapshotUsageRecords_t1))
    response = self.listUsageRecords(usagetype=25)
    self.assertEqual(response[0], PASS, response[1])
    vmSnapshotUsageRecords_t2 = response[1]
    vmSnapshotUsage_t2 = sum((float(record.rawusage) for record in vmSnapshotUsageRecords_t2))
    self.debug(vmSnapshotUsage_t1)
    self.debug(vmSnapshotUsage_t2)
    self.assertEqual(vmSnapshotUsage_t1, vmSnapshotUsage_t2, 'VmSnapshot usage should remain the same                    once snapshot is deleted')
    return
