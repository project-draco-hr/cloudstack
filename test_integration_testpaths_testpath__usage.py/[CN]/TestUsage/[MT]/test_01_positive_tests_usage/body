@attr(tags=['advanced'], required_hardware='True')
def test_01_positive_tests_usage(self):
    ' Positive test for usage test path\n\n        # 1.  Register a template and verify that usage usage is generated\n              for correct size of template\n        # 2.  Register an ISO, verify usage is generate for the correct size\n              of ISO\n        # 3.  Deploy a VM from the template and verify usage is generated\n              for the VM with correct Service Offering and template id\n        # 4.  Delete template and iso\n        # 5.  Stop and start the VM\n        # 6.  Verify that allocated VM usage should be greater than\n              running VM usage\n        # 7.  Destroy the Vm and recover it\n        # 8.  Verify that the running VM usage stays the same after delete and\n              and after recover operation\n        # 9.  Verify that allocated VM usage should be greater after recover\n              operation than after destroy operation\n        # 10. Change service offering of the VM\n        # 11. Verify that VM usage is generated for the VM with correct\n              service offering\n        # 12. Start the VM\n        # 13. Verify that the running VM usage after start operation is less\n              than the allocated VM usage\n        # 14. Verify that the running VM usage after start vm opearation\n              is greater running VM usage after recover VM operation\n        '
    builtin_info = get_builtin_template_info(self.apiclient, self.zone.id)
    self.testdata['privatetemplate']['url'] = builtin_info[0]
    self.testdata['privatetemplate']['hypervisor'] = builtin_info[1]
    self.testdata['privatetemplate']['format'] = builtin_info[2]
    template = Template.register(self.userapiclient, self.testdata['privatetemplate'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(template)
    template.download(self.userapiclient)
    templates = Template.list(self.userapiclient, listall=True, id=template.id, templatefilter='self')
    self.assertEqual(validateList(templates)[0], PASS, 'Templates list validation failed')
    response = self.listUsageRecords(usagetype=7)
    self.assertEqual(response[0], PASS, response[1])
    templateUsageRecords = [record for record in response[1] if (template.id == record.usageid)]
    self.assertEqual(templateUsageRecords[0].virtualsize, templates[0].size, 'The template size in the usage record and                         does not match with the created template size')
    response = self.getLatestUsageJobExecutionTime()
    self.assertEqual(response[0], PASS, response[1])
    lastUsageJobExecTime = response[1]
    response = self.getEventCreatedDateTime(template.name)
    self.assertEqual(response[0], PASS, response[1])
    templateCreatedDateTime = response[1]
    self.debug(('Template creation date: %s' % templateCreatedDateTime))
    expectedUsage = format(((lastUsageJobExecTime - templateCreatedDateTime).total_seconds() / 3600), '.2f')
    actualUsage = format(sum((float(record.rawusage) for record in templateUsageRecords)), '.2f')
    self.assertEqual(expectedUsage, actualUsage, ('expected usage %s and actual usage %s not matching' % (expectedUsage, actualUsage)))
    iso = Iso.create(self.userapiclient, self.testdata['iso'], account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    self.cleanup.append(iso)
    iso.download(self.apiclient)
    isos = Iso.list(self.userapiclient, id=iso.id, listall=True)
    self.assertEqual(validateList(isos)[0], PASS, 'Iso list validation failed')
    response = self.listUsageRecords(usagetype=8)
    self.assertEqual(response[0], PASS, response[1])
    isoUsageRecords = [record for record in response[1] if (iso.id == record.usageid)]
    self.assertEqual(isoUsageRecords[0].size, isos[0].size, 'The iso size in the usage record and                         does not match with the created iso size')
    response = self.getLatestUsageJobExecutionTime()
    self.assertEqual(response[0], PASS, response[1])
    lastUsageJobExecTime = response[1]
    response = self.getEventCreatedDateTime(iso.name)
    self.assertEqual(response[0], PASS, response[1])
    isoCreatedDateTime = response[1]
    self.debug(('Iso creation date: %s' % isoCreatedDateTime))
    expectedUsage = format(((lastUsageJobExecTime - isoCreatedDateTime).total_seconds() / 3600), '.2f')
    actualUsage = format(sum((float(record.rawusage) for record in isoUsageRecords)), '.2f')
    self.assertEqual(expectedUsage, actualUsage, ('expected usage %s and actual usage %s not matching' % (expectedUsage, actualUsage)))
    vm = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmRunningUsageRecords = [record for record in response[1] if (record.virtualmachineid == vm.id)]
    vmRunningRawUsage = sum((float(record.rawusage) for record in vmRunningUsageRecords))
    self.assertEqual(vmRunningUsageRecords[0].offeringid, self.service_offering.id, 'The service offering id in the usage record                        does not match with id of service offering                        with which the VM was created')
    self.assertEqual(vmRunningUsageRecords[0].templateid, template.id, 'The template id in the usage record                        does not match with id of template                        with which the VM was created')
    response = self.listUsageRecords(usagetype=2, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecords = [record for record in response[1] if (record.virtualmachineid == vm.id)]
    vmAllocatedRawUsage = sum((float(record.rawusage) for record in vmAllocatedUsageRecords))
    self.debug(('running vm usage: %s' % vmRunningRawUsage))
    self.debug(('allocated vm usage: %s' % vmAllocatedRawUsage))
    self.assertTrue((vmRunningRawUsage < vmAllocatedRawUsage), 'Allocated VM usage should be greater than Running VM usage')
    response = self.getLatestUsageJobExecutionTime()
    self.assertEqual(response[0], PASS, response[1])
    lastUsageJobExecTime = response[1]
    response = self.getEventCreatedDateTime(vm.name)
    self.assertEqual(response[0], PASS, response[1])
    vmCreatedDateTime = response[1]
    self.debug(('Vm creation date: %s' % vmCreatedDateTime))
    expectedUsage = format(((lastUsageJobExecTime - vmCreatedDateTime).total_seconds() / 3600), '.2f')
    self.debug(('VM expected usage: %s' % expectedUsage))
    actualUsage = format(vmAllocatedRawUsage, '.2f')
    self.assertEqual(expectedUsage, actualUsage, ('expected usage %s and actual usage %s not matching' % (expectedUsage, actualUsage)))
    template.delete(self.userapiclient)
    self.cleanup.remove(template)
    iso.delete(self.userapiclient)
    self.cleanup.remove(iso)
    response = self.listUsageRecords(usagetype=7)
    self.assertEqual(response[0], PASS, response[1])
    templateUsageRecords = response[1]
    usageForTemplateAfterDeletion_1 = sum((float(record.rawusage) for record in [record for record in templateUsageRecords if (template.id == record.usageid)]))
    response = self.listUsageRecords(usagetype=8, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    isoUsageRecords = response[1]
    usageForIsoAfterDeletion_1 = sum((float(record.rawusage) for record in [record for record in isoUsageRecords if (iso.id == record.usageid)]))
    response = self.listUsageRecords(usagetype=7)
    self.assertEqual(response[0], PASS, response[1])
    templateUsageRecords = response[1]
    usageForTemplateAfterDeletion_2 = sum((float(record.rawusage) for record in [record for record in templateUsageRecords if (template.id == record.usageid)]))
    response = self.listUsageRecords(usagetype=8, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    isoUsageRecords = response[1]
    usageForIsoAfterDeletion_2 = sum((float(record.rawusage) for record in [record for record in isoUsageRecords if (iso.id == record.usageid)]))
    self.assertTrue((usageForTemplateAfterDeletion_1 == usageForTemplateAfterDeletion_2), 'usage for template after deletion should remain the same                        after specific intervals of time')
    self.assertTrue((usageForIsoAfterDeletion_1 == usageForIsoAfterDeletion_2), 'usage for iso after deletion should remain the same                        after specific intervals of time')
    vm.stop(self.userapiclient)
    time.sleep(120)
    vm.start(self.userapiclient)
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmRunningUsageRecords = [record for record in response[1] if (record.virtualmachineid == vm.id)]
    vmRunningRawUsage = sum((float(record.rawusage) for record in vmRunningUsageRecords))
    response = self.listUsageRecords(usagetype=2, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecords = [record for record in response[1] if (record.virtualmachineid == vm.id)]
    vmAllocatedRawUsage = sum((float(record.rawusage) for record in vmAllocatedUsageRecords))
    self.debug(('running vm usage: %s' % vmRunningRawUsage))
    self.debug(('allocated vm usage: %s' % vmAllocatedRawUsage))
    self.assertTrue((vmRunningRawUsage < vmAllocatedRawUsage), 'Allocated VM usage should be greater than Running VM usage')
    vm.delete(self.userapiclient, expunge=False)
    response = self.listUsageRecords(usagetype=1, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmRunningUsageRecordAfterDestroy = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    response = self.listUsageRecords(usagetype=2, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecordAfterDestroy = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    vm.recover(self.apiclient)
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmRunningUsageRecordAfterRecover = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    response = self.listUsageRecords(usagetype=2, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecordAfterRecover = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    self.debug(('running vm usage T1: %s' % vmRunningUsageRecordAfterDestroy))
    self.debug(('allocated vm usage T1: %s' % vmRunningUsageRecordAfterRecover))
    self.assertEqual(format(vmRunningUsageRecordAfterDestroy, '.1f'), format(vmRunningUsageRecordAfterRecover, '.1f'), 'Running usage should remain the same')
    self.debug(('allocated vm usage T2: %s' % vmAllocatedUsageRecordAfterDestroy))
    self.debug(('allocated vm usage T2: %s' % vmAllocatedUsageRecordAfterRecover))
    self.assertTrue((vmAllocatedUsageRecordAfterDestroy < vmAllocatedUsageRecordAfterRecover), 'Allocated VM usage after recover should be greater than                        before')
    vm.change_service_offering(self.userapiclient, serviceOfferingId=self.service_offering_2.id)
    response = self.listUsageRecords(usagetype=2)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecord = response[1][(-1)]
    self.assertEqual(vmAllocatedUsageRecord.offeringid, self.service_offering_2.id, 'The service offering id in the usage record                        does not match with id of new service offering')
    vm.start(self.userapiclient)
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmRunningUsageRecordAfterStart = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    response = self.listUsageRecords(usagetype=2, sleep=False)
    self.assertEqual(response[0], PASS, response[1])
    vmAllocatedUsageRecordAfterStart = sum((float(record.rawusage) for record in response[1] if (record.virtualmachineid == vm.id)))
    self.debug(('running vm usage T3: %s' % vmRunningUsageRecordAfterStart))
    self.debug(('allocated vm usage T3: %s' % vmAllocatedUsageRecordAfterStart))
    self.assertTrue((vmRunningUsageRecordAfterStart < vmAllocatedUsageRecordAfterStart), 'Allocated VM usage should be greater than Running usage')
    self.assertTrue((vmRunningUsageRecordAfterRecover < vmRunningUsageRecordAfterStart), 'Running VM usage after start VM should be greater than                        that after recover operation')
    return
