@attr(tags=['advanced'], required_hardware='true')
def test_06_positive_tests_usage(self):
    'Migrate VM and verify usage'
    if (self.hypervisor.lower() in ['lxc']):
        self.skipTest(('vm migrate feature is not supported on %s' % self.hypervisor.lower()))
    self.vm = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id)
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmUsageRecord = response[1][0]
    self.assertEqual(vmUsageRecord.offeringid, self.service_offering.id, 'The service offering id in the usage record                        does not match with id of service offering                        with which the VM was created')
    self.assertEqual(vmUsageRecord.templateid, self.template.id, 'The template id in the usage record                        does not match with id of template                        with which the VM was created')
    host = findSuitableHostForMigration(self.apiclient, self.vm.id)
    if (host is None):
        self.skipTest(ERROR_NO_HOST_FOR_MIGRATION)
    try:
        self.vm.migrate(self.apiclient, host.id)
    except Exception as e:
        self.fail(('Failed to migrate instance: %s' % e))
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmUsageRecords_t1 = response[1]
    vmUsage_t1 = sum((float(record.rawusage) for record in vmUsageRecords_t1))
    response = self.listUsageRecords(usagetype=1)
    self.assertEqual(response[0], PASS, response[1])
    vmUsageRecords_t2 = response[1]
    vmUsage_t2 = sum((float(record.rawusage) for record in vmUsageRecords_t2))
    self.debug(vmUsage_t1)
    self.debug(vmUsage_t2)
    self.assertTrue((vmUsage_t1 < vmUsage_t2), 'Vm usage should be running after                vm is migrated')
