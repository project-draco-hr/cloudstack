{
  if (options == null || rfb == null || !rfb.inNormalProtocol)   return;
  options.preferredEncoding=RfbProto.EncodingHextile;
  int preferredEncoding=options.preferredEncoding;
  if (preferredEncoding == -1) {
    long kbitsPerSecond=rfb.kbitsPerSecond();
    if (nEncodingsSaved < 1) {
      preferredEncoding=RfbProto.EncodingTight;
    }
 else     if (kbitsPerSecond > 2000 && encodingsSaved[0] != RfbProto.EncodingHextile) {
      s_logger.info("Throughput " + kbitsPerSecond + " kbit/s - changing to Hextile encoding");
      preferredEncoding=RfbProto.EncodingHextile;
    }
 else     if (kbitsPerSecond < 1000 && encodingsSaved[0] != RfbProto.EncodingTight) {
      s_logger.info("Throughput " + kbitsPerSecond + " kbit/s - changing to Tight/ZRLE encodings");
      preferredEncoding=RfbProto.EncodingTight;
    }
 else {
      if (autoSelectOnly)       return;
      preferredEncoding=encodingsSaved[0];
    }
  }
 else {
    if (autoSelectOnly)     return;
  }
  int[] encodings=new int[20];
  int nEncodings=0;
  encodings[nEncodings++]=preferredEncoding;
  if (options.useCopyRect) {
    encodings[nEncodings++]=RfbProto.EncodingCopyRect;
  }
  if (preferredEncoding != RfbProto.EncodingTight) {
    encodings[nEncodings++]=RfbProto.EncodingTight;
  }
  if (preferredEncoding != RfbProto.EncodingZRLE) {
    encodings[nEncodings++]=RfbProto.EncodingZRLE;
  }
  if (preferredEncoding != RfbProto.EncodingHextile) {
    encodings[nEncodings++]=RfbProto.EncodingHextile;
  }
  if (preferredEncoding != RfbProto.EncodingZlib) {
    encodings[nEncodings++]=RfbProto.EncodingZlib;
  }
  if (preferredEncoding != RfbProto.EncodingCoRRE) {
    encodings[nEncodings++]=RfbProto.EncodingCoRRE;
  }
  if (preferredEncoding != RfbProto.EncodingRRE) {
    encodings[nEncodings++]=RfbProto.EncodingRRE;
  }
  if (options.compressLevel >= 0 && options.compressLevel <= 9) {
    encodings[nEncodings++]=RfbProto.EncodingCompressLevel0 + options.compressLevel;
  }
  if (options.jpegQuality >= 0 && options.jpegQuality <= 9) {
    encodings[nEncodings++]=RfbProto.EncodingQualityLevel0 + options.jpegQuality;
  }
  if (options.requestCursorUpdates) {
    encodings[nEncodings++]=RfbProto.EncodingXCursor;
    encodings[nEncodings++]=RfbProto.EncodingRichCursor;
    if (!options.ignoreCursorUpdates)     encodings[nEncodings++]=RfbProto.EncodingPointerPos;
  }
  encodings[nEncodings++]=RfbProto.EncodingLastRect;
  encodings[nEncodings++]=RfbProto.EncodingNewFBSize;
  boolean encodingsWereChanged=false;
  if (nEncodings != nEncodingsSaved) {
    encodingsWereChanged=true;
  }
 else {
    for (int i=0; i < nEncodings; i++) {
      if (encodings[i] != encodingsSaved[i]) {
        encodingsWereChanged=true;
        break;
      }
    }
  }
  if (encodingsWereChanged) {
    try {
      rfb.writeSetEncodings(encodings,nEncodings);
      if (vc != null) {
        vc.softCursorFree();
      }
    }
 catch (    Exception e) {
      s_logger.error(e.toString(),e);
    }
    encodingsSaved=encodings;
    nEncodingsSaved=nEncodings;
  }
}
