{
  createCanvas(0,0);
  int retries=0;
  while (!dropMe) {
    try {
      s_logger.info("Connecting to VNC server");
      status=STATUS_CONNECTING;
      connectAndAuthenticate();
      retries=0;
      status=STATUS_INITIALIZING;
      doProtocolInitialisation();
      vc.rfb=rfb;
      vc.setPixelFormat();
      if (clientStream != null) {
        s_logger.info("Send init framebuffer size (" + rfb.framebufferWidth + ", "+ rfb.framebufferHeight+ ")");
        ByteArrayOutputStream bos=new ByteArrayOutputStream(128);
        try {
          vc.encodeFramebufferResize(rfb.framebufferWidth,rfb.framebufferHeight,bos);
        }
 catch (        IOException e) {
        }
        writeToClientStream(bos.toByteArray());
      }
      vc.rfb.writeFramebufferUpdateRequest(0,0,vc.rfb.framebufferWidth,vc.rfb.framebufferHeight,true);
      status=STATUS_NORMAL_OPERATION;
      vc.processNormalProtocol();
    }
 catch (    AuthenticationException e) {
      status=STATUS_AUTHENTICATION_FAILURE;
      String msg=e.getMessage();
      s_logger.warn("Authentication exception, msg: " + msg + "sid: "+ this.passwordParam);
    }
catch (    Exception e) {
      status=STATUS_ERROR;
      if (s_logger.isDebugEnabled())       s_logger.debug("Exception : ",e);
    }
 finally {
      encodingsSaved=null;
      nEncodingsSaved=0;
      s_logger.info("Close current RFB");
synchronized (this) {
        if (rfb != null) {
          rfb.close();
        }
      }
    }
    if (dropMe) {
      break;
    }
    if (status == STATUS_AUTHENTICATION_FAILURE) {
      break;
    }
 else {
      retries++;
      if (retries > ConsoleProxy.reconnectMaxRetry) {
        s_logger.info("Exception caught, retry has reached to maximum : " + retries + ", will give up and disconnect client");
        break;
      }
      s_logger.info("Exception caught, retrying in 1 second, current retry:" + retries);
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  dropMe=true;
  if (!viewerInReuse)   ConsoleProxy.removeViewer(this);
  s_logger.info("RFB thread terminating");
}
