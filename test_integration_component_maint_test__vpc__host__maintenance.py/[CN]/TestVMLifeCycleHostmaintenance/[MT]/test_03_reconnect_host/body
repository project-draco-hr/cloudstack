@attr(tags=['advanced', 'intervlan'])
def test_03_reconnect_host(self):
    ' Test reconnect Host which has VPC elements\n        '
    try:
        timeout = self.services['timeout']
        while True:
            list_host_response = Host.list(self.apiclient, id=self.vpcvr.hostid, resourcestate='Enabled')
            if (list_host_response is not None):
                break
            elif (timeout == 0):
                raise Exception('Failed to list the Host in Up State')
            time.sleep(self.services['sleep'])
            timeout = (timeout - 1)
        self.debug('Verified that the Host is in Up State')
    except:
        self.fail('Failed to find the Host in Up State')
    self.debug('Reconnecting the host where VPC VR is running')
    try:
        Host.reconnect(self.apiclient, id=self.vpcvr.hostid)
    except Exception as e:
        self.fail(('Failed to reconnect to host: %s' % e))
    self.debug('Check the status of router after migration')
    routers = Router.list(self.apiclient, id=self.vpcvr.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'List routers shall return the valid response')
    self.assertEqual(routers[0].state, 'Running', 'Router state should be running')
    return
