{
  Long podId=(Long)params.get(BaseCmd.Properties.ID.getName());
  String podName=(String)params.get(BaseCmd.Properties.NAME.getName());
  String gateway=(String)params.get(BaseCmd.Properties.GATEWAY.getName());
  String cidr=(String)params.get(BaseCmd.Properties.CIDR.getName());
  String startIp=(String)params.get(BaseCmd.Properties.START_IP.getName());
  String endIp=(String)params.get(BaseCmd.Properties.END_IP.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  HostPodVO pod=getManagementServer().findHostPodById(podId);
  if (pod == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find pod by id " + podId);
  }
  long zoneId=pod.getDataCenterId();
  DataCenterVO zone=getManagementServer().findDataCenterById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find zone by id " + zoneId);
  }
  if (endIp != null && startIp == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"If an end IP is specified, a start IP must be specified.");
  }
  HostPodVO updatedPod=null;
  try {
    updatedPod=getManagementServer().editPod(userId,podId,podName,gateway,cidr,startIp,endIp);
  }
 catch (  Exception ex) {
    s_logger.error("Exception updating pod",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  if (updatedPod == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to update pod; internal error.");
  }
 else {
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),"true"));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),"Successfully updated pod."));
  }
  return returnValues;
}
