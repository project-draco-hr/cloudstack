{
  final Transaction txn=Transaction.currentTxn();
  try {
    final SearchCriteria<NetworkGroupWorkVO> sc=UntakenWorkSearch.create();
    sc.setParameters("step",Step.Scheduled);
    final Filter filter=new Filter(NetworkGroupWorkVO.class,null,true,0l,1l);
    txn.start();
    final List<NetworkGroupWorkVO> vos=lockRows(sc,filter,true);
    if (vos.size() == 0) {
      txn.commit();
      return null;
    }
    NetworkGroupWorkVO work=null;
    for (    NetworkGroupWorkVO w : vos) {
      if (findByVmIdStep(w.getInstanceId(),Step.Processing) == null) {
        work=w;
        break;
      }
    }
    if (work == null) {
      txn.commit();
      return null;
    }
    work.setServerId(serverId);
    work.setDateTaken(new Date());
    work.setStep(NetworkGroupWorkVO.Step.Processing);
    update(work.getId(),work);
    txn.commit();
    return work;
  }
 catch (  final Throwable e) {
    throw new CloudRuntimeException("Unable to execute take",e);
  }
}
