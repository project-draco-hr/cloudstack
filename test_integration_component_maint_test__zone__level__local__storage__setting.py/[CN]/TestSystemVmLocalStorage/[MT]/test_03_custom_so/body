@attr(tags=['advanced', 'basic'])
@data('consoleproxy', 'secondarystoragevm')
def test_03_custom_so(self, value):
    '\n        update global setting with system offering and check if it is being\n        honoured\n        1-update zone level settings "system.vm.use.local.storage={true,false}}\n        to use local storage\n        2-create system offerings{shared,local}\n        3-update global settings with system offering uuid and restart ms\n        4-destroy system vms\n        5-Check if new system vms are using offering  updated in global\n        settings\n        '
    update_global_settings(self, value='true', name='system.vm.use.local.storage', zoneid=self.zone.id)
    created_so_id = create_system_so(self, value, 'shared')
    if (value == 'consoleproxy'):
        name = 'consoleproxy.service.offering'
    elif (value == 'secondarystoragevm'):
        name = 'secstorage.service.offering'
    else:
        raise Exception('type paramter is not correct it should be  system vm type{console proxy,secsroragevm}')
    update_global_settings(self, value=created_so_id, name=name)
    destroy_systemvm(self, value)
    query_zone_id = self.dbclient.execute(("select id from data_center where uuid= '%s';" % self.zone.id))
    query_so_id = self.dbclient.execute(("select service_offering_id from vm_instance where type='%s'and state='Running' and data_center_id= '%s';" % (value, query_zone_id[0][0])))
    query_disk_offering = self.dbclient.execute(("select uuid from disk_offering  where id= '%s';" % query_so_id[0][0]))
    self.assertEqual(created_so_id, query_disk_offering[0][0], 'system vms are not using service offering mentioned in global settings')
    update_global_settings(self, value='false', name='system.vm.use.local.storage', zoneid=self.zone.id)
    created_so_id = create_system_so(self, value, 'local')
    update_global_settings(self, value=created_so_id, name=name)
    destroy_systemvm(self, value)
    query_zone_id = self.dbclient.execute(("select id from data_center where uuid= '%s';" % self.zone.id))
    query_so_id = self.dbclient.execute(("select service_offering_id from vm_instance where type='%s'and state='Running' and data_center_id= '%s';" % (value, query_zone_id[0][0])))
    query_disk_offering = self.dbclient.execute(("select uuid from disk_offering  where id= '%s';" % query_so_id[0][0]))
    self.assertEqual(created_so_id, query_disk_offering[0][0], 'system vms are not using service offering mentioned in global settings')
