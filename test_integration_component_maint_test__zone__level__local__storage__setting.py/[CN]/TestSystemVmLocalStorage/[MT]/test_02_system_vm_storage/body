@attr(tags=['advanced', 'basic'])
@data('consoleproxy', 'secondarystoragevm')
def test_02_system_vm_storage(self, value):
    ' Check if system vms are honouring zone level setting\n        system.vm.use.local.storage\n        1-List zone level config\n        2-update the zone level config with service offering uuid\n        3-destroy system vms\n        4-check used storage by system vms\n        '
    if (value == 'consoleproxy'):
        update_global_settings(self, value=None, name='consoleproxy.service.offering')
    if (value == 'secondarystoragevm'):
        update_global_settings(self, value=None, name='secstorage.service.offering')
    list_conf = Configurations.list(self.apiclient, name='system.vm.use.local.storage', zoneid=self.zone.id)
    self.assertEqual(validateList(list_conf)[0], PASS, 'Check List configuration response for system.vm.use.local.storage')
    val = str_to_bool(list_conf[0].value)
    update_global_settings(self, value=str((not val)).lower(), name='system.vm.use.local.storage', zoneid=self.zone.id)
    destroy_systemvm(self, value)
    storage_check(self, value, int((not val)))
    update_global_settings(self, value=str(val).lower(), name='system.vm.use.local.storage', zoneid=self.zone.id)
    destroy_systemvm(self, value)
    storage_check(self, value, int(val))
    if (value == 'consoleproxy'):
        update_global_settings(self, value=None, name='consoleproxy.service.offering')
    if (value == 'secondarystoragevm'):
        update_global_settings(self, value=None, name='secstorage.service.offering')
