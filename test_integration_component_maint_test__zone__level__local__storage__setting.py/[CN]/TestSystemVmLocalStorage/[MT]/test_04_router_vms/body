@attr(tags=['advanced'])
def test_04_router_vms(self):
    ' Check if router  vm is honouring zone level setting\n        system.vm.use.local.storage'
    list_conf = Configurations.list(self.apiclient, name='system.vm.use.local.storage', zoneid=self.zone.id)
    self.assertEqual(validateList(list_conf)[0], PASS, 'Check List configuration response for system.vm.use.local.storage')
    self.network_offering = NetworkOffering.create(self.apiclient, self.testdata['network_offering'], ispersistent='true')
    list_nw_of = NetworkOffering.list(self.apiclient, id=self.network_offering.id)
    self.assertEqual(validateList(list_nw_of)[0], PASS, 'Check the list network response')
    self.assertEqual(str(list_nw_of[0].id), str(self.network_offering.id), 'Check the created network offering id and listed network offering id')
    self._cleanup.append(self.network_offering)
    self.network_offering.update(self.apiclient, state='Enabled')
    list_nw_of1 = NetworkOffering.list(self.apiclient, id=self.network_offering.id)
    self.assertEqual(validateList(list_nw_of1)[0], PASS, 'Check the list network response')
    self.assertEqual(str(list_nw_of1[0].state), 'Enabled', 'Check the created network state')
    self.network = Network.create(self.apiclient, self.testdata['network'], networkofferingid=self.network_offering.id, zoneid=self.zone.id, accountid=self.account.name, domainid=self.account.domainid)
    list_network = Network.list(self.apiclient, accountid=self.account.name, domainid=self.account.domainid, id=self.network.id)
    self.assertEqual(validateList(list_network)[0], PASS, 'check list netwok response ')
    self.assertEqual(list_network[0].id, self.network.id, ('List network id %s and created network id %s  does not match' % (list_network[0].id, self.network.id)))
    list_router = Router.list(self.apiclient, networkid=self.network.id, accountid=self.account.name, domainid=self.account.domainid)
    self.assertEqual(validateList(list_router)[0], PASS, 'check list router response')
    list_so = ServiceOffering.list(self.apiclient, issystem='true', id=list_router[0].serviceofferingid)
    self.assertEqual(validateList(list_so)[0], PASS, 'check list service offering response')
    if (list_conf[0].value == 'true'):
        storage_type = 'local'
        value1 = 'false'
    elif (list_conf[0].value == 'false'):
        storage_type = 'shared'
        value1 = 'true'
    else:
        raise Exception('check list_conf[0].value')
    self.assertEqual(list_so[0].storagetype, storage_type, 'Check VR storage type and zone level settig')
    update_global_settings(self, value=value1, name='system.vm.use.local.storage', zoneid=self.zone.id)
    list_conf1 = Configurations.list(self.apiclient, name='system.vm.use.local.storage', zoneid=self.zone.id)
    self.assertEqual(validateList(list_conf1)[0], PASS, 'Check List configuration response for system.vm.use.local.storage')
    self.assertEqual(list_conf1[0].value, value1, 'Check the system.vm.use.local.storage value')
    self.network.restart(self.apiclient, cleanup='true')
    list_network1 = Network.list(self.apiclient, accountid=self.account.name, domainid=self.account.domainid, id=self.network.id)
    self.assertEqual(validateList(list_network1)[0], PASS, 'check list netwok response ')
    list_router1 = Router.list(self.apiclient, networkid=list_network1[0].id, accountid=self.account.name, domainid=self.account.domainid)
    self.assertEqual(validateList(list_router1)[0], PASS, 'check list router response')
    list_so1 = ServiceOffering.list(self.apiclient, issystem='true', id=list_router1[0].serviceofferingid)
    self.assertEqual(validateList(list_so1)[0], PASS, 'check list service offering response')
    if (list_conf1[0].value == 'true'):
        storage_type1 = 'local'
    elif (list_conf1[0].value == 'false'):
        storage_type1 = 'shared'
    else:
        raise Exception('check list_conf[0].value')
    self.assertEqual(list_so1[0].storagetype, storage_type1, 'Check VR storage type and zone level settings')
