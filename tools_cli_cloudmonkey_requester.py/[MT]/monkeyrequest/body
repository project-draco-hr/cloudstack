def monkeyrequest(command, args, isasync, asyncblock, logger, host, port, apikey, secretkey, timeout, protocol, path):
    response = None
    error = None
    logger_debug(logger, '======== START Request ========')
    logger_debug(logger, ('Requesting command=%s, args=%s' % (command, args)))
    (response, error) = make_request(command, args, logger, host, port, apikey, secretkey, protocol, path)
    logger_debug(logger, '======== END Request ========\n')
    if (error is not None):
        return (response, error)

    def process_json(response):
        try:
            response = json.loads(str(response))
        except ValueError as e:
            error = ('Error processing json response, %s' % e)
            logger_debug(logger, 'Error processing json', e)
        return response
    response = process_json(response)
    if (response is None):
        return (response, error)
    isasync = (isasync and (asyncblock == 'true'))
    responsekey = filter((lambda x: ('response' in x)), response.keys())[0]
    if (isasync and ('jobid' in response[responsekey])):
        jobid = response[responsekey]['jobid']
        command = 'queryAsyncJobResult'
        request = {'jobid': jobid, }
        timeout = int(timeout)
        pollperiod = 3
        progress = 1
        while (timeout > 0):
            print ('\r' + ('.' * progress)),
            time.sleep(pollperiod)
            timeout = (timeout - pollperiod)
            progress += 1
            logger_debug(logger, ('Job %s to timeout in %ds' % (jobid, timeout)))
            sys.stdout.flush()
            (response, error) = monkeyrequest(command, request, isasync, asyncblock, logger, host, port, apikey, secretkey, timeout, protocol, path)
            response = process_json(response)
            responsekeys = filter((lambda x: ('response' in x)), response.keys())
            if (len(responsekeys) < 1):
                continue
            result = response[responsekeys[0]]
            jobstatus = result['jobstatus']
            if (jobstatus == 2):
                jobresult = result['jobresult']
                error = ('\rAsync job %s failed\nError %s, %s' % (jobid, jobresult['errorcode'], jobresult['errortext']))
                return (response, error)
            elif (jobstatus == 1):
                print '\r',
                return (response, error)
        error = ('Error: Async query timeout occurred for jobid %s' % jobid)
    return (response, error)
