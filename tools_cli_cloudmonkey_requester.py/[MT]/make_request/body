def make_request(command, args, logger, host, port, apikey, secretkey, protocol, path):
    response = None
    error = None
    if ((protocol != 'http') and (protocol != 'https')):
        error = "Protocol must be 'http' or 'https'"
        return (None, error)
    if (args is None):
        args = {}
    args['command'] = command
    args['apiKey'] = apikey
    args['response'] = 'json'
    request = zip(args.keys(), args.values())
    request.sort(key=(lambda x: str.lower(x[0])))
    request_url = '&'.join(['='.join([r[0], urllib.quote_plus(str(r[1]))]) for r in request])
    hashStr = '&'.join(['='.join([str.lower(r[0]), str.lower(urllib.quote_plus(str(r[1]))).replace('+', '%20')]) for r in request])
    sig = urllib.quote_plus(base64.encodestring(hmac.new(secretkey, hashStr, hashlib.sha1).digest()).strip())
    request_url += ('&signature=%s' % sig)
    request_url = ('%s://%s:%s%s?%s' % (protocol, host, port, path, request_url))
    try:
        logger_debug(logger, ('Request sent: %s' % request_url))
        connection = urllib2.urlopen(request_url)
        response = connection.read()
    except HTTPError as e:
        error = ('%s: %s' % (e.msg, e.info().getheader('X-Description')))
    logger_debug(logger, ('Response received: %s' % response))
    if (error is not None):
        logger_debug(logger, ('Error: error is not None, %s' % error))
        return (response, error)
    return (response, error)
