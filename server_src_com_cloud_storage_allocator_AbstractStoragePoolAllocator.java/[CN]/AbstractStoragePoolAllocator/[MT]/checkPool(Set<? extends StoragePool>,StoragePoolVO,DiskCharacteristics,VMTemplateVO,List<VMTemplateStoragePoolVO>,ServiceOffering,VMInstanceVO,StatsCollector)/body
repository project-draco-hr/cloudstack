{
  if (avoid.contains(pool)) {
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    return false;
  }
  if (!pool.getStatus().equals(com.cloud.host.Status.Up)) {
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool,vm,offering)) {
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Attempting to look for pool " + pool.getId() + " for storage, totalSize: "+ pool.getCapacityBytes()+ ", usedBytes: "+ stats.getByteUsed()+ ", usedPct: "+ usedPercentage+ ", threshold: "+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + (long)sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    VMTemplateVO templateInPool=_templateDao.findById(templatePoolVO.getTemplateId());
    if ((template != null) && !tmpinstalled && (templateInPool.getId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if (template != null && !tmpinstalled) {
    totalAllocatedSize+=dskCh.getSize() + _extraBytesPerVolume;
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Attempting to look for pool " + pool.getId() + " for storage, maxSize : "+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ", totalSize : "+ totalAllocatedSize+ ", askingSize : "+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Found pool " + pool.getId() + " for storage, maxSize : "+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ", totalSize : "+ totalAllocatedSize+ ", askingSize : "+ askingSize);
    }
    return false;
  }
  return true;
}
