{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Checking if storage pool is suitable, name: " + pool.getName() + " ,poolId: "+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool is in avoid set, skipping this pool");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Disk needed for ROOT volume, but StoragePoolType is Iscsi, skipping this and trying other available pools");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool status is not UP, status is: " + pool.getStatus().name() + ", skipping this pool");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool is not of correct type, skipping this pool");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool's Cluster does not have required hypervisorType, skipping this pool");
    }
    return false;
  }
  Volume volume=_volumeDao.findById(dskCh.getVolumeId());
  List<Volume> requestVolumes=new ArrayList<Volume>();
  requestVolumes.add(volume);
  return _storageMgr.storagePoolHasEnoughSpace(requestVolumes,pool);
}
