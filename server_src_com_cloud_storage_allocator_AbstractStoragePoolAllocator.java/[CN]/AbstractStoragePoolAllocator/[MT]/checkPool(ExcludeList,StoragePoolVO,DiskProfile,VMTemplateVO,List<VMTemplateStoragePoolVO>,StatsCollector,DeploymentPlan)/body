{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Checking if storage pool is suitable, name: " + pool.getName() + " ,poolId: "+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool is in avoid set, skipping this pool");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Disk needed for ROOT volume, but StoragePoolType is Iscsi, skipping this and trying other available pools");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool status is not UP, status is: " + pool.getStatus().name() + ", skipping this pool");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool is not of correct type, skipping this pool");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("StoragePool's Cluster does not have required hypervisorType, skipping this pool");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Attempting to look for pool " + pool.getId() + " for storage, totalSize: "+ pool.getCapacityBytes()+ ", usedBytes: "+ stats.getByteUsed()+ ", usedPct: "+ usedPercentage+ ", disable threshold: "+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Cannot allocate this pool " + pool.getId() + " for storage since its usage percentage: "+ usedPercentage+ " has crossed the pool.storage.capacity.disablethreshold: "+ _storageUsedThreshold+ ", skipping this pool");
        }
        return false;
      }
    }
  }
  long totalAllocatedSize=_capacityMgr.getAllocatedPoolCapacity(pool,null);
  long askingSize=dskCh.getSize();
  long totalOverProvCapacity;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    totalOverProvCapacity=_storageOverprovisioningFactor.multiply(new BigDecimal(pool.getCapacityBytes())).longValue();
  }
 else {
    totalOverProvCapacity=pool.getCapacityBytes();
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Attempting to look for pool " + pool.getId() + " for storage, maxSize : "+ totalOverProvCapacity+ ", totalAllocatedSize : "+ totalAllocatedSize+ ", askingSize : "+ askingSize+ ", allocated disable threshold: "+ _storageAllocatedThreshold);
  }
  double usedPercentage=(totalAllocatedSize + askingSize) / (double)(totalOverProvCapacity);
  if (usedPercentage > _storageAllocatedThreshold) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Cannot allocate this pool " + pool.getId() + " for storage since its allocated percentage: "+ usedPercentage+ " has crossed the allocated pool.storage.allocated.capacity.disablethreshold: "+ _storageAllocatedThreshold+ ", skipping this pool");
    }
    return false;
  }
  if (totalOverProvCapacity < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Cannot allocate this pool " + pool.getId() + " for storage, not enough storage, maxSize : "+ totalOverProvCapacity+ ", totalAllocatedSize : "+ totalAllocatedSize+ ", askingSize : "+ askingSize);
    }
    return false;
  }
  return true;
}
