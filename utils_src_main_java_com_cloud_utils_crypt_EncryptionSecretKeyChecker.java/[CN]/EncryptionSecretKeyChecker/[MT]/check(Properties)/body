{
  String encryptionType=dbProps.getProperty("db.cloud.encryption.type");
  s_logger.debug("Encryption Type: " + encryptionType);
  if (encryptionType == null || encryptionType.equals("none")) {
    return;
  }
  if (s_useEncryption) {
    s_logger.warn("Encryption already enabled, is check() called twice?");
    return;
  }
  s_encryptor.setAlgorithm("PBEWithMD5AndDES");
  String secretKey=null;
  SimpleStringPBEConfig stringConfig=new SimpleStringPBEConfig();
  if (encryptionType.equals("file")) {
    InputStream is=this.getClass().getClassLoader().getResourceAsStream(s_keyFile);
    if (is == null) {
      is=this.getClass().getClassLoader().getResourceAsStream(s_altKeyFile);
    }
    if (is == null) {
      throw new CloudRuntimeException(s_keyFile + " File containing secret key not found in the classpath: ");
    }
    try (BufferedReader in=new BufferedReader(new InputStreamReader(is))){
      secretKey=in.readLine();
    }
 catch (    IOException e) {
      throw new CloudRuntimeException("Error while reading secret key from: " + s_keyFile,e);
    }
    if (secretKey == null || secretKey.isEmpty()) {
      throw new CloudRuntimeException("Secret key is null or empty in file " + s_keyFile);
    }
  }
 else   if (encryptionType.equals("env")) {
    secretKey=System.getenv(s_envKey);
    if (secretKey == null || secretKey.isEmpty()) {
      throw new CloudRuntimeException("Environment variable " + s_envKey + " is not set or empty");
    }
  }
 else   if (encryptionType.equals("web")) {
    int port=8097;
    try (ServerSocket serverSocket=new ServerSocket(port)){
      s_logger.info("Waiting for admin to send secret key on port " + port);
      try (Socket clientSocket=serverSocket.accept();PrintWriter out=new PrintWriter(clientSocket.getOutputStream(),true);BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))){
        String inputLine;
        if ((inputLine=in.readLine()) != null) {
          secretKey=inputLine;
        }
      }
 catch (      IOException e) {
        throw new CloudRuntimeException("Accept failed on " + port);
      }
    }
 catch (    IOException ioex) {
      throw new CloudRuntimeException("Error initializing secret key reciever",ioex);
    }
  }
 else {
    throw new CloudRuntimeException("Invalid encryption type: " + encryptionType);
  }
  stringConfig.setPassword(secretKey);
  s_encryptor.setConfig(stringConfig);
  s_useEncryption=true;
}
