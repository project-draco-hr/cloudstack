{
  UsageVO usageVO=new UsageVO();
  usageVO.setId(100L);
  usageVO.setQuotaCalculated(0);
  usageVO.setUsageType(UsageTypes.NETWORK_BYTES_SENT);
  usageVO.setRawUsage(9000000000.0);
  usageVO.setSize(1010101010L);
  QuotaTariffVO tariffVO=new QuotaTariffVO();
  tariffVO.setCurrencyValue(new BigDecimal(1));
  Mockito.when(quotaTariffDao.findTariffPlanByUsageType(Mockito.anyInt(),Mockito.any(Date.class))).thenReturn(tariffVO);
  QuotaUsageVO qu=quotaManager.updateQuotaNetwork(usageVO,UsageTypes.NETWORK_BYTES_SENT);
  assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);
  qu=quotaManager.updateQuotaAllocatedVMUsage(usageVO,new BigDecimal(0.5));
  assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);
  qu=quotaManager.updateQuotaDiskUsage(usageVO,new BigDecimal(0.5),UsageTypes.VOLUME);
  assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);
  qu=quotaManager.updateQuotaRaw(usageVO,new BigDecimal(0.5),UsageTypes.VPN_USERS);
  assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);
  Mockito.verify(quotaUsageDao,Mockito.times(4)).persistQuotaUsage(Mockito.any(QuotaUsageVO.class));
  Mockito.verify(usageDao,Mockito.times(4)).persistUsage(Mockito.any(UsageVO.class));
}
