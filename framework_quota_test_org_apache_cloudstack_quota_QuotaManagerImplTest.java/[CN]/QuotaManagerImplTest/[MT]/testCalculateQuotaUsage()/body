{
  AccountVO accountVO=new AccountVO();
  accountVO.setId(2L);
  accountVO.setDomainId(1L);
  accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);
  List<AccountVO> accountVOList=new ArrayList<>();
  accountVOList.add(accountVO);
  Mockito.when(accountDao.listAll()).thenReturn(accountVOList);
  UsageVO usageVO=new UsageVO();
  usageVO.setQuotaCalculated(0);
  List<UsageVO> usageVOList=new ArrayList<UsageVO>();
  usageVOList.add(usageVO);
  Pair<List<? extends UsageVO>,Integer> usageRecords=new Pair<List<? extends UsageVO>,Integer>(usageVOList,usageVOList.size());
  Mockito.when(usageDao.getUsageRecordsPendingQuotaAggregation(Mockito.anyLong(),Mockito.anyLong())).thenReturn(usageRecords);
  QuotaUsageVO quotaUsageVO=new QuotaUsageVO();
  quotaUsageVO.setAccountId(2L);
  List<QuotaUsageVO> quotaListForAccount=new ArrayList<>();
  quotaListForAccount.add(quotaUsageVO);
  Mockito.doReturn(quotaListForAccount).when(quotaManager).aggregatePendingQuotaRecordsForAccount(Mockito.eq(accountVO),Mockito.eq(usageRecords));
  Mockito.doNothing().when(quotaManager).processQuotaBalanceForAccount(Mockito.eq(accountVO),Mockito.eq(quotaListForAccount));
  assertTrue(quotaManager.calculateQuotaUsage());
}
