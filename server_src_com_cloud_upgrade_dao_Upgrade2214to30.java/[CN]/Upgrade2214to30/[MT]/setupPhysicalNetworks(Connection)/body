{
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  PreparedStatement pstmtUpdate=null;
  try {
    String getNextNetworkSequenceSql="SELECT value from `cloud`.`sequence` where name='physical_networks_seq'";
    String advanceNetworkSequenceSql="UPDATE `cloud`.`sequence` set value=value+1 where name='physical_networks_seq'";
    String xenPublicLabel=getNetworkLabelFromConfig(conn,"xen.public.network.device");
    String xenPrivateLabel=getNetworkLabelFromConfig(conn,"xen.private.network.device");
    String xenStorageLabel=getNetworkLabelFromConfig(conn,"xen.storage.network.device1");
    String xenGuestLabel=getNetworkLabelFromConfig(conn,"xen.guest.network.device");
    String kvmPublicLabel=getNetworkLabelFromConfig(conn,"kvm.public.network.device");
    String kvmPrivateLabel=getNetworkLabelFromConfig(conn,"kvm.private.network.device");
    String kvmGuestLabel=getNetworkLabelFromConfig(conn,"kvm.guest.network.device");
    String vmwarePublicLabel=getNetworkLabelFromConfig(conn,"vmware.public.vswitch");
    String vmwarePrivateLabel=getNetworkLabelFromConfig(conn,"vmware.private.vswitch");
    String vmwareGuestLabel=getNetworkLabelFromConfig(conn,"vmware.guest.vswitch");
    pstmt=conn.prepareStatement("SELECT id, domain_id, networktype, vnet, name FROM `cloud`.`data_center`");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long zoneId=rs.getLong(1);
      Long domainId=rs.getLong(2);
      String networkType=rs.getString(3);
      String vnet=rs.getString(4);
      String zoneName=rs.getString(5);
      PreparedStatement pstmt2=conn.prepareStatement(getNextNetworkSequenceSql);
      ResultSet rsSeq=pstmt2.executeQuery();
      rsSeq.next();
      long physicalNetworkId=rsSeq.getLong(1);
      rsSeq.close();
      pstmt2.close();
      pstmt2=conn.prepareStatement(advanceNetworkSequenceSql);
      pstmt2.executeUpdate();
      pstmt2.close();
      String uuid=UUID.randomUUID().toString();
      String broadcastDomainRange="POD";
      if ("Advanced".equals(networkType)) {
        broadcastDomainRange="ZONE";
      }
      s_logger.debug("Adding PhysicalNetwork " + physicalNetworkId + " for Zone id "+ zoneId);
      String sql="INSERT INTO `cloud`.`physical_network` (id, uuid, data_center_id, vnet, broadcast_domain_range, state, name) VALUES (?,?,?,?,?,?,?)";
      pstmtUpdate=conn.prepareStatement(sql);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,uuid);
      pstmtUpdate.setLong(3,zoneId);
      pstmtUpdate.setString(4,vnet);
      pstmtUpdate.setString(5,broadcastDomainRange);
      pstmtUpdate.setString(6,"Enabled");
      zoneName=zoneName + "-pNtwk";
      pstmtUpdate.setString(7,zoneName);
      s_logger.warn("Statement is " + pstmtUpdate.toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      if (domainId != null && domainId.longValue() != 0) {
        s_logger.debug("Updating domain_id for physical network id=" + physicalNetworkId);
        sql="UPDATE `cloud`.`physical_network` set domain_id=? where id=?";
        pstmtUpdate=conn.prepareStatement(sql);
        pstmtUpdate.setLong(1,domainId);
        pstmtUpdate.setLong(2,physicalNetworkId);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
      }
      s_logger.debug("Adding PhysicalNetwork traffic types");
      String insertTraficType="INSERT INTO `cloud`.`physical_network_traffic_types` (physical_network_id, traffic_type, xen_network_label, kvm_network_label, vmware_network_label, uuid) VALUES ( ?, ?, ?, ?, ?, ?)";
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,"Public");
      pstmtUpdate.setString(3,xenPublicLabel);
      pstmtUpdate.setString(4,kvmPublicLabel);
      pstmtUpdate.setString(5,vmwarePublicLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,"Management");
      pstmtUpdate.setString(3,xenPrivateLabel);
      pstmtUpdate.setString(4,kvmPrivateLabel);
      pstmtUpdate.setString(5,vmwarePrivateLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,"Storage");
      pstmtUpdate.setString(3,xenStorageLabel);
      pstmtUpdate.setString(4,null);
      pstmtUpdate.setString(5,null);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,"Guest");
      pstmtUpdate.setString(3,xenGuestLabel);
      pstmtUpdate.setString(4,kvmGuestLabel);
      pstmtUpdate.setString(5,vmwareGuestLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug("Adding PhysicalNetworkServiceProvider VirtualRouter");
      String insertPNSP="INSERT INTO `cloud`.`physical_network_service_providers` (`uuid`, `physical_network_id` , `provider_name`, `state` ," + "`destination_physical_network_id`, `vpn_service_provided`, `dhcp_service_provided`, `dns_service_provided`, `gateway_service_provided`," + "`firewall_service_provided`, `source_nat_service_provided`, `load_balance_service_provided`, `static_nat_service_provided`,"+ "`port_forwarding_service_provided`, `user_data_service_provided`, `security_group_service_provided`) VALUES (?,?,?,?,0,1,1,1,1,1,1,1,1,1,1,0)";
      pstmtUpdate=conn.prepareStatement(insertPNSP);
      pstmtUpdate.setString(1,UUID.randomUUID().toString());
      pstmtUpdate.setLong(2,physicalNetworkId);
      pstmtUpdate.setString(3,"VirtualRouter");
      pstmtUpdate.setString(4,"Enabled");
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      String selectSG="SELECT * from `cloud`.`networks` where is_security_group_enabled=1 and data_center_id=?";
      pstmt2=conn.prepareStatement(selectSG);
      pstmt2.setLong(1,zoneId);
      ResultSet sgDcSet=pstmt2.executeQuery();
      while (sgDcSet.next()) {
        s_logger.debug("Adding PhysicalNetworkServiceProvider SecurityGroupProvider to the physical network id=" + physicalNetworkId);
        insertPNSP="INSERT INTO `cloud`.`physical_network_service_providers` (`uuid`, `physical_network_id` , `provider_name`, `state` ," + "`destination_physical_network_id`, `vpn_service_provided`, `dhcp_service_provided`, `dns_service_provided`, `gateway_service_provided`," + "`firewall_service_provided`, `source_nat_service_provided`, `load_balance_service_provided`, `static_nat_service_provided`,"+ "`port_forwarding_service_provided`, `user_data_service_provided`, `security_group_service_provided`) VALUES (?,?,?,?,0,0,0,0,0,0,0,0,0,0,0,1)";
        pstmtUpdate=conn.prepareStatement(insertPNSP);
        pstmtUpdate.setString(1,UUID.randomUUID().toString());
        pstmtUpdate.setLong(2,physicalNetworkId);
        pstmtUpdate.setString(3,"SecurityGroupProvider");
        pstmtUpdate.setString(4,"Enabled");
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
      }
      String fetchNSPid="SELECT id from `cloud`.`physical_network_service_providers` where physical_network_id=" + physicalNetworkId;
      pstmt2=conn.prepareStatement(fetchNSPid);
      ResultSet rsNSPid=pstmt2.executeQuery();
      rsNSPid.next();
      long nspId=rsNSPid.getLong(1);
      rsSeq.close();
      pstmt2.close();
      String insertRouter="INSERT INTO `cloud`.`virtual_router_providers` (`nsp_id`, `uuid` , `type` , `enabled`) " + "VALUES (?,?,?,?)";
      pstmtUpdate=conn.prepareStatement(insertRouter);
      pstmtUpdate.setLong(1,nspId);
      pstmtUpdate.setString(2,UUID.randomUUID().toString());
      pstmtUpdate.setString(3,"VirtualRouter");
      pstmtUpdate.setInt(4,1);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug("Adding PhysicalNetwork to op_dc_vnet_alloc");
      String updateVnet="UPDATE `cloud`.`op_dc_vnet_alloc` SET physical_network_id = " + physicalNetworkId + " WHERE data_center_id = "+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateVnet);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug("Adding PhysicalNetwork to VLAN");
      String updateVLAN="UPDATE `cloud`.`vlan` SET physical_network_id = " + physicalNetworkId + " WHERE data_center_id = "+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateVLAN);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug("Adding PhysicalNetwork to user_ip_address");
      String updateUsrIp="UPDATE `cloud`.`user_ip_address` SET physical_network_id = " + physicalNetworkId + " WHERE data_center_id = "+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateUsrIp);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug("Adding PhysicalNetwork to networks");
      String updateNet="UPDATE `cloud`.`networks` SET physical_network_id = " + physicalNetworkId + " WHERE data_center_id = "+ zoneId+ " AND traffic_type = 'Guest'";
      pstmtUpdate=conn.prepareStatement(updateNet);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Exception while adding PhysicalNetworks",e);
  }
 finally {
    if (pstmtUpdate != null) {
      try {
        pstmtUpdate.close();
      }
 catch (      SQLException e) {
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}
