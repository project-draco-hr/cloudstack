{
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  vmSpec.setVncAddr(command.getHostIp());
  final String vmName=vmSpec.getName();
  LibvirtVMDef vm=null;
  DomainState state=DomainState.VIR_DOMAIN_SHUTOFF;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
  Connect conn=null;
  try {
    final NicTO[] nics=vmSpec.getNics();
    for (    final NicTO nic : nics) {
      if (vmSpec.getType() != VirtualMachine.Type.User) {
        nic.setPxeDisable(true);
      }
    }
    vm=libvirtComputingResource.createVMFromSpec(vmSpec);
    conn=libvirtUtilitiesHelper.getConnectionByType(vm.getHvsType());
    libvirtComputingResource.createVbd(conn,vmSpec,vmName,vm);
    if (!storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)) {
      return new StartAnswer(command,"Failed to connect physical disks to host");
    }
    libvirtComputingResource.createVifs(vmSpec,vm);
    s_logger.debug("starting " + vmName + ": "+ vm.toString());
    libvirtComputingResource.startVM(conn,vmName,vm.toString());
    for (    final NicTO nic : nics) {
      if (nic.isSecurityGroupEnabled() || nic.getIsolationUri() != null && nic.getIsolationUri().getScheme().equalsIgnoreCase(IsolationType.Ec2.toString())) {
        if (vmSpec.getType() != VirtualMachine.Type.User) {
          libvirtComputingResource.configureDefaultNetworkRulesForSystemVm(conn,vmName);
          break;
        }
 else {
          final List<String> nicSecIps=nic.getNicSecIps();
          String secIpsStr;
          final StringBuilder sb=new StringBuilder();
          if (nicSecIps != null) {
            for (            final String ip : nicSecIps) {
              sb.append(ip).append(":");
            }
            secIpsStr=sb.toString();
          }
 else {
            secIpsStr="0:";
          }
          libvirtComputingResource.defaultNetworkRules(conn,vmName,nic,vmSpec.getId(),secIpsStr);
        }
      }
    }
    if (vmSpec.getType() != VirtualMachine.Type.User) {
      String controlIp=null;
      for (      final NicTO nic : nics) {
        if (nic.getType() == TrafficType.Control) {
          controlIp=nic.getIp();
          break;
        }
      }
      for (int count=0; count < 30; count++) {
        libvirtComputingResource.passCmdLine(vmName,vmSpec.getBootArgs());
        final VirtualRoutingResource virtRouterResource=libvirtComputingResource.getVirtRouterResource();
        final boolean result=virtRouterResource.connect(controlIp,1,5000);
        if (result) {
          break;
        }
      }
    }
    state=DomainState.VIR_DOMAIN_RUNNING;
    return new StartAnswer(command);
  }
 catch (  final LibvirtException e) {
    s_logger.warn("LibvirtException ",e);
    if (conn != null) {
      libvirtComputingResource.handleVmStartFailure(conn,vmName,vm);
    }
    return new StartAnswer(command,e.getMessage());
  }
catch (  final InternalErrorException e) {
    s_logger.warn("InternalErrorException ",e);
    if (conn != null) {
      libvirtComputingResource.handleVmStartFailure(conn,vmName,vm);
    }
    return new StartAnswer(command,e.getMessage());
  }
catch (  final URISyntaxException e) {
    s_logger.warn("URISyntaxException ",e);
    if (conn != null) {
      libvirtComputingResource.handleVmStartFailure(conn,vmName,vm);
    }
    return new StartAnswer(command,e.getMessage());
  }
 finally {
    if (state != DomainState.VIR_DOMAIN_RUNNING) {
      storagePoolMgr.disconnectPhysicalDisksViaVmSpec(vmSpec);
    }
  }
}
