{
  Mockito.when(_accountMgr.getAccount(1L)).thenReturn(new AccountVO());
  ServiceOfferingVO off=new ServiceOfferingVO("alena",1,1,1,1,1,false,"alena",Storage.ProvisioningType.THIN,false,false,null,false,VirtualMachine.Type.InternalLoadBalancerVm,false);
  off=setId(off,1);
  List<ServiceOfferingVO> list=new ArrayList<ServiceOfferingVO>();
  list.add(off);
  list.add(off);
  Mockito.when(_svcOffDao.createSystemServiceOfferings(Matchers.anyString(),Matchers.anyString(),Matchers.anyInt(),Matchers.anyInt(),Matchers.anyInt(),Matchers.anyInt(),Matchers.anyInt(),Matchers.anyBoolean(),Matchers.anyString(),Matchers.any(ProvisioningType.class),Matchers.anyBoolean(),Matchers.anyString(),Matchers.anyBoolean(),Matchers.any(VirtualMachine.Type.class),Matchers.anyBoolean())).thenReturn(list);
  ComponentContext.initComponentsLifeCycle();
  vm=new DomainRouterVO(1L,off.getId(),1,"alena",1,HypervisorType.XenServer,1,1,1,1,false,null,false,false,VirtualMachine.Type.InternalLoadBalancerVm,null);
  vm.setRole(Role.INTERNAL_LB_VM);
  vm=setId(vm,1);
  vm.setPrivateIpAddress("10.2.2.2");
  final NicVO nic=new NicVO("somereserver",1L,1L,VirtualMachine.Type.InternalLoadBalancerVm);
  nic.setIPv4Address(requestedIp);
  final List<DomainRouterVO> emptyList=new ArrayList<DomainRouterVO>();
  final List<DomainRouterVO> nonEmptyList=new ArrayList<DomainRouterVO>();
  nonEmptyList.add(vm);
  Mockito.when(_domainRouterDao.listByNetworkAndRole(invalidNtwkId,Role.INTERNAL_LB_VM)).thenReturn(emptyList);
  Mockito.when(_domainRouterDao.listByNetworkAndRole(validNtwkId,Role.INTERNAL_LB_VM)).thenReturn(nonEmptyList);
  Mockito.when(_nicDao.findByNtwkIdAndInstanceId(validNtwkId,1)).thenReturn(nic);
  Mockito.when(_nicDao.findByNtwkIdAndInstanceId(invalidNtwkId,1)).thenReturn(nic);
  final Answer answer=new Answer(null,true,null);
  final Answer[] answers=new Answer[1];
  answers[0]=answer;
  try {
    Mockito.when(_agentMgr.send(Matchers.anyLong(),Matchers.any(Commands.class))).thenReturn(answers);
  }
 catch (  final AgentUnavailableException e) {
    e.printStackTrace();
  }
catch (  final OperationTimedoutException e) {
    e.printStackTrace();
  }
  createNetwork();
  Mockito.when(_ntwkModel.getNetwork(Matchers.anyLong())).thenReturn(ntwk);
  Mockito.when(_itMgr.toNicTO(Matchers.any(NicProfile.class),Matchers.any(HypervisorType.class))).thenReturn(null);
  Mockito.when(_domainRouterDao.findById(Matchers.anyLong())).thenReturn(vm);
  final DataCenterVO dc=new DataCenterVO(1L,null,null,null,null,null,null,null,null,null,NetworkType.Advanced,null,null);
  Mockito.when(_dcDao.findById(Matchers.anyLong())).thenReturn(dc);
  final NetworkOfferingVO networkOfferingVO=new NetworkOfferingVO();
  networkOfferingVO.setConcurrentConnections(500);
  Mockito.when(_offeringDao.findById(Matchers.anyLong())).thenReturn(networkOfferingVO);
  Mockito.when(_domainRouterDao.findById(validVmId)).thenReturn(vm);
  Mockito.when(_domainRouterDao.findById(invalidVmId)).thenReturn(null);
}
