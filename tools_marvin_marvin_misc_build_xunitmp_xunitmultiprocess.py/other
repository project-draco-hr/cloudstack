'This plugin provides test results in the standard XUnit XML format.\n\nIt was designed for the `Hudson`_ continuous build system but will\nprobably work for anything else that understands an XUnit-formatted XML\nrepresentation of test results.\n\nAdd this shell command to your builder ::\n\n    nosetests --with-xunitmp\n\nAnd by default a file named nosetests.xml will be written to the\nworking directory.\n\nIn a Hudson builder, tick the box named "Publish JUnit test result report"\nunder the Post-build Actions and enter this value for Test report XMLs::\n\n    **/nosetests.xml\n\nIf you need to change the name or location of the file, you can set the\n``--xunit-file`` option.\n\nHere is an abbreviated version of what an XML test report might look like::\n\n    <?xml version="1.0" encoding="UTF-8"?>\n    <testsuite name="nosetests" tests="1" errors="1" failures="0" skip="0">\n        <testcase classname="path_to_test_suite.TestSomething"\n                  name="test_it" time="0">\n            <error type="exceptions.TypeError" message="oops, wrong type">\n            Traceback (most recent call last):\n            ...\n            TypeError: oops, wrong type\n            </error>\n        </testcase>\n    </testsuite>\n\n.. _Hudson: https://hudson.dev.java.net/\n\n'
__author__ = 'original xunit author, Rosen Diankov (rosen.diankov@gmail.com)'
import doctest
import os
import traceback
import re
import inspect
from nose.plugins.base import Plugin
from nose.exc import SkipTest
from time import time
from xml.sax import saxutils
from nose.pyversion import UNICODE_STRINGS
import sys
import multiprocessing
globalxunitmanager = multiprocessing.Manager()
globalxunitstream = globalxunitmanager.list()
globalxunitstats = multiprocessing.Array('i', ([0] * 4))
CONTROL_CHARACTERS = re.compile('[\\000-\\010\\013\\014\\016-\\037]')
