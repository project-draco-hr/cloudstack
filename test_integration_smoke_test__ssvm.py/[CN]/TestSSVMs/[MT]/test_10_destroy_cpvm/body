def test_10_destroy_cpvm(self):
    'Test destroy CPVM\n        '
    list_cpvm_response = list_ssvms(self.apiclient, systemvmtype='consoleproxy', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_cpvm_response, list), True, 'Check list response returns a valid list')
    cpvm_response = list_cpvm_response[0]
    old_name = cpvm_response.name
    self.debug(('Destroying CPVM: %s' % cpvm_response.id))
    cmd = destroySystemVm.destroySystemVmCmd()
    cmd.id = cpvm_response.id
    self.apiclient.destroySystemVm(cmd)
    time.sleep(self.services['sleep'])
    timeout = self.services['timeout']
    while True:
        list_cpvm_response = list_ssvms(self.apiclient, systemvmtype='consoleproxy', zoneid=self.zone.id)
        if isinstance(list_cpvm_response, list):
            if (list_cpvm_response[0].state == 'Running'):
                break
        elif (timeout == 0):
            raise Exception('List CPVM call failed!')
        time.sleep(self.services['sleep'])
        timeout = (timeout - 1)
    cpvm_response = list_cpvm_response[0]
    self.assertNotEqual(cpvm_response.name, old_name, 'Check SSVM new name with name of destroyed CPVM')
    self.assertEqual(hasattr(cpvm_response, 'privateip'), True, 'Check whether CPVM has private IP field')
    self.assertEqual(hasattr(cpvm_response, 'linklocalip'), True, 'Check whether CPVM has link local IP field')
    self.assertEqual(hasattr(cpvm_response, 'publicip'), True, 'Check whether CPVM has public IP field')
    self.test_04_cpvm_internals()
    return
