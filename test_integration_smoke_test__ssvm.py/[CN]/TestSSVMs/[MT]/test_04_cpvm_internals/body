@attr(tags=['advanced', 'advancedns', 'smoke', 'basic', 'sg', 'provisioning'])
def test_04_cpvm_internals(self):
    'Test CPVM Internals'
    list_cpvm_response = list_ssvms(self.apiclient, systemvmtype='consoleproxy', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_cpvm_response, list), True, 'Check list response returns a valid list')
    cpvm = list_cpvm_response[0]
    hosts = list_hosts(self.apiclient, id=cpvm.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    host = hosts[0]
    try:
        telnet = telnetlib.Telnet(str(self.apiclient.connection.mgtSvr), '8250')
        self.debug(('Telnet management server (IP: %s)' % self.apiclient.connection.mgtSvr))
    except Exception as e:
        self.fail(('Telnet Access failed for %s: %s' % (self.apiclient.connection.mgtSvr, e)))
    self.debug('Checking cloud process status')
    if (self.hypervisor.lower() == 'vmware'):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, cpvm.privateip, 'service cloud status', hypervisor=self.hypervisor)
    else:
        try:
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            result = get_process_status(host.ipaddress, 22, host.user, host.passwd, cpvm.linklocalip, 'service cloud status')
        except KeyError:
            self.skipTest('Marvin configuration has no host credentials to check router services')
    res = str(result)
    self.debug(('Cloud Process status: %s' % res))
    self.assertEqual(res.count('is running'), 1, 'Check cloud service is running or not')
    return
