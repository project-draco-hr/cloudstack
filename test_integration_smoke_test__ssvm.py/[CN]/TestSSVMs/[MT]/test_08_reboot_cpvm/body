def test_08_reboot_cpvm(self):
    'Test reboot CPVM\n        '
    list_cpvm_response = list_ssvms(self.apiclient, systemvmtype='consoleproxy', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_cpvm_response, list), True, 'Check list response returns a valid list')
    cpvm_response = list_cpvm_response[0]
    hosts = list_hosts(self.apiclient, id=cpvm_response.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    host = hosts[0]
    old_public_ip = cpvm_response.publicip
    old_private_ip = cpvm_response.privateip
    self.debug(('Rebooting CPVM: %s' % cpvm_response.id))
    cmd = rebootSystemVm.rebootSystemVmCmd()
    cmd.id = cpvm_response.id
    self.apiclient.rebootSystemVm(cmd)
    time.sleep(self.services['sleep'])
    timeout = self.services['timeout']
    while True:
        list_cpvm_response = list_ssvms(self.apiclient, id=cpvm_response.id)
        if isinstance(list_cpvm_response, list):
            if (list_cpvm_response[0].state == 'Running'):
                break
        elif (timeout == 0):
            raise Exception('List CPVM call failed!')
        time.sleep(self.services['sleep'])
        timeout = (timeout - 1)
    cpvm_response = list_cpvm_response[0]
    self.debug(('CPVM state: %s' % cpvm_response.state))
    self.assertEqual('Running', str(cpvm_response.state), 'Check whether CPVM is running or not')
    self.assertEqual(cpvm_response.publicip, old_public_ip, 'Check Public IP after reboot with that of before reboot')
    self.assertEqual(cpvm_response.privateip, old_private_ip, 'Check Private IP after reboot with that of before reboot')
    self.test_04_cpvm_internals()
    return
