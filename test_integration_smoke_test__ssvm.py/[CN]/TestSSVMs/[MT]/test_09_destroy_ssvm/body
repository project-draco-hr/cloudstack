def test_09_destroy_ssvm(self):
    'Test destroy SSVM\n        '
    list_ssvm_response = list_ssvms(self.apiclient, systemvmtype='secondarystoragevm', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_ssvm_response, list), True, 'Check list response returns a valid list')
    ssvm_response = list_ssvm_response[0]
    old_name = ssvm_response.name
    self.debug(('Destroying SSVM: %s' % ssvm_response.id))
    cmd = destroySystemVm.destroySystemVmCmd()
    cmd.id = ssvm_response.id
    self.apiclient.destroySystemVm(cmd)
    time.sleep(self.services['sleep'])
    timeout = self.services['timeout']
    while True:
        list_ssvm_response = list_ssvms(self.apiclient, zoneid=self.zone.id, systemvmtype='secondarystoragevm')
        if isinstance(list_ssvm_response, list):
            if (list_ssvm_response[0].state == 'Running'):
                break
        elif (timeout == 0):
            raise Exception('List SSVM call failed!')
        time.sleep(self.services['sleep'])
        timeout = (timeout - 1)
    ssvm_response = list_ssvm_response[0]
    self.assertNotEqual(ssvm_response.name, old_name, 'Check SSVM new name with name of destroyed SSVM')
    self.assertEqual(hasattr(ssvm_response, 'privateip'), True, 'Check whether SSVM has private IP field')
    self.assertEqual(hasattr(ssvm_response, 'linklocalip'), True, 'Check whether SSVM has link local IP field')
    self.assertEqual(hasattr(ssvm_response, 'publicip'), True, 'Check whether SSVM has public IP field')
    self.test_03_ssvm_internals()
    return
