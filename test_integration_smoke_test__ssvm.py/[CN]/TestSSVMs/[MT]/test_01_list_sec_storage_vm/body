def test_01_list_sec_storage_vm(self):
    'Test List secondary storage VMs\n        '
    list_ssvm_response = list_ssvms(self.apiclient, systemvmtype='secondarystoragevm', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_ssvm_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_ssvm_response), 0, 'Check list System VMs response')
    list_zones_response = list_zones(self.apiclient)
    self.assertEqual(isinstance(list_zones_response, list), True, 'Check list response returns a valid list')
    self.debug(('Number of zones: %s' % len(list_zones_response)))
    self.debug(('Number of SSVMs: %s' % len(list_ssvm_response)))
    self.assertEqual(len(list_ssvm_response), len(list_zones_response), 'Check number of SSVMs with number of zones')
    for ssvm in list_ssvm_response:
        self.debug(('SSVM state: %s' % ssvm.state))
        self.assertEqual(ssvm.state, 'Running', 'Check whether state of SSVM is running')
        self.assertEqual(hasattr(ssvm, 'privateip'), True, 'Check whether SSVM has private IP field')
        self.assertEqual(hasattr(ssvm, 'linklocalip'), True, 'Check whether SSVM has link local IP field')
        self.assertEqual(hasattr(ssvm, 'publicip'), True, 'Check whether SSVM has public IP field')
        ipranges_response = list_vlan_ipranges(self.apiclient, zoneid=ssvm.zoneid)
        self.assertEqual(isinstance(ipranges_response, list), True, 'Check list response returns a valid list')
        iprange = ipranges_response[0]
        self.assertEqual(ssvm.gateway, iprange.gateway, 'Check gateway with that of corresponding ip range')
        zone_response = list_zones(self.apiclient, id=ssvm.zoneid)
        self.assertEqual(isinstance(zone_response, list), True, 'Check list response returns a valid list')
        self.assertEqual(ssvm.dns1, zone_response[0].dns1, 'Check DNS1 with that of corresponding zone')
        self.assertEqual(ssvm.dns2, zone_response[0].dns2, 'Check DNS2 with that of corresponding zone')
    return
