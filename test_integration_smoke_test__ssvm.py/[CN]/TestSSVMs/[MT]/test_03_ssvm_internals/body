@attr(tags=['advanced', 'advancedns', 'smoke', 'basic', 'sg'], required_hardware='true')
def test_03_ssvm_internals(self):
    'Test SSVM Internals'
    list_ssvm_response = list_ssvms(self.apiclient, systemvmtype='secondarystoragevm', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_ssvm_response, list), True, 'Check list response returns a valid list')
    ssvm = list_ssvm_response[0]
    hosts = list_hosts(self.apiclient, id=ssvm.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check list response returns a valid list')
    host = hosts[0]
    self.debug('Running SSVM check script')
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, ssvm.privateip, '/usr/local/cloud/systemvm/ssvm-check.sh |grep -e ERROR -e WARNING -e FAIL', hypervisor=self.hypervisor)
    else:
        try:
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            result = get_process_status(host.ipaddress, 22, host.user, host.passwd, ssvm.linklocalip, '/usr/local/cloud/systemvm/ssvm-check.sh |grep -e ERROR -e WARNING -e FAIL')
        except KeyError:
            self.skipTest('Marvin configuration has no host                            credentials to check router services')
    res = str(result)
    self.debug(('SSVM script output: %s' % res))
    self.assertEqual(res.count('ERROR'), 1, 'Check for Errors in tests')
    self.assertEqual(res.count('WARNING'), 1, 'Check for warnings in tests')
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, ssvm.privateip, 'service cloud status', hypervisor=self.hypervisor)
    else:
        try:
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            result = get_process_status(host.ipaddress, 22, host.user, host.passwd, ssvm.linklocalip, 'service cloud status')
        except KeyError:
            self.skipTest('Marvin configuration has no host                            credentials to check router services')
    res = str(result)
    self.debug(('Cloud Process status: %s' % res))
    self.assertEqual(res.count('is running'), 1, 'Check cloud service is running or not')
    linklocal_ip = None
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        linklocal_ip = ssvm.privateip
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, ssvm.privateip, 'cat /var/cache/cloud/cmdline | xargs | sed "s/ /\\n/g" | grep eth0ip= | sed "s/\\=/ /g" | awk \'{print $2}\'', hypervisor=self.hypervisor)
    else:
        try:
            linklocal_ip = ssvm.linklocalip
            (host.user, host.passwd) = get_host_credentials(self.config, host.ipaddress)
            result = get_process_status(host.ipaddress, 22, host.user, host.passwd, ssvm.linklocalip, 'cat /var/cache/cloud/cmdline | xargs | sed "s/ /\\n/g" | grep eth0ip= | sed "s/\\=/ /g" | awk \'{print $2}\'')
        except KeyError:
            self.skipTest('Marvin configuration has no host                            credentials to check router services')
    res = result[0]
    self.debug(('Cached Link Local IP: %s' % res))
    self.assertEqual(linklocal_ip, res, ('The cached Link Local should be the same as the current Link Local IP, but they are different! Current ==> %s; Cached ==> %s ' % (linklocal_ip, res)))
    return
