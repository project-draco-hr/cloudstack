def test_02_list_cpvm_vm(self):
    'Test List console proxy VMs\n        '
    list_cpvm_response = list_ssvms(self.apiclient, systemvmtype='consoleproxy', state='Running', zoneid=self.zone.id)
    self.assertEqual(isinstance(list_cpvm_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_cpvm_response), 0, 'Check list System VMs response')
    list_zones_response = list_zones(self.apiclient)
    self.assertEqual(isinstance(list_zones_response, list), True, 'Check list response returns a valid list')
    self.debug(('Number of zones: %s' % len(list_zones_response)))
    self.debug(('Number of CPVMs: %s' % len(list_cpvm_response)))
    self.assertEqual(len(list_cpvm_response), len(list_zones_response), 'Check number of CPVMs with number of zones')
    for cpvm in list_cpvm_response:
        self.debug(('CPVM state: %s' % cpvm.state))
        self.assertEqual(cpvm.state, 'Running', 'Check whether state of CPVM is running')
        self.assertEqual(hasattr(cpvm, 'privateip'), True, 'Check whether CPVM has private IP field')
        self.assertEqual(hasattr(cpvm, 'linklocalip'), True, 'Check whether CPVM has link local IP field')
        self.assertEqual(hasattr(cpvm, 'publicip'), True, 'Check whether CPVM has public IP field')
        ipranges_response = list_vlan_ipranges(self.apiclient, zoneid=cpvm.zoneid)
        self.assertEqual(isinstance(ipranges_response, list), True, 'Check list response returns a valid list')
        iprange = ipranges_response[0]
        self.assertEqual(cpvm.gateway, iprange.gateway, 'Check gateway with that of corresponding ip range')
        zone_response = list_zones(self.apiclient, id=cpvm.zoneid)
        self.assertEqual(cpvm.dns1, zone_response[0].dns1, 'Check DNS1 with that of corresponding zone')
        self.assertEqual(cpvm.dns2, zone_response[0].dns2, 'Check DNS2 with that of corresponding zone')
    return
