{
  List<HostInternetScsiHbaStaticTarget> lstTargets=new ArrayList<HostInternetScsiHbaStaticTarget>();
  for (  Map<String,String> mapTarget : targets) {
    HostInternetScsiHbaStaticTarget target=new HostInternetScsiHbaStaticTarget();
    String targetAddress=mapTarget.get(ModifyTargetsCommand.STORAGE_HOST);
    Integer targetPort=Integer.parseInt(mapTarget.get(ModifyTargetsCommand.STORAGE_PORT));
    String iScsiName=trimIqn(mapTarget.get(ModifyTargetsCommand.IQN));
    target.setAddress(targetAddress);
    target.setPort(targetPort);
    target.setIScsiName(iScsiName);
    String chapName=mapTarget.get(ModifyTargetsCommand.CHAP_NAME);
    String chapSecret=mapTarget.get(ModifyTargetsCommand.CHAP_SECRET);
    if (StringUtils.isNotBlank(chapName) && StringUtils.isNotBlank(chapSecret)) {
      HostInternetScsiHbaAuthenticationProperties auth=new HostInternetScsiHbaAuthenticationProperties();
      String strAuthType="chapRequired";
      auth.setChapAuthEnabled(true);
      auth.setChapInherited(false);
      auth.setChapAuthenticationType(strAuthType);
      auth.setChapName(chapName);
      auth.setChapSecret(chapSecret);
      String mutualChapName=mapTarget.get(ModifyTargetsCommand.MUTUAL_CHAP_NAME);
      String mutualChapSecret=mapTarget.get(ModifyTargetsCommand.MUTUAL_CHAP_SECRET);
      if (StringUtils.isNotBlank(mutualChapName) && StringUtils.isNotBlank(mutualChapSecret)) {
        auth.setMutualChapInherited(false);
        auth.setMutualChapAuthenticationType(strAuthType);
        auth.setMutualChapName(mutualChapName);
        auth.setMutualChapSecret(mutualChapSecret);
      }
      target.setAuthenticationProperties(auth);
    }
    lstTargets.add(target);
  }
  List<HostMO> hosts=new ArrayList<>();
  hosts.add(host);
  addRemoveInternetScsiTargetsToAllHosts(add,lstTargets,hosts);
}
