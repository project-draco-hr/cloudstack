{
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Executing resource DestroyCommand: " + _gson.toJson(cmd));
  }
  try {
    VmwareContext context=hostService.getServiceContext(null);
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,null);
    VolumeObjectTO vol=(VolumeObjectTO)cmd.getData();
    DataStoreTO store=vol.getDataStore();
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,store.getUuid());
    if (morDs == null) {
      String msg="Unable to find datastore based on volume mount point " + store.getUuid();
      s_logger.error(msg);
      throw new Exception(msg);
    }
    DatastoreMO dsMo=new DatastoreMO(context,morDs);
    ManagedObjectReference morDc=hyperHost.getHyperHostDatacenter();
    ManagedObjectReference morCluster=hyperHost.getHyperHostCluster();
    ClusterMO clusterMo=new ClusterMO(context,morCluster);
    if (vol.getVolumeType() == Volume.Type.ROOT) {
      String vmName=vol.getVmName();
      if (vmName != null) {
        VirtualMachineMO vmMo=clusterMo.findVmOnHyperHost(vmName);
        if (vmMo != null) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info("Destroy root volume and VM itself. vmName " + vmName);
          }
          vmMo.removeAllSnapshots();
          VirtualMachineDiskInfo diskInfo=null;
          if (vol.getChainInfo() != null)           diskInfo=_gson.fromJson(vol.getChainInfo(),VirtualMachineDiskInfo.class);
          HostMO hostMo=vmMo.getRunningHost();
          List<NetworkDetails> networks=vmMo.getNetworksWithDetails();
          if (this.resource.getVmState(vmMo) != State.Stopped) {
            vmMo.safePowerOff(_shutdown_waitMs);
          }
          List<VirtualDisk> virtualDisks=vmMo.getVirtualDisks();
          List<String> managedIqns=getManagedIqnsFromVirtualDisks(virtualDisks);
          List<String> detachedDisks=vmMo.detachAllDisksExcept(vol.getPath(),diskInfo != null ? diskInfo.getDiskDeviceBusName() : null);
          VmwareStorageLayoutHelper.moveVolumeToRootFolder(new DatacenterMO(context,morDc),detachedDisks);
          vmMo.destroy();
          this.hostService.removeManagedTargetsFromCluster(managedIqns);
          for (          NetworkDetails netDetails : networks) {
            if (netDetails.getGCTag() != null && netDetails.getGCTag().equalsIgnoreCase("true")) {
              if (netDetails.getVMMorsOnNetwork() == null || netDetails.getVMMorsOnNetwork().length == 1) {
                resource.cleanupNetwork(hostMo,netDetails);
              }
            }
          }
        }
        return new Answer(cmd,true,"Success");
      }
      if (s_logger.isInfoEnabled()) {
        s_logger.info("Destroy root volume directly from datastore");
      }
    }
 else {
      VirtualMachineMO vmMo=clusterMo.findVmOnHyperHost(vol.getPath());
      if (vmMo != null) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info("Destroy template volume " + vol.getPath());
        }
        vmMo.destroy();
        return new Answer(cmd,true,"Success");
      }
    }
    VmwareStorageLayoutHelper.deleteVolumeVmdkFiles(dsMo,vol.getPath(),new DatacenterMO(context,morDc));
    return new Answer(cmd,true,"Success");
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn("Encounter remote exception to vCenter, invalidate VMware session context");
      hostService.invalidateServiceContext(null);
    }
    String msg="delete volume failed due to " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new Answer(cmd,false,msg);
  }
}
