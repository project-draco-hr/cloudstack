{
  VolumeObjectTO volumeTO=(VolumeObjectTO)disk.getData();
  DataStoreTO primaryStore=volumeTO.getDataStore();
  try {
    VmwareContext context=hostService.getServiceContext(null);
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,null);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      String msg="Unable to find the VM to execute AttachVolumeCommand, vmName: " + vmName;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    ManagedObjectReference morDs=null;
    if (isAttach && isManaged) {
      Map<String,String> details=disk.getDetails();
      morDs=prepareManagedStorage(context,hyperHost,iScsiName,storageHost,storagePort,null,details.get(DiskTO.CHAP_INITIATOR_USERNAME),details.get(DiskTO.CHAP_INITIATOR_SECRET),details.get(DiskTO.CHAP_TARGET_USERNAME),details.get(DiskTO.CHAP_TARGET_SECRET),volumeTO.getSize(),cmd);
    }
 else {
      morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,isManaged ? VmwareResource.getDatastoreName(iScsiName) : primaryStore.getUuid());
    }
    if (morDs == null) {
      String msg="Unable to find the mounted datastore to execute AttachVolumeCommand, vmName: " + vmName;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    DatastoreMO dsMo=new DatastoreMO(context,morDs);
    String datastoreVolumePath;
    if (isAttach) {
      if (isManaged) {
        datastoreVolumePath=dsMo.getDatastorePath(dsMo.getName() + ".vmdk");
      }
 else {
        datastoreVolumePath=VmwareStorageLayoutHelper.syncVolumeToVmDefaultFolder(dsMo.getOwnerDatacenter().first(),vmName,dsMo,volumeTO.getPath());
      }
    }
 else {
      if (isManaged) {
        datastoreVolumePath=dsMo.getDatastorePath(dsMo.getName() + ".vmdk");
      }
 else {
        datastoreVolumePath=VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo,volumeTO.getPath() + ".vmdk");
        if (!dsMo.fileExists(datastoreVolumePath)) {
          datastoreVolumePath=VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(dsMo,vmName,volumeTO.getPath() + ".vmdk");
        }
      }
    }
    disk.setPath(datastoreVolumePath);
    AttachAnswer answer=new AttachAnswer(disk);
    if (isAttach) {
      vmMo.attachDisk(new String[]{datastoreVolumePath},morDs);
    }
 else {
      vmMo.removeAllSnapshots();
      vmMo.detachDisk(datastoreVolumePath,false);
      if (isManaged) {
        handleDatastoreAndVmdkDetach(iScsiName,storageHost,storagePort);
      }
 else {
        VmwareStorageLayoutHelper.syncVolumeToRootFolder(dsMo.getOwnerDatacenter().first(),dsMo,volumeTO.getPath());
      }
    }
    return answer;
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn("Encounter remote exception to vCenter, invalidate VMware session context");
      hostService.invalidateServiceContext(null);
    }
    String msg="AttachVolumeCommand failed due to " + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new AttachAnswer(msg);
  }
}
