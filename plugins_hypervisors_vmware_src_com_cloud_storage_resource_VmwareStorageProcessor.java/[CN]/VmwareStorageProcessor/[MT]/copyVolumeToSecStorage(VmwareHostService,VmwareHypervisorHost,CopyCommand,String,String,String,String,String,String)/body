{
  VirtualMachineMO workerVm=null;
  VirtualMachineMO vmMo=null;
  String exportName=UUID.randomUUID().toString().replace("-","");
  try {
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,poolId);
    if (morDs == null) {
      String msg="Unable to find volumes's storage pool for copy volume operation";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {
      DatastoreMO dsMo=new DatastoreMO(hyperHost.getContext(),morDs);
      workerVm=HypervisorHostHelper.createWorkerVM(hyperHost,dsMo,workerVmName);
      if (workerVm == null) {
        String msg="Unable to create worker VM to execute CopyVolumeCommand";
        s_logger.error(msg);
        throw new Exception(msg);
      }
      String datastoreVolumePath=getVolumePathInDatastore(dsMo,volumePath + ".vmdk");
      workerVm.attachDisk(new String[]{datastoreVolumePath},morDs);
      vmMo=workerVm;
    }
    vmMo.createSnapshot(exportName,"Temporary snapshot for copy-volume command",false,false);
    exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,destVolumePath,exportName,hostService.getWorkerName(hyperHost.getContext(),cmd,1),imageStoreDetailsUtil.getNfsVersionByUuid(cmd.getDestTO().getDataStore().getUuid()));
    return new Pair<String,String>(destVolumePath,exportName);
  }
  finally {
    vmMo.removeSnapshot(exportName,false);
    if (workerVm != null) {
      workerVm.detachAllDisks();
      workerVm.destroy();
    }
  }
}
