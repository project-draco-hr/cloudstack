def test_03_restore_vm_with_new_template(self):
    ' Test restoring a vm with different template than the one it was created with\n        '
    hosts = Host.list(self.apiclient, type='Routing', listall=True)
    host_list_validation_result = validateList(hosts)
    self.assertEqual(host_list_validation_result[0], PASS, ('host list validation failed due to %s' % host_list_validation_result[2]))
    hypervisor = host_list_validation_result[1].hypervisor
    for (k, v) in self.services['templates'].items():
        if (k == hypervisor):
            template = Template.register(self.apiclient, v, zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid)
            self.debug(('Registered a template of format: %s with ID: %s' % (v['format'], template.id)))
            self.debug(('Downloading template with ID: %s' % template.id))
            template.download(self.apiclient)
            self.cleanup.append(template)
            time.sleep(self.services['sleep'])
            self.verify_template_listing(template)
            self.vm_with_reset.restore(self.apiclient, templateid=template.id)
            self.vm_without_reset.restore(self.apiclient, templateid=template.id)
            self.debug('Checking template id of VM with isVolatile=True')
            vms = VirtualMachine.list(self.apiclient, id=self.vm_with_reset.id, listall=True)
            vm_list_validation_result = validateList(vms)
            self.assertEqual(vm_list_validation_result[0], PASS, ('VM list validation failed due to %s' % vm_list_validation_result[2]))
            vm_with_reset = vm_list_validation_result[1]
            self.assertNotEqual(self.vm_with_reset.templateid, vm_with_reset.templateid, ('VM created with IsVolatile=True has same templateid : %s after restore' % vm_with_reset.templateid))
            self.assertNotEqual(self.vm_with_reset.templateid, template.id, ('VM created with IsVolatile=True has wrong templateid after restore Got:%s Expected: %s' % (self.vm_with_reset.templateid, template.id)))
            self.assertEqual(self.vm_with_reset.nic[0].ipaddress, vm_with_reset.nic[0].ipaddress, ("VM created with IsVolatile=True doesn't have same ip after restore. Got : %s Expected : %s" % (vm_with_reset.nic[0].ipaddress, self.vm_with_reset.nic[0].ipaddress)))
            self.debug('Checking template id of VM with isVolatile=False')
            vms = VirtualMachine.list(self.apiclient, id=self.vm_without_reset.id, listall=True)
            vm_list_validation_result = validateList(vms)
            self.assertEqual(vm_list_validation_result[0], PASS, ('VM list validation failed due to %s' % vm_list_validation_result[2]))
            vm_without_reset = vm_list_validation_result[1]
            self.assertNotEqual(self.vm_without_reset.templateid, vm_without_reset.templateid, ('VM created with IsVolatile=False has same templateid : %s after restore' % vm_with_reset.templateid))
            self.assertNotEqual(self.vm_without_reset.templateid, template.id, ('VM created with IsVolatile=False has wrong templateid after restore Got:%s Expected: %s' % (self.vm_without_reset.templateid, template.id)))
            self.assertEqual(self.vm_without_reset.nic[0].ipaddress, vm_without_reset.nic[0].ipaddress, ("VM created with IsVolatile=False doesn't have same ip after restore. Got : %s Expected : %s" % (vm_without_reset.nic[0].ipaddress, self.vm_without_reset.nic[0].ipaddress)))
        return
