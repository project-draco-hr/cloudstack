@classmethod
def setUpClass(cls):
    cls.api_client = super(TestBaseImageUpdate, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering_with_reset = ServiceOffering.create(cls.api_client, cls.services['service_offering_with_reset'])
    cls.service_offering_without_reset = ServiceOffering.create(cls.api_client, cls.services['service_offering_without_reset'])
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.vm_with_reset = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering_with_reset.id)
    cls.vm_with_reset_root_disk_id = cls.get_root_device_uuid_for_vm(cls.vm_with_reset.id, cls.vm_with_reset.rootdeviceid)
    cls.vm_without_reset = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering_without_reset.id)
    cls.vm_without_reset_root_disk_id = cls.get_root_device_uuid_for_vm(cls.vm_without_reset.id, cls.vm_without_reset.rootdeviceid)
    cls._cleanup = [cls.account, cls.service_offering_with_reset, cls.service_offering_without_reset]
    return
