{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Creating a router for account=" + accountId + "; publicIpAddress="+ publicIpAddress+ "; dc="+ dataCenterId+ "domain="+ domain);
  }
  final AccountVO account=_accountDao.acquireInLockTable(accountId);
  if (account == null) {
    throw new ConcurrentOperationException("Unable to acquire account " + accountId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("lock on account " + accountId + " for createRouter is acquired");
  }
  final Transaction txn=Transaction.currentTxn();
  DomainRouterVO router=null;
  boolean success=false;
  try {
    router=_routerDao.findBy(accountId,dataCenterId);
    if (router != null && router.getState() != State.Creating) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Router " + router.toString() + " found for account "+ accountId+ " in data center "+ dataCenterId);
      }
      success=true;
      return router;
    }
    EventVO event=new EventVO();
    event.setUserId(1L);
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_ROUTER_CREATE);
    event.setState(Event.State.Started);
    event.setStartId(startEventId);
    event.setDescription("Creating Router for account with Id: " + accountId);
    event=_eventDao.persist(event);
    final DataCenterVO dc=_dcDao.findById(dataCenterId);
    final VMTemplateVO template=_templateDao.findRoutingTemplate();
    String[] macAddresses=getMacAddressPair(dataCenterId);
    String privateMacAddress=macAddresses[0];
    String publicMacAddress=macAddresses[1];
    final long id=_routerDao.getNextInSequence(Long.class,"id");
    if (domain == null) {
      domain="v" + Long.toHexString(accountId) + "."+ _domain;
    }
    final String name=VirtualMachineName.getRouterName(id,_instance).intern();
    long routerMacAddress=NetUtils.mac2Long(dc.getRouterMacAddress()) | ((dc.getId() & 0xff) << 32);
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split("\\/");
    String guestIpAddress=NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1]));
    String guestNetmask=NetUtils.getCidrNetmask(Long.parseLong(cidrTuple[1]));
    IPAddressVO ipVO=_ipAddressDao.findById(publicIpAddress);
    VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
    String vlanId=vlan.getVlanId();
    String vlanGateway=vlan.getVlanGateway();
    String vlanNetmask=vlan.getVlanNetmask();
    Pair<HostPodVO,Long> pod=null;
    Set<Long> avoids=new HashSet<Long>();
    boolean found=false;
    while ((pod=_agentMgr.findPod(template,offering,dc,accountId,avoids)) != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Attempting to create in pod " + pod.first().getName());
      }
      router=new DomainRouterVO(id,_offering.getId(),name,privateMacAddress,null,null,_routerTemplateId,template.getGuestOSId(),NetUtils.long2Mac(routerMacAddress),guestIpAddress,guestNetmask,accountId,account.getDomainId(),publicMacAddress,publicIpAddress,vlanNetmask,vlan.getId(),vlanId,pod.first().getId(),dataCenterId,_routerRamSize,vlanGateway,domain,dc.getDns1(),dc.getDns2());
      router.setMirroredVols(offering.isMirrored());
      router.setLastHostId(pod.second());
      router=_routerDao.persist(router);
      List<VolumeVO> vols=_storageMgr.create(account,router,template,dc,pod.first(),_offering,null,0);
      if (vols != null) {
        found=true;
        break;
      }
      _routerDao.expunge(router.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Unable to find storage host or pool in pod " + pod.first().getName() + " (id:"+ pod.first().getId()+ "), checking other pods");
      }
      avoids.add(pod.first().getId());
    }
    if (!found) {
      event.setDescription("failed to create Domain Router : " + name);
      event.setLevel(EventVO.LEVEL_ERROR);
      _eventDao.persist(event);
      throw new ExecutionException("Unable to create DomainRouter");
    }
    _itMgr.stateTransitTo(router,VirtualMachine.Event.OperationSucceeded,null);
    s_logger.debug("Router created: id=" + router.getId() + "; name="+ router.getHostName());
    event=new EventVO();
    event.setUserId(1L);
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_ROUTER_CREATE);
    event.setStartId(startEventId);
    event.setDescription("successfully created Domain Router : " + router.getHostName() + " with ip : "+ publicIpAddress);
    _eventDao.persist(event);
    success=true;
    return router;
  }
 catch (  final Throwable th) {
    if (th instanceof ExecutionException) {
      s_logger.error("Error while starting router due to " + th.getMessage());
    }
 else {
      s_logger.error("Unable to create router",th);
    }
    txn.rollback();
    if (router != null && router.getState() == State.Creating) {
      _routerDao.expunge(router.getId());
    }
    return null;
  }
 finally {
    if (account != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Releasing lock on account " + account.getId() + " for createRouter");
      }
      _accountDao.releaseFromLockTable(account.getId());
    }
    if (!success) {
      EventVO event=new EventVO();
      event.setUserId(1L);
      event.setAccountId(accountId);
      event.setType(EventTypes.EVENT_ROUTER_CREATE);
      event.setStartId(startEventId);
      event.setLevel(EventVO.LEVEL_ERROR);
      event.setDescription("Failed to create router for account " + accountId + " in data center "+ dataCenterId);
      _eventDao.persist(event);
    }
  }
}
