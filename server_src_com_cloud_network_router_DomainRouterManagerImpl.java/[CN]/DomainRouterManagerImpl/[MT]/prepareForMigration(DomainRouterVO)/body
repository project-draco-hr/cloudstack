{
  final long routerId=router.getId();
  final boolean mirroredVols=router.isMirroredVols();
  final DataCenterVO dc=_dcDao.findById(router.getDataCenterId());
  final HostPodVO pod=_podDao.findById(router.getPodId());
  final ServiceOfferingVO offering=_serviceOfferingDao.findById(router.getServiceOfferingId());
  List<StoragePoolVO> sps=_storageMgr.getStoragePoolsForVm(router.getId());
  StoragePoolVO sp=sps.get(0);
  final List<VolumeVO> vols=_volsDao.findCreatedByInstance(routerId);
  final String[] storageIps=new String[2];
  final VolumeVO vol=vols.get(0);
  storageIps[0]=vol.getHostIp();
  if (mirroredVols && (vols.size() == 2)) {
    storageIps[1]=vols.get(1).getHostIp();
  }
  final PrepareForMigrationCommand cmd=new PrepareForMigrationCommand(router.getInstanceName(),router.getVnet(),storageIps,vols,mirroredVols);
  HostVO routingHost=null;
  final HashSet<Host> avoid=new HashSet<Host>();
  final HostVO fromHost=_hostDao.findById(router.getHostId());
  if (fromHost.getHypervisorType() != HypervisorType.KVM && fromHost.getClusterId() == null) {
    s_logger.debug("The host is not in a cluster");
    return null;
  }
  avoid.add(fromHost);
  while ((routingHost=(HostVO)_agentMgr.findHost(Host.Type.Routing,dc,pod,sp,offering,_template,router,fromHost,avoid)) != null) {
    avoid.add(routingHost);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Trying to migrate router to host " + routingHost.getName());
    }
    if (!_storageMgr.share(router,vols,routingHost,false)) {
      s_logger.warn("Can not share " + vol.getPath() + " to "+ router.getHostName());
      throw new StorageUnavailableException("Can not share " + vol.getPath() + " to "+ router.getHostName(),vol);
    }
    final Answer answer=_agentMgr.easySend(routingHost.getId(),cmd);
    if (answer != null && answer.getResult()) {
      return routingHost;
    }
    _storageMgr.unshare(router,vols,routingHost);
  }
  return null;
}
