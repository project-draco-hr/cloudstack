{
  final String delimiter1=";";
  final String delimiter2="=";
  StringTokenizer st=new StringTokenizer(url,delimiter1);
  NexentaPluginParameters params=new NexentaPluginParameters();
  while (st.hasMoreElements()) {
    String token=st.nextElement().toString();
    int idx=token.indexOf(delimiter2);
    if (idx == -1) {
      throw new RuntimeException("Invalid URL format");
    }
    String[] urlKeyAndValue=token.split(delimiter2,2);
    if (NMS_URL.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setNmsUrl(urlKeyAndValue[1]);
    }
 else     if (VOLUME.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setVolume(urlKeyAndValue[1]);
    }
 else     if (STORAGE_TYPE.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setStorageType(urlKeyAndValue[1]);
    }
 else     if (STORAGE_HOST.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setStorageHost(urlKeyAndValue[1]);
    }
 else     if (STORAGE_PORT.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setStoragePort(urlKeyAndValue[1]);
    }
 else     if (STORAGE_PATH.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setStoragePath(urlKeyAndValue[1]);
    }
 else     if (SPARSE_VOLUMES.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setSparseVolumes(urlKeyAndValue[1]);
    }
 else     if (VOLUME_BLOCK_SIZE.equalsIgnoreCase(urlKeyAndValue[0])) {
      params.setVolumeBlockSize(urlKeyAndValue[1]);
    }
  }
  return params;
}
