{
  if (cmd instanceof StartupTrafficMonitorCommand) {
    long agentId=agent.getId();
    s_logger.debug("Sending RecurringNetworkUsageCommand to " + agentId);
    RecurringNetworkUsageCommand watch=new RecurringNetworkUsageCommand(_interval);
    try {
      _agentMgr.send(agentId,new Commands(watch),this);
    }
 catch (    AgentUnavailableException e) {
      s_logger.debug("Can not process connect for host " + agentId,e);
    }
  }
  return;
}
