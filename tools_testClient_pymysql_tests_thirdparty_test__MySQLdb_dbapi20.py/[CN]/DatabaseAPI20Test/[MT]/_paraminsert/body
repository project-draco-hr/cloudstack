def _paraminsert(self, cur):
    self.executeDDL1(cur)
    cur.execute(("insert into %sbooze values ('Victoria Bitter')" % self.table_prefix))
    self.assertTrue((cur.rowcount in ((-1), 1)))
    if (self.driver.paramstyle == 'qmark'):
        cur.execute(('insert into %sbooze values (?)' % self.table_prefix), ("Cooper's",))
    elif (self.driver.paramstyle == 'numeric'):
        cur.execute(('insert into %sbooze values (:1)' % self.table_prefix), ("Cooper's",))
    elif (self.driver.paramstyle == 'named'):
        cur.execute(('insert into %sbooze values (:beer)' % self.table_prefix), {'beer': "Cooper's", })
    elif (self.driver.paramstyle == 'format'):
        cur.execute(('insert into %sbooze values (%%s)' % self.table_prefix), ("Cooper's",))
    elif (self.driver.paramstyle == 'pyformat'):
        cur.execute(('insert into %sbooze values (%%(beer)s)' % self.table_prefix), {'beer': "Cooper's", })
    else:
        self.fail('Invalid paramstyle')
    self.assertTrue((cur.rowcount in ((-1), 1)))
    cur.execute(('select name from %sbooze' % self.table_prefix))
    res = cur.fetchall()
    self.assertEqual(len(res), 2, 'cursor.fetchall returned too few rows')
    beers = [res[0][0], res[1][0]]
    beers.sort()
    self.assertEqual(beers[0], "Cooper's", 'cursor.fetchall retrieved incorrect data, or data inserted incorrectly')
    self.assertEqual(beers[1], 'Victoria Bitter', 'cursor.fetchall retrieved incorrect data, or data inserted incorrectly')
