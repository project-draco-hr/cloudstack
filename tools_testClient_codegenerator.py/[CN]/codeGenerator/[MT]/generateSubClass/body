def generateSubClass(self, name, properties):
    'generate code for sub list'
    subclass = ('class %s:\n' % name)
    subclass += (self.space + 'def __init__(self):\n')
    for pro in properties:
        if (pro.desc is not None):
            subclass += ((self.space + self.space) + ('""""%s"""\n' % pro.desc))
        if (len(pro.subProperties) > 0):
            subclass += ((self.space + self.space) + ('self.%s = []\n' % pro.name))
            self.generateSubClass(pro.name, pro.subProperties)
        else:
            subclass += ((self.space + self.space) + ('self.%s = None\n' % pro.name))
    self.subclass.append(subclass)
