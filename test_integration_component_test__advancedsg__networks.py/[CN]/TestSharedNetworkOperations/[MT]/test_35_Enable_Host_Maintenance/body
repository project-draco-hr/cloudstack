@unittest.skip('Testing pending on multihost setup')
@data('account', 'domain', 'zone')
@attr(tags=['advancedsg'])
def test_35_Enable_Host_Maintenance(self, value):
    ' Test security group rules of VM after putting host in maintenance mode'
    hosts = Host.list(self.api_client, zoneid=self.zone.id)
    self.assertEqual(validateList(hosts)[0], PASS, ('hosts list validation failed, list is %s' % hosts))
    if (len(hosts) < 2):
        self.skipTest('This test requires at least two hosts present in the zone')
    domain = self.domain
    account = None
    self.services['shared_network_sg']['acltype'] = 'domain'
    if (value == 'domain'):
        domain = Domain.create(self.api_client, services=self.services['domain'], parentdomainid=self.domain.id)
        self.cleanup_domains.append(domain)
    elif (value == 'account'):
        account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
        self.cleanup_accounts.append(account)
        self.services['shared_network_sg']['acltype'] = 'account'
    (physical_network, vlan) = get_free_vlan(self.api_client, self.zone.id)
    self.services['shared_network_sg']['vlan'] = vlan
    self.services['shared_network_sg']['networkofferingid'] = self.shared_network_offering_sg.id
    self.services['shared_network_sg']['physicalnetworkid'] = physical_network.id
    self.setSharedNetworkParams('shared_network_sg')
    shared_network_sg = Network.create(self.api_client, self.services['shared_network_sg'], accountid=(account.name if account else None), domainid=domain.id, networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id)
    if ((value == 'domain') or (value == 'zone')):
        self.cleanup_networks.append(shared_network_sg)
    self.debug(('Created %s wide shared network %s' % (value, shared_network_sg.id)))
    virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=(account.name if account else None), domainid=domain.id, networkids=[shared_network_sg.id], serviceofferingid=self.service_offering.id)
    self.cleanup_vms.append(virtual_machine)
    hostid = virtual_machine.hostid
    securitygroupid = virtual_machine.securitygroup[0].id
    Host.enableMaintenance(self.api_client, id=hostid)
    vm_list = list_virtual_machines(self.api_client, id=virtual_machine.id)
    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, vm list is: %s' % vm_list))
    self.assertEqual(vm_list[0].securitygroup[0].id, securitygroupid, ('Security group id should remain same, before        it was %s and after putting host in maintenance mode, it is %s' % (securitygroupid, vm_list[0].securitygroup[0].id)))
    Host.cancelMaintenance(self.api_client, id=hostid)
    vm_list = list_virtual_machines(self.api_client, id=virtual_machine.id)
    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, vm list is: %s' % vm_list))
    self.assertEqual(vm_list[0].securitygroup[0].id, securitygroupid, ('Security group id should remain same, before        it was %s and after putting host in maintenance mode, it is %s' % (securitygroupid, vm_list[0].securitygroup[0].id)))
    return
