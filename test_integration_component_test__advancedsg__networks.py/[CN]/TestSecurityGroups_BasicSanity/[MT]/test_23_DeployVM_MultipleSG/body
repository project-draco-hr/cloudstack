@attr(tags=['advancedsg'])
def test_23_DeployVM_MultipleSG(self):
    ' Test deploy VM in multiple security groups'
    ingress_rule_ids = []
    self.services['security_group']['name'] = ('Custom_sec_grp_' + random_gen())
    sec_grp_1 = SecurityGroup.create(self.api_client, self.services['security_group'])
    self.debug(('Created security groups: %s' % sec_grp_1.id))
    self.cleanup_secGrps.append(sec_grp_1)
    self.services['security_group']['name'] = ('Custom_sec_grp_' + random_gen())
    sec_grp_2 = SecurityGroup.create(self.api_client, self.services['security_group'])
    self.debug(('Created security groups: %s' % sec_grp_2.id))
    self.cleanup_secGrps.append(sec_grp_2)
    self.services['security_group']['name'] = ('Custom_sec_grp_' + random_gen())
    sec_grp_3 = SecurityGroup.create(self.api_client, self.services['security_group'])
    self.debug(('Created security groups: %s' % sec_grp_3.id))
    self.cleanup_secGrps.append(sec_grp_3)
    ingress_rule_1 = sec_grp_1.authorize(self.api_client, self.services['ingress_rule'])
    ingress_rule_ids.append(ingress_rule_1['ingressrule'][0].ruleid)
    self.debug(('Authorized ingress rule for security group: %s' % sec_grp_1.id))
    ingress_rule_2 = sec_grp_2.authorize(self.api_client, self.services['ingress_rule'])
    ingress_rule_ids.append(ingress_rule_2['ingressrule'][0].ruleid)
    self.debug(('Authorized ingress rule for security group: %s' % sec_grp_2.id))
    ingress_rule_3 = sec_grp_3.authorize(self.api_client, self.services['ingress_rule'])
    ingress_rule_ids.append(ingress_rule_3['ingressrule'][0].ruleid)
    self.debug(('Authorized ingress rule for security group: %s' % sec_grp_3.id))
    vm = VirtualMachine.create(self.api_client, self.services['virtual_machine'], templateid=self.template.id, securitygroupids=[sec_grp_1.id, sec_grp_2.id, sec_grp_3.id], serviceofferingid=self.service_offering.id)
    self.debug(('Created VM : %s' % vm.id))
    self.cleanup_vms.append(vm)
    self.debug('listing virtual machines')
    vm_list = list_virtual_machines(self.api_client, id=vm.id)
    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, list is %s' % vm_list))
    sec_grp_list = [sec_grp.id for sec_grp in vm_list[0].securitygroup]
    self.assertTrue((sec_grp_1.id in sec_grp_list), ('%s not present in security groups of vm: %s' % (sec_grp_1.id, sec_grp_list)))
    self.assertTrue((sec_grp_2.id in sec_grp_list), ('%s not present in security groups of vm: %s' % (sec_grp_2.id, sec_grp_list)))
    self.assertTrue((sec_grp_3.id in sec_grp_list), ('%s not present in security groups of vm: %s' % (sec_grp_3.id, sec_grp_list)))
    try:
        try:
            self.debug(('SSH into VM: %s' % vm.ssh_ip))
            ssh = vm.get_ssh_client(ipaddress=vm.nic[0].ipaddress)
            res = ssh.execute('ping -c 1 www.google.com')
        except Exception as e:
            self.fail(('SSH Access failed for %s: %s' % (vm.ssh_ip, e)))
    finally:
        cmd = revokeSecurityGroupIngress.revokeSecurityGroupIngressCmd()
        for rule_id in ingress_rule_ids:
            cmd.id = rule_id
            self.api_client.revokeSecurityGroupIngress(cmd)
    result = str(res)
    self.assertEqual(result.count('1 received'), 1, 'Ping to outside world from VM should be successful')
    return
