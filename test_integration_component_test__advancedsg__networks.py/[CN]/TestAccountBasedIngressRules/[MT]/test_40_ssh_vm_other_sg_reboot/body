@attr(tags=['advancedsg'])
def test_40_ssh_vm_other_sg_reboot(self):
    ' Test access VM in other security group from vm in one security group before and after reboot'
    cmd = authorizeSecurityGroupIngress.authorizeSecurityGroupIngressCmd()
    cmd.protocol = 'TCP'
    cmd.startport = 22
    cmd.endport = 80
    cmd.cidrlist = '0.0.0.0/0'
    cmd.securitygroupid = self.sec_grp_1.id
    self.api_client.authorizeSecurityGroupIngress(cmd)
    cmd.securitygroupid = self.sec_grp_2.id
    cmd.cidrlist = []
    cmd.usersecuritygrouplist = [{'account': str(self.account_1.name), 'group': str(self.sec_grp_1.name), }]
    self.api_client.authorizeSecurityGroupIngress(cmd)
    self.debug(('Getting SSH client of virtual machine 1: %s' % self.virtual_machine_1.id))
    try:
        sshClient = self.virtual_machine_1.get_ssh_client(ipaddress=self.virtual_machine_1.nic[0].ipaddress)
        self.debug(('SSHing into vm_2 %s from vm_1 %s' % (self.virtual_machine_2.nic[0].ipaddress, self.virtual_machine_1.nic[0].ipaddress)))
        command = ('ssh -t -t root@%s' % self.virtual_machine_2.nic[0].ipaddress)
        self.debug(('command: --> %s' % command))
        res = sshClient.execute(command)
        self.debug(('SSH result: %s' % str(res)))
    except Exception as e:
        self.fail(('Exception in SSH operation: %s' % e))
    result = str(res)
    self.assertNotEqual(result.count('No route to host'), 1, 'SSH should be successful')
    self.debug(('Rebooting virtual machine %s' % self.virtual_machine_1.id))
    self.virtual_machine_1.reboot(self.api_client)
    self.debug(('Getting SSH client of virtual machine 1: %s' % self.virtual_machine_1.id))
    try:
        sshClient = self.virtual_machine_1.get_ssh_client(ipaddress=self.virtual_machine_1.nic[0].ipaddress)
        self.debug(('SSHing into vm_2 %s from vm_1 %s' % (self.virtual_machine_2.nic[0].ipaddress, self.virtual_machine_1.nic[0].ipaddress)))
        command = ('ssh -t -t root@%s' % self.virtual_machine_2.nic[0].ipaddress)
        self.debug(('command: --> %s' % command))
        res = sshClient.execute(command)
        self.debug(('SSH result: %s' % str(res)))
    except Exception as e:
        self.fail(('Exception in ssh operation: %s' % e))
    result = str(res)
    self.assertNotEqual(result.count('No route to host'), 1, 'SSH should be successful')
    return
