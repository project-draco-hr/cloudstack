@data('recover', 'expunge')
@attr(tags=['advancedsg'])
def test_28_destroy_recover_expunge_vm(self, value):
    ' Test start and stop vm'
    user_account = Account.create(self.api_client, self.services['account'], domainid=self.domain.id)
    self.debug(('Created user account : %s' % user_account.name))
    self.cleanup_accounts.append(user_account)
    ingress_rule_ids = []
    self.services['security_group']['name'] = ('Custom_sec_grp_' + random_gen())
    custom_sec_grp = SecurityGroup.create(self.api_client, self.services['security_group'], account=user_account.name, domainid=self.domain.id)
    self.debug(('Created security groups: %s' % custom_sec_grp.id))
    self.cleanup_secGrps.append(custom_sec_grp)
    ingress_rule = custom_sec_grp.authorize(self.api_client, self.services['ingress_rule'])
    ingress_rule_ids.append(ingress_rule['ingressrule'][0].ruleid)
    self.debug(('Authorized ingress rule for security group: %s' % custom_sec_grp.id))
    vm = VirtualMachine.create(self.api_client, self.services['virtual_machine'], templateid=self.template.id, accountid=user_account.name, domainid=self.domain.id, serviceofferingid=self.service_offering.id, securitygroupids=[custom_sec_grp.id])
    self.debug(('Created VM : %s' % vm.id))
    try:
        try:
            self.debug(('SSH into VM: %s' % vm.nic[0].ipaddress))
            vm.get_ssh_client(ipaddress=vm.nic[0].ipaddress)
            self.debug(('SSH to VM successful, proceeding for %s operation' % value))
            vm.delete(self.api_client)
            if (value == 'recover'):
                vm.recover(self.api_client)
                vm.start(self.api_client)
                retriesCount = 5
                while True:
                    vm_list = VirtualMachine.list(self.api_client, id=vm.id)
                    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, vm list is %s' % vm_list))
                    if (str(vm_list[0].state).lower() == 'running'):
                        break
                    if (retriesCount == 0):
                        self.fail(('Failed to start vm: %s' % vm.id))
                    retriesCount -= 1
                    time.sleep(10)
                self.debug(('SSH into VM: %s' % vm.nic[0].ipaddress))
                vm.get_ssh_client(ipaddress=vm.nic[0].ipaddress)
                self.debug('SSH successful')
                self.cleanup_vms.append(vm)
            elif (value == 'expunge'):
                wait_for_cleanup(self.api_client, ['expunge.delay', 'expunge.interval'])
                try:
                    vm_list = VirtualMachine.list(self.api_client, id=vm.id)
                    self.fail(('vm listing should fail, instead got vm list: %s' % vm_list))
                except Exception as e:
                    self.debug(('Vm listing failed as expected with exception: %s' % e))
                try:
                    self.debug(('SSH into VM: %s, this should fail' % vm.nic[0].ipaddress))
                    vm.get_ssh_client(ipaddress=vm.nic[0].ipaddress)
                    self.fail('SSH should have failed, instead it succeeded')
                except Exception as e:
                    self.debug(('SSH failed as expected with exception: %s' % e))
        except Exception as e:
            self.fail(('SSH Access failed for %s: %s, failed at line %s' % (vm.nic[0].ipaddress, e, sys.exc_info()[2].tb_lineno)))
    finally:
        cmd = revokeSecurityGroupIngress.revokeSecurityGroupIngressCmd()
        for rule_id in ingress_rule_ids:
            cmd.id = rule_id
            self.api_client.revokeSecurityGroupIngress(cmd)
    return
