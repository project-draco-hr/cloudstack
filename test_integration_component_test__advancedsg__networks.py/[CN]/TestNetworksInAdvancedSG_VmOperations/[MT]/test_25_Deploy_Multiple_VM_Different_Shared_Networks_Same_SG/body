@attr(tags=['advancedsg'])
def test_25_Deploy_Multiple_VM_Different_Shared_Networks_Same_SG(self):
    ' Test deploy Multiple VMs in different shared networks but same security group'
    self.services['shared_network_sg']['acltype'] = 'domain'
    self.services['shared_network_sg']['networkofferingid'] = self.shared_network_offering_sg.id
    (physical_network, vlan) = get_free_vlan(self.api_client, self.zone.id)
    self.services['shared_network_sg']['vlan'] = vlan
    self.services['shared_network_sg']['physicalnetworkid'] = physical_network.id
    self.setSharedNetworkParams('shared_network_sg')
    shared_network_1 = Network.create(self.api_client, self.services['shared_network_sg'], networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id)
    self.cleanup_networks.append(shared_network_1)
    self.debug(('Created shared network: %s' % shared_network_1.id))
    self.services['shared_network_sg']['vlan'] = get_free_vlan(self.api_client, self.zone.id)[1]
    self.setSharedNetworkParams('shared_network_sg')
    shared_network_2 = Network.create(self.api_client, self.services['shared_network_sg'], networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id)
    self.cleanup_networks.append(shared_network_2)
    self.debug(('Created shared network: %s' % shared_network_2.id))
    self.services['security_group']['name'] = ('Custom_sec_grp_' + random_gen())
    sec_grp_1 = SecurityGroup.create(self.api_client, self.services['security_group'])
    self.debug(('Created security groups: %s' % sec_grp_1.id))
    self.cleanup_secGrps.append(sec_grp_1)
    self.debug(('Creating virtual machine in shared network %s and security group %s' % (shared_network_1.id, sec_grp_1.id)))
    vm_1 = VirtualMachine.create(self.api_client, self.services['virtual_machine'], templateid=self.template.id, networkids=[shared_network_1.id], serviceofferingid=self.service_offering.id, securitygroupids=[sec_grp_1.id])
    self.cleanup_vms.append(vm_1)
    self.debug(('Creating virtual machine in shared network %s and security group %s' % (shared_network_2.id, sec_grp_1.id)))
    vm_2 = VirtualMachine.create(self.api_client, self.services['virtual_machine'], templateid=self.template.id, networkids=[shared_network_2.id], serviceofferingid=self.service_offering.id, securitygroupids=[sec_grp_1.id])
    self.cleanup_vms.append(vm_2)
    vm_list = list_virtual_machines(self.api_client, listall=True)
    self.assertEqual(validateList(vm_list)[0], PASS, ('vm list validation failed, vm list is %s' % vm_list))
    vm_ids = [vm.id for vm in vm_list]
    self.assertTrue((vm_1.id in vm_ids), ('vm %s not present in vm list %s' % (vm_1.id, vm_ids)))
    self.assertTrue((vm_1.id in vm_ids), ('vm %s not present in vm list %s' % (vm_2.id, vm_ids)))
    return
