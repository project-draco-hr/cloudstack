@unittest.skip('Skip - Failing - WIP')
@attr(tags=['advancedsg'])
def test_09_SharedNwDomainWide_samevlan_samesubnet(self):
    ' Test Domain wide shared network creation with SG in different domains\n            with same vlan and same subnet'
    domain1 = Domain.create(self.api_client, services=self.services['domain'], parentdomainid=self.domain.id)
    self.debug(('Created domain: %s' % domain1.id))
    self.cleanup_domains.append(domain1)
    account1 = Account.create(self.api_client, self.services['account'], domainid=domain1.id)
    self.debug(('Created account %s under domain %s' % (account1.id, domain1.id)))
    self.cleanup_accounts.append(account1)
    domain2 = Domain.create(self.api_client, services=self.services['domain'], parentdomainid=self.domain.id)
    self.debug(('Created domain %s' % domain2.id))
    self.cleanup_domains.append(domain2)
    account2 = Account.create(self.api_client, self.services['account'], domainid=domain2.id)
    self.debug(('Created account %s under domain %s' % (account2.id, domain2.id)))
    self.cleanup_accounts.append(account2)
    self.services['shared_network_offering_sg']['specifyVlan'] = 'True'
    self.services['shared_network_offering_sg']['specifyIpRanges'] = 'True'
    (physical_network, vlan) = get_free_vlan(self.api_client, self.zone.id)
    self.services['shared_network_sg']['acltype'] = 'domain'
    self.services['shared_network_sg']['vlan'] = vlan
    self.services['shared_network_sg']['networkofferingid'] = self.shared_network_offering_sg.id
    self.services['shared_network_sg']['physicalnetworkid'] = physical_network.id
    self.setSharedNetworkParams('shared_network_sg')
    self.debug(('Creating shared network domain 1: %s' % domain1.name))
    self.shared_network_sg_domain1 = Network.create(self.api_client, self.services['shared_network_sg'], domainid=domain1.id, networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id, subdomainaccess=True)
    self.debug(('Created shared network: %s' % self.shared_network_sg_domain1.id))
    list_networks_response = Network.list(self.api_client, id=self.shared_network_sg_domain1.id, listall=True)
    self.assertEqual(validateList(list_networks_response)[0], PASS, ('networks list validation failed, list: %s' % list_networks_response))
    self.debug(('Creating shared network in domain 2 with same subnet and vlan: %s' % domain2.name))
    try:
        self.shared_network_sg_domain2 = Network.create(self.api_client, self.services['shared_network_sg'], domainid=domain2.id, networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id, subdomainaccess=True)
    except Exception as e:
        self.fail(('Exception while creating domain wide shared network with same subnet and vlan: %s' % e))
    self.debug(('Created shared network: %s' % self.shared_network_sg_domain2.id))
    list_networks_response = Network.list(self.api_client, id=self.shared_network_sg_domain2.id)
    self.assertEqual(validateList(list_networks_response)[0], PASS, ('networks list validation failed, list: %s' % list_networks_response))
    return
