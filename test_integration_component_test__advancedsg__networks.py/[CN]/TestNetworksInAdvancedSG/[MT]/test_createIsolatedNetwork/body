def test_createIsolatedNetwork(self):
    ' Test Isolated Network '
    self.admin_account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    list_accounts_response = Account.list(self.api_client, id=self.admin_account.account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The admin account created is not enabled.')
    self.debug(('Admin type account created: %s' % self.admin_account.name))
    self.user_account = Account.create(self.api_client, self.services['account'], admin=False, domainid=self.domain.id)
    self.cleanup_accounts.append(self.user_account)
    list_accounts_response = Account.list(self.api_client, id=self.user_account.account.id, listall=True)
    self.assertEqual(isinstance(list_accounts_response, list), True, 'listAccounts returned invalid object in response.')
    self.assertNotEqual(len(list_accounts_response), 0, 'listAccounts returned empty list.')
    self.assertEqual(list_accounts_response[0].state, 'enabled', 'The user account created is not enabled.')
    self.debug(('User type account created: %s' % self.user_account.name))
    list_physical_networks_response = PhysicalNetwork.list(self.api_client, zoneid=self.zone.id)
    self.assertEqual(isinstance(list_physical_networks_response, list), True, 'listPhysicalNetworks returned invalid object in response.')
    self.assertNotEqual(len(list_physical_networks_response), 0, 'listPhysicalNetworks should return at least one physical network.')
    physical_network = list_physical_networks_response[0]
    self.debug(('Physical network found: %s' % physical_network.id))
    self.isolated_network_offering = NetworkOffering.create(self.api_client, self.services['isolated_network_offering'], conservemode=False)
    self.cleanup.append(self.isolated_network_offering)
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.isolated_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Disabled', 'The network offering created should be bydefault disabled.')
    self.debug(('Isolated Network offering created: %s' % self.isolated_network_offering.id))
    network_offering_update_response = NetworkOffering.update(self.isolated_network_offering, self.api_client, id=self.isolated_network_offering.id, state='enabled')
    list_network_offerings_response = NetworkOffering.list(self.api_client, id=self.isolated_network_offering.id)
    self.assertEqual(isinstance(list_network_offerings_response, list), True, 'listNetworkOfferings returned invalid object in response.')
    self.assertNotEqual(len(list_network_offerings_response), 0, 'listNetworkOfferings returned empty list.')
    self.assertEqual(list_network_offerings_response[0].state, 'Enabled', 'The network offering state should get updated to Enabled.')
    try:
        self.isolated_network = Network.create(self.api_client, self.services['isolated_network'], networkofferingid=self.isolated_network_offering.id, zoneid=self.zone.id)
        self.cleanup_networks.append(self.isolated_network)
        self.fail('Create isolated network is invalid in advanced zone with security groups.')
    except Exception as e:
        self.debug('Network creation failed because create isolated network is invalid in advanced zone with security groups.')
