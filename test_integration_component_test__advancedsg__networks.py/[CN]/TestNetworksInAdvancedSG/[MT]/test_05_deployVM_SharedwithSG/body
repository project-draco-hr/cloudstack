@attr(tags=['advancedsg'])
def test_05_deployVM_SharedwithSG(self):
    ' Test VM deployment in shared networks with SecurityGroup Provider '
    self.admin_account = Account.create(self.api_client, self.services['account'], admin=True, domainid=self.domain.id)
    self.cleanup_accounts.append(self.admin_account)
    self.debug(('Admin type account created: %s' % self.admin_account.name))
    self.services['shared_network_offering_sg']['specifyVlan'] = 'True'
    self.services['shared_network_offering_sg']['specifyIpRanges'] = 'True'
    self.shared_network_offering_sg = NetworkOffering.create(self.api_client, self.services['shared_network_offering_sg'], conservemode=False)
    self.cleanup_nwOfferings.append(self.shared_network_offering_sg)
    self.debug(('Shared Network offering created: %s' % self.shared_network_offering_sg.id))
    self.shared_network_offering_sg.update(self.api_client, state='enabled')
    (physical_network, vlan) = get_free_vlan(self.api_client, self.zone.id)
    self.services['shared_network_sg']['acltype'] = 'domain'
    self.services['shared_network_sg']['vlan'] = vlan
    self.services['shared_network_sg']['networkofferingid'] = self.shared_network_offering_sg.id
    self.services['shared_network_sg']['physicalnetworkid'] = physical_network.id
    self.setSharedNetworkParams('shared_network_sg')
    self.shared_network_sg = Network.create(self.api_client, self.services['shared_network_sg'], domainid=self.admin_account.domainid, networkofferingid=self.shared_network_offering_sg.id, zoneid=self.zone.id)
    self.cleanup_networks.append(self.shared_network_sg)
    list_networks_response = Network.list(self.api_client, id=self.shared_network_sg.id)
    self.assertEqual(validateList(list_networks_response)[0], PASS, ('Networks list validation failed, list is %s' % list_networks_response))
    self.assertEqual(list_networks_response[0].specifyipranges, True, 'The network is created with ip range but the flag is set to False.')
    self.debug(('Shared Network created: %s' % self.shared_network_sg.id))
    try:
        virtual_machine = VirtualMachine.create(self.api_client, self.services['virtual_machine'], accountid=self.admin_account.name, domainid=self.admin_account.domainid, networkids=[self.shared_network_sg.id], serviceofferingid=self.service_offering.id)
    except Exception as e:
        self.fail(('Exception while deploying virtual machine: %s' % e))
    self.cleanup_vms.append(virtual_machine)
    vms = VirtualMachine.list(self.api_client, id=virtual_machine.id, listall=True)
    self.assertEqual(validateList(vms)[0], PASS, ('vms list validation failed, list is %s' % vms))
    self.debug(('Virtual Machine created: %s' % virtual_machine.id))
    return
