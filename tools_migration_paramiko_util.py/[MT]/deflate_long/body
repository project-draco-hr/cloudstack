def deflate_long(n, add_sign_padding=True):
    'turns a long-int into a normalized byte string (adapted from Crypto.Util.number)'
    s = ''
    n = long(n)
    while ((n != 0) and (n != (-1))):
        s = (struct.pack('>I', (n & 4294967295L)) + s)
        n = (n >> 32)
    for i in enumerate(s):
        if ((n == 0) and (i[1] != '\x00')):
            break
        if ((n == (-1)) and (i[1] != '\xff')):
            break
    else:
        i = (0,)
        if (n == 0):
            s = '\x00'
        else:
            s = '\xff'
    s = s[i[0]:]
    if add_sign_padding:
        if ((n == 0) and (ord(s[0]) >= 128)):
            s = ('\x00' + s)
        if ((n == (-1)) and (ord(s[0]) < 128)):
            s = ('\xff' + s)
    return s
