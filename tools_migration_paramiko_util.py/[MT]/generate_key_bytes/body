def generate_key_bytes(hashclass, salt, key, nbytes):
    '\n    Given a password, passphrase, or other human-source key, scramble it\n    through a secure hash into some keyworthy bytes.  This specific algorithm\n    is used for encrypting/decrypting private key files.\n\n    @param hashclass: class from L{Crypto.Hash} that can be used as a secure\n        hashing function (like C{MD5} or C{SHA}).\n    @type hashclass: L{Crypto.Hash}\n    @param salt: data to salt the hash with.\n    @type salt: string\n    @param key: human-entered password or passphrase.\n    @type key: string\n    @param nbytes: number of bytes to generate.\n    @type nbytes: int\n    @return: key data\n    @rtype: string\n    '
    keydata = ''
    digest = ''
    if (len(salt) > 8):
        salt = salt[:8]
    while (nbytes > 0):
        hash_obj = hashclass.new()
        if (len(digest) > 0):
            hash_obj.update(digest)
        hash_obj.update(key)
        hash_obj.update(salt)
        digest = hash_obj.digest()
        size = min(nbytes, len(digest))
        keydata += digest[:size]
        nbytes -= size
    return keydata
