{
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String ipAddress=(String)params.get(BaseCmd.Properties.IP_ADDRESS.getName());
  IPAddressVO ipAddressVO=getManagementServer().findIPAddressById(ipAddress);
  if (ipAddressVO == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find IP address " + ipAddress);
  }
  Account addrOwner=getManagementServer().findAccountById(ipAddressVO.getAccountId());
  if ((account != null) && isAdmin(account.getType())) {
    if (ipAddressVO.getAccountId() != null) {
      if ((addrOwner != null) && !getManagementServer().isChildDomain(account.getDomainId(),addrOwner.getDomainId())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to list port forwarding rules for address " + ipAddress + ", permission denied for account "+ account.getId());
      }
    }
 else {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to list port forwarding rules for address " + ipAddress + ", address not in use.");
    }
  }
 else {
    if (account != null) {
      if ((ipAddressVO.getAccountId() == null) || (account.getId() != ipAddressVO.getAccountId().longValue())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Unable to list port forwarding rules for address " + ipAddress + ", permission denied for account "+ account.getId());
      }
      addrOwner=account;
    }
  }
  List<FirewallRuleVO> firewallRules=getManagementServer().listIPForwarding(ipAddress,true);
  if (firewallRules == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Internal error searching port forwarding rules for address " + ipAddress);
  }
  Map<String,UserVmVO> userVmCache=new HashMap<String,UserVmVO>();
  List<Pair<String,Object>> groupsTags=new ArrayList<Pair<String,Object>>();
  Object[] forwardingTag=new Object[firewallRules.size()];
  int i=0;
  for (  FirewallRuleVO fwRule : firewallRules) {
    List<Pair<String,Object>> ruleData=new ArrayList<Pair<String,Object>>();
    ruleData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),fwRule.getId().toString()));
    ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PUBLIC_PORT.getName(),fwRule.getPublicPort()));
    ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PRIVATE_PORT.getName(),fwRule.getPrivatePort()));
    ruleData.add(new Pair<String,Object>(BaseCmd.Properties.PROTOCOL.getName(),fwRule.getProtocol()));
    UserVmVO userVM=userVmCache.get(fwRule.getPrivateIpAddress());
    if (userVM == null) {
      Criteria c=new Criteria();
      c.addCriteria(Criteria.ACCOUNTID,new Object[]{addrOwner.getId()});
      c.addCriteria(Criteria.DATACENTERID,ipAddressVO.getDataCenterId());
      c.addCriteria(Criteria.IPADDRESS,fwRule.getPrivateIpAddress());
      List<UserVmVO> userVMs=getManagementServer().searchForUserVMs(c);
      if ((userVMs != null) && (userVMs.size() > 0)) {
        userVM=userVMs.get(0);
        userVmCache.put(fwRule.getPrivateIpAddress(),userVM);
      }
    }
    if (userVM != null) {
      ruleData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName(),Long.toString(userVM.getId())));
      ruleData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_NAME.getName(),userVM.getName()));
    }
    forwardingTag[i++]=ruleData;
  }
  Pair<String,Object> forwardingTags=new Pair<String,Object>("portforwardingrule",forwardingTag);
  groupsTags.add(forwardingTags);
  return groupsTags;
}
