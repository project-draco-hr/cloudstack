{
  if (!ipAddress.equals(master.getAddress(conn))) {
    return null;
  }
  String poolUuid=poolr.uuid;
  ConnectionInfo info=_infos.get(poolUuid);
  if (info != null) {
    Connection poolConn=info.conn;
    if (poolConn != null) {
      Pool.recoverSlaves(poolConn);
      PoolSyncDB(poolConn);
      return info.masterUrl;
    }
  }
  Set<Host> slaves=Host.getAll(conn);
  HashMap<String,Integer> count=new HashMap<String,Integer>(slaves.size());
  for (  Host slave : slaves) {
    String slaveAddress=slave.getAddress(conn);
    Connection slaveConn=null;
    try {
      slaveConn=new Connection(new URL("http://" + slaveAddress),wait);
      if (slaveConn != null) {
        Session slaveSession=Session.slaveLocalLoginWithPassword(slaveConn,username,password);
        Pool.Record slavePoolr=getPoolRecord(slaveConn);
        String possibleMaster=slavePoolr.master.getAddress(slaveConn);
        Integer c=count.get(possibleMaster);
        if (c == null) {
          c=1;
        }
 else {
          c++;
        }
        count.put(possibleMaster,c);
        try {
          slaveSession.logout(slaveConn);
        }
 catch (        Exception e) {
          s_logger.debug("client session logout: " + e.getMessage());
        }
        slaveConn.dispose();
      }
    }
 catch (    MalformedURLException e) {
      throw new CloudRuntimeException("Bad URL" + slaveAddress,e);
    }
catch (    Exception e) {
      s_logger.debug("Unable to login to slave " + slaveAddress + " error "+ e.getMessage());
    }
 finally {
      if (slaveConn != null) {
        slaveConn.dispose();
      }
    }
  }
  Iterator<Map.Entry<String,Integer>> it=count.entrySet().iterator();
  Map.Entry<String,Integer> newMaster=it.next();
  while (it.hasNext()) {
    Map.Entry<String,Integer> entry=it.next();
    if (newMaster.getValue() < entry.getValue()) {
      newMaster=entry;
    }
  }
  String newMasterAddress=newMaster.getKey();
  if (count.size() > 1 && !ipAddress.equals(newMasterAddress)) {
    s_logger.debug("Asking the correct master to recover the slaves: " + newMasterAddress);
    URL newMasterUrl=null;
    try {
      newMasterUrl=new URL("http://" + newMasterAddress);
    }
 catch (    MalformedURLException e) {
      throw new CloudRuntimeException("Unable to get url from " + newMasterAddress,e);
    }
    Connection newMasterConn=new Connection(newMasterUrl,wait);
    try {
      Session.loginWithPassword(newMasterConn,username,password,APIVersion.latest().toString());
      Pool.recoverSlaves(newMasterConn);
      PoolSyncDB(newMasterConn);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException("Unable to login to the real master at " + newMaster.getKey());
    }
 finally {
      try {
        Session.logout(newMasterConn);
      }
 catch (      Exception e) {
        s_logger.debug("Unable to logout of the session: " + e.getMessage());
      }
      newMasterConn.dispose();
    }
    return newMasterUrl;
  }
  return null;
}
