{
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  CheckPointManagerImpl taskMgr=ComponentLocator.inject(CheckPointManagerImpl.class);
  assertTrue(taskMgr.configure("TaskManager",new HashMap<String,Object>()));
  assertTrue(taskMgr.start());
  MockMaid delegate=new MockMaid();
  delegate.setValue("first");
  long taskId=taskMgr.pushCheckPoint(delegate);
  StackMaidDao maidDao=locator.getDao(StackMaidDao.class);
  CheckPointVO task=maidDao.findById(taskId);
  assertEquals(task.getDelegate(),MockMaid.class.getName());
  MockMaid retrieved=(MockMaid)SerializerHelper.fromSerializedString(task.getContext());
  assertEquals(retrieved.getValue(),delegate.getValue());
  Connection conn=Transaction.getStandaloneConnection();
  try {
    conn.setAutoCommit(true);
    PreparedStatement stmt=conn.prepareStatement("update stack_maid set msid=? where msid=?");
    stmt.setLong(1,1234);
    stmt.setLong(2,ManagementServerNode.getManagementServerId());
    stmt.executeUpdate();
    stmt.close();
  }
  finally {
    conn.close();
  }
  MockClusterManager clusterMgr=(MockClusterManager)locator.getManager(ClusterManager.class);
  clusterMgr.triggerTakeover(1234);
  int i=0;
  while (MockMaid.map.get(delegate.getSeq()) != null && i++ < 500) {
    Thread.sleep(1000);
  }
  assertNull(MockMaid.map.get(delegate.getSeq()));
}
