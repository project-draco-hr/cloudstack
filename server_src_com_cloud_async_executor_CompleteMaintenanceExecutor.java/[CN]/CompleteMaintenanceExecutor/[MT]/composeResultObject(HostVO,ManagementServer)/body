{
  HostResultObject hostRO=new HostResultObject();
  hostRO.setId(hostVO.getId());
  hostRO.setName(hostVO.getName());
  hostRO.setState(hostVO.getStatus().toString());
  if (hostVO.getDisconnectedOn() != null)   hostRO.setDisconnected(hostVO.getDisconnectedOn());
  if (hostVO.getType() != null) {
    hostRO.setType(hostVO.getType().toString());
  }
  GuestOSCategoryVO guestOSCategory=managementServer.getHostGuestOSCategory(hostVO.getId());
  if (guestOSCategory != null) {
    hostRO.setOsCategoryId(guestOSCategory.getId());
    hostRO.setOsCategoryName(guestOSCategory.getName());
  }
  hostRO.setIpAddress(hostVO.getPrivateIpAddress());
  hostRO.setZoneId(hostVO.getDataCenterId());
  hostRO.setZoneName(managementServer.getDataCenterBy(hostVO.getDataCenterId()).getName());
  if (hostVO.getPodId() != null && managementServer.findHostPodById(hostVO.getPodId()) != null) {
    hostRO.setPodId(hostVO.getPodId());
    hostRO.setPodName((managementServer.findHostPodById(hostVO.getPodId())).getName());
  }
  hostRO.setVersion(hostVO.getVersion().toString());
  if (hostVO.getHypervisorType() != null) {
    hostRO.setHypervisorType(hostVO.getHypervisorType().toString());
  }
  if ((hostVO.getCpus() != null) && (hostVO.getSpeed() != null) && !(hostVO.getType().toString().equals("Storage"))) {
    hostRO.setCpuNumber(hostVO.getCpus());
    hostRO.setCpuSpeed(hostVO.getSpeed());
    int cpu=0;
    String cpuAlloc=null;
    DecimalFormat decimalFormat=new DecimalFormat("#.##");
    List<UserVmVO> instances=managementServer.listUserVMsByHostId(hostVO.getId());
    for (    UserVmVO vm : instances) {
      ServiceOffering so=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
      cpu+=so.getCpu() * so.getSpeed();
    }
    cpuAlloc=decimalFormat.format(((float)cpu / (float)(hostVO.getCpus() * hostVO.getSpeed())) * 100f) + "%";
    hostRO.setCpuAllocated(cpuAlloc);
    String cpuUsed=null;
    HostStats hostStats=managementServer.getHostStatistics(hostVO.getId());
    if (hostStats != null) {
      float cpuUtil=(float)hostStats.getCpuUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + "%";
      hostRO.setCpuUsed(cpuUsed);
      long avgLoad=(long)hostStats.getAverageLoad();
      hostRO.setAverageLoad(avgLoad);
      long networkKbsRead=(long)hostStats.getNetworkReadKBs();
      hostRO.setNetworkKbsRead(networkKbsRead);
      long networkKbsWrite=(long)hostStats.getNetworkWriteKBs();
      hostRO.setNetworkKbsWrite(networkKbsWrite);
    }
  }
  if (hostVO.getType() == Host.Type.Routing) {
    Long memory=hostVO.getTotalMemory();
    hostRO.setTotalMemory(memory);
    long mem=managementServer.getMemoryUsagebyHost(hostVO.getId());
    hostRO.setMemoryAllocated(mem);
    hostRO.setMemoryUsed(mem);
  }
  if (hostVO.getType().toString().equals("Storage")) {
    hostRO.setDiskSizeTotal(hostVO.getTotalSize());
    hostRO.setDiskSizeAllocated(0);
  }
  hostRO.setCaps(hostVO.getCapabilities());
  hostRO.setLastPinged(hostVO.getLastPinged());
  if (hostVO.getManagementServerId() != null) {
    hostRO.setManagementServerId(hostVO.getManagementServerId());
  }
  if (hostVO.getCreated() != null) {
    hostRO.setCreated(hostVO.getCreated());
  }
  if (hostVO.getRemoved() != null) {
    hostRO.setRemoved(hostVO.getRemoved());
  }
  Set<Event> possibleEvents=hostVO.getStatus().getPossibleEvents();
  hostRO.setEvents(possibleEvents);
  return hostRO;
}
