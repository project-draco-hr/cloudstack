{
  List<String> dbPropFiles=new ArrayList<String>();
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  for (  String arg : args) {
    if (arg.endsWith(".sql")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(".properties") || arg.endsWith("properties.override")) {
      dbPropFiles.add(arg);
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropFiles.size() == 0) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp("DatabaseCreator");
    System.exit(1);
  }
  for (  String dbPropFile : dbPropFiles) {
  }
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println("Unable to find " + sqlFile);
      printHelp("DatabaseCreator");
      System.exit(1);
    }
    System.out.println("=============> Processing SQL file at " + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      ScriptRunner runner=new ScriptRunner(conn,false,true);
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println("Unable to read " + sqlFile + ": "+ e.getMessage());
        System.exit(1);
      }
      try {
        runner.runScript(reader);
      }
 catch (      IOException e) {
        System.err.println("Unable to read " + sqlFile + ": "+ e.getMessage());
        System.exit(1);
      }
catch (      SQLException e) {
        System.err.println("Unable to execute " + sqlFile + ": "+ e.getMessage());
        System.exit(1);
      }
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println("Unable to close DB connection: " + e.getMessage());
      }
    }
  }
  for (  String upgradeClass : upgradeClasses) {
    System.out.println("=============> Processing upgrade: " + upgradeClass);
    Class<?> clazz=null;
    try {
      clazz=Class.forName(upgradeClass);
      if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
        System.err.println("The class must be of SystemIntegrityChecker: " + clazz.getName());
        System.exit(1);
      }
    }
 catch (    ClassNotFoundException e) {
      System.err.println("Unable to find " + upgradeClass + ": "+ e.getMessage());
      System.exit(1);
    }
  }
}
