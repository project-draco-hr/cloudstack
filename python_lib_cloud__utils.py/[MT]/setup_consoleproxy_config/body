def setup_consoleproxy_config(configfile, host, zone, pod):
    stderr('Examining Console Proxy configuration')
    fn = configfile
    text = file(fn).read((-1))
    lines = [s.strip() for s in text.splitlines()]
    confopts = dict([m.split('=', 1) for m in lines if (('=' in m) and (not m.startswith('#')))])
    confposes = dict([(m.split('=', 1)[0], n) for (n, m) in enumerate(lines) if (('=' in m) and (not m.startswith('#')))])
    if (not ('guid' in confopts)):
        stderr('Generating GUID for this Console Proxy')
        confopts['guid'] = uuidgen().stdout.strip()
    if (host == None):
        try:
            host = confopts['host']
        except KeyError:
            host = 'localhost'
        stderr('Please enter the host name of the management server that this console-proxy will connect to: (just hit ENTER to go with %s)', host)
        newhost = raw_input().strip()
        if newhost:
            host = newhost
    confopts['host'] = host
    stderr('Querying %s for zones and pods', host)
    try:
        if ((zone == None) or (pod == None)):
            x = list_zonespods(confopts['host'])
            zoneandpod = prompt_for_hostpods(x)
            if zoneandpod:
                (confopts['zone'], confopts['pod']) = zoneandpod
                stderr('You selected zone %s pod %s', confopts['zone'], confopts['pod'])
            else:
                stderr('Skipped -- using the previous zone %s pod %s', confopts['zone'], confopts['pod'])
        else:
            confopts['zone'] = zone
            confopts['pod'] = pod
    except (urllib2.URLError, urllib2.HTTPError) as e:
        stderr('Query failed: %s.  Defaulting to zone %s pod %s', str(e), confopts['zone'], confopts['pod'])
    for (opt, val) in confopts.items():
        line = '='.join([opt, val])
        if (opt not in confposes):
            lines.append(line)
        else:
            lines[confposes[opt]] = line
    text = '\n'.join(lines)
    file(fn, 'w').write(text)
