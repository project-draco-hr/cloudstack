def run(self, context, dryrun=False, starting_level=None, ending_level=None):
    'Runs each one of the steps in sequence, passing the migration context to each. At the end of the process, context.commit() is called to save the changes, or context.rollback() is called if dryrun = True.\n\t\t\n\t\tIf starting_level is not specified, then the context.get_schema_level() is used to find out at what level the context is at.  Then starting_level is set to that.\n\t\t\n\t\tIf ending_level is not specified, then the evolvers will run till the end of the chain.'
    assert (dryrun is False)
    starting_level = (starting_level or context.get_schema_level() or self.evolvers[0].from_level)
    ending_level = (ending_level or self.evolvers[(-1)].to_level)
    evolution_path = self.evolvers
    idx = evolution_path.index(self.get_evolver_by_starting_level(starting_level))
    evolution_path = evolution_path[idx:]
    try:
        idx = evolution_path.index(self.get_evolver_by_ending_level(ending_level))
    except ValueError:
        raise NoEvolutionPath, ('No evolution path from schema level %r to schema level %r' % (starting_level, ending_level))
    evolution_path = evolution_path[:(idx + 1)]
    logging.info(('Starting migration on %s' % context))
    for ec in evolution_path:
        assert (ec.from_level == context.get_schema_level())
        evolver = ec(context=context)
        logging.info('%s (from level %s to level %s)', evolver, evolver.from_level, evolver.to_level)
        evolver.run()
        context.set_schema_level(evolver.to_level)
        logging.info('%s is now at level %s', context, context.get_schema_level())
    logging.info('Migration finished')
