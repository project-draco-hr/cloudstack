def execute(self):
    yield 'Determining default route'
    routes = ip.route().stdout.splitlines()
    defaultroute = [x for x in routes if x.startswith('default')]
    if (not defaultroute):
        raise TaskFailed('Your network configuration does not have a default route')
    dev = defaultroute[0].split()[4]
    yield ('Default route assigned to device %s' % dev)
    self.old_net_device = dev
    if (distro in (Fedora, CentOS, RHEL6)):
        inconfigfile = '/'.join(augtool.match('/files/etc/sysconfig/network-scripts/*/DEVICE', dev).stdout.strip().split('/')[:(-1)])
        if (not inconfigfile):
            raise TaskFailed(('Device %s has not been set up in /etc/sysconfig/network-scripts' % dev))
        pathtoconfigfile = inconfigfile[6:]
    if (distro in (Fedora, CentOS, RHEL6)):
        automatic = augtool.match(('%s/ONBOOT' % inconfigfile), 'yes').stdout.strip()
    else:
        automatic = augtool.match('/files/etc/network/interfaces/auto/*/', dev).stdout.strip()
    if (not automatic):
        if (distro is Fedora):
            raise TaskFailed(('Device %s has not been set up in %s as automatic on boot' % dev), pathtoconfigfile)
        else:
            raise TaskFailed(('Device %s has not been set up in /etc/network/interfaces as automatic on boot' % dev))
    if (distro not in (Fedora, CentOS, RHEL6)):
        inconfigfile = augtool.match('/files/etc/network/interfaces/iface', dev).stdout.strip()
        if (not inconfigfile):
            raise TaskFailed(('Device %s has not been set up in /etc/network/interfaces' % dev))
    if (distro in (Fedora, CentOS, RHEL6)):
        isstatic = augtool.match((inconfigfile + '/BOOTPROTO'), 'none').stdout.strip()
        if (not isstatic):
            isstatic = augtool.match((inconfigfile + '/BOOTPROTO'), 'static').stdout.strip()
    else:
        isstatic = augtool.match((inconfigfile + '/method'), 'static').stdout.strip()
    if (not isstatic):
        if (distro in (Fedora, CentOS, RHEL6)):
            raise TaskFailed(('Device %s has not been set up as a static device in %s' % (dev, pathtoconfigfile)))
        else:
            raise TaskFailed(('Device %s has not been set up as a static device in /etc/network/interfaces' % dev))
    if is_service_running(self.nmservice):
        self.was_nm_service_running = True
        yield 'Stopping NetworkManager to avoid automatic network reconfiguration'
        disable_service(self.nmservice)
    else:
        self.was_nm_service_running = False
    if is_service_running(self.netservice):
        self.was_net_service_running = True
    else:
        self.was_net_service_running = False
    yield ('Creating Cloud bridging device and making device %s member of this bridge' % dev)
    if (distro in (Fedora, CentOS, RHEL6)):
        ifcfgtext = file(pathtoconfigfile).read()
        newf = ('/etc/sysconfig/network-scripts/ifcfg-%s' % self.brname)
        f = file(newf, 'w')
        f.write(ifcfgtext)
        f.flush()
        f.close()
        innewconfigfile = ('/files' + newf)
        script = ('set %s/DEVICE %s\nset %s/NAME %s\nset %s/BRIDGE_PORTS %s\nset %s/TYPE Bridge\nrm %s/HWADDR\nrm %s/UUID\nrm %s/HWADDR\nrm %s/IPADDR\nrm %s/DEFROUTE\nrm %s/NETMASK\nrm %s/GATEWAY\nrm %s/BROADCAST\nrm %s/NETWORK\nset %s/BRIDGE %s\nsave' % (innewconfigfile, self.brname, innewconfigfile, self.brname, innewconfigfile, dev, innewconfigfile, innewconfigfile, innewconfigfile, innewconfigfile, inconfigfile, inconfigfile, inconfigfile, inconfigfile, inconfigfile, inconfigfile, inconfigfile, self.brname))
        yield ('Executing the following reconfiguration script:\n%s' % script)
        try:
            returned = (augtool < script)
            if ('Saved 2 file' not in returned.stdout):
                print (returned.stdout + returned.stderr)
                raise TaskFailed('Network reconfiguration failed.')
            else:
                yield 'Network reconfiguration complete'
        except CalledProcessError as e:
            print (e.stdout + e.stderr)
            raise TaskFailed('Network reconfiguration failed')
    else:
        backup = file('/etc/network/interfaces').read((-1))
        script = ('set %s %s\nset %s %s\nset %s/bridge_ports %s\nsave' % (automatic, self.brname, inconfigfile, self.brname, inconfigfile, dev))
        yield ('Executing the following reconfiguration script:\n%s' % script)
        try:
            returned = (augtool < script)
            if ('Saved 1 file' not in returned.stdout):
                raise TaskFailed('Network reconfiguration failed.')
            else:
                yield 'Network reconfiguration complete'
        except CalledProcessError as e:
            print (e.stdout + e.stderr)
            raise TaskFailed('Network reconfiguration failed')
    yield 'We are going to restart network services now, to make the network changes take effect.  Hit ENTER when you are ready.'
    if self.isAutoMode():
        pass
    else:
        raw_input()
    self.runtime_state_changed = True
    yield 'Enabling and restarting non-NetworkManager networking'
    if (distro is Ubuntu):
        ifup(self.brname, stdout=None, stderr=None)
    stop_service(self.netservice)
    try:
        enable_service(self.netservice, forcestart=True)
    except CalledProcessError as e:
        if (e.returncode == 1):
            pass
        else:
            raise
    yield 'Verifying that the bridge is up'
    try:
        o = ifconfig(self.brname)
    except CalledProcessError as e:
        print (e.stdout + e.stderr)
        raise TaskFailed('The bridge could not be set up properly')
    yield 'Networking restart done'
