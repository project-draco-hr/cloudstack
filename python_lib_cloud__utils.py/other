'Cloud.com Python utility library'
import sys, os, subprocess, errno, re, time, glob
import urllib2
import xml.dom.minidom
import logging
import socket
E_GENERIC = 1
E_NOKVM = 2
E_NODEFROUTE = 3
E_DHCP = 4
E_NOPERSISTENTNET = 5
E_NETRECONFIGFAILED = 6
E_VIRTRECONFIGFAILED = 7
E_FWRECONFIGFAILED = 8
E_AGENTRECONFIGFAILED = 9
E_AGENTFAILEDTOSTART = 10
E_NOFQDN = 11
E_SELINUXENABLED = 12
try:
    E_USAGE = os.EX_USAGE
except AttributeError:
    E_USAGE = 64
E_NEEDSMANUALINTERVENTION = 13
E_INTERRUPTED = 14
E_SETUPFAILED = 15
E_UNHANDLEDEXCEPTION = 16
E_MISSINGDEP = 17
Unknown = 0
Fedora = 1
CentOS = 2
Ubuntu = 3
RHEL6 = 4
IPV4 = 4
IPV6 = 6
if os.path.exists('/etc/fedora-release'):
    distro = Fedora
elif os.path.exists('/etc/centos-release'):
    distro = CentOS
elif os.path.exists('/etc/redhat-release'):
    version = file('/etc/redhat-release').readline()
    if (version.find('Red Hat Enterprise Linux Server release 6') != (-1)):
        distro = RHEL6
    elif (version.find('CentOS release') != (-1)):
        distro = CentOS
elif (os.path.exists('/etc/legal') and ('Ubuntu' in file('/etc/legal').read((-1)))):
    distro = Ubuntu
else:
    distro = Unknown
logFileName = None
if hasattr(subprocess, 'check_call'):
    from subprocess import CalledProcessError, check_call
else:


    class CalledProcessError(Exception):

        def __init__(self, returncode, cmd):
            self.returncode = returncode
            self.cmd = cmd

        def __str__(self):
            return ("Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode))
    subprocess.CalledProcessError = CalledProcessError

    def check_call(*popenargs, **kwargs):
        retcode = subprocess.call(*popenargs, **kwargs)
        cmd = kwargs.get('args')
        if (cmd is None):
            cmd = popenargs[0]
        if retcode:
            raise subprocess.CalledProcessError(retcode, cmd)
        return retcode
    subprocess.check_call = check_call
try:
    any = any
    all = all
except NameError:

    def any(sequence):
        for i in sequence:
            if i:
                return True
        return False

    def all(sequence):
        for i in sequence:
            if (not i):
                return False
        return True
kvmok = Command('kvm-ok')
getenforce = Command('/usr/sbin/getenforce')
ip = Command('ip')
service = Command('service')
chkconfig = Command('chkconfig')
updatercd = Command('update-rc.d')
ufw = Command('ufw')
iptables = Command('iptables')
iptablessave = Command('iptables-save')
augtool = Command('augtool')
ifconfig = Command('ifconfig')
ifdown = Command('ifdown')
ifup = Command('ifup')
brctl = Command('brctl')
uuidgen = Command('uuidgen')
INITIAL_LEVEL = '-'
