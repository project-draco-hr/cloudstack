@classmethod
def create(cls, apiclient, services, volumeid=None, account=None, domainid=None, projectid=None):
    'Create template from Volume'
    cmd = createTemplate.createTemplateCmd()
    cmd.displaytext = services['displaytext']
    cmd.name = '-'.join([services['name'], random_gen()])
    cmd.ostypeid = services['ostypeid']
    cmd.isfeatured = (services['isfeatured'] if ('isfeatured' in services) else False)
    cmd.ispublic = (services['ispublic'] if ('ispublic' in services) else False)
    cmd.isextractable = (services['isextractable'] if ('isextractable' in services) else False)
    cmd.passwordenabled = (services['passwordenabled'] if ('passwordenabled' in services) else False)
    cmd.passwordenabled = (services['passwordenabled'] if ('passwordenabled' in services) else False)
    if volumeid:
        cmd.volumeid = volumeid
    if account:
        cmd.account = account
    if domainid:
        cmd.domainid = domainid
    if projectid:
        cmd.projectid = projectid
    return Template(apiclient.createTemplate(cmd).__dict__)
