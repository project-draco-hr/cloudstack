@classmethod
def create(cls, apiclient, virtual_machine, services, ipaddressid=None, projectid=None, openfirewall=False, networkid=None, vpcid=None):
    'Create Port forwarding rule'
    cmd = createPortForwardingRule.createPortForwardingRuleCmd()
    if ipaddressid:
        cmd.ipaddressid = ipaddressid
    elif ('ipaddressid' in services):
        cmd.ipaddressid = services['ipaddressid']
    cmd.privateport = services['privateport']
    cmd.publicport = services['publicport']
    if ('privateendport' in services):
        cmd.privateendport = services['privateendport']
    if ('publicendport' in services):
        cmd.publicendport = services['publicendport']
    cmd.protocol = services['protocol']
    cmd.virtualmachineid = virtual_machine.id
    if projectid:
        cmd.projectid = projectid
    if openfirewall:
        cmd.openfirewall = True
    if networkid:
        cmd.networkid = networkid
    if vpcid:
        cmd.vpcid = vpcid
    return NATRule(apiclient.createPortForwardingRule(cmd).__dict__)
