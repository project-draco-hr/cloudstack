@classmethod
def create(cls, apiclient, services, templateid=None, accountid=None, domainid=None, zoneid=None, networkids=None, serviceofferingid=None, securitygroupids=None, projectid=None, startvm=None, diskofferingid=None, affinitygroupnames=None, affinitygroupids=None, group=None, hostid=None, keypair=None, mode='default', method='GET'):
    'Create the instance'
    cmd = deployVirtualMachine.deployVirtualMachineCmd()
    if serviceofferingid:
        cmd.serviceofferingid = serviceofferingid
    elif ('serviceoffering' in services):
        cmd.serviceofferingid = services['serviceoffering']
    if zoneid:
        cmd.zoneid = zoneid
    elif ('zoneid' in services):
        cmd.zoneid = services['zoneid']
    cmd.hypervisor = apiclient.hypervisor
    if ('displayname' in services):
        cmd.displayname = services['displayname']
    if ('name' in services):
        cmd.name = services['name']
    if accountid:
        cmd.account = accountid
    elif ('account' in services):
        cmd.account = services['account']
    if domainid:
        cmd.domainid = domainid
    elif ('domainid' in services):
        cmd.domainid = services['domainid']
    if networkids:
        cmd.networkids = networkids
        allow_egress = False
    elif ('networkids' in services):
        cmd.networkids = services['networkids']
        allow_egress = False
    else:
        allow_egress = True
    if templateid:
        cmd.templateid = templateid
    elif ('template' in services):
        cmd.templateid = services['template']
    if diskofferingid:
        cmd.diskofferingid = diskofferingid
    elif ('diskoffering' in services):
        cmd.diskofferingid = services['diskoffering']
    if keypair:
        cmd.keypair = keypair
    elif ('keypair' in services):
        cmd.keypair = services['keypair']
    if securitygroupids:
        cmd.securitygroupids = [str(sg_id) for sg_id in securitygroupids]
    if ('affinitygroupnames' in services):
        cmd.affinitygroupnames = services['affinitygroupnames']
    elif affinitygroupnames:
        cmd.affinitygroupnames = affinitygroupnames
    if affinitygroupids:
        cmd.affinitygroupids = affinitygroupids
    if projectid:
        cmd.projectid = projectid
    if (startvm is not None):
        cmd.startvm = startvm
    if hostid:
        cmd.hostid = hostid
    if ('userdata' in services):
        cmd.userdata = base64.urlsafe_b64encode(services['userdata'])
    if group:
        cmd.group = group
    if (mode.lower() == 'basic'):
        cls.ssh_access_group(apiclient, cmd)
    virtual_machine = apiclient.deployVirtualMachine(cmd, method=method)
    virtual_machine.ssh_ip = virtual_machine.nic[0].ipaddress
    if (startvm == False):
        virtual_machine.public_ip = virtual_machine.nic[0].ipaddress
        return VirtualMachine(virtual_machine.__dict__, services)
    if (mode.lower() == 'advanced'):
        cls.access_ssh_over_nat(apiclient, services, virtual_machine, allow_egress=allow_egress)
    elif (mode.lower() == 'basic'):
        if (virtual_machine.publicip is not None):
            vm_ssh_ip = virtual_machine.publicip
        else:
            vm_ssh_ip = virtual_machine.nic[0].ipaddress
        virtual_machine.ssh_ip = vm_ssh_ip
        virtual_machine.public_ip = vm_ssh_ip
    return VirtualMachine(virtual_machine.__dict__, services)
