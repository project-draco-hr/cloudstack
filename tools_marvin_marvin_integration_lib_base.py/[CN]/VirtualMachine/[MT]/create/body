@classmethod
def create(cls, apiclient, services, templateid=None, accountid=None, domainid=None, zoneid=None, networkids=None, serviceofferingid=None, securitygroupids=None, projectid=None, startvm=None, diskofferingid=None, affinitygroupnames=None, affinitygroupids=None, group=None, hostid=None, keypair=None, mode='basic', method='GET'):
    'Create the instance'
    cmd = deployVirtualMachine.deployVirtualMachineCmd()
    if serviceofferingid:
        cmd.serviceofferingid = serviceofferingid
    elif ('serviceoffering' in services):
        cmd.serviceofferingid = services['serviceoffering']
    if zoneid:
        cmd.zoneid = zoneid
    elif ('zoneid' in services):
        cmd.zoneid = services['zoneid']
    cmd.hypervisor = apiclient.hypervisor
    if ('displayname' in services):
        cmd.displayname = services['displayname']
    if ('name' in services):
        cmd.name = services['name']
    if accountid:
        cmd.account = accountid
    elif ('account' in services):
        cmd.account = services['account']
    if domainid:
        cmd.domainid = domainid
    elif ('domainid' in services):
        cmd.domainid = services['domainid']
    if networkids:
        cmd.networkids = networkids
    elif ('networkids' in services):
        cmd.networkids = services['networkids']
    if templateid:
        cmd.templateid = templateid
    elif ('template' in services):
        cmd.templateid = services['template']
    if diskofferingid:
        cmd.diskofferingid = diskofferingid
    elif ('diskoffering' in services):
        cmd.diskofferingid = services['diskoffering']
    if keypair:
        cmd.keypair = keypair
    elif ('keypair' in services):
        cmd.keypair = services['keypair']
    if securitygroupids:
        cmd.securitygroupids = [str(sg_id) for sg_id in securitygroupids]
    if (mode.lower() == 'basic'):
        list_security_groups = SecurityGroup.list(apiclient, securitygroupname='basic_sec_grp')
        if (not isinstance(list_security_groups, list)):
            basic_mode_security_group = SecurityGroup.create(apiclient, {'name': 'basic_sec_grp', })
            sec_grp_services = {'protocol': 'TCP', 'startport': 22, 'endport': 22, 'cidrlist': '0.0.0.0/0', }
            cmd_auth = authorizeSecurityGroupIngress.authorizeSecurityGroupIngressCmd()
            cmd_auth.domainid = cmd.domainid
            cmd_auth.account = cmd.account
            cmd_auth.securitygroupid = basic_mode_security_group.id
            cmd_auth.protocol = sec_grp_services['protocol']
            cmd_auth.startport = sec_grp_services['startport']
            cmd_auth.endport = sec_grp_services['endport']
            cmd_auth.cidrlist = sec_grp_services['cidrlist']
            apiclient.authorizeSecurityGroupIngress(cmd_auth)
        else:
            basic_mode_security_group = list_security_groups[0]
        if isinstance(cmd.securitygroupids, list):
            cmd.securitygroupids.append(basic_mode_security_group.id)
        else:
            cmd.securitygroupids = [basic_mode_security_group.id]
    if ('affinitygroupnames' in services):
        cmd.affinitygroupnames = services['affinitygroupnames']
    elif affinitygroupnames:
        cmd.affinitygroupnames = affinitygroupnames
    if affinitygroupids:
        cmd.affinitygroupids = affinitygroupids
    if projectid:
        cmd.projectid = projectid
    if (startvm is not None):
        cmd.startvm = startvm
    if hostid:
        cmd.hostid = hostid
    if ('userdata' in services):
        cmd.userdata = base64.b64encode(services['userdata'])
    if group:
        cmd.group = group
    virtual_machine = apiclient.deployVirtualMachine(cmd, method=method)
    if (startvm == False):
        virtual_machine.ssh_ip = virtual_machine.nic[0].ipaddress
        virtual_machine.public_ip = virtual_machine.nic[0].ipaddress
        return VirtualMachine(virtual_machine.__dict__, services)
    timeout = 10
    while True:
        vm_status = VirtualMachine.list(apiclient, id=virtual_machine.id)
        if isinstance(vm_status, list):
            if (vm_status[0].state == 'Running'):
                break
            elif (timeout == 0):
                raise Exception(('TimeOutException: Failed to start VM (ID: %s)' % virtual_machine.id))
        time.sleep(10)
        timeout = (timeout - 1)
    if (mode.lower() == 'advanced'):
        public_ip = PublicIPAddress.create(apiclient, virtual_machine.account, virtual_machine.zoneid, virtual_machine.domainid, services)
        FireWallRule.create(apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=['0.0.0.0/0'], startport=22, endport=22)
        nat_rule = NATRule.create(apiclient, virtual_machine, services, ipaddressid=public_ip.ipaddress.id)
        virtual_machine.ssh_ip = nat_rule.ipaddress
        virtual_machine.public_ip = nat_rule.ipaddress
    else:
        virtual_machine.ssh_ip = virtual_machine.nic[0].ipaddress
        virtual_machine.public_ip = virtual_machine.nic[0].ipaddress
    return VirtualMachine(virtual_machine.__dict__, services)
