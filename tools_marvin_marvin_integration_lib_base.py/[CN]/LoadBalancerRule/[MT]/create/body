@classmethod
def create(cls, apiclient, services, ipaddressid=None, accountid=None, networkid=None, projectid=None, domainid=None):
    'Create Load balancing Rule'
    cmd = createLoadBalancerRule.createLoadBalancerRuleCmd()
    if ipaddressid:
        cmd.publicipid = ipaddressid
    elif ('ipaddressid' in services):
        cmd.publicipid = services['ipaddressid']
    if accountid:
        cmd.account = accountid
    elif ('account' in services):
        cmd.account = services['account']
    if domainid:
        cmd.domainid = domainid
    cmd.name = services['name']
    cmd.algorithm = services['alg']
    cmd.privateport = services['privateport']
    cmd.publicport = services['publicport']
    if ('openfirewall' in services):
        cmd.openfirewall = services['openfirewall']
    if projectid:
        cmd.projectid = projectid
    if networkid:
        cmd.networkid = networkid
    return LoadBalancerRule(apiclient.createLoadBalancerRule(cmd).__dict__)
