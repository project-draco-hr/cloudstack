@classmethod
def create(cls, apiclient, services, **kwargs):
    'Create network offering'
    cmd = createNetworkOffering.createNetworkOfferingCmd()
    cmd.displaytext = '-'.join([services['displaytext'], random_gen()])
    cmd.name = '-'.join([services['name'], random_gen()])
    cmd.guestiptype = services['guestiptype']
    cmd.supportedservices = ''
    if ('supportedservices' in services):
        cmd.supportedservices = services['supportedservices']
    cmd.traffictype = services['traffictype']
    if ('useVpc' in services):
        cmd.useVpc = services['useVpc']
    cmd.serviceproviderlist = []
    if ('serviceProviderList' in services):
        for (service, provider) in services['serviceProviderList'].items():
            cmd.serviceproviderlist.append({'service': service, 'provider': provider, })
    if ('serviceCapabilityList' in services):
        cmd.servicecapabilitylist = []
        for (service, capability) in services['serviceCapabilityList'].items():
            for (ctype, value) in capability.items():
                cmd.servicecapabilitylist.append({'service': service, 'capabilitytype': ctype, 'capabilityvalue': value, })
    if ('specifyVlan' in services):
        cmd.specifyVlan = services['specifyVlan']
    if ('specifyIpRanges' in services):
        cmd.specifyIpRanges = services['specifyIpRanges']
    cmd.availability = 'Optional'
    [setattr(cmd, k, v) for (k, v) in kwargs.items()]
    return NetworkOffering(apiclient.createNetworkOffering(cmd).__dict__)
