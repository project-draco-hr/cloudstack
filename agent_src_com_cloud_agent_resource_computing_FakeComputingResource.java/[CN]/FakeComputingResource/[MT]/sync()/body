{
  Map<String,State> newStates;
  Map<String,State> oldStates=null;
  HashMap<String,State> changes=new HashMap<String,State>();
synchronized (_vms) {
    newStates=getVmManager().getVmStates();
    oldStates=new HashMap<String,State>(_vms.size());
    oldStates.putAll(_vms);
    for (    Map.Entry<String,State> entry : newStates.entrySet()) {
      String vm=entry.getKey();
      State newState=entry.getValue();
      State oldState=oldStates.remove(vm);
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + ": xen has state "+ newState+ " and we have state "+ (oldState != null ? oldState.toString() : "null"));
      }
      if (oldState == null) {
        _vms.put(vm,newState);
        changes.put(vm,newState);
      }
 else       if (oldState == State.Starting) {
        if (newState == State.Running) {
          _vms.put(vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.debug("Ignoring vm " + vm + " because of a lag in starting the vm.");
        }
      }
 else       if (oldState == State.Stopping) {
        if (newState == State.Stopped) {
          _vms.put(vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.debug("Ignoring vm " + vm + " because of a lag in stopping the vm. ");
        }
      }
 else       if (oldState != newState) {
        _vms.put(vm,newState);
        changes.put(vm,newState);
      }
    }
    for (    Map.Entry<String,State> entry : oldStates.entrySet()) {
      String vm=entry.getKey();
      State oldState=entry.getValue();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("VM " + vm + " is now missing from xen so reporting stopped");
      }
      if (oldState == State.Stopping) {
        s_logger.debug("Ignoring VM " + vm + " in transition state stopping.");
        _vms.remove(vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.debug("Ignoring VM " + vm + " in transition state starting.");
      }
 else       if (oldState == State.Stopped) {
        _vms.remove(vm);
      }
 else {
        changes.put(entry.getKey(),State.Stopped);
      }
    }
  }
  return changes;
}
