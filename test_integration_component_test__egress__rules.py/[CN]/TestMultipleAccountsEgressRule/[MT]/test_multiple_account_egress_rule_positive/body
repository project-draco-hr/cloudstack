def test_multiple_account_egress_rule_positive(self):
    'Test multiple account egress rules positive case\n        '
    security_groupA = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.accountA.account.name, domainid=self.accountA.account.domainid)
    self.debug(('Created security group with ID: %s' % security_groupA.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.accountA.account.name, domainid=self.accountA.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    security_groupB = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.accountB.account.name, domainid=self.accountB.account.domainid)
    self.debug(('Created security group with ID: %s' % security_groupB.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.accountB.account.name, domainid=self.accountB.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorizing egress rule for sec group ID: %s for ssh access' % security_groupA.id))
    user_secgrp_list = {self.accountB.account.name: security_groupB.name, }
    egress_rule = security_groupA.authorizeEgress(self.apiclient, self.services['sg_account'], account=self.accountA.account.name, domainid=self.accountA.account.domainid, user_secgrp_list=user_secgrp_list)
    self.assertEqual(isinstance(egress_rule, dict), True, 'Check egress rule created properly')
    ssh_egress_rule = egress_rule['egressrule'][0].__dict__
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_groupA.id))
    ingress_ruleA = security_groupA.authorize(self.apiclient, self.services['security_group'], account=self.accountA.account.name, domainid=self.accountA.account.domainid)
    self.assertEqual(isinstance(ingress_ruleA, dict), True, 'Check ingress rule created properly')
    ssh_ruleA = ingress_ruleA['ingressrule'][0].__dict__
    self.virtual_machineA = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.accountA.account.name, domainid=self.accountA.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_groupA.id])
    self.cleanup.append(self.virtual_machineA)
    self.debug(('Deploying VM in account: %s' % self.accountA.account.name))
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machineA.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VM should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM state after deployment should be running')
    self.debug(('VM: %s state: %s' % (vm.id, vm.state)))
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_groupB.id))
    ingress_ruleB = security_groupB.authorize(self.apiclient, self.services['security_group'], account=self.accountB.account.name, domainid=self.accountB.account.domainid)
    self.assertEqual(isinstance(ingress_ruleB, dict), True, 'Check ingress rule created properly')
    ssh_ruleB = ingress_ruleB['ingressrule'][0].__dict__
    self.virtual_machineB = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.accountB.account.name, domainid=self.accountB.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_groupB.id])
    self.cleanup.append(self.virtual_machineB)
    self.debug(('Deploying VM in account: %s' % self.accountB.account.name))
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machineB.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VM should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM state after deployment should be running')
    self.debug(('VM: %s state: %s' % (vm.id, vm.state)))
    try:
        self.debug(('SSH into VM: %s' % self.virtual_machineA.ssh_ip))
        ssh = self.virtual_machineA.get_ssh_client()
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machineA.ipaddress, e)))
    try:
        self.debug('SSHing into VB type B from VM A')
        self.debug(('VM IP: %s' % self.virtual_machineB.ssh_ip))
        res = ssh.execute(('ssh %s@%s' % (self.services['virtual_machine']['username'], self.virtual_machineB.ssh_ip)))
        self.debug(('SSH result: %s' % str(res)))
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machineA.ipaddress, e)))
    result = str(res)
    self.assertNotEqual(result.count('Connection timed out'), 1, 'SSH into management server from VM should be successful')
    return
