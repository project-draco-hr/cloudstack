def test_deployVM_InDefaultSecurityGroup(self):
    'Test deploy VM in default security group with no egress rules\n        '
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id)
    self.debug(('Deployed VM with ID: %s' % self.virtual_machine.id))
    self.cleanup.append(self.virtual_machine)
    list_vm_response = list_virtual_machines(self.apiclient, id=self.virtual_machine.id)
    self.debug(('Verify listVirtualMachines response for virtual machine: %s' % self.virtual_machine.id))
    self.assertEqual(isinstance(list_vm_response, list), True, 'Check for list VM response')
    vm_response = list_vm_response[0]
    self.assertNotEqual(len(list_vm_response), 0, 'Check VM available in List Virtual Machines')
    self.assertEqual(vm_response.id, self.virtual_machine.id, 'Check virtual machine id in listVirtualMachines')
    self.assertEqual(vm_response.state, 'Running', 'VM state should be running')
    self.assertEqual(hasattr(vm_response, 'securitygroup'), True, 'List VM response should have atleast one security group')
    security_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(security_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(security_groups), 1, 'Check List Security groups response')
    self.debug(('List Security groups response: %s' % str(security_groups)))
    sec_grp = security_groups[0]
    self.assertEqual(sec_grp.name, 'default', 'List Sec Group should only list default sec. group')
    return
