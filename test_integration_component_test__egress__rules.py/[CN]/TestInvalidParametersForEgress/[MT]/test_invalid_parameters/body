def test_invalid_parameters(self):
    ' Test invalid parameters for egress rules\n        '
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorizing egress rule for sec group ID: %s with invalid port' % security_group.id))
    with self.assertRaises(Exception):
        egress_rule = security_group.authorizeEgress(self.apiclient, self.services['sg_invalid_port'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Authorizing egress rule for sec group ID: %s with invalid cidr' % security_group.id))
    with self.assertRaises(Exception):
        egress_rule = security_group.authorizeEgress(self.apiclient, self.services['sg_invalid_cidr'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Authorizing egress rule for sec group ID: %s with invalid account' % security_group.id))
    with self.assertRaises(Exception):
        egress_rule = security_group.authorizeEgress(self.apiclient, self.services['security_group'], account=random_gen(), domainid=self.account.account.domainid)
    self.debug(('Authorizing egress rule for sec group ID: %s with cidr: anywhere and port: 22' % security_group.id))
    egress_rule_A = security_group.authorizeEgress(self.apiclient, self.services['sg_cidr_anywhere'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(egress_rule_A, dict), True, 'Check egress rule created properly')
    egress_rule_R = security_group.authorizeEgress(self.apiclient, self.services['sg_cidr_restricted'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(egress_rule_R, dict), True, 'Check egress rule created properly')
    self.debug(('Authorizing egress rule for sec group ID: %s with duplicate port' % security_group.id))
    with self.assertRaises(Exception):
        security_group.authorizeEgress(self.apiclient, self.services['sg_cidr_restricted'], account=self.account.account.name, domainid=self.account.account.domainid)
    return
