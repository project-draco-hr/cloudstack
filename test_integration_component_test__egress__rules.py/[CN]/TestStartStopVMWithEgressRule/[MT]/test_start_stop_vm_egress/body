def test_start_stop_vm_egress(self):
    ' Test stop start Vm with egress rules\n        '
    security_group = SecurityGroup.create(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.debug(('Created security group with ID: %s' % security_group.id))
    sercurity_groups = SecurityGroup.list(self.apiclient, account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(sercurity_groups, list), True, 'Check for list security groups response')
    self.assertEqual(len(sercurity_groups), 2, 'Check List Security groups response')
    self.debug(('Authorizing ingress rule for sec group ID: %s for ssh access' % security_group.id))
    ingress_rule = security_group.authorize(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(ingress_rule, dict), True, 'Check ingress rule created properly')
    ssh_rule = ingress_rule['ingressrule'][0].__dict__
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, securitygroupids=[security_group.id])
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    self.debug(('Authorizing egress rule for sec group ID: %s for ssh access' % security_group.id))
    egress_rule = security_group.authorizeEgress(self.apiclient, self.services['security_group'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.assertEqual(isinstance(egress_rule, dict), True, 'Check egress rule created properly')
    ssh_egress_rule = egress_rule['egressrule'][0].__dict__
    self.debug(('Stopping virtual machine: %s' % self.virtual_machine.id))
    self.virtual_machine.stop(self.apiclient)
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VM should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Stopped', 'VM state should be stopped')
    self.debug(('VM: %s state: %s' % (vm.id, vm.state)))
    self.debug(('Starting virtual machine: %s' % self.virtual_machine.id))
    self.virtual_machine.start(self.apiclient)
    vms = VirtualMachine.list(self.apiclient, id=self.virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VM should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'VM state should be stopped')
    self.debug(('VM: %s state: %s' % (vm.id, vm.state)))
    try:
        self.debug(('SSH into VM: %s' % self.virtual_machine.ssh_ip))
        ssh = self.virtual_machine.get_ssh_client()
    except Exception as e:
        self.fail(('SSH Access failed for %s: %s' % (self.virtual_machine.ipaddress, e)))
    return
