{
  String[][] result=new String[2][];
  Set<String> toAdd=new HashSet<String>();
  for (  NetworkACLTO aclTO : rules) {
    if (aclTO.revoked() == true) {
      StringBuilder sb=new StringBuilder();
      sb.append(aclTO.getTrafficType().toString()).append(":reverted:0:0:0:");
      String aclRuleEntry=sb.toString();
      toAdd.add(aclRuleEntry);
      continue;
    }
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(aclTO.getTrafficType().toString()).append(":").append(aclTO.getProtocol()).append(":");
    if ("icmp".compareTo(aclTO.getProtocol()) == 0) {
      sb.append(aclTO.getIcmpType()).append(":").append(aclTO.getIcmpCode()).append(":");
    }
 else {
      sb.append(aclTO.getStringPortRange()).append(":");
    }
    cidr=aclTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append("0.0.0.0/0");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append("-");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(":");
    String aclRuleEntry=sb.toString();
    toAdd.add(aclRuleEntry);
  }
  result[0]=toAdd.toArray(new String[toAdd.size()]);
  return result;
}
