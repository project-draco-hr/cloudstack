{
  PreparedStatement pstmt=conn.prepareStatement("INSERT INTO nics (instance_id, network_id, mac_address, ip4_address, netmask, strategy, ip_type, broadcast_uri, mode, reserver_name, reservation_id, device_id, update_time, isolation_uri, ip6_address, default_nic, created, removed, state, gateway) " + "VALUES (?,           ?,          ?,           ?,           ?,       ?,        'Ip4',   ?,             ?,    ?,             ?,              ?,         now(),       ?,          NULL,         ?,          now(),   NULL,    ?,     ?)",Statement.RETURN_GENERATED_KEYS);
  int i=1;
  String isolationUri=null;
  String broadcast=null;
  if (vnet != null) {
    broadcast="vlan://" + vnet;
    if (vnet.equalsIgnoreCase("untagged")) {
      isolationUri="ec2://" + vnet;
    }
 else {
      isolationUri=broadcast;
    }
  }
  pstmt.setLong(i++,instanceId);
  pstmt.setLong(i++,networkId);
  pstmt.setString(i++,macAddress);
  pstmt.setString(i++,ipAddress);
  pstmt.setString(i++,netmask);
  pstmt.setString(i++,strategy);
  pstmt.setString(i++,broadcast);
  pstmt.setString(i++,mode);
  pstmt.setString(i++,guru);
  pstmt.setString(i++,reservationId);
  pstmt.setInt(i++,deviceId);
  pstmt.setString(i++,isolationUri);
  pstmt.setBoolean(i++,defNic);
  pstmt.setString(i++,running ? "Reserved" : "Allocated");
  pstmt.setString(i++,gateway);
  pstmt.executeUpdate();
  ResultSet rs=pstmt.getGeneratedKeys();
  long nicId=0;
  if (!rs.next()) {
    throw new CloudRuntimeException("Unable to get id for nic");
  }
  nicId=rs.getLong(1);
  rs.close();
  pstmt.close();
  return nicId;
}
