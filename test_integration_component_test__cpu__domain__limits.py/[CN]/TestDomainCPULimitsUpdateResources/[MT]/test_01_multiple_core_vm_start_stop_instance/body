@attr(tags=['advanced', 'advancedns', 'simulator', 'selfservice'])
def test_01_multiple_core_vm_start_stop_instance(self):
    'Test Deploy VM with 4 core CPU & verify the usage'
    self.debug('Setting up account and domain hierarchy')
    self.setupAccounts()
    users = {self.domain: self.admin, self.child_domain: self.child_do_admin, }
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        api_client = self.testClient.createUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.debug(('Creating an instance with service offering: %s' % self.service_offering.name))
        vm = self.createInstance(service_off=self.service_offering, api_client=api_client)
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count = account_list[0].cputotal
        expected_resource_count = int(self.services['service_offering']['cpunumber'])
        self.assertEqual(resource_count, expected_resource_count, 'Initial resource count should match with the expected resource count')
        self.debug(('Stopping instance: %s' % vm.name))
        try:
            vm.stop(self.apiclient)
        except Exception as e:
            self.fail(('Failed to stop instance: %s' % e))
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count_after_stop = account_list[0].cputotal
        self.assertEqual(resource_count, resource_count_after_stop, 'Resource count should be same as before, after stopping the instance')
        self.debug(('Starting instance: %s' % vm.name))
        try:
            vm.start(self.apiclient)
        except Exception as e:
            self.fail(('Failed to start instance: %s' % e))
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count_after_start = account_list[0].cputotal
        self.assertEqual(resource_count_after_stop, resource_count_after_start, 'Resource count should be same as before, after starting the instance')
    return
