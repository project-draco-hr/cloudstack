@attr(tags=['advanced', 'advancedns', 'simulator', 'selfservice'])
def test_04_deploy_multiple_vm_with_multiple_core(self):
    'Test Deploy multiple VM with 4 core CPU & verify the usage'
    self.debug('Creating service offering with 4 CPU cores')
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering'])
    self.cleanup.append(self.service_offering)
    self.debug('Setting up account and domain hierarchy')
    self.setupAccounts()
    users = {self.domain: self.admin, self.child_domain: self.child_do_admin, }
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        api_client = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        self.debug(('Creating an instance with service offering: %s' % self.service_offering.name))
        vm_1 = self.createInstance(service_off=self.service_offering, api_client=api_client)
        vm_2 = self.createInstance(service_off=self.service_offering, api_client=api_client)
        self.createInstance(service_off=self.service_offering, api_client=api_client)
        self.createInstance(service_off=self.service_offering, api_client=api_client)
        self.debug('Deploying instance - CPU capacity is fully utilized')
        with self.assertRaises(Exception):
            self.createInstance(service_off=self.service_offering, api_client=api_client)
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count = account_list[0].cputotal
        expected_resource_count = (int(self.services['service_offering']['cpunumber']) * 4)
        self.assertEqual(resource_count, expected_resource_count, 'Initial resource count should be 4')
        self.debug(('Destroying instance: %s' % vm_1.name))
        try:
            vm_1.delete(self.apiclient)
        except Exception as e:
            self.fail(('Failed to delete instance: %s' % e))
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count_after_delete = account_list[0].cputotal
        expected_resource_count -= int(self.services['service_offering']['cpunumber'])
        self.assertEqual(resource_count_after_delete, expected_resource_count, 'Resource count should match with the expected count')
        host = findSuitableHostForMigration(self.apiclient, vm_2.id)
        if (host is None):
            self.skipTest(ERROR_NO_HOST_FOR_MIGRATION)
        self.debug(('Migrating instance: %s to host: %s' % (vm_2.name, host.name)))
        try:
            vm_2.migrate(self.apiclient, host.id)
        except Exception as e:
            self.fail(('Failed to migrate instance: %s' % e))
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count_after_migrate = account_list[0].cputotal
        self.assertEqual(resource_count_after_migrate, resource_count_after_delete, 'Resource count should not change after migrating the instance')
    return
