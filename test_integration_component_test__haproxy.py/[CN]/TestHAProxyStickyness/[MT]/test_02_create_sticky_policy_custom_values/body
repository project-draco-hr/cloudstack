@attr(tags=['advanced', 'advancedns'], required_hardware='true')
@attr(speed='slow')
def test_02_create_sticky_policy_custom_values(self):
    'Test Configure stickiness policies with custom values'
    lb_methods = ['roundrobin', 'leastconn', 'source']
    configs = {'SourceBased': {'tablesize': '100k', }, }
    for lb_method in lb_methods:
        self.debug(('Creating a load balancing rule on IP %s and algo %s' % (self.public_ip.ipaddress.ipaddress, lb_method)))
        services = self.services['lbrule']
        services['alg'] = lb_method
        lb_rule = self.create_LB_Rule(self.public_ip, network=self.get_Network(self.account), vmarray=[self.virtual_machine, self.virtual_machine_2], services=services)
        for (method, params) in configs.items():
            self.debug(('Creating stickiness policy for the LB rule: %s' % lb_rule.id))
            policies = self.configure_Stickiness_Policy(lb_rule, method=method, paramDict=params)
            policy = policies.stickinesspolicy[0]
            self.debug(('Policy: %s' % str(policy)))
            self.debug('Validating the stickiness policy')
            self.validate_Stickiness_Policy(lb_rule, method, self.public_ip.ipaddress.ipaddress)
            self.debug(('Deleting the stickiness policy for lb rule: %s' % lb_rule.name))
            self.delete_Stickiness_policy(policy, lb_rule)
        self.debug(('Deleting the LB rule: %s' % lb_rule.name))
        lb_rule.delete(self.apiclient)
    return
