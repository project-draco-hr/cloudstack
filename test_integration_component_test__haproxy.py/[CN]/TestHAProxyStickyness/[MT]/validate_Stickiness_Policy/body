def validate_Stickiness_Policy(self, lb_rule, method, publicip):
    'Validates the stickiness policy'
    sticky_policies = lb_rule.listStickyPolicies(self.apiclient, lbruleid=lb_rule.id, listall=True)
    self.assertIsInstance(sticky_policies, list, 'List sticky policies should return a valid list')
    sticky_policy = sticky_policies[0]
    self.debug(('Stickiness policy method: %s' % sticky_policy.stickinesspolicy[0].methodname))
    self.assertEqual(sticky_policy.stickinesspolicy[0].methodname, method, ('Stickiness policy should have method as - %s' % method))
    hostnames = []
    hostnames = self.try_ssh(publicip, hostnames)
    hostnames = self.try_ssh(publicip, hostnames)
    self.debug(('hostnames: %s' % hostnames))
    self.debug(('set(hostnames): %s' % set(hostnames)))
    if (len(hostnames) == len(set(hostnames))):
        raise Exception(('Stickyness policy: %s not working properly, got hostnames %s' % (method, hostnames)))
    return
