@attr(tags=['advanced', 'advancedns'], required_hardware='false')
def test_11_invalid_params(self):
    'Test verfify functionality syncronous and asyncronous validations'
    self.debug(('Creating LB rule for account: %s' % self.account.name))
    lb_rule = self.create_LB_Rule(self.public_ip, network=self.get_Network(self.account), vmarray=[self.virtual_machine, self.virtual_machine_2])
    self.debug('Creating stickiness policy with invalid method')
    with self.assertRaises(Exception):
        self.configure_Stickiness_Policy(lb_rule, method='InvalidMethod')
    self.debug('Creating stickiness policy with invalid params')
    with self.assertRaises(Exception):
        self.configure_Stickiness_Policy(lb_rule, method='LbCookie', params={'Test': 10, })
    self.debug('Passing invalid parameter')
    with self.assertRaises(Exception):
        cmd = createLBStickinessPolicy.createLBStickinessPolicyCmd()
        cmd.lbruleid = lb_rule.id
        cmd.method = 'LbCookie'
        cmd.name = 'LbCookie'
        self.apiclient.createLBStickinessPolicy(cmd)
    self.debug('Creating stickiness policy not passing required param')
    with self.assertRaises(Exception):
        cmd = createLBStickinessPolicy.createLBStickinessPolicyCmd()
        cmd.lbruleid = lb_rule.id
        cmd.name = 'LbCookie'
        self.apiclient.createLBStickinessPolicy(cmd)
    return
