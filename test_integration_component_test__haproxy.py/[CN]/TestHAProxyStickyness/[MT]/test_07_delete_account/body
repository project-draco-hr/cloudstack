@attr(tags=['advanced', 'advancedns'], required_hardware='true')
def test_07_delete_account(self):
    'Test Delete account  and check the router and its rules'
    self.debug(('Creating LB rule for account: %s' % self.account.name))
    lb_rule = self.create_LB_Rule(self.public_ip, network=self.get_Network(self.account), vmarray=[self.virtual_machine, self.virtual_machine_2])
    policies = self.configure_Stickiness_Policy(lb_rule, method='SourceBased')
    policy = policies.stickinesspolicy[0]
    self.debug(('Policy: %s' % str(policy)))
    self.debug('Validating the stickiness policy')
    self.validate_Stickiness_Policy(lb_rule, 'SourceBased', self.public_ip.ipaddress.ipaddress)
    self.cleanup.pop()
    self.debug(('Deleting account: %s' % self.account.name))
    try:
        self.account.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete account: %s' % e))
    self.debug('Checking the response of liststickiness policies')
    with self.assertRaises(Exception):
        lb_rule.listStickyPolicies(self.apiclient, lbruleid=lb_rule.id, listall=True)
    return
