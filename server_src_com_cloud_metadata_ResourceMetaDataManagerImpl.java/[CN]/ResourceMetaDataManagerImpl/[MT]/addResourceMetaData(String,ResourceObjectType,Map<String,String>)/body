{
  return Transaction.execute(new TransactionCallback<Boolean>(){
    @Override public Boolean doInTransaction(    TransactionStatus status){
      for (      String key : details.keySet()) {
        long id=_taggedResourceMgr.getResourceId(resourceId,resourceType);
        String value=details.get(key);
        if (value == null || value.isEmpty()) {
          throw new InvalidParameterValueException("Value for the key " + key + " is either null or empty");
        }
        DetailDaoHelper newDetailDaoHelper=new DetailDaoHelper(resourceType);
        ResourceDetail detail=null;
        if (resourceType == ResourceObjectType.Volume) {
          detail=new VolumeDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.Nic) {
          detail=new NicDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.Zone) {
          detail=new DataCenterDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.Network) {
          detail=new NetworkDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.UserVm) {
          detail=new UserVmDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.Template) {
          detail=new VMTemplateDetailVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.ServiceOffering) {
          detail=new ServiceOfferingDetailsVO(id,key,value);
        }
 else         if (resourceType == ResourceObjectType.Storage) {
          detail=new StoragePoolDetailVO(id,key,value);
        }
 else {
          throw new UnsupportedOperationException("ResourceType " + resourceType + " doesn't support metadata");
        }
        newDetailDaoHelper.addDetail(detail);
      }
      return true;
    }
  }
);
}
