@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_01_list_instances_pagination(self):
    '  \n        @Desc: Test List Instances pagination\n        @Steps:\n        Step1: Listing all the Instances for a user\n        Step2: Verifying listed Instances for account created at class level\n        Step3: If number of volumes is less than (page size + 1), then creating them\n        Step4: Listing all the volumes again after creation of volumes\n        Step5: Verifying the length of the volumes is (page size + 1)\n        Step6: Listing all the volumes in page1\n        Step7: Verifying that the length of the volumes in page 1 is (page size)\n        Step8: Listing all the volumes in page2\n        Step9: Verifying that the length of the volumes in page 2 is 1\n        Step10: Deleting the volume present in page 2\n        Step11: Listing for the volumes on page 2\n        Step12: Verifying that there are no volumes present in page 2\n        '
    list_instances_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_instances_before, 'Virtual Machine already exists for newly created user')
    for i in range(0, (self.services['pagesize'] + 1)):
        vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
        self.assertIsNotNone(vm_created, 'VM creation failed')
        if (i < self.services['pagesize']):
            self.cleanup.append(vm_created)
        self.assertEqual(self.services['virtual_machine']['displayname'], vm_created.displayname, 'Newly created VM name and the test data VM name are not matching')
    list_instances_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_instances_after)
    self.assertEquals(PASS, status[0], 'Listing of instances after creation failed')
    self.assertEqual(len(list_instances_after), (self.services['pagesize'] + 1), 'Number of instances created is not matching as expected')
    list_instances_page1 = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    status = validateList(list_instances_page1)
    self.assertEquals(PASS, status[0], 'Listing of instances in page1 failed')
    self.assertEqual(self.services['pagesize'], len(list_instances_page1), 'List VM response is not matching with the page size length for page 1')
    list_instances_page2 = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    status = validateList(list_instances_page2)
    self.assertEquals(PASS, status[0], 'Listing of instances in page2 failed')
    self.assertEqual(1, len(list_instances_page2), 'List VM response is not matching with the page size length for page 2')
    instance_page2 = list_instances_page2[0]
    for i in range(0, len(list_instances_page1)):
        instance_page1 = list_instances_page1[i]
        self.assertNotEquals(instance_page2.id, instance_page1.id, 'VM listed in page 2 is also listed in page 1')
    VirtualMachine.delete(vm_created, self.userapiclient, expunge=True)
    list_instance_response = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=2, pagesize=self.services['pagesize'], domainid=self.account.domainid)
    self.assertEqual(list_instance_response, None, 'VM was not deleted')
    return
