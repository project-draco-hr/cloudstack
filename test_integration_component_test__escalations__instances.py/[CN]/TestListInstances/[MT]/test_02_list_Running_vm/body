@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_02_list_Running_vm(self):
    "  \n        @Desc: Test List Running VM's\n        @Steps:\n        Step1: Listing all the Running VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a VM\n        Step4: Listing all the Running VMs for a user again\n        Step5: Verifying that the size of the list is increased by 1\n        Step6: Verifying that the details of the Running VM listed are same as the VM deployed in Step3\n        "
    list_running_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, state='Running')
    self.assertIsNone(list_running_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_running_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, state='Running')
    status = validateList(list_running_vms_after)
    self.assertEquals(PASS, status[0], 'Newly created VM is not in Running state')
    self.assertEquals(1, len(list_running_vms_after), 'Running VM list count is not matching')
    running_vm = list_running_vms_after[0]
    expected_dict = {'id': vm_created.id, 'name': vm_created.name, 'displayname': vm_created.displayname, 'state': 'Running', 'zoneid': vm_created.zoneid, 'account': vm_created.account, 'template': vm_created.templateid, }
    actual_dict = {'id': running_vm.id, 'name': running_vm.name, 'displayname': running_vm.displayname, 'state': running_vm.state, 'zoneid': running_vm.zoneid, 'account': running_vm.account, 'template': running_vm.templateid, }
    running_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, running_vm_status, 'Listed Running VM details are not as expected')
    return
