@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_04_list_Destroyed_vm(self):
    "\n        @Desc: Test List Destroyed VM's\n        @Steps:\n        Step1: Listing all the Destroyed VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a VM\n        Step4: Destroyed the VM deployed in step3\n        Step5: Listing all the Destroyed VMs for a user again\n        Step6: Verifying that destroyed VM is not listed for User\n        Step7: Listing all the destroyed VMs as admin\n        Step8: Verifying that the size of the list is 1\n        Step9: Verifying that the details of the Destroyed VM listed are same as the VM destroyed in Step4\n        "
    list_destroyed_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, state='Destroyed')
    self.assertIsNone(list_destroyed_vms_before, 'Virtual Machine in Destroyed state already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    VirtualMachine.delete(vm_created, self.userapiclient, expunge=False)
    list_destroyed_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, state='Destroyed')
    self.assertIsNone(list_destroyed_vms_after, 'Destroyed VM is not in destroyed state')
    list_destroyed_vms_admin = VirtualMachine.list(self.apiClient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, state='Destroyed', id=vm_created.id)
    status = validateList(list_destroyed_vms_admin)
    self.assertEquals(PASS, status[0], 'Destroyed VM is not in Destroyed state')
    self.assertEquals(1, len(list_destroyed_vms_admin), 'Destroyed VM list count is not matching')
    destroyed_vm = list_destroyed_vms_admin[0]
    expected_dict = {'id': vm_created.id, 'name': vm_created.name, 'displayname': vm_created.displayname, 'state': 'Destroyed', 'zoneid': vm_created.zoneid, 'account': vm_created.account, 'template': vm_created.templateid, }
    actual_dict = {'id': destroyed_vm.id, 'name': destroyed_vm.name, 'displayname': destroyed_vm.displayname, 'state': destroyed_vm.state, 'zoneid': destroyed_vm.zoneid, 'account': destroyed_vm.account, 'template': destroyed_vm.templateid, }
    destroyed_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, destroyed_vm_status, 'Listed Destroyed VM details are not as expected')
    return
