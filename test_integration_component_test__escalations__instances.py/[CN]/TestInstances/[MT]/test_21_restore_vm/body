@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_21_restore_vm(self):
    "\n        @Desc: Test to verify Restore VM\n        @Steps:\n        Step1: List all the VM's for a user\n        Step2: Deploy a VM with all parameters\n        Step3: Listing all the VM's again for the user\n        Step4: Verifying that list size is increased by 1\n        Step5: Restoring the VM deployed in step2\n        Step6: Verifying that restored VM details are same as the VM deployed in step2\n        "
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    restored_vm = vm_created.restore(self.userapiclient)
    self.assertIsNotNone(restored_vm, 'VM restore failed')
    expected_dict = {'id': vm_created.id, 'name': vm_created.name, 'displayname': vm_created.displayname, 'state': vm_created.state, 'zoneid': vm_created.zoneid, 'account': vm_created.account, 'template': vm_created.templateid, }
    actual_dict = {'id': restored_vm.id, 'name': restored_vm.name, 'displayname': restored_vm.displayname, 'state': restored_vm.state, 'zoneid': restored_vm.zoneid, 'account': restored_vm.account, 'template': restored_vm.templateid, }
    restored_vm_status = self.__verify_values(expected_dict, actual_dict)
    self.assertEqual(True, restored_vm_status, 'Restored VM details are not as expected')
    return
