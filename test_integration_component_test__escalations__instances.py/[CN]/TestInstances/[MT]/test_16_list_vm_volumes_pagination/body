@attr(tags=['advanced', 'basic', 'selfservice'])
def test_16_list_vm_volumes_pagination(self):
    '\n        @Desc: Test to verify pagination of Volumes for a VM\n        @Steps:\n        Step1: Deploying a VM\n        Step2: Listing all the Volumes of the VM deployed in Step 1\n        Step3: Verifying that the list size is 1\n        Step4: Creating page size number of volumes\n        Step5: Attaching all the volumes created in step4 to VM deployed in Step1\n        Step6: Listing all the Volumes for the VM in step1\n        Step7: Verifying that the list size is equal to page size + 1\n        Step8: Listing all the volumes of VM in page 1\n        Step9: Verifying that the list size is equal to page size\n        Step10: Listing all the Volumes in Page 2\n        Step11: Verifying that the list size is 1\n        Step12: Detaching the volume from the VM\n        Step13: Listing all the Volumes in Page 2\n        Step14: Verifying that list size is 0\n        '
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    list_volumes_before = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    status = validateList(list_volumes_before)
    self.assertEquals(PASS, status[0], 'Root volume is not created for VM deployed')
    self.assertEquals(1, len(list_volumes_before), 'Volumes count is not matching')
    for i in range(0, self.services['pagesize']):
        volume_created = Volume.create(self.userapiclient, self.services['volume'], zoneid=self.zone.id, diskofferingid=self.disk_offering.id)
        self.assertIsNotNone(volume_created, 'Volume is not created')
        self.cleanup.append(volume_created)
        vm_created.attach_volume(self.userapiclient, volume_created)
    list_volumes_after = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    status = validateList(list_volumes_after)
    self.assertEquals(PASS, status[0], 'Volumes are not listed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_volumes_after), "VM's volume count is not matching")
    list_volumes_page1 = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=1, pagesize=self.services['pagesize'])
    status = validateList(list_volumes_page1)
    self.assertEquals(PASS, status[0], 'Volumes not listed in page1')
    self.assertEquals(self.services['pagesize'], len(list_volumes_page1), "VM's volume count is not matching in page 1")
    list_volumes_page2 = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=2, pagesize=self.services['pagesize'])
    status = validateList(list_volumes_page2)
    self.assertEquals(PASS, status[0], 'Volumes not listed in page2')
    self.assertEquals(1, len(list_volumes_page2), "VM's volume count is not matching in page 1")
    vm_created.detach_volume(self.userapiclient, volume_created)
    list_volumes_page2 = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_volumes_page2, 'Volumes listed in page 2')
    list_volumes_page1 = Volume.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=1, pagesize=self.services['pagesize'])
    status = validateList(list_volumes_page1)
    self.assertEquals(PASS, status[0], 'Volumes not listed in page1')
    self.assertEquals(self.services['pagesize'], len(list_volumes_page1), "VM's volume count is not matching in page 1")
    vm_created.stop(self.userapiclient)
    for i in range(0, len(list_volumes_page1)):
        vm_created.detach_volume(self.userapiclient, list_volumes_page1[i])
    return
