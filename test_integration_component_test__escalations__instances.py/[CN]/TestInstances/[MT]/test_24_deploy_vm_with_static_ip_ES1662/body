@attr(tags=['advanced'], required_hardware='false')
def test_24_deploy_vm_with_static_ip_ES1662(self):
    '\n        @Desc: Test to verify deploy VM with static ip address assignment\n        @Steps:\n        Step1: Create a network for the user\n        Step2: List the network and check that it is created for the user\n        Step3: Deploy vm with ip address in the above network\n        Step4: List the vm and verify the ip address in the response\n        '
    network_offerings_list = NetworkOffering.list(self.apiClient, forvpc='false', guestiptype='Isolated', state='Enabled', supportedservices='SourceNat', zoneid=self.zone.id)
    status = validateList(network_offerings_list)
    self.assertEquals(PASS, status[0], 'Isolated Network Offerings with sourceNat enabled are not found')
    '\n        Create Isolated netwrok with ip range\n        '
    self.services['network']['startip'] = '10.1.1.2'
    self.services['network']['endip'] = '10.1.1.254'
    self.services['network']['gateway'] = '10.1.1.1'
    self.services['network']['netmask'] = '255.255.255.0'
    vm_ip = '10.1.1.10'
    '\n        Creating isolated/guest network with ip range\n        '
    network = Network.create(self.userapiclient, self.services['network'], accountid=self.account.name, domainid=self.domain.id, networkofferingid=network_offerings_list[0].id, zoneid=self.zone.id)
    self.assertIsNotNone(network, 'Network creation failed')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, networkids=network.id, ipaddress=vm_ip, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(network)
    vm_response = VirtualMachine.list(self.userapiclient, id=vm_created.id)
    status = validateList(vm_response)
    self.assertEquals(PASS, status[0], 'vm list returned invalid response')
    self.assertEquals(1, len(vm_response), 'VM list count is not matching')
    vm_nics = vm_created.nic
    status = validateList(vm_nics)
    self.assertEquals(PASS, status[0], 'vm list returned invalid response for vm nics')
    self.assertEquals(1, len(vm_nics), 'VM is created with more than one nic which is not expected')
    '\n        Verifying that NIC IP address is as expected\n        '
    self.assertEquals(str(vm_nics[0].ipaddress), vm_ip, 'VM is not created with static ip address used in vm deployment')
    try:
        vm_created.delete(self.apiClient, expunge=True)
    except Exception as e:
        raise Exception(('Warning: Exception in expunging vm : %s' % e))
    return
