@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_14_vm_snapshot_pagination(self):
    '\n        @Desc: Test VM Snapshots pagination.\n        @Steps:\n        Step1: Deploying a VM\n        Step2: Listing all the Snapshots of the VM deployed in Step 1\n        Step3: Verifying that the list size is 0\n        Step4: Creating (pagesize + 1) number of Snapshots for the VM\n        Step5: Listing all the Snapshots of the VM deployed in Step 1\n        Step6: Verifying that the list size is (pagesize + 1)\n        Step7: Listing all the VM snapshots in Page 1 with page size\n        Step8: Verifying that size of the list is same as page size\n        Step9: Listing all the VM snapshots in Page 2 with page size\n        Step10: Verifying that size of the list is 1\n        Step11: Deleting VM snapshot in page 2\n        Step12: Listing all the VM snapshots in Page 2 with page size\n        Step13: Verifying that size of the list is 0\n        '
    if (self.hypervisor.lower() == 'kvm'):
        raise unittest.SkipTest('VM Snapshot is not supported on KVM. Hence, skipping the test')
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    list_snapshots_before = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    self.assertIsNone(list_snapshots_before, 'Snapshots already exists for newly created VM')
    for i in range(0, (self.services['pagesize'] + 1)):
        snapshot_created = VmSnapshot.create(self.userapiclient, vm_created.id)
        self.assertIsNotNone(snapshot_created, 'Snapshot creation failed')
    list_snapshots_after = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    status = validateList(list_snapshots_after)
    self.assertEquals(PASS, status[0], 'VM Snapshots creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_snapshots_after), 'Count of VM Snapshots is not matching')
    list_snapshots_page1 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=1, pagesize=self.services['pagesize'])
    status = validateList(list_snapshots_page1)
    self.assertEquals(PASS, status[0], 'Listing of VM Snapshots failed in page 1')
    self.assertEquals(self.services['pagesize'], len(list_snapshots_page1), 'List VM Snapshot count is not matching in page 1')
    list_snapshots_page2 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=2, pagesize=self.services['pagesize'])
    status = validateList(list_snapshots_page2)
    self.assertEquals(PASS, status[0], 'Listing of VM Snapshots failed in page 2')
    self.assertEquals(1, len(list_snapshots_page2), 'List VM Snapshot count is not matching in page 2')
    VmSnapshot.deleteVMSnapshot(self.userapiclient, snapshot_created.id)
    list_snapshots_page2 = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id, page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_snapshots_page2, 'VM Snapshots exists in page 2')
    return
