@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_13_attach_detach_iso(self):
    "\n        @Desc: Test Attach ISO to VM and Detach ISO from VM.\n        @Steps:\n        Step1: Listing all the VMs for a user\n        Step2: Verifying that the size of the list is 0\n        Step3: Deploying a VM\n        Step4: Listing all the VMs for a user again\n        Step5: Verifying that list size is increased by 1\n        Step6: Listing all the ready ISO's\n        Step7: If size of the list is >= 1 continuing to next steps\n        Step8: Attaching the ISO listed to VM deployed in Step3\n        Step9: Verifying that the attached ISO details are associated with VM\n        Step10: Detaching the ISO attached in step8\n        Step11: Verifying that detached ISO details are not associated with VM\n        "
    if (self.hypervisor.lower() in ['kvm', 'hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor. Hence,                        skipping the test')
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, zoneid=self.zone.id, account=self.account.name)
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    self.cleanup.append(vm_created)
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'], page=1, pagesize=self.services['pagesize'], domainid=self.account.domainid, zoneid=self.zone.id, account=self.account.name)
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    isos_list = Iso.list(self.userapiclient, isready='true', isofilter='executable', zoneid=self.zone.id)
    self.assertEqual(validateList(isos_list)[0], PASS, 'isos list validation failed')
    if (self.hypervisor.lower() == 'xenserver'):
        isoDesc = 'xen'
    else:
        isoDesc = 'vmware'
    validIsosToAttach = [iso for iso in isos_list if (isoDesc in iso.displaytext.lower())]
    if (not validIsosToAttach):
        self.skipTest('Valid ISO not present in setup suitable to attach to VM')
    iso_toattach = validIsosToAttach[0]
    VirtualMachine.attach_iso(vm_created, self.userapiclient, iso_toattach)
    list_vm = VirtualMachine.list(self.userapiclient, id=vm_created.id)
    status = validateList(list_vm)
    self.assertEquals(PASS, status[0], 'VM listing by Id failed')
    self.assertEquals(iso_toattach.name, list_vm[0].isoname, 'Attached ISO name is not matching')
    self.assertEquals(iso_toattach.displaytext, list_vm[0].isodisplaytext, 'Attached ISO display is not matching')
    VirtualMachine.detach_iso(vm_created, self.userapiclient)
    list_vm = VirtualMachine.list(self.userapiclient, id=vm_created.id)
    status = validateList(list_vm)
    self.assertEquals(PASS, status[0], 'VM listing by Id failed')
    self.assertIsNone(list_vm[0].isoname, 'ISO not detached from VM')
    return
