@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_15_revert_vm_to_snapshot(self):
    '\n        @Desc: Test Revert VM to Snapshot functionality.\n        @Steps:\n        Step1: Deploying a VM\n        Step2: Listing all the Snapshots of the VM deployed in Step 1\n        Step3: Verifying that the list size is 0\n        Step4: Creating 2 Snapshots for the VM\n        Step5: Listing all the Snapshots of the VM deployed in Step 1\n        Step6: Verifying that the list size is 2\n        Step7: Verifying that only 1 snapshot is have current flag set to True\n        Step8: Verifying that the VM snapshot with current flag set as true is\n               the latest snapshot created\n        Step9: Reverting VM to snapshot having current flag as false\n               (non current snapshot)\n        Step10: Verifying that only 1 VM snapshot is having current\n                flag set as true.\n        Step11: Verifying that the VM Snapshot with current flag set to true\n                is the reverted snapshot in Step 8\n        '
    if (self.hypervisor.lower() in ['kvm', 'hyperv']):
        raise unittest.SkipTest('This feature is not supported on existing hypervisor.                        Hence, skipping the test')
    list_vms_before = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    self.assertIsNone(list_vms_before, 'Virtual Machine already exists for newly created user')
    vm_created = VirtualMachine.create(self.userapiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id)
    self.assertIsNotNone(vm_created, 'VM creation failed')
    list_vms_after = VirtualMachine.list(self.userapiclient, listall=self.services['listall'])
    status = validateList(list_vms_after)
    self.assertEquals(PASS, status[0], 'VM creation failed')
    self.assertEquals(1, len(list_vms_after), 'VM list count is not matching')
    list_snapshots_before = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    self.assertIsNone(list_snapshots_before, 'Snapshots already exists for newly created VM')
    snapshot1 = VmSnapshot.create(self.userapiclient, vm_created.id, snapshotmemory=True)
    self.assertIsNotNone(snapshot1, 'Snapshot creation failed')
    snapshot2 = VmSnapshot.create(self.userapiclient, vm_created.id, snapshotmemory=True)
    self.assertIsNotNone(snapshot2, 'Snapshot creation failed')
    list_snapshots_after = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    status = validateList(list_snapshots_after)
    self.assertEquals(PASS, status[0], 'VM Snapshots creation failed')
    self.assertEquals(2, len(list_snapshots_after), 'Count of VM Snapshots is not matching')
    current_count = 0
    for i in range(0, len(list_snapshots_after)):
        if (list_snapshots_after[i].current is True):
            current_count = (current_count + 1)
            current_snapshot = list_snapshots_after[i]
    self.assertEquals(1, current_count, 'count of VM Snapshot with current flag as true is not matching')
    self.assertEquals(snapshot2.id, current_snapshot.id, 'Latest snapshot taken is not marked as current')
    vm_created.stop(self.userapiclient)
    VmSnapshot.revertToSnapshot(self.userapiclient, snapshot1.id)
    list_snapshots_after = VmSnapshot.list(self.userapiclient, listall=self.services['listall'], virtualmachineid=vm_created.id)
    status = validateList(list_snapshots_after)
    self.assertEquals(PASS, status[0], 'VM Snapshots creation failed')
    self.assertEquals(2, len(list_snapshots_after), 'Count of VM Snapshots is not matching')
    current_count = 0
    for i in range(0, len(list_snapshots_after)):
        if (list_snapshots_after[i].current is True):
            current_count = (current_count + 1)
            current_snapshot = list_snapshots_after[i]
    self.assertEquals(1, current_count, 'count of VM Snapshot with current flag as true is not matching')
    self.assertEquals(snapshot1.id, current_snapshot.id, 'Current flag was set properly after reverting the VM to snapshot')
    return
