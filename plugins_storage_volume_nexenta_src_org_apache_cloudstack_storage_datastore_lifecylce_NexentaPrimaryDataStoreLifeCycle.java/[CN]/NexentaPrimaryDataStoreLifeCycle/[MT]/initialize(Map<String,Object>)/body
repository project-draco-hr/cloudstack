{
  String url=(String)dsInfos.get("url");
  Long zoneId=(Long)dsInfos.get("zoneId");
  String storagePoolName=(String)dsInfos.get("name");
  String providerName=(String)dsInfos.get("providerName");
  Long capacityBytes=(Long)dsInfos.get("capacityBytes");
  Long capacityIops=(Long)dsInfos.get("capacityIops");
  String tags=(String)dsInfos.get("tags");
  Map<String,String> details=(Map<String,String>)dsInfos.get("details");
  NexentaUtil.NexentaPluginParameters params=NexentaUtil.parseNexentaPluginUrl(url);
  DataCenterVO zone=zoneDao.findById(zoneId);
  String uuid=String.format("%s_%s_%s",NexentaUtil.PROVIDER_NAME,zone.getUuid(),params.getNmsUrl().getHost());
  if (capacityBytes == null || capacityBytes <= 0) {
    throw new IllegalArgumentException("'capacityBytes' must be present and greater than 0.");
  }
  if (capacityIops == null || capacityIops <= 0) {
    throw new IllegalArgumentException("'capacityIops' must be present and greater than 0.");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  parameters.setHost(params.getStorageHost());
  parameters.setPort(params.getStoragePort());
  parameters.setPath(params.getStoragePath());
  parameters.setType(params.getStorageType());
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setName(storagePoolName);
  parameters.setProviderName(providerName);
  parameters.setManaged(true);
  parameters.setCapacityBytes(capacityBytes);
  parameters.setUsedBytes(0);
  parameters.setCapacityIops(capacityIops);
  parameters.setHypervisorType(Hypervisor.HypervisorType.Any);
  parameters.setTags(tags);
  details.put(NexentaUtil.NMS_URL,params.getNmsUrl().toString());
  details.put(NexentaUtil.VOLUME,params.getVolume());
  details.put(NexentaUtil.SPARSE_VOLUMES,params.getSparseVolumes().toString());
  details.put(NexentaUtil.STORAGE_TYPE,params.getStorageType().toString());
  details.put(NexentaUtil.STORAGE_HOST,params.getStorageHost());
  details.put(NexentaUtil.STORAGE_PORT,params.getStoragePort().toString());
  details.put(NexentaUtil.STORAGE_PATH,params.getStoragePath());
  parameters.setDetails(details);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}
