def __init__(self):
    self.isAsync = 'true'
    'load balancer algorithm (source, roundrobin, leastconn)'
    'Required'
    self.algorithm = None
    'name of the load balancer rule'
    'Required'
    self.name = None
    'the private port of the private ip address/virtual machine where the network traffic will be load balanced to'
    'Required'
    self.privateport = None
    'the public port from where the network traffic will be load balanced from'
    'Required'
    self.publicport = None
    'the account associated with the load balancer. Must be used with the domainId parameter.'
    self.account = None
    'the cidr list to forward traffic from'
    self.cidrlist = []
    'the description of the load balancer rule'
    self.description = None
    'the domain ID associated with the load balancer'
    self.domainid = None
    'The guest network this rule will be created for. Required when public Ip address is not associated with any Guest network yet (VPC case)'
    self.networkid = None
    'if true, firewall rule for source/end pubic port is automatically created; if false - firewall rule has to be created explicitely. If not specified 1) defaulted to false when LB rule is being created for VPC guest network 2) in all other cases defaulted to true'
    self.openfirewall = None
    'public ip address id from where the network traffic will be load balanced from'
    self.publicipid = None
    'zone where the load balancer is going to be created. This parameter is required when LB service provider is ElasticLoadBalancerVm'
    self.zoneid = None
    self.required = ['algorithm', 'name', 'privateport', 'publicport']
