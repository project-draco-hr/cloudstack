@classmethod
def setUpClass(cls):
    testClient = super(TestCreateTemplate, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls._cleanup = []
    cls.services = testClient.getParsedTestDataConfig()
    cls.unsupportedHypervisor = False
    cls.hypervisor = testClient.getHypervisorInfo()
    if (cls.hypervisor.lower() in ['lxc']):
        cls.unsupportedHypervisor = True
        return
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.services['mode'] = cls.zone.networktype
    try:
        cls.disk_offering = DiskOffering.create(cls.apiclient, cls.services['disk_offering'])
        cls._cleanup.append(cls.disk_offering)
        template = get_template(cls.apiclient, cls.zone.id, cls.services['ostype'])
        if (template == FAILED):
            assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
        cls.services['template']['ostypeid'] = template.ostypeid
        cls.services['template_2']['ostypeid'] = template.ostypeid
        cls.services['ostypeid'] = template.ostypeid
        cls.services['virtual_machine']['zoneid'] = cls.zone.id
        cls.services['volume']['diskoffering'] = cls.disk_offering.id
        cls.services['volume']['zoneid'] = cls.zone.id
        cls.services['sourcezoneid'] = cls.zone.id
        cls.account = Account.create(cls.apiclient, cls.services['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.services['service_offerings']['tiny'])
        cls._cleanup.append(cls.service_offering)
        cls.virtual_machine = VirtualMachine.create(cls.apiclient, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
        cls.virtual_machine.stop(cls.apiclient)
        list_volume = Volume.list(cls.apiclient, virtualmachineid=cls.virtual_machine.id, type='ROOT', listall=True)
        cls.volume = list_volume[0]
    except Exception as e:
        cls.tearDownClass()
        raise unittest.SkipTest(('Exception in setUpClass: %s' % e))
    return
