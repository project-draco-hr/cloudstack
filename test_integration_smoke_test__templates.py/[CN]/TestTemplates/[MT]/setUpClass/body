@classmethod
def setUpClass(cls):
    cls.services = Services().services
    cls.api_client = super(TestTemplates, cls).getClsTestClient().getApiClient()
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.disk_offering = DiskOffering.create(cls.api_client, cls.services['disk_offering'])
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostypeid'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['volume']['diskoffering'] = cls.disk_offering.id
    cls.services['volume']['zoneid'] = cls.zone.id
    cls.services['template_2']['zoneid'] = cls.zone.id
    cls.services['sourcezoneid'] = cls.zone.id
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.user = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id)
    cls.services['account'] = cls.account.account.name
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['virtual_machine'], templateid=template.id, accountid=cls.account.account.name, domainid=cls.account.account.domainid, serviceofferingid=cls.service_offering.id, mode=cls.services['mode'])
    cls.virtual_machine.stop(cls.api_client)
    timeout = cls.services['timeout']
    while True:
        time.sleep(cls.services['sleep'])
        list_vm_response = list_virtual_machines(cls.api_client, id=cls.virtual_machine.id)
        if isinstance(list_vm_response, list):
            vm = list_vm_response[0]
            if (vm.state == 'Stopped'):
                break
        if (timeout == 0):
            raise Exception(('Failed to stop VM (ID: %s) in change service offering' % vm.id))
        timeout = (timeout - 1)
    list_volume = list_volumes(cls.api_client, virtualmachineid=cls.virtual_machine.id, type='ROOT', listall=True)
    try:
        cls.volume = list_volume[0]
    except Exception as e:
        raise Exception(('Exception: Unable to find root volume foe VM: %s' % cls.virtual_machine.id))
    cls.template_1 = Template.create(cls.api_client, cls.services['template_1'], cls.volume.id, account=cls.account.account.name, domainid=cls.account.account.domainid)
    cls.template_2 = Template.create(cls.api_client, cls.services['template_2'], cls.volume.id, account=cls.account.account.name, domainid=cls.account.account.domainid)
    cls._cleanup = [cls.service_offering, cls.disk_offering, cls.account, cls.user]
