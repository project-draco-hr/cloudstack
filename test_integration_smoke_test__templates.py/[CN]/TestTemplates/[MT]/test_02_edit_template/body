def test_02_edit_template(self):
    'Test Edit template\n        '
    new_displayText = random_gen()
    new_name = random_gen()
    cmd = updateTemplate.updateTemplateCmd()
    cmd.id = self.template_1.id
    cmd.displaytext = new_displayText
    cmd.name = new_name
    cmd.bootable = self.services['bootable']
    cmd.passwordenabled = self.services['passwordenabled']
    self.apiclient.updateTemplate(cmd)
    self.debug(('Edited template with new name: %s' % new_name))
    time.sleep(self.services['sleep'])
    timeout = self.services['timeout']
    while True:
        list_template_response = list_templates(self.apiclient, templatefilter=self.services['templatefilter'], id=self.template_1.id, account=self.account.account.name, domainid=self.account.account.domainid)
        if isinstance(list_template_response, list):
            break
        elif (timeout == 0):
            raise Exception('List Template failed!')
        time.sleep(10)
        timeout = (timeout - 1)
    self.assertEqual(isinstance(list_template_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_template_response), 0, 'Check template available in List Templates')
    template_response = list_template_response[0]
    self.debug(('New Name: %s' % new_displayText))
    self.debug(('Name in Template response: %s' % template_response.displaytext))
    self.assertEqual(template_response.displaytext, new_displayText, 'Check display text of updated template')
    self.assertEqual(template_response.name, new_name, 'Check name of updated template')
    self.assertEqual(str(template_response.passwordenabled).lower(), str(self.services['passwordenabled']).lower(), 'Check passwordenabled field of updated template')
    self.assertEqual(template_response.ostypeid, self.services['ostypeid'], 'Check OSTypeID of updated template')
    return
