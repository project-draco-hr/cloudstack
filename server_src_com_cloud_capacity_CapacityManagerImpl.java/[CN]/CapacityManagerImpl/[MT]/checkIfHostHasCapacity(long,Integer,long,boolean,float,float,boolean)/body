{
  boolean hasCapacity=false;
  if (logger.isDebugEnabled()) {
    logger.debug("Checking if host: " + hostId + " has enough capacity for requested CPU: "+ cpu+ " and requested RAM: "+ ram+ " , cpuOverprovisioningFactor: "+ cpuOvercommitRatio);
  }
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(hostId,Capacity.CAPACITY_TYPE_CPU);
  CapacityVO capacityMem=_capacityDao.findByHostIdType(hostId,Capacity.CAPACITY_TYPE_MEMORY);
  if (capacityCpu == null || capacityMem == null) {
    if (capacityCpu == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Cannot checkIfHostHasCapacity, Capacity entry for CPU not found in Db, for hostId: " + hostId);
      }
    }
    if (capacityMem == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Cannot checkIfHostHasCapacity, Capacity entry for RAM not found in Db, for hostId: " + hostId);
      }
    }
    return false;
  }
  long usedCpu=capacityCpu.getUsedCapacity();
  long usedMem=capacityMem.getUsedCapacity();
  long reservedCpu=capacityCpu.getReservedCapacity();
  long reservedMem=capacityMem.getReservedCapacity();
  long actualTotalCpu=capacityCpu.getTotalCapacity();
  long actualTotalMem=capacityMem.getTotalCapacity();
  long totalCpu=(long)(actualTotalCpu * cpuOvercommitRatio);
  long totalMem=(long)(actualTotalMem * memoryOvercommitRatio);
  if (logger.isDebugEnabled()) {
    logger.debug("Hosts's actual total CPU: " + actualTotalCpu + " and CPU after applying overprovisioning: "+ totalCpu);
  }
  String failureReason="";
  if (checkFromReservedCapacity) {
    long freeCpu=reservedCpu;
    long freeMem=reservedMem;
    if (logger.isDebugEnabled()) {
      logger.debug("We need to allocate to the last host again, so checking if there is enough reserved capacity");
      logger.debug("Reserved CPU: " + freeCpu + " , Requested CPU: "+ cpu);
      logger.debug("Reserved RAM: " + freeMem + " , Requested RAM: "+ ram);
    }
    if (reservedCpu >= cpu) {
      if (reservedMem >= ram) {
        hasCapacity=true;
      }
 else {
        failureReason="Host does not have enough reserved RAM available";
      }
    }
 else {
      failureReason="Host does not have enough reserved CPU available";
    }
  }
 else {
    long reservedCpuValueToUse=reservedCpu;
    long reservedMemValueToUse=reservedMem;
    if (!considerReservedCapacity) {
      if (logger.isDebugEnabled()) {
        logger.debug("considerReservedCapacity is" + considerReservedCapacity + " , not considering reserved capacity for calculating free capacity");
      }
      reservedCpuValueToUse=0;
      reservedMemValueToUse=0;
    }
    long freeCpu=totalCpu - (reservedCpuValueToUse + usedCpu);
    long freeMem=totalMem - (reservedMemValueToUse + usedMem);
    if (logger.isDebugEnabled()) {
      logger.debug("Free CPU: " + freeCpu + " , Requested CPU: "+ cpu);
      logger.debug("Free RAM: " + freeMem + " , Requested RAM: "+ ram);
    }
    if ((reservedCpuValueToUse + usedCpu + cpu <= totalCpu)) {
      if ((reservedMemValueToUse + usedMem + ram <= totalMem)) {
        hasCapacity=true;
      }
 else {
        failureReason="Host does not have enough RAM available";
      }
    }
 else {
      failureReason="Host does not have enough CPU available";
    }
  }
  if (hasCapacity) {
    if (logger.isDebugEnabled()) {
      logger.debug("Host has enough CPU and RAM available");
    }
    logger.debug("STATS: Can alloc CPU from host: " + hostId + ", used: "+ usedCpu+ ", reserved: "+ reservedCpu+ ", actual total: "+ actualTotalCpu+ ", total with overprovisioning: "+ totalCpu+ "; requested cpu:"+ cpu+ ",alloc_from_last_host?:"+ checkFromReservedCapacity+ " ,considerReservedCapacity?: "+ considerReservedCapacity);
    logger.debug("STATS: Can alloc MEM from host: " + hostId + ", used: "+ usedMem+ ", reserved: "+ reservedMem+ ", total: "+ totalMem+ "; requested mem: "+ ram+ ",alloc_from_last_host?:"+ checkFromReservedCapacity+ " ,considerReservedCapacity?: "+ considerReservedCapacity);
  }
 else {
    if (checkFromReservedCapacity) {
      logger.debug("STATS: Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", requested cpu: "+ cpu+ ", reservedMem: "+ reservedMem+ ", requested mem: "+ ram);
    }
 else {
      logger.debug("STATS: Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", used cpu: "+ usedCpu+ ", requested cpu: "+ cpu+ ", actual total cpu: "+ actualTotalCpu+ ", total cpu with overprovisioning: "+ totalCpu+ ", reservedMem: "+ reservedMem+ ", used Mem: "+ usedMem+ ", requested mem: "+ ram+ ", total Mem:"+ totalMem+ " ,considerReservedCapacity?: "+ considerReservedCapacity);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(failureReason + ", cannot allocate to this host.");
    }
  }
  return hasCapacity;
}
