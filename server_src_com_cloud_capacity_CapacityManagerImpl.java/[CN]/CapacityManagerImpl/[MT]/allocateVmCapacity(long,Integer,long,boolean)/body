{
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO capacityMem=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_MEMORY);
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    capacityCpu=_capacityDao.lockRow(capacityCpu.getId(),true);
    capacityMem=_capacityDao.lockRow(capacityMem.getId(),true);
    long usedCpu=capacityCpu.getUsedCapacity();
    long usedMem=capacityMem.getUsedCapacity();
    long reservedCpu=capacityCpu.getReservedCapacity();
    long reservedMem=capacityMem.getReservedCapacity();
    long totalCpu=capacityCpu.getTotalCapacity();
    long totalMem=capacityMem.getTotalCapacity();
    boolean success=false;
    if (fromLastHost) {
      if (reservedCpu >= cpu && reservedMem >= ram) {
        capacityCpu.setReservedCapacity(reservedCpu - cpu);
        capacityMem.setReservedCapacity(reservedMem - ram);
        capacityCpu.setUsedCapacity(usedCpu + cpu);
        capacityMem.setUsedCapacity(usedMem + ram);
        success=true;
      }
    }
 else {
      if ((reservedCpu + usedCpu + cpu <= totalCpu) && (reservedMem + usedMem + ram <= totalMem)) {
        capacityCpu.setUsedCapacity(usedCpu + cpu);
        capacityMem.setUsedCapacity(usedMem + ram);
        success=true;
      }
    }
    if (success) {
      s_logger.debug("alloc cpu from host: " + hostId + ", old used: "+ usedCpu+ ", old reserved: "+ reservedCpu+ ", old total: "+ totalCpu+ "; new used:"+ capacityCpu.getUsedCapacity()+ ", reserved:"+ capacityCpu.getReservedCapacity()+ ", total: "+ capacityCpu.getTotalCapacity()+ "; requested cpu:"+ cpu+ ",alloc_from_last:"+ fromLastHost);
      s_logger.debug("alloc mem from host: " + hostId + ", old used: "+ usedMem+ ", old reserved: "+ reservedMem+ ", old total: "+ totalMem+ "; new used: "+ capacityMem.getUsedCapacity()+ ", reserved: "+ capacityMem.getReservedCapacity()+ ", total: "+ capacityMem.getTotalCapacity()+ "; requested mem: "+ ram+ ",alloc_from_last:"+ fromLastHost);
      _capacityDao.update(capacityCpu.getId(),capacityCpu);
      _capacityDao.update(capacityMem.getId(),capacityMem);
    }
 else {
      if (fromLastHost) {
        s_logger.debug("Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", requested cpu: "+ cpu+ ", reservedMem: "+ reservedMem+ ", requested mem: "+ ram);
      }
 else {
        s_logger.debug("Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", used cpu: "+ usedCpu+ ", requested cpu: "+ cpu+ ", total cpu: "+ totalCpu+ ", reservedMem: "+ reservedMem+ ", used Mem: "+ usedMem+ ", requested mem: "+ ram+ ", total Mem:"+ totalMem);
      }
    }
    txn.commit();
    return success;
  }
 catch (  Exception e) {
    txn.rollback();
    return false;
  }
}
