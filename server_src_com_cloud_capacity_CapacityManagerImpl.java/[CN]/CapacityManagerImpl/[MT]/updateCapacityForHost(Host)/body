{
  List<ServiceOfferingVO> offerings=_offeringsDao.listAllIncludingRemoved();
  Map<Long,ServiceOfferingVO> offeringsMap=new HashMap<Long,ServiceOfferingVO>();
  for (  ServiceOfferingVO offering : offerings) {
    offeringsMap.put(offering.getId(),offering);
  }
  long usedCpu=0;
  long usedMemory=0;
  long reservedMemory=0;
  long reservedCpu=0;
  List<VMInstanceVO> vms=_vmDao.listUpByHostId(host.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Found " + vms.size() + " VMs on host "+ host.getId());
  }
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  ClusterDetailsVO clusterDetailCpu=_clusterDetailsDao.findDetail(cluster.getId(),"cpuOvercommitRatio");
  ClusterDetailsVO clusterDetailRam=_clusterDetailsDao.findDetail(cluster.getId(),"memoryOvercommitRatio");
  Float clusterCpuOvercommitRatio=Float.parseFloat(clusterDetailCpu.getValue());
  Float clusterRamOvercommitRatio=Float.parseFloat(clusterDetailRam.getValue());
  Float cpuOvercommitRatio=1f;
  Float ramOvercommitRatio=1f;
  for (  VMInstanceVO vm : vms) {
    UserVmDetailVO vmDetailCpu=_userVmDetailsDao.findDetail(vm.getId(),"cpuOvercommitRatio");
    UserVmDetailVO vmDetailRam=_userVmDetailsDao.findDetail(vm.getId(),"memoryOvercommitRatio");
    if (vmDetailCpu != null) {
      cpuOvercommitRatio=Float.parseFloat(vmDetailCpu.getValue());
      ramOvercommitRatio=Float.parseFloat(vmDetailRam.getValue());
    }
    ServiceOffering so=offeringsMap.get(vm.getServiceOfferingId());
    usedMemory+=((so.getRamSize() * 1024L * 1024L) / ramOvercommitRatio) * clusterRamOvercommitRatio;
    usedCpu+=((so.getCpu() * so.getSpeed()) / cpuOvercommitRatio) * clusterCpuOvercommitRatio;
  }
  List<VMInstanceVO> vmsByLastHostId=_vmDao.listByLastHostId(host.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Found " + vmsByLastHostId.size() + " VM, not running on host "+ host.getId());
  }
  for (  VMInstanceVO vm : vmsByLastHostId) {
    long secondsSinceLastUpdate=(DateUtil.currentGMTTime().getTime() - vm.getUpdateTime().getTime()) / 1000;
    if (secondsSinceLastUpdate < _vmCapacityReleaseInterval) {
      UserVmDetailVO vmDetailCpu=_userVmDetailsDao.findDetail(vm.getId(),"cpuOvercommitRatio");
      UserVmDetailVO vmDetailRam=_userVmDetailsDao.findDetail(vm.getId(),"memoryOvercommitRatio");
      if (vmDetailCpu != null) {
        cpuOvercommitRatio=Float.parseFloat(vmDetailCpu.getValue());
        ramOvercommitRatio=Float.parseFloat(vmDetailRam.getValue());
      }
      ServiceOffering so=offeringsMap.get(vm.getServiceOfferingId());
      reservedMemory+=((so.getRamSize() * 1024L * 1024L) / ramOvercommitRatio) * clusterRamOvercommitRatio;
      reservedCpu+=(so.getCpu() * so.getSpeed() / cpuOvercommitRatio) * clusterCpuOvercommitRatio;
    }
 else {
      UserVmDetailVO messageSentFlag=_userVmDetailsDao.findDetail(vm.getId(),MESSAGE_RESERVED_CAPACITY_FREED_FLAG);
      if (messageSentFlag == null || !Boolean.valueOf(messageSentFlag.getValue())) {
        _messageBus.publish(_name,"VM_ReservedCapacity_Free",PublishScope.LOCAL,vm);
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVM=_userVMDao.findById(vm.getId());
          _userVMDao.loadDetails(userVM);
          userVM.setDetail(MESSAGE_RESERVED_CAPACITY_FREED_FLAG,"true");
          _userVMDao.saveDetails(userVM);
        }
      }
    }
  }
  CapacityVO cpuCap=_capacityDao.findByHostIdType(host.getId(),CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO memCap=_capacityDao.findByHostIdType(host.getId(),CapacityVO.CAPACITY_TYPE_MEMORY);
  if (cpuCap != null && memCap != null) {
    if (cpuCap.getUsedCapacity() == usedCpu && cpuCap.getReservedCapacity() == reservedCpu) {
      s_logger.debug("No need to calibrate cpu capacity, host:" + host.getId() + " usedCpu: "+ cpuCap.getUsedCapacity()+ " reservedCpu: "+ cpuCap.getReservedCapacity());
    }
 else     if (cpuCap.getReservedCapacity() != reservedCpu) {
      s_logger.debug("Calibrate reserved cpu for host: " + host.getId() + " old reservedCpu:"+ cpuCap.getReservedCapacity()+ " new reservedCpu:"+ reservedCpu);
      cpuCap.setReservedCapacity(reservedCpu);
    }
 else     if (cpuCap.getUsedCapacity() != usedCpu) {
      s_logger.debug("Calibrate used cpu for host: " + host.getId() + " old usedCpu:"+ cpuCap.getUsedCapacity()+ " new usedCpu:"+ usedCpu);
      cpuCap.setUsedCapacity(usedCpu);
    }
    if (memCap.getUsedCapacity() == usedMemory && memCap.getReservedCapacity() == reservedMemory) {
      s_logger.debug("No need to calibrate memory capacity, host:" + host.getId() + " usedMem: "+ memCap.getUsedCapacity()+ " reservedMem: "+ memCap.getReservedCapacity());
    }
 else     if (memCap.getReservedCapacity() != reservedMemory) {
      s_logger.debug("Calibrate reserved memory for host: " + host.getId() + " old reservedMem:"+ memCap.getReservedCapacity()+ " new reservedMem:"+ reservedMemory);
      memCap.setReservedCapacity(reservedMemory);
    }
 else     if (memCap.getUsedCapacity() != usedMemory) {
      s_logger.debug("Calibrate used memory for host: " + host.getId() + " old usedMem: "+ memCap.getUsedCapacity()+ " new usedMem: "+ usedMemory);
      memCap.setUsedCapacity(usedMemory);
    }
    try {
      _capacityDao.update(cpuCap.getId(),cpuCap);
      _capacityDao.update(memCap.getId(),memCap);
    }
 catch (    Exception e) {
      s_logger.error("Caught exception while updating cpu/memory capacity for the host " + host.getId(),e);
    }
  }
 else {
    final long usedMemoryFinal=usedMemory;
    final long reservedMemoryFinal=reservedMemory;
    final long usedCpuFinal=usedCpu;
    final long reservedCpuFinal=reservedCpu;
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        CapacityVO capacity=new CapacityVO(host.getId(),host.getDataCenterId(),host.getPodId(),host.getClusterId(),usedMemoryFinal,host.getTotalMemory(),CapacityVO.CAPACITY_TYPE_MEMORY);
        capacity.setReservedCapacity(reservedMemoryFinal);
        CapacityState capacityState=CapacityState.Enabled;
        if (host.getClusterId() != null) {
          ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
          if (cluster != null) {
            capacityState=_configMgr.findClusterAllocationState(cluster) == AllocationState.Disabled ? CapacityState.Disabled : CapacityState.Enabled;
            capacity.setCapacityState(capacityState);
          }
        }
        _capacityDao.persist(capacity);
        capacity=new CapacityVO(host.getId(),host.getDataCenterId(),host.getPodId(),host.getClusterId(),usedCpuFinal,host.getCpus().longValue() * host.getSpeed().longValue(),CapacityVO.CAPACITY_TYPE_CPU);
        capacity.setReservedCapacity(reservedCpuFinal);
        capacity.setCapacityState(capacityState);
        _capacityDao.persist(capacity);
      }
    }
);
  }
}
