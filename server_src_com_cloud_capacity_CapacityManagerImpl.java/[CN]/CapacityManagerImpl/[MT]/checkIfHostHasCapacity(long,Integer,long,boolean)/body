{
  boolean hasCapacity=false;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Checking if host: " + hostId + " has enough capacity for requested CPU: "+ cpu+ " and requested RAM: "+ ram);
  }
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO capacityMem=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_MEMORY);
  long usedCpu=capacityCpu.getUsedCapacity();
  long usedMem=capacityMem.getUsedCapacity();
  long reservedCpu=capacityCpu.getReservedCapacity();
  long reservedMem=capacityMem.getReservedCapacity();
  long totalCpu=capacityCpu.getTotalCapacity();
  long totalMem=capacityMem.getTotalCapacity();
  String failureReason="";
  if (checkFromReservedCapacity) {
    long freeCpu=reservedCpu;
    long freeMem=reservedMem;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("We need to allocate to the last host again, so checking if there is enough reserved capacity");
      s_logger.debug("Free CPU: " + freeCpu + " , Requested CPU: "+ cpu);
      s_logger.debug("Free RAM: " + freeMem + " , Requested RAM: "+ ram);
    }
    if (reservedCpu >= cpu) {
      if (reservedMem >= ram) {
        hasCapacity=true;
      }
 else {
        failureReason="Host does not have enough reserved RAM available";
      }
    }
 else {
      failureReason="Host does not have enough reserved CPU available";
    }
  }
 else {
    long freeCpu=totalCpu - (reservedCpu + usedCpu);
    long freeMem=totalMem - (reservedMem + usedMem);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Free CPU: " + freeCpu + " , Requested CPU: "+ cpu);
      s_logger.debug("Free RAM: " + freeMem + " , Requested RAM: "+ ram);
    }
    if ((reservedCpu + usedCpu + cpu <= totalCpu)) {
      if ((reservedMem + usedMem + ram <= totalMem)) {
        hasCapacity=true;
      }
 else {
        failureReason="Host does not have enough RAM available";
      }
    }
 else {
      failureReason="Host does not have enough CPU available";
    }
  }
  if (hasCapacity) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Host has enough CPU and RAM available");
    }
    s_logger.debug("STATS: Can alloc CPU from host: " + hostId + ", used: "+ usedCpu+ ", reserved: "+ reservedCpu+ ", total: "+ totalCpu+ "; requested cpu:"+ cpu+ ",alloc_from_last_host?:"+ checkFromReservedCapacity);
    s_logger.debug("STATS: Can alloc MEM from host: " + hostId + ", used: "+ usedMem+ ", reserved: "+ reservedMem+ ", total: "+ totalMem+ "; requested mem: "+ ram+ ",alloc_from_last_host?:"+ checkFromReservedCapacity);
  }
 else {
    if (checkFromReservedCapacity) {
      s_logger.debug("STATS: Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", requested cpu: "+ cpu+ ", reservedMem: "+ reservedMem+ ", requested mem: "+ ram);
    }
 else {
      s_logger.debug("STATS: Failed to alloc resource from host: " + hostId + " reservedCpu: "+ reservedCpu+ ", used cpu: "+ usedCpu+ ", requested cpu: "+ cpu+ ", total cpu: "+ totalCpu+ ", reservedMem: "+ reservedMem+ ", used Mem: "+ usedMem+ ", requested mem: "+ ram+ ", total Mem:"+ totalMem);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(failureReason + ", cannot allocate to this host.");
    }
  }
  return hasCapacity;
}
