{
  ServiceOfferingVO svo=_offeringsDao.findById(vm.getServiceOfferingId());
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO capacityMemory=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_MEMORY);
  Long clusterId=null;
  if (hostId != null) {
    HostVO host=_hostDao.findById(hostId);
    clusterId=host.getClusterId();
  }
  if (capacityCpu == null || capacityMemory == null || svo == null) {
    return false;
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    capacityCpu=_capacityDao.lockRow(capacityCpu.getId(),true);
    capacityMemory=_capacityDao.lockRow(capacityMemory.getId(),true);
    long usedCpu=capacityCpu.getUsedCapacity();
    long usedMem=capacityMemory.getUsedCapacity();
    long reservedCpu=capacityCpu.getReservedCapacity();
    long reservedMem=capacityMemory.getReservedCapacity();
    long actualTotalCpu=capacityCpu.getTotalCapacity();
    float cpuOvercommitRatio=Float.parseFloat(_clusterDetailsDao.findDetail(clusterId,"cpuOvercommitRatio").getValue());
    float memoryOvercommitRatio=Float.parseFloat(_clusterDetailsDao.findDetail(clusterId,"memoryOvercommitRatio").getValue());
    int vmCPU=(int)(svo.getCpu() * svo.getSpeed());
    long vmMem=(long)(svo.getRamSize() * 1024L * 1024L);
    long actualTotalMem=capacityMemory.getTotalCapacity();
    long totalMem=(long)(actualTotalMem * memoryOvercommitRatio);
    long totalCpu=(long)(actualTotalCpu * cpuOvercommitRatio);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Hosts's actual total CPU: " + actualTotalCpu + " and CPU after applying overprovisioning: "+ totalCpu);
      s_logger.debug("Hosts's actual total RAM: " + actualTotalMem + " and RAM after applying overprovisioning: "+ totalMem);
    }
    if (!moveFromReserved) {
      if (usedCpu >= vmCPU) {
        capacityCpu.setUsedCapacity(usedCpu - vmCPU);
      }
      if (usedMem >= vmMem) {
        capacityMemory.setUsedCapacity(usedMem - vmMem);
      }
      if (moveToReservered) {
        if (reservedCpu + vmCPU <= totalCpu) {
          capacityCpu.setReservedCapacity(reservedCpu + vmCPU);
        }
        if (reservedMem + vmMem <= totalMem) {
          capacityMemory.setReservedCapacity(reservedMem + vmMem);
        }
      }
    }
 else {
      if (reservedCpu >= vmCPU) {
        capacityCpu.setReservedCapacity(reservedCpu - vmCPU);
      }
      if (reservedMem >= vmMem) {
        capacityMemory.setReservedCapacity(reservedMem - vmMem);
      }
    }
    s_logger.debug("release cpu from host: " + hostId + ", old used: "+ usedCpu+ ",reserved: "+ reservedCpu+ ", actual total: "+ actualTotalCpu+ ", total with overprovisioning: "+ totalCpu+ "; new used: "+ capacityCpu.getUsedCapacity()+ ",reserved:"+ capacityCpu.getReservedCapacity()+ "; movedfromreserved: "+ moveFromReserved+ ",moveToReservered"+ moveToReservered);
    s_logger.debug("release mem from host: " + hostId + ", old used: "+ usedMem+ ",reserved: "+ reservedMem+ ", total: "+ totalMem+ "; new used: "+ capacityMemory.getUsedCapacity()+ ",reserved:"+ capacityMemory.getReservedCapacity()+ "; movedfromreserved: "+ moveFromReserved+ ",moveToReservered"+ moveToReservered);
    _capacityDao.update(capacityCpu.getId(),capacityCpu);
    _capacityDao.update(capacityMemory.getId(),capacityMemory);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.debug("Failed to transit vm's state, due to " + e.getMessage());
    txn.rollback();
    return false;
  }
}
