{
  while (!_stopped) {
    try {
      Thread.sleep(_hostCapacityCheckerInterval * 1000);
    }
 catch (    InterruptedException e1) {
    }
    SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
    sc.addAnd("status",SearchCriteria.Op.EQ,Status.Up.toString());
    List<HostVO> hosts=_hostDao.search(sc,null);
    List<ServiceOfferingVO> offerings=_offeringsDao.listAllIncludingRemoved();
    Map<Long,ServiceOfferingVO> offeringsMap=new HashMap<Long,ServiceOfferingVO>();
    for (    ServiceOfferingVO offering : offerings) {
      offeringsMap.put(offering.getId(),offering);
    }
    for (    HostVO host : hosts) {
      if (host.getType() != Host.Type.Routing) {
        continue;
      }
      long usedCpu=0;
      long usedMemory=0;
      long reservedMemory=0;
      long reservedCpu=0;
      List<VMInstanceVO> vms=_vmDao.listUpByHostId(host.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Found " + vms.size() + " VMs on host "+ host.getId());
      }
      for (      VMInstanceVO vm : vms) {
        ServiceOffering so=offeringsMap.get(vm.getServiceOfferingId());
        usedMemory+=so.getRamSize() * 1024L * 1024L;
        usedCpu+=so.getCpu() * so.getSpeed();
      }
      List<VMInstanceVO> vmsByLastHostId=_vmDao.listByLastHostId(host.getId());
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Found " + vmsByLastHostId.size() + " VM, not running on host "+ host.getId());
      }
      for (      VMInstanceVO vm : vmsByLastHostId) {
        long secondsSinceLastUpdate=(DateUtil.currentGMTTime().getTime() - vm.getUpdateTime().getTime()) / 1000;
        if (secondsSinceLastUpdate < _vmCapacityReleaseInterval) {
          ServiceOffering so=offeringsMap.get(vm.getServiceOfferingId());
          reservedMemory+=so.getRamSize() * 1024L * 1024L;
          reservedCpu+=so.getCpu() * so.getSpeed();
        }
      }
      CapacityVO cpuCap=_capacityDao.findByHostIdType(host.getId(),CapacityVO.CAPACITY_TYPE_CPU);
      CapacityVO memCap=_capacityDao.findByHostIdType(host.getId(),CapacityVO.CAPACITY_TYPE_MEMORY);
      if (cpuCap.getUsedCapacity() == usedCpu && cpuCap.getReservedCapacity() == reservedCpu) {
        s_logger.debug("Cool, no need to calibrate cpu capacity, host:" + host.getId() + " usedCpu: "+ cpuCap.getUsedCapacity()+ " reservedCpu: "+ cpuCap.getReservedCapacity());
      }
 else       if (cpuCap.getReservedCapacity() != reservedCpu) {
        s_logger.debug("Calibrate reserved cpu for host: " + host.getId() + " old reservedCpu:"+ cpuCap.getReservedCapacity()+ " new reservedCpu:"+ reservedCpu);
        cpuCap.setReservedCapacity(reservedCpu);
      }
 else       if (cpuCap.getUsedCapacity() != usedCpu) {
        s_logger.debug("Calibrate used cpu for host: " + host.getId() + " old usedCpu:"+ cpuCap.getUsedCapacity()+ " new usedCpu:"+ usedCpu);
        cpuCap.setUsedCapacity(usedCpu);
      }
      if (memCap.getUsedCapacity() == usedMemory && memCap.getReservedCapacity() == reservedMemory) {
        s_logger.debug("Cool, no need to calibrate memory capacity, host:" + host.getId() + " usedMem: "+ memCap.getUsedCapacity()+ " reservedMem: "+ memCap.getReservedCapacity());
      }
 else       if (memCap.getReservedCapacity() != reservedMemory) {
        s_logger.debug("Calibrate reserved memory for host: " + host.getId() + " old reservedMem:"+ memCap.getReservedCapacity()+ " new reservedMem:"+ reservedMemory);
        memCap.setReservedCapacity(reservedMemory);
      }
 else       if (memCap.getUsedCapacity() != usedMemory) {
        s_logger.debug("Calibrate used memory for host: " + host.getId() + " old usedMem: "+ memCap.getUsedCapacity()+ " new usedMem: "+ usedMemory);
        memCap.setUsedCapacity(usedMemory);
      }
      try {
        _capacityDao.update(cpuCap.getId(),cpuCap);
        _capacityDao.update(memCap.getId(),memCap);
      }
 catch (      Exception e) {
      }
    }
  }
}
