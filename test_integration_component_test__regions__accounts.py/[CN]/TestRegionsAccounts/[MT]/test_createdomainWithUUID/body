@attr(tags=['simulator', 'basic', 'advanced', 'selfservice'])
def test_createdomainWithUUID(self):
    'Test for creating Domain by passing id parameter\n\n          # Validate the following\n          # 1.Create a domain by passing id parameter.Verify the domain is created.\n          # 2.List this domain by passing id parameter.Verify that list domain is able to list this domain.\n          # 3.Delete domain should succeed.\n        '
    domain = Domain.create(self.api_client, self.services['domain'])
    self.assertIn(self.services['domain']['domainUUID'], domain.id, 'Domain is not created with the doaminId passed')
    list_domain = Domain.list(self.api_client, id=domain.id)
    self.assertEqual(isinstance(list_domain, list), True, 'Check for list domain response by uuid failed')
    domain_response = list_domain[0]
    self.assertEqual(domain_response.id, domain.id, 'list domain response does not match with domain Id ')
    self.assertIn(self.services['domain']['name'], domain_response.name, 'list domaiin response does not match with user firstname')
    try:
        domain.delete(self.api_client)
    except Exception as e:
        self.fail(('Failed to delete domain: %s' % e))
    return
