{
  Long userId=UserContext.current().getCallerUserId();
  User user=_userDao.findById(userId);
  Account account=UserContext.current().getCaller();
  StoragePoolVO pool=this.primaryDataStoreDao.findById(store.getId());
  try {
    List<StoragePoolVO> spes=null;
    if (pool.getScope() == ScopeType.ZONE) {
      spes=primaryDataStoreDao.listBy(pool.getDataCenterId(),null,null,ScopeType.ZONE);
    }
 else {
      spes=primaryDataStoreDao.listBy(pool.getDataCenterId(),pool.getPodId(),pool.getClusterId(),ScopeType.CLUSTER);
    }
    for (    StoragePoolVO sp : spes) {
      if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {
        throw new CloudRuntimeException("Only one storage pool in a cluster can be in PrepareForMaintenance mode, " + sp.getId() + " is already in  PrepareForMaintenance mode ");
      }
    }
    StoragePool storagePool=(StoragePool)store;
    List<HostVO> hosts=new ArrayList<HostVO>();
    if (pool.getScope().equals(ScopeType.ZONE)) {
      hosts=_resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(),pool.getDataCenterId());
    }
 else {
      hosts=_resourceMgr.listHostsInClusterByStatus(pool.getClusterId(),Status.Up);
    }
    if (hosts == null || hosts.size() == 0) {
      pool.setStatus(StoragePoolStatus.Maintenance);
      primaryDataStoreDao.update(pool.getId(),pool);
      return true;
    }
 else {
      pool.setStatus(StoragePoolStatus.PrepareForMaintenance);
      primaryDataStoreDao.update(pool.getId(),pool);
    }
    for (    HostVO host : hosts) {
      ModifyStoragePoolCommand cmd=new ModifyStoragePoolCommand(false,storagePool);
      final Answer answer=agentMgr.easySend(host.getId(),cmd);
      if (answer == null || !answer.getResult()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("ModifyStoragePool false failed due to " + ((answer == null) ? "answer null" : answer.getDetails()));
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("ModifyStoragePool false succeeded");
        }
      }
    }
    List<StoragePoolVO> upPools=primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(),StoragePoolStatus.Up);
    boolean restart=true;
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=this.volumeDao.findByPoolId(pool.getId());
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=vmDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        try {
          StoragePoolWorkVO work=new StoragePoolWorkVO(vmInstance.getId(),pool.getId(),false,false,server.getId());
          _storagePoolWorkDao.persist(work);
        }
 catch (        Exception e) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Work record already exists, re-using by re-setting values");
          }
          StoragePoolWorkVO work=_storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(),vmInstance.getId());
          work.setStartedAfterMaintenance(false);
          work.setStoppedForMaintenance(false);
          work.setManagementServerId(server.getId());
          _storagePoolWorkDao.update(work.getId(),work);
        }
      }
    }
    List<StoragePoolWorkVO> pendingWork=_storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());
    for (    StoragePoolWorkVO work : pendingWork) {
      VMInstanceVO vmInstance=vmDao.findById(work.getVmId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
        ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(vmInstance.getId());
        if (!vmMgr.advanceStop(consoleProxy,true,user,account)) {
          String errorMsg="There was an error stopping the console proxy id: " + vmInstance.getId() + " ,cannot enable storage maintenance";
          s_logger.warn(errorMsg);
          throw new CloudRuntimeException(errorMsg);
        }
 else {
          work.setStoppedForMaintenance(true);
          _storagePoolWorkDao.update(work.getId(),work);
        }
        if (restart) {
          if (this.vmMgr.advanceStart(consoleProxy,null,user,account) == null) {
            String errorMsg="There was an error starting the console proxy id: " + vmInstance.getId() + " on another storage pool, cannot enable primary storage maintenance";
            s_logger.warn(errorMsg);
          }
 else {
            work.setStartedAfterMaintenance(true);
            _storagePoolWorkDao.update(work.getId(),work);
          }
        }
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
        UserVmVO userVm=userVmDao.findById(vmInstance.getId());
        if (!vmMgr.advanceStop(userVm,true,user,account)) {
          String errorMsg="There was an error stopping the user vm id: " + vmInstance.getId() + " ,cannot enable storage maintenance";
          s_logger.warn(errorMsg);
          throw new CloudRuntimeException(errorMsg);
        }
 else {
          work.setStoppedForMaintenance(true);
          _storagePoolWorkDao.update(work.getId(),work);
        }
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
        SecondaryStorageVmVO secStrgVm=_secStrgDao.findById(vmInstance.getId());
        if (!vmMgr.advanceStop(secStrgVm,true,user,account)) {
          String errorMsg="There was an error stopping the ssvm id: " + vmInstance.getId() + " ,cannot enable storage maintenance";
          s_logger.warn(errorMsg);
          throw new CloudRuntimeException(errorMsg);
        }
 else {
          work.setStoppedForMaintenance(true);
          _storagePoolWorkDao.update(work.getId(),work);
        }
        if (restart) {
          if (vmMgr.advanceStart(secStrgVm,null,user,account) == null) {
            String errorMsg="There was an error starting the ssvm id: " + vmInstance.getId() + " on another storage pool, cannot enable primary storage maintenance";
            s_logger.warn(errorMsg);
          }
 else {
            work.setStartedAfterMaintenance(true);
            _storagePoolWorkDao.update(work.getId(),work);
          }
        }
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
        DomainRouterVO domR=_domrDao.findById(vmInstance.getId());
        if (!vmMgr.advanceStop(domR,true,user,account)) {
          String errorMsg="There was an error stopping the domain router id: " + vmInstance.getId() + " ,cannot enable primary storage maintenance";
          s_logger.warn(errorMsg);
          throw new CloudRuntimeException(errorMsg);
        }
 else {
          work.setStoppedForMaintenance(true);
          _storagePoolWorkDao.update(work.getId(),work);
        }
        if (restart) {
          if (vmMgr.advanceStart(domR,null,user,account) == null) {
            String errorMsg="There was an error starting the domain router id: " + vmInstance.getId() + " on another storage pool, cannot enable primary storage maintenance";
            s_logger.warn(errorMsg);
          }
 else {
            work.setStartedAfterMaintenance(true);
            _storagePoolWorkDao.update(work.getId(),work);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.error("Exception in enabling primary storage maintenance:",e);
    pool.setStatus(StoragePoolStatus.ErrorInMaintenance);
    this.primaryDataStoreDao.update(pool.getId(),pool);
    throw new CloudRuntimeException(e.getMessage());
  }
  return true;
}
