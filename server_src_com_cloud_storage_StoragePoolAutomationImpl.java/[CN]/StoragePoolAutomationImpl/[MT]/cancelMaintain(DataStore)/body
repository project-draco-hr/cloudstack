{
  Long userId=CallContext.current().getCallingUserId();
  User user=_userDao.findById(userId);
  Account account=CallContext.current().getCallingAccount();
  StoragePoolVO poolVO=primaryDataStoreDao.findById(store.getId());
  StoragePool pool=(StoragePool)store;
  List<HostVO> hosts=new ArrayList<HostVO>();
  if (poolVO.getScope().equals(ScopeType.ZONE)) {
    if (HypervisorType.Any.equals(pool.getHypervisor())) {
      hosts=_resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());
    }
 else {
      hosts=_resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(),pool.getDataCenterId());
    }
  }
 else {
    hosts=_resourceMgr.listHostsInClusterByStatus(pool.getClusterId(),Status.Up);
  }
  if (hosts == null || hosts.size() == 0) {
    return true;
  }
  for (  HostVO host : hosts) {
    ModifyStoragePoolCommand msPoolCmd=new ModifyStoragePoolCommand(true,pool);
    final Answer answer=agentMgr.easySend(host.getId(),msPoolCmd);
    if (answer == null || !answer.getResult()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("ModifyStoragePool add failed due to " + ((answer == null) ? "answer null" : answer.getDetails()));
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("ModifyStoragePool add secceeded");
      }
    }
  }
  List<StoragePoolWorkVO> pendingWork=_storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());
  for (  StoragePoolWorkVO work : pendingWork) {
    try {
      VMInstanceVO vmInstance=vmDao.findById(work.getVmId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
        ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(vmInstance.getId());
        vmMgr.advanceStart(consoleProxy.getUuid(),null,null);
        work.setStartedAfterMaintenance(true);
        _storagePoolWorkDao.update(work.getId(),work);
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
        SecondaryStorageVmVO ssVm=_secStrgDao.findById(vmInstance.getId());
        vmMgr.advanceStart(ssVm.getUuid(),null,null);
        work.setStartedAfterMaintenance(true);
        _storagePoolWorkDao.update(work.getId(),work);
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
        DomainRouterVO domR=_domrDao.findById(vmInstance.getId());
        vmMgr.advanceStart(domR.getUuid(),null,null);
        work.setStartedAfterMaintenance(true);
        _storagePoolWorkDao.update(work.getId(),work);
      }
      if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
        UserVmVO userVm=userVmDao.findById(vmInstance.getId());
        if (volumeDao.findByInstanceAndType(work.getId(),Volume.Type.ROOT).isEmpty()) {
          _storagePoolWorkDao.remove(work.getId());
        }
 else {
          vmMgr.advanceStart(userVm.getUuid(),null,null);
          work.setStartedAfterMaintenance(true);
          _storagePoolWorkDao.update(work.getId(),work);
        }
      }
    }
 catch (    Exception e) {
      s_logger.debug("Failed start vm",e);
      throw new CloudRuntimeException(e.toString());
    }
  }
  return false;
}
