{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  DeployVMParam param=gson.fromJson(job.getCmdInfo(),DeployVMParam.class);
  try {
    UserVm vm=asyncMgr.getExecutorContext().getManagementServer().deployVirtualMachine(param.getUserId(),param.getAccountId(),param.getDataCenterId(),param.getServiceOfferingId(),param.getTemplateId(),param.getDiskOfferingId(),param.getDomain(),param.getPassword(),param.getDisplayName(),param.getGroup(),param.getUserData(),param.getNetworkGroup(),param.getEventId());
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeResultObject(param.getUserId(),vm,param));
  }
 catch (  ResourceAllocationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: VM_INSUFFICIENT_CAPACITY");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.VM_INSUFFICIENT_CAPACITY,e.getMessage());
  }
catch (  ExecutionException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: VM_HOST_LICENSE_EXPIRED");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.VM_HOST_LICENSE_EXPIRED,e.getMessage());
  }
catch (  InvalidParameterValueException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: VM_INVALID_PARAM_ERROR");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.VM_INVALID_PARAM_ERROR,e.getMessage());
  }
catch (  InternalErrorException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: INTERNAL_ERROR");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
catch (  InsufficientStorageCapacityException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: VM_INSUFFICIENT_CAPACITY");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.VM_INSUFFICIENT_CAPACITY,e.getMessage());
  }
catch (  PermissionDeniedException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: ACCOUNT_ERROR");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.ACCOUNT_ERROR,e.getMessage());
  }
catch (  ConcurrentOperationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Unable to deploy VM: " + e.getMessage());
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: INTERNAL_ERROR");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
catch (  Exception e) {
    s_logger.warn("Unable to deploy VM : " + e.getMessage(),e);
    saveEvent(param,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,"Unable to deploy VM: INTERNAL_ERROR");
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  return true;
}
