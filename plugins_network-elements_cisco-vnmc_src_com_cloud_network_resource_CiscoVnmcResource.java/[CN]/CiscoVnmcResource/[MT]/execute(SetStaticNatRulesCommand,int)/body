{
  String vlanId=cmd.getContextParam(NetworkElementCommand.GUEST_VLAN_TAG);
  String tenant="vlan-" + vlanId;
  StaticNatRuleTO[] rules=cmd.getRules();
  Map<String,List<StaticNatRuleTO>> publicIpRulesMap=new HashMap<String,List<StaticNatRuleTO>>();
  for (  StaticNatRuleTO rule : rules) {
    String publicIp=rule.getSrcIp();
    if (!publicIpRulesMap.containsKey(publicIp)) {
      List<StaticNatRuleTO> publicIpRulesList=new ArrayList<StaticNatRuleTO>();
      publicIpRulesMap.put(publicIp,publicIpRulesList);
    }
    publicIpRulesMap.get(publicIp).add(rule);
  }
  try {
    if (!_connection.createTenantVDCNatPolicySet(tenant)) {
      throw new Exception("Failed to create NAT policy set in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.createTenantVDCAclPolicySet(tenant,true)) {
      throw new Exception("Failed to create ACL ingress policy set in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.createTenantVDCAclPolicySet(tenant,false)) {
      throw new Exception("Failed to create ACL egress policy set in VNMC for guest network with vlan " + vlanId);
    }
    for (    String publicIp : publicIpRulesMap.keySet()) {
      String policyIdentifier=publicIp.replace('.','-');
      if (!_connection.createTenantVDCDNatPolicy(tenant,policyIdentifier)) {
        throw new Exception("Failed to create DNAT policy in VNMC for guest network with vlan " + vlanId);
      }
      if (!_connection.createTenantVDCDNatPolicyRef(tenant,policyIdentifier)) {
        throw new Exception("Failed to associate DNAT policy with NAT policy set in VNMC for guest network with vlan " + vlanId);
      }
      if (!_connection.createTenantVDCAclPolicy(tenant,policyIdentifier)) {
        throw new Exception("Failed to create ACL policy in VNMC for guest network with vlan " + vlanId);
      }
      if (!_connection.createTenantVDCAclPolicyRef(tenant,policyIdentifier,true)) {
        throw new Exception("Failed to associate ACL policy with ACL ingress policy set in VNMC for guest network with vlan " + vlanId);
      }
      if (!_connection.createTenantVDCAclPolicyRef(tenant,policyIdentifier,false)) {
        throw new Exception("Failed to associate ACL policy with ACL egress policy set in VNMC for guest network with vlan " + vlanId);
      }
      for (      StaticNatRuleTO rule : publicIpRulesMap.get(publicIp)) {
        if (rule.revoked()) {
          if (!_connection.deleteTenantVDCDNatRule(tenant,Long.toString(rule.getId()),policyIdentifier)) {
            throw new Exception("Failed to delete DNAT rule in VNMC for guest network with vlan " + vlanId);
          }
          if (!_connection.deleteTenantVDCAclRule(tenant,Long.toString(rule.getId()),policyIdentifier)) {
            throw new Exception("Failed to delete ACL ingress rule for DNAT in VNMC for guest network with vlan " + vlanId);
          }
        }
 else {
          if (!_connection.createTenantVDCDNatIpPool(tenant,Long.toString(rule.getId()),rule.getDstIp())) {
            throw new Exception("Failed to create DNAT ip pool in VNMC for guest network with vlan " + vlanId);
          }
          if (!_connection.createTenantVDCDNatRule(tenant,Long.toString(rule.getId()),policyIdentifier,rule.getSrcIp())) {
            throw new Exception("Failed to create DNAT rule in VNMC for guest network with vlan " + vlanId);
          }
          if (!_connection.createTenantVDCAclRuleForDNat(tenant,Long.toString(rule.getId()),policyIdentifier,rule.getDstIp())) {
            throw new Exception("Failed to create ACL rule for DNAT in VNMC for guest network with vlan " + vlanId);
          }
        }
      }
    }
    if (!_connection.associateAclPolicySet(tenant)) {
      throw new Exception("Failed to associate source NAT policy set with edge security profile in VNMC for guest network with vlan " + vlanId);
    }
  }
 catch (  Throwable e) {
    String msg="SetSourceNatCommand failed due to " + e.getMessage();
    s_logger.error(msg,e);
    return new Answer(cmd,false,msg);
  }
  return new Answer(cmd,true,"Success");
}
