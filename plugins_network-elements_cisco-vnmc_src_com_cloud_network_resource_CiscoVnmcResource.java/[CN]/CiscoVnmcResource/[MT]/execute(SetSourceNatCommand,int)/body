{
  String vlanId=cmd.getContextParam(NetworkElementCommand.GUEST_VLAN_TAG);
  String tenant="vlan-" + vlanId;
  String policyIdentifier=cmd.getIpAddress().getPublicIp().replace('.','-');
  try {
    if (!_connection.createTenantVDCNatPolicySet(tenant)) {
      throw new Exception("Failed to create NAT policy set in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.createTenantVDCSourceNatPolicy(tenant,policyIdentifier)) {
      throw new Exception("Failed to create source NAT policy in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.createTenantVDCSourceNatPolicyRef(tenant,policyIdentifier)) {
      throw new Exception("Failed to associate source NAT policy with NAT policy set in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.createTenantVDCSourceNatIpPool(tenant,policyIdentifier,cmd.getIpAddress().getPublicIp())) {
      throw new Exception("Failed to create source NAT ip pool in VNMC for guest network with vlan " + vlanId);
    }
    String[] ipRange=getIpRangeFromCidr(cmd.getContextParam(NetworkElementCommand.GUEST_NETWORK_CIDR));
    if (!_connection.createTenantVDCSourceNatRule(tenant,policyIdentifier,ipRange[0],ipRange[1])) {
      throw new Exception("Failed to create source NAT rule in VNMC for guest network with vlan " + vlanId);
    }
    if (!_connection.associateNatPolicySet(tenant)) {
      throw new Exception("Failed to associate source NAT policy set with edge security profile in VNMC for guest network with vlan " + vlanId);
    }
  }
 catch (  Throwable e) {
    String msg="SetSourceNatCommand failed due to " + e.getMessage();
    s_logger.error(msg,e);
    return new Answer(cmd,false,msg);
  }
  return new Answer(cmd,true,"Success");
}
