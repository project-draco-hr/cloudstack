{
  Mockito.when(_configDao.getValue(eq("publish.usage.events"))).thenReturn("true");
  Mockito.when(_usageEventDao.persist(Mockito.any(UsageEventVO.class))).then(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      UsageEventVO vo=(UsageEventVO)invocation.getArguments()[0];
      usageEvents.add(vo);
      return null;
    }
  }
);
  Mockito.when(_usageEventDao.listAll()).thenReturn(usageEvents);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      Event event=(Event)invocation.getArguments()[0];
      events.add(event);
      return null;
    }
  }
).when(_bus).publish(any(Event.class));
  PowerMockito.mockStatic(ComponentContext.class);
  when(ComponentContext.getComponent(eq(EventBus.class))).thenReturn(_bus);
  UsageEventUtils utils=new UsageEventUtils();
  Map<String,String> usageUtilsFields=new HashMap<String,String>();
  usageUtilsFields.put("usageEventDao","_usageEventDao");
  usageUtilsFields.put("accountDao","_accountDao");
  usageUtilsFields.put("dcDao","_dcDao");
  usageUtilsFields.put("configDao","_configDao");
  for (  String fieldName : usageUtilsFields.keySet()) {
    try {
      Field f=UsageEventUtils.class.getDeclaredField(fieldName);
      f.setAccessible(true);
      Field staticField=UsageEventUtils.class.getDeclaredField("s_" + fieldName);
      staticField.setAccessible(true);
      oldFields.put(f.getName(),staticField.get(null));
      f.set(utils,this.getClass().getDeclaredField(usageUtilsFields.get(fieldName)).get(this));
    }
 catch (    IllegalArgumentException|IllegalAccessException|NoSuchFieldException|SecurityException e) {
      e.printStackTrace();
    }
  }
  try {
    Method method=UsageEventUtils.class.getDeclaredMethod("init");
    method.setAccessible(true);
    method.invoke(utils);
  }
 catch (  SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException e) {
    e.printStackTrace();
  }
  return utils;
}
