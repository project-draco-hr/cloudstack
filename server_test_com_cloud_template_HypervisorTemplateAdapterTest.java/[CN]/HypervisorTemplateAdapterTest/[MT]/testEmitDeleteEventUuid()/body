{
  ImageStoreEntity store=mock(ImageStoreEntity.class);
  when(store.getId()).thenReturn(1l);
  when(store.getDataCenterId()).thenReturn(1l);
  when(store.getName()).thenReturn("Test Store");
  TemplateDataStoreVO dataStoreVO=mock(TemplateDataStoreVO.class);
  when(dataStoreVO.getDownloadState()).thenReturn(Status.DOWNLOADED);
  TemplateInfo info=mock(TemplateInfo.class);
  when(info.getDataStore()).thenReturn(store);
  VMTemplateVO template=mock(VMTemplateVO.class);
  when(template.getId()).thenReturn(1l);
  when(template.getName()).thenReturn("Test Template");
  when(template.getFormat()).thenReturn(ImageFormat.QCOW2);
  when(template.getAccountId()).thenReturn(1l);
  when(template.getUuid()).thenReturn("Test UUID");
  TemplateProfile profile=mock(TemplateProfile.class);
  when(profile.getTemplate()).thenReturn(template);
  when(profile.getZoneId()).thenReturn(1l);
  TemplateApiResult result=mock(TemplateApiResult.class);
  when(result.isSuccess()).thenReturn(true);
  when(result.isFailed()).thenReturn(false);
  @SuppressWarnings("unchecked") AsyncCallFuture<TemplateApiResult> future=mock(AsyncCallFuture.class);
  when(future.get()).thenReturn(result);
  AccountVO acct=mock(AccountVO.class);
  when(acct.getId()).thenReturn(1l);
  when(acct.getDomainId()).thenReturn(1l);
  when(_templateMgr.getImageStoreByTemplate(anyLong(),anyLong())).thenReturn(Collections.singletonList((DataStore)store));
  when(_templateStoreDao.listByTemplateStore(anyLong(),anyLong())).thenReturn(Collections.singletonList(dataStoreVO));
  when(_dataFactory.getTemplate(anyLong(),any(DataStore.class))).thenReturn(info);
  when(_dataFactory.listTemplateOnCache(anyLong())).thenReturn(Collections.singletonList(info));
  when(_templateService.deleteTemplateAsync(any(TemplateInfo.class))).thenReturn(future);
  when(_accountDao.findById(anyLong())).thenReturn(acct);
  when(_accountDao.findByIdIncludingRemoved(anyLong())).thenReturn(acct);
  setupUsageUtils();
  _adapter.delete(profile);
  Assert.assertNotNull(usageEvents);
  Assert.assertNotNull(events);
  Assert.assertEquals(1,events.size());
  Event event=events.get(0);
  Assert.assertNotNull(event);
  Assert.assertNotNull(event.getResourceType());
  Assert.assertEquals(VirtualMachineTemplate.class.getName(),event.getResourceType());
  Assert.assertNotNull(event.getResourceUUID());
  Assert.assertEquals("Test UUID",event.getResourceUUID());
  Assert.assertEquals(EventTypes.EVENT_TEMPLATE_DELETE,event.getEventType());
  cleanupUsageUtils();
}
