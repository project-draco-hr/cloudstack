{
  final Long podId=cmd.getPodId();
  final String startIp=cmd.getStartIp();
  String endIp=cmd.getEndIp();
  final Integer vlan=cmd.getVlan();
  final String netmask=cmd.getNetmask();
  if (endIp == null) {
    endIp=startIp;
  }
  if (!NetUtils.isValidNetmask(netmask)) {
    throw new CloudRuntimeException("Invalid netmask:" + netmask);
  }
  HostPodVO pod=_podDao.findById(podId);
  if (pod == null) {
    throw new CloudRuntimeException("Cannot find pod " + podId);
  }
  final Long zoneId=pod.getDataCenterId();
  List<NetworkVO> nws=_networkDao.listByZoneAndTrafficType(zoneId,TrafficType.Storage);
  if (nws.size() == 0) {
    throw new CloudRuntimeException("Cannot find storage network in zone " + zoneId);
  }
  if (nws.size() > 1) {
    throw new CloudRuntimeException("Find more than one storage network in zone " + zoneId + ","+ nws.size()+ " found");
  }
  final NetworkVO nw=nws.get(0);
  checkOverlapPrivateIpRange(podId,startIp,endIp);
  checkOverlapStorageIpRange(podId,startIp,endIp);
  StorageNetworkIpRangeVO range=null;
  final String endIpFinal=endIp;
  return Transaction.executeWithException(new TransactionCallbackWithException<StorageNetworkIpRangeVO>(){
    @Override public StorageNetworkIpRangeVO doInTransaction(    TransactionStatus status) throws SQLException {
      StorageNetworkIpRangeVO range=new StorageNetworkIpRangeVO(zoneId,podId,nw.getId(),startIp,endIpFinal,vlan,netmask,cmd.getGateWay());
      _sNwIpRangeDao.persist(range);
      try {
        createStorageIpEntires(TransactionLegacy.currentTxn(),range.getId(),startIp,endIpFinal,zoneId);
      }
 catch (      SQLException e) {
        StringBuilder err=new StringBuilder();
        err.append("Create storage network range failed.");
        err.append("startIp=" + startIp);
        err.append("endIp=" + endIpFinal);
        err.append("netmask=" + netmask);
        err.append("zoneId=" + zoneId);
        s_logger.debug(err.toString(),e);
        throw e;
      }
      return range;
    }
  }
,SQLException.class);
}
