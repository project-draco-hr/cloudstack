{
  final Integer vlan=cmd.getVlan();
  final Long rangeId=cmd.getId();
  String startIp=cmd.getStartIp();
  String endIp=cmd.getEndIp();
  final String netmask=cmd.getNetmask();
  if (netmask != null && !NetUtils.isValidNetmask(netmask)) {
    throw new CloudRuntimeException("Invalid netmask:" + netmask);
  }
  if (_sNwIpDao.countInUseIpByRangeId(rangeId) > 0) {
    throw new CloudRuntimeException("Cannot update the range," + getInUseIpAddress(rangeId));
  }
  StorageNetworkIpRangeVO range=_sNwIpRangeDao.findById(rangeId);
  if (range == null) {
    throw new CloudRuntimeException("Cannot find storage ip range " + rangeId);
  }
  if (startIp != null || endIp != null) {
    long podId=range.getPodId();
    startIp=startIp == null ? range.getStartIp() : startIp;
    endIp=endIp == null ? range.getEndIp() : endIp;
    checkOverlapPrivateIpRange(podId,startIp,endIp);
    checkOverlapStorageIpRange(podId,startIp,endIp);
  }
  final String startIpFinal=startIp;
  final String endIpFinal=endIp;
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      StorageNetworkIpRangeVO range=null;
      try {
        range=_sNwIpRangeDao.acquireInLockTable(rangeId);
        if (range == null) {
          throw new CloudRuntimeException("Cannot acquire lock on storage ip range " + rangeId);
        }
        StorageNetworkIpRangeVO vo=_sNwIpRangeDao.createForUpdate();
        if (vlan != null) {
          vo.setVlan(vlan);
        }
        if (startIpFinal != null) {
          vo.setStartIp(startIpFinal);
        }
        if (endIpFinal != null) {
          vo.setEndIp(endIpFinal);
        }
        if (netmask != null) {
          vo.setNetmask(netmask);
        }
        _sNwIpRangeDao.update(rangeId,vo);
      }
  finally {
        if (range != null) {
          _sNwIpRangeDao.releaseFromLockTable(range.getId());
        }
      }
    }
  }
);
  return _sNwIpRangeDao.findById(rangeId);
}
