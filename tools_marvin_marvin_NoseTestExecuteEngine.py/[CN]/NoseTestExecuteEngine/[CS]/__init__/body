def __init__(self, testclient=None, workingdir=None, clientLog=None, resultLog=None, format='text'):
    self.testclient = testclient
    self.logformat = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    self.suite = []
    realPath = os.path.abspath(workingdir)
    if (clientLog is not None):
        self.logfile = clientLog
        self.logger = logging.getLogger('NoseTestExecuteEngine')
        fh = logging.FileHandler(self.logfile)
        fh.setFormatter(self.logformat)
        self.logger.addHandler(fh)
        self.logger.setLevel(logging.DEBUG)
    if (resultLog is not None):
        ch = logging.StreamHandler()
        ch.setLevel(logging.ERROR)
        ch.setFormatter(self.logformat)
        self.logger.addHandler(ch)
        fp = open(resultLog, 'w')
        self.testResultLogFile = fp
    else:
        self.testResultLogFile = sys.stdout
    if ((workingdir is not None) and os.path.exists(((realPath + '/') + '__init__.py'))):
        self.loader = nose.loader.TestLoader()
        [self.suite.append(test) for test in self.loader.discover(workingdir, 'test*.py')]
        for test in self.suite:
            self.injectTestCase(test)
        print self.suite[0].countTestCases()
    else:
        raise Exception('Single module test runs unsupported using Nose')
    if (format == 'text'):
        self.runner = nose.core.TextTestRunner(stream=self.testResultLogFile, descriptions=1, verbosity=2, config=None)
    else:
        raise Exception('XML runner not supported under nose')
