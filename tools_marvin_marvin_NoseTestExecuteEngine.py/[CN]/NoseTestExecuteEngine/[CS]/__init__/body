def __init__(self, testclient=None, workingdir=None, filename=None, clientLog=None, resultLog=None, format='text', xmlDir='xml-reports'):
    self.testclient = testclient
    self.logformat = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    self.suite = []
    if (clientLog is not None):
        self.logfile = clientLog
        self.logger = logging.getLogger('NoseTestExecuteEngine')
        fh = logging.FileHandler(self.logfile)
        fh.setFormatter(self.logformat)
        self.logger.addHandler(fh)
        self.logger.setLevel(logging.DEBUG)
    if (resultLog is not None):
        ch = logging.StreamHandler()
        ch.setLevel(logging.ERROR)
        ch.setFormatter(self.logformat)
        self.logger.addHandler(ch)
        fp = open(resultLog, 'w')
        self.testResultLogFile = fp
    else:
        self.testResultLogFile = sys.stderr
    if (workingdir is not None):
        self.workingdir = workingdir
        self.test_picker = MarvinPlugin()
        self.test_picker.setClient(self.testclient)
        self.test_picker.setClientLog(self.logfile)
    elif (filename is not None):
        self.test_picker = MarvinPlugin()
        self.test_picker.setClient(self.testclient)
        self.test_picker.setClientLog(self.logfile)
        self.filename = filename
    else:
        raise EnvironmentError('Need to give either a test directory or a test file')
    plug_mgr = nose.plugins.manager.PluginManager()
    plug_mgr.addPlugin(self.test_picker)
    plug_mgr.addPlugin(Xunit())
    plug_mgr.addPlugin(AttributeSelector())
    plug_mgr.addPlugin(MultiProcessTestRunner())
    self.cfg = nose.config.Config()
    self.cfg.plugins = plug_mgr
    if (format == 'text'):
        self.runner = nose.core.TextTestRunner(stream=self.testResultLogFile, descriptions=1, verbosity=2, config=self.cfg)
    else:
        self.runner = xmlrunner.XMLTestRunner(output=xmlDir, verbose=True)
