{
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobExecutorContext context=asyncMgr.getExecutorContext();
  ManagementServer managerServer=context.getManagementServer();
  StorageManager storageManager=context.getStorageMgr();
  AccountManager accountManager=context.getAccountMgr();
  if (getSyncSource() == null) {
    SnapshotOperationParam param=gson.fromJson(job.getCmdInfo(),SnapshotOperationParam.class);
    asyncMgr.syncAsyncJobExecution(job.getId(),"Volume",param.getVolumeId());
    return true;
  }
 else {
    SnapshotOperationParam param=gson.fromJson(job.getCmdInfo(),SnapshotOperationParam.class);
    VolumeVO volume=null;
    Long jobId=getJob().getId();
    int result=AsyncJobResult.STATUS_FAILED;
    int errorCode=BaseCmd.INTERNAL_ERROR;
    Object resultObject="Failed to create volume from snapshot: " + param.getSnapshotId();
    try {
      long accountId=param.getAccountId();
      long userId=param.getUserId();
      long snapshotId=param.getSnapshotId();
      String volumeName=param.getName();
      Snapshot snapshot=managerServer.findSnapshotById(snapshotId);
      if (snapshot == null) {
        throw new InvalidParameterValueException("The snapshot was deleted after createVolumeFromSnapshot command was issued.");
      }
      AccountVO account=(AccountVO)managerServer.findAccountById(snapshot.getAccountId());
      if (accountManager.resourceLimitExceeded(account,ResourceType.volume)) {
        ResourceAllocationException rae=new ResourceAllocationException("Maximum number of volumes for account: " + account.getAccountName() + " has been exceeded.");
        rae.setResourceType("volume");
        throw rae;
      }
      volume=storageManager.createVolumeFromSnapshot(userId,accountId,snapshotId,volumeName,param.getEventId());
      if (volume != null && volume.getStatus() == AsyncInstanceCreateStatus.Created) {
        result=AsyncJobResult.STATUS_SUCCEEDED;
        errorCode=0;
        resultObject=composeResultObject(volume);
        accountManager.incrementResourceCount(accountId,ResourceType.volume);
      }
    }
 catch (    Exception e) {
      resultObject=(String)resultObject + ", reason: " + e.getMessage();
      s_logger.warn(resultObject,e);
    }
    asyncMgr.completeAsyncJob(jobId,result,errorCode,resultObject);
    return true;
  }
}
