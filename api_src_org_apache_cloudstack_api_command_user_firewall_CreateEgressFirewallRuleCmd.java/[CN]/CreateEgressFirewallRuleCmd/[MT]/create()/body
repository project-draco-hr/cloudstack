{
  if (getSourceCidrList() != null) {
    String guestCidr=_networkService.getNetwork(getNetworkId()).getCidr();
    for (    String cidr : getSourceCidrList()) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,"Source cidrs formatting error " + cidr);
      }
      if (cidr.equals(NetUtils.ALL_CIDRS)) {
        continue;
      }
      if (!NetUtils.isNetworkAWithinNetworkB(cidr,guestCidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,cidr + " is not within the guest cidr " + guestCidr);
      }
    }
  }
  if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {
    if (getSourcePortStart() != null && getSourcePortEnd() != null) {
      throw new InvalidParameterValueException("Do not pass ports to protocol ALL, porotocol ALL do not require ports. Unable to create " + "firewall rule for the network id=" + networkId);
    }
  }
  if (getVpcId() != null) {
    throw new InvalidParameterValueException("Unable to create firewall rule for the network id=" + networkId + " as firewall egress rule can be created only for non vpc networks.");
  }
  try {
    FirewallRule result=_firewallService.createEgressFirewallRule(this);
    if (result != null) {
      setEntityId(result.getId());
      setEntityUuid(result.getUuid());
    }
  }
 catch (  NetworkRuleConflictException ex) {
    s_logger.info("Network rule conflict: " + ex.getMessage());
    s_logger.trace("Network Rule Conflict: ",ex);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,ex.getMessage());
  }
}
