{
  long snapshotId=srcData.getId();
  SnapshotVO snapshot=snapshotDao.findById(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException("Unable to find Snapshot for Id " + srcData.getId());
  }
  Long zoneId=snapshot.getDataCenterId();
  HostVO secondaryStorageHost=this.templateMgr.getSecondaryStorageHost(zoneId);
  String secondaryStorageURL=snapshotMgr.getSecondaryStorageURL(snapshot);
  VMTemplateVO template=this.templateDao.findById(destData.getId());
  String name=template.getName();
  String backupSnapshotUUID=snapshot.getBackupSnapshotId();
  if (backupSnapshotUUID == null) {
    throw new CloudRuntimeException("Unable to create private template from snapshot " + snapshotId + " due to there is no backupSnapshotUUID for this snapshot");
  }
  Long dcId=snapshot.getDataCenterId();
  Long accountId=snapshot.getAccountId();
  Long volumeId=snapshot.getVolumeId();
  String origTemplateInstallPath=null;
  List<StoragePoolVO> pools=this.storagMgr.ListByDataCenterHypervisor(zoneId,snapshot.getHypervisorType());
  if (pools == null || pools.size() == 0) {
    throw new CloudRuntimeException("Unable to find storage pools in zone " + zoneId);
  }
  StoragePoolVO poolvo=pools.get(0);
  StoragePool pool=(StoragePool)this.dataStoreMgr.getDataStore(poolvo.getId(),DataStoreRole.Primary);
  if (snapshot.getVersion() != null && snapshot.getVersion().equalsIgnoreCase("2.1")) {
    VolumeVO volume=this.volDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to unable to find orignal volume:"+ volumeId+ ", try it later ");
    }
    if (volume.getTemplateId() == null) {
      snapshotDao.updateSnapshotVersion(volumeId,"2.1","2.2");
    }
 else {
      template=templateDao.findByIdIncludingRemoved(volume.getTemplateId());
      if (template == null) {
        throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to unalbe to find orignal template :"+ volume.getTemplateId()+ ", try it later ");
      }
      Long origTemplateId=template.getId();
      Long origTmpltAccountId=template.getAccountId();
      if (!this.volDao.lockInLockTable(volumeId.toString(),10)) {
        throw new CloudRuntimeException("failed to upgrade snapshot " + snapshotId + " due to volume:"+ volumeId+ " is being used, try it later ");
      }
      UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStorageURL,dcId,accountId,volumeId,origTemplateId,origTmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),"2.1");
      if (!this.volDao.lockInLockTable(volumeId.toString(),10)) {
        throw new CloudRuntimeException("Creating template failed due to volume:" + volumeId + " is being used, try it later ");
      }
      Answer answer=null;
      try {
        answer=this.storagMgr.sendToPool(pool,cmd);
        cmd=null;
      }
 catch (      StorageUnavailableException e) {
      }
 finally {
        this.volDao.unlockFromLockTable(volumeId.toString());
      }
      if ((answer != null) && answer.getResult()) {
        snapshotDao.updateSnapshotVersion(volumeId,"2.1","2.2");
      }
 else {
        throw new CloudRuntimeException("Unable to upgrade snapshot");
      }
    }
  }
  if (snapshot.getSwiftId() != null && snapshot.getSwiftId() != 0) {
    snapshotMgr.downloadSnapshotsFromSwift(snapshot);
  }
  String value=configDao.getValue(Config.CreatePrivateTemplateFromSnapshotWait.toString());
  int _createprivatetemplatefromsnapshotwait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreatePrivateTemplateFromSnapshotWait.getDefaultValue()));
  CreatePrivateTemplateFromSnapshotCommand cmd=new CreatePrivateTemplateFromSnapshotCommand(pool,secondaryStorageURL,dcId,accountId,snapshot.getVolumeId(),backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,template.getId(),name,_createprivatetemplatefromsnapshotwait);
  return sendCommand(cmd,pool,template.getId(),dcId,secondaryStorageHost.getId());
}
