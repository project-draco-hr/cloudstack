{
  if (clz.getSuperclass() != null)   serializeFrom(object,clz.getSuperclass(),node);
  Field[] fields=clz.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    if ((f.getModifiers() & Modifier.STATIC) == 0) {
      f.setAccessible(true);
      Class<?> fieldType=f.getType();
      XElement elem=f.getAnnotation(XElement.class);
      if (elem == null)       continue;
      try {
        if (fieldType.isPrimitive()) {
          setPrimitiveField(f,object,XmlHelper.getChildNodeTextContent(node,elem.name()));
        }
 else         if (fieldType.getSuperclass() == Number.class) {
          setNumberField(f,object,XmlHelper.getChildNodeTextContent(node,elem.name()));
        }
 else         if (fieldType == String.class) {
          f.set(object,XmlHelper.getChildNodeTextContent(node,elem.name()));
        }
 else         if (fieldType == Date.class) {
          setDateField(f,object,XmlHelper.getChildNodeTextContent(node,elem.name()));
        }
 else         if (fieldType == Calendar.class) {
          setCalendarField(f,object,XmlHelper.getChildNodeTextContent(node,elem.name()));
        }
 else         if (fieldType.isArray()) {
          if (flattenField(f))           setArrayField(f,object,node,elem.item(),elem.itemClass());
 else           setArrayField(f,object,XmlHelper.getChildNode(node,elem.name()),elem.item(),elem.itemClass());
        }
 else         if (Collection.class.isAssignableFrom(fieldType)) {
          if (flattenField(f))           setCollectionField(f,object,node,elem.item(),elem.itemClass());
 else           setCollectionField(f,object,XmlHelper.getChildNode(node,elem.name()),elem.item(),elem.itemClass());
        }
 else {
          Node childNode=XmlHelper.getChildNode(node,elem.name());
          Object fieldObject=f.get(object);
          if (fieldObject == null) {
            try {
              fieldObject=fieldType.newInstance();
            }
 catch (            InstantiationException e) {
              logger.error("Unable to instantiate " + fieldType.getName() + " object, please make sure it has public constructor");
              assert(false);
            }
            f.set(object,fieldObject);
          }
          serializeFrom(fieldObject,fieldType,childNode);
        }
      }
 catch (      IllegalArgumentException e) {
        logger.error("Unexpected exception " + e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        logger.error("Unexpected exception " + e.getMessage(),e);
      }
    }
  }
}
