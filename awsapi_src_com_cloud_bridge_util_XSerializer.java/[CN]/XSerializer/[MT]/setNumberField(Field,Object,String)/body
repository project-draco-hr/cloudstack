{
  String clzName=f.getType().getName();
  if (clzName.equals("Byte")) {
    byte value=0;
    if (valueContent != null)     value=Byte.parseByte(valueContent);
    f.set(object,new Byte(value));
  }
 else   if (clzName.equals("Short")) {
    short value=0;
    if (valueContent != null)     value=Short.parseShort(valueContent);
    f.set(object,new Short(value));
  }
 else   if (clzName.equals("Integer")) {
    int value=0;
    if (valueContent != null)     value=Integer.parseInt(valueContent);
    f.set(object,new Integer(value));
  }
 else   if (clzName.equals("Long")) {
    long value=0;
    if (valueContent != null)     value=Long.parseLong(valueContent);
    f.set(object,new Long(value));
  }
 else   if (clzName.equals("Float")) {
    float value=0;
    if (valueContent != null)     value=Float.parseFloat(valueContent);
    f.set(object,new Float(value));
  }
 else   if (clzName.equals("Double")) {
    double value=0;
    if (valueContent != null)     value=Double.parseDouble(valueContent);
    f.setDouble(object,new Double(value));
  }
 else   if (clzName.equals("AtomicInteger")) {
    int value=0;
    if (valueContent != null)     value=Integer.parseInt(valueContent);
    f.set(object,new AtomicInteger(value));
  }
 else   if (clzName.equals("AtomicLong")) {
    long value=0;
    if (valueContent != null)     value=Long.parseLong(valueContent);
    f.set(object,new AtomicLong(value));
  }
 else   if (clzName.equals("BigInteger")) {
    logger.error("we don't support BigInteger for now");
    assert(false);
  }
 else   if (clzName.equals("BigDecimal")) {
    logger.error("we don't support BigInteger for now");
    assert(false);
  }
 else {
    logger.error("Assertion failed at setPrimitiveFiled");
    assert(false);
  }
}
