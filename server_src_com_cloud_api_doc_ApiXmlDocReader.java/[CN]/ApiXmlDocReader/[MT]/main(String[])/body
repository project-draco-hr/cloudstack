{
  String newFile="";
  String oldFile="";
  HashMap<String,Command> commands=new HashMap<String,Command>();
  HashMap<String,Command> oldCommands=new HashMap<String,Command>();
  ArrayList<Command> newCommands=new ArrayList<Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias("command",Command.class);
  xs.alias("arg",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals("-new")) {
      newFile=iter.next();
    }
    if (arg.equals("-old")) {
      oldFile=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  Iterator i=commands.keySet().iterator();
  while (i.hasNext()) {
    String key=(String)i.next();
    if (!oldCommands.containsKey(key)) {
      newCommands.add(commands.get(key));
    }
 else {
      commands.get(key).compareArguments(oldCommands.get(key));
    }
  }
  for (  Command c : newCommands) {
    System.out.println(c.getName());
  }
}
