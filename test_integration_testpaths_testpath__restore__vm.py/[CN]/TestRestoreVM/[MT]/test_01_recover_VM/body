@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_recover_VM(self):
    ' Test Restore VM on VMWare\n            1. Deploy a VM without datadisk\n            2. Restore the VM\n            3. Verify that VM comes up in Running state\n        '
    try:
        self.pools = StoragePool.list(self.apiclient, zoneid=self.zone.id, scope='CLUSTER')
        if (len(self.pools) < 2):
            self.skipTest('There must be at atleast two cluster wide                storage pools available in the setup')
    except Exception as e:
        self.skipTest(e)
    cluster_no = 1
    self.debug(('Storage Pools: %s' % self.pools))
    for storagePool in self.pools:
        if (storagePool.scope == 'CLUSTER'):
            StoragePool.update(self.apiclient, id=storagePool.id, tags=[(CLUSTERTAG1[:(-1)] + repr(cluster_no))])
            cluster_no += 1
    self.vm = VirtualMachine.create(self.apiclient, self.testdata['small'], accountid=self.account.name, templateid=self.template.id, domainid=self.account.domainid, serviceofferingid=self.service_offering_cwps.id, zoneid=self.zone.id)
    volumes_root_list = list_volumes(self.apiclient, virtualmachineid=self.vm.id, type=ROOT, listall=True)
    root_volume = volumes_root_list[0]
    while True:
        self.vm.restore(self.apiclient)
        volumes_root_list = list_volumes(self.apiclient, virtualmachineid=self.vm.id, type=ROOT, listall=True)
        root_volume = volumes_root_list[0]
        if (root_volume.storage != self.pools[0].name):
            break
    vm_list = list_virtual_machines(self.apiclient, id=self.vm.id)
    state = vm_list[0].state
    i = 0
    while (state != 'Running'):
        vm_list = list_virtual_machines(self.apiclient, id=self.vm.id)
        time.sleep(10)
        i = (i + 1)
        state = vm_list[0].state
        if (i >= 10):
            self.fail('Restore VM Failed')
            break
    return
