@attr(tags=['simulator', 'basic', 'advanced'], required_hardware='false')
def test_07_list_all_vms_in_aff_grp(self):
    '\n          List affinity group should list all for a vms associated with that group for projects\n        '
    aff_grp = self.create_aff_grp(self.account_api_client)
    (vm1, hostid1) = self.create_vm_in_aff_grps(ag_list=[aff_grp.name])
    (vm2, hostid2) = self.create_vm_in_aff_grps(ag_list=[aff_grp.name])
    list_aff_grps = AffinityGroup.list(self.api_client, id=aff_grp.id, projectid=self.project.id)
    self.assertEqual(list_aff_grps[0].name, aff_grp.name, 'Listing Affinity Group by id failed')
    self.assertEqual(list_aff_grps[0].virtualmachineIds[0], vm1.id, ("List affinity group response.virtualmachineIds for group: %s doesn't contain vmid : %s" % (aff_grp.name, vm1.id)))
    self.assertEqual(list_aff_grps[0].virtualmachineIds[1], vm2.id, ("List affinity group response.virtualmachineIds for group: %s doesn't contain vmid : %s" % (aff_grp.name, vm2.id)))
    vm1.delete(self.api_client)
    vm2.delete(self.api_client)
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    self.cleanup.append(aff_grp)
