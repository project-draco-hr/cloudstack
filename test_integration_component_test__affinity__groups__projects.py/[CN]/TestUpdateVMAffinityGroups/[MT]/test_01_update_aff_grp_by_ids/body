@attr(tags=['simulator', 'basic', 'advanced', 'multihost'], required_hardware='false')
def test_01_update_aff_grp_by_ids(self):
    '\n           Update the list of affinityGroups by using affinity groupids\n\n        '
    aff_grp1 = self.create_aff_grp(self.account_api_client)
    aff_grp2 = self.create_aff_grp(self.account_api_client)
    (vm1, hostid1) = self.create_vm_in_aff_grps(ag_list=[aff_grp1.name])
    (vm2, hostid2) = self.create_vm_in_aff_grps(ag_list=[aff_grp1.name])
    vm1.stop(self.api_client)
    list_aff_grps = AffinityGroup.list(self.api_client, projectid=self.project.id)
    self.assertEqual(len(list_aff_grps), 2, '2 affinity groups should be present')
    vm1.update_affinity_group(self.api_client, affinitygroupids=[list_aff_grps[0].id, list_aff_grps[1].id])
    list_aff_grps = AffinityGroup.list(self.api_client, virtualmachineid=vm1.id)
    list_aff_grps_names = [list_aff_grps[0].name, list_aff_grps[1].name]
    aff_grps_names = [aff_grp1.name, aff_grp2.name]
    aff_grps_names.sort()
    list_aff_grps_names.sort()
    self.assertEqual(aff_grps_names, list_aff_grps_names, ('One of the Affinity Groups is missing %s' % list_aff_grps_names))
    vm1.start(self.api_client)
    vm_status = VirtualMachine.list(self.api_client, id=vm1.id)
    self.assertNotEqual(vm_status[0].hostid, hostid2, ('The virtual machine started on host %s violating the host anti-affinity rule' % vm_status[0].hostid))
    vm1.delete(self.api_client)
    vm2.delete(self.api_client)
    wait_for_cleanup(self.apiclient, ['expunge.delay', 'expunge.interval'])
    aff_grp1.delete(self.api_client)
    aff_grp2.delete(self.api_client)
