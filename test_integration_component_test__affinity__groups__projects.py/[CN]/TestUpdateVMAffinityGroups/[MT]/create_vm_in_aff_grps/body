def create_vm_in_aff_grps(self, api_client=None, ag_list=[], projectid=None):
    self.debug(('Creating VM in AffinityGroups=%s' % ag_list))
    if (api_client is None):
        api_client = self.api_client
    if (projectid is None):
        projectid = self.project.id
    vm = VirtualMachine.create(api_client, self.services['virtual_machine'], projectid=projectid, templateid=self.template.id, serviceofferingid=self.service_offering.id, affinitygroupnames=ag_list)
    self.debug(('Created VM=%s in Affinity Group=%s' % (vm.id, tuple(ag_list))))
    list_vm = list_virtual_machines(self.api_client, id=vm.id, projectid=projectid)
    self.assertEqual(isinstance(list_vm, list), True, ('Check list response returns an invalid list %s' % list_vm))
    self.assertNotEqual(len(list_vm), 0, 'Check VM available in TestDeployVMAffinityGroups')
    self.assertEqual(list_vm[0].id, vm.id, 'Listed vm does not have the same ids')
    vm_response = list_vm[0]
    self.assertEqual(vm.state, 'Running', msg='VM is not in Running state')
    self.assertEqual(vm.projectid, projectid, msg='VM is not in project')
    self.assertNotEqual(vm_response.hostid, None, ('Host id was null for vm %s' % vm_response))
    return (vm, vm_response.hostid)
