{
  if (pubKey.getAlgorithm() != privKey.getAlgorithm())   throw new IllegalArgumentException("Public and private key have different algorithms");
  if (pubKey.getAlgorithm() != "RSA")   return;
  try {
    String data="ENCRYPT_DATA";
    SecureRandom random=new SecureRandom();
    Cipher cipher=Cipher.getInstance(pubKey.getAlgorithm());
    cipher.init(Cipher.ENCRYPT_MODE,privKey,random);
    byte[] encryptedData=cipher.doFinal(data.getBytes());
    cipher.init(Cipher.DECRYPT_MODE,pubKey,random);
    String decreptedData=new String(cipher.doFinal(encryptedData));
    if (!decreptedData.equals(data))     throw new IllegalArgumentException("Bad public-private key");
  }
 catch (  BadPaddingException e) {
    throw new IllegalArgumentException("Bad public-private key");
  }
catch (  IllegalBlockSizeException e) {
    throw new IllegalArgumentException("Bad public-private key");
  }
catch (  NoSuchPaddingException e) {
    throw new IllegalArgumentException("Bad public-private key");
  }
catch (  InvalidKeyException e) {
    throw new IllegalArgumentException("Invalid public-private key");
  }
catch (  NoSuchAlgorithmException e) {
    throw new IllegalArgumentException("Invalid algorithm for public-private key");
  }
}
