{
  List<? extends StoragePoolVO> pools=(List<? extends StoragePoolVO>)getResponseObject();
  List<StoragePoolResponse> response=new ArrayList<StoragePoolResponse>();
  for (  StoragePoolVO pool : pools) {
    StoragePoolResponse poolResponse=new StoragePoolResponse();
    poolResponse.setId(pool.getId());
    poolResponse.setName(pool.getName());
    poolResponse.setPath(pool.getPath());
    poolResponse.setIpAddress(pool.getHostAddress());
    poolResponse.setZoneId(pool.getDataCenterId());
    poolResponse.setZoneName(getManagementServer().getDataCenterBy(pool.getDataCenterId()).getName());
    if (pool.getPoolType() != null) {
      poolResponse.setType(pool.getPoolType().toString());
    }
    if (pool.getPodId() != null) {
      poolResponse.setPodId(pool.getPodId());
      poolResponse.setPodName(getManagementServer().getPodBy(pool.getPodId()).getName());
    }
    if (pool.getCreated() != null) {
      poolResponse.setCreated(pool.getCreated());
    }
    StorageStats stats=getManagementServer().getStoragePoolStatistics(pool.getId());
    long capacity=pool.getCapacityBytes();
    long available=pool.getAvailableBytes();
    long used=capacity - available;
    if (stats != null) {
      used=stats.getByteUsed();
      available=capacity - used;
    }
    poolResponse.setDiskSizeTotal(pool.getCapacityBytes());
    poolResponse.setDiskSizeAllocated(used);
    if (pool.getClusterId() != null) {
      ClusterVO cluster=getManagementServer().findClusterById(pool.getClusterId());
      poolResponse.setClusterId(cluster.getId());
      poolResponse.setClusterName(cluster.getName());
    }
    poolResponse.setTags(getManagementServer().getStoragePoolTags(pool.getId()));
    response.add(poolResponse);
  }
  return SerializerHelper.toSerializedString(response);
}
