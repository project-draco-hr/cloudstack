{
  Network network=mock(Network.class);
  when(network.getDataCenterId()).thenReturn(zoneId);
  when(network.getId()).thenReturn(1l);
  NicProfile nic=new NicProfile();
  nic.setIPv4Address("10.11.12.13");
  VirtualMachineProfile vm=mock(VirtualMachineProfile.class);
  when(vm.getHostName()).thenReturn("vm-name");
  when(vm.getType()).thenReturn(VirtualMachine.Type.User);
  DataCenterVO dataCenterVO=mock(DataCenterVO.class);
  when(dataCenterVO.getId()).thenReturn(zoneId);
  when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);
  ReservationContext context=new ReservationContextImpl(null,null,user);
  HostVO hostVO=mock(HostVO.class);
  when(hostVO.getId()).thenReturn(globoDnsHostId);
  when(_hostDao.findByTypeNameAndZoneId(eq(zoneId),eq(Provider.GloboDns.getName()),eq(Type.L2Networking))).thenReturn(hostVO);
  when(_agentMgr.easySend(eq(globoDnsHostId),isA(RemoveRecordCommand.class))).then(new org.mockito.stubbing.Answer<Answer>(){
    @Override public Answer answer(    InvocationOnMock invocation) throws Throwable {
      Command cmd=(Command)invocation.getArguments()[1];
      return new Answer(cmd);
    }
  }
);
  _globodnsElement.release(network,nic,vm,context);
  verify(_agentMgr,times(1)).easySend(eq(globoDnsHostId),isA(RemoveRecordCommand.class));
}
