{
  s_logger.info("Start console proxy with context");
  if (conf != null) {
    for (    Object key : conf.keySet()) {
      s_logger.info("Context property " + (String)key + ": "+ conf.getProperty((String)key));
    }
  }
  configLog4j();
  Logger.setFactory(new ConsoleProxyLoggerFactory());
  ConsoleProxy.context=context;
  try {
    Class<?> contextClazz=Class.forName("com.cloud.agent.resource.consoleproxy.ConsoleProxyResource");
    authMethod=contextClazz.getDeclaredMethod("authenticateConsoleAccess",String.class,String.class,String.class,String.class,String.class);
    reportMethod=contextClazz.getDeclaredMethod("reportLoadInfo",String.class);
    ensureRouteMethod=contextClazz.getDeclaredMethod("ensureRoute",String.class);
  }
 catch (  SecurityException e) {
    s_logger.error("Unable to setup private channel due to SecurityException",e);
  }
catch (  NoSuchMethodException e) {
    s_logger.error("Unable to setup private channel due to NoSuchMethodException",e);
  }
catch (  IllegalArgumentException e) {
    s_logger.error("Unable to setup private channel due to IllegalArgumentException",e);
  }
catch (  ClassNotFoundException e) {
    s_logger.error("Unable to setup private channel due to ClassNotFoundException",e);
  }
  InputStream confs=ConsoleProxy.class.getResourceAsStream("/conf/consoleproxy.properties");
  Properties props=new Properties();
  if (confs == null) {
    s_logger.info("Can't load consoleproxy.properties from classpath, will use default configuration");
  }
 else {
    try {
      props.load(confs);
      for (      Object key : props.keySet()) {
        if (conf.get(key) == null)         conf.put(key,props.get(key));
      }
    }
 catch (    Exception e) {
      s_logger.error(e.toString(),e);
    }
  }
  start(conf);
}
