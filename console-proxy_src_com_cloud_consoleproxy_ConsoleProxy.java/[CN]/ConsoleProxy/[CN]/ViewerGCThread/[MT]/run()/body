{
  while (true) {
    cleanupLogging();
    s_logger.info("connMap=" + connMap);
    Enumeration<String> e=connMap.keys();
    while (e.hasMoreElements()) {
      String key;
      ConsoleProxyViewer viewer;
synchronized (connMap) {
        key=e.nextElement();
        viewer=connMap.get(key);
      }
      long seconds_unused=(System.currentTimeMillis() - viewer.lastUsedTime) / 1000;
      if (seconds_unused > viewerLinger / 2 && viewer.clientStream != null) {
        s_logger.info("Pinging client for " + viewer + " which has not been used for "+ seconds_unused+ "sec");
        byte[] bs=new byte[2];
        bs[0]=(byte)250;
        bs[1]=3;
        viewer.writeToClientStream(bs);
      }
      if (seconds_unused < viewerLinger) {
        continue;
      }
synchronized (connMap) {
        connMap.remove(key);
      }
      s_logger.info("Dropping " + viewer + " which has not been used for "+ seconds_unused+ " seconds");
      viewer.dropMe=true;
synchronized (viewer) {
        if (viewer.clientStream != null) {
          try {
            viewer.clientStream.close();
          }
 catch (          IOException ioe) {
          }
          viewer.clientStream=null;
          viewer.clientStreamInfo=null;
        }
        if (viewer.rfb != null) {
          viewer.rfb.close();
        }
      }
      ConsoleProxyStatus status=new ConsoleProxyStatus();
      status.setConnections(ConsoleProxy.connectionMap);
      Gson gson=new GsonBuilder().setPrettyPrinting().create();
      String loadInfo=gson.toJson(status);
      ConsoleProxy.reportLoadInfo(loadInfo);
      if (s_logger.isDebugEnabled())       s_logger.debug("Report load change : " + loadInfo);
    }
    try {
      Thread.sleep(30000);
    }
 catch (    InterruptedException exp) {
    }
  }
}
