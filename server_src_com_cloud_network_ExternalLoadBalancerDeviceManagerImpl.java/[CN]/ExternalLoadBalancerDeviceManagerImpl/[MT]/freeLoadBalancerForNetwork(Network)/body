{
  GlobalLock deviceMapLock=GlobalLock.getInternLock("LoadBalancerAllocLock");
  try {
    if (deviceMapLock.lock(120)) {
      ExternalLoadBalancerDeviceVO lbDevice=Transaction.execute(new TransactionCallback<ExternalLoadBalancerDeviceVO>(){
        @Override public ExternalLoadBalancerDeviceVO doInTransaction(        TransactionStatus status){
          NetworkExternalLoadBalancerVO networkLBDevice=_networkExternalLBDao.findByNetworkId(guestConfig.getId());
          long lbDeviceId=networkLBDevice.getExternalLBDeviceId();
          _networkExternalLBDao.remove(networkLBDevice.getId());
          List<NetworkExternalLoadBalancerVO> ntwksMapped=_networkExternalLBDao.listByLoadBalancerDeviceId(networkLBDevice.getExternalLBDeviceId());
          ExternalLoadBalancerDeviceVO lbDevice=_externalLoadBalancerDeviceDao.findById(lbDeviceId);
          boolean lbInUse=!(ntwksMapped == null || ntwksMapped.isEmpty());
          boolean lbCloudManaged=lbDevice.getIsManagedDevice();
          if (!lbInUse && !lbCloudManaged) {
            lbDevice.setAllocationState(LBDeviceAllocationState.Free);
            _externalLoadBalancerDeviceDao.update(lbDevice.getId(),lbDevice);
          }
          if (!lbInUse && lbCloudManaged) {
            return lbDevice;
          }
 else {
            return null;
          }
        }
      }
);
      if (lbDevice != null) {
        Host lbHost=_hostDao.findById(lbDevice.getHostId());
        String lbIP=lbHost.getPrivateIpAddress();
        DestroyLoadBalancerApplianceCommand lbDeleteCmd=new DestroyLoadBalancerApplianceCommand(lbIP);
        DestroyLoadBalancerApplianceAnswer answer=null;
        try {
          answer=(DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbDevice.getParentHostId(),lbDeleteCmd);
          if (answer == null || !answer.getResult()) {
            logger.warn("Failed to destoy load balancer appliance used by the network" + guestConfig.getId() + " due to "+ answer == null ? "communication error with agent" : answer.getDetails());
          }
        }
 catch (        Exception e) {
          logger.warn("Failed to destroy load balancer appliance used by the network" + guestConfig.getId() + " due to "+ e.getMessage());
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Successfully destroyed load balancer appliance used for the network" + guestConfig.getId());
        }
        deviceMapLock.unlock();
        deleteExternalLoadBalancer(lbHost.getId());
        _dcDao.releasePrivateIpAddress(lbHost.getPrivateIpAddress(),guestConfig.getDataCenterId(),null);
        DetailVO publicIpDetail=_hostDetailDao.findDetail(lbHost.getId(),"publicip");
        IPAddressVO ipVo=_ipAddressDao.findByIpAndDcId(guestConfig.getDataCenterId(),publicIpDetail.toString());
        _ipAddrMgr.disassociatePublicIpAddress(ipVo.getId(),_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount());
      }
 else {
        deviceMapLock.unlock();
      }
      return true;
    }
 else {
      logger.error("Failed to release load balancer device for the network" + guestConfig.getId() + "as failed to acquire lock ");
      return false;
    }
  }
 catch (  Exception exception) {
    logger.error("Failed to release load balancer device for the network" + guestConfig.getId() + " due to "+ exception.getMessage());
  }
 finally {
    deviceMapLock.releaseRef();
  }
  return false;
}
