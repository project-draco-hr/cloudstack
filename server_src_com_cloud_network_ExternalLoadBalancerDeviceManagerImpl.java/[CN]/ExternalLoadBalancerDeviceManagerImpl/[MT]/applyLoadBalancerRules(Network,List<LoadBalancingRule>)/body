{
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {
    return true;
  }
  ExternalLoadBalancerDeviceVO lbDeviceVO=getExternalLoadBalancerForNetwork(network);
  if (lbDeviceVO == null) {
    logger.warn("There is no external load balancer device assigned to this network either network is not implement are already shutdown so just returning");
    return true;
  }
  HostVO externalLoadBalancer=_hostDao.findById(lbDeviceVO.getHostId());
  boolean externalLoadBalancerIsInline=_networkMgr.isNetworkInlineMode(network);
  if (network.getState() == Network.State.Allocated) {
    logger.debug("External load balancer was asked to apply LB rules for network with ID " + network.getId() + "; this network is not implemented. Skipping backend commands.");
    return true;
  }
  List<LoadBalancerTO> loadBalancersToApply=new ArrayList<LoadBalancerTO>();
  List<MappingState> mappingStates=new ArrayList<MappingState>();
  for (int i=0; i < loadBalancingRules.size(); i++) {
    LoadBalancingRule rule=loadBalancingRules.get(i);
    boolean revoked=(rule.getState().equals(FirewallRule.State.Revoke));
    String protocol=rule.getProtocol();
    String algorithm=rule.getAlgorithm();
    String uuid=rule.getUuid();
    String srcIp=rule.getSourceIp().addr();
    int srcPort=rule.getSourcePortStart();
    List<LbDestination> destinations=rule.getDestinations();
    if (externalLoadBalancerIsInline) {
      long ipId=_networkModel.getPublicIpAddress(rule.getSourceIp().addr(),network.getDataCenterId()).getId();
      MappingNic nic=getLoadBalancingIpNic(zone,network,ipId,revoked,null);
      mappingStates.add(nic.getState());
      Nic loadBalancingIpNic=nic.getNic();
      if (loadBalancingIpNic == null) {
        continue;
      }
      srcIp=loadBalancingIpNic.getIPv4Address();
    }
    if ((destinations != null && !destinations.isEmpty()) || rule.isAutoScaleConfig()) {
      boolean inline=_networkMgr.isNetworkInlineMode(network);
      LoadBalancerTO loadBalancer=new LoadBalancerTO(uuid,srcIp,srcPort,protocol,algorithm,revoked,false,inline,destinations,rule.getStickinessPolicies(),rule.getHealthCheckPolicies(),rule.getLbSslCert(),rule.getLbProtocol());
      if (rule.isAutoScaleConfig()) {
        loadBalancer.setAutoScaleVmGroup(rule.getAutoScaleVmGroup());
      }
      loadBalancersToApply.add(loadBalancer);
    }
  }
  try {
    if (loadBalancersToApply.size() > 0) {
      int numLoadBalancersForCommand=loadBalancersToApply.size();
      LoadBalancerTO[] loadBalancersForCommand=loadBalancersToApply.toArray(new LoadBalancerTO[numLoadBalancersForCommand]);
      LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(loadBalancersForCommand,null);
      long guestVlanTag=Integer.parseInt(BroadcastDomainType.getValue(network.getBroadcastUri()));
      cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
      Answer answer=_agentMgr.easySend(externalLoadBalancer.getId(),cmd);
      if (answer == null || !answer.getResult()) {
        String details=(answer != null) ? answer.getDetails() : "details unavailable";
        String msg="Unable to apply load balancer rules to the external load balancer appliance in zone " + zone.getName() + " due to: "+ details+ ".";
        logger.error(msg);
        throw new ResourceUnavailableException(msg,DataCenter.class,network.getDataCenterId());
      }
    }
  }
 catch (  Exception ex) {
    if (externalLoadBalancerIsInline) {
      logger.error("Rollbacking static nat operation of inline mode load balancing due to error on applying LB rules!");
      String existedGuestIp=loadBalancersToApply.get(0).getSrcIp();
      for (int i=0; i < loadBalancingRules.size(); i++) {
        LoadBalancingRule rule=loadBalancingRules.get(i);
        MappingState state=mappingStates.get(i);
        boolean revoke;
        if (state == MappingState.Create) {
          revoke=true;
        }
 else         if (state == MappingState.Remove) {
          revoke=false;
        }
 else {
          continue;
        }
        long sourceIpId=_networkModel.getPublicIpAddress(rule.getSourceIp().addr(),network.getDataCenterId()).getId();
        getLoadBalancingIpNic(zone,network,sourceIpId,revoke,existedGuestIp);
      }
    }
    throw new ResourceUnavailableException(ex.getMessage(),DataCenter.class,network.getDataCenterId());
  }
  return true;
}
