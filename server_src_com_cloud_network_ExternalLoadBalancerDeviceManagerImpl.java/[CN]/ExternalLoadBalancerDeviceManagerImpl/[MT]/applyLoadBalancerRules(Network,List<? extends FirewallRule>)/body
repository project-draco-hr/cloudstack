{
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  List<LoadBalancingRule> loadBalancingRules=new ArrayList<LoadBalancingRule>();
  for (  FirewallRule rule : rules) {
    if (rule.getPurpose().equals(Purpose.LoadBalancing)) {
      loadBalancingRules.add((LoadBalancingRule)rule);
    }
  }
  if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {
    return true;
  }
  ExternalLoadBalancerDeviceVO lbDeviceVO=getExternalLoadBalancerForNetwork(network);
  if (lbDeviceVO == null) {
    s_logger.warn("There is no external load balancer device assigned to this network either network is not implement are already shutdown so just returning");
    return true;
  }
  HostVO externalLoadBalancer=_hostDao.findById(lbDeviceVO.getHostId());
  boolean externalLoadBalancerIsInline=externalLoadBalancerIsInline(externalLoadBalancer);
  if (network.getState() == Network.State.Allocated) {
    s_logger.debug("External load balancer was asked to apply LB rules for network with ID " + network.getId() + "; this network is not implemented. Skipping backend commands.");
    return true;
  }
  List<LoadBalancerTO> loadBalancersToApply=new ArrayList<LoadBalancerTO>();
  for (int i=0; i < loadBalancingRules.size(); i++) {
    LoadBalancingRule rule=loadBalancingRules.get(i);
    boolean revoked=(rule.getState().equals(FirewallRule.State.Revoke));
    String protocol=rule.getProtocol();
    String algorithm=rule.getAlgorithm();
    String srcIp=_networkMgr.getIp(rule.getSourceIpAddressId()).getAddress().addr();
    int srcPort=rule.getSourcePortStart();
    List<LbDestination> destinations=rule.getDestinations();
    List<String> sourceCidrs=rule.getSourceCidrList();
    if (externalLoadBalancerIsInline) {
      InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByPublicIpAddress(srcIp);
      NicVO loadBalancingIpNic=null;
      HostVO firewallProviderHost=null;
      if (externalLoadBalancerIsInline) {
        firewallProviderHost=getFirewallProviderForNetwork(network);
      }
      if (!revoked) {
        if (mapping == null) {
          String loadBalancingIpAddress=_networkMgr.acquireGuestIpAddress(network,null);
          if (loadBalancingIpAddress == null) {
            String msg="Ran out of guest IP addresses.";
            s_logger.error(msg);
            throw new ResourceUnavailableException(msg,DataCenter.class,network.getDataCenterId());
          }
          loadBalancingIpNic=_nicDao.findByIp4AddressAndNetworkId(loadBalancingIpAddress,network.getId());
          if (loadBalancingIpNic == null) {
            loadBalancingIpNic=savePlaceholderNic(network,loadBalancingIpAddress);
          }
          mapping=new InlineLoadBalancerNicMapVO(rule.getId(),srcIp,loadBalancingIpNic.getId());
          _inlineLoadBalancerNicMapDao.persist(mapping);
          applyStaticNatRuleForInlineLBRule(zone,network,firewallProviderHost,revoked,srcIp,loadBalancingIpNic.getIp4Address());
        }
 else {
          loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
        }
      }
 else {
        if (mapping != null) {
          loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
          applyStaticNatRuleForInlineLBRule(zone,network,firewallProviderHost,revoked,srcIp,loadBalancingIpNic.getIp4Address());
          _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
          _nicDao.expunge(loadBalancingIpNic.getId());
        }
 else {
          s_logger.debug("Revoking a rule for an inline load balancer that has not been programmed yet.");
          continue;
        }
      }
      srcIp=loadBalancingIpNic.getIp4Address();
    }
    if (destinations != null && !destinations.isEmpty()) {
      LoadBalancerTO loadBalancer=new LoadBalancerTO(srcIp,srcPort,protocol,algorithm,revoked,false,destinations);
      loadBalancersToApply.add(loadBalancer);
    }
  }
  if (loadBalancersToApply.size() > 0) {
    int numLoadBalancersForCommand=loadBalancersToApply.size();
    LoadBalancerTO[] loadBalancersForCommand=loadBalancersToApply.toArray(new LoadBalancerTO[numLoadBalancersForCommand]);
    LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(loadBalancersForCommand);
    long guestVlanTag=Integer.parseInt(network.getBroadcastUri().getHost());
    cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
    Answer answer=_agentMgr.easySend(externalLoadBalancer.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      String details=(answer != null) ? answer.getDetails() : "details unavailable";
      String msg="Unable to apply load balancer rules to the external load balancer appliance in zone " + zone.getName() + " due to: "+ details+ ".";
      s_logger.error(msg);
      throw new ResourceUnavailableException(msg,DataCenter.class,network.getDataCenterId());
    }
  }
  return true;
}
