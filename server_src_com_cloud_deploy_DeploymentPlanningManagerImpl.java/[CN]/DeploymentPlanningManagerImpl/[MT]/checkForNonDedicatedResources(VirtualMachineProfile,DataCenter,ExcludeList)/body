{
  boolean isExplicit=false;
  VirtualMachine vm=vmProfile.getVirtualMachine();
  DedicatedResourceVO dedicatedZone=_dedicatedDao.findByZoneId(dc.getId());
  if (dedicatedZone != null && !_accountMgr.isRootAdmin(vmProfile.getOwner().getId())) {
    long accountDomainId=vmProfile.getOwner().getDomainId();
    long accountId=vmProfile.getOwner().getAccountId();
    if (dedicatedZone.getAccountId() != null) {
      if (dedicatedZone.getAccountId().equals(accountId)) {
        return;
      }
 else {
        throw new CloudRuntimeException("Failed to deploy VM, Zone " + dc.getName() + " not available for the user account "+ vmProfile.getOwner());
      }
    }
    if (!_affinityGroupService.isAffinityGroupAvailableInDomain(dedicatedZone.getAffinityGroupId(),accountDomainId)) {
      throw new CloudRuntimeException("Failed to deploy VM, Zone " + dc.getName() + " not available for the user domain "+ vmProfile.getOwner());
    }
  }
  List<AffinityGroupVMMapVO> vmGroupMappings=_affinityGroupVMMapDao.findByVmIdType(vm.getId(),"ExplicitDedication");
  if (vmGroupMappings != null && !vmGroupMappings.isEmpty()) {
    isExplicit=true;
  }
  List<Long> allPodsInDc=_podDao.listAllPods(dc.getId());
  List<Long> allDedicatedPods=_dedicatedDao.listAllPods();
  allPodsInDc.retainAll(allDedicatedPods);
  List<Long> allClustersInDc=_clusterDao.listAllCusters(dc.getId());
  List<Long> allDedicatedClusters=_dedicatedDao.listAllClusters();
  allClustersInDc.retainAll(allDedicatedClusters);
  List<Long> allHostsInDc=_hostDao.listAllHosts(dc.getId());
  List<Long> allDedicatedHosts=_dedicatedDao.listAllHosts();
  allHostsInDc.retainAll(allDedicatedHosts);
  if (vm.getType() == VirtualMachine.Type.User && !isExplicit) {
    avoids.addPodList(allPodsInDc);
    avoids.addClusterList(allClustersInDc);
    avoids.addHostList(allHostsInDc);
  }
  if (vm.getType() == VirtualMachine.Type.DomainRouter) {
    long vmAccountId=vm.getAccountId();
    long vmDomainId=vm.getDomainId();
    List<Long> allPodsFromDedicatedID=new ArrayList<Long>();
    List<Long> allClustersFromDedicatedID=new ArrayList<Long>();
    List<Long> allHostsFromDedicatedID=new ArrayList<Long>();
    List<AffinityGroupDomainMapVO> domainGroupMappings=_affinityGroupDomainMapDao.listByDomain(vmDomainId);
    List<DedicatedResourceVO> tempStorage;
    if (domainGroupMappings == null || domainGroupMappings.isEmpty()) {
      tempStorage=_dedicatedDao.searchDedicatedPods(null,vmDomainId,vmAccountId,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allPodsFromDedicatedID.add(vo.getPodId());
      }
      tempStorage.clear();
      tempStorage=_dedicatedDao.searchDedicatedClusters(null,vmDomainId,vmAccountId,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allClustersFromDedicatedID.add(vo.getClusterId());
      }
      tempStorage.clear();
      tempStorage=_dedicatedDao.searchDedicatedHosts(null,vmDomainId,vmAccountId,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allHostsFromDedicatedID.add(vo.getHostId());
      }
      allPodsInDc.removeAll(allPodsFromDedicatedID);
      allClustersInDc.removeAll(allClustersFromDedicatedID);
      allHostsInDc.removeAll(allHostsFromDedicatedID);
    }
 else {
      tempStorage=_dedicatedDao.searchDedicatedPods(null,vmDomainId,null,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allPodsFromDedicatedID.add(vo.getPodId());
      }
      tempStorage.clear();
      tempStorage=_dedicatedDao.searchDedicatedClusters(null,vmDomainId,null,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allClustersFromDedicatedID.add(vo.getClusterId());
      }
      tempStorage.clear();
      tempStorage=_dedicatedDao.searchDedicatedHosts(null,vmDomainId,null,null).first();
      for (      DedicatedResourceVO vo : tempStorage) {
        allHostsFromDedicatedID.add(vo.getHostId());
      }
      allPodsInDc.removeAll(allPodsFromDedicatedID);
      allClustersInDc.removeAll(allClustersFromDedicatedID);
      allHostsInDc.removeAll(allHostsFromDedicatedID);
    }
    avoids.addPodList(allPodsInDc);
    avoids.addClusterList(allClustersInDc);
    avoids.addHostList(allHostsInDc);
  }
}
