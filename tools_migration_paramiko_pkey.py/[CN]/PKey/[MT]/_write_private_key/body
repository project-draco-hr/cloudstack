def _write_private_key(self, tag, f, data, password=None):
    f.write(('-----BEGIN %s PRIVATE KEY-----\n' % tag))
    if (password is not None):
        cipher_name = self._CIPHER_TABLE.keys()[0]
        cipher = self._CIPHER_TABLE[cipher_name]['cipher']
        keysize = self._CIPHER_TABLE[cipher_name]['keysize']
        blocksize = self._CIPHER_TABLE[cipher_name]['blocksize']
        mode = self._CIPHER_TABLE[cipher_name]['mode']
        salt = randpool.get_bytes(8)
        key = util.generate_key_bytes(MD5, salt, password, keysize)
        if ((len(data) % blocksize) != 0):
            n = (blocksize - (len(data) % blocksize))
            data += ('\x00' * n)
        data = cipher.new(key, mode, salt).encrypt(data)
        f.write('Proc-Type: 4,ENCRYPTED\n')
        f.write(('DEK-Info: %s,%s\n' % (cipher_name, hexlify(salt).upper())))
        f.write('\n')
    s = base64.encodestring(data)
    s = ''.join(s.split('\n'))
    s = '\n'.join([s[i:(i + 64)] for i in range(0, len(s), 64)])
    f.write(s)
    f.write('\n')
    f.write(('-----END %s PRIVATE KEY-----\n' % tag))
