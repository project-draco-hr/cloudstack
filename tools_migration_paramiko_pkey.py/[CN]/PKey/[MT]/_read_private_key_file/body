def _read_private_key_file(self, tag, filename, password=None):
    '\n        Read an SSH2-format private key file, looking for a string of the type\n        C{"BEGIN xxx PRIVATE KEY"} for some C{xxx}, base64-decode the text we\n        find, and return it as a string.  If the private key is encrypted and\n        C{password} is not C{None}, the given password will be used to decrypt\n        the key (otherwise L{PasswordRequiredException} is thrown).\n\n        @param tag: C{"RSA"} or C{"DSA"}, the tag used to mark the data block.\n        @type tag: str\n        @param filename: name of the file to read.\n        @type filename: str\n        @param password: an optional password to use to decrypt the key file,\n            if it\'s encrypted.\n        @type password: str\n        @return: data blob that makes up the private key.\n        @rtype: str\n\n        @raise IOError: if there was an error reading the file.\n        @raise PasswordRequiredException: if the private key file is\n            encrypted, and C{password} is C{None}.\n        @raise SSHException: if the key file is invalid.\n        '
    f = open(filename, 'r')
    data = self._read_private_key(tag, f, password)
    f.close()
    return data
