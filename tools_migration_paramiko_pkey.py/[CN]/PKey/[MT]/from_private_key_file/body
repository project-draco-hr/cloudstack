def from_private_key_file(cls, filename, password=None):
    "\n        Create a key object by reading a private key file.  If the private\n        key is encrypted and C{password} is not C{None}, the given password\n        will be used to decrypt the key (otherwise L{PasswordRequiredException}\n        is thrown).  Through the magic of python, this factory method will\n        exist in all subclasses of PKey (such as L{RSAKey} or L{DSSKey}), but\n        is useless on the abstract PKey class.\n\n        @param filename: name of the file to read\n        @type filename: str\n        @param password: an optional password to use to decrypt the key file,\n            if it's encrypted\n        @type password: str\n        @return: a new key object based on the given private key\n        @rtype: L{PKey}\n\n        @raise IOError: if there was an error reading the file\n        @raise PasswordRequiredException: if the private key file is\n            encrypted, and C{password} is C{None}\n        @raise SSHException: if the key file is invalid\n        "
    key = cls(filename=filename, password=password)
    return key
