def from_private_key(cls, file_obj, password=None):
    "\n        Create a key object by reading a private key from a file (or file-like)\n        object.  If the private key is encrypted and C{password} is not C{None},\n        the given password will be used to decrypt the key (otherwise\n        L{PasswordRequiredException} is thrown).\n        \n        @param file_obj: the file to read from\n        @type file_obj: file\n        @param password: an optional password to use to decrypt the key, if it's\n            encrypted\n        @type password: str\n        @return: a new key object based on the given private key\n        @rtype: L{PKey}\n        \n        @raise IOError: if there was an error reading the key\n        @raise PasswordRequiredException: if the private key file is encrypted,\n            and C{password} is C{None}\n        @raise SSHException: if the key file is invalid\n        "
    key = cls(file_obj=file_obj, password=password)
    return key
