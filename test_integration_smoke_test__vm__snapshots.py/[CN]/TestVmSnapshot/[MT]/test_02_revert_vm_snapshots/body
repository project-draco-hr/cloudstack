@attr(tags=['advanced', 'advancedns', 'smoke'], required_hardware='true')
def test_02_revert_vm_snapshots(self):
    'Test to revert VM snapshots\n        '
    try:
        ssh_client = self.virtual_machine.get_ssh_client()
        cmds = [('rm -rf %s/%s' % (self.test_dir, self.random_data)), ('ls %s/%s' % (self.test_dir, self.random_data))]
        for c in cmds:
            self.debug(c)
            result = ssh_client.execute(c)
            self.debug(result)
    except Exception:
        self.fail(('SSH failed for Virtual machine: %s' % self.virtual_machine.ipaddress))
    if (str(result[0]).index('No such file or directory') == (-1)):
        self.fail('Check the random data has be delete from temp file!')
    time.sleep(self.services['sleep'])
    list_snapshot_response = VmSnapshot.list(self.apiclient, vmid=self.virtual_machine.id, listall=True)
    self.assertEqual(isinstance(list_snapshot_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(list_snapshot_response, None, 'Check if snapshot exists in ListSnapshot')
    self.assertEqual(list_snapshot_response[0].state, 'Ready', 'Check the snapshot of vm is ready!')
    self.virtual_machine.stop(self.apiclient)
    VmSnapshot.revertToSnapshot(self.apiclient, list_snapshot_response[0].id)
    self.virtual_machine.start(self.apiclient)
    try:
        ssh_client = self.virtual_machine.get_ssh_client(reconnect=True)
        cmds = [('cat %s/%s' % (self.test_dir, self.random_data))]
        for c in cmds:
            self.debug(c)
            result = ssh_client.execute(c)
            self.debug(result)
    except Exception:
        self.fail(('SSH failed for Virtual machine: %s' % self.virtual_machine.ipaddress))
    self.assertEqual(self.random_data_0, result[0], 'Check the random data is equal with the ramdom file!')
