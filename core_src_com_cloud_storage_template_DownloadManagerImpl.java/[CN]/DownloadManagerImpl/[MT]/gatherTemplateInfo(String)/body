{
  Map<String,TemplateInfo> result=new HashMap<String,TemplateInfo>();
  String templateDir=rootDir + File.separator + _templateDir;
  if (!_storage.exists(templateDir)) {
    _storage.mkdirs(templateDir);
  }
  List<String> publicTmplts=listTemplates(templateDir);
  for (  String tmplt : publicTmplts) {
    String path=tmplt.substring(0,tmplt.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn("Post download installation was not completed for " + path);
        _storage.cleanup(path,templateDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn("Unable to load template location " + path,e);
      try {
        _storage.cleanup(path,templateDir);
      }
 catch (      IOException e1) {
        s_logger.warn("Unable to cleanup " + path,e1);
      }
      continue;
    }
    TemplateInfo tInfo=loc.getTemplateInfo();
    if ((tInfo.size == tInfo.physicalSize) && (tInfo.installPath.endsWith(ImageFormat.OVA.getFileExtension()))) {
      try {
        Processor processor=_processors.get("VMDK Processor");
        VmdkProcessor vmdkProcessor=(VmdkProcessor)processor;
        long vSize=vmdkProcessor.getTemplateVirtualSize(path,tInfo.installPath.substring(tInfo.installPath.lastIndexOf(File.separator) + 1));
        tInfo.size=vSize;
        loc.updateVirtualSize(vSize);
        loc.save();
      }
 catch (      Exception e) {
        s_logger.error("Unable to get the virtual size of the template: " + tInfo.installPath + " due to "+ e.getMessage());
      }
    }
    result.put(tInfo.templateName,tInfo);
    s_logger.debug("Added template name: " + tInfo.templateName + ", path: "+ tmplt);
  }
  return result;
}
