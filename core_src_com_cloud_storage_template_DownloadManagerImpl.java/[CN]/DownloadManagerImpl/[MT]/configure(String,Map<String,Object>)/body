{
  _name=name;
  String value=null;
  _storage=(StorageLayer)params.get(StorageLayer.InstanceConfigKey);
  if (_storage == null) {
    value=(String)params.get(StorageLayer.ClassConfigKey);
    if (value == null) {
      throw new ConfigurationException("Unable to find the storage layer");
    }
    Class<StorageLayer> clazz;
    try {
      clazz=(Class<StorageLayer>)Class.forName(value);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException("Unable to instantiate " + value);
    }
    _storage=ComponentLocator.inject(clazz);
  }
  String useSsl=(String)params.get("sslcopy");
  if (useSsl != null) {
    _sslCopy=Boolean.parseBoolean(useSsl);
  }
  String inSystemVM=(String)params.get("secondary.storage.vm");
  if (inSystemVM != null && "true".equalsIgnoreCase(inSystemVM)) {
    s_logger.info("DownloadManager: starting additional services since we are inside system vm");
    startAdditionalServices();
    blockOutgoingOnPrivate();
  }
  value=(String)params.get("install.timeout.pergig");
  this.installTimeoutPerGig=NumbersUtil.parseInt(value,15 * 60) * 1000;
  value=(String)params.get("install.numthreads");
  final int numInstallThreads=NumbersUtil.parseInt(value,10);
  String scriptsDir=(String)params.get("template.scripts.dir");
  if (scriptsDir == null) {
    scriptsDir="scripts/storage/secondary";
  }
  listTmpltScr=Script.findScript(scriptsDir,"listvmtmplt.sh");
  if (listTmpltScr == null) {
    throw new ConfigurationException("Unable to find the listvmtmplt.sh");
  }
  s_logger.info("listvmtmplt.sh found in " + listTmpltScr);
  createTmpltScr=Script.findScript(scriptsDir,"createtmplt.sh");
  if (createTmpltScr == null) {
    throw new ConfigurationException("Unable to find createtmplt.sh");
  }
  s_logger.info("createtmplt.sh found in " + createTmpltScr);
  listVolScr=Script.findScript(scriptsDir,"listvolume.sh");
  if (listVolScr == null) {
    throw new ConfigurationException("Unable to find the listvolume.sh");
  }
  s_logger.info("listvolume.sh found in " + listVolScr);
  createVolScr=Script.findScript(scriptsDir,"createvolume.sh");
  if (createVolScr == null) {
    throw new ConfigurationException("Unable to find createvolume.sh");
  }
  s_logger.info("createvolume.sh found in " + createVolScr);
  List<ComponentInfo<Adapter>> processors=new ArrayList<ComponentInfo<Adapter>>();
  Processor processor=new VhdProcessor();
  processor.configure("VHD Processor",params);
  processors.add(new ComponentInfo<Adapter>("VHD Processor",VhdProcessor.class,processor));
  processor=new IsoProcessor();
  processor.configure("ISO Processor",params);
  processors.add(new ComponentInfo<Adapter>("ISO Processor",IsoProcessor.class,processor));
  processor=new QCOW2Processor();
  processor.configure("QCOW2 Processor",params);
  processors.add(new ComponentInfo<Adapter>("QCOW2 Processor",QCOW2Processor.class,processor));
  processor=new VmdkProcessor();
  processor.configure("VMDK Processor",params);
  processors.add(new ComponentInfo<Adapter>("VMDK Processor",VmdkProcessor.class,processor));
  processor=new RawImageProcessor();
  processor.configure("Raw Image Processor",params);
  processors.add(new ComponentInfo<Adapter>("Raw Image Processor",RawImageProcessor.class,processor));
  _processors=new Adapters<Processor>("processors",processors);
  _templateDir=(String)params.get("public.templates.root.dir");
  if (_templateDir == null) {
    _templateDir=TemplateConstants.DEFAULT_TMPLT_ROOT_DIR;
  }
  _templateDir+=File.separator + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR;
  _volumeDir=TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + File.separator;
  threadPool=Executors.newFixedThreadPool(numInstallThreads);
  return true;
}
