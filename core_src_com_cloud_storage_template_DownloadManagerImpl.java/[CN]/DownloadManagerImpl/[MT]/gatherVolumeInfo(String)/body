{
  Map<Long,TemplateInfo> result=new HashMap<Long,TemplateInfo>();
  String volumeDir=rootDir + File.separator + _volumeDir;
  if (!_storage.exists(volumeDir)) {
    _storage.mkdirs(volumeDir);
  }
  List<String> vols=listVolumes(volumeDir);
  for (  String vol : vols) {
    String path=vol.substring(0,vol.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn("Post download installation was not completed for " + path);
        _storage.cleanup(path,volumeDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn("Unable to load volume location " + path,e);
      continue;
    }
    TemplateInfo vInfo=loc.getTemplateInfo();
    if ((vInfo.size == vInfo.physicalSize) && (vInfo.installPath.endsWith(ImageFormat.OVA.getFileExtension()))) {
      try {
        Processor processor=_processors.get("VMDK Processor");
        VmdkProcessor vmdkProcessor=(VmdkProcessor)processor;
        long vSize=vmdkProcessor.getTemplateVirtualSize(path,vInfo.installPath.substring(vInfo.installPath.lastIndexOf(File.separator) + 1));
        vInfo.size=vSize;
        loc.updateVirtualSize(vSize);
        loc.save();
      }
 catch (      Exception e) {
        s_logger.error("Unable to get the virtual size of the volume: " + vInfo.installPath + " due to "+ e.getMessage());
      }
    }
    result.put(vInfo.getId(),vInfo);
    s_logger.debug("Added volume name: " + vInfo.templateName + ", path: "+ vol);
  }
  return result;
}
