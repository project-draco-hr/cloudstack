{
  UUID uuid=UUID.randomUUID();
  String jobId=uuid.toString();
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  URISyntaxException e) {
    throw new CloudRuntimeException("URI is incorrect: " + url);
  }
  TemplateDownloader td;
  if ((uri != null) && (uri.getScheme() != null)) {
    if (uri.getScheme().equalsIgnoreCase("http") || uri.getScheme().equalsIgnoreCase("https")) {
      td=new S3TemplateDownloader(s3,url,installPathPrefix,new Completion(jobId),maxTemplateSizeInBytes,user,password,proxy,resourceType);
    }
 else {
      throw new CloudRuntimeException("Scheme is not supported " + url);
    }
  }
 else {
    throw new CloudRuntimeException("Unable to download from URL: " + url);
  }
  DownloadJob dj=new DownloadJob(td,jobId,id,name,format,hvm,accountId,descr,cksum,installPathPrefix,resourceType);
  jobs.put(jobId,dj);
  threadPool.execute(td);
  return jobId;
}
