{
  FloatingIpData fip=new FloatingIpData();
  fip.setTenantId(cmd.get_tenantId());
  fip.setNetworkId(cmd.get_networkId());
  fip.setFixedIp(cmd.get_privateIp());
  fip.setFloatingIpAndId(cmd.get_publicIp());
  fip.setMac(cmd.get_mac());
  try {
    String hash=_bigswitchBcfApi.createFloatingIp(cmd.get_tenantId(),fip);
    return new BcfAnswer(cmd,true,"floating ip " + cmd.get_publicIp() + ":"+ cmd.get_privateIp()+ " created",hash);
  }
 catch (  BigSwitchBcfApiException e) {
    if (e.is_topologySyncRequested()) {
      cmd.set_topologySyncRequested(true);
      return new BcfAnswer(cmd,true,"floating ip " + cmd.get_publicIp() + ":"+ cmd.get_privateIp()+ " created; topology sync required.");
    }
 else {
      if (numRetries > 0) {
        return retry(cmd,--numRetries);
      }
 else {
        return new BcfAnswer(cmd,e);
      }
    }
  }
}
