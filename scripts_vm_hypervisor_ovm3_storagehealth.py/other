import time
import socket
import getopt
import sys
import subprocess, threading
import logging
import logging.handlers
import re
import shutil
import os
' a class to do checks with as a thread so we can have nice timeouts '
" here we figure out what we're running on more or less "
' The logger is here '
' main for preso-dent '
if (__name__ == '__main__'):
    me = os.path.basename(__file__)
    timeout = 120
    interval = 1
    hostname = socket.gethostname()
    file = ('.hb-%s' % hostname)
    cmd = ''
    level = logging.DEBUG
    primary = ''
    checkstate = False
    failcmd = 'echo 1 > /proc/sys/kernel/sysrq && echo c > /proc/sysrq-trigger'
    if (me == 'heartbeat'):
        try:
            (opts, args) = getopt.getopt(sys.argv[1:], 'h:y:i:s', ['host', 'timeout', 'interval', 'state'])
        except getopt.GetoptError:
            print 'Usage:\n                host: host guid.\n                timeout: timeout to fail on\n                interval: time between checks\n                state: check the state'
            sys.exit()
        for (o, a) in opts:
            if (o in 'host'):
                file = ('hb-%s' % a)
            if (o in 'timeout'):
                timeout = a
            if (o in 'interval'):
                interval = a
            if (o in 'state'):
                checkstate = True
    else:
        try:
            (opts, args) = getopt.getopt(sys.argv[1:], 'g:p:f:c:t:i:s', ['guid=', 'primary=', 'failcmd=', 'cmd=', 'timeout=', 'interval', 'state'])
        except getopt.GetoptError:
            print 'Usage:\n                    --guid|-g: guid of the host to check\n                    --primary|-p: match for primary storage to monitor.\n                    --failcmd|-f: executed on timeout.\n                    --cmd|-c: command to execute next to hb file(s) on primary.\n                    --timeout|-t: excute failcmd after timeout(s) is hit.\n                    --interval|-i: run the checks every %ss>\n                    --state|-s check state'
            sys.exit()
        for (o, a) in opts:
            if (o in ('-g', '--guid')):
                file = ('.hb-%s' % a)
            if (o in ('-p', '--primary')):
                primary = a
            if (o in ('-f', '--failcmd')):
                failcmd = a
            if (o in ('-c', '--cmd')):
                cmd = a
            if (o in ('-t', '--timeout')):
                timeout = int(a)
            if (o in ('-i', '--interval')):
                interval = int(a)
            if (o in ('-s', '--state')):
                checkstate = True
    if (primary == ''):
        primary = figureOutPrimary()
    logger = Logger(level=level)
    if (checkstate == False):
        os.chdir('/')
        os.umask(0)
        try:
            pid = os.fork()
            if (pid > 0):
                if (me == 'heartbeat'):
                    print '> DONE <'
                sys.exit(0)
        except OSError as e:
            print  >> sys.stderr, ('fork #1 failed: %d (%s)' % (e.errno, e.strerror))
            sys.exit(1)
    checker = Check(cmd=cmd, failcmd=failcmd, file=file, timeout=timeout, interval=interval, logger=logger, check=checkstate)
    while True:
        start = time.time()
        checker.run(timeout)
        runtime = (time.time() - start)
        logger.debug(('cmd time: %s' % runtime))
        if checkstate:
            for fs in checker.results:
                print ('%s: %s' % (fs, checker.results[fs]))
            if (checker.ok == False):
                sys.exit(1)
            else:
                sys.exit(0)
        if (runtime > interval):
            logger.warning(('Warning: runtime %s bigger than interval %s' % (runtime, interval)))
        else:
            time.sleep(interval)
