{
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  ServiceOffering offering=vmProfile.getServiceOffering();
  List<Host> suitableHosts=new ArrayList<Host>();
  List<Host> hostsCopy=new ArrayList<Host>(hosts);
  if (type == Host.Type.Storage) {
    return suitableHosts;
  }
  String hostTag=offering.getHostTag();
  if (hostTag != null) {
    logger.debug("Looking for hosts in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId+ " having host tag:"+ hostTag);
  }
 else {
    logger.debug("Looking for hosts in dc: " + dcId + "  pod:"+ podId+ "  cluster:"+ clusterId);
  }
  if (hostTag != null) {
    hostsCopy.retainAll(_hostDao.listByHostTag(type,clusterId,podId,dcId,hostTag));
  }
 else {
    hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledHosts(type,clusterId,podId,dcId));
  }
  logger.debug("Random Allocator found " + hostsCopy.size() + "  hosts");
  if (hostsCopy.size() == 0) {
    return suitableHosts;
  }
  Collections.shuffle(hostsCopy);
  for (  Host host : hostsCopy) {
    if (suitableHosts.size() == returnUpTo) {
      break;
    }
    if (!avoid.shouldAvoid(host)) {
      suitableHosts.add(host);
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Host name: " + host.getName() + ", hostId: "+ host.getId()+ " is in avoid set, "+ "skipping this and trying other available hosts");
      }
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Random Host Allocator returning " + suitableHosts.size() + " suitable hosts");
  }
  return suitableHosts;
}
