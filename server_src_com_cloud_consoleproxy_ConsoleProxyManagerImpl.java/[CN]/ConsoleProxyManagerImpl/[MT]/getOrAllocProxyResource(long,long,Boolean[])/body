{
  ConsoleProxyVO proxy=null;
  VMInstanceVO vm=this._instanceDao.findById(vmId);
  if (vm != null && vm.getState() != State.Running) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Detected that vm : " + vmId + " is not currently at running state, we will fail the proxy assignment for it");
    }
    return null;
  }
  if (vm != null && vm.getProxyId() != null) {
    proxy=_consoleProxyDao.findById(vm.getProxyId());
    if (proxy != null) {
      if (!isInAssignableState(proxy)) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info("A previous assigned proxy is not assignable now, reassign console proxy for user vm : " + vmId);
        }
        proxy=null;
      }
 else {
        if (_consoleProxyDao.getProxyActiveLoad(proxy.getId()) < _capacityPerProxy || hasPreviousSession(proxy,vm)) {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Assign previous allocated console proxy for user vm : " + vmId);
          }
          if (proxy.getActiveSession() >= _capacityPerProxy) {
            s_logger.warn("Assign overloaded proxy to user VM as previous session exists, user vm : " + vmId);
          }
        }
 else {
          proxy=null;
        }
      }
    }
  }
  if (proxy == null) {
    proxy=assignProxyFromRunningPool(dataCenterId);
  }
  if (proxy == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("No running console proxy is available, check to see if we can bring up a stopped one for data center : " + dataCenterId);
    }
    proxy=assignProxyFromStoppedPool(dataCenterId);
    if (proxy == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info("No stopped console proxy is available, need to allocate a new console proxy for data center : " + dataCenterId);
      }
      try {
        proxy=startNew(dataCenterId);
      }
 catch (      ConcurrentOperationException e) {
        s_logger.info("Concurrent operation caught " + e);
        return null;
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info("Found a stopped console proxy, bring it up to running pool. proxy vm id : " + proxy.getId() + ", data center : "+ dataCenterId);
      }
      proxyFromStoppedPool[0]=new Boolean(true);
    }
  }
  return proxy;
}
