{
  ConsoleProxyVO proxy=null;
  VMInstanceVO vm=_instanceDao.findById(vmId);
  if (vm == null) {
    logger.warn("VM " + vmId + " no longer exists, return a null proxy for vm:"+ vmId);
    return null;
  }
  if (vm != null && vm.getState() != State.Running) {
    if (logger.isInfoEnabled()) {
      logger.info("Detected that vm : " + vmId + " is not currently at running state, we will fail the proxy assignment for it");
    }
    return null;
  }
  if (_allocProxyLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_SYNC)) {
    try {
      if (vm.getProxyId() != null) {
        proxy=_consoleProxyDao.findById(vm.getProxyId());
        if (proxy != null) {
          if (!isInAssignableState(proxy)) {
            if (logger.isInfoEnabled()) {
              logger.info("A previous assigned proxy is not assignable now, reassign console proxy for user vm : " + vmId);
            }
            proxy=null;
          }
 else {
            if (_consoleProxyDao.getProxyActiveLoad(proxy.getId()) < _capacityPerProxy || hasPreviousSession(proxy,vm)) {
              if (logger.isTraceEnabled()) {
                logger.trace("Assign previous allocated console proxy for user vm : " + vmId);
              }
              if (proxy.getActiveSession() >= _capacityPerProxy) {
                logger.warn("Assign overloaded proxy to user VM as previous session exists, user vm : " + vmId);
              }
            }
 else {
              proxy=null;
            }
          }
        }
      }
      if (proxy == null) {
        proxy=assignProxyFromRunningPool(dataCenterId);
      }
    }
  finally {
      _allocProxyLock.unlock();
    }
  }
 else {
    logger.error("Unable to acquire synchronization lock to get/allocate proxy resource for vm :" + vmId + ". Previous console proxy allocation is taking too long");
  }
  if (proxy == null) {
    logger.warn("Unable to find or allocate console proxy resource");
    return null;
  }
  if (vm.getProxyId() == null || vm.getProxyId().longValue() != proxy.getId()) {
    _instanceDao.updateProxyId(vmId,proxy.getId(),DateUtil.currentGMTTime());
  }
  proxy.setSslEnabled(_sslEnabled);
  if (_sslEnabled) {
    proxy.setPort(443);
  }
 else {
    proxy.setPort(80);
  }
  return proxy;
}
