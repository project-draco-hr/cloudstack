{
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Destroy console proxy " + vmId + ", update async job-"+ job.getId());
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),"console_proxy",vmId);
  }
  ConsoleProxyVO vm=_consoleProxyDao.findById(vmId);
  if (vm == null || vm.getState() == State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find vm or vm is destroyed: " + vmId);
    }
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Destroying console proxy vm " + vmId);
  }
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.DestroyRequested,null)) {
    s_logger.debug("Unable to destroy the vm because it is not in the correct state: " + vmId);
    return false;
  }
  Transaction txn=Transaction.currentTxn();
  List<VolumeVO> vols=null;
  try {
    vols=_volsDao.findByInstance(vmId);
    if (vols.size() != 0) {
      _storageMgr.destroy(vm,vols);
    }
    return true;
  }
  finally {
    try {
      txn.start();
      if (vm.getPublicIpAddress() != null) {
      }
      vm.setPublicIpAddress(null);
      _consoleProxyDao.remove(vm.getId());
      final EventVO event=new EventVO();
      event.setUserId(User.UID_SYSTEM);
      event.setAccountId(Account.ACCOUNT_ID_SYSTEM);
      event.setType(EventTypes.EVENT_PROXY_DESTROY);
      event.setLevel(EventVO.LEVEL_INFO);
      event.setDescription("Console proxy destroyed - " + vm.getName());
      _eventDao.persist(event);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error("Caught this error: ",e);
      txn.rollback();
      return false;
    }
 finally {
      s_logger.debug("console proxy vm is destroyed : " + vm.getName());
    }
  }
}
