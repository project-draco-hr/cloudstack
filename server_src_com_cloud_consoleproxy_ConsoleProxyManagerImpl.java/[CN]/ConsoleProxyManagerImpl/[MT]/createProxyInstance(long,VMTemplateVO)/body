{
  long id=_consoleProxyDao.getNextInSequence(Long.class,"id");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  NetworkVO defaultNetwork=null;
  if (dc.getNetworkType() == NetworkType.Advanced && dc.isSecurityGroupEnabled()) {
    List<NetworkVO> networks=_networkDao.listByZoneSecurityGroup(dataCenterId);
    if (networks == null || networks.size() == 0) {
      throw new CloudRuntimeException("Can not found security enabled network in SG Zone " + dc);
    }
    defaultNetwork=networks.get(0);
  }
 else {
    TrafficType defaultTrafficType=TrafficType.Public;
    if (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()) {
      defaultTrafficType=TrafficType.Guest;
    }
    List<NetworkVO> defaultNetworks=_networkDao.listByZoneAndTrafficType(dataCenterId,defaultTrafficType);
    if (defaultNetworks.size() != 1) {
      throw new CloudRuntimeException("Found " + defaultNetworks.size() + " networks of type "+ defaultTrafficType+ " when expect to find 1");
    }
    defaultNetwork=defaultNetworks.get(0);
  }
  List<? extends NetworkOffering> offerings=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork,NetworkOffering.SystemManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,_networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()),plan,null,null,false).get(0),defaultNic));
  for (  NetworkOffering offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,template.getId(),template.getHypervisorType(),template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0,_serviceOffering.getOfferHA());
  proxy.setDynamicallyScalable(template.isDynamicallyScalable());
  proxy=_consoleProxyDao.persist(proxy);
  try {
    _itMgr.allocate(name,template,_serviceOffering,networks,plan,null);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn("InsufficientCapacity",e);
    throw new CloudRuntimeException("Insufficient capacity exception",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("dc",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodIdToDeployIn());
  context.put("pod",pod);
  context.put("proxyVmId",proxy.getId());
  return context;
}
