{
  long id=_consoleProxyDao.getNextInSequence(Long.class,"id");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork);
  if (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()) {
    defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemGuestNetwork);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork,NetworkOfferingVO.SystemManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false,false).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false,false).get(0),null));
  }
  VMTemplateVO template=_templateDao.findSystemVMTemplate(dataCenterId,desiredHyp);
  if (template == null) {
    s_logger.debug("Can't find a template to start");
    throw new CloudRuntimeException("Insufficient capacity exception");
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,template.getId(),template.getHypervisorType(),template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0,_serviceOffering.getOfferHA());
  try {
    proxy=_itMgr.allocate(proxy,template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn("InsufficientCapacity",e);
    throw new CloudRuntimeException("Insufficient capacity exception",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("dc",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put("pod",pod);
  context.put("proxyVmId",proxy.getId());
  return context;
}
