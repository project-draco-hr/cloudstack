{
  Map<String,Object> context=new HashMap<String,Object>();
  String publicIpAddress=null;
  Transaction txn=Transaction.currentTxn();
  try {
    DataCenterVO dc=_dcDao.findById(dataCenterId);
    assert(dc != null);
    context.put("dc",dc);
    Set<Long> avoidPods=new HashSet<Long>();
    Pair<HostPodVO,Long> pod=null;
    networkInfo publicIpAndVlan=null;
    String[] macAddresses=_dcDao.getNextAvailableMacAddressPair(dataCenterId,(1L << 31));
    String privateMacAddress=macAddresses[0];
    String publicMacAddress=macAddresses[1];
    macAddresses=_dcDao.getNextAvailableMacAddressPair(dataCenterId,(1L << 31));
    String guestMacAddress=macAddresses[0];
    while ((pod=_agentMgr.findPod(_template,_serviceOffering,dc,Account.ACCOUNT_ID_SYSTEM,avoidPods)) != null) {
      publicIpAndVlan=allocPublicIpAddress(dataCenterId,pod.first().getId(),publicMacAddress);
      if (publicIpAndVlan == null) {
        s_logger.warn("Unable to allocate public IP address for console proxy vm in data center : " + dataCenterId + ", pod="+ pod.first().getId());
        avoidPods.add(pod.first().getId());
      }
 else {
        break;
      }
    }
    if (pod == null || publicIpAndVlan == null) {
      String msg="Unable to allocate pod for console proxy vm in data center : " + dataCenterId;
      s_logger.warn(msg);
      throw new CloudRuntimeException(msg);
    }
    long id=_consoleProxyDao.getNextInSequence(Long.class,"id");
    context.put("publicIpAddress",publicIpAndVlan._ipAddr);
    context.put("pod",pod);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Pod allocated " + pod.first().getName());
    }
    String cidrNetmask=NetUtils.getCidrNetmask(pod.first().getCidrSize());
    publicIpAddress=publicIpAndVlan._ipAddr;
    String vlanGateway=publicIpAndVlan._gateWay;
    String vlanNetmask=publicIpAndVlan._netMask;
    txn.start();
    ConsoleProxyVO proxy;
    String name=VirtualMachineName.getConsoleProxyName(id,_instance).intern();
    proxy=new ConsoleProxyVO(id,name,guestMacAddress,null,NetUtils.getLinkLocalNetMask(),privateMacAddress,null,cidrNetmask,_template.getId(),_template.getGuestOSId(),publicMacAddress,publicIpAddress,vlanNetmask,publicIpAndVlan._vlanDbId,publicIpAndVlan._vlanid,pod.first().getId(),dataCenterId,vlanGateway,null,dc.getDns1(),dc.getDns2(),_domain,_proxyRamSize,0);
    proxy.setLastHostId(pod.second());
    proxy=_consoleProxyDao.persist(proxy);
    long proxyVmId=proxy.getId();
    final EventVO event=new EventVO();
    event.setUserId(User.UID_SYSTEM);
    event.setAccountId(Account.ACCOUNT_ID_SYSTEM);
    event.setType(EventTypes.EVENT_PROXY_CREATE);
    event.setLevel(EventVO.LEVEL_INFO);
    event.setDescription("New console proxy created - " + proxy.getName());
    _eventDao.persist(event);
    txn.commit();
    context.put("proxyVmId",proxyVmId);
    return context;
  }
 catch (  Throwable e) {
    s_logger.error("Unexpected exception : ",e);
    context.put("proxyVmId",(long)0);
    return context;
  }
}
