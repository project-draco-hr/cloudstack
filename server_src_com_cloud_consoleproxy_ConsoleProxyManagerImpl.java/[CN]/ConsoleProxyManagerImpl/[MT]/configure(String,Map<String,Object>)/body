{
  if (s_logger.isInfoEnabled())   s_logger.info("Start configuring console proxy manager : " + name);
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException("Unable to get the configuration dao.");
  }
  Map<String,String> configs=configDao.getConfiguration("management-server",params);
  _proxyRamSize=NumbersUtil.parseInt(configs.get("consoleproxy.ram.size"),DEFAULT_PROXY_VM_RAMSIZE);
  String value=configs.get("start.retry");
  _find_host_retry=NumbersUtil.parseInt(value,DEFAULT_FIND_HOST_RETRY_COUNT);
  value=configs.get("consoleproxy.cmd.port");
  _proxyCmdPort=NumbersUtil.parseInt(value,DEFAULT_PROXY_CMD_PORT);
  value=configs.get("consoleproxy.sslEnabled");
  if (value != null && value.equalsIgnoreCase("true"))   _sslEnabled=true;
  value=configs.get("consoleproxy.capacityscan.interval");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _capacityPerProxy=NumbersUtil.parseInt(configs.get("consoleproxy.session.max"),DEFAULT_PROXY_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(configs.get("consoleproxy.capacity.standby"),DEFAULT_STANDBY_CAPACITY);
  _proxySessionTimeoutValue=NumbersUtil.parseInt(configs.get("consoleproxy.session.timeout"),DEFAULT_PROXY_SESSION_TIMEOUT);
  value=configs.get("consoleproxy.port");
  if (value != null)   _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  value=configs.get("consoleproxy.url.port");
  if (value != null)   _consoleProxyUrlPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);
  value=configs.get("system.vm.use.local.storage");
  if (value != null && value.equalsIgnoreCase("true"))   _use_lvm=true;
  value=configs.get("secondary.storage.vm");
  if (value != null && value.equalsIgnoreCase("true"))   _use_storage_vm=true;
  if (s_logger.isInfoEnabled()) {
    s_logger.info("Console proxy max session soft limit : " + _capacityPerProxy);
    s_logger.info("Console proxy standby capacity : " + _standbyCapacity);
  }
  _domain=configs.get("domain");
  if (_domain == null) {
    _domain="foo.com";
  }
  _instance=configs.get("instance.name");
  if (_instance == null) {
    _instance="DEFAULT";
  }
  value=(String)params.get("ssh.sleep");
  _ssh_sleep=NumbersUtil.parseInt(value,5) * 1000;
  value=(String)params.get("ssh.retry");
  _ssh_retry=NumbersUtil.parseInt(value,3);
  Map<String,String> agentMgrConfigs=configDao.getConfiguration("AgentManager",params);
  _mgmt_host=agentMgrConfigs.get("host");
  if (_mgmt_host == null) {
    s_logger.warn("Critical warning! Please configure your management server host address right after you have started your management server and then restart it, otherwise you won't be able to do console access");
  }
  value=agentMgrConfigs.get("port");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _consoleProxyAllocators=locator.getAdapters(ConsoleProxyAllocator.class);
  if (_consoleProxyAllocators == null || !_consoleProxyAllocators.isSet()) {
    throw new ConfigurationException("Unable to get proxy allocators");
  }
  _listener=new ConsoleProxyListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  Adapters<IpAddrAllocator> ipAllocators=locator.getAdapters(IpAddrAllocator.class);
  if (ipAllocators != null && ipAllocators.isSet()) {
    Enumeration<IpAddrAllocator> it=ipAllocators.enumeration();
    _IpAllocator=it.nextElement();
  }
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.ConsoleProxy,this);
  }
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  String networkRateStr=_configDao.getValue("network.throttling.rate");
  String multicastRateStr=_configDao.getValue("multicast.throttling.rate");
  _networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  _multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  _serviceOffering=new ServiceOfferingVO("System Offering For Console Proxy",1,_proxyRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtualized,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName("Cloud.com-ConsoleProxy");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException("Unable to find the template for console proxy VMs");
  }
  _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  cleanupCertTable(_clMgr.getId());
  if (s_logger.isInfoEnabled())   s_logger.info("Console Proxy Manager is configured.");
  return true;
}
