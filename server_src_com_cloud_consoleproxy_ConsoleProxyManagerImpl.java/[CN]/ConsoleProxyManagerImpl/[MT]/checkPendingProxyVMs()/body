{
  List<ConsoleProxyVO> l=_consoleProxyDao.getProxyListInStates(State.Creating);
  if (l != null && l.size() > 0) {
    for (    ConsoleProxyVO proxy : l) {
      if (proxy.getLastUpdateTime() == null || (proxy.getLastUpdateTime() != null && System.currentTimeMillis() - proxy.getLastUpdateTime().getTime() > 60000)) {
        try {
          ConsoleProxyVO readyProxy=null;
          if (_allocProxyLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_SYNC)) {
            try {
              readyProxy=allocProxyStorage(proxy.getDataCenterId(),proxy.getId());
            }
  finally {
              _allocProxyLock.unlock();
            }
            if (readyProxy != null) {
              GlobalLock proxyLock=GlobalLock.getInternLock(getProxyLockName(readyProxy.getId()));
              try {
                if (proxyLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_SYNC)) {
                  try {
                    readyProxy=start(readyProxy.getId(),0);
                  }
  finally {
                    proxyLock.unlock();
                  }
                }
 else {
                  if (s_logger.isInfoEnabled())                   s_logger.info("Unable to acquire synchronization lock to start console proxy : " + readyProxy.getHostName());
                }
              }
  finally {
                proxyLock.releaseRef();
              }
            }
          }
 else {
            if (s_logger.isInfoEnabled())             s_logger.info("Unable to acquire synchronization lock to allocate proxy storage, wait for next turn");
          }
        }
 catch (        StorageUnavailableException e) {
          s_logger.warn("Storage unavailable",e);
        }
catch (        InsufficientCapacityException e) {
          s_logger.warn("insuffiient capacity",e);
        }
catch (        ConcurrentOperationException e) {
          s_logger.debug("Concurrent operation: " + e.getMessage());
        }
catch (        ResourceUnavailableException e) {
          s_logger.debug("Concurrent operation: " + e.getMessage());
        }
      }
    }
  }
}
