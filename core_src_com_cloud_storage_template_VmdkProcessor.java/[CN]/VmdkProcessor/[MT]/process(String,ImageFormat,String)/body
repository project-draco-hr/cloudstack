{
  if (format != null) {
    if (s_logger.isInfoEnabled())     s_logger.info("We currently don't handle conversion from " + format + " to VMDK.");
    return null;
  }
  s_logger.info("Template processing. templatePath: " + templatePath + ", templateName: "+ templateName);
  String templateFilePath=templatePath + File.separator + templateName+ "."+ ImageFormat.OVA.getFileExtension();
  if (!_storage.exists(templateFilePath)) {
    if (s_logger.isInfoEnabled())     s_logger.info("Unable to find the vmware template file: " + templateFilePath);
    return null;
  }
  s_logger.info("Template processing - untar OVA package. templatePath: " + templatePath + ", templateName: "+ templateName);
  String templateFileFullPath=templatePath + templateName + "."+ ImageFormat.OVA.getFileExtension();
  File templateFile=new File(templateFileFullPath);
  Script command=new Script("tar",0,s_logger);
  command.add("-xf",templateFileFullPath);
  command.setWorkDir(templateFile.getParent());
  String result=command.execute();
  if (result != null) {
    s_logger.info("failed to untar OVA package due to " + result + ". templatePath: "+ templatePath+ ", templateName: "+ templateName);
    return null;
  }
  FormatInfo info=new FormatInfo();
  info.format=ImageFormat.OVA;
  info.filename=templateName + "." + ImageFormat.OVA.getFileExtension();
  info.size=_storage.getSize(templateFilePath);
  long virtualSize=0;
  String ovfFileName=getOVFFilePath(templateFileFullPath);
  if (ovfFileName == null) {
    String msg="Unable to locate OVF file in template package directory: " + templatePath;
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
  try {
    Document ovfDoc=null;
    ovfDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(ovfFileName));
    Element disk=(Element)ovfDoc.getElementsByTagName("Disk").item(0);
    virtualSize=Long.parseLong(disk.getAttribute("ovf:capacity"));
    String allocationUnits=disk.getAttribute("ovf:capacityAllocationUnits");
    if (allocationUnits != null) {
      long units=1;
      if (allocationUnits.equalsIgnoreCase("KB") || allocationUnits.equalsIgnoreCase("KiloBytes") || allocationUnits.equalsIgnoreCase("byte * 2^10")) {
        units=1024;
      }
 else       if (allocationUnits.equalsIgnoreCase("MB") || allocationUnits.equalsIgnoreCase("MegaBytes") || allocationUnits.equalsIgnoreCase("byte * 2^20")) {
        units=1024 * 1024;
      }
 else       if (allocationUnits.equalsIgnoreCase("GB") || allocationUnits.equalsIgnoreCase("GigaBytes") || allocationUnits.equalsIgnoreCase("byte * 2^30")) {
        units=1024 * 1024 * 1024;
      }
      virtualSize=virtualSize * units;
    }
  }
 catch (  Exception e) {
    String msg="Unable to parse OVF XML document to get the virtual disk size due to" + e;
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
  info.virtualSize=virtualSize;
  return info;
}
