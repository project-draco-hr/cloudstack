{
  final Connection connection=xenServer610Resource.getConnection();
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  final Map<VolumeTO,String> volumeToSr=command.getVolumeToSr();
  final Map<NicTO,String> nicToNetwork=command.getNicToNetwork();
  final Map<String,String> token=command.getToken();
  final String vmName=vmSpec.getName();
  Task task=null;
  try {
    Gson gson=new Gson();
    final Map<String,String> other=new HashMap<String,String>();
    other.put("live","true");
    final Map<VDI,SR> vdiMap=new HashMap<VDI,SR>();
    for (    final Map.Entry<VolumeTO,String> entry : volumeToSr.entrySet()) {
      SR sr=gson.fromJson(entry.getValue(),SR.class);
      VDI vdi=xenServer610Resource.getVDIbyUuid(connection,entry.getKey().getPath());
      vdiMap.put(vdi,sr);
    }
    final Set<VM> vms=VM.getByNameLabel(connection,vmSpec.getName());
    VM vmToMigrate=null;
    if (vms != null) {
      vmToMigrate=vms.iterator().next();
    }
    final Map<VIF,Network> vifMap=new HashMap<VIF,Network>();
    for (    final Map.Entry<NicTO,String> entry : nicToNetwork.entrySet()) {
      Network network=gson.fromJson(entry.getValue(),Network.class);
      VIF vif=xenServer610Resource.getVifByMac(connection,vmToMigrate,entry.getKey().getMac());
      vifMap.put(vif,network);
    }
    task=vmToMigrate.assertCanMigrateAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error("Error while checking if vm " + vmName + " can be migrated.",e);
      throw new CloudRuntimeException("Error while checking if vm " + vmName + " can be migrated.",e);
    }
    task=vmToMigrate.migrateSendAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error("Error while migrating vm " + vmName,e);
      throw new CloudRuntimeException("Error while migrating vm " + vmName,e);
    }
    final Set<VolumeTO> volumeToSet=null;
    return new MigrateWithStorageSendAnswer(command,volumeToSet);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error("Migration of vm " + vmName + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
catch (  final Exception e) {
    s_logger.error("Migration of vm " + vmName + " with storage failed due to "+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
 finally {
    if (task != null) {
      try {
        task.destroy(connection);
      }
 catch (      final Exception e) {
        s_logger.debug("Unable to destroy task " + task.toString() + " on host "+ xenServer610Resource.getHost().getUuid()+ " due to "+ e.toString());
      }
    }
  }
}
