def _getInterfaces(self, type):
    '\n        @param type : ["pif", "bridge", "tap"]\n        @return : dictionary of Interface Objects\n        get All Interfaces based on type\n        '
    devices = os.listdir('/sys/class/net')
    ifs = {}
    if (type == 'pif'):
        devs = self.Parser.findall(Filter.Network.IFNAME_PIF, devices)
        for dev in set(devs):
            ifInst = OvmInterface()
            ifInst.name = dev
            ifs[dev] = ifInst
    elif (type == 'vlan'):
        devs = self.Parser.findall(Filter.Network.IFNAME_VLAN, devices)
        for dev in set(devs):
            ifInst = OvmVlan()
            ifInst.name = dev
            (pif, vid) = dev.split('.')
            ifInst.pif = pif
            ifInst.vid = vid
            ifs[dev] = ifInst
    elif (type == 'bridge'):
        devs = self.Parser.findall(Filter.Network.IFNAME_BRIDGE, devices)
        for dev in set(devs):
            ifInst = OvmBridge()
            ifInst.name = dev
            devs = os.listdir(join('/sys/class/net', dev, 'brif'))
            ifInst.interfaces = devs
            attches = (self.Parser.findall(Filter.Network.IFNAME_PIF, devs) + self.Parser.findall(Filter.Network.IFNAME_VLAN, devs))
            if (len(attches) > 1):
                raise Exception(('Multiple PIF on bridge %s (%s)' % (dev, attches)))
            elif (len(attches) == 0):
                ifInst.attach = 'null'
            elif (len(attches) == 1):
                ifInst.attach = attches[0]
            ifs[dev] = ifInst
    return ifs
