{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  LoadBalancerParam param=gson.fromJson(job.getCmdInfo(),LoadBalancerParam.class);
  if (getSyncSource() == null) {
    asyncMgr.syncAsyncJobExecution(job.getId(),"Router",param.getDomainRouterId());
    return true;
  }
 else {
    ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
    try {
      boolean result=managementServer.removeFromLoadBalancer(param.getUserId().longValue(),param.getLoadBalancerId().longValue(),param.getInstanceIdList());
      if (result) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,Boolean.valueOf(result).toString());
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,Boolean.valueOf(result).toString());
      }
    }
 catch (    InvalidParameterValueException ex) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info("Unable to remove from load balancer : " + ex.getMessage());
      }
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.PARAM_ERROR,ex.getMessage());
    }
catch (    Exception e) {
      s_logger.warn("Unable to remove from load balancer : " + e.getMessage(),e);
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
    return true;
  }
}
