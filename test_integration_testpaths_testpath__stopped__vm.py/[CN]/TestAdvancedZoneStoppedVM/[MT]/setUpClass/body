@classmethod
def setUpClass(cls):
    testClient = super(TestAdvancedZoneStoppedVM, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient)
    cls._cleanup = []
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        if cls.zone.localstorageenable:
            cls.testdata['service_offering']['storagetype'] = 'local'
        cls.testdata['service_offering']['cpunumber'] = 1
        cls.testdata['service_offering']['cpuspeed'] = 128
        cls.testdata['service_offering']['memory'] = 256
        if (cls.hypervisor.lower() == 'hyperv'):
            cls.testdata['service_offering']['cpuspeed'] = 1024
            cls.testdata['service_offering']['memory'] = 1024
        cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering)
        cls.testdata['service_offering']['cpunumber'] = 2
        cls.service_offering_2 = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
        cls._cleanup.append(cls.service_offering_2)
        cls.isolated_network_offering = CreateEnabledNetworkOffering(cls.apiclient, cls.testdata['isolated_network_offering'])
        cls._cleanup.append(cls.isolated_network_offering)
        cls.networkid = None
        if (str(cls.zone.networktype).lower() == 'advanced'):
            cls.network = Network.create(cls.apiclient, cls.testdata['isolated_network'], networkofferingid=cls.isolated_network_offering.id, accountid=cls.account.name, domainid=cls.account.domainid, zoneid=cls.zone.id)
            cls.networkid = cls.network.id
        cls.userapiclient = testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
        template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
        cls.defaultTemplateId = template.id
        respose = User.login(cls.apiclient, username=cls.account.name, password=cls.testdata['account']['password'])
        assert (respose.sessionkey is not None), 'Login to the CloudStack should be successful                            response shall have non Null key'
    except Exception as e:
        cls.tearDownClass()
        raise e
    return
