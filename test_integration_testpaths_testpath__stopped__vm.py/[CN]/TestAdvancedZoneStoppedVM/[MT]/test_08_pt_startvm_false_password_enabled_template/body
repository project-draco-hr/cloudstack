@attr(tags=['advanced', 'basic'], required_hardware='True')
def test_08_pt_startvm_false_password_enabled_template(self):
    ' Positive test for stopped VM test path - T10\n\n        # 1   Create a password enabled template\n        # 2.  Deploy a new VM with password enabled template\n        # 3.  Verify that VM is in stopped state\n        # 4.  Start the VM, verify that it is in running state\n        # 5.  Verify that new password is generated for the VM\n        '
    vm_for_template = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.defaultTemplateId, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, mode=self.zone.networktype, networkids=([self.networkid] if self.networkid else None))
    vm_for_template.password = self.testdata['virtual_machine']['password']
    ssh = vm_for_template.get_ssh_client()
    cmds = ['cd /etc/init.d;wget http://people.apache.org/~tsp/                    cloud-set-guest-password', 'chmod +x /etc/init.d/cloud-set-guest-password', 'chkconfig --add cloud-set-guest-password']
    for c in cmds:
        ssh.execute(c)
    vm_for_template.stop(self.userapiclient)
    list_volume = Volume.list(self.userapiclient, virtualmachineid=vm_for_template.id, type='ROOT', listall=True)
    if isinstance(list_volume, list):
        self.volume = list_volume[0]
    else:
        raise Exception(('Exception: Unable to find root volume for VM: %s' % vm_for_template.id))
    self.testdata['template']['ostype'] = self.testdata['ostype']
    pw_ssh_enabled_template = Template.create(self.userapiclient, self.testdata['template'], self.volume.id, account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(pw_ssh_enabled_template)
    vm_for_template.delete(self.apiclient)
    virtual_machine = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.defaultTemplateId, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, zoneid=self.zone.id, startvm=False, mode=self.zone.networktype, networkids=([self.networkid] if self.networkid else None))
    self.cleanup.append(virtual_machine)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    virtual_machine.start(self.userapiclient)
    vms = virtual_machine.list(self.userapiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(validateList(vms)[0], PASS, 'vms list validation failed')
    self.assertNotEqual(str(vms[0].password), str(virtual_machine.password), 'New password should be generated for the VM')
    return
