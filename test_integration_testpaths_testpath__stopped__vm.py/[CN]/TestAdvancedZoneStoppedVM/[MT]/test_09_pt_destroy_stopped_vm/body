@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_09_pt_destroy_stopped_vm(self):
    ' Positive test for stopped VM test path - T11\n\n        # 1.  Deploy VM in the network with specifying startvm parameter\n        #     as False\n        # 2.  Verify that VM is in Stopped state\n        # 3.  Start the VM and verify that it is in running state\n        # 3.  Stop the VM, verify that it is in Stopped state\n        # 4.  Destroy the VM and verify that it is in Destroyed state\n        '
    virtual_machine = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.defaultTemplateId, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=([self.networkid] if self.networkid else None), zoneid=self.zone.id, startvm=False, mode=self.zone.networktype)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    virtual_machine.start(self.userapiclient)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.RUNNING)
    self.assertEqual(response[0], PASS, response[1])
    virtual_machine.stop(self.userapiclient)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    virtual_machine.delete(self.apiclient, expunge=False)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.DESTROYED)
    self.assertEqual(response[0], PASS, response[1])
    return
