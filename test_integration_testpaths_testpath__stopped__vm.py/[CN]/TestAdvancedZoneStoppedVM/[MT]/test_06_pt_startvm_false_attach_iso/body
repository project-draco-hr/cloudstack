@attr(tags=['advanced', 'basic'], required_hardware='True')
def test_06_pt_startvm_false_attach_iso(self):
    ' Positive test for stopped VM test path - T5\n\n        # 1.  Deploy VM in the network with specifying startvm parameter\n        #     as False\n        # 2.  List VMs and verify that VM is in stopped state\n        # 3.  Register an ISO and attach it to the VM\n        # 4.  Verify that ISO is attached to the VM\n        '
    virtual_machine = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.defaultTemplateId, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=([self.networkid] if self.networkid else None), zoneid=self.zone.id, startvm=False, mode=self.zone.networktype)
    self.cleanup.append(virtual_machine)
    response = virtual_machine.getState(self.apiclient, VirtualMachine.STOPPED)
    self.assertEqual(response[0], PASS, response[1])
    iso = Iso.create(self.userapiclient, self.testdata['iso'], account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    iso.download(self.userapiclient)
    virtual_machine.attach_iso(self.userapiclient, iso)
    vms = VirtualMachine.list(self.userapiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(validateList(vms)[0], PASS, 'List vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.isoid, iso.id, 'The ISO status should be reflected in list Vm call')
    return
