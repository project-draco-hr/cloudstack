{
  ServerResource resource=null;
  String guid;
  PhysicalNetworkVO pNetwork=null;
  DataCenterVO zone=null;
  NetworkDevice ntwkDevice=NetworkDevice.getNetworkDevice(deviceName);
  String url=null;
  String username=null;
  String password=null;
  if (deviceParamList != null) {
    url=(String)deviceParamList.get(ApiConstants.URL);
    username=(String)deviceParamList.get(ApiConstants.USERNAME);
    password=(String)deviceParamList.get(ApiConstants.PASSWORD);
  }
  if (((zoneId == null) && (physicalNetworkId == null)) || (ntwkDevice == null) || (url == null)|| (username == null)|| (password == null)) {
    throw new InvalidParameterValueException("Atleast one of the required parameters (url, username, password," + " zone id/physical network id) is not specified or a valid parameter.");
  }
  if (physicalNetworkId != null) {
    pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNetwork == null) {
      throw new InvalidParameterValueException("Could not find phyical network with ID: " + physicalNetworkId);
    }
  }
  if (zoneId != null) {
    zone=_dcDao.findById(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException("Could not find zone with ID: " + zoneId);
    }
    if (pNetwork == null) {
      List<PhysicalNetworkVO> physicalNetworks=_physicalNetworkDao.listByZone(zoneId);
      if ((physicalNetworks == null) || (physicalNetworks.size() > 1)) {
        throw new InvalidParameterValueException("There are multiple physical networks configured in zone with ID: " + zoneId + ". Physical network ID must be passed to select a physical network in this zonea.");
      }
      pNetwork=physicalNetworks.get(0);
    }
  }
  PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(),ntwkDevice.getNetworkServiceProvder());
  if (!_networkMgr.isProviderEnabled(ntwkSvcProvider)) {
    throw new CloudRuntimeException("Network Service Provider: " + ntwkSvcProvider.getProviderName() + " is not in enabled state in the physical network: "+ physicalNetworkId+ "to add this device");
  }
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new InvalidParameterValueException(e.getMessage());
  }
  String ipAddress=uri.getHost();
  Map<String,String> params=new HashMap<String,String>();
  UrlUtil.parseQueryParameters(uri.getQuery(),true,params);
  String publicInterface=params.get("publicinterface");
  String privateInterface=params.get("privateinterface");
  String numRetries=params.get("numretries");
  boolean inline=Boolean.parseBoolean(params.get("inline"));
  if (publicInterface == null) {
    throw new InvalidParameterValueException("Please specify a public interface.");
  }
  if (privateInterface == null) {
    throw new InvalidParameterValueException("Please specify a private interface.");
  }
  if (numRetries == null) {
    numRetries="1";
  }
  if (deviceName.equalsIgnoreCase(NetworkDevice.F5BigIpLoadBalancer.getName())) {
    resource=new F5BigIpResource();
    guid=getExternalNetworkResourceGuid(zoneId,ExternalNetworkResourceName.F5BigIp,ipAddress);
  }
 else   if (deviceName.equalsIgnoreCase(NetworkDevice.NetscalerLoadBalancer.getName())) {
    resource=new NetscalerResource();
    guid=getExternalNetworkResourceGuid(zoneId,ExternalNetworkResourceName.NetscalerMPX,ipAddress);
  }
 else {
    throw new CloudRuntimeException("An unsupported networt device type is added as external load balancer.");
  }
  Map hostDetails=new HashMap<String,String>();
  hostDetails.put("zoneId",String.valueOf(zoneId));
  hostDetails.put("ip",ipAddress);
  hostDetails.put("username",username);
  hostDetails.put("password",password);
  hostDetails.put("publicInterface",publicInterface);
  hostDetails.put("privateInterface",privateInterface);
  hostDetails.put("numRetries",numRetries);
  hostDetails.put("guid",guid);
  hostDetails.put("name",guid);
  hostDetails.put("inline",String.valueOf(inline));
  try {
    resource.configure(guid,hostDetails);
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  Host host=_agentMgr.addHost(zoneId,resource,Host.Type.ExternalLoadBalancer,hostDetails);
  if (host != null) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    PhysicalNetworkExternalDeviceVO device=new PhysicalNetworkExternalDeviceVO(ntwkSvcProvider.getId(),host.getId());
    _physicalNetworkExternalDeviceDao.persist(device);
    txn.commit();
    return host;
  }
 else {
    return null;
  }
}
