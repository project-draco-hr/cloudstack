@attr(tags=['advanced', 'simulator', 'basic', 'sg'], required_hardware=False)
def test_rolepermission_lifecycle_update(self):
    '\n            Tests order updation of role permission\n        '
    permissions = [self.rolepermission]
    rules = ['list*', '*Vol*', 'listCapabilities']
    for rule in rules:
        data = copy.deepcopy(self.testdata['rolepermission'])
        data['rule'] = rule
        permission = RolePermission.create(self.apiclient, data)
        self.cleanup.append(permission)
        permissions.append(permission)

    def validate_permissions_list(permissions):
        list_rolepermissions = RolePermission.list(self.apiclient, roleid=self.role.id)
        self.assertEqual(len(list_rolepermissions), len(permissions), msg='List of role permissions do not match created list of permissions')
        for (idx, rolepermission) in enumerate(list_rolepermissions):
            self.assertEqual(rolepermission.rule, permissions[idx].rule, msg="Rule permission don't match with expected item at the index")
            self.assertEqual(rolepermission.permission, permissions[idx].permission, msg="Rule permission don't match with expected item at the index")
    rule = permissions.pop((len(permissions) - 1))
    permissions = ([rule] + permissions)
    rule.update(self.apiclient, ruleorder=','.join(map((lambda x: x.id), permissions)))
    validate_permissions_list(permissions)
    rule = permissions.pop(0)
    permissions = (permissions + [rule])
    rule.update(self.apiclient, ruleorder=','.join(map((lambda x: x.id), permissions)))
    validate_permissions_list(permissions)
    for _ in range(3):
        shuffle(permissions)
        rule.update(self.apiclient, ruleorder=','.join(map((lambda x: x.id), permissions)))
        validate_permissions_list(permissions)
