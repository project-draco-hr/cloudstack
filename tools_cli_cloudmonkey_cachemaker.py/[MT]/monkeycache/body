def monkeycache(apis):
    '\n    Feed this a dictionary of api bananas, it spits out processed cache\n    '
    if isinstance(type(apis), types.NoneType):
        return {}
    responsekey = filter((lambda x: ('response' in x)), apis.keys())
    if (len(responsekey) == 0):
        print '[monkeycache] Invalid dictionary, has no response'
        return None
    if (len(responsekey) != 1):
        print '[monkeycache] Multiple responsekeys, chosing first one'
    responsekey = responsekey[0]
    verbs = set()
    cache = {}
    cache['count'] = getvalue(apis[responsekey], 'count')
    cache['asyncapis'] = []
    for api in getvalue(apis[responsekey], 'api'):
        name = getvalue(api, 'name')
        (verb, subject) = splitverbsubject(name)
        apidict = {}
        apidict['name'] = name
        apidict['description'] = getvalue(api, 'description')
        apidict['isasync'] = getvalue(api, 'isasync')
        if apidict['isasync']:
            cache['asyncapis'].append(name)
        apidict['related'] = splitcsvstring(getvalue(api, 'related'))
        required = []
        apiparams = []
        for param in getvalue(api, 'params'):
            apiparam = {}
            apiparam['name'] = getvalue(param, 'name')
            apiparam['description'] = getvalue(param, 'description')
            apiparam['required'] = (getvalue(param, 'required') is True)
            apiparam['length'] = int(getvalue(param, 'length'))
            apiparam['type'] = getvalue(param, 'type')
            apiparam['related'] = splitcsvstring(getvalue(param, 'related'))
            if apiparam['required']:
                required.append(apiparam['name'])
            apiparams.append(apiparam)
        apidict['requiredparams'] = required
        apidict['params'] = apiparams
        if (verb not in cache):
            cache[verb] = {}
        cache[verb][subject] = apidict
        verbs.add(verb)
    cache['verbs'] = list(verbs)
    return cache
