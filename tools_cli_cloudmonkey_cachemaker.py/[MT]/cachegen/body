def cachegen(apis):
    pattern = re.compile('[A-Z]')
    responsekey = filter((lambda x: ('response' in x)), apis.keys())
    if (len(responsekey) == 0):
        print '[cachegen] Invalid dictionary, has no response'
        return None
    if (len(responsekey) != 1):
        print '[cachegen] Multiple responsekeys, chosing first one'
    responsekey = responsekey[0]
    verbs = set()
    cache = {}
    cache['count'] = getvalue(apis[responsekey], 'count')
    for api in getvalue(apis[responsekey], 'api'):
        name = getvalue(api, 'name')
        response = getvalue(api, 'response')
        idx = pattern.search(name).start()
        verb = name[:idx]
        subject = name[idx:]
        apidict = {}
        apidict['name'] = name
        apidict['description'] = getvalue(api, 'description')
        apidict['isasync'] = getvalue(api, 'isasync')
        apidict['related'] = csv_str_as_list(getvalue(api, 'related'))
        required = []
        apiparams = []
        for param in getvalue(api, 'params'):
            apiparam = {}
            apiparam['name'] = getvalue(param, 'name')
            apiparam['description'] = getvalue(param, 'description')
            apiparam['required'] = (getvalue(param, 'required') is True)
            apiparam['length'] = int(getvalue(param, 'length'))
            apiparam['type'] = getvalue(param, 'type')
            apiparam['related'] = csv_str_as_list(getvalue(param, 'related'))
            if apiparam['required']:
                required.append(apiparam['name'])
            apiparams.append(apiparam)
        apidict['requiredparams'] = required
        apidict['params'] = apiparams
        apidict['response'] = getvalue(api, 'response')
        cache[verb] = {subject: apidict, }
        verbs.add(verb)
    cache['verbs'] = list(verbs)
    return cache
