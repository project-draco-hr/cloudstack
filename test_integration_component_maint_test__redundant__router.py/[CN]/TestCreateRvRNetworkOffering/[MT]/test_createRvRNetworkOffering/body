@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_createRvRNetworkOffering(self):
    'Test create RvR supported network offering\n        '
    self.debug('Creating network offering with redundant VR capability')
    try:
        network_offering = NetworkOffering.create(self.apiclient, self.testdata['nw_off_isolated_RVR'], conservemode=True)
    except Exception as e:
        self.fail(('Create network offering failed! - %s' % e))
    self.debug(('Enabling network offering - %s' % network_offering.name))
    network_offering.update(self.apiclient, state='Enabled')
    self.cleanup.append(network_offering)
    self.debug('Checking if the network offering created successfully?')
    network_offs = NetworkOffering.list(self.apiclient, id=network_offering.id, listall=True)
    self.assertEqual(isinstance(network_offs, list), True, 'List network offering should not return empty response')
    self.assertEqual(len(network_offs), 1, 'List network off should have newly created network off')
    for service in network_offs[0].service:
        if (service.name == 'SourceNat'):
            self.debug('Verifying SourceNat capabilites')
            for capability in service.capability:
                if (capability.name == 'RedundantRouter'):
                    self.assertTrue((capability.value == 'true'))
                    self.debug('RedundantRouter is enabled')
    return
