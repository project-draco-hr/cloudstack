def get_master_and_backupRouter(self):
    retry = 4
    master_router = backup_router = None
    while (retry > 0):
        routers = Router.list(self.apiclient, networkid=self.network.id, listall=True)
        retry = (retry - 1)
        if (not ((routers[0].redundantstate == 'MASTER') or (routers[1].redundantstate == 'MASTER'))):
            continue
        if (routers[0].redundantstate == 'MASTER'):
            master_router = routers[0]
            backup_router = routers[1]
            break
        else:
            master_router = routers[1]
            backup_router = routers[0]
            break
    return (master_router, backup_router)
