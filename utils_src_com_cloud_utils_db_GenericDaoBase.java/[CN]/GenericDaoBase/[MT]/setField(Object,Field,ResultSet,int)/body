{
  try {
    final Class<?> type=field.getType();
    if (type == String.class) {
      field.set(entity,rs.getString(index));
    }
 else     if (type == long.class) {
      field.setLong(entity,rs.getLong(index));
    }
 else     if (type == Long.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getLong(index));
      }
    }
 else     if (type.isEnum()) {
      final Enumerated enumerated=field.getAnnotation(Enumerated.class);
      final EnumType enumType=(enumerated == null) ? EnumType.STRING : enumerated.value();
      final Enum<?>[] enums=(Enum<?>[])field.getType().getEnumConstants();
      for (      final Enum<?> e : enums) {
        if ((enumType == EnumType.STRING && e.name().equalsIgnoreCase(rs.getString(index))) || (enumType == EnumType.ORDINAL && e.ordinal() == rs.getInt(index))) {
          field.set(entity,e);
          return;
        }
      }
    }
 else     if (type == int.class) {
      field.set(entity,rs.getInt(index));
    }
 else     if (type == Integer.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getInt(index));
      }
    }
 else     if (type == Date.class) {
      final Object data=rs.getDate(index);
      if (data == null) {
        field.set(entity,null);
        return;
      }
      field.set(entity,DateUtil.parseDateString(s_gmtTimeZone,rs.getString(index)));
    }
 else     if (type == Calendar.class) {
      final Object data=rs.getDate(index);
      if (data == null) {
        field.set(entity,null);
        return;
      }
      final Calendar cal=Calendar.getInstance();
      cal.setTime(DateUtil.parseDateString(s_gmtTimeZone,rs.getString(index)));
      field.set(entity,cal);
    }
 else     if (type == boolean.class) {
      field.setBoolean(entity,rs.getBoolean(index));
    }
 else     if (type == Boolean.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getBoolean(index));
      }
    }
 else     if (type == URI.class) {
      try {
        URI uri=new URI(rs.getString(index));
        field.set(entity,uri);
      }
 catch (      URISyntaxException e) {
        throw new CloudRuntimeException("Invalid URI: " + rs.getString(index),e);
      }
    }
 else     if (type == URL.class) {
      URL url;
      try {
        url=new URL(rs.getString(index));
      }
 catch (      MalformedURLException e) {
        throw new CloudRuntimeException("Invalid URL: " + rs.getString(index),e);
      }
      field.set(entity,url);
    }
 else     if (type == short.class) {
      field.setShort(entity,rs.getShort(index));
    }
 else     if (type == Short.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getShort(index));
      }
    }
 else     if (type == float.class) {
      field.setFloat(entity,rs.getFloat(index));
    }
 else     if (type == Float.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getFloat(index));
      }
    }
 else     if (type == double.class) {
      field.setDouble(entity,rs.getDouble(index));
    }
 else     if (type == Double.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getDouble(index));
      }
    }
 else     if (type == byte.class) {
      field.setByte(entity,rs.getByte(index));
    }
 else     if (type == Byte.class) {
      if (rs.getObject(index) == null) {
        field.set(entity,null);
      }
 else {
        field.set(entity,rs.getByte(index));
      }
    }
 else     if (type == byte[].class) {
      field.set(entity,rs.getBytes(index));
    }
 else {
      field.set(entity,rs.getObject(index));
    }
  }
 catch (  final IllegalAccessException e) {
    throw new CloudRuntimeException("Yikes! ",e);
  }
}
