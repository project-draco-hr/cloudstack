{
  UpgradeVMParam param=new UpgradeVMParam(userId,vmId,serviceOfferingId);
  Gson gson=GsonHelper.getBuilder().create();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException("Unable to find a virtual machine with id " + vmId);
  }
  ServiceOfferingVO newServiceOffering=_offeringsDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException("Unable to find a service offering with id " + serviceOfferingId);
  }
  if (!vm.getState().equals(State.Stopped)) {
    s_logger.warn("Unable to upgrade virtual machine " + vm.toString() + " in state "+ vm.getState());
    throw new InvalidParameterValueException("Unable to upgrade virtual machine " + vm.toString() + " in state "+ vm.getState()+ "; make sure the virtual machine is stopped and not in an error state before upgrading.");
  }
  if (vm.getServiceOfferingId() == newServiceOffering.getId()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info("Not upgrading vm " + vm.toString() + " since it already has the requested service offering ("+ newServiceOffering.getName()+ ")");
    }
    throw new InvalidParameterValueException("Not upgrading vm " + vm.toString() + " since it already has the requested service offering ("+ newServiceOffering.getName()+ ")");
  }
  ServiceOfferingVO currentServiceOffering=_offeringsDao.findById(vm.getServiceOfferingId());
  if (!currentServiceOffering.getGuestIpType().equals(newServiceOffering.getGuestIpType())) {
    String errorMsg="The service offering being upgraded to has a guest IP type: " + newServiceOffering.getGuestIpType();
    errorMsg+=". Please select a service offering with the same guest IP type as the VM's current service offering (" + currentServiceOffering.getGuestIpType() + ").";
    throw new InvalidParameterValueException(errorMsg);
  }
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException("Unable to upgrade virtual machine " + vm.toString() + ", cannot switch between local storage and shared storage service offerings.  Current offering useLocalStorage="+ currentServiceOffering.getUseLocalStorage()+ ", target offering useLocalStorage="+ newServiceOffering.getUseLocalStorage());
  }
  if (!_agentMgr.isVirtualMachineUpgradable(vm,newServiceOffering)) {
    throw new InvalidParameterValueException("Unable to upgrade virtual machine, not enough resources available for an offering of " + newServiceOffering.getCpu() + " cpu(s) at "+ newServiceOffering.getSpeed()+ " Mhz, and "+ newServiceOffering.getRamSize()+ " MB of memory");
  }
  List<String> currentTags=_configMgr.csvTagsToList(currentServiceOffering.getTags());
  List<String> newTags=_configMgr.csvTagsToList(newServiceOffering.getTags());
  if (!newTags.containsAll(currentTags)) {
    throw new InvalidParameterValueException("Unable to upgrade virtual machine; the new service offering does not have all the tags of the " + "current service offering. Current service offering tags: " + currentTags + "; "+ "new service offering tags: "+ newTags);
  }
  long eventId=saveScheduledEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_UPGRADE,"upgrading Vm with Id: " + vmId);
  param.setEventId(eventId);
  AsyncJobVO job=new AsyncJobVO();
  job.setUserId(UserContext.current().getUserId());
  job.setAccountId(vm.getAccountId());
  job.setCmd("UpgradeVM");
  job.setCmdInfo(gson.toJson(param));
  job.setCmdOriginator(UpgradeVMCmd.getResultObjectName());
  return _asyncMgr.submitAsyncJob(job,true);
}
