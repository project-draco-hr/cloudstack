{
  String ipAddress=cmd.getPublicIpAddress();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account account=null;
  if ((accountName != null && domainId == null) || (accountName == null && domainId != null)) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Account name and domain id both have to be passed as a tuple");
  }
  if (accountName != null && domainId != null && ipAddress != null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Either Account name and domain id both have to be passed as a tuple; or the ip address has to be passed whilst searching");
  }
  if (accountName != null && domainId != null) {
    account=_accountDao.findAccount(accountName,domainId);
    if (account == null)     throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,"Specified account for domainId:" + domainId + " account name:"+ accountName+ " doesn't exist");
 else {
      Account ctxAccount=UserContext.current().getAccount();
      if (!isChildDomain(ctxAccount.getDomainId(),account.getDomainId())) {
        throw new PermissionDeniedException("Unable to list ip forwarding rules for address " + ipAddress + ", permission denied for the executing account: "+ ctxAccount.getId()+ " to view rules for account: "+ account.getId());
      }
      Filter searchFilter=new Filter(FirewallRuleVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
      SearchBuilder<FirewallRuleVO> sb=_firewallRulesDao.createSearchBuilder();
      SearchBuilder<IPAddressVO> sb1=_publicIpAddressDao.createSearchBuilder();
      sb1.and("accountId",sb1.entity().getAccountId(),SearchCriteria.Op.EQ);
      sb1.and("oneToOneNat",sb1.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
      sb.join("sb1",sb1,sb.entity().getPublicIpAddress(),sb1.entity().getAddress(),JoinBuilder.JoinType.INNER);
      SearchCriteria<FirewallRuleVO> sc=sb.create();
      sc.setJoinParameters("sb1","oneToOneNat",new Long(1));
      sc.setJoinParameters("sb1","accountId",account.getId());
      return _firewallRulesDao.search(sc,searchFilter);
    }
  }
  if (account == null) {
    account=UserContext.current().getAccount();
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    return searchIpForwardingRulesInternal(ipAddress,cmd,null,Account.ACCOUNT_TYPE_ADMIN);
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    if (ipAddress != null) {
      IPAddressVO ipAddressVO=_publicIpAddressDao.findById(ipAddress);
      if (ipAddressVO == null) {
        throw new InvalidParameterValueException("Unable to find IP address " + ipAddress);
      }
 else {
        Account addrOwner=_accountDao.findById(ipAddressVO.getAccountId());
        if ((addrOwner != null) && !_domainDao.isChildDomain(account.getDomainId(),addrOwner.getDomainId())) {
          throw new PermissionDeniedException("Unable to list ip forwarding rule for address " + ipAddress + ", permission denied for account "+ account.getId());
        }
 else {
          return searchIpForwardingRulesInternal(ipAddress,cmd,null,Account.ACCOUNT_TYPE_DOMAIN_ADMIN);
        }
      }
    }
 else {
      return searchIpForwardingRulesInternal(ipAddress,cmd,account.getId(),Account.ACCOUNT_TYPE_DOMAIN_ADMIN);
    }
  }
  if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    if (ipAddress != null) {
      IPAddressVO ipAddressVO=_publicIpAddressDao.findById(ipAddress);
      if (ipAddressVO == null) {
        throw new InvalidParameterValueException("Unable to find IP address " + ipAddress);
      }
 else {
        if ((ipAddressVO.getAccountId() == null) || (account.getId() != ipAddressVO.getAccountId().longValue())) {
          throw new PermissionDeniedException("Unable to list ip forwarding rule for address " + ipAddress + ", permission denied for account "+ account.getId());
        }
 else {
          return searchIpForwardingRulesInternal(ipAddress,cmd,null,Account.ACCOUNT_TYPE_NORMAL);
        }
      }
    }
 else {
      return searchIpForwardingRulesInternal(ipAddress,cmd,account.getId(),Account.ACCOUNT_TYPE_NORMAL);
    }
  }
  return new ArrayList<FirewallRuleVO>();
}
