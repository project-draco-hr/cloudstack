{
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the VM");
    }
    throw new PermissionDeniedException("No permission to migrate VM, Only Root Admin can migrate a VM!");
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not Running, unable to migrate the vm " + vm);
    }
    throw new InvalidParameterValueException("VM is not Running, unable to migrate the vm " + vm);
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is not XenServer, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported Hypervisor Type for VM migration, we support XenServer only");
  }
  ServiceOfferingVO svcOffering=_offeringsDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is using Local Storage, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported operation, VM uses Local storage, cannot migrate");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_hostDao.findById(srcHostId);
  if (srcHost == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find the host with id: " + srcHostId + " of this VM:"+ vm);
    }
    throw new InvalidParameterValueException("Unable to find the host with id: " + srcHostId + " of this VM:"+ vm);
  }
  Long cluster=srcHost.getClusterId();
  Type hostType=srcHost.getType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Searching for all hosts in cluster: " + cluster + " for migrating VM "+ vm);
  }
  List<? extends Host> allHostsInCluster=searchForServers(startIndex,pageSize,null,hostType,null,null,null,cluster,null,null,null);
  allHostsInCluster.remove(srcHost);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Other Hosts in this cluster: " + allHostsInCluster);
  }
  int requiredCpu=svcOffering.getCpu() * svcOffering.getSpeed();
  long requiredRam=svcOffering.getRamSize() * 1024L * 1024L;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Searching for hosts in cluster: " + cluster + " having required CPU: "+ requiredCpu+ " and RAM:"+ requiredRam);
  }
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("CPUOverprovisioningFactor considered: " + cpuOverprovisioningFactor);
  }
  List<Long> hostsWithCapacity=_capacityDao.listHostsWithEnoughCapacity(requiredCpu,requiredRam,cluster,hostType.name(),cpuOverprovisioningFactor);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Hosts having capacity: " + hostsWithCapacity);
  }
  return new Pair<List<? extends Host>,List<Long>>(allHostsInCluster,hostsWithCapacity);
}
