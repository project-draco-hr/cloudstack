{
  _configs=_configDao.getConfiguration();
  final String value=_configs.get("event.purge.interval");
  final int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  _purgeDelay=NumbersUtil.parseInt(_configs.get("event.purge.delay"),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  final int alertPurgeInterval=NumbersUtil.parseInt(_configDao.getValue(Config.AlertPurgeInterval.key()),60 * 60 * 24);
  _alertPurgeDelay=NumbersUtil.parseInt(_configDao.getValue(Config.AlertPurgeDelay.key()),0);
  if (_alertPurgeDelay != 0) {
    _alertExecutor.scheduleAtFixedRate(new AlertPurgeTask(),alertPurgeInterval,alertPurgeInterval,TimeUnit.SECONDS);
  }
  final String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  final String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  supportedHypervisors.add(HypervisorType.KVM);
  supportedHypervisors.add(HypervisorType.XenServer);
  return true;
}
