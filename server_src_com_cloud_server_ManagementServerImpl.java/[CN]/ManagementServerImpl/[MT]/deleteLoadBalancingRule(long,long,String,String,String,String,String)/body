{
  Transaction txn=Transaction.currentTxn();
  boolean locked=false;
  try {
    AccountVO accountVO=_accountDao.findById(accountId);
    if (accountVO == null) {
      throw new PermissionDeniedException("Account does not own supplied address");
    }
    if (!NetUtils.isValidPort(publicPort) || !NetUtils.isValidPort(privatePort)) {
      throw new InvalidParameterValueException("Invalid value for port");
    }
    if (!NetUtils.isValidAlgorithm(algo)) {
      throw new InvalidParameterValueException("Invalid protocol");
    }
    IPAddressVO ipVO=_publicIpAddressDao.acquire(publicIp);
    if (ipVO == null) {
      throw new PermissionDeniedException("User does not own supplied address");
    }
    locked=true;
    if ((ipVO.getAllocated() == null) || (ipVO.getAccountId() == null) || (ipVO.getAccountId().longValue() != accountId)) {
      if (!BaseCmd.isAdmin(accountVO.getType())) {
        throw new PermissionDeniedException("User does not own supplied address");
      }
    }
    List<FirewallRuleVO> fwdings=_firewallRulesDao.listLoadBalanceRulesForUpdate(publicIp,publicPort,algo);
    FirewallRuleVO fwRule=null;
    if (fwdings.size() == 0) {
      throw new InvalidParameterValueException("No such rule");
    }
    for (    FirewallRuleVO frv : fwdings) {
      if (frv.getPrivateIpAddress().equalsIgnoreCase(privateIp) && frv.getPrivatePort().equals(privatePort)) {
        fwRule=frv;
        break;
      }
    }
    if (fwRule == null) {
      throw new InvalidParameterValueException("No such rule");
    }
    txn.start();
    fwRule.setEnabled(false);
    _firewallRulesDao.update(fwRule.getId(),fwRule);
    boolean success=_networkMgr.updateFirewallRule(fwRule,null,null);
    if (!success) {
      throw new InternalErrorException("Failed to update router");
    }
    _firewallRulesDao.expunge(fwRule.getId());
    txn.commit();
    return success;
  }
 catch (  Throwable e) {
    if (e instanceof InvalidParameterValueException) {
      throw (InvalidParameterValueException)e;
    }
 else     if (e instanceof PermissionDeniedException) {
      throw (PermissionDeniedException)e;
    }
 else     if (e instanceof InternalErrorException) {
      s_logger.warn("ManagementServer error",e);
      throw (InternalErrorException)e;
    }
    s_logger.warn("ManagementServer error",e);
  }
 finally {
    if (locked) {
      _publicIpAddressDao.release(publicIp);
    }
  }
  return false;
}
