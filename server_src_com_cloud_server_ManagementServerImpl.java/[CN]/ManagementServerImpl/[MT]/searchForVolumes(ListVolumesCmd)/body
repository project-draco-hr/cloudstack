{
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Invalid domain id (" + domainId + ") given, unable to list volumes.");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException("could not find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,"created",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("accountIdEQ",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and("accountIdIN",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("volumeType",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and("instanceId",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and("systemUse",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join("diskOfferingSearch",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and("type",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or("nulltype",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join("vmSearch",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("volumeType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (accountId != null) {
    sc.setParameters("accountIdEQ",accountId);
    sc.setJoinParameters("diskOfferingSearch","systemUse",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
    }
 else {
      sc.setJoinParameters("domainSearch","path",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters("volumeType","%" + type + "%");
  }
  if (vmInstanceId != null) {
    sc.setParameters("instanceId",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters("dataCenterId",zone);
  }
  if (pod != null) {
    sc.setParameters("podId",pod);
  }
  sc.setJoinParameters("vmSearch","type",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters("state",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}
