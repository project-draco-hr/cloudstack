{
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new InvalidParameterValueException("Invalid domain id (" + domainId + ") given, unable to list vm groups.");
      }
      if (accountName != null) {
        caller=_accountDao.findActiveAccount(accountName,domainId);
        if (caller == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
        permittedAccounts.add(caller.getId());
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
    }
  }
 else {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(InstanceGroupVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Object name=cmd.getGroupName();
  Object keyword=cmd.getKeyword();
  SearchBuilder<InstanceGroupVO> sb=_vmGroupDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("accountId",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<InstanceGroupVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<InstanceGroupVO> ssc=_vmGroupDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters("accountId",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain != null) {
      sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
    }
  }
  return _vmGroupDao.search(sc,searchFilter);
}
