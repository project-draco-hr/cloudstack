{
  AccountVO account=_accountDao.findById(accountId);
  if (account == null) {
    throw new InvalidParameterValueException("Please specify a valid account.");
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException("Please specify a valid zone.");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
    throw new InvalidParameterValueException("Please specify a valid disk offering.");
  }
  List<StoragePoolVO> storagePools=_poolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException("Please add a host in the specified zone before creating a new volume.");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException("Please specify a zone that has at least one shared primary storage pool.");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException("Maximum number of volumes for account: " + account.getAccountName() + " has been exceeded.");
    rae.setResourceType("volume");
    throw rae;
  }
  long eventId=saveScheduledEvent(userId,accountId,EventTypes.EVENT_VOLUME_CREATE,"creating volume");
  VolumeOperationParam param=new VolumeOperationParam();
  param.setOp(VolumeOp.Create);
  param.setAccountId(accountId);
  param.setUserId(UserContext.current().getUserId());
  param.setName(name);
  param.setZoneId(zoneId);
  param.setDiskOfferingId(diskOfferingId);
  param.setEventId(eventId);
  param.setSize(size);
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobVO job=new AsyncJobVO();
  job.setUserId(UserContext.current().getUserId());
  job.setAccountId(accountId);
  job.setCmd("VolumeOperation");
  job.setCmdInfo(gson.toJson(param));
  job.setCmdOriginator(CreateVolumeCmd.getResultObjectName());
  return _asyncMgr.submitAsyncJob(job);
}
