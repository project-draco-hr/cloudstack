{
  if (accountId == null) {
    throw new InvalidParameterValueException("accountId not specified");
  }
  if (!NetUtils.isValidIp(ipAddress)) {
    throw new InvalidParameterValueException("invalid ip address");
  }
  if (!NetUtils.isValidPort(publicPort)) {
    throw new InvalidParameterValueException("publicPort is an invalid value");
  }
  if (!NetUtils.isValidPort(privatePort)) {
    throw new InvalidParameterValueException("privatePort is an invalid value");
  }
  if ((algorithm == null) || !NetUtils.isValidAlgorithm(algorithm)) {
    throw new InvalidParameterValueException("Invalid algorithm");
  }
  boolean locked=false;
  try {
    LoadBalancerVO exitingLB=_loadBalancerDao.findByIpAddressAndPublicPort(ipAddress,publicPort);
    if (exitingLB != null) {
      throw new InvalidParameterValueException("IP Address/public port already load balanced by an existing load balancer rule");
    }
    List<FirewallRuleVO> existingFwRules=_firewallRulesDao.listIPForwarding(ipAddress,publicPort,true);
    if ((existingFwRules != null) && !existingFwRules.isEmpty()) {
      FirewallRuleVO existingFwRule=existingFwRules.get(0);
      String securityGroupName=null;
      if (existingFwRule.getGroupId() != null) {
        long groupId=existingFwRule.getGroupId();
        SecurityGroupVO securityGroup=_securityGroupDao.findById(groupId);
        securityGroupName=securityGroup.getName();
      }
      throw new InvalidParameterValueException("IP Address (" + ipAddress + ") and port ("+ publicPort+ ") already in use"+ ((securityGroupName == null) ? "" : " by port forwarding service " + securityGroupName));
    }
    IPAddressVO addr=_publicIpAddressDao.acquire(ipAddress);
    if (addr == null) {
      throw new PermissionDeniedException("User does not own ip address " + ipAddress);
    }
    locked=true;
    if ((addr.getAllocated() == null) || !accountId.equals(addr.getAccountId())) {
      throw new PermissionDeniedException("User does not own ip address " + ipAddress);
    }
    LoadBalancerVO loadBalancer=new LoadBalancerVO(name,description,accountId.longValue(),ipAddress,publicPort,privatePort,algorithm);
    loadBalancer=_loadBalancerDao.persist(loadBalancer);
    Long id=loadBalancer.getId();
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_LOAD_BALANCER_CREATE);
    if (id == null) {
      event.setDescription("Failed to create load balancer " + loadBalancer.getName() + " on ip address "+ ipAddress+ "["+ publicPort+ "->"+ privatePort+ "]");
      event.setLevel(EventVO.LEVEL_ERROR);
    }
 else {
      event.setDescription("Successfully created load balancer " + loadBalancer.getName() + " on ip address "+ ipAddress+ "["+ publicPort+ "->"+ privatePort+ "]");
      String params="id=" + loadBalancer.getId() + "\ndcId="+ addr.getDataCenterId();
      event.setParameters(params);
      event.setLevel(EventVO.LEVEL_INFO);
    }
    _eventDao.persist(event);
    return _loadBalancerDao.findById(id);
  }
  finally {
    if (locked) {
      _publicIpAddressDao.release(ipAddress);
    }
  }
}
