{
  if (name.length() > 32) {
    throw new InvalidParameterValueException("Template name should be less than 32 characters");
  }
  if (!name.matches("^[\\p{Alnum} ._-]+")) {
    throw new InvalidParameterValueException("Only alphanumeric, space, dot, dashes and underscore characters allowed");
  }
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (snapshotId == null && !_storageMgr.volumeInactive(volume)) {
    String msg="Unable to create private template for volume: " + volume.getName() + "; volume is attached to a non-stopped VM.";
    if (s_logger.isInfoEnabled()) {
      s_logger.info(msg);
    }
    throw new InternalErrorException(msg);
  }
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  if (guestOS == null) {
    throw new InvalidParameterValueException("Please specify a valid guest OS.");
  }
  long eventId=saveScheduledEvent(userId,volume.getAccountId(),EventTypes.EVENT_TEMPLATE_CREATE,"creating template" + name);
  CreatePrivateTemplateParam param=new CreatePrivateTemplateParam(userId,volume.getAccountId(),volumeId,guestOSId,eventId,name,description,requiresHvm,bits,passwordEnabled,isPublic,featured,snapshotId);
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobVO job=new AsyncJobVO();
  job.setUserId(UserContext.current().getUserId());
  job.setAccountId(volume.getAccountId());
  job.setCmd("CreatePrivateTemplate");
  job.setCmdInfo(gson.toJson(param));
  job.setCmdOriginator(CreateTemplateCmd.getResultObjectName());
  return _asyncMgr.submitAsyncJob(job,true);
}
