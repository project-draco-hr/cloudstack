{
  Account account=(Account)UserContext.current().getAccountObject();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  Account ipAddressOwner=null;
  String ipAddress=cmd.getPublicIp();
  if (ipAddress != null) {
    IPAddressVO ipAddressVO=_publicIpAddressDao.findById(ipAddress);
    if (ipAddressVO == null) {
      throw new InvalidParameterValueException("Unable to list load balancers, IP address " + ipAddress + " not found.");
    }
 else {
      Long ipAddrAcctId=ipAddressVO.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException("Unable to list load balancers, IP address " + ipAddress + " is not associated with an account.");
      }
      ipAddressOwner=_accountDao.findById(ipAddrAcctId);
    }
  }
  if ((account == null) || isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException("Unable to list load balancers for domain id " + domainId + ", permission denied.");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else     if (ipAddressOwner != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),ipAddressOwner.getDomainId())) {
        throw new PermissionDeniedException("Unable to list load balancer rules for IP address " + ipAddress + ", permission denied.");
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(LoadBalancerVO.class,"ipAddress",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Object name=cmd.getLoadBalancerRuleName();
  Object keyword=cmd.getKeyword();
  Object instanceId=cmd.getVirtualMachineId();
  SearchBuilder<LoadBalancerVO> sb=_loadBalancerDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("nameEQ",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and("accountId",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and("ipAddress",sb.entity().getIpAddress(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId());
  }
  if (instanceId != null) {
    SearchBuilder<LoadBalancerVMMapVO> lbVMSearch=_loadBalancerVMMapDao.createSearchBuilder();
    lbVMSearch.and("instanceId",lbVMSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join("lbVMSearch",lbVMSearch,sb.entity().getId(),lbVMSearch.entity().getLoadBalancerId());
  }
  SearchCriteria<LoadBalancerVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<LoadBalancerVO> ssc=_loadBalancerDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("description",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("nameEQ",name);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (ipAddress != null) {
    sc.setParameters("ipAddress",ipAddress);
  }
  if (accountId != null) {
    sc.setParameters("accountId",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById((Long)domainId);
    sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
  }
  if (instanceId != null) {
    sc.setJoinParameters("lbVMSearch","instanceId",instanceId);
  }
  return _loadBalancerDao.search(sc,searchFilter);
}
