{
  final Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  final Long podId=cmd.getPodId();
  final Long clusterId=cmd.getClusterId();
  final Boolean fetchLatest=cmd.getFetchLatest();
  if (clusterId != null) {
    throw new InvalidParameterValueException("Currently clusterId param is not suppoerted");
  }
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=new ArrayList<SummedCapacity>();
  if (zoneId == null && podId == null) {
    final List<SummedCapacity> summedCapacitiesAtZone=_capacityDao.listCapacitiesGroupedByLevelAndType(capacityType,zoneId,podId,clusterId,1,cmd.getPageSizeVal());
    if (summedCapacitiesAtZone != null) {
      summedCapacities.addAll(summedCapacitiesAtZone);
    }
  }
 else   if (podId == null) {
    final List<SummedCapacity> summedCapacitiesAtPod=_capacityDao.listCapacitiesGroupedByLevelAndType(capacityType,zoneId,podId,clusterId,2,cmd.getPageSizeVal());
    if (summedCapacitiesAtPod != null) {
      summedCapacities.addAll(summedCapacitiesAtPod);
    }
  }
 else {
    final List<SummedCapacity> summedCapacitiesAtCluster=_capacityDao.listCapacitiesGroupedByLevelAndType(capacityType,zoneId,podId,clusterId,3,cmd.getPageSizeVal());
    if (summedCapacitiesAtCluster != null) {
      summedCapacities.addAll(summedCapacitiesAtCluster);
    }
  }
  final List<SummedCapacity> summedCapacitiesForSecStorage=getSecStorageUsed(zoneId,capacityType);
  if (summedCapacitiesForSecStorage != null) {
    summedCapacities.addAll(summedCapacitiesForSecStorage);
  }
  Collections.sort(summedCapacities,new Comparator<SummedCapacity>(){
    @Override public int compare(    final SummedCapacity arg0,    final SummedCapacity arg1){
      if (arg0.getPercentUsed() < arg1.getPercentUsed()) {
        return 1;
      }
 else       if (arg0.getPercentUsed().equals(arg1.getPercentUsed())) {
        return 0;
      }
      return -1;
    }
  }
);
  final List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  Integer pageSize=null;
  try {
    pageSize=Integer.valueOf(cmd.getPageSizeVal().toString());
  }
 catch (  final IllegalArgumentException e) {
    throw new InvalidParameterValueException("pageSize " + cmd.getPageSizeVal() + " is out of Integer range is not supported for this call");
  }
  summedCapacities=summedCapacities.subList(0,summedCapacities.size() < cmd.getPageSizeVal() ? summedCapacities.size() : pageSize);
  for (  final SummedCapacity summedCapacity : summedCapacities) {
    final CapacityVO capacity=new CapacityVO(summedCapacity.getDataCenterId(),summedCapacity.getPodId(),summedCapacity.getClusterId(),summedCapacity.getCapacityType(),summedCapacity.getPercentUsed());
    capacity.setUsedCapacity(summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity());
    capacity.setTotalCapacity(summedCapacity.getTotalCapacity());
    capacities.add(capacity);
  }
  return capacities;
}
