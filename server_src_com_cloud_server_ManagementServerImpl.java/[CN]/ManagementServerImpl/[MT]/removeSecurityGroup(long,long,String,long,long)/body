{
  boolean locked=false;
  UserVm userVm=_userVmDao.findById(vmId);
  if (userVm == null) {
    throw new InvalidParameterValueException("Unable to find vm: " + vmId);
  }
  saveStartedEvent(userId,userVm.getAccountId(),EventTypes.EVENT_PORT_FORWARDING_SERVICE_REMOVE,"Removing security groups for Vm with Id: " + vmId,startEventId);
  SecurityGroupVO securityGroup=_securityGroupDao.findById(Long.valueOf(securityGroupId));
  if (securityGroup == null) {
    throw new InvalidParameterValueException("Unable to find port forwarding service: " + securityGroupId);
  }
  DomainRouterVO router=null;
  if (userVm.getDomainRouterId() != null)   router=_routerDao.findById(userVm.getDomainRouterId());
  if (router == null) {
    throw new InvalidParameterValueException("Unable to find router for ip address: " + publicIp);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    IPAddressVO ipVO=_publicIpAddressDao.acquire(publicIp);
    if (ipVO == null) {
      throw new PermissionDeniedException("User does not own supplied address");
    }
    locked=true;
    if ((ipVO.getAllocated() == null) || (ipVO.getAccountId() == null) || (ipVO.getAccountId().longValue() != userVm.getAccountId())) {
      throw new PermissionDeniedException("User/account does not own supplied address");
    }
    txn.start();
    Account account=_accountDao.findById(userVm.getAccountId());
{
      List<FirewallRuleVO> fwRulesToRemove=_firewallRulesDao.listForwardingByPubAndPrivIp(true,publicIp,userVm.getGuestIpAddress());
      for (      FirewallRuleVO fwRule : fwRulesToRemove) {
        fwRule.setEnabled(false);
      }
      List<FirewallRuleVO> updatedRules=_networkMgr.updateFirewallRules(null,fwRulesToRemove,router);
      String description;
      String type=EventTypes.EVENT_NET_RULE_DELETE;
      String ruleName="ip forwarding";
      String level=EventVO.LEVEL_INFO;
      for (      FirewallRuleVO fwRule : updatedRules) {
        _firewallRulesDao.remove(fwRule.getId());
        description="deleted " + ruleName + " rule ["+ fwRule.getPublicIpAddress()+ ":"+ fwRule.getPublicPort()+ "]->["+ fwRule.getPrivateIpAddress()+ ":"+ fwRule.getPrivatePort()+ "]"+ " "+ fwRule.getProtocol();
        saveEvent(userId,account.getId(),level,type,description);
      }
    }
    List<String> alreadyMappedPorts=new ArrayList<String>();
    List<FirewallRuleVO> fwRulesToAdd=new ArrayList<FirewallRuleVO>();
    List<SecurityGroupVMMapVO> sgVmMappings=_securityGroupVMMapDao.listByIpAndInstanceId(publicIp,vmId);
    for (    SecurityGroupVMMapVO sgVmMapping : sgVmMappings) {
      if (sgVmMapping.getSecurityGroupId() == securityGroupId) {
        _securityGroupVMMapDao.remove(sgVmMapping.getId());
      }
 else {
        List<NetworkRuleConfigVO> netRules=_networkRuleConfigDao.listBySecurityGroupId(sgVmMapping.getSecurityGroupId());
        for (        NetworkRuleConfigVO netRule : netRules) {
          if (!alreadyMappedPorts.contains(netRule.getPublicPort())) {
            FirewallRuleVO newFwRule=new FirewallRuleVO();
            newFwRule.setEnabled(true);
            newFwRule.setForwarding(true);
            newFwRule.setPrivatePort(netRule.getPrivatePort());
            newFwRule.setProtocol(netRule.getProtocol());
            newFwRule.setPublicPort(netRule.getPublicPort());
            newFwRule.setPublicIpAddress(publicIp);
            newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
            newFwRule.setGroupId(netRule.getSecurityGroupId());
            fwRulesToAdd.add(newFwRule);
            alreadyMappedPorts.add(netRule.getPublicPort());
          }
        }
      }
    }
    for (    FirewallRuleVO addedRule : fwRulesToAdd) {
      _firewallRulesDao.persist(addedRule);
      String description="created new ip forwarding rule [" + addedRule.getPublicIpAddress() + ":"+ addedRule.getPublicPort()+ "]->["+ addedRule.getPrivateIpAddress()+ ":"+ addedRule.getPrivatePort()+ "]"+ " "+ addedRule.getProtocol();
      saveEvent(userId,account.getId(),EventVO.LEVEL_INFO,EventTypes.EVENT_NET_RULE_ADD,description);
    }
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(userVm.getAccountId());
    event.setType(EventTypes.EVENT_PORT_FORWARDING_SERVICE_REMOVE);
    event.setDescription("Successfully removed port forwarding service " + securityGroup.getName() + " from virtual machine "+ userVm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    String params="sgId=" + securityGroup.getId() + "\nvmId="+ vmId;
    event.setParameters(params);
    _eventDao.persist(event);
    _networkMgr.updateFirewallRules(publicIp,fwRulesToAdd,router);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException("Unhandled exception",ex);
  }
 finally {
    if (locked) {
      _publicIpAddressDao.release(publicIp);
    }
  }
}
