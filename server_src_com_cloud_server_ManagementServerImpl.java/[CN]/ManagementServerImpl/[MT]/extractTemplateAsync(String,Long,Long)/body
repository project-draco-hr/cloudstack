{
  URI uri=new URI(url);
  if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase("ftp"))) {
    throw new IllegalArgumentException("Unsupported scheme for url: " + url);
  }
  String host=uri.getHost();
  try {
    InetAddress hostAddr=InetAddress.getByName(host);
    if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
      throw new IllegalArgumentException("Illegal host specified in url");
    }
    if (hostAddr instanceof Inet6Address) {
      throw new IllegalArgumentException("IPV6 addresses not supported (" + hostAddr.getHostAddress() + ")");
    }
  }
 catch (  UnknownHostException uhe) {
    throw new IllegalArgumentException("Unable to resolve " + host);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException("Please specify a valid zone.");
  }
  VMTemplateVO template=findTemplateById(templateId);
  VMTemplateHostVO tmpltHostRef=findTemplateHostRef(templateId,zoneId);
  if (tmpltHostRef != null && tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    throw new IllegalArgumentException("The template hasnt been downloaded ");
  }
  long userId=UserContext.current().getUserId();
  long accountId=template.getAccountId();
  String event=template.getFormat() == ImageFormat.ISO ? EventTypes.EVENT_ISO_UPLOAD : EventTypes.EVENT_TEMPLATE_UPLOAD;
  long eventId=saveScheduledEvent(userId,accountId,event,"Extraction job");
  ExtractTemplateParam param=new ExtractTemplateParam(userId,templateId,zoneId,eventId,url);
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobVO job=new AsyncJobVO();
  job.setUserId(userId);
  job.setAccountId(accountId);
  job.setCmd("ExtractTemplate");
  job.setCmdInfo(gson.toJson(param));
  job.setCmdOriginator(ExtractTemplateCmd.getStaticName());
  return _asyncMgr.submitAsyncJob(job);
}
