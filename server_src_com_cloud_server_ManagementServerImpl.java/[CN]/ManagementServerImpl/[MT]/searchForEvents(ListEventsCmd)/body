{
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  String type=cmd.getType();
  String level=cmd.getLevel();
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  String keyword=cmd.getKeyword();
  Integer entryTime=cmd.getEntryTime();
  Integer duration=cmd.getDuration();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(EventVO.class,"createDate",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<EventVO> sb=_eventDao.createSearchBuilder();
  sb.and("accountIdIN",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("domainId",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and("accountType",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
      sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and("accountType",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
      sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("levelL",sb.entity().getLevel(),SearchCriteria.Op.LIKE);
  sb.and("levelEQ",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and("type",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and("createDateB",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  sb.and("createDateG",sb.entity().getCreateDate(),SearchCriteria.Op.GTEQ);
  sb.and("createDateL",sb.entity().getCreateDate(),SearchCriteria.Op.LTEQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and("startId",sb.entity().getStartId(),SearchCriteria.Op.EQ);
  sb.and("createDate",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  SearchCriteria<EventVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters("accountSearch","accountType",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters("accountIdIN",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
    }
 else {
      sc.setParameters("domainId",domainId);
    }
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (keyword != null) {
    SearchCriteria<EventVO> ssc=_eventDao.createSearchCriteria();
    ssc.addOr("type",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("description",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("level",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("level",SearchCriteria.Op.SC,ssc);
  }
  if (level != null) {
    sc.setParameters("levelEQ",level);
  }
  if (type != null) {
    sc.setParameters("type",type);
  }
  if (startDate != null && endDate != null) {
    sc.setParameters("createDateB",startDate,endDate);
  }
 else   if (startDate != null) {
    sc.setParameters("createDateG",startDate);
  }
 else   if (endDate != null) {
    sc.setParameters("createDateL",endDate);
  }
  if ((entryTime != null) && (duration != null)) {
    if (entryTime <= duration) {
      throw new InvalidParameterValueException("Entry time must be greater than duration");
    }
    Calendar calMin=Calendar.getInstance();
    Calendar calMax=Calendar.getInstance();
    calMin.add(Calendar.SECOND,-entryTime);
    calMax.add(Calendar.SECOND,-duration);
    Date minTime=calMin.getTime();
    Date maxTime=calMax.getTime();
    sc.setParameters("state",com.cloud.event.Event.State.Completed);
    sc.setParameters("startId",0);
    sc.setParameters("createDate",minTime,maxTime);
    List<EventVO> startedEvents=_eventDao.searchAllEvents(sc,searchFilter);
    List<EventVO> pendingEvents=new ArrayList<EventVO>();
    for (    EventVO event : startedEvents) {
      EventVO completedEvent=_eventDao.findCompletedEvent(event.getId());
      if (completedEvent == null) {
        pendingEvents.add(event);
      }
    }
    return pendingEvents;
  }
 else {
    return _eventDao.searchAllEvents(sc,searchFilter);
  }
}
