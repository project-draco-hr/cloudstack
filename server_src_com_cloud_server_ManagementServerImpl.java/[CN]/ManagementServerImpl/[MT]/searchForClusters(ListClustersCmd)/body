{
  final Object id=cmd.getId();
  final Object name=cmd.getClusterName();
  final Object podId=cmd.getPodId();
  Long zoneId=cmd.getZoneId();
  final Object hypervisorType=cmd.getHypervisorType();
  final Object clusterType=cmd.getClusterType();
  final Object allocationState=cmd.getAllocationState();
  final String keyword=cmd.getKeyword();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),zoneId);
  final Filter searchFilter=new Filter(ClusterVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  final SearchBuilder<ClusterVO> sb=_clusterDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("name",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("hypervisorType",sb.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  sb.and("clusterType",sb.entity().getClusterType(),SearchCriteria.Op.EQ);
  sb.and("allocationState",sb.entity().getAllocationState(),SearchCriteria.Op.EQ);
  final SearchCriteria<ClusterVO> sc=sb.create();
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (podId != null) {
    sc.setParameters("podId",podId);
  }
  if (zoneId != null) {
    sc.setParameters("dataCenterId",zoneId);
  }
  if (hypervisorType != null) {
    sc.setParameters("hypervisorType",hypervisorType);
  }
  if (clusterType != null) {
    sc.setParameters("clusterType",clusterType);
  }
  if (allocationState != null) {
    sc.setParameters("allocationState",allocationState);
  }
  if (keyword != null) {
    final SearchCriteria<ClusterVO> ssc=_clusterDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("hypervisorType",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  final Pair<List<ClusterVO>,Integer> result=_clusterDao.searchAndCount(sc,searchFilter);
  return new Pair<List<? extends Cluster>,Integer>(result.first(),result.second());
}
