{
  Exception e=null;
  try {
    FirewallRuleVO rule=_firewallRulesDao.findById(ruleId);
    if (rule != null) {
      boolean success=false;
      try {
        if (rule.isForwarding()) {
          success=deleteIpForwardingRule(userId,accountId,rule.getPublicIpAddress(),rule.getPublicPort(),rule.getPrivateIpAddress(),rule.getPrivatePort(),rule.getProtocol());
        }
 else {
          success=deleteLoadBalancingRule(userId,accountId,rule.getPublicIpAddress(),rule.getPublicPort(),rule.getPrivateIpAddress(),rule.getPrivatePort(),rule.getAlgorithm());
        }
      }
 catch (      Exception ex) {
        e=ex;
      }
      String description;
      String type=EventTypes.EVENT_NET_RULE_DELETE;
      String level=EventVO.LEVEL_INFO;
      String ruleName=rule.isForwarding() ? "ip forwarding" : "load balancer";
      if (success) {
        String desc="deleted " + ruleName + " rule ["+ rule.getPublicIpAddress()+ ":"+ rule.getPublicPort()+ "]->["+ rule.getPrivateIpAddress()+ ":"+ rule.getPrivatePort()+ "] "+ rule.getProtocol();
        if (!rule.isForwarding()) {
          desc=desc + ", algorithm = " + rule.getAlgorithm();
        }
        description=desc;
      }
 else {
        level=EventVO.LEVEL_ERROR;
        String desc="deleted " + ruleName + " rule ["+ rule.getPublicIpAddress()+ ":"+ rule.getPublicPort()+ "]->["+ rule.getPrivateIpAddress()+ ":"+ rule.getPrivatePort()+ "] "+ rule.getProtocol();
        if (!rule.isForwarding()) {
          desc=desc + ", algorithm = " + rule.getAlgorithm();
        }
        description=desc;
      }
      EventUtils.saveEvent(userId,accountId,level,type,description);
    }
  }
  finally {
    if (e != null) {
      if (e instanceof InvalidParameterValueException) {
        throw (InvalidParameterValueException)e;
      }
 else       if (e instanceof PermissionDeniedException) {
        throw (PermissionDeniedException)e;
      }
 else       if (e instanceof InternalErrorException) {
        throw (InternalErrorException)e;
      }
    }
  }
}
