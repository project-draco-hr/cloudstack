{
  Long id=cmd.getId();
  String name=cmd.getRouterName();
  String state=cmd.getState();
  Long zone=cmd.getZoneId();
  Long pod=cmd.getPodId();
  Long hostId=cmd.getHostId();
  String keyword=cmd.getKeyword();
  Long networkId=cmd.getNetworkId();
  Long vpcId=cmd.getVpcId();
  Boolean forVpc=cmd.getForVpc();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(DomainRouterJoinVO.class,null,true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<DomainRouterJoinVO> sb=_routerJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  _accountMgr.buildACLViewSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("name",sb.entity().getHostName(),SearchCriteria.Op.LIKE);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("accountId",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("podId",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and("hostId",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  sb.and("vpcId",sb.entity().getVpcId(),SearchCriteria.Op.EQ);
  if (forVpc != null) {
    if (forVpc) {
      sb.and("forVpc",sb.entity().getVpcId(),SearchCriteria.Op.NNULL);
    }
 else {
      sb.and("forVpc",sb.entity().getVpcId(),SearchCriteria.Op.NULL);
    }
  }
  if (networkId != null) {
    sb.and("networkId",sb.entity().getNetworkId(),SearchCriteria.Op.EQ);
  }
  SearchCriteria<DomainRouterJoinVO> sc=sb.create();
  _accountMgr.buildACLViewSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<DomainRouterJoinVO> ssc=_routerJoinDao.createSearchCriteria();
    ssc.addOr("hostName",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("instanceName",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("state",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("hostName",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters("name","%" + name + "%");
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (state != null) {
    sc.setParameters("state",state);
  }
  if (zone != null) {
    sc.setParameters("dataCenterId",zone);
  }
  if (pod != null) {
    sc.setParameters("podId",pod);
  }
  if (hostId != null) {
    sc.setParameters("hostId",hostId);
  }
  if (networkId != null) {
    sc.setJoinParameters("nicSearch","networkId",networkId);
  }
  if (vpcId != null) {
    sc.setParameters("vpcId",vpcId);
  }
  Pair<List<DomainRouterJoinVO>,Integer> uniqueVrPair=_routerJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueVrPair.second();
  if (count.intValue() == 0) {
    return uniqueVrPair;
  }
  List<DomainRouterJoinVO> uniqueVrs=uniqueVrPair.first();
  Long[] vrIds=new Long[uniqueVrs.size()];
  int i=0;
  for (  DomainRouterJoinVO v : uniqueVrs) {
    vrIds[i++]=v.getId();
  }
  List<DomainRouterJoinVO> vrs=_routerJoinDao.searchByIds(vrIds);
  return new Pair<List<DomainRouterJoinVO>,Integer>(vrs,count);
}
