{
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  Long networkId=cmd.getNetworkId();
  Boolean forVirtual=cmd.getForVirtualNetwork();
  String vlanType=null;
  Long projectId=cmd.getProjectId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  if (accountName != null && domainId != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException("Account and projectId can't be specified together");
    }
    Account account=_accountDao.findActiveAccount(accountName,domainId);
    if (account == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find account " + accountName + " in specified domain");
      String tablename="domain";
      ex.addProxyObject(tablename,domainId,"domainId");
      throw ex;
    }
 else {
      accountId=account.getId();
    }
  }
  if (forVirtual != null) {
    if (forVirtual) {
      vlanType=VlanType.VirtualNetwork.toString();
    }
 else {
      vlanType=VlanType.DirectAttached.toString();
    }
  }
  if (projectId != null) {
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find project by id " + projectId);
      ex.addProxyObject(project,projectId,"projectId");
      throw ex;
    }
    accountId=project.getProjectAccountId();
  }
  Filter searchFilter=new Filter(VlanVO.class,"id",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Object vlan=cmd.getVlan();
  Object dataCenterId=cmd.getZoneId();
  Object podId=cmd.getPodId();
  Object keyword=cmd.getKeyword();
  SearchBuilder<VlanVO> sb=_vlanDao.createSearchBuilder();
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("vlan",sb.entity().getVlanTag(),SearchCriteria.Op.EQ);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("vlan",sb.entity().getVlanTag(),SearchCriteria.Op.EQ);
  sb.and("networkId",sb.entity().getNetworkId(),SearchCriteria.Op.EQ);
  sb.and("vlanType",sb.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.and("physicalNetworkId",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  if (accountId != null) {
    SearchBuilder<AccountVlanMapVO> accountVlanMapSearch=_accountVlanMapDao.createSearchBuilder();
    accountVlanMapSearch.and("accountId",accountVlanMapSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
    sb.join("accountVlanMapSearch",accountVlanMapSearch,sb.entity().getId(),accountVlanMapSearch.entity().getVlanDbId(),JoinBuilder.JoinType.INNER);
  }
  if (podId != null) {
    SearchBuilder<PodVlanMapVO> podVlanMapSearch=_podVlanMapDao.createSearchBuilder();
    podVlanMapSearch.and("podId",podVlanMapSearch.entity().getPodId(),SearchCriteria.Op.EQ);
    sb.join("podVlanMapSearch",podVlanMapSearch,sb.entity().getId(),podVlanMapSearch.entity().getVlanDbId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VlanVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VlanVO> ssc=_vlanDao.createSearchCriteria();
    ssc.addOr("vlanId",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("ipRange",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("vlanId",SearchCriteria.Op.SC,ssc);
  }
 else {
    if (id != null) {
      sc.setParameters("id",id);
    }
    if (vlan != null) {
      sc.setParameters("vlan",vlan);
    }
    if (dataCenterId != null) {
      sc.setParameters("dataCenterId",dataCenterId);
    }
    if (networkId != null) {
      sc.setParameters("networkId",networkId);
    }
    if (accountId != null) {
      sc.setJoinParameters("accountVlanMapSearch","accountId",accountId);
    }
    if (podId != null) {
      sc.setJoinParameters("podVlanMapSearch","podId",podId);
    }
    if (vlanType != null) {
      sc.setParameters("vlanType",vlanType);
    }
    if (physicalNetworkId != null) {
      sc.setParameters("physicalNetworkId",physicalNetworkId);
    }
  }
  return _vlanDao.search(sc,searchFilter);
}
