{
  Map<String,Object> params=new HashMap<String,Object>();
  try {
    _clusterMgr.configure("ClusterMgr",params);
    _clusterMgr.start();
    avoidMap.put(ComponentContext.getTargetClass(_clusterMgr).getName(),_clusterMgr);
  }
 catch (  Exception e) {
    s_logger.error("Problems to start manager:" + ComponentContext.getTargetClass(_clusterMgr).getName(),e);
    System.exit(1);
  }
  for (  Manager manager : ComponentContext.getComponentsOfType(Manager.class).values()) {
    s_logger.info("Start manager: " + ComponentContext.getTargetClass(manager).getName() + "...");
    try {
      if (avoidMap.get(ComponentContext.getTargetClass(manager).getName()) != null) {
        s_logger.info("Skip manager: " + ComponentContext.getTargetClass(manager).getName() + " as it is already started");
        continue;
      }
      if (!manager.configure(manager.getClass().getSimpleName(),params)) {
        throw new CloudRuntimeException("Failed to start manager: " + ComponentContext.getTargetClass(manager).getName());
      }
      if (!manager.start()) {
        throw new CloudRuntimeException("Failed to start manager: " + ComponentContext.getTargetClass(manager).getName());
      }
      avoidMap.put(ComponentContext.getTargetClass(manager).getName(),manager);
      if (manager instanceof ManagementBean) {
        registerMBean((ManagementBean)manager);
      }
    }
 catch (    Exception e) {
      s_logger.error("Problems to start manager:" + ComponentContext.getTargetClass(manager).getName(),e);
      System.exit(1);
    }
  }
}
