{
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  Boolean fetchLatest=cmd.getFetchLatest();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,zoneId,podId,clusterId,summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    if (capacityType == Capacity.CAPACITY_TYPE_CPU) {
      capacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));
    }
    capacities.add(capacity);
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
    capacities.add(_storageMgr.getSecondaryStorageUsedStats(null,zoneId));
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
    capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
  }
  return capacities;
}
