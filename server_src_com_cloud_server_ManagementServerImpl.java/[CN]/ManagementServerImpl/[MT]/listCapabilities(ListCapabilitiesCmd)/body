{
  Map<String,Object> capabilities=new HashMap<String,Object>();
  boolean securityGroupsEnabled=false;
  boolean elasticLoadBalancerEnabled=false;
  String supportELB="false";
  List<NetworkVO> networks=_networkDao.listSecurityGroupEnabledNetworks();
  if (networks != null && !networks.isEmpty()) {
    securityGroupsEnabled=true;
    String elbEnabled=_configDao.getValue(Config.ElasticLoadBalancerEnabled.key());
    elasticLoadBalancerEnabled=elbEnabled == null ? false : Boolean.parseBoolean(elbEnabled);
    if (elasticLoadBalancerEnabled) {
      String networkType=_configDao.getValue(Config.ElasticLoadBalancerNetwork.key());
      if (networkType != null)       supportELB=networkType;
    }
  }
  long diskOffMaxSize=Long.valueOf(_configDao.getValue(Config.CustomDiskOfferingMaxSize.key()));
  String userPublicTemplateEnabled=_configs.get(Config.AllowPublicUserTemplates.key());
  capabilities.put("securityGroupsEnabled",securityGroupsEnabled);
  capabilities.put("userPublicTemplateEnabled",(userPublicTemplateEnabled == null || userPublicTemplateEnabled.equals("false") ? false : true));
  capabilities.put("cloudStackVersion",getVersion());
  capabilities.put("supportELB",supportELB);
  capabilities.put("projectInviteRequired",_projectMgr.projectInviteRequired());
  capabilities.put("allowusercreateprojects",_projectMgr.allowUserToCreateProject());
  capabilities.put("customDiskOffMaxSize",diskOffMaxSize);
  return capabilities;
}
