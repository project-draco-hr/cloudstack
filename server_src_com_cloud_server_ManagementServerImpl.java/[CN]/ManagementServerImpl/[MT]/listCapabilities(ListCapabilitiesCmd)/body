{
  Map<String,Object> capabilities=new HashMap<String,Object>();
  Account caller=CallContext.current().getCallingAccount();
  boolean securityGroupsEnabled=false;
  boolean elasticLoadBalancerEnabled=false;
  String supportELB="false";
  List<NetworkVO> networks=_networkDao.listSecurityGroupEnabledNetworks();
  if (networks != null && !networks.isEmpty()) {
    securityGroupsEnabled=true;
    String elbEnabled=_configDao.getValue(Config.ElasticLoadBalancerEnabled.key());
    elasticLoadBalancerEnabled=elbEnabled == null ? false : Boolean.parseBoolean(elbEnabled);
    if (elasticLoadBalancerEnabled) {
      String networkType=_configDao.getValue(Config.ElasticLoadBalancerNetwork.key());
      if (networkType != null) {
        supportELB=networkType;
      }
    }
  }
  long diskOffMaxSize=Long.valueOf(_configDao.getValue(Config.CustomDiskOfferingMaxSize.key()));
  boolean userPublicTemplateEnabled=_allowPublicUserTemplates.valueIn(caller.getId());
  boolean apiLimitEnabled=Boolean.parseBoolean(_configDao.getValue(Config.ApiLimitEnabled.key()));
  Integer apiLimitInterval=Integer.valueOf(_configDao.getValue(Config.ApiLimitInterval.key()));
  Integer apiLimitMax=Integer.valueOf(_configDao.getValue(Config.ApiLimitMax.key()));
  boolean regionSecondaryEnabled=false;
  List<ImageStoreVO> imgStores=_imgStoreDao.findRegionImageStores();
  if (imgStores != null && imgStores.size() > 0) {
    regionSecondaryEnabled=true;
  }
  capabilities.put("securityGroupsEnabled",securityGroupsEnabled);
  capabilities.put("userPublicTemplateEnabled",userPublicTemplateEnabled);
  capabilities.put("cloudStackVersion",getVersion());
  capabilities.put("supportELB",supportELB);
  capabilities.put("projectInviteRequired",_projectMgr.projectInviteRequired());
  capabilities.put("allowusercreateprojects",_projectMgr.allowUserToCreateProject());
  capabilities.put("customDiskOffMaxSize",diskOffMaxSize);
  capabilities.put("regionSecondaryEnabled",regionSecondaryEnabled);
  if (apiLimitEnabled) {
    capabilities.put("apiLimitInterval",apiLimitInterval);
    capabilities.put("apiLimitMax",apiLimitMax);
  }
  return capabilities;
}
