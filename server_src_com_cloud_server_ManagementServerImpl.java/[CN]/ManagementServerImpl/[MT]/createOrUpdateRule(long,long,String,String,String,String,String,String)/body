{
  NetworkRuleConfigVO rule=null;
  try {
    SecurityGroupVO sg=_securityGroupDao.findById(Long.valueOf(securityGroupId));
    if (sg == null) {
      throw new InvalidParameterValueException("port forwarding service " + securityGroupId + " does not exist");
    }
    if (!NetUtils.isValidPort(port)) {
      throw new InvalidParameterValueException("port is an invalid value");
    }
    if (!NetUtils.isValidPort(privatePort)) {
      throw new InvalidParameterValueException("privatePort is an invalid value");
    }
    if (protocol != null) {
      if (!NetUtils.isValidProto(protocol)) {
        throw new InvalidParameterValueException("Invalid protocol");
      }
    }
    if (algorithm != null) {
      if (!NetUtils.isValidAlgorithm(algorithm)) {
        throw new InvalidParameterValueException("Invalid algorithm");
      }
    }
    rule=createNetworkRuleConfig(userId,securityGroupId,port,privatePort,protocol,algorithm);
  }
 catch (  Exception e) {
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw (InvalidParameterValueException)e;
    }
 else     if (e instanceof PermissionDeniedException) {
      throw (PermissionDeniedException)e;
    }
 else     if (e instanceof InternalErrorException) {
      throw (InternalErrorException)e;
    }
 else {
      s_logger.error("Unhandled exception creating or updating network rule",e);
      throw new CloudRuntimeException("Unhandled exception creating network rule",e);
    }
  }
  return rule;
}
