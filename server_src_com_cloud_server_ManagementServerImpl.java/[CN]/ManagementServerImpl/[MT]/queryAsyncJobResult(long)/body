{
  AsyncJobVO job=_asyncMgr.getAsyncJob(jobId);
  if (job == null) {
    if (s_logger.isDebugEnabled())     s_logger.debug("queryAsyncJobResult error: Permission denied, invalid job id " + jobId);
    throw new PermissionDeniedException("Permission denied, invalid job id " + jobId);
  }
  if (!UserContext.current().isApiServer() && job.getAccountId() != UserContext.current().getAccountId()) {
    if (s_logger.isDebugEnabled())     s_logger.debug("Mismatched account id in job and user context, perform further securty check. job id: " + jobId + ", job owner account: "+ job.getAccountId()+ ", accound id in current context: "+ UserContext.current().getAccountId());
    Account account=_accountDao.findById(UserContext.current().getAccountId());
    if (account == null) {
      if (s_logger.isDebugEnabled())       s_logger.debug("queryAsyncJobResult error: Permission denied, account no long exist for account id in context, job id: " + jobId + ", accountId  "+ UserContext.current().getAccountId());
      throw new PermissionDeniedException("Permission denied, invalid job ownership, job id: " + jobId);
    }
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN || account.getType() == Account.ACCOUNT_TYPE_READ_ONLY_ADMIN) {
      if (s_logger.isDebugEnabled())       s_logger.debug("Grant access to query job result to admin for job " + jobId + ", job account owner: "+ job.getAccountId()+ ", account id in context: "+ UserContext.current().getAccountId());
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      long jobOwnerAccountId=job.getAccountId();
      Account jobOwnerAccount=_accountDao.findById(jobOwnerAccountId);
      if (jobOwnerAccount == null) {
        throw new PermissionDeniedException("Permission denied, can not determine job owner, job id: " + jobId);
      }
      if (account.getDomainId() == jobOwnerAccount.getDomainId() || _domainDao.isChildDomain(account.getDomainId(),jobOwnerAccount.getDomainId())) {
        if (s_logger.isDebugEnabled())         s_logger.debug("Grant access to query job result to domain admin for job " + jobId + ", job account owner: "+ job.getAccountId()+ ", account id in context: "+ UserContext.current().getAccountId());
      }
 else {
        if (s_logger.isDebugEnabled())         s_logger.debug("queryAsyncJobResult error: Permission denied, invalid job ownership, job id: " + jobId + ", accountId  "+ UserContext.current().getAccountId());
        throw new PermissionDeniedException("Permission denied, invalid job ownership, job id: " + jobId);
      }
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
      if (s_logger.isDebugEnabled())       s_logger.debug("queryAsyncJobResult error: Permission denied, invalid ownership for job " + jobId + ", job account owner: "+ job.getAccountId()+ ", account id in context: "+ UserContext.current().getAccountId());
      throw new PermissionDeniedException("Permission denied, invalid job ownership, job id: " + jobId);
    }
 else {
      assert(false);
      throw new PermissionDeniedException("Permission denied, internal error. job id: " + jobId);
    }
  }
  return _asyncMgr.queryAsyncJobResult(jobId);
}
