{
  final Long osTypeId=cmd.getOsTypeId();
  final String osStdName=cmd.getOsStdName();
  final String hypervisor=cmd.getHypervisor();
  final String hypervisorVersion=cmd.getHypervisorVersion();
  final String osNameForHypervisor=cmd.getOsNameForHypervisor();
  GuestOS guestOs=null;
  if (osTypeId == null && (osStdName == null || osStdName.isEmpty())) {
    throw new InvalidParameterValueException("Please specify either a guest OS name or UUID");
  }
  final HypervisorType hypervisorType=HypervisorType.getType(hypervisor);
  if (!(hypervisorType == HypervisorType.KVM || hypervisorType == HypervisorType.XenServer || hypervisorType == HypervisorType.VMware)) {
    throw new InvalidParameterValueException("Please specify a valid hypervisor : XenServer, KVM or VMware");
  }
  final HypervisorCapabilitiesVO hypervisorCapabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(hypervisorType,hypervisorVersion);
  if (hypervisorCapabilities == null) {
    throw new InvalidParameterValueException("Please specify a valid hypervisor and supported version");
  }
  if (osTypeId != null) {
    guestOs=ApiDBUtils.findGuestOSById(osTypeId);
  }
 else   if (osStdName != null) {
    guestOs=ApiDBUtils.findGuestOSByDisplayName(osStdName);
  }
  if (guestOs == null) {
    throw new InvalidParameterValueException("Unable to find the guest OS by name or UUID");
  }
  final GuestOSHypervisorVO duplicate=_guestOSHypervisorDao.findByOsIdAndHypervisorAndUserDefined(guestOs.getId(),hypervisorType.toString(),hypervisorVersion,true);
  if (duplicate != null) {
    throw new InvalidParameterValueException("Mapping from hypervisor : " + hypervisorType.toString() + ", version : "+ hypervisorVersion+ " and guest OS : "+ guestOs.getDisplayName()+ " already exists!");
  }
  final GuestOSHypervisorVO guestOsMapping=new GuestOSHypervisorVO();
  guestOsMapping.setGuestOsId(guestOs.getId());
  guestOsMapping.setGuestOsName(osNameForHypervisor);
  guestOsMapping.setHypervisorType(hypervisorType.toString());
  guestOsMapping.setHypervisorVersion(hypervisorVersion);
  guestOsMapping.setIsUserDefined(true);
  return _guestOSHypervisorDao.persist(guestOsMapping);
}
