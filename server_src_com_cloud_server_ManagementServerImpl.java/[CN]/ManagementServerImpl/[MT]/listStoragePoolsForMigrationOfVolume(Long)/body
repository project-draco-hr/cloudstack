{
  Account caller=CallContext.current().getCallingAccount();
  if (!_accountMgr.isRootAdmin(caller.getId())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the volume");
    }
    throw new PermissionDeniedException("No permission to migrate volume, only root admin can migrate a volume");
  }
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find volume with" + " specified id.");
    ex.addProxyObject(volumeId.toString(),"volumeId");
    throw ex;
  }
  List<StoragePool> allPools=new ArrayList<StoragePool>();
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  if (!Volume.State.Ready.equals(volume.getState())) {
    s_logger.info("Volume " + volume + " must be in ready state for migration.");
    return new Pair<List<? extends StoragePool>,List<? extends StoragePool>>(allPools,suitablePools);
  }
  if (!_volumeMgr.volumeOnSharedStoragePool(volume)) {
    s_logger.info("Volume " + volume + " is on local storage. It cannot be migrated to another pool.");
    return new Pair<List<? extends StoragePool>,List<? extends StoragePool>>(allPools,suitablePools);
  }
  Long instanceId=volume.getInstanceId();
  VMInstanceVO vm=null;
  if (instanceId != null) {
    vm=_vmInstanceDao.findById(instanceId);
  }
  if (vm == null) {
    s_logger.info("Volume " + volume + " isn't attached to any vm. Looking for storage pools in the "+ "zone to which this volumes can be migrated.");
  }
 else   if (vm.getState() != State.Running) {
    s_logger.info("Volume " + volume + " isn't attached to any running vm. Looking for storage pools in the "+ "cluster to which this volumes can be migrated.");
  }
 else {
    s_logger.info("Volume " + volume + " is attached to any running vm. Looking for storage pools in the "+ "cluster to which this volumes can be migrated.");
    boolean storageMotionSupported=false;
    Long hostId=vm.getHostId();
    if (hostId != null) {
      HostVO host=_hostDao.findById(hostId);
      HypervisorCapabilitiesVO capabilities=null;
      if (host != null) {
        capabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(host.getHypervisorType(),host.getHypervisorVersion());
      }
 else {
        s_logger.error("Details of the host on which the vm " + vm + ", to which volume "+ volume+ " is "+ "attached, couldn't be retrieved.");
      }
      if (capabilities != null) {
        storageMotionSupported=capabilities.isStorageMotionSupported();
      }
 else {
        s_logger.error("Capabilities for host " + host + " couldn't be retrieved.");
      }
    }
    if (!storageMotionSupported) {
      s_logger.info("Volume " + volume + " is attached to a running vm and the hypervisor doesn't support"+ " storage motion.");
      return new Pair<List<? extends StoragePool>,List<? extends StoragePool>>(allPools,suitablePools);
    }
  }
  StoragePoolVO srcVolumePool=_poolDao.findById(volume.getPoolId());
  List<StoragePoolVO> storagePools=null;
  if (srcVolumePool.getClusterId() == null) {
    storagePools=_poolDao.findZoneWideStoragePoolsByTags(volume.getDataCenterId(),null);
  }
 else {
    storagePools=_poolDao.findPoolsByTags(volume.getDataCenterId(),srcVolumePool.getPodId(),srcVolumePool.getClusterId(),null);
  }
  storagePools.remove(srcVolumePool);
  for (  StoragePoolVO pool : storagePools) {
    if (pool.isShared()) {
      allPools.add((StoragePool)dataStoreMgr.getPrimaryDataStore(pool.getId()));
    }
  }
  ExcludeList avoid=new ExcludeList();
  avoid.addPool(srcVolumePool.getId());
  DataCenterDeployment plan=new DataCenterDeployment(volume.getDataCenterId(),srcVolumePool.getPodId(),srcVolumePool.getClusterId(),null,null,null);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  DiskProfile diskProfile=new DiskProfile(volume,diskOffering,profile.getHypervisorType());
  for (  StoragePoolAllocator allocator : _storagePoolAllocators) {
    List<StoragePool> pools=allocator.allocateToPool(diskProfile,profile,plan,avoid,StoragePoolAllocator.RETURN_UPTO_ALL);
    if (pools != null && !pools.isEmpty()) {
      suitablePools.addAll(pools);
      break;
    }
  }
  return new Pair<List<? extends StoragePool>,List<? extends StoragePool>>(allPools,suitablePools);
}
