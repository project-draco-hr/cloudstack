{
  Long securityGroupId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=(Account)UserContext.current().getAccountObject();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  SecurityGroupVO securityGroup=_securityGroupDao.findById(Long.valueOf(securityGroupId));
  if (securityGroup == null) {
    throw new InvalidParameterValueException("unable to find port forwarding service with id " + securityGroupId);
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId().longValue() != securityGroup.getAccountId()) {
        throw new PermissionDeniedException("unable to find port forwarding service with id " + securityGroupId + " for this account, permission denied");
      }
    }
 else     if (!isChildDomain(account.getDomainId(),securityGroup.getDomainId())) {
      throw new PermissionDeniedException("Unable to delete port forwarding service " + securityGroupId + ", permission denied.");
    }
  }
  long startEventId=EventUtils.saveScheduledEvent(userId,securityGroup.getAccountId(),EventTypes.EVENT_PORT_FORWARDING_SERVICE_DELETE,"deleting port forwarding service with Id: " + securityGroupId);
  final EventVO event=new EventVO();
  event.setUserId(userId);
  event.setAccountId(securityGroup.getAccountId());
  event.setType(EventTypes.EVENT_PORT_FORWARDING_SERVICE_DELETE);
  event.setStartId(startEventId);
  try {
    List<SecurityGroupVMMapVO> sgVmMappings=_securityGroupVMMapDao.listBySecurityGroup(securityGroupId);
    if (sgVmMappings != null) {
      for (      SecurityGroupVMMapVO sgVmMapping : sgVmMappings) {
        removeSecurityGroup(userId,sgVmMapping.getSecurityGroupId(),sgVmMapping.getIpAddress(),sgVmMapping.getInstanceId(),startEventId);
      }
    }
    _networkRuleConfigDao.deleteBySecurityGroup(securityGroupId);
  }
 catch (  InvalidParameterValueException ex1) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Invalid parameter value exception deleting port forwarding service " + securityGroup.getName() + " (id: "+ securityGroup.getId()+ "), "+ ex1);
    }
    event.setLevel(EventVO.LEVEL_ERROR);
    event.setDescription("Failed to delete port forwarding service - " + securityGroup.getName() + " (id: "+ securityGroup.getId()+ ")");
    _eventDao.persist(event);
    throw ex1;
  }
catch (  PermissionDeniedException ex2) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Invalid parameter value exception deleting port forwarding service " + securityGroup.getName() + " (id: "+ securityGroup.getId()+ "), "+ ex2);
    }
    event.setLevel(EventVO.LEVEL_ERROR);
    event.setDescription("failed to delete port forwarding service - " + securityGroup.getName() + " (id: "+ securityGroup.getId()+ ")");
    _eventDao.persist(event);
    throw ex2;
  }
  boolean success=_securityGroupDao.remove(Long.valueOf(securityGroupId));
  event.setLevel(EventVO.LEVEL_INFO);
  event.setDescription("Deleting port forwarding service - " + securityGroup.getName() + " (id: "+ securityGroup.getId()+ ")");
  _eventDao.persist(event);
  return success;
}
