{
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume.getVolumeType() != VolumeType.DATADISK) {
    throw new InvalidParameterValueException("Please specify a data volume.");
  }
  if (!_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException("Please specify a volume that has been created on a shared storage pool.");
  }
  Long vmId=volume.getInstanceId();
  if (vmId == null) {
    throw new InvalidParameterValueException("The specified volume is not attached to a VM.");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException("Please specify a VM that is either running or stopped.");
  }
  long eventId=saveScheduledEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_DETACH,"detaching volume: " + volumeId + " from Vm: "+ vmId);
  VolumeOperationParam param=new VolumeOperationParam();
  param.setUserId(1);
  param.setAccountId(volume.getAccountId());
  param.setOp(VolumeOp.Detach);
  param.setVolumeId(volumeId);
  param.setEventId(eventId);
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobVO job=new AsyncJobVO();
  job.setUserId(UserContext.current().getUserId());
  job.setAccountId(vm.getAccountId());
  job.setCmd("VolumeOperation");
  job.setCmdInfo(gson.toJson(param));
  job.setCmdOriginator("virtualmachine");
  return _asyncMgr.submitAsyncJob(job);
}
