{
  ServiceOfferingVO offering=_offeringsDao.findById(userVm.getServiceOfferingId());
  if ((offering == null) || !NetworkOffering.GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to create port forwarding rule (" + protocol + ":"+ publicPort+ "->"+ privatePort+ ") for virtual machine "+ userVm.toString()+ ", bad network type ("+ ((offering == null) ? "null" : offering.getGuestIpType())+ ")");
    }
    throw new IllegalArgumentException("Unable to create port forwarding rule (" + protocol + ":"+ publicPort+ "->"+ privatePort+ ") for virtual machine "+ userVm.toString()+ ", bad network type ("+ ((offering == null) ? "null" : offering.getGuestIpType())+ ")");
  }
  List<FirewallRuleVO> existingRulesOnPubIp=_firewallRulesDao.listIPForwarding(ipAddress);
  Map<String,StringBuilder> mappedPublicPorts=new HashMap<String,StringBuilder>();
  Map<String,StringBuilder> publicPortToProtocolMapping=new HashMap<String,StringBuilder>();
  if (existingRulesOnPubIp != null) {
    for (    FirewallRuleVO fwRule : existingRulesOnPubIp) {
      if (mappedPublicPorts.containsKey(fwRule.getPublicPort())) {
        mappedPublicPorts.put(fwRule.getPublicPort(),mappedPublicPorts.get(fwRule.getPublicPort()).append(";").append(fwRule.getPrivateIpAddress().concat(",").concat(fwRule.getPrivatePort())));
      }
 else {
        mappedPublicPorts.put(fwRule.getPublicPort(),new StringBuilder(fwRule.getPrivateIpAddress() + "," + fwRule.getPrivatePort()));
      }
      if (publicPortToProtocolMapping.containsKey(fwRule.getPublicPort())) {
        publicPortToProtocolMapping.put(fwRule.getPublicPort(),publicPortToProtocolMapping.get(fwRule.getPublicPort()).append(";").append(fwRule.getProtocol()));
      }
 else {
        publicPortToProtocolMapping.put(fwRule.getPublicPort(),new StringBuilder(fwRule.getProtocol()));
      }
    }
  }
  if (userVm != null) {
    if (mappedPublicPorts.size() > 0) {
      StringBuilder privateIpPortIntermediate=mappedPublicPorts.get(publicPort);
      String privateIpPort=null;
      if (privateIpPortIntermediate != null && privateIpPortIntermediate.length() > 0)       privateIpPort=privateIpPortIntermediate.toString();
      if (privateIpPort != null && privateIpPort.length() > 0) {
        String publicPortProtocol=publicPortToProtocolMapping.get(publicPort).toString();
        String[] privateIpPortPairs=privateIpPort.toString().split(";");
        String[] privateIpAndPortStr;
        boolean errFlag=false;
        for (        String pair : privateIpPortPairs) {
          privateIpAndPortStr=pair.split(",");
          if (privateIpAndPortStr[0].equals(userVm.getGuestIpAddress()) && privateIpAndPortStr[1].equals(privatePort)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("skipping the creating of firewall rule " + ipAddress + ":"+ publicPort+ " to "+ userVm.getGuestIpAddress()+ ":"+ privatePort+ "; rule already exists.");
            }
            return null;
          }
 else           if (!publicPortProtocol.contains(protocol)) {
            break;
          }
 else {
            errFlag=true;
          }
        }
        if (errFlag)         throw new NetworkRuleConflictException("An existing port forwarding service rule for " + ipAddress + ":"+ publicPort+ " already exists, found while trying to create mapping to "+ userVm.getGuestIpAddress()+ ":"+ privatePort+ ((securityGroupId == null) ? "." : " from port forwarding service " + securityGroupId.toString() + "."));
      }
    }
    FirewallRuleVO newFwRule=new FirewallRuleVO();
    newFwRule.setEnabled(true);
    newFwRule.setForwarding(true);
    newFwRule.setPrivatePort(privatePort);
    newFwRule.setProtocol(protocol);
    newFwRule.setPublicPort(publicPort);
    newFwRule.setPublicIpAddress(ipAddress);
    newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
    newFwRule.setGroupId(securityGroupId);
    _firewallRulesDao.persist(newFwRule);
    boolean success=_networkMgr.updateFirewallRule(newFwRule,null,null);
    String description;
    String ruleName="ip forwarding";
    String level=EventVO.LEVEL_INFO;
    Account account=_accountDao.findById(userVm.getAccountId());
    if (success == true) {
      description="created new " + ruleName + " rule ["+ newFwRule.getPublicIpAddress()+ ":"+ newFwRule.getPublicPort()+ "]->["+ newFwRule.getPrivateIpAddress()+ ":"+ newFwRule.getPrivatePort()+ "]"+ " "+ newFwRule.getProtocol();
    }
 else {
      level=EventVO.LEVEL_ERROR;
      description="failed to create new " + ruleName + " rule ["+ newFwRule.getPublicIpAddress()+ ":"+ newFwRule.getPublicPort()+ "]->["+ newFwRule.getPrivateIpAddress()+ ":"+ newFwRule.getPrivatePort()+ "]"+ " "+ newFwRule.getProtocol();
    }
    saveEvent(Long.valueOf(userId),account.getId(),level,EventTypes.EVENT_NET_RULE_ADD,description);
    return newFwRule;
  }
  return null;
}
