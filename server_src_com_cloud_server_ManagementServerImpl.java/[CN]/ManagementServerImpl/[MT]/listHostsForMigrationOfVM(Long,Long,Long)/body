{
  Account caller=CallContext.current().getCallingAccount();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the VM");
    }
    throw new PermissionDeniedException("No permission to migrate VM, Only Root Admin can migrate a VM!");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find the VM with given id");
    throw ex;
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not running, cannot migrate the vm" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException("VM is not Running, cannot " + "migrate the vm with specified id");
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is not XenServer/VMware/KVM/OVM, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported Hypervisor Type for VM migration, we support " + "XenServer/VMware/KVM/Ovm only");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_hostDao.findById(srcHostId);
  if (srcHost == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find the host with id: " + srcHostId + " of this VM:"+ vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find the host (with specified id) of VM with specified id");
    ex.addProxyObject(String.valueOf(srcHostId),"hostId");
    ex.addProxyObject(vm.getUuid(),"vmId");
    throw ex;
  }
  boolean canMigrateWithStorage=false;
  HypervisorCapabilitiesVO capabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(srcHost.getHypervisorType(),srcHost.getHypervisorVersion());
  if (capabilities != null) {
    canMigrateWithStorage=capabilities.isStorageMotionSupported();
  }
  VirtualMachineProfile<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  List<VolumeVO> volumes=_volumeDao.findCreatedByInstance(vmProfile.getId());
  boolean usesLocal=false;
  for (  VolumeVO volume : volumes) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(volume,diskOffering,vmProfile.getHypervisorType());
    if (diskProfile.useLocalStorage()) {
      usesLocal=true;
      break;
    }
  }
  if (!canMigrateWithStorage && usesLocal) {
    throw new InvalidParameterValueException("Unsupported operation, VM uses Local storage, cannot migrate");
  }
  Type hostType=srcHost.getType();
  Pair<List<HostVO>,Integer> allHostsPair=null;
  List<HostVO> allHosts=null;
  Map<Host,Boolean> requiresStorageMotion=new HashMap<Host,Boolean>();
  DataCenterDeployment plan=null;
  if (canMigrateWithStorage) {
    allHostsPair=searchForServers(startIndex,pageSize,null,hostType,null,srcHost.getDataCenterId(),null,null,null,null,null,null,srcHost.getHypervisorType(),srcHost.getHypervisorVersion());
    allHosts=allHostsPair.first();
    allHosts.remove(srcHost);
    for (Iterator<HostVO> iterator=allHosts.iterator(); iterator.hasNext(); ) {
      Host host=iterator.next();
      Map<Volume,List<StoragePool>> volumePools=findSuitablePoolsForVolumes(vmProfile,host);
      if (volumePools.isEmpty()) {
        iterator.remove();
      }
 else {
        if (!host.getClusterId().equals(srcHost.getClusterId()) || usesLocal) {
          requiresStorageMotion.put(host,true);
        }
      }
    }
    plan=new DataCenterDeployment(srcHost.getDataCenterId(),null,null,null,null,null);
  }
 else {
    Long cluster=srcHost.getClusterId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Searching for all hosts in cluster " + cluster + " for migrating VM "+ vm);
    }
    allHostsPair=searchForServers(startIndex,pageSize,null,hostType,null,null,null,cluster,null,null,null,null,null,null);
    allHosts=allHostsPair.first();
    allHosts.remove(srcHost);
    plan=new DataCenterDeployment(srcHost.getDataCenterId(),srcHost.getPodId(),srcHost.getClusterId(),null,null,null);
  }
  Pair<List<? extends Host>,Integer> otherHosts=new Pair<List<? extends Host>,Integer>(allHosts,new Integer(allHosts.size()));
  List<Host> suitableHosts=new ArrayList<Host>();
  ExcludeList excludes=new ExcludeList();
  excludes.addHost(srcHostId);
  long vmGroupCount=_affinityGroupVMMapDao.countAffinityGroupsForVm(vm.getId());
  if (vmGroupCount > 0) {
    for (    AffinityGroupProcessor processor : _affinityProcessors) {
      processor.process(vmProfile,plan,excludes);
    }
  }
  for (  HostAllocator allocator : _hostAllocators) {
    if (canMigrateWithStorage) {
      suitableHosts=allocator.allocateTo(vmProfile,plan,Host.Type.Routing,excludes,allHosts,HostAllocator.RETURN_UPTO_ALL,false);
    }
 else {
      suitableHosts=allocator.allocateTo(vmProfile,plan,Host.Type.Routing,excludes,HostAllocator.RETURN_UPTO_ALL,false);
    }
    if (suitableHosts != null && !suitableHosts.isEmpty()) {
      break;
    }
  }
  if (s_logger.isDebugEnabled()) {
    if (suitableHosts.isEmpty()) {
      s_logger.debug("No suitable hosts found");
    }
 else {
      s_logger.debug("Hosts having capacity and suitable for migration: " + suitableHosts);
    }
  }
  return new Ternary<Pair<List<? extends Host>,Integer>,List<? extends Host>,Map<Host,Boolean>>(otherHosts,suitableHosts,requiresStorageMotion);
}
