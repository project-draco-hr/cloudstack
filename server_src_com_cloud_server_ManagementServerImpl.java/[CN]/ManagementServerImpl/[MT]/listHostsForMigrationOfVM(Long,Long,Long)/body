{
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Caller is not a root admin, permission denied to migrate the VM");
    }
    throw new PermissionDeniedException("No permission to migrate VM, Only Root Admin can migrate a VM!");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find the VM with specified id");
    ex.addProxyObject(vm,vmId,"vmId");
    throw ex;
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("VM is not Running, unable to migrate the vm" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException("VM is not Running, unable to migrate the vm with specified id");
    ex.addProxyObject(vm,vmId,"vmId");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is not XenServer/VMware/KVM/OVM, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported Hypervisor Type for VM migration, we support XenServer/VMware/KVM only");
  }
  ServiceOfferingVO svcOffering=_offeringsDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + " is using Local Storage, cannot migrate this VM.");
    }
    throw new InvalidParameterValueException("Unsupported operation, VM uses Local storage, cannot migrate");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_hostDao.findById(srcHostId);
  if (srcHost == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Unable to find the host with id: " + srcHostId + " of this VM:"+ vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find the host (with specified id) of VM with specified id");
    ex.addProxyObject(srcHost,srcHostId,"hostId");
    ex.addProxyObject(vm,vmId,"vmId");
    throw ex;
  }
  Long cluster=srcHost.getClusterId();
  Type hostType=srcHost.getType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Searching for all hosts in cluster: " + cluster + " for migrating VM "+ vm);
  }
  List<? extends Host> allHostsInCluster=searchForServers(startIndex,pageSize,null,hostType,null,null,null,cluster,null,null,null);
  allHostsInCluster.remove(srcHost);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Other Hosts in this cluster: " + allHostsInCluster);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Calling HostAllocators to search for hosts in cluster: " + cluster + " having enough capacity and suitable for migration");
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  Enumeration<HostAllocator> enHost=_hostAllocators.enumeration();
  VirtualMachineProfile<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  DataCenterDeployment plan=new DataCenterDeployment(srcHost.getDataCenterId(),srcHost.getPodId(),srcHost.getClusterId(),null,null,null);
  ExcludeList excludes=new ExcludeList();
  excludes.addHost(srcHostId);
  while (enHost.hasMoreElements()) {
    final HostAllocator allocator=enHost.nextElement();
    suitableHosts=allocator.allocateTo(vmProfile,plan,Host.Type.Routing,excludes,HostAllocator.RETURN_UPTO_ALL,false);
    if (suitableHosts != null && !suitableHosts.isEmpty()) {
      break;
    }
  }
  if (suitableHosts.isEmpty()) {
    s_logger.debug("No suitable hosts found");
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Hosts having capacity and suitable for migration: " + suitableHosts);
    }
  }
  return new Pair<List<? extends Host>,List<? extends Host>>(allHostsInCluster,suitableHosts);
}
