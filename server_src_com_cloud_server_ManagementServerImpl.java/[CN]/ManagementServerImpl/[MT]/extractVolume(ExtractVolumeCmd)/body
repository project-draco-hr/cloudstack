{
  Long volumeId=cmd.getId();
  String url=cmd.getUrl();
  Long zoneId=cmd.getZoneId();
  AsyncJobVO job=cmd.getJob();
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Unable to find volume with id " + volumeId);
  }
  URI uri=new URI(url);
  if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase("ftp"))) {
    throw new IllegalArgumentException("Unsupported scheme for url: " + url);
  }
  String host=uri.getHost();
  try {
    InetAddress hostAddr=InetAddress.getByName(host);
    if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
      throw new IllegalArgumentException("Illegal host specified in url");
    }
    if (hostAddr instanceof Inet6Address) {
      throw new IllegalArgumentException("IPV6 addresses not supported (" + hostAddr.getHostAddress() + ")");
    }
  }
 catch (  UnknownHostException uhe) {
    throw new IllegalArgumentException("Unable to resolve " + host);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException("Please specify a valid zone.");
  }
  if (_uploadMonitor.isTypeUploadInProgress(volumeId,Type.VOLUME)) {
    throw new IllegalArgumentException(volume.getName() + " upload is in progress. Please wait for some time to schedule another upload for the same");
  }
  long userId=UserContext.current().getUserId();
  long accountId=volume.getAccountId();
  long eventId=EventUtils.saveScheduledEvent(userId,accountId,EventTypes.EVENT_VOLUME_UPLOAD,"Extraction job");
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  StoragePoolVO srcPool=_poolDao.findById(volume.getPoolId());
  Long sourceHostId=_storageMgr.findHostIdForStoragePool(srcPool);
  List<HostVO> storageServers=_hostDao.listByTypeDataCenter(Host.Type.SecondaryStorage,zoneId);
  HostVO sserver=storageServers.get(0);
  UploadVO uploadJob=_uploadMonitor.createNewUploadEntry(sserver.getId(),volumeId,UploadVO.Status.COPY_IN_PROGRESS,0,Type.VOLUME,null,null,url);
  uploadJob=_uploadDao.createForUpdate(uploadJob.getId());
  ExtractJobResultObject resultObj=new ExtractJobResultObject(volume.getAccountId(),volume.getName(),UploadVO.Status.COPY_IN_PROGRESS.toString(),0,uploadJob.getId());
  _asyncMgr.updateAsyncJobAttachment(job.getId(),Type.VOLUME.toString(),volumeId);
  _asyncMgr.updateAsyncJobStatus(job.getId(),AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
  CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true);
  CopyVolumeAnswer cvAnswer=(CopyVolumeAnswer)_agentMgr.easySend(sourceHostId,cvCmd);
  if (cvAnswer == null || !cvAnswer.getResult()) {
    String errorString="Failed to copy the volume from the source primary storage pool to secondary storage.";
    resultObj.setResult_string(errorString);
    resultObj.setUploadStatus(UploadVO.Status.COPY_ERROR.toString());
    _asyncMgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,0,resultObj);
    uploadJob.setUploadState(UploadVO.Status.COPY_ERROR);
    uploadJob.setErrorString(errorString);
    uploadJob.setLastUpdated(new Date());
    _uploadDao.update(uploadJob.getId(),uploadJob);
    EventUtils.saveEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_UPLOAD,errorString);
    throw new InternalErrorException(errorString);
  }
  String volumeLocalPath="volumes/" + volume.getId() + "/"+ cvAnswer.getVolumePath()+ ".vhd";
  uploadJob.setUploadState(UploadVO.Status.COPY_COMPLETE);
  uploadJob.setLastUpdated(new Date());
  _uploadDao.update(uploadJob.getId(),uploadJob);
  _uploadMonitor.extractVolume(uploadJob,sserver,volume,url,zoneId,volumeLocalPath,eventId,job.getId(),_asyncMgr);
}
