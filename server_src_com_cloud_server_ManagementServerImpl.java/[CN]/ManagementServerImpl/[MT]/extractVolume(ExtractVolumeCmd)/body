{
  Long volumeId=cmd.getId();
  String url=cmd.getUrl();
  Long zoneId=cmd.getZoneId();
  AsyncJobVO job=null;
  String mode=cmd.getMode();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Unable to find volume with id " + volumeId);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid zone.");
  }
  if (volume.getPoolId() == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"The volume doesnt belong to a storage pool so cant extract it");
  }
  if (volume.getInstanceId() != null && ApiDBUtils.findVMInstanceById(volume.getInstanceId()).getState() != State.Stopped) {
    s_logger.debug("Invalid state of the volume with ID: " + volumeId + ". It should be either detached or the VM should be in stopped state.");
    throw new PermissionDeniedException("Invalid state of the volume with ID: " + volumeId + ". It should be either detached or the VM should be in stopped state.");
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;
  if (!isExtractable && account != null && account.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    throw new PermissionDeniedException("The volume:" + volumeId + " is not allowed to be extracted");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,"Please specify a valid extract Mode ");
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (volume.getAccountId() != account.getId()) {
        throw new PermissionDeniedException("Unable to find volume with ID: " + volumeId + " for account: "+ account.getAccountName());
      }
    }
 else {
      Account userAccount=_accountDao.findById(volume.getAccountId());
      if ((userAccount == null) || !_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException("Unable to extract volume:" + volumeId + " - permission denied.");
      }
    }
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase("ftp"))) {
      throw new IllegalArgumentException("Unsupported scheme for url: " + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException("Illegal host specified in url");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException("IPV6 addresses not supported (" + hostAddr.getHostAddress() + ")");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException("Unable to resolve " + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(volumeId,Upload.Type.VOLUME)) {
      throw new IllegalArgumentException(volume.getName() + " upload is in progress. Please wait for some time to schedule another upload for the same");
    }
  }
  long userId=UserContext.current().getUserId();
  long accountId=volume.getAccountId();
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  StoragePoolVO srcPool=_poolDao.findById(volume.getPoolId());
  Long sourceHostId=_storageMgr.findHostIdForStoragePool(srcPool);
  List<HostVO> storageServers=_hostDao.listByTypeDataCenter(Host.Type.SecondaryStorage,zoneId);
  HostVO sserver=storageServers.get(0);
  EventUtils.saveStartedEvent(userId,accountId,cmd.getEventType(),"Starting extraction of " + volume.getName() + " mode:"+ mode,cmd.getStartEventId());
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(volumeId,Upload.Type.VOLUME,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractMode == Upload.Mode.HTTP_DOWNLOAD && extractURLList.size() > 0) {
    return extractURLList.get(0).getId();
  }
 else {
    UploadVO uploadJob=_uploadMonitor.createNewUploadEntry(sserver.getId(),volumeId,UploadVO.Status.COPY_IN_PROGRESS,Upload.Type.VOLUME,url,extractMode);
    s_logger.debug("Extract Mode - " + uploadJob.getMode());
    uploadJob=_uploadDao.createForUpdate(uploadJob.getId());
    ExtractResponse resultObj=new ExtractResponse(volumeId,volume.getName(),accountId,UploadVO.Status.COPY_IN_PROGRESS.toString(),uploadJob.getId());
    resultObj.setResponseName(cmd.getCommandName());
    AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
    if (asyncExecutor != null) {
      job=asyncExecutor.getJob();
      _asyncMgr.updateAsyncJobAttachment(job.getId(),Upload.Type.VOLUME.toString(),volumeId);
      _asyncMgr.updateAsyncJobStatus(job.getId(),AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
    }
    CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true);
    CopyVolumeAnswer cvAnswer=(CopyVolumeAnswer)_agentMgr.easySend(sourceHostId,cvCmd);
    if (cvAnswer == null || !cvAnswer.getResult()) {
      String errorString="Failed to copy the volume from the source primary storage pool to secondary storage.";
      resultObj.setResultString(errorString);
      resultObj.setUploadStatus(UploadVO.Status.COPY_ERROR.toString());
      if (asyncExecutor != null) {
        _asyncMgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,0,resultObj);
      }
      uploadJob.setUploadState(UploadVO.Status.COPY_ERROR);
      uploadJob.setErrorString(errorString);
      uploadJob.setLastUpdated(new Date());
      _uploadDao.update(uploadJob.getId(),uploadJob);
      EventUtils.saveEvent(userId,accountId,EventTypes.EVENT_VOLUME_UPLOAD,errorString);
      throw new CloudRuntimeException(errorString);
    }
    String volumeLocalPath="volumes/" + volume.getId() + "/"+ cvAnswer.getVolumePath()+ ".vhd";
    uploadJob.setUploadState(UploadVO.Status.COPY_COMPLETE);
    uploadJob.setLastUpdated(new Date());
    uploadJob.setInstallPath(volumeLocalPath);
    _uploadDao.update(uploadJob.getId(),uploadJob);
    if (extractMode == Mode.FTP_UPLOAD) {
      _uploadMonitor.extractVolume(uploadJob,sserver,volume,url,zoneId,volumeLocalPath,cmd.getStartEventId(),job.getId(),_asyncMgr);
      return uploadJob.getId();
    }
 else {
      _uploadMonitor.createVolumeDownloadURL(volumeId,volumeLocalPath,Upload.Type.VOLUME,zoneId,uploadJob.getId());
      EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,cmd.getEventType(),"Completed extraction of " + volume.getName() + " in mode:"+ mode,null,cmd.getStartEventId());
      return uploadJob.getId();
    }
  }
}
