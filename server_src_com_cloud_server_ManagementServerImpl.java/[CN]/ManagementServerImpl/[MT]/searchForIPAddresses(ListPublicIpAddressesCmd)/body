{
  Object keyword=cmd.getKeyword();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  Long zone=cmd.getZoneId();
  String address=cmd.getIpAddress();
  Long vlan=cmd.getVlanId();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Boolean forLoadBalancing=cmd.isForLoadBalancing();
  Long ipId=cmd.getId();
  Boolean sourceNat=cmd.getIsSourceNat();
  Boolean staticNat=cmd.getIsStaticNat();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(IPAddressVO.class,"address",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("address",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and("vlanDbId",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("physicalNetworkId",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and("associatedNetworkIdEq",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  sb.and("isSourceNat",sb.entity().isSourceNat(),SearchCriteria.Op.EQ);
  sb.and("isStaticNat",sb.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join("lbSearch",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and("addressLIKE",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("vlanType",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join("vlanSearch",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  boolean allocatedOnly=false;
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and("allocated",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
    allocatedOnly=true;
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  if (vlanType == VlanType.VirtualNetwork && (allocatedOnly)) {
    sb.and("associatedNetworkId",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setJoinParameters("vlanSearch","vlanType",vlanType);
  if (zone != null) {
    sc.setParameters("dataCenterId",zone);
  }
  if (ipId != null) {
    sc.setParameters("id",ipId);
  }
  if (sourceNat != null) {
    sc.setParameters("isSourceNat",sourceNat);
  }
  if (staticNat != null) {
    sc.setParameters("isStaticNat",staticNat);
  }
  if (address == null && keyword != null) {
    sc.setParameters("addressLIKE","%" + keyword + "%");
  }
  if (address != null) {
    sc.setParameters("address",address);
  }
  if (vlan != null) {
    sc.setParameters("vlanDbId",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters("physicalNetworkId",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters("associatedNetworkIdEq",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}
