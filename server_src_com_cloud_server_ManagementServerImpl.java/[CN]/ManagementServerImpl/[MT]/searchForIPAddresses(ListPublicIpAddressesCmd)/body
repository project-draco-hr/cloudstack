{
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Object keyword=cmd.getKeyword();
  Long projectId=cmd.getProjectId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (isAdmin(caller.getType())) {
    if (domainId != null) {
      Domain domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException("Unable to find domain by id " + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
      }
    }
 else     if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      domainId=caller.getDomainId();
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException("Unable to find project by id " + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException("Account " + caller + " can't access project id="+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  if (permittedAccounts.isEmpty() && keyword != null) {
    Account userAccount=_accountDao.findActiveAccount((String)keyword,domainId);
    if (userAccount != null) {
      permittedAccounts.add(userAccount.getId());
    }
  }
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Filter searchFilter=new Filter(IPAddressVO.class,"address",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object zone=cmd.getZoneId();
  Object address=cmd.getIpAddress();
  Object vlan=cmd.getVlanId();
  Object forVirtualNetwork=cmd.isForVirtualNetwork();
  Object forLoadBalancing=cmd.isForLoadBalancing();
  Object ipId=cmd.getId();
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  sb.and("accountIdIN",sb.entity().getAllocatedToAccountId(),SearchCriteria.Op.IN);
  sb.and("dataCenterId",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and("address",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and("vlanDbId",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and("physicalNetworkId",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and("associatedNetworkId",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getAllocatedInDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join("lbSearch",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and("addressLIKE",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and("vlanType",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join("vlanSearch",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and("allocated",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters("accountIdIN",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters("domainSearch","path",domain.getPath() + "%");
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  sc.setJoinParameters("vlanSearch","vlanType",vlanType);
  if (zone != null) {
    sc.setParameters("dataCenterId",zone);
  }
  if (ipId != null) {
    sc.setParameters("id",ipId);
  }
  if (address == null && keyword != null) {
    sc.setParameters("addressLIKE","%" + keyword + "%");
  }
  if (address != null) {
    sc.setParameters("address",address);
  }
  if (vlan != null) {
    sc.setParameters("vlanDbId",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters("physicalNetworkId",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters("associatedNetworkId",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}
