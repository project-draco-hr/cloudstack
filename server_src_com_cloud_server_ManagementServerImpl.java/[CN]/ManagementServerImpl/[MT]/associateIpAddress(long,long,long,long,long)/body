{
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address called for user " + userId + " account "+ accountId);
    }
    account=_accountDao.acquire(accountId);
    if (account == null) {
      s_logger.warn("Unable to lock account: " + accountId);
      throw new InternalErrorException("Unable to acquire account lock");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("Associate IP address lock acquired");
    }
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.public_ip)) {
      ResourceAllocationException rae=new ResourceAllocationException("Maximum number of public IP addresses for account: " + account.getAccountName() + " has been exceeded.");
      rae.setResourceType("ip");
      throw rae;
    }
    DomainRouterVO router=_routerDao.findBy(accountId,zoneId);
    if (router == null) {
      throw new InvalidParameterValueException("No router found for account: " + account.getAccountName() + ".");
    }
    txn.start();
    String ipAddress=null;
    Pair<String,VlanVO> ipAndVlan=_vlanDao.assignIpAddress(zoneId,accountId,domainId,VlanType.VirtualNetwork,false);
    if (ipAndVlan == null) {
      throw new InsufficientAddressCapacityException("Unable to find available public IP addresses");
    }
 else {
      ipAddress=ipAndVlan.first();
      _accountMgr.incrementResourceCount(accountId,ResourceType.public_ip);
    }
    boolean success=true;
    String errorMsg="";
    List<String> ipAddrs=new ArrayList<String>();
    ipAddrs.add(ipAddress);
    if (router.getState() == State.Running) {
      success=_networkMgr.associateIP(router,ipAddrs,true,vmId);
      if (!success) {
        errorMsg="Unable to assign public IP address.";
      }
    }
    EventVO event=new EventVO();
    event.setUserId(userId);
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_NET_IP_ASSIGN);
    event.setParameters("address=" + ipAddress + "\nsourceNat="+ false+ "\ndcId="+ zoneId);
    if (!success) {
      _publicIpAddressDao.unassignIpAddress(ipAddress);
      ipAddress=null;
      _accountMgr.decrementResourceCount(accountId,ResourceType.public_ip);
      event.setLevel(EventVO.LEVEL_ERROR);
      event.setDescription(errorMsg);
      _eventDao.persist(event);
      txn.commit();
      throw new InternalErrorException(errorMsg);
    }
 else {
      event.setDescription("Assigned a public IP address: " + ipAddress);
      _eventDao.persist(event);
    }
    txn.commit();
    return ipAddress;
  }
 catch (  ResourceAllocationException rae) {
    s_logger.error("Associate IP threw a ResourceAllocationException.",rae);
    throw rae;
  }
catch (  InsufficientAddressCapacityException iace) {
    s_logger.error("Associate IP threw an InsufficientAddressCapacityException.",iace);
    throw iace;
  }
catch (  InvalidParameterValueException ipve) {
    s_logger.error("Associate IP threw an InvalidParameterValueException.",ipve);
    throw ipve;
  }
catch (  InternalErrorException iee) {
    s_logger.error("Associate IP threw an InternalErrorException.",iee);
    throw iee;
  }
catch (  Throwable t) {
    s_logger.error("Associate IP address threw an exception.",t);
    throw new InternalErrorException("Associate IP address exception");
  }
 finally {
    if (account != null) {
      _accountDao.release(accountId);
      s_logger.debug("Associate IP address lock released");
    }
  }
}
