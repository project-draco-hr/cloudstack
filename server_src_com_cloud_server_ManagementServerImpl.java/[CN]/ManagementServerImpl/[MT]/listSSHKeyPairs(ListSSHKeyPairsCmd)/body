{
  String name=cmd.getName();
  String fingerPrint=cmd.getFingerprint();
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,"listSSHKeyPairs");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  Filter searchFilter=new Filter(SSHKeyPairVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd("fingerprint",SearchCriteria.Op.EQ,fingerPrint);
  }
  Pair<List<SSHKeyPairVO>,Integer> result=_sshKeyPairDao.searchAndCount(sc,searchFilter);
  return new Pair<List<? extends SSHKeyPair>,Integer>(result.first(),result.second());
}
