{
  final String name=cmd.getName();
  final String fingerPrint=cmd.getFingerprint();
  final Account caller=getCaller();
  final List<Long> permittedAccounts=new ArrayList<Long>();
  final Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  final Long domainId=domainIdRecursiveListProject.first();
  final Boolean isRecursive=domainIdRecursiveListProject.second();
  final ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  final SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  final Filter searchFilter=new Filter(SSHKeyPairVO.class,"id",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  final SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd("name",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd("fingerprint",SearchCriteria.Op.EQ,fingerPrint);
  }
  final Pair<List<SSHKeyPairVO>,Integer> result=_sshKeyPairDao.searchAndCount(sc,searchFilter);
  return new Pair<List<? extends SSHKeyPair>,Integer>(result.first(),result.second());
}
