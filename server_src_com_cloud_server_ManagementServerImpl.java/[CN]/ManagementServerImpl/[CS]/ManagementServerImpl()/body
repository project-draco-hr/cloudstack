{
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _detailsDao=locator.getDao(HostDetailsDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _nicDao=locator.getDao(NicDao.class);
  _networkDao=locator.getDao(NetworkDao.class);
  _loadbalancerDao=locator.getDao(LoadBalancerDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _vmGroupDao=locator.getDao(InstanceGroupDao.class);
  _uploadDao=locator.getDao(UploadDao.class);
  _configs=_configDao.getConfiguration();
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _uploadMonitor=locator.getManager(UploadMonitor.class);
  _sshKeyPairDao=locator.getDao(SSHKeyPairDao.class);
  _itMgr=locator.getManager(VirtualMachineManager.class);
  _ksMgr=locator.getManager(KeystoreManager.class);
  _resourceMgr=locator.getManager(ResourceManager.class);
  _hypervisorCapabilitiesDao=locator.getDao(HypervisorCapabilitiesDao.class);
  _hostAllocators=locator.getAdapters(HostAllocator.class);
  if (_hostAllocators == null || !_hostAllocators.isSet()) {
    s_logger.error("Unable to find HostAllocators");
  }
  _templateMgr=locator.getManager(TemplateManager.class);
  String value=_configs.get("account.cleanup.interval");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  _statsCollector=StatsCollector.getInstance(_configs);
  _purgeDelay=NumbersUtil.parseInt(_configs.get("event.purge.delay"),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
}
