@attr(configuration='ha.tag')
@attr(speed='slow')
@attr(tags=['advanced', 'advancedns', 'sg', 'basic', 'eip', 'simulator', 'multihost'])
def test_06_no_vm_without_ha_gets_migrated_to_ha_host_in_live_migration(self):
    ' Verify that none of the VMs without HA enabled migrate to an ha tagged host during live migration '
    virtual_machine_without_ha = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering_without_ha.id)
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine_without_ha.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    vm_with_ha_disabled = vms[0]
    list_hosts_response = list_hosts(self.apiclient, id=vm_with_ha_disabled.hostid)
    self.assertEqual(isinstance(list_hosts_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_hosts_response), 0, 'Check Host is available')
    self.assertEqual(list_hosts_response[0].hahost, False, 'The virtual machine is not ha enabled so check if VM is created on host which is also not ha enabled')
    self.debug(('Enabling maintenance mode for host %s' % vm_with_ha_disabled.hostid))
    cmd = prepareHostForMaintenance.prepareHostForMaintenanceCmd()
    cmd.id = vm_with_ha_disabled.hostid
    self.apiclient.prepareHostForMaintenance(cmd)
    timeout = self.services['timeout']
    self.debug('Waiting for VM to come up')
    wait_for_vm(self.apiclient, virtualmachineid=vm_with_ha_disabled.id, interval=timeout)
    vms = VirtualMachine.list(self.apiclient, id=vm_with_ha_disabled.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should return valid response for deployed VM')
    self.assertNotEqual(len(vms), 0, 'List VMs should return valid response for deployed VM')
    list_hosts_response = list_hosts(self.apiclient, id=vms[0].hostid)
    self.assertEqual(isinstance(list_hosts_response, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_hosts_response), 0, 'Check Host is available')
    self.assertEqual(list_hosts_response[0].hahost, False, 'The virtual machine is not ha enabled so check if VM is created on host which is also not ha enabled')
    self.debug(('Disabling the maintenance mode for host %s' % vm_with_ha_disabled.hostid))
    cmd = cancelHostMaintenance.cancelHostMaintenanceCmd()
    cmd.id = vm_with_ha_disabled.hostid
    self.apiclient.cancelHostMaintenance(cmd)
