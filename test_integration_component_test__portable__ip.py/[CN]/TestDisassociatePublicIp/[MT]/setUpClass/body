@classmethod
def setUpClass(cls):
    cls.api_client = super(TestDisassociatePublicIp, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.region = get_region(cls.api_client, cls.services)
    cls.domain = get_domain(cls.api_client, cls.services)
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.pod = get_pod(cls.api_client, cls.zone.id, cls.services)
    cls.services['mode'] = cls.zone.networktype
    cls.services['domainid'] = cls.domain.id
    cls.services['zoneid'] = cls.zone.id
    cls.services['regionid'] = cls.region.id
    template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    cls.services['small']['zoneid'] = cls.zone.id
    cls.services['small']['template'] = template.id
    cls.account = Account.create(cls.api_client, cls.services['account'], domainid=cls.domain.id, admin=True)
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls.network_offering = NetworkOffering.create(cls.api_client, cls.services['network_offering'], conservemode=False)
    cls.network_offering.update(cls.api_client, state='Enabled')
    cls.network = Network.create(cls.api_client, cls.services['network'], accountid=cls.account.name, domainid=cls.account.domainid, networkofferingid=cls.network_offering.id, zoneid=cls.zone.id)
    cls.virtual_machine = VirtualMachine.create(cls.api_client, cls.services['small'], accountid=cls.account.name, domainid=cls.account.domainid, serviceofferingid=cls.service_offering.id, networkids=[cls.network.id], mode=cls.services['mode'])
    cls._cleanup = [cls.account, cls.service_offering, cls.network_offering]
    return
