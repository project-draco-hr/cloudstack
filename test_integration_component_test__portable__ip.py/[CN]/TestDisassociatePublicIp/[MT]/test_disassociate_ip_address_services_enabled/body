@attr(tags=['advanced'], required_hardware='false')
def test_disassociate_ip_address_services_enabled(self):
    ' Test disassociating portable ip\n        '
    portableip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
    response = isIpInDesiredState(self.apiclient, portableip.ipaddress.id, state='allocated')
    exceptionOccured = response[0]
    ipInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not ipInDesiredState)):
        portableip.delete(self.apiclient)
        self.fail(exceptionMessage)
    try:
        self.debug('Opening firewall on the portable public ip')
        FireWallRule.create(self.apiclient, ipaddressid=portableip.ipaddress.id, protocol=self.testdata['natrule']['protocol'], cidrlist=['0.0.0.0/0'], startport=self.testdata['natrule']['publicport'], endport=self.testdata['natrule']['publicport'])
        self.debug('Creating NAT rule on the portable public ip')
        NATRule.create(self.apiclient, self.virtual_machine, self.testdata['natrule'], portableip.ipaddress.id)
    except Exception as e:
        portableip.delete(self.apiclient)
        self.fail(('Error: %s' % e))
    try:
        portableip.delete(self.apiclient)
    except Exception as e:
        raise Exception(('Exception while disassociating portable ip: %s' % e))
    return
