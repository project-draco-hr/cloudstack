@attr(tags=['advanced', 'selfservice'])
def test_delete_account_services_enabled(self):
    ' test delete account with portable ip with PF and firewall services enabled\n        '
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering'])
    self.cleanup.append(self.service_offering)
    self.debug('Deploying Virtual Machine')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, mode=self.services['mode'])
    self.debug(('Created virtual machine instance: %s' % self.virtual_machine.id))
    portableip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
    self.debug(('created public ip address (portable): %s' % portableip.ipaddress.ipaddress))
    response = isIpInDesiredState(self.apiclient, portableip.ipaddress.id, state='allocated')
    exceptionOccured = response[0]
    ipInDesiredState = response[1]
    exceptionMessage = response[2]
    if (exceptionOccured or (not ipInDesiredState)):
        portableip.delete(self.apiclient)
        self.account.delete(self.apiclient)
        self.fail(exceptionMessage)
    try:
        self.debug('Opening firewall on the portable public ip')
        FireWallRule.create(self.apiclient, ipaddressid=portableip.ipaddress.id, protocol=self.services['natrule']['protocol'], cidrlist=[self.services['natrule']['cidr']], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
        self.debug('Creating NAT rule on the portable public ip')
        NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], portableip.ipaddress.id)
    except Exception as e:
        portableip.delete(self.apiclient)
        self.account.delete(self.apiclient)
        self.cleanup.remove(self.account)
        self.fail(('Error %s' % e))
    self.debug(('Deleting account: %s :' % self.account.name))
    try:
        self.account.delete(self.apiclient)
        self.cleanup.remove(self.account)
    except Exception as e:
        portableip.delete(self.apiclient)
        self.fail(e)
    self.debug('Trying to list the ip address associated with deleted account,                 should throw exception')
    listpublicips = PublicIPAddress.list(self.apiclient, id=portableip.ipaddress.id)
    self.assertTrue((listpublicips is None), 'list of public ips should be None')
    return
