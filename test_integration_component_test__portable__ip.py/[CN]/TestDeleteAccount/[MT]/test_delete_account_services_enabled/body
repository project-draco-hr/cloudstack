@attr(tags=['advanced'])
def test_delete_account_services_enabled(self):
    ' test delete account with portable ip with PF and firewall services enabled\n        '
    self.service_offering = ServiceOffering.create(self.apiclient, self.services['service_offering'])
    self.cleanup.append(self.service_offering)
    self.debug('Deploying Virtual Machine')
    self.virtual_machine = VirtualMachine.create(self.apiclient, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, mode=self.services['mode'])
    self.debug(('Created virtual machine instance: %s' % self.virtual_machine.id))
    portableip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
    self.debug(('created public ip address (portable): %s' % portableip.ipaddress.ipaddress))
    self.debug('Opening firewall on the portable public ip')
    FireWallRule.create(self.apiclient, ipaddressid=portableip.ipaddress.id, protocol=self.services['natrule']['protocol'], cidrlist=[self.services['natrule']['cidr']], startport=self.services['natrule']['publicport'], endport=self.services['natrule']['publicport'])
    self.debug('Creating NAT rule on the portable public ip')
    NATRule.create(self.apiclient, self.virtual_machine, self.services['natrule'], portableip.ipaddress.id)
    self.debug(('Deleting account: %s :' % self.account.name))
    self.account.delete(self.apiclient)
    self.debug('Trying to list the ip address associated with deleted account,                 should throw exception')
    with self.assertRaises(Exception):
        PublicIPAddress.list(self.apiclient, id=portableip.ipaddress.id)
    return
