@attr(tags=['advanced'])
def test_delete_portable_ip_range_in_use(self):
    'Test delete ip range\n        '
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    self.debug('Creating n/w offering')
    self.network_offering = NetworkOffering.create(self.apiclient, self.services['network_offering'], conservemode=False)
    self.debug(('Created n/w offering with ID: %s' % self.network_offering.id))
    self.network_offering.update(self.apiclient, state='Enabled')
    self.debug('Creating network')
    self.network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with id: %s' % self.network.id))
    self.debug(('Associating public ip address with network: %s with isportable=True' % self.network.id))
    portableip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
    self.debug(('Associated public ip address (portable): %s' % portableip.ipaddress.ipaddress))
    with self.assertRaises(Exception):
        self.debug('Trying to Delete portable ip range with root-admin api, this should fail')
        self.portable_ip_range.delete(self.apiclient)
    self.debug('Deleting portable ip range failed')
    self.debug('Disassociating portable ip')
    portableip.delete(self.apiclient)
    self.debug('Deleting portable ip range')
    self.portable_ip_range.delete(self.apiclient)
    return
