@attr(tags=['advanced'])
def test_associate_ip_address_no_free_ip(self):
    ' Test assocoate public ip address\n        '
    associatedipaddresses = []
    startip_int = int(IPAddress(self.portable_ip_range.startip))
    endip_int = int(IPAddress(self.portable_ip_range.endip))
    totalportableips = ((endip_int - startip_int) + 1)
    self.debug(totalportableips)
    for x in range(0, totalportableips):
        self.debug(('Associating public ip address with network: %s with isportable=True' % self.network.id))
        portableip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
        associatedipaddresses.append(portableip)
        self.debug(('Associated public ip address (portable): %s' % portableip.ipaddress.ipaddress))
    self.debug('Trying to associate portable public ip when no free ips available, this should fail')
    with self.assertRaises(Exception):
        PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=self.network.id, isportable=True)
    self.debug('Associating portable ip address failed')
    self.debug('Disassociating previously associated ip addresses')
    for x in range(0, totalportableips):
        associatedipaddresses[x].delete(self.apiclient)
    return
