@staticmethod
def prepareOCFS2Nodes(clusterName, nodeString):

    def configureEtcHosts(nodes):
        if (not exists(ETC_HOSTS)):
            orignalConf = ''
        else:
            fd = open(ETC_HOSTS, 'r')
            orignalConf = fd.read()
            fd.close()
        pattern = '(.*%s.*)|(.*%s.*)'
        newlines = []
        for n in nodes:
            p = (pattern % (n['ip_address'], n['name']))
            orignalConf = re.sub(p, '', orignalConf)
            newlines.append(('%s\t%s\n' % (n['ip_address'], n['name'])))
        orignalConf = (orignalConf + ''.join(newlines))
        orignalConf = re.sub('\\n\\s*\\n*', '\n', orignalConf)
        logger.debug(OvmStoragePool.prepareOCFS2Nodes, ('Configure /etc/hosts:%s\n' % orignalConf))
        fd = open(ETC_HOSTS, 'w')
        fd.write(orignalConf)
        fd.close()

    def configureHostName(nodes):
        myIp = successToMap(get_master_ip())['ip']
        nodeName = None
        for n in nodes:
            if (myIp == n['ip_address']):
                nodeName = n['name']
                break
        if (nodeName == None):
            raise Exception(('Cannot find node equals to my ip address:%s' % myIp))
        if (not exists(HOSTNAME_FILE)):
            originalConf = ''
        else:
            fd = open(HOSTNAME_FILE, 'r')
            originalConf = fd.read()
            fd.close()
        pattern = 'HOSTNAME=(.*)'
        originalConf = re.sub(pattern, '', originalConf)
        originalConf = ((re.sub('\\n\\s*\\n*', '\n', originalConf) + '\n') + ('HOSTNAME=%s' % nodeName))
        logger.debug(OvmStoragePool.prepareOCFS2Nodes, ('Configure %s:%s\n' % (HOSTNAME_FILE, originalConf)))
        fd = open(HOSTNAME_FILE, 'w')
        fd.write(originalConf)
        fd.close()
        doCmd(['hostname', nodeName])

    def addNodes(nodes, clusterName):
        ocfs2 = OvmOCFS2()
        isOnline = ocfs2._isClusterOnline(clusterName)
        if (not isOnline):
            ocfs2._prepareConf(clusterName)
        for n in nodes:
            ocfs2._addNode(n['name'], n['number'], n['ip_address'], 7777, clusterName, isOnline)

    def checkStaleCluster(clusterName):
        if exists('/sys/kernel/config/cluster/'):
            dirs = os.listdir('/sys/kernel/config/cluster/')
            for dir in dirs:
                if (dir != clusterName):
                    errMsg = ("CloudStack detected there is a stale cluster(%s) on host %s. Please manually clean up it first then add again by\n1) remove the host from cloudstack \n2) umount all OCFS2 device on host\n3) /etc/init.d/o2cb offline %s\n4) /etc/init.d/o2cb restart\nif this doesn't resolve the problem, please check oracle manual to see how to offline a cluster\n    " % (dir, successToMap(get_master_ip())['ip'], dir))
                    raise Exception(errMsg)
    try:
        checkStaleCluster(clusterName)
        nodeString = nodeString.strip(';')
        nodes = []
        for n in nodeString.split(';'):
            params = n.split(':')
            if (len(params) != 3):
                raise Exception(('Wrong parameter(%s) in node string(%s)' % (n, nodeString)))
            dict = {'number': params[0], 'ip_address': params[1], 'name': params[2], }
            nodes.append(dict)
        if (len(nodes) > 255):
            raise Exception(('%s nodes beyond maximum 255 allowed by OCFS2' % len(nodes)))
        configureHostName(nodes)
        configureEtcHosts(nodes)
        addNodes(nodes, clusterName)
        OvmOCFS2()._start(clusterName)
        fd = open(OCFS2_CONF, 'r')
        conf = fd.readlines()
        fd.close()
        logger.debug(OvmStoragePool.prepareOCFS2Nodes, ('Configure cluster.conf to:\n%s' % ' '.join(conf)))
        rs = SUCC()
        return rs
    except Exception as e:
        errmsg = fmt_err_msg(e)
        logger.error(OvmStoragePool.prepareOCFS2Nodes, errmsg)
        raise XmlRpcFault(toErrCode(OvmStoragePool, OvmStoragePool.prepareOCFS2Nodes), errmsg)
