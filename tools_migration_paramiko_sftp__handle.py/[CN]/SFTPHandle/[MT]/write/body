def write(self, offset, data):
    "\n        Write C{data} into this file at position C{offset}.  Extending the\n        file past its original end is expected.  Unlike python's normal\n        C{write()} methods, this method cannot do a partial write: it must\n        write all of C{data} or else return an error.\n\n        The default implementation checks for an attribute on C{self} named\n        C{writefile}, and if present, performs the write operation on the\n        python file-like object found there.  The attribute is named\n        differently from C{readfile} to make it easy to implement read-only\n        (or write-only) files, but if both attributes are present, they should\n        refer to the same file.\n        \n        @param offset: position in the file to start reading from.\n        @type offset: int or long\n        @param data: data to write into the file.\n        @type data: str\n        @return: an SFTP error code like L{SFTP_OK}.\n        "
    writefile = getattr(self, 'writefile', None)
    if (writefile is None):
        return SFTP_OP_UNSUPPORTED
    try:
        if ((self.__flags & os.O_APPEND) == 0):
            if (self.__tell is None):
                self.__tell = writefile.tell()
            if (offset != self.__tell):
                writefile.seek(offset)
                self.__tell = offset
        writefile.write(data)
        writefile.flush()
    except IOError as e:
        self.__tell = None
        return SFTPServer.convert_errno(e.errno)
    if (self.__tell is not None):
        self.__tell += len(data)
    return SFTP_OK
