def read(self, offset, length):
    '\n        Read up to C{length} bytes from this file, starting at position\n        C{offset}.  The offset may be a python long, since SFTP allows it\n        to be 64 bits.\n\n        If the end of the file has been reached, this method may return an\n        empty string to signify EOF, or it may also return L{SFTP_EOF}.\n\n        The default implementation checks for an attribute on C{self} named\n        C{readfile}, and if present, performs the read operation on the python\n        file-like object found there.  (This is meant as a time saver for the\n        common case where you are wrapping a python file object.)\n\n        @param offset: position in the file to start reading from.\n        @type offset: int or long\n        @param length: number of bytes to attempt to read.\n        @type length: int\n        @return: data read from the file, or an SFTP error code.\n        @rtype: str\n        '
    readfile = getattr(self, 'readfile', None)
    if (readfile is None):
        return SFTP_OP_UNSUPPORTED
    try:
        if (self.__tell is None):
            self.__tell = readfile.tell()
        if (offset != self.__tell):
            readfile.seek(offset)
            self.__tell = offset
        data = readfile.read(length)
    except IOError as e:
        self.__tell = None
        return SFTPServer.convert_errno(e.errno)
    self.__tell += len(data)
    return data
