@classmethod
def setUpClass(cls):
    testclient = super(TestVMMigrationWithStorage, cls).getClsTestClient()
    cls.apiClient = testclient.getApiClient()
    cls.dbConnection = testclient.getDbConnection()
    cls.testdata = TestData().testdata
    xenserver = cls.testdata[TestData.xenServer]
    host_ip = ('https://' + list_hosts(cls.apiClient, clusterid=cls.testdata[TestData.clusterId1], name='XenServer-6.5-1')[0].ipaddress)
    cls.xen_session_1 = XenAPI.Session(host_ip)
    cls.xen_session_1.xenapi.login_with_password(xenserver[TestData.username], xenserver[TestData.password])
    host_ip = ('https://' + list_hosts(cls.apiClient, clusterid=cls.testdata[TestData.clusterId2], name='XenServer-6.5-3')[0].ipaddress)
    cls.xen_session_2 = XenAPI.Session(host_ip)
    cls.xen_session_2.xenapi.login_with_password(xenserver[TestData.username], xenserver[TestData.password])
    cls.sf_client = sf_api.SolidFireAPI(endpoint_dict=cls.testdata[TestData.solidFire])
    cls.zone = get_zone(cls.apiClient, zone_id=cls.testdata[TestData.zoneId])
    cls.cluster_1 = list_clusters(cls.apiClient, id=cls.testdata[TestData.clusterId1])[0]
    cls.cluster_2 = list_clusters(cls.apiClient, id=cls.testdata[TestData.clusterId2])[0]
    cls.template = get_template(cls.apiClient, cls.zone.id, template_name=cls.testdata[TestData.templateName])
    cls.domain = get_domain(cls.apiClient, cls.testdata[TestData.domainId])
    cls.account = Account.create(cls.apiClient, cls.testdata['account'], admin=1)
    cls.user = User.create(cls.apiClient, cls.testdata['user'], account=cls.account.name, domainid=cls.domain.id)
    url = cls.testdata[TestData.url]
    api_url = (('http://' + url) + ':8080/client/api')
    userkeys = User.registerUserKeys(cls.apiClient, cls.user.id)
    cls.cs_api = SignedAPICall.CloudStack(api_url, userkeys.apikey, userkeys.secretkey)
    primarystorage = cls.testdata[TestData.primaryStorage]
    cls.primary_storage = StoragePool.create(cls.apiClient, primarystorage)
    cls.compute_offering_1 = ServiceOffering.create(cls.apiClient, cls.testdata[TestData.computeOffering1])
    cls.compute_offering_2 = ServiceOffering.create(cls.apiClient, cls.testdata[TestData.computeOffering2])
    cls.compute_offering_3 = ServiceOffering.create(cls.apiClient, cls.testdata[TestData.computeOffering3])
    cls.disk_offering_1 = DiskOffering.create(cls.apiClient, cls.testdata[TestData.diskOffering1])
    cls.disk_offering_2 = DiskOffering.create(cls.apiClient, cls.testdata[TestData.diskOffering2])
    cls._cleanup = [cls.compute_offering_1, cls.compute_offering_2, cls.compute_offering_3, cls.disk_offering_1, cls.disk_offering_2, cls.user, cls.account]
