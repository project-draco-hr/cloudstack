{
  SAML2LogoutAPIAuthenticatorCmd cmd=new SAML2LogoutAPIAuthenticatorCmd();
  Field apiServerField=SAML2LogoutAPIAuthenticatorCmd.class.getDeclaredField("_apiServer");
  apiServerField.setAccessible(true);
  apiServerField.set(cmd,apiServer);
  Field managerField=SAML2LogoutAPIAuthenticatorCmd.class.getDeclaredField("_samlAuthManager");
  managerField.setAccessible(true);
  managerField.set(cmd,samlAuthManager);
  Field configDaoField=SAML2LogoutAPIAuthenticatorCmd.class.getDeclaredField("_configDao");
  configDaoField.setAccessible(true);
  configDaoField.set(cmd,configDao);
  String spId="someSPID";
  String url="someUrl";
  X509Certificate cert=SAMLUtils.generateRandomX509Certificate();
  Mockito.when(samlAuthManager.getServiceProviderId()).thenReturn(spId);
  Mockito.when(samlAuthManager.getIdpSigningKey()).thenReturn(cert);
  Mockito.when(samlAuthManager.getIdpSingleLogOutUrl()).thenReturn(url);
  Mockito.when(samlAuthManager.getSpSingleLogOutUrl()).thenReturn(url);
  Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);
  Mockito.when(configDao.getValue(Mockito.anyString())).thenReturn("someString");
  cmd.authenticate("command",null,session,"random",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),resp);
  Mockito.verify(resp,Mockito.times(1)).sendRedirect(Mockito.anyString());
  Mockito.verify(session,Mockito.atLeastOnce()).getAttribute(Mockito.anyString());
}
