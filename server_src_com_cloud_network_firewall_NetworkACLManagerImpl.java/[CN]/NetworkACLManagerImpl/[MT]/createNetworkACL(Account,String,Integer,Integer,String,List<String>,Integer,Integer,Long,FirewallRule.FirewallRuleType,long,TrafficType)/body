{
  Network network=_networkMgr.getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException("Can't find network by id");
  }
  if (network.getVpcId() == null) {
    throw new UnsupportedOperationException("Network ACL rules are supported just for VPC networks");
  }
  Vpc vpc=_vpcMgr.getVpc(network.getVpcId());
  Account aclOwner=_accountMgr.getAccount(vpc.getAccountId());
  _accountMgr.checkAccess(caller,AccessType.UseNetwork,false,network);
  if (!_networkMgr.areServicesSupportedInNetwork(networkId,Service.Firewall)) {
    throw new InvalidParameterValueException("Service " + Service.Firewall + " is not supported in network "+ network);
  }
  if (!protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (icmpCode != null || icmpType != null)) {
    throw new InvalidParameterValueException("Can specify icmpCode and icmpType for ICMP protocol only");
  }
  if (protocol.equalsIgnoreCase(NetUtils.ICMP_PROTO) && (portStart != null || portEnd != null)) {
    throw new InvalidParameterValueException("Can't specify start/end port when protocol is ICMP");
  }
  validateNetworkACL(caller,network,portStart,portEnd,protocol);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  FirewallRuleVO newRule=new FirewallRuleVO(xId,null,portStart,portEnd,protocol.toLowerCase(),networkId,aclOwner.getAccountId(),aclOwner.getDomainId(),Purpose.NetworkACL,sourceCidrList,icmpCode,icmpType,relatedRuleId,trafficType);
  newRule.setType(type);
  newRule=_firewallDao.persist(newRule);
  if (type == FirewallRule.FirewallRuleType.User) {
    detectNetworkACLConflict(newRule);
  }
  if (!_firewallDao.setStateToAdd(newRule)) {
    throw new CloudRuntimeException("Unable to update the state to add for " + newRule);
  }
  UserContext.current().setEventDetails("Rule Id: " + newRule.getId());
  txn.commit();
  return newRule;
}
