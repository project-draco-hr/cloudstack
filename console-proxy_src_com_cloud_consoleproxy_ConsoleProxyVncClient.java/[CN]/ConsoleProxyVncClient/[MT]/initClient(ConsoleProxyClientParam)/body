{
  setClientParam(param);
  client=new VncClient(this);
  worker=new Thread(new Runnable(){
    public void run(){
      String tunnelUrl=getClientParam().getClientTunnelUrl();
      String tunnelSession=getClientParam().getClientTunnelSession();
      for (int i=0; i < 15; i++) {
        try {
          if (tunnelUrl != null && !tunnelUrl.isEmpty() && tunnelSession != null && !tunnelSession.isEmpty()) {
            URI uri=new URI(tunnelUrl);
            s_logger.info("Connect to VNC server via tunnel. url: " + tunnelUrl + ", session: "+ tunnelSession);
            client.connectTo(uri.getHost(),uri.getPort(),uri.getPath() + "?" + uri.getQuery(),tunnelSession,"https".equalsIgnoreCase(uri.getScheme()),getClientHostPassword());
          }
 else {
            s_logger.info("Connect to VNC server directly. host: " + getClientHostAddress() + ", port: "+ getClientHostPort());
            client.connectTo(getClientHostAddress(),getClientHostPort(),getClientHostPassword());
          }
        }
 catch (        UnknownHostException e) {
          s_logger.error("Unexpected exception (will retry until timeout)",e);
        }
catch (        IOException e) {
          s_logger.error("Unexpected exception (will retry until timeout) ",e);
        }
catch (        Throwable e) {
          s_logger.error("Unexpected exception (will retry until timeout) ",e);
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        if (tunnelUrl != null && !tunnelUrl.isEmpty() && tunnelSession != null && !tunnelSession.isEmpty()) {
          ConsoleProxyAuthenticationResult authResult=ConsoleProxy.reAuthenticationExternally(getClientParam());
          if (authResult != null && authResult.isSuccess()) {
            if (authResult.getTunnelUrl() != null && !authResult.getTunnelUrl().isEmpty() && authResult.getTunnelSession() != null && !authResult.getTunnelSession().isEmpty()) {
              tunnelUrl=authResult.getTunnelUrl();
              tunnelSession=authResult.getTunnelSession();
              s_logger.info("Reset XAPI session. url: " + tunnelUrl + ", session: "+ tunnelSession);
            }
          }
        }
      }
      s_logger.info("Receiver thread stopped.");
      workerDone=true;
      client.getClientListener().onClientClose();
    }
  }
);
  worker.setDaemon(true);
  worker.start();
}
