{
  setClientParam(param);
  final String tunnelUrl=param.getClientTunnelUrl();
  final String tunnelSession=param.getClientTunnelSession();
  client=new VncClient(this);
  worker=new Thread(new Runnable(){
    public void run(){
      long startTick=System.currentTimeMillis();
      while (System.currentTimeMillis() - startTick < 7000) {
        try {
          if (tunnelUrl != null && !tunnelUrl.isEmpty() && tunnelSession != null && !tunnelSession.isEmpty()) {
            try {
              URI uri=new URI(tunnelUrl);
              s_logger.info("Connect to VNC server via tunnel. url: " + tunnelUrl + ", session: "+ tunnelSession);
              client.connectTo(uri.getHost(),uri.getPort(),uri.getPath() + "?" + uri.getQuery(),tunnelSession,"https".equalsIgnoreCase(uri.getScheme()),getClientHostPassword());
            }
 catch (            URISyntaxException e) {
              s_logger.warn("Invalid tunnel URL " + tunnelUrl);
            }
          }
 else {
            s_logger.info("Connect to VNC server directly. host: " + getClientHostAddress() + ", port: "+ getClientHostPort());
            client.connectTo(getClientHostAddress(),getClientHostPort(),getClientHostPassword());
          }
        }
 catch (        UnknownHostException e) {
          s_logger.error("Unexpected exception: ",e);
        }
catch (        IOException e) {
          s_logger.error("Unexpected exception: ",e);
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
      workerDone=true;
    }
  }
);
  worker.setDaemon(true);
  worker.start();
}
