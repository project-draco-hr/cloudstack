{
  s_logger.info("Start to handle client session");
  viewer.setAjaxViewer(false);
  clientOuts.write(RFB_VERSION_STRING.getBytes("US-ASCII"));
  clientOuts.flush();
  byte[] clientVersion=new byte[12];
  clientIns.readFully(clientVersion);
  if (!RFB_VERSION_STRING.equals(new String(clientVersion,"US-ASCII"))) {
    throw new Exception("Bad client version");
  }
  byte[] serverSecurity=new byte[2];
  serverSecurity[0]=1;
  serverSecurity[1]=1;
  clientOuts.write(serverSecurity);
  clientOuts.flush();
  int clientSecurity=clientIns.read();
  if (clientSecurity != 1) {
    throw new Exception("Unsupported client security type " + clientSecurity);
  }
  byte[] serverSecResp=new byte[4];
  serverSecResp[0]=serverSecResp[1]=serverSecResp[2]=serverSecResp[3]=0;
  clientOuts.write(serverSecResp);
  clientOuts.flush();
  clientIns.read();
  s_logger.info("Sending ServerInit w=" + viewer.rfb.framebufferWidth + " h="+ viewer.rfb.framebufferHeight+ " bits="+ viewer.rfb.bitsPerPixel+ " depth="+ viewer.rfb.depth+ " name="+ viewer.rfb.desktopName);
  writeClientU16(viewer.rfb.framebufferWidth);
  writeClientU16(viewer.rfb.framebufferHeight);
  clientOuts.write(viewer.rfb.bitsPerPixel);
  clientOuts.write(viewer.rfb.depth);
  clientOuts.write(viewer.rfb.bigEndian ? 1 : 0);
  clientOuts.write(viewer.rfb.trueColour ? 1 : 0);
  writeClientU16(viewer.rfb.redMax);
  writeClientU16(viewer.rfb.greenMax);
  writeClientU16(viewer.rfb.blueMax);
  clientOuts.write(viewer.rfb.redShift);
  clientOuts.write(viewer.rfb.greenShift);
  clientOuts.write(viewer.rfb.blueShift);
  byte[] pad=new byte[3];
  clientOuts.write(pad);
  writeClientU32(viewer.rfb.desktopName.length());
  clientOuts.write(viewer.rfb.desktopName.getBytes("US-ASCII"));
  clientOuts.flush();
synchronized (viewer) {
    if (viewer.clientStream != null) {
      s_logger.info("Disconnecting client link stream " + viewer.clientStream.hashCode() + " from "+ viewer.clientStreamInfo);
      viewer.clientStream.close();
    }
    viewer.clientStream=clientOuts;
    viewer.clientStreamInfo=srcinfo;
    viewer.lastUsedTime=System.currentTimeMillis();
    s_logger.info("Setting client link stream " + viewer.clientStream.hashCode() + " from "+ srcinfo);
  }
  try {
    while (!viewer.isDropped()) {
      byte[] b=new byte[512];
      int nbytes=0;
      int msgType=clientIns.read();
      b[0]=(byte)msgType;
switch (msgType) {
case RfbProto.SetPixelFormat:
        clientIns.readFully(b,1,19);
      nbytes=20;
    if (s_logger.isDebugEnabled())     s_logger.debug("C->S RFB message SetPixelFormat, size=" + nbytes);
  break;
case RfbProto.SetEncodings:
clientIns.read();
b[1]=0;
int n=clientIns.readUnsignedShort();
if (n > (512 - 4) / 4) {
throw new Exception("Too many client encodings");
}
b[2]=(byte)((n >> 8) & 0xff);
b[3]=(byte)(n & 0xff);
clientIns.readFully(b,4,n * 4);
nbytes=n * 4 + 4;
if (s_logger.isDebugEnabled()) s_logger.debug("C->S RFB message SetEncodings, size=" + nbytes);
break;
case RfbProto.FramebufferUpdateRequest:
clientIns.readFully(b,1,9);
nbytes=10;
if (s_logger.isDebugEnabled()) {
int i=b[1];
int x=((0xff & b[2]) << 8) + b[3];
int y=((0xff & b[4]) << 8) + b[5];
int w=((0xff & b[6]) << 8) + b[7];
int h=((0xff & b[8]) << 8) + b[9];
s_logger.debug("C->S RFB message FramebufferUpdateRequest, size=" + nbytes + " x="+ x+ " y="+ y+ " w="+ w+ " h="+ h);
}
break;
case RfbProto.KeyboardEvent:
clientIns.readFully(b,1,7);
nbytes=8;
if (s_logger.isDebugEnabled()) s_logger.debug("C->S RFB message KeyboardEvent, size=" + nbytes);
break;
case RfbProto.PointerEvent:
clientIns.readFully(b,1,5);
nbytes=6;
if (s_logger.isDebugEnabled()) s_logger.debug("C->S RFB message PointerEvent, size=" + nbytes);
break;
case RfbProto.VMOpsClientCustom:
clientIns.read();
if (s_logger.isDebugEnabled()) s_logger.debug("C->S RFB message VMOpsClientCustom");
break;
default :
if (s_logger.isDebugEnabled()) s_logger.debug("C->S unknown message type: " + msgType + ", size="+ nbytes);
throw new Exception("Bad client event type: " + msgType);
}
writeServer(viewer,b,0,nbytes);
}
}
  finally {
viewer.lastUsedTime=System.currentTimeMillis();
}
}
