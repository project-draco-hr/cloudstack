def test_01_admin_project_creation(self):
    'Test create project as a domain admin and domain user\n        '
    configs = Configurations.list(self.apiclient, name='allow.user.create.projects')
    self.assertEqual(isinstance(configs, list), True, 'Check for a valid list configurations response')
    config = configs[0]
    self.assertEqual(config.value.lower(), 'true', "'allow.user.create.projects' should be true")
    project = Project.create(self.apiclient, self.services['project'], account=self.account.account.name, domainid=self.account.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    project = Project.create(self.apiclient, self.services['project'], account=self.user.account.name, domainid=self.user.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain user with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    return
