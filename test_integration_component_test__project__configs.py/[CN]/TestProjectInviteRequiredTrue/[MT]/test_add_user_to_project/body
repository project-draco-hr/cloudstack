@attr(configuration='project.invite.required')
@attr(tags=['advanced', 'basic', 'sg', 'eip', 'advancedns', 'selfservice'])
def test_add_user_to_project(self):
    "Add user to project when 'project.invite.required' is true"
    project = Project.create(self.apiclient, self.services['project'], account=self.account.name, domainid=self.account.domainid)
    self.cleanup.append(project)
    self.debug(('Created project with domain admin with ID: %s' % project.id))
    list_projects_reponse = Project.list(self.apiclient, id=project.id, listall=True)
    self.assertEqual(isinstance(list_projects_reponse, list), True, 'Check for a valid list projects response')
    list_project = list_projects_reponse[0]
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    self.assertEqual(project.name, list_project.name, 'Check project name from list response')
    self.debug(('Adding %s user to project: %s' % (self.user.name, project.name)))
    project.addAccount(self.apiclient, self.user.name, self.user.user[0].email)
    accounts_reponse = ProjectInvitation.list(self.apiclient, state='Pending', account=self.user.name, domainid=self.user.domainid)
    self.assertEqual(isinstance(accounts_reponse, list), True, 'Check for a valid list accounts response')
    self.assertNotEqual(len(list_projects_reponse), 0, 'Check list project response returns a valid project')
    account = accounts_reponse[0]
    self.assertEqual(account.state, 'Pending', 'Newly added user is not added as a regular user')
    return
