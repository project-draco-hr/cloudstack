@classmethod
def setUpClass(cls):
    cls.api_client = super(TestProjectInviteTimeout, cls).getClsTestClient().getApiClient()
    cls.services = Services().services
    cls.zone = get_zone(cls.api_client, cls.services)
    cls.services['mode'] = cls.zone.networktype
    cls.domain = get_domain(cls.api_client, cls.services)
    configs = Configurations.list(cls.api_client, name='project.invite.required')
    if (not isinstance(configs, list)):
        raise unittest.SkipTest("The 'project.invite.required' is not found in global configs")
    elif (configs[0].value.lower() != 'true'):
        raise unittest.SkipTest("'project.invite.required' should be true")
    configs = Configurations.list(cls.api_client, name='project.invite.timeout')
    if (not isinstance(configs, list)):
        raise unittest.SkipTest("The 'project.invite.timeout' is not found in global configs")
    elif (int(configs[0].value) != cls.services['configs']['project.invite.timeout']):
        raise unittest.SkipTest(("'project.invite.timeout' should be: %s " % cls.services['configs']['project.invite.timeout']))
    cls.config = configs[0]
    cls.account = Account.create(cls.api_client, cls.services['account'], admin=True, domainid=cls.domain.id)
    cls.user = Account.create(cls.api_client, cls.services['user'], admin=True, domainid=cls.domain.id)
    cls._cleanup = [cls.account, cls.user]
    return
