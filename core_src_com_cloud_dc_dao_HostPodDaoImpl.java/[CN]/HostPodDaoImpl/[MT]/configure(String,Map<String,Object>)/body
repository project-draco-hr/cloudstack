{
  super.configure(name,params);
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ArrayList<Long> podIds=new ArrayList<Long>();
    PreparedStatement pstmt=txn.prepareAutoCloseStatement("SELECT id FROM host_pod_ref FOR UPDATE");
    ResultSet rs=pstmt.executeQuery();
    int i=1;
    while (rs.next()) {
      podIds.add(rs.getLong(1));
    }
    PreparedStatement alter=txn.prepareAutoCloseStatement("ALTER TABLE host_pod_ref ADD COLUMN cidr_address VARCHAR(15) NOT NULL");
    try {
      int result=alter.executeUpdate();
      if (result == 0) {
        txn.rollback();
        return true;
      }
    }
 catch (    SQLException e) {
      txn.rollback();
      if (e.getMessage().contains("Duplicate column name")) {
        s_logger.info("host_pod_ref table is already up to date");
        return true;
      }
      s_logger.debug("Got this while updating",e);
      throw new ConfigurationException("Unable to update the host_pod_ref table ");
    }
    alter=txn.prepareStatement("ALTER TABLE host_pod_ref ADD COLUMN cidr_size bigint NOT NULL");
    try {
      int result=alter.executeUpdate();
      if (result == 0) {
        txn.rollback();
        throw new ConfigurationException("How can the first ALTER work but this doesn't?");
      }
    }
 catch (    SQLException e) {
      s_logger.warn("Couldn't alter the table: ",e);
      txn.rollback();
      throw new ConfigurationException("How can the first ALTER work but this doesn't? " + e.getMessage());
    }
    PreparedStatement netmask=txn.prepareAutoCloseStatement("SELECT value FROM configuration WHERE name='private.net.mask'");
    String privateNetmask;
    try {
      rs=netmask.executeQuery();
      if (!rs.next()) {
        txn.rollback();
        throw new ConfigurationException("There's no private.netmask?");
      }
      privateNetmask=rs.getString(1);
    }
 catch (    SQLException e) {
      s_logger.warn("Couldn't get private.netmask due to ",e);
      txn.rollback();
      throw new ConfigurationException("Unable to find the private.netmask");
    }
    for (    Long podId : podIds) {
      PreparedStatement ip=txn.prepareAutoCloseStatement("SELECT ip_address from op_dc_ip_address_alloc where pod_id=? LIMIT 0,1");
      ip.setLong(1,podId);
      String addr="192.168.1.1";
      try {
        rs=ip.executeQuery();
        if (rs.next()) {
          addr=rs.getString(1);
        }
 else {
          s_logger.debug("Default pod " + podId + " to 192.168.1.1 because it has no ip addresses allocated to it");
        }
      }
 catch (      SQLException e) {
        s_logger.warn("Didn't work for " + podId + " due to "+ e.getMessage(),e);
      }
      PreparedStatement update=txn.prepareAutoCloseStatement("UPDATE host_pod_ref set cidr_address=?, cidr_size=? WHERE id=?");
      update.setString(1,addr);
      update.setLong(2,NetUtils.getCidrSize(privateNetmask));
      update.setLong(3,podId);
      try {
        update.executeUpdate();
      }
 catch (      SQLException e) {
        s_logger.debug("Unable to update host_pod_ref table due to " + e.getMessage(),e);
      }
    }
    txn.commit();
  }
 catch (  SQLException e) {
    s_logger.error("Unable to upgrade the db due to " + e);
    txn.rollback();
    throw new ConfigurationException("Unable to upgrade the db due to " + e);
  }
  return true;
}
