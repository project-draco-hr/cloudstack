{
  Transaction txn=Transaction.currentTxn();
  txn.transitToUserManagedConnection(_concierge.conn());
  try {
    MockHost host=_mockHost.findByGuid(hostGuid);
    String cmdName=cmd.toString();
    int index=cmdName.lastIndexOf(".");
    if (index != -1) {
      cmdName=cmdName.substring(index + 1);
    }
    MockConfigurationVO config=_mockConfigDao.findByNameBottomUP(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),cmdName);
    SimulatorInfo info=new SimulatorInfo();
    info.setHostUuid(hostGuid);
    if (config != null) {
      Map<String,String> configParameters=config.getParameters();
      for (      Map.Entry<String,String> entry : configParameters.entrySet()) {
        if (entry.getKey().equalsIgnoreCase("enabled")) {
          info.setEnabled(Boolean.parseBoolean(entry.getValue()));
        }
 else         if (entry.getKey().equalsIgnoreCase("timeout")) {
          try {
            info.setTimeout(Integer.valueOf(entry.getValue()));
          }
 catch (          NumberFormatException e) {
            s_logger.debug("invalid timeout parameter: " + e.toString());
          }
        }
 else         if (entry.getKey().equalsIgnoreCase("wait")) {
          try {
            int wait=Integer.valueOf(entry.getValue());
            Thread.sleep(wait * 1000);
          }
 catch (          NumberFormatException e) {
            s_logger.debug("invalid timeout parameter: " + e.toString());
          }
catch (          InterruptedException e) {
            s_logger.debug("thread is interrupted: " + e.toString());
          }
        }
      }
    }
    if (cmd instanceof GetHostStatsCommand) {
      return _mockAgentMgr.getHostStatistic((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return _mockAgentMgr.checkHealth((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return _mockAgentMgr.pingTest((PingTestCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return _mockVmMgr.Migrate((MigrateCommand)cmd,info);
    }
 else     if (cmd instanceof StartCommand) {
      return _mockVmMgr.startVM((StartCommand)cmd,info);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return _mockVmMgr.checkSshCommand((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof SetStaticNatRulesCommand) {
      return _mockVmMgr.SetStaticNatRules((SetStaticNatRulesCommand)cmd);
    }
 else     if (cmd instanceof SetPortForwardingRulesCommand) {
      return _mockVmMgr.SetPortForwardingRules((SetPortForwardingRulesCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return _mockVmMgr.getNetworkUsage((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof IpAssocCommand) {
      return _mockVmMgr.IpAssoc((IpAssocCommand)cmd);
    }
 else     if (cmd instanceof LoadBalancerConfigCommand) {
      return _mockVmMgr.LoadBalancerConfig((LoadBalancerConfigCommand)cmd);
    }
 else     if (cmd instanceof DhcpEntryCommand) {
      return _mockVmMgr.AddDhcpEntry((DhcpEntryCommand)cmd);
    }
 else     if (cmd instanceof VmDataCommand) {
      return _mockVmMgr.setVmData((VmDataCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return _mockVmMgr.CleanupNetworkRules((CleanupNetworkRulesCmd)cmd,info);
    }
 else     if (cmd instanceof StopCommand) {
      return _mockVmMgr.stopVM((StopCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return _mockVmMgr.rebootVM((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return _mockVmMgr.getVncPort((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return _mockVmMgr.CheckConsoleProxyLoad((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return _mockVmMgr.WatchConsoleProxyLoad((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof SecurityIngressRulesCmd) {
      return _mockVmMgr.AddSecurityIngressRules((SecurityIngressRulesCmd)cmd,info);
    }
 else     if (cmd instanceof SavePasswordCommand) {
      return _mockVmMgr.SavePassword((SavePasswordCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return _mockStorageMgr.primaryStorageDownload((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return _mockStorageMgr.createVolume((CreateCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return _mockStorageMgr.AttachVolume((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return _mockStorageMgr.AttachIso((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return _mockStorageMgr.DeleteStoragePool((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return _mockStorageMgr.ModifyStoragePool((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return _mockStorageMgr.CreateStoragePool((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecStorageSetupCommand) {
      return _mockStorageMgr.SecStorageSetup((SecStorageSetupCommand)cmd);
    }
 else     if (cmd instanceof ListTemplateCommand) {
      return _mockStorageMgr.ListTemplates((ListTemplateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return _mockStorageMgr.Destroy((DestroyCommand)cmd);
    }
 else     if (cmd instanceof DownloadProgressCommand) {
      return _mockStorageMgr.DownloadProcess((DownloadProgressCommand)cmd);
    }
 else     if (cmd instanceof DownloadCommand) {
      return _mockStorageMgr.Download((DownloadCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return _mockStorageMgr.GetStorageStats((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return _mockStorageMgr.ManageSnapshot((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return _mockStorageMgr.BackupSnapshot((BackupSnapshotCommand)cmd,info);
    }
 else     if (cmd instanceof DeleteSnapshotBackupCommand) {
      return _mockStorageMgr.DeleteSnapshotBackup((DeleteSnapshotBackupCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return _mockStorageMgr.CreateVolumeFromSnapshot((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteTemplateCommand) {
      return _mockStorageMgr.DeleteTemplate((DeleteTemplateCommand)cmd);
    }
 else     if (cmd instanceof SecStorageVMSetupCommand) {
      return _mockStorageMgr.SecStorageVMSetup((SecStorageVMSetupCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return _mockStorageMgr.CreatePrivateTemplateFromSnapshot((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ComputeChecksumCommand) {
      return _mockStorageMgr.ComputeChecksum((ComputeChecksumCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return _mockStorageMgr.CreatePrivateTemplateFromVolume((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return _mockAgentMgr.MaintainCommand((MaintainCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      return _mockVmMgr.getVmStats((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof GetDomRVersionCmd) {
      return _mockVmMgr.getDomRVersion((GetDomRVersionCmd)cmd);
    }
 else     if (cmd instanceof ClusterSyncCommand) {
      return new Answer(cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      return _mockStorageMgr.CopyVolume((CopyVolumeCommand)cmd);
    }
 else {
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  Exception e) {
    s_logger.debug("Failed execute cmd: " + e.toString());
    txn.rollback();
    return new Answer(cmd,false,e.toString());
  }
 finally {
    txn.transitToAutoManagedConnection(Transaction.CLOUD_DB);
  }
}
