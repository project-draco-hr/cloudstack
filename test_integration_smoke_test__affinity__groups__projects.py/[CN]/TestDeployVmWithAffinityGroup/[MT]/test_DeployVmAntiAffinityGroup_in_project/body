@attr(tags=['basic', 'advanced', 'multihost'], required_hardware='false')
def test_DeployVmAntiAffinityGroup_in_project(self):
    '\n        test DeployVM in anti-affinity groups for project\n\n        deploy VM1 and VM2 in the same host-anti-affinity groups\n        Verify that the vms are deployed on separate hosts\n        '
    vm1 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, projectid=self.project.id, serviceofferingid=self.service_offering.id, affinitygroupnames=[self.ag.name])
    list_vm1 = list_virtual_machines(self.apiclient, id=vm1.id)
    self.assertEqual(isinstance(list_vm1, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_vm1), 0, 'Check VM available in List Virtual Machines')
    vm1_response = list_vm1[0]
    self.assertEqual(vm1_response.state, 'Running', msg='VM is not in Running state')
    self.assertEqual(vm1_response.projectid, self.project.id, msg='VM1 is not deployed in project')
    host_of_vm1 = vm1_response.hostid
    vm2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], templateid=self.template.id, projectid=self.project.id, serviceofferingid=self.service_offering.id, affinitygroupnames=[self.ag.name])
    list_vm2 = list_virtual_machines(self.apiclient, id=vm2.id)
    self.assertEqual(isinstance(list_vm2, list), True, 'Check list response returns a valid list')
    self.assertNotEqual(len(list_vm2), 0, 'Check VM available in List Virtual Machines')
    vm2_response = list_vm2[0]
    self.assertEqual(vm2_response.state, 'Running', msg='VM is not in Running state')
    self.assertEqual(vm2_response.projectid, self.project.id, msg='VM2 is not deployed in project')
    host_of_vm2 = vm2_response.hostid
    self.assertNotEqual(host_of_vm1, host_of_vm2, msg=('Both VMs of affinity group %s are on the same host' % self.ag.name))
