@attr(tags=['advanced', 'basic'], required_hardware='true')
def test_01_list_templates_pagination(self):
    '\n        @Desc: Test to List Templates pagination\n        @steps:\n        Step1: Listing all the Templates for a user\n        Step2: Verifying that no Templates are listed\n        Step3: Creating (page size + 1) number of Templates\n        Step4: Listing all the Templates again for a user\n        Step5: Verifying that list size is (page size + 1)\n        Step6: Listing all the Templates in page1\n        Step7: Verifying that list size is (page size)\n        Step8: Listing all the Templates in page2\n        Step9: Verifying that list size is 1\n        Step10: Listing the template by Id\n        Step11: Verifying if the template is downloaded and ready.\n                If yes the continuing\n                If not waiting and checking for template to be ready till timeout\n        Step12: Deleting the Template present in page 2\n        Step13: Listing all the Templates in page2\n        Step14: Verifying that no Templates are listed\n        '
    list_templates_before = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    self.assertIsNone(list_templates_before, 'Templates listed for newly created User')
    self.services['templateregister']['ostype'] = self.services['ostype']
    for i in range(0, (self.services['pagesize'] + 1)):
        template_created = Template.register(self.userapiclient, self.services['templateregister'], self.zone.id, hypervisor=self.hypervisor)
        self.assertIsNotNone(template_created, 'Template creation failed')
        if (i < self.services['pagesize']):
            self.cleanup.append(template_created)
    list_templates_after = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    status = validateList(list_templates_after)
    self.assertEquals(PASS, status[0], 'Templates creation failed')
    self.assertEquals((self.services['pagesize'] + 1), len(list_templates_after), 'Failed to create pagesize + 1 number of Templates')
    list_templates_page1 = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'], page=1, pagesize=self.services['pagesize'])
    status = validateList(list_templates_page1)
    self.assertEquals(PASS, status[0], 'Failed to list Templates in page 1')
    self.assertEquals(self.services['pagesize'], len(list_templates_page1), 'Size of Templates in page 1 is not matching')
    list_templates_page2 = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'], page=2, pagesize=self.services['pagesize'])
    status = validateList(list_templates_page2)
    self.assertEquals(PASS, status[0], 'Failed to list Templates in page 2')
    self.assertEquals(1, len(list_templates_page2), 'Size of Templates in page 2 is not matching')
    template_ready = False
    count = 0
    while (template_ready is False):
        list_template = Template.list(self.userapiclient, id=template_created.id, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
        status = validateList(list_template)
        self.assertEquals(PASS, status[0], 'Failed to list Templates by Id')
        if (list_template[0].isready is True):
            template_ready = True
        elif (str(list_template[0].status) == 'Error'):
            self.fail('Created Template is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before Template came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    Template.delete(template_created, self.userapiclient)
    list_templates_page2 = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'], page=2, pagesize=self.services['pagesize'])
    self.assertIsNone(list_templates_page2, 'Templates not deleted from page 2')
    del self.services['templateregister']['ostype']
    return
