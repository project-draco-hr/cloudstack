@attr(tags=['advanced', 'basic', 'provisioning'])
def test_02_download_template(self):
    '\n        @Desc: Test to Download Template\n        @steps:\n        Step1: Listing all the Templates for a user\n        Step2: Verifying that no Templates are listed\n        Step3: Creating a Templates\n        Step4: Listing all the Templates again for a user\n        Step5: Verifying that list size is 1\n        Step6: Verifying if the template is in ready state.\n                If yes the continuing\n                If not waiting and checking for template to be ready till timeout\n        Step7: Downloading the template (Extract)\n        Step8: Verifying that Template is downloaded\n        '
    list_templates_before = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    self.assertIsNone(list_templates_before, 'Templates listed for newly created User')
    self.services['templateregister']['ostype'] = self.services['ostype']
    self.services['templateregister']['isextractable'] = True
    template_created = Template.register(self.userapiclient, self.services['templateregister'], self.zone.id, hypervisor=self.hypervisor)
    self.assertIsNotNone(template_created, 'Template creation failed')
    self.cleanup.append(template_created)
    list_templates_after = Template.list(self.userapiclient, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
    status = validateList(list_templates_after)
    self.assertEquals(PASS, status[0], 'Templates creation failed')
    self.assertEquals(1, len(list_templates_after), 'Failed to create a Template')
    template_ready = False
    count = 0
    while (template_ready is False):
        list_template = Template.list(self.userapiclient, id=template_created.id, listall=self.services['listall'], templatefilter=self.services['templatefilter'])
        status = validateList(list_template)
        self.assertEquals(PASS, status[0], 'Failed to list Templates by Id')
        if (list_template[0].isready is True):
            template_ready = True
        elif (str(list_template[0].status) == 'Error'):
            self.fail('Created Template is in Errored state')
            break
        elif (count > 10):
            self.fail('Timed out before Template came into ready state')
            break
        else:
            time.sleep(self.services['sleep'])
            count = (count + 1)
    download_template = Template.extract(self.userapiclient, template_created.id, mode='HTTP_DOWNLOAD', zoneid=self.zone.id)
    self.assertIsNotNone(download_template, 'Download Template failed')
    self.assertEquals('DOWNLOAD_URL_CREATED', download_template.state, 'Download URL not created for Template')
    self.assertIsNotNone(download_template.url, 'Download URL not created for Template')
    self.assertEquals(template_created.id, download_template.id, 'Download Template details are not same as Template created')
    del self.services['templateregister']['ostype']
    del self.services['templateregister']['isextractable']
    return
