{
  Transaction txn=Transaction.open("runRemoveFromGlobalLoadBalancerRuleTest");
  GlobalLoadBalancingRulesServiceImpl gslbServiceImpl=new GlobalLoadBalancingRulesServiceImpl();
  gslbServiceImpl._accountMgr=Mockito.mock(AccountManager.class);
  gslbServiceImpl._gslbRuleDao=Mockito.mock(GlobalLoadBalancerRuleDao.class);
  gslbServiceImpl._gslbLbMapDao=Mockito.mock(GlobalLoadBalancerLbRuleMapDao.class);
  gslbServiceImpl._regionDao=Mockito.mock(RegionDao.class);
  gslbServiceImpl._rulesMgr=Mockito.mock(RulesManager.class);
  gslbServiceImpl._lbDao=Mockito.mock(LoadBalancerDao.class);
  gslbServiceImpl._networkDao=Mockito.mock(NetworkDao.class);
  gslbServiceImpl._globalConfigDao=Mockito.mock(ConfigurationDao.class);
  gslbServiceImpl._ipAddressDao=Mockito.mock(IPAddressDao.class);
  gslbServiceImpl._agentMgr=Mockito.mock(AgentManager.class);
  gslbServiceImpl._gslbProvider=Mockito.mock(GslbServiceProvider.class);
  RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd=new RemoveFromGlobalLoadBalancerRuleCmdExtn();
  Class<?> _class=removeFromGslbCmd.getClass().getSuperclass();
  Account account=(Account)new AccountVO("testaccount",1,"networkdomain",(short)0,UUID.randomUUID().toString());
  when(gslbServiceImpl._accountMgr.getAccount(anyLong())).thenReturn(account);
  UserContext.registerContext(1,account,null,true);
  Field gslbRuleId=_class.getDeclaredField("id");
  gslbRuleId.setAccessible(true);
  gslbRuleId.set(removeFromGslbCmd,new Long(1));
  GlobalLoadBalancerRuleVO gslbRule=new GlobalLoadBalancerRuleVO("test-gslb-rule","test-gslb-rule","test-domain","roundrobin","sourceip","tcp",1,1,1,GlobalLoadBalancerRule.State.Active);
  when(gslbServiceImpl._gslbRuleDao.findById(new Long(1))).thenReturn(gslbRule);
  LoadBalancerVO lbRule=new LoadBalancerVO();
  lbRule.setState(FirewallRule.State.Active);
  Field networkIdField=LoadBalancerVO.class.getSuperclass().getDeclaredField("networkId");
  networkIdField.setAccessible(true);
  networkIdField.set(lbRule,new Long(1));
  Field idField=LoadBalancerVO.class.getSuperclass().getDeclaredField("id");
  idField.setAccessible(true);
  idField.set(lbRule,new Long(1));
  Field sourceIpAddressId=LoadBalancerVO.class.getSuperclass().getDeclaredField("sourceIpAddressId");
  sourceIpAddressId.setAccessible(true);
  sourceIpAddressId.set(lbRule,new Long(1));
  when(gslbServiceImpl._lbDao.findById(new Long(1))).thenReturn(lbRule);
  Field lbRules=_class.getDeclaredField("loadBalancerRulesIds");
  lbRules.setAccessible(true);
  List<Long> lbRuleIds=new ArrayList<Long>();
  lbRuleIds.add(new Long(1));
  lbRules.set(removeFromGslbCmd,lbRuleIds);
  NetworkVO networkVo=new NetworkVO();
  Field dcID=NetworkVO.class.getDeclaredField("dataCenterId");
  dcID.setAccessible(true);
  dcID.set(networkVo,new Long(1));
  Field phyNetworkId=NetworkVO.class.getDeclaredField("physicalNetworkId");
  phyNetworkId.setAccessible(true);
  phyNetworkId.set(networkVo,new Long(200));
  when(gslbServiceImpl._networkDao.findById(new Long(1))).thenReturn(networkVo);
  GlobalLoadBalancerLbRuleMapVO gslbLbMap=new GlobalLoadBalancerLbRuleMapVO(1,1);
  List<GlobalLoadBalancerLbRuleMapVO> listSslbLbMap=new ArrayList<GlobalLoadBalancerLbRuleMapVO>();
  listSslbLbMap.add(gslbLbMap);
  when(gslbServiceImpl._gslbLbMapDao.listByGslbRuleId(new Long(1))).thenReturn(listSslbLbMap);
  when(gslbServiceImpl._gslbLbMapDao.findByGslbRuleIdAndLbRuleId(new Long(1),new Long(1))).thenReturn(gslbLbMap);
  IPAddressVO ip=new IPAddressVO(new Ip("10.1.1.1"),1,1,1,true);
  when(gslbServiceImpl._ipAddressDao.findById(new Long(1))).thenReturn(ip);
  gslbServiceImpl.removeFromGlobalLoadBalancerRule(removeFromGslbCmd);
}
