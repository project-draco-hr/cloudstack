{
  Logger logger=Logger.getLogger(RFATestCase.class);
  Logger root=Logger.getRootLogger();
  PatternLayout layout=new PatternLayout("%m\n");
  org.apache.log4j.RollingFileAppender rfa=new org.apache.log4j.RollingFileAppender();
  rfa.setName("ROLLING");
  rfa.setLayout(layout);
  rfa.setAppend(false);
  rfa.setMaxBackupIndex(10);
  rfa.setMaximumFileSize(100);
  rfa.setFile("output/RFA-dot1.log");
  rfa.activateOptions();
  root.addAppender(rfa);
  new File("output/RFA-dot1.log.2").delete();
  FileWriter dot1=new FileWriter("output/RFA-dot1.log.1");
  dot1.write("Locked file");
  FileWriter dot5=new FileWriter("output/RFA-dot1.log.5");
  dot5.write("Unlocked file");
  dot5.close();
  for (int i=0; i < 15; i++) {
    if (i < 10) {
      logger.debug("Hello---" + i);
    }
 else     if (i < 100) {
      logger.debug("Hello--" + i);
    }
  }
  dot1.close();
  for (int i=15; i < 25; i++) {
    logger.debug("Hello--" + i);
  }
  rfa.close();
  assertTrue(new File("output/RFA-dot1.log.7").exists());
  if (new File("output/RFA-dot1.log.2").length() < 15) {
    assertEquals(50,new File("output/RFA-dot1.log").length());
    assertEquals(200,new File("output/RFA-dot1.log.1").length());
  }
 else {
    assertTrue(new File("output/RFA-dot1.log").exists());
    assertTrue(new File("output/RFA-dot1.log.1").exists());
    assertTrue(new File("output/RFA-dot1.log.2").exists());
    assertTrue(new File("output/RFA-dot1.log.3").exists());
    assertFalse(new File("output/RFA-dot1.log.4").exists());
  }
}
