def forward_vpc(self, rule):
    fw_prerout_rule = ('-A PREROUTING -d %s/32 -i %s' % (rule['public_ip'], self.getDeviceByIp(rule['public_ip'])))
    if (not (rule['protocol'] == 'any')):
        fw_prerout_rule += (' -m %s -p %s' % (rule['protocol'], rule['protocol']))
    if (not (rule['public_ports'] == 'any')):
        fw_prerout_rule += (' --dport %s' % self.portsToString(rule['public_ports'], ':'))
    fw_prerout_rule += (' -j DNAT --to-destination %s' % rule['internal_ip'])
    if (not (rule['internal_ports'] == 'any')):
        fw_prerout_rule += (':' + self.portsToString(rule['internal_ports'], '-'))
    fw_postrout_rule = ('-A POSTROUTING -d %s/32 ' % rule['public_ip'])
    if (not (rule['protocol'] == 'any')):
        fw_postrout_rule += (' -m %s -p %s' % (rule['protocol'], rule['protocol']))
    if (not (rule['public_ports'] == 'any')):
        fw_postrout_rule += (' --dport %s' % self.portsToString(rule['public_ports'], ':'))
    fw_postrout_rule += (' -j SNAT --to-source %s' % rule['internal_ip'])
    if (not (rule['internal_ports'] == 'any')):
        fw_postrout_rule += (':' + self.portsToString(rule['internal_ports'], '-'))
    fw_output_rule = ('-A OUTPUT -d %s/32' % rule['public_ip'])
    if (not (rule['protocol'] == 'any')):
        fw_output_rule += (' -m %s -p %s' % (rule['protocol'], rule['protocol']))
    if (not (rule['public_ports'] == 'any')):
        fw_output_rule += (' --dport %s' % self.portsToString(rule['public_ports'], ':'))
    fw_output_rule += (' -j DNAT --to-destination %s' % rule['internal_ip'])
    if (not (rule['internal_ports'] == 'any')):
        fw_output_rule += (':' + self.portsToString(rule['internal_ports'], '-'))
    self.fw.append(['nat', '', fw_prerout_rule])
    self.fw.append(['nat', '', fw_postrout_rule])
    self.fw.append(['nat', '', fw_output_rule])
