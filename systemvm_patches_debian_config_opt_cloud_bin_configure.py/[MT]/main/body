def main(argv):
    process_file = argv[1]
    if (process_file is None):
        process_file = 'cmd_line.json'
    iptables_change = False
    config = CsConfig()
    logging.basicConfig(filename=config.get_logger(), level=config.get_level(), format=config.get_format())
    config.set_address()
    logging.debug('Configuring ip addresses')
    config.address().compare()
    config.address().process()
    if (process_file in ['cmd_line.json', 'guest_network.json']):
        logging.debug('Configuring Guest Network')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'vm_password.json']):
        logging.debug('Configuring vmpassword')
        password = CsPassword('vmpassword', config)
        password.process()
    if (process_file in ['cmd_line.json', 'vm_metadata.json']):
        logging.debug('Configuring vmdata')
        metadata = CsVmMetadata('vmdata', config)
        metadata.process()
    if (process_file in ['cmd_line.json', 'network_acl.json']):
        logging.debug('Configuring networkacl')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'firewall_rules.json']):
        logging.debug('Configuring firewall rules')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'forwarding_rules.json', 'staticnat_rules.json']):
        logging.debug('Configuring PF rules')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'site_2_site_vpn.json']):
        logging.debug('Configuring s2s vpn')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'remote_access_vpn.json']):
        logging.debug('Configuring remote access vpn')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'vpn_user_list.json']):
        logging.debug('Configuring vpn users list')
        vpnuser = CsVpnUser('vpnuserlist', config)
        vpnuser.process()
    if (process_file in ['cmd_line.json', 'vm_dhcp_entry.json', 'dhcp.json']):
        logging.debug('Configuring dhcp entry')
        dhcp = CsDhcp('dhcpentry', config)
        dhcp.process()
    if (process_file in ['cmd_line.json', 'load_balancer.json']):
        logging.debug('Configuring load balancer')
        iptables_change = True
    if (process_file in ['cmd_line.json', 'monitor_service.json']):
        logging.debug('Configuring monitor service')
        mon = CsMonitor('monitorservice', config)
        mon.process()
    if iptables_change:
        acls = CsAcl('networkacl', config)
        acls.process()
        acls = CsAcl('firewallrules', config)
        acls.process()
        fwd = CsForwardingRules('forwardingrules', config)
        fwd.process()
        vpns = CsSite2SiteVpn('site2sitevpn', config)
        vpns.process()
        rvpn = CsRemoteAccessVpn('remoteaccessvpn', config)
        rvpn.process()
        lb = CsLoadBalancer('loadbalancer', config)
        lb.process()
        logging.debug('Configuring iptables rules')
        nf = CsNetfilters(False)
        nf.compare(config.get_fw())
        logging.debug('Configuring iptables rules done ...saving rules')
        CsHelper.save_iptables('iptables-save', '/etc/iptables/router_rules.v4')
        CsHelper.save_iptables('ip6tables-save', '/etc/iptables/router_rules.v6')
    red = CsRedundant(config)
    red.set()
    if (process_file in ['cmd_line.json', 'static_routes.json']):
        logging.debug('Configuring static routes')
        static_routes = CsStaticRoutes('staticroutes', config)
        static_routes.process()
