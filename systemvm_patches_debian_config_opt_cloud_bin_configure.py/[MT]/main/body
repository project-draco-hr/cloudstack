def main(argv):
    logging.basicConfig(filename='/var/log/cloud.log', level=logging.DEBUG, format='%(asctime)s %(message)s')
    cmdLine = dataBag()
    cmdLine.setKey('cmd_line')
    cmdLine.load()
    cmdLineData = cmdLine.getDataBag()
    db = dataBag()
    db.setKey('ips')
    db.load()
    dbag = db.getDataBag()
    if (not (cmdLineData['cmd_line']['type'] in {'vpcrouter', 'router'})):
        logging.info(('Not equipped to handle %s yet' % cmdLineData['cmd_line']['type']))
        return
    if (cmdLineData['cmd_line']['type'] == 'vpcrouter'):
        controlIp = dict()
        controlIp['add'] = True
        controlIp['public_ip'] = cmdLineData['cmd_line']['eth0ip']
        controlIp['netmask'] = cmdLineData['cmd_line']['eth0mask']
        controlIp['nic_dev_id'] = 0
        controlIp['nw_type'] = 'control'
        merge(dbag, controlIp)
    for dev in CsDevice('').list():
        ip = CsIP(dev)
        ip.compare(dbag)
    for dev in dbag:
        if (dev == 'id'):
            continue
        ip = CsIP(dev)
        for address in dbag[dev]:
            if (not (address['nw_type'] == 'control')):
                CsRoute(dev).add(address)
            ip.setAddress(address)
            if ip.configured():
                logging.info('Address %s on device %s already configured', ip.ip(), dev)
                ip.post_configure()
            else:
                logging.info('Address %s on device %s not configured', ip.ip(), dev)
                if CsDevice(dev).waitfordevice():
                    ip.configure()
