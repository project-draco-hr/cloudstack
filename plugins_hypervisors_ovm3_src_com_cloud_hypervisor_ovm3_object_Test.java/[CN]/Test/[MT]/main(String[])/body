{
  boolean CheckNet=false;
  boolean CheckNtp=false;
  boolean CheckLinux=false;
  boolean CheckCommon=false;
  boolean CheckCluster=false;
  boolean CheckRepo=false;
  boolean CheckPool=false;
  boolean CheckOcfs2=false;
  boolean CheckNFSPlugin=false;
  boolean CheckXen=false;
  boolean CheckVnc=false;
  boolean CheckCombine=false;
  boolean CheckVmInfo=false;
  boolean CheckUuid=false;
  boolean CheckBridge=false;
  boolean CheckFs=false;
  boolean CheckPlugin=true;
  try {
    Connection c;
    Socket client;
    String hostname="ovm-2";
    try {
      client=new Socket(hostname,8899);
    }
 catch (    Exception e) {
      hostname="localhost";
      client=new Socket(hostname,8899);
    }
    if (!client.isConnected()) {
      System.out.println("No connection");
    }
 else {
      System.out.println("connected to: " + hostname);
    }
    client.close();
    try {
      System.out.println("trying to connect to " + hostname);
      c=new Connection(hostname,8899,"oracle","test123");
    }
 catch (    Exception e) {
      throw new Exception("Unable to connect to " + hostname + " port seemed to listen...");
    }
    if (CheckPlugin) {
      CloudStackPlugin csp=new CloudStackPlugin(c);
      try {
        System.out.println(csp.ovsUploadSshKey("test","testing 123"));
        String ip="169.254.1.202";
        String domain="i-2-29-VM";
        String pubnic="bond0";
        System.out.println("vnc Port: " + csp.getVncPort(domain));
        Map<String,String> stats=csp.ovsDomUStats(domain);
        Thread.sleep(1000);
        Map<String,String> stats2=csp.ovsDomUStats(domain);
        for (        final Entry<String,String> stat : stats2.entrySet()) {
          String key=stat.getKey();
          Double delta=Double.parseDouble(stat.getValue()) - Double.parseDouble(stats.get(key));
          System.out.println(stat.getKey() + ": " + delta);
        }
        Integer cpus=Integer.parseInt(stats.get("vcpus"));
        Double d_cpu=Double.parseDouble(stats.get("cputime")) - Double.parseDouble(stats2.get("cputime"));
        Double d_time=Double.parseDouble(stats.get("uptime")) - Double.parseDouble(stats2.get("uptime"));
        Double cpupct=d_cpu / d_time * 100 * cpus;
        System.out.println(cpupct);
      }
 catch (      Exception e) {
        System.out.println("nooooo!!!" + e.getMessage());
        throw new Exception(e.getMessage());
      }
    }
    if (CheckFs) {
      Linux host=new Linux(c);
      Map<String,Linux.FileSystem> fsList=host.getFileSystemList("nfs");
      Linux.FileSystem fs=fsList.get("nfs");
      System.out.println(fs + " " + fsList);
    }
    if (CheckUuid) {
      System.out.println(UUID.nameUUIDFromBytes(("test@test-test").getBytes()));
    }
    if (CheckNet) {
      Network net=new Network(c);
      System.out.println(net.getInterfaceByName("c0a80100"));
      System.out.println(net.getInterfaceByName("c0a80100").getAddress());
      System.out.println(net.getInterfaceByIp("192.168.1.65").getName());
    }
    if (CheckCommon == true) {
      Common Com=new Common(c);
      String x=Com.getApiVersion();
      System.out.println("Api Version: " + x);
      String y=Com.sleep(1);
      System.out.println("Sleep: " + y);
      String msg=Com.echo("testing 1 2 3");
      System.out.println("Echo: " + msg);
    }
    if (CheckLinux == true) {
      Linux Host=new Linux(c);
      Host.discoverHardware();
      Host.discoverServer();
      System.out.println("hwVMM: " + Host.hwVMM.toString());
      System.out.println("hwSystem: " + Host.hwSystem.toString());
      System.out.println("Cap: " + Host.Capabilities.toString());
      System.out.println("VMM: " + Host.VMM.toString());
      System.out.println("NTP: " + Host.NTP.toString());
      System.out.println("DT: " + Host.DateTime.toString());
      System.out.println("Gen: " + Host.Generic.toString());
      System.out.println("time; " + Host.getDateTime());
      System.out.println("update time to 1999: " + Host.setDateTime(1999,12,31,12,0,0));
      System.out.println("lastboot: " + Host.getLastBootTime());
      System.out.println("time: " + Host.localTime);
      Calendar now=Calendar.getInstance();
      int year=now.get(Calendar.YEAR);
      int month=now.get(Calendar.MONTH);
      int day=now.get(Calendar.DAY_OF_MONTH);
      int hour=now.get(Calendar.HOUR_OF_DAY);
      int minute=now.get(Calendar.MINUTE);
      int second=now.get(Calendar.SECOND);
      int millis=now.get(Calendar.MILLISECOND);
      System.out.println("set time to now: " + Host.setDateTime(year,month,day,hour,minute,second));
      System.out.println("lastboot: " + Host.getLastBootTime());
      System.out.println("time: " + Host.localTime);
      System.out.println("update password: " + Host.updateAgentPassword("oracle","test123"));
      System.out.println("set time zone: " + Host.setTimeZone("Europe/London",false));
      System.out.println("time zone: " + Host.getTimeZone() + ", "+ Host.timeZone+ ", "+ Host.timeUTC);
      System.out.println("set time zone: " + Host.setTimeZone("Europe/Amsterdam",true));
      System.out.println("time zone: " + Host.getTimeZone() + ", "+ Host.timeZone+ ", "+ Host.timeUTC);
    }
    if (CheckNtp == true) {
      Ntp ntp=new Ntp(c);
      ntp.getDetails();
      System.out.println("ntp isServer: " + ntp.isServer());
      System.out.println("ntp isRunning: " + ntp.isRunning());
      System.out.println("ntp Servers: " + ntp.servers());
      ntp.addServer("192.168.1.1");
      ntp.addServer("192.168.1.61");
      System.out.println("ntp set: " + ntp.setNtp(true));
      System.out.println("ntp enable: " + ntp.enableNtp());
      ntp.getDetails();
      System.out.println("ntp isServer: " + ntp.isServer());
      System.out.println("ntp isRunning: " + ntp.isRunning());
      System.out.println("ntp Servers: " + ntp.servers());
      System.out.println("ntp disable: " + ntp.disableNtp());
      System.out.println("ntp reset: " + ntp.setNtp("",false));
    }
    if (CheckNFSPlugin == true) {
      Linux lin=new Linux(c);
      lin.discoverServer();
      System.out.println(lin.getCapabilities());
      Map<String,FileSystem> fsList=lin.getFileSystemList("nfs");
      System.out.println(fsList);
      System.out.println(BigInteger.valueOf(lin.getMemory().longValue()));
      System.out.println(lin.getFreeMemory());
      BigInteger totalmem=BigInteger.valueOf(lin.getMemory().longValue());
      BigInteger freemem=BigInteger.valueOf(lin.getFreeMemory().longValue());
      System.out.println(totalmem.subtract(freemem));
    }
    if (CheckRepo == true) {
      Repository repo=new Repository(c);
      String repouuid=repo.deDash(repo.newUuid());
      String remote="cs-mgmt:/volumes/cs-data/secondary";
      String local="/OVS/Repositories/" + repouuid;
      String url="http://nibbler/~funs/iso";
      String iso=url + "/gentoo.iso";
      String vhd=url + "/ovm.raw";
      String isouuid=repo.deDash(repo.newUuid());
      String vmuuid=repo.deDash(repo.newUuid());
      repo.mountRepoFs(remote,local);
      repo.createRepo(remote,repouuid,repouuid,"My Comment");
      repo.discoverRepoDb();
      repo.importIso(iso,isouuid + ".iso",repouuid,"");
      repo.importVirtualDisk(vhd,vmuuid + ".img",repouuid,"");
      repo.deleteRepo(repouuid,true);
      repo.unmountRepoFs(local);
      repo.discoverRepoDb();
      repo.discoverRepo(repouuid);
    }
    if (CheckPool == true) {
      System.out.println("checking pool");
      Pool pool=new Pool(c);
      pool.discoverServerPool();
      System.out.println(pool.getPoolAlias());
      System.out.println(pool.getPoolId());
      if (pool.getPoolId().contentEquals("TEST")) {
        System.out.println("pool equals test");
      }
 else {
        System.out.println("pool" + pool.getPoolId());
      }
      List<String> ips=new ArrayList<String>();
      ips.add("192.168.1.64");
      ips.add("192.168.1.65");
      System.out.println("pool members: " + pool.getPoolMemberIpList());
    }
    if (CheckOcfs2 == true) {
      PoolOCFS2 poolocfs=new PoolOCFS2(c);
      poolocfs.discoverPoolFs();
    }
    if (CheckCluster == true) {
      Pool pool=new Pool(c);
      pool.discoverServerPool();
      Cluster Clos=new Cluster(c);
      if (pool.getPoolId() != null) {
      }
      System.out.println("Cluster online: " + Clos.isClusterOnline());
      System.out.println("Cluster discover: " + Clos.discoverCluster());
    }
    if (CheckXen == true) {
      Xen xen=new Xen(c);
      xen.listVms();
      xen.createVm("xx","xx");
    }
    if (CheckCombine == true) {
      OvmObject Go=new OvmObject();
      String masterUuid=Go.deDash(Go.newUuid());
      Linux Host=new Linux(c);
      Host.discoverServer();
      Pool pool=new Pool(c);
      if (Host.Get("Server_Roles").contentEquals(pool.getValidRoles().toString())) {
        pool.setServerRoles(pool.getValidRoles());
      }
      if (Host.Get("Membership_State").contentEquals("Unowned")) {
        pool.takeOwnership(masterUuid,"");
      }
      StoragePlugin sp=new StoragePlugin(c);
      String propUuid=sp.deDash(sp.newUuid());
      String mntUuid=sp.newUuid();
      String nfsHost="cs-mgmt";
      String nfsPath="/volumes/cs-data/primary";
      String fsType="FileSys";
      sp.setUuid(propUuid);
      sp.setName(propUuid);
      sp.setFsType(fsType);
      sp.setFsServer(nfsHost);
      sp.setFsSourcePath(nfsHost + ":" + nfsPath);
      sp.setMntUuid(mntUuid);
      sp.setSsUuid(propUuid);
      sp.setSsName("nfs:" + nfsPath);
      sp.setFsMountPoint("/nfsmnt/" + mntUuid);
      Repository repo=new Repository(c);
      String repouuid=repo.deDash(repo.newUuid());
      String remote="cs-mgmt:/volumes/cs-data/secondary";
      String repopath="/OVS/Repositories/" + repouuid;
      String url="http://nibbler/~funs/iso";
      String iso=url + "/gentoo.iso";
      String vhd=url + "/ovm.raw";
      String isouuid=repo.deDash(repo.newUuid());
      String vmuuid=repo.deDash(repo.newUuid());
      repo.discoverRepoDb();
      repo.mountRepoFs(remote,repopath);
      repo.createRepo(remote,repouuid,repouuid,"My Comment");
      repo.discoverRepoDb();
      String isoname=isouuid + ".iso";
      String imgname=vmuuid + ".img";
      repo.importIso(iso,isoname,repouuid,"");
      repo.importVirtualDisk(vhd,imgname,repouuid,"");
      if (sp.storagePluginMount() != null) {
        Linux vmDisk=new Linux(c);
        String srcvmimg=repopath + "/VirtualDisks/" + imgname;
        String dstvmimg=sp.getFsMountPoint() + "/" + imgname;
        vmDisk.copyFile(srcvmimg,dstvmimg);
        Xen xen=new Xen(c);
        String vmName=Go.deDash(Go.newUuid());
        Xen.Vm vm=xen.getVmConfig();
        vm.setVmName(vmName);
        vm.setVmUuid(vmName);
        vm.addRootDisk(dstvmimg);
        vm.addVif(0,"c0a80100","00:21:f6:00:00:02");
        vm.setVnc("0.0.0.0");
        xen.createVm(repouuid,vm.vmName);
        xen.startVm(repouuid,vm.vmName);
        System.out.println("Created VM with: " + vmName);
        System.out.println("repo: " + repouuid);
        System.out.println("image: " + imgname);
        System.out.println("disk: " + dstvmimg);
        System.out.println("master: " + masterUuid);
      }
    }
    if (CheckVmInfo == true) {
      Xen host=new Xen(c);
      String vmName="s-1-VM";
      Xen.Vm vm=null;
      Xen.Vm ovm=null;
      try {
        ovm=host.getRunningVmConfig(vmName);
        System.out.println(ovm.getVmRootDiskPoolId());
        vm=host.getVmConfig(vmName);
        vm.addIso("test.iso");
        if (vm.getVmUuid().equals("")) {
          System.out.println("no vm found");
        }
 else {
          System.out.println(vm.getVmParams());
          System.out.println(vm.getVmDisks());
          System.out.println(vm.getVmUuid());
          System.out.println(vm.getPrimaryPoolUuid());
          vm.removeDisk("test.iso");
          System.out.println(vm.getVmParams().get("disk"));
        }
      }
 catch (      XmlRpcException e) {
        System.out.println("Failed to get VM details for " + vmName + " on "+ c.getIp());
      }
    }
    if (CheckVnc == true) {
      Xen vms=new Xen(c);
      Xen.Vm vm=vms.listVms().get("Domain-0");
      vm.setVncAddress("0.0.0.0");
      vm.setVncPassword("testikkel");
      vm.setVnc();
      System.out.println(vm._vmVnc + " " + vm.vmVnc);
    }
    if (CheckBridge) {
      Network net=new Network(c);
      for (      final Map.Entry<String,Network.Interface> entry : net.getInterfaceList().entrySet()) {
        Network.Interface iface=entry.getValue();
        System.out.println("interface: " + iface.getName() + ", phys: "+ iface.getPhysical()+ ", type: "+ iface.getIfType());
      }
      String physInterface="bond0";
      Integer vlanId=2;
      String physVlanInt=physInterface + "." + vlanId.toString();
      String brName="c0a80100" + "." + vlanId.toString();
      System.out.println(net.getInterfaceByName(physVlanInt) + " " + net.getInterfaceByName(brName));
      if (net.getInterfaceByName(physVlanInt) == null)       net.startOvsVlanConfig(physInterface,vlanId);
      if (net.getInterfaceByName(brName) == null)       net.startOvsBrConfig(brName,physVlanInt);
    }
  }
 catch (  Exception e) {
    e.getMessage();
  }
}
