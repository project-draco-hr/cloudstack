@data(ISOLATED_NETWORK, SHARED_NETWORK, VPC_NETWORK)
@attr(tags=['advanced'])
def test_disable_static_nat(self, value):
    ' Add secondary IP to NIC of a VM'
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    network = createNetwork(self, value)
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    try:
        ipaddress_1 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    except Exception as e:
        self.fail(('Failed while adding secondary IP to NIC of vm %s' % virtual_machine.id))
    public_ip = PublicIPAddress.create(self.api_client, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.domainid, networkid=network.id, vpcid=(network.vpcid if (value == VPC_NETWORK) else None))
    if (value != VPC_NETWORK):
        FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=[self.services['fwrule']['cidr']], startport=self.services['fwrule']['startport'], endport=self.services['fwrule']['endport'])
    StaticNATRule.enable(self.apiclient, public_ip.ipaddress.id, virtual_machine.id, network.id, vmguestip=ipaddress_1.ipaddress)
    self.VerifyStaticNatForPublicIp(public_ip.ipaddress.id, True)
    StaticNATRule.disable(self.apiclient, public_ip.ipaddress.id)
    self.VerifyStaticNatForPublicIp(public_ip.ipaddress.id, False)
    StaticNATRule.enable(self.apiclient, public_ip.ipaddress.id, virtual_machine.id, network.id, vmguestip=ipaddress_1.ipaddress)
    self.VerifyStaticNatForPublicIp(public_ip.ipaddress.id, True)
    public_ip.delete(self.apiclient)
    return
