@data(ISOLATED_NETWORK, SHARED_NETWORK, VPC_NETWORK)
@attr(tags=['advanced'])
def test_add_static_nat_rule(self, value):
    ' Add secondary IP to NIC of a VM'
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    network = createNetwork(self, value)
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    ipaddress_1 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    ipaddress_2 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    self.assertEqual(createNetworkRules(self, virtual_machine, network, ipaddress_1.ipaddress, value, ruletype='staticnat'), PASS, 'Failure in creating NAT rule')
    self.assertEqual(createNetworkRules(self, virtual_machine, network, ipaddress_1.ipaddress, value, ruletype='staticnat'), FAIL, 'Failure in creating NAT rule')
    self.assertEqual(createNetworkRules(self, virtual_machine, network, ipaddress_2.ipaddress, value, ruletype='staticnat'), PASS, 'Failure in creating NAT rule')
    self.assertEqual(createNetworkRules(self, virtual_machine, network, '255.255.255.300', value, ruletype='staticnat'), FAIL, 'Failure in NAT rule creation')
    try:
        NIC.removeIp(self.apiclient, ipaddress_1.id)
        self.fail('Ip address should not get removed when active static NAT rule is defined for it')
    except Exception as e:
        self.debug(('Exception while removing secondary ip address as expected                        because static nat rule is present for it: %s' % e))
    return
