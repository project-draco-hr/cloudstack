@data(ISOLATED_NETWORK, SHARED_NETWORK, VPC_NETWORK)
@attr(tags=['advanced'])
def test_operations_non_root_admin_api_client(self, value):
    'Test basic operations using non root admin apii client'
    child_domain = Domain.create(self.apiclient, services=self.services['domain'], parentdomainid=self.domain.id)
    self.account = Account.create(self.apiclient, self.services['account'], domainid=child_domain.id)
    self.cleanup.append(self.account)
    self.cleanup.append(child_domain)
    apiclient = self.testClient.getUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
    network = createNetwork(self, value)
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    try:
        ipaddress_1 = NIC.addIp(apiclient, id=virtual_machine.nic[0].id)
    except Exception as e:
        self.fail(('Failed while adding secondary IP to NIC of vm %s: %s' % (virtual_machine.id, e)))
    try:
        NIC.list(apiclient, virtualmachineid=virtual_machine.id)
    except Exception as e:
        self.fail(('Listing NICs for virtual machine %s failed with Exception %s' % (virtual_machine.id, e)))
    try:
        NIC.list(apiclient, virtualmachineid=virtual_machine.id, nicid=virtual_machine.nic[0].id)
    except Exception as e:
        self.fail(('Listing NICs for virtual machine %s and nic id %s failed with Exception %s' % (virtual_machine.id, virtual_machine.nic[0].id, e)))
    try:
        NIC.removeIp(apiclient, ipaddressid=ipaddress_1.id)
    except Exception as e:
        self.fail(('Removing seondary IP %s from NIC failed as expected with Exception %s' % (ipaddress_1.id, e)))
    return
