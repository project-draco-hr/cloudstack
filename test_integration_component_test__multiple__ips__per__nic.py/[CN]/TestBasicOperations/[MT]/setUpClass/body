@classmethod
def setUpClass(cls):
    cls.testClient = super(TestBasicOperations, cls).getClsTestClient()
    cls.api_client = cls.testClient.getApiClient()
    cls.services = cls.testClient.getParsedTestDataConfig()
    cls.domain = get_domain(cls.api_client)
    cls.zone = get_zone(cls.api_client, cls.testClient.getZoneForTests())
    cls.template = get_template(cls.api_client, cls.zone.id, cls.services['ostype'])
    if (cls.template == FAILED):
        assert False, ('get_template() failed to return template with description %s' % cls.services['ostype'])
    cls.services['virtual_machine']['zoneid'] = cls.zone.id
    cls.services['virtual_machine']['template'] = cls.template.id
    cls.service_offering = ServiceOffering.create(cls.api_client, cls.services['service_offering'])
    cls._cleanup = [cls.service_offering]
    cls.services['shared_network_offering']['specifyVlan'] = 'True'
    cls.services['shared_network_offering']['specifyIpRanges'] = 'True'
    cls.shared_network_offering = CreateEnabledNetworkOffering(cls.api_client, cls.services['shared_network_offering'])
    cls._cleanup.append(cls.shared_network_offering)
    if (cls.mode == 'advanced'):
        cls.isolated_network_offering = CreateEnabledNetworkOffering(cls.api_client, cls.services['isolated_network_offering'])
        cls._cleanup.append(cls.isolated_network_offering)
        cls.isolated_network_offering_vpc = CreateEnabledNetworkOffering(cls.api_client, cls.services['nw_offering_isolated_vpc'])
        cls._cleanup.append(cls.isolated_network_offering_vpc)
        cls.vpc_off = VpcOffering.create(cls.api_client, cls.services['vpc_offering'])
        cls.vpc_off.update(cls.api_client, state='Enabled')
        cls._cleanup.append(cls.vpc_off)
    return
