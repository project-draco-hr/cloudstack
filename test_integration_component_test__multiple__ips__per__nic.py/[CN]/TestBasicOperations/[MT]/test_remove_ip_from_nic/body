@data(SHARED_NETWORK)
@attr(tags=['advanced', 'sanj'])
def test_remove_ip_from_nic(self, value):
    ' Remove secondary IP from NIC of a VM'
    if ((value == VPC_NETWORK) and (self.hypervisor == 'hyperv')):
        self.skipTest('VPC is not supported on Hyper-V')
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    network = createNetwork(self, value)
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    ipaddress_1 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    NIC.removeIp(self.apiclient, ipaddressid=ipaddress_1.id)
    if (value == SHARED_NETWORK):
        qresultset = self.dbclient.execute(("select allocated from user_ip_address where public_ip_address = '%s';" % str(ipaddress_1.ipaddress)))
        self.assertEqual(qresultset[0][0], None, "Removing IP from nic didn't release the ip address from user_ip_address table")
        ipaddress_2 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id, ipaddress=ipaddress_1.ipaddress)
        NIC.removeIp(self.apiclient, ipaddressid=ipaddress_2.id)
    try:
        NIC.removeIp(self.apiclient, ipaddressid=(ipaddress_1.id + random_gen()))
        self.fail('Removing invalid IP address, it should have failed')
    except Exception as e:
        self.debug(('Removing invalid IP failed as expected with Exception %s' % e))
    return
