@data(ISOLATED_NETWORK, SHARED_NETWORK, VPC_NETWORK)
@attr(tags=['basic', 'advanced'])
def test_remove_ip_from_nic(self, value):
    ' Remove secondary IP from NIC of a VM'
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    if shouldTestBeSkipped(networkType=value, zoneType=self.mode):
        self.skipTest(('Skipping test as %s network is not supported in basic zone' % value))
    network = createNetwork(self, value)
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    try:
        ipaddress_1 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    except Exception as e:
        self.fail(('Failed while adding secondary IP to NIC of vm %s' % virtual_machine.id))
    try:
        NIC.removeIp(self.apiclient, ipaddressid=ipaddress_1.id)
    except Exception as e:
        self.fail(('Removing seondary IP %s from NIC failed as expected with Exception %s' % (ipaddress_1.id, e)))
    try:
        NIC.removeIp(self.apiclient, ipaddressid=(ipaddress_1.id + random_gen()))
        self.fail('Removing invalid IP address, it should have failed')
    except Exception as e:
        self.debug(('Removing invalid IP failed as expected with Exception %s' % e))
    return
