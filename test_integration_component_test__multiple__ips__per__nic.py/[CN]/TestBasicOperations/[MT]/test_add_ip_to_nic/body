@data(ISOLATED_NETWORK, SHARED_NETWORK, VPC_NETWORK)
@attr(tags=['basic', 'advanced'])
def test_add_ip_to_nic(self, value):
    ' Add secondary IP to NIC of a VM'
    self.account = Account.create(self.apiclient, self.services['account'], domainid=self.domain.id)
    self.cleanup.append(self.account)
    if shouldTestBeSkipped(networkType=value, zoneType=self.mode):
        self.skipTest(('Skipping test as %s network is not supported in basic zone' % value))
    network = createNetwork(self, value)
    try:
        virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], networkids=[network.id], serviceofferingid=self.service_offering.id, accountid=self.account.name, domainid=self.account.domainid)
    except Exception as e:
        self.fail(('vm creation failed: %s' % e))
    try:
        ipaddress_1 = NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id)
    except Exception as e:
        self.fail(('Failed while adding secondary IP to NIC of vm %s' % virtual_machine.id))
    try:
        NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id, ipaddress=ipaddress_1.ipaddress)
        self.debug(('Adding already added secondary IP %s to NIC of vm %s succeeded, should have failed' % (ipaddress_1.ipaddress, virtual_machine.id)))
    except Exception as e:
        self.debug(('Failed while adding already added secondary IP to NIC of vm %s' % virtual_machine.id))
    try:
        NIC.addIp(self.apiclient, id=(virtual_machine.nic[0].id + random_gen()))
        self.fail('Adding secondary IP with wrong NIC id succeded, it shoud have failed')
    except Exception as e:
        self.debug('Failed while adding secondary IP to wrong NIC')
    try:
        NIC.addIp(self.apiclient, id=virtual_machine.nic[0].id, ipaddress='255.255.255.300')
        self.fail('Adding secondary IP with wrong ipaddress succeded, it should have failed')
    except Exception as e:
        self.debug(('Failed while adding wrong secondary IP to NIC of VM %s' % virtual_machine.id))
    return
