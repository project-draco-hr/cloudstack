{
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug("Marking project id=" + project.getId() + " with state "+ State.Disabled+ " as a part of project delete...");
  project.setState(State.Disabled);
  boolean updateResult=_projectDao.update(project.getId(),project);
  Account projectOwner=getProjectOwner(project.getId());
  if (projectOwner != null) {
    _resourceLimitMgr.decrementResourceCount(projectOwner.getId(),ResourceType.project);
  }
  txn.commit();
  if (updateResult) {
    if (!cleanupProject(project,_accountDao.findById(caller.getId()),callerUserId)) {
      s_logger.warn("Failed to cleanup project's id=" + project.getId() + " resources, not removing the project yet");
      return false;
    }
 else {
      return _projectDao.remove(project.getId());
    }
  }
 else {
    s_logger.warn("Failed to mark the project id=" + project.getId() + " with state "+ State.Disabled);
    return false;
  }
}
