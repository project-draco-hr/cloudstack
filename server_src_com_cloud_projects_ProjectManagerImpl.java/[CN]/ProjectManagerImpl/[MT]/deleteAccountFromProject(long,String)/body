{
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find project with specified id");
    ex.addProxyObject(project,projectId,"projectId");
    throw ex;
  }
  Account account=_accountMgr.getActiveAccountByName(accountName,project.getDomainId());
  if (account == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to find account name=" + accountName + " in domain id="+ project.getDomainId());
    ex.addProxyObject("domain",project.getDomainId(),"domainId");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyProject,true,_accountMgr.getAccount(project.getProjectAccountId()));
  ProjectAccount projectAccount=_projectAccountDao.findByProjectIdAccountId(projectId,account.getId());
  if (projectAccount == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Account " + accountName + " is not assigned to the project with specified id");
    ex.addProxyObject(project,projectId,"projectId");
    throw ex;
  }
  if (projectAccount.getAccountRole() == Role.Admin) {
    InvalidParameterValueException ex=new InvalidParameterValueException("Unable to delete account " + accountName + " from the project with specified id as the account is the owner of the project");
    ex.addProxyObject(project,projectId,"projectId");
    throw ex;
  }
  return deleteAccountFromProject(projectId,account.getId());
}
