{
  Account caller=CallContext.current().getCallingAccount();
  Account owner=caller;
  if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {
    throw new PermissionDeniedException("Regular user is not permitted to create a project");
  }
  if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {
    throw new InvalidParameterValueException("Account name and domain id must be specified together");
  }
  if (accountName != null) {
    owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
  }
  if (_projectDao.findByNameAndDomain(name,owner.getDomainId()) != null) {
    throw new InvalidParameterValueException("Project with name " + name + " already exists in domain id="+ owner.getDomainId());
  }
  _resourceLimitMgr.checkResourceLimit(owner,ResourceType.project);
  final Account ownerFinal=owner;
  return Transaction.execute(new TransactionCallback<Project>(){
    @Override public Project doInTransaction(    TransactionStatus status){
      StringBuilder acctNm=new StringBuilder("PrjAcct-");
      acctNm.append(name).append("-").append(ownerFinal.getDomainId());
      Account projectAccount=_accountMgr.createAccount(acctNm.toString(),Account.ACCOUNT_TYPE_PROJECT,null,domainId,null,null,UUID.randomUUID().toString());
      Project project=_projectDao.persist(new ProjectVO(name,displayText,ownerFinal.getDomainId(),projectAccount.getId()));
      assignAccountToProject(project,ownerFinal.getId(),ProjectAccount.Role.Admin);
      if (project != null) {
        CallContext.current().setEventDetails("Project id=" + project.getId());
        CallContext.current().putContextParameter(Project.class,project.getUuid());
      }
      _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(),ResourceType.project);
      return project;
    }
  }
);
}
