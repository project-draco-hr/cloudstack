{
  Account caller=CallContext.current().getCallingAccount();
  Long accountId=null;
  boolean result=true;
  if (accountName == null && token == null) {
    accountName=caller.getAccountName();
  }
  final Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException("Unable to find the project id=" + projectId);
  }
  if (accountName != null) {
    Account account=_accountMgr.getActiveAccountByName(accountName,project.getDomainId());
    if (account == null) {
      throw new InvalidParameterValueException("Unable to find account name=" + accountName + " in domain id="+ project.getDomainId());
    }
    _accountMgr.checkAccess(caller,null,true,account);
    accountId=account.getId();
  }
 else {
    accountId=caller.getId();
  }
  ProjectInvitationVO invite=null;
  if (token == null) {
    invite=_projectInvitationDao.findByAccountIdProjectId(accountId,projectId,ProjectInvitation.State.Pending);
  }
 else {
    invite=_projectInvitationDao.findPendingByTokenAndProjectId(token,projectId,ProjectInvitation.State.Pending);
  }
  if (invite != null) {
    if (!_projectInvitationDao.isActive(invite.getId(),_invitationTimeOut) && accept) {
      expireInvitation(invite);
      throw new InvalidParameterValueException("Invitation is expired for account id=" + accountName + " to the project id="+ projectId);
    }
 else {
      final ProjectInvitationVO inviteFinal=invite;
      final Long accountIdFinal=accountId;
      final String accountNameFinal=accountName;
      result=Transaction.execute(new TransactionCallback<Boolean>(){
        @Override public Boolean doInTransaction(        TransactionStatus status){
          boolean result=true;
          ProjectInvitation.State newState=accept ? ProjectInvitation.State.Completed : ProjectInvitation.State.Declined;
          s_logger.debug("Marking invitation " + inviteFinal + " with state "+ newState);
          inviteFinal.setState(newState);
          result=_projectInvitationDao.update(inviteFinal.getId(),inviteFinal);
          if (result && accept) {
            ProjectAccount projectAccount=_projectAccountDao.findByProjectIdAccountId(projectId,accountIdFinal);
            if (projectAccount != null) {
              s_logger.debug("Account " + accountNameFinal + " already added to the project id="+ projectId);
            }
 else {
              assignAccountToProject(project,accountIdFinal,ProjectAccount.Role.Regular);
            }
          }
 else {
            s_logger.warn("Failed to update project invitation " + inviteFinal + " with state "+ newState);
          }
          return result;
        }
      }
);
    }
  }
 else {
    throw new InvalidParameterValueException("Unable to find invitation for account name=" + accountName + " to the project id="+ projectId);
  }
  return result;
}
