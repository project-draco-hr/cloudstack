{
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ProjectInvitationVO.class,"id",true,startIndex,pageSizeVal);
  SearchBuilder<ProjectInvitationVO> sb=_projectInvitationDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and("projectId",sb.entity().getProjectId(),SearchCriteria.Op.EQ);
  sb.and("state",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and("created",sb.entity().getCreated(),SearchCriteria.Op.GT);
  sb.and("id",sb.entity().getId(),SearchCriteria.Op.EQ);
  SearchCriteria<ProjectInvitationVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (projectId != null) {
    sc.setParameters("projectId",projectId);
  }
  if (state != null) {
    sc.setParameters("state",state);
  }
  if (id != null) {
    sc.setParameters("id",id);
  }
  if (activeOnly) {
    sc.setParameters("state",ProjectInvitation.State.Pending);
    sc.setParameters("created",new Date((DateUtil.currentGMTTime().getTime()) - _invitationTimeOut));
  }
  return _projectInvitationDao.search(sc,searchFilter);
}
