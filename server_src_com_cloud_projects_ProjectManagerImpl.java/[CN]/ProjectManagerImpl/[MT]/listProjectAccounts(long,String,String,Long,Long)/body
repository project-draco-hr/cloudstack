{
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException("Unable to find the project id=" + projectId);
  }
  if (!_accountMgr.isAdmin(caller.getType()) && _projectAccountDao.findByProjectIdAccountId(projectId,caller.getAccountId()) == null) {
    throw new PermissionDeniedException("Account " + caller + " is not authorized to list users of the project id="+ projectId);
  }
  Filter searchFilter=new Filter(ProjectAccountVO.class,"id",false,startIndex,pageSizeVal);
  SearchBuilder<ProjectAccountVO> sb=_projectAccountDao.createSearchBuilder();
  sb.and("accountRole",sb.entity().getAccountRole(),Op.EQ);
  SearchBuilder<AccountVO> accountSearch;
  if (accountName != null) {
    accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and("accountName",accountSearch.entity().getAccountName(),SearchCriteria.Op.EQ);
    sb.join("accountSearch",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectAccountVO> sc=sb.create();
  if (role != null) {
    sc.setParameters("accountRole",role);
  }
  if (accountName != null) {
    sc.setJoinParameters("accountSearch","accountName",accountName);
  }
  return _projectAccountDao.search(sc,searchFilter);
}
