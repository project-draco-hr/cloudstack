{
  Account caller=UserContext.current().getCaller();
  Long accountId=null;
  String path=null;
  Filter searchFilter=new Filter(ProjectVO.class,"id",false,startIndex,pageSize);
  SearchBuilder<ProjectVO> sb=_projectDao.createSearchBuilder();
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException("Domain id=" + domainId + " doesn't exist in the system");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException("Unable to find account " + accountName + " in domain "+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    if (accountName != null && !accountName.equals(caller.getAccountName())) {
      throw new PermissionDeniedException("Can't list account " + accountName + " projects; unauthorized");
    }
    if (domainId != null && domainId.equals(caller.getDomainId())) {
      throw new PermissionDeniedException("Can't list domain id= " + domainId + " projects; unauthorized");
    }
    accountId=caller.getId();
  }
  if (domainId == null && accountId == null && (caller.getType() == Account.ACCOUNT_TYPE_NORMAL || !listAll)) {
    accountId=caller.getId();
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || (isRecursive && !listAll)) {
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
  if (path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and("path",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join("domainSearch",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (accountId != null) {
    SearchBuilder<ProjectAccountVO> projectAccountSearch=_projectAccountDao.createSearchBuilder();
    projectAccountSearch.and("accountId",projectAccountSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
    sb.join("projectAccountSearch",projectAccountSearch,sb.entity().getId(),projectAccountSearch.entity().getProjectId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectVO> sc=sb.create();
  if (id != null) {
    sc.addAnd("id",Op.EQ,id);
  }
  if (domainId != null && !isRecursive) {
    sc.addAnd("domainId",Op.EQ,domainId);
  }
  if (name != null) {
    sc.addAnd("name",Op.EQ,name);
  }
  if (displayText != null) {
    sc.addAnd("displayText",Op.EQ,displayText);
  }
  if (accountId != null) {
    sc.setJoinParameters("projectAccountSearch","accountId",accountId);
  }
  if (state != null) {
    sc.addAnd("state",Op.EQ,state);
  }
  if (keyword != null) {
    SearchCriteria<ProjectVO> ssc=_projectDao.createSearchCriteria();
    ssc.addOr("name",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    ssc.addOr("displayText",SearchCriteria.Op.LIKE,"%" + keyword + "%");
    sc.addAnd("name",SearchCriteria.Op.SC,ssc);
  }
  if (path != null) {
    sc.setJoinParameters("domainSearch","path",path);
  }
  return _projectDao.search(sc,searchFilter);
}
