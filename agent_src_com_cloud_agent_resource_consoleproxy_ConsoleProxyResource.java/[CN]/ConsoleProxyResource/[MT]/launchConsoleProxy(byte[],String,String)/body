{
  final Object resource=this;
  if (_consoleProxyMain == null) {
    _consoleProxyMain=new Thread(new ManagedContextRunnable(){
      @Override protected void runInContext(){
        try {
          Class<?> consoleProxyClazz=Class.forName("com.cloud.consoleproxy.ConsoleProxy");
          try {
            s_logger.info("Invoke setEncryptorPassword(), ecnryptorPassword: " + encryptorPassword);
            Method methodSetup=consoleProxyClazz.getMethod("setEncryptorPassword",String.class);
            methodSetup.invoke(null,encryptorPassword);
            s_logger.info("Invoke startWithContext()");
            Method method=consoleProxyClazz.getMethod("startWithContext",Properties.class,Object.class,byte[].class,String.class);
            method.invoke(null,_properties,resource,ksBits,ksPassword);
          }
 catch (          SecurityException e) {
            s_logger.error("Unable to launch console proxy due to SecurityException",e);
            System.exit(ExitStatus.Error.value());
          }
catch (          NoSuchMethodException e) {
            s_logger.error("Unable to launch console proxy due to NoSuchMethodException",e);
            System.exit(ExitStatus.Error.value());
          }
catch (          IllegalArgumentException e) {
            s_logger.error("Unable to launch console proxy due to IllegalArgumentException",e);
            System.exit(ExitStatus.Error.value());
          }
catch (          IllegalAccessException e) {
            s_logger.error("Unable to launch console proxy due to IllegalAccessException",e);
            System.exit(ExitStatus.Error.value());
          }
catch (          InvocationTargetException e) {
            s_logger.error("Unable to launch console proxy due to InvocationTargetException " + e.getTargetException().toString(),e);
            System.exit(ExitStatus.Error.value());
          }
        }
 catch (        final ClassNotFoundException e) {
          s_logger.error("Unable to launch console proxy due to ClassNotFoundException");
          System.exit(ExitStatus.Error.value());
        }
      }
    }
,"Console-Proxy-Main");
    _consoleProxyMain.setDaemon(true);
    _consoleProxyMain.start();
  }
 else {
    s_logger.info("com.cloud.consoleproxy.ConsoleProxy is already running");
    try {
      Class<?> consoleProxyClazz=Class.forName("com.cloud.consoleproxy.ConsoleProxy");
      Method methodSetup=consoleProxyClazz.getMethod("setEncryptorPassword",String.class);
      methodSetup.invoke(null,encryptorPassword);
    }
 catch (    SecurityException e) {
      s_logger.error("Unable to launch console proxy due to SecurityException",e);
      System.exit(ExitStatus.Error.value());
    }
catch (    NoSuchMethodException e) {
      s_logger.error("Unable to launch console proxy due to NoSuchMethodException",e);
      System.exit(ExitStatus.Error.value());
    }
catch (    IllegalArgumentException e) {
      s_logger.error("Unable to launch console proxy due to IllegalArgumentException",e);
      System.exit(ExitStatus.Error.value());
    }
catch (    IllegalAccessException e) {
      s_logger.error("Unable to launch console proxy due to IllegalAccessException",e);
      System.exit(ExitStatus.Error.value());
    }
catch (    InvocationTargetException e) {
      s_logger.error("Unable to launch console proxy due to InvocationTargetException " + e.getTargetException().toString(),e);
      System.exit(ExitStatus.Error.value());
    }
catch (    final ClassNotFoundException e) {
      s_logger.error("Unable to launch console proxy due to ClassNotFoundException",e);
      System.exit(ExitStatus.Error.value());
    }
  }
}
