@attr(tags=['advanced', 'basic'], required_hardware='false')
def test_01_op_host_capacity_disable_cluster(self):
    "\n        Disable the host and it's cluster,\n        make sure that capacity_state is not affected by enabling/disabling\n        of cluster in the op_host_capacity table\n        "
    host_state = 'Disable'
    host_resourcestate = update_host(self.apiclient, host_state, self.my_host_id)
    self.assertEqual(host_resourcestate, (host_state + 'd'), 'Host state not correct')
    check_db(self, host_state)
    cluster_state = 'Disabled'
    managed_state = 'Managed'
    (cluster_managedstate, cluster_allocationstate) = update_cluster(self.apiclient, cluster_state, self.my_cluster_id, managed_state)
    self.assertEqual(cluster_allocationstate, cluster_state, 'Not able to enable/disable the cluster')
    self.assertEqual(cluster_managedstate, managed_state, 'Not able to managed/unmanage the cluster')
    check_db(self, host_state)
    cluster_state = 'Enabled'
    (cluster_managedstate, cluster_allocationstate) = update_cluster(self.apiclient, cluster_state, self.my_cluster_id, managed_state)
    self.assertEqual(cluster_allocationstate, cluster_state, 'Not able to enable/disable the cluster')
    self.assertEqual(cluster_managedstate, managed_state, 'Not able to managed/unmanage the cluster')
    check_db(self, host_state)
    host_state = 'Enable'
    host_resourcestate = update_host(self.apiclient, host_state, self.my_host_id)
    self.assertEqual(host_resourcestate, (host_state + 'd'), 'Host state not correct')
    check_db(self, host_state)
    return
