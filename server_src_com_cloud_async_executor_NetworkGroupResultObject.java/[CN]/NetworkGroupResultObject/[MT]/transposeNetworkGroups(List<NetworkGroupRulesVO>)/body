{
  List<NetworkGroupResultObject> resultObjects=new ArrayList<NetworkGroupResultObject>();
  if ((groups != null) && !groups.isEmpty()) {
    List<IngressRuleResultObject> ingressDataList=new ArrayList<IngressRuleResultObject>();
    NetworkGroupResultObject currentGroup=null;
    List<Long> processedGroups=new ArrayList<Long>();
    for (    NetworkGroupRulesVO netGroupRule : groups) {
      Long groupId=netGroupRule.getId();
      if (!processedGroups.contains(groupId)) {
        processedGroups.add(groupId);
        if (currentGroup != null) {
          if (!ingressDataList.isEmpty()) {
            currentGroup.setIngressRules(ingressDataList);
            ingressDataList=new ArrayList<IngressRuleResultObject>();
          }
          resultObjects.add(currentGroup);
        }
        NetworkGroupResultObject groupResult=new NetworkGroupResultObject();
        groupResult.setId(netGroupRule.getId());
        groupResult.setName(netGroupRule.getName());
        groupResult.setDescription(netGroupRule.getDescription());
        groupResult.setDomainId(netGroupRule.getDomainId());
        groupResult.setAccountId(netGroupRule.getAccountId());
        groupResult.setAccountName(netGroupRule.getAccountName());
        currentGroup=groupResult;
      }
      if (netGroupRule.getRuleId() != null) {
        IngressRuleResultObject ingressData=new IngressRuleResultObject();
        ingressData.setEndPort(netGroupRule.getEndPort());
        ingressData.setStartPort(netGroupRule.getStartPort());
        ingressData.setId(netGroupRule.getRuleId());
        ingressData.setProtocol(netGroupRule.getProtocol());
        if (netGroupRule.getAllowedNetworkGroup() != null) {
          ingressData.setAllowedNetworkGroup(netGroupRule.getAllowedNetworkGroup());
          ingressData.setAllowedNetGroupAcct(netGroupRule.getAllowedNetGrpAcct());
        }
 else         if (netGroupRule.getAllowedSourceIpCidr() != null) {
          ingressData.setAllowedSourceIpCidr(netGroupRule.getAllowedSourceIpCidr());
        }
        ingressDataList.add(ingressData);
      }
    }
    if (currentGroup != null) {
      if (!ingressDataList.isEmpty()) {
        currentGroup.setIngressRules(ingressDataList);
      }
      resultObjects.add(currentGroup);
    }
  }
  return resultObjects;
}
