{
  if (logger.isInfoEnabled())   logger.info("Initializing ServiceProvider...");
  File file=ConfigurationHelper.findConfigurationFile("log4j-cloud.xml");
  if (file != null) {
    System.out.println("Log4j configuration from : " + file.getAbsolutePath());
    DOMConfigurator.configureAndWatch(file.getAbsolutePath(),10000);
  }
 else {
    System.out.println("Configure log4j with default properties");
  }
  loadStartupProperties();
  String hostKey=properties.getProperty("host.key");
  if (hostKey == null) {
    InetAddress inetAddr=NetHelper.getFirstNonLoopbackLocalInetAddress();
    if (inetAddr != null)     hostKey=NetHelper.getMacAddress(inetAddr);
  }
  if (hostKey == null)   throw new ConfigurationException("Please configure host.key property in cloud-bridge.properites");
  String host=properties.getProperty("host");
  if (host == null)   host=NetHelper.getHostName();
  if (properties.get("bucket.dns") != null && ((String)properties.get("bucket.dns")).equalsIgnoreCase("true")) {
    useSubDomain=true;
  }
  serviceEndpoint=(String)properties.get("serviceEndpoint");
  masterDomain=new String("." + serviceEndpoint);
  setupHost(hostKey,host);
  PersistContext.flush();
  String localStorageRoot=properties.getProperty("storage.root");
  if (localStorageRoot != null)   setupLocalStorage(localStorageRoot);
  multipartDir=properties.getProperty("storage.multipartDir");
  timer.schedule(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL);
  if (logger.isInfoEnabled())   logger.info("ServiceProvider initialized");
}
