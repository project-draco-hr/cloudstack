@attr(tags=['advanced', 'advancedns', 'simulator'])
def test_04_deploy_multiple_vm(self):
    'Test Deploy multiple VM with 5 GB RAM & verify the usage'
    self.services['service_offering']['memory'] = 5120
    self.debug('Setting up account and domain hierarchy')
    self.setupAccounts()
    users = {self.child_domain_1: self.child_do_admin_1, self.child_domain_2: self.child_do_admin_2, }
    for (domain, admin) in users.items():
        self.account = admin
        self.domain = domain
        self.debug(('Creating an instance with service offering: %s' % self.service_offering.name))
        api_client = self.testClient.createUserApiClient(UserName=self.account.name, DomainName=self.account.domain)
        vm_1 = self.createInstance(service_off=self.service_offering, api_client=api_client)
        vm_2 = self.createInstance(service_off=self.service_offering, api_client=api_client)
        vm_3 = self.createInstance(service_off=self.service_offering, api_client=api_client)
        self.debug('Deploying instance - Memory capacity is fully utilized')
        with self.assertRaises(Exception):
            self.createInstance(service_off=self.service_offering, api_client=api_client)
        account_list = Account.list(self.apiclient, id=self.account.id)
        self.assertIsInstance(account_list, list, 'List Accounts should return a valid response')
        resource_count = account_list[0].memorytotal
        expected_resource_count = (int(self.services['service_offering']['memory']) * 3)
        self.assertEqual(resource_count, expected_resource_count, 'Resource count should match with the expected resource count')
        vm_2.delete(self.apiclient)
        vm_3.delete(self.apiclient)
    return
