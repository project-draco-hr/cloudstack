def test_dhcphosts(self, vm, router):
    hosts = list_hosts(self.apiclient, id=router.hostid)
    self.assertEqual(isinstance(hosts, list), True, 'Check for list hosts response return valid data')
    host = hosts[0]
    host.user = self.hostConfig['username']
    host.passwd = self.hostConfig['password']
    host.port = self.services['configurableData']['host']['port']
    if (self.hypervisor.lower() in ('vmware', 'hyperv')):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, router.linklocalip, ("cat /etc/dhcphosts.txt | grep %s | sed 's/\\,/ /g' | awk '{print $2}'" % vm.nic[0].ipaddress), hypervisor=self.hypervisor)
    else:
        try:
            result = get_process_status(host.ipaddress, host.port, host.user, host.passwd, router.linklocalip, ("cat /etc/dhcphosts.txt | grep %s | sed 's/\\,/ /g' | awk '{print $2}'" % vm.nic[0].ipaddress))
        except KeyError:
            self.skipTest(('Provide a marvin config file with host                            credentials to run %s' % self._testMethodName))
    self.logger.debug(("cat /etc/dhcphosts.txt | grep %s | sed 's/\\,/ /g' | awk '{print $2}' RESULT IS ==> %s" % (vm.nic[0].ipaddress, result)))
    res = str(result)
    self.assertEqual(res.count(vm.nic[0].ipaddress), 1, ('DHCP hosts file contains duplicate IPs ==> %s!' % res))
