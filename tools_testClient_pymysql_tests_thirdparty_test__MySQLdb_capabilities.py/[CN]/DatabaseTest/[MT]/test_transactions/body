def test_transactions(self):
    columndefs = ('col1 INT', 'col2 VARCHAR(255)')

    def generator(row, col):
        if (col == 0):
            return row
        else:
            return (('%i' % (row % 10)) * 255)
    self.create_table(columndefs)
    insert_statement = ('INSERT INTO %s VALUES (%s)' % (self.table, ','.join((['%s'] * len(columndefs)))))
    data = [[generator(i, j) for j in range(len(columndefs))] for i in range(self.rows)]
    self.cursor.executemany(insert_statement, data)
    self.connection.commit()
    self.cursor.execute(('select * from %s' % self.table))
    l = self.cursor.fetchall()
    self.assertEquals(len(l), self.rows)
    for i in range(self.rows):
        for j in range(len(columndefs)):
            self.assertEquals(l[i][j], generator(i, j))
    delete_statement = ('delete from %s where col1=%%s' % self.table)
    self.cursor.execute(delete_statement, (0,))
    self.cursor.execute(('select col1 from %s where col1=%s' % (self.table, 0)))
    l = self.cursor.fetchall()
    self.assertFalse(l, "DELETE didn't work")
    self.connection.rollback()
    self.cursor.execute(('select col1 from %s where col1=%s' % (self.table, 0)))
    l = self.cursor.fetchall()
    self.assertTrue((len(l) == 1), "ROLLBACK didn't work")
    self.cursor.execute(('drop table %s' % self.table))
