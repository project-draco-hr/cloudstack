def test_truncation(self):
    columndefs = ('col1 INT', 'col2 VARCHAR(255)')

    def generator(row, col):
        if (col == 0):
            return row
        else:
            return (('%i' % (row % 10)) * ((255 - (self.rows / 2)) + row))
    self.create_table(columndefs)
    insert_statement = ('INSERT INTO %s VALUES (%s)' % (self.table, ','.join((['%s'] * len(columndefs)))))
    try:
        self.cursor.execute(insert_statement, (0, ('0' * 256)))
    except Warning:
        if self.debug:
            print self.cursor.messages
    except self.connection.DataError:
        pass
    else:
        self.fail('Over-long column did not generate warnings/exception with single insert')
    self.connection.rollback()
    try:
        for i in range(self.rows):
            data = []
            for j in range(len(columndefs)):
                data.append(generator(i, j))
            self.cursor.execute(insert_statement, tuple(data))
    except Warning:
        if self.debug:
            print self.cursor.messages
    except self.connection.DataError:
        pass
    else:
        self.fail('Over-long columns did not generate warnings/exception with execute()')
    self.connection.rollback()
    try:
        data = [[generator(i, j) for j in range(len(columndefs))] for i in range(self.rows)]
        self.cursor.executemany(insert_statement, data)
    except Warning:
        if self.debug:
            print self.cursor.messages
    except self.connection.DataError:
        pass
    else:
        self.fail('Over-long columns did not generate warnings/exception with executemany()')
    self.connection.rollback()
    self.cursor.execute(('drop table %s' % self.table))
