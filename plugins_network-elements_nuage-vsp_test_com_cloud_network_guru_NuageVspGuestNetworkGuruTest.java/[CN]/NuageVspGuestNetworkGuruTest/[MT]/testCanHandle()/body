{
  final NetworkOffering offering=mock(NetworkOffering.class);
  when(offering.getId()).thenReturn(NETWORK_ID);
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getGuestType()).thenReturn(GuestType.Isolated);
  when(offering.getIsPersistent()).thenReturn(false);
  when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(false);
  final PhysicalNetworkVO physnet=mock(PhysicalNetworkVO.class);
  when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[]{"VSP"}));
  when(physnet.getId()).thenReturn(NETWORK_ID);
  when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(true);
  assertTrue(guru.canHandle(offering,NetworkType.Advanced,physnet));
  when(offering.getTrafficType()).thenReturn(TrafficType.Management);
  assertFalse(guru.canHandle(offering,NetworkType.Advanced,physnet));
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getGuestType()).thenReturn(GuestType.Shared);
  assertTrue(guru.canHandle(offering,NetworkType.Advanced,physnet));
  when(offering.getGuestType()).thenReturn(GuestType.Isolated);
  assertFalse(guru.canHandle(offering,NetworkType.Basic,physnet));
  when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[]{"VLAN"}));
  assertFalse(guru.canHandle(offering,NetworkType.Advanced,physnet));
  when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(true);
  assertFalse(guru.canHandle(offering,NetworkType.Advanced,physnet));
}
