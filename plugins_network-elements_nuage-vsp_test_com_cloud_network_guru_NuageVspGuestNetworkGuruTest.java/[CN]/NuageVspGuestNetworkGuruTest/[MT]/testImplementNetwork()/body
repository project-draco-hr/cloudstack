{
  final NetworkVO network=mock(NetworkVO.class);
  when(network.getId()).thenReturn(NETWORK_ID);
  when(network.getUuid()).thenReturn("aaaaaa");
  when(network.getDataCenterId()).thenReturn(NETWORK_ID);
  when(network.getNetworkOfferingId()).thenReturn(NETWORK_ID);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  when(network.getDomainId()).thenReturn(NETWORK_ID);
  when(network.getAccountId()).thenReturn(NETWORK_ID);
  when(network.getVpcId()).thenReturn(null);
  when(network.getState()).thenReturn(com.cloud.network.Network.State.Implementing);
  when(network.getTrafficType()).thenReturn(TrafficType.Guest);
  when(network.getMode()).thenReturn(Mode.Static);
  when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vsp);
  when(network.getBroadcastUri()).thenReturn(new URI("vsp://aaaaaa-aavvv/10.1.1.1"));
  when(network.getGateway()).thenReturn("10.1.1.1");
  when(network.getCidr()).thenReturn("10.1.1.0/24");
  when(network.getName()).thenReturn("iso");
  final NetworkOffering offering=mock(NetworkOffering.class);
  when(offering.getId()).thenReturn(NETWORK_ID);
  when(offering.getTrafficType()).thenReturn(TrafficType.Guest);
  when(offering.getTags()).thenReturn("aaaa");
  when(offering.getEgressDefaultPolicy()).thenReturn(true);
  when(_networkModel.findPhysicalNetworkId(NETWORK_ID,"aaa",TrafficType.Guest)).thenReturn(NETWORK_ID);
  final ReservationContext reserveContext=mock(ReservationContext.class);
  final Domain domain=mock(Domain.class);
  when(reserveContext.getDomain()).thenReturn(domain);
  when(domain.getName()).thenReturn("aaaaa");
  final Account account=mock(Account.class);
  when(account.getAccountId()).thenReturn(NETWORK_ID);
  when(reserveContext.getAccount()).thenReturn(account);
  final DomainVO domainVo=mock(DomainVO.class);
  when(_domainDao.findById(NETWORK_ID)).thenReturn(domainVo);
  final AccountVO accountVo=mock(AccountVO.class);
  when(_accountDao.findById(NETWORK_ID)).thenReturn(accountVo);
  final HostVO host=mock(HostVO.class);
  when(host.getId()).thenReturn(NETWORK_ID);
  final NuageVspDeviceVO nuageVspDevice=mock(NuageVspDeviceVO.class);
  when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);
  when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));
  when(_hostDao.findById(NETWORK_ID)).thenReturn(host);
  when(_networkDao.acquireInLockTable(NETWORK_ID,1200)).thenReturn(network);
  when(_nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());
  when(_nuageVspManager.getGatewaySystemIds()).thenReturn(new ArrayList<String>());
  final Answer answer=mock(Answer.class);
  when(answer.getResult()).thenReturn(true);
  when(_agentManager.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  final DataCenter dc=mock(DataCenter.class);
  when(dc.getId()).thenReturn(NETWORK_ID);
  final DeployDestination deployDest=mock(DeployDestination.class);
  when(deployDest.getDataCenter()).thenReturn(dc);
  _nuageVspGuestNetworkGuru.implement(network,offering,deployDest,reserveContext);
}
