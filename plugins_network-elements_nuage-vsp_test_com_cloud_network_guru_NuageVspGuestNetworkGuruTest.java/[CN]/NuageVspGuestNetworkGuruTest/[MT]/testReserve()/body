{
  final Network network=mock(Network.class);
  when(network.getUuid()).thenReturn("aaaaaa");
  when(network.getDataCenterId()).thenReturn(NETWORK_ID);
  when(network.getNetworkOfferingId()).thenReturn(NETWORK_ID);
  when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);
  when(network.getDomainId()).thenReturn(NETWORK_ID);
  when(network.getAccountId()).thenReturn(NETWORK_ID);
  when(network.getVpcId()).thenReturn(null);
  when(network.getBroadcastUri()).thenReturn(new URI("vsp://aaaaaa-aavvv/10.1.1.1"));
  final DataCenterVO dataCenter=mock(DataCenterVO.class);
  when(dcdao.findById(NETWORK_ID)).thenReturn(dataCenter);
  final AccountVO networksAccount=mock(AccountVO.class);
  when(networksAccount.getUuid()).thenReturn("aaaa-abbbb");
  when(networksAccount.getType()).thenReturn(Account.ACCOUNT_TYPE_NORMAL);
  when(accountDao.findById(NETWORK_ID)).thenReturn(networksAccount);
  final DomainVO networksDomain=mock(DomainVO.class);
  when(networksDomain.getUuid()).thenReturn("aaaaa-bbbbb");
  when(domainDao.findById(NETWORK_ID)).thenReturn(networksDomain);
  final NicVO nicvo=mock(NicVO.class);
  when(nicvo.getId()).thenReturn(NETWORK_ID);
  when(nicvo.getMacAddress()).thenReturn("aa-aa-aa-aa-aa-aa");
  when(nicvo.getUuid()).thenReturn("aaaa-fffff");
  when(nicDao.findById(NETWORK_ID)).thenReturn(nicvo);
  final VirtualMachineProfile vm=mock(VirtualMachineProfile.class);
  when(vm.getType()).thenReturn(VirtualMachine.Type.User);
  when(vm.getInstanceName()).thenReturn("");
  when(vm.getUuid()).thenReturn("aaaa-bbbbb");
  NicProfile nicProfile=mock(NicProfile.class);
  when(nicProfile.getUuid()).thenReturn("aaa-bbbb");
  when(nicProfile.getId()).thenReturn(NETWORK_ID);
  when(nicProfile.getMacAddress()).thenReturn("aa-aa-aa-aa-aa-aa");
  final NetworkOfferingVO ntwkoffering=mock(NetworkOfferingVO.class);
  when(ntwkoffering.getId()).thenReturn(NETWORK_ID);
  when(ntwkOfferDao.findById(NETWORK_ID)).thenReturn(ntwkoffering);
  final HostVO host=mock(HostVO.class);
  when(host.getId()).thenReturn(NETWORK_ID);
  final NuageVspDeviceVO nuageVspDevice=mock(NuageVspDeviceVO.class);
  when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);
  when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));
  when(hostDao.findById(NETWORK_ID)).thenReturn(host);
  when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));
  final ReserveVmInterfaceVspAnswer answer=mock(ReserveVmInterfaceVspAnswer.class);
  when(answer.getResult()).thenReturn(true);
  when(answer.getInterfaceDetails()).thenReturn(new ArrayList<Map<String,String>>());
  when(agentManager.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer);
  guru.reserve(nicProfile,network,vm,mock(DeployDestination.class),mock(ReservationContext.class));
}
