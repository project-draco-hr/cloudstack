def set_master(self):
    ' Set the current router to master '
    if (not self.cl.is_redundant()):
        logging.error('Set master called on non-redundant router')
        return
    self.set_lock()
    logging.debug('Setting router to master')
    dev = ''
    interfaces = [interface for interface in self.address.get_interfaces() if interface.is_public()]
    route = CsRoute()
    for interface in interfaces:
        if (dev == interface.get_device()):
            continue
        dev = interface.get_device()
        logging.info(('Will proceed configuring device ==> %s' % dev))
        cmd = ('ip link set %s up' % dev)
        if CsDevice(dev, self.config).waitfordevice():
            CsHelper.execute(cmd)
            logging.info(('Bringing public interface %s up' % dev))
            try:
                gateway = interface.get_gateway()
                logging.info(('Adding gateway ==> %s to device ==> %s' % (gateway, dev)))
                if (dev == CsHelper.PUBLIC_INTERFACES[self.cl.get_type()]):
                    route.add_defaultroute(gateway)
            except:
                logging.error(('ERROR getting gateway from device %s' % dev))
        else:
            logging.error(('Device %s was not ready could not bring it up' % dev))
    logging.debug('Configuring static routes')
    static_routes = CsStaticRoutes('staticroutes', self.config)
    static_routes.process()
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -c' % cmd))
    CsHelper.execute(('%s -f' % cmd))
    CsHelper.execute(('%s -R' % cmd))
    CsHelper.execute(('%s -B' % cmd))
    CsHelper.service('ipsec', 'restart')
    CsHelper.service('xl2tpd', 'restart')
    interfaces = [interface for interface in self.address.get_interfaces() if interface.needs_vrrp()]
    for interface in interfaces:
        CsPasswdSvc(interface.get_gateway()).restart()
    CsHelper.service('dnsmasq', 'restart')
    self.cl.set_master_state(True)
    self.cl.save()
    self.release_lock()
    interfaces = [interface for interface in self.address.get_interfaces() if interface.is_public()]
    CsHelper.reconfigure_interfaces(self.cl, interfaces)
    logging.info('Router switched to master mode')
