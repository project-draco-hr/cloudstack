def set_master(self):
    ' Set the current router to master '
    if (not self.cl.is_redundant()):
        logging.error('Set master called on non-redundant router')
        return
    '\n        if self.cl.is_master():\n            logging.error("Set master called on master node")\n            return\n        '
    ads = [o for o in self.address.get_ips() if o.is_public()]
    for o in ads:
        CsHelper.execute(('ifconfig %s down' % o.get_device()))
        CsHelper.execute(('ifconfig %s up' % o.get_device()))
        CsHelper.execute(('arping -I %s -A %s -c 1' % (o.get_device(), o.get_ip())))
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -c' % cmd))
    CsHelper.execute(('%s -f' % cmd))
    CsHelper.execute(('%s -R' % cmd))
    CsHelper.execute(('%s -B' % cmd))
    CsHelper.service('ipsec', 'restart')
    CsHelper.service('xl2tpd', 'restart')
    CsHelper.service('cloud-passwd-srvr', 'restart')
    CsHelper.service('dnsmasq', 'restart')
    self.cl.dbag['config']['redundant_master'] = 'true'
    self._set_priority(self.CS_PRIO_UP)
    self.cl.save()
    logging.info('Router switched to master mode')
