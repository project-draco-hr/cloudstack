def set_master(self):
    ' Set the current router to master '
    if (not self.cl.is_redundant()):
        logging.error('Set master called on non-redundant router')
        return
    self.set_lock()
    logging.debug('Setting router to master')
    self.address.process()
    logging.info('added default routes')
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -c' % cmd))
    CsHelper.execute(('%s -f' % cmd))
    CsHelper.execute(('%s -R' % cmd))
    CsHelper.execute(('%s -B' % cmd))
    CsHelper.service('ipsec', 'restart')
    CsHelper.service('xl2tpd', 'restart')
    ads = [o for o in self.address.get_ips() if o.needs_vrrp()]
    for o in ads:
        CsPasswdSvc(o.get_gateway()).restart()
    CsHelper.service('dnsmasq', 'restart')
    self.cl.set_master_state(True)
    self.cl.save()
    self.release_lock()
    logging.info('Router switched to master mode')
