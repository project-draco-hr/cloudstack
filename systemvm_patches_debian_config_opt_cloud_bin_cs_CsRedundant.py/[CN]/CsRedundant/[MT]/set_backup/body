def set_backup(self):
    ' Set the current router to backup '
    if (not self.cl.is_redundant()):
        logging.error('Set backup called on non-redundant router')
        return
    '\n        if not self.cl.is_master():\n            logging.error("Set backup called on node that is already backup")\n            return\n        '
    logging.info('Router switched to backup mode')
    ads = [o for o in self.address.get_ips() if o.is_public()]
    for o in ads:
        CsHelper.execute(('ifconfig %s down' % o.get_device()))
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -d' % cmd))
    CsHelper.service('ipsec', 'stop')
    CsHelper.service('xl2tpd', 'stop')
    ads = [o for o in self.address.get_ips() if o.needs_vrrp()]
    for o in ads:
        pwdsvc = CsPasswdSvc(o.get_gateway()).stop()
    CsHelper.service('dnsmasq', 'stop')
    self.cl.dbag['config']['redundant_master'] = 'false'
    self.cl.save()
    logging.info('Router switched to backup mode')
