def set_backup(self):
    ' Set the current router to backup '
    if (not self.cl.is_redundant()):
        logging.error('Set backup called on non-redundant router')
        return
    self.set_lock()
    logging.debug('Setting router to backup')
    dev = ''
    ips = [ip for ip in self.address.get_ips() if (ip.is_public() and (ip.get_device() in PUBLIC_INTERFACE))]
    for ip in ips:
        if (dev == ip.get_device()):
            continue
        logging.info(('Bringing public interface %s down' % ip.get_device()))
        cmd2 = ('ip link set %s down' % ip.get_device())
        CsHelper.execute(cmd2)
        dev = ip.get_device()
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -d' % cmd))
    CsHelper.service('ipsec', 'stop')
    CsHelper.service('xl2tpd', 'stop')
    ips = [ip for ip in self.address.get_ips() if ip.needs_vrrp()]
    for ip in ips:
        CsPasswdSvc(ip.get_gateway()).stop()
    CsHelper.service('dnsmasq', 'stop')
    self.cl.set_master_state(False)
    self.cl.save()
    self.release_lock()
    logging.info('Router switched to backup mode')
