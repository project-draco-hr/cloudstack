def _redundant_on(self):
    guest = self.address.get_guest_if()
    if (guest is None):
        self.set_backup()
        self._redundant_off()
        return
    interfaces = [interface for interface in self.address.get_interfaces() if interface.is_guest()]
    isDeviceReady = False
    dev = ''
    for interface in interfaces:
        if (dev == interface.get_device()):
            continue
        dev = interface.get_device()
        logging.info('Wait for devices to be configured so we can start keepalived')
        devConfigured = CsDevice(dev, self.config).waitfordevice()
        if devConfigured:
            command = ("ip link show %s | grep 'state UP'" % dev)
            devUp = CsHelper.execute(command)
            if devUp:
                logging.info(("Device %s is present, let's start keepalive now." % dev))
                isDeviceReady = True
    if (not isDeviceReady):
        logging.info("Guest network not configured yet, let's stop router redundancy for now.")
        CsHelper.service('conntrackd', 'stop')
        CsHelper.service('keepalived', 'stop')
        return
    CsHelper.mkdir(self.CS_RAMDISK_DIR, 493, False)
    CsHelper.mount_tmpfs(self.CS_RAMDISK_DIR)
    CsHelper.mkdir(self.CS_ROUTER_DIR, 493, False)
    for s in self.CS_TEMPLATES:
        d = s
        if s.endswith('.templ'):
            d = s.replace('.templ', '')
        CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, s)), ('%s/%s' % (self.CS_ROUTER_DIR, d)))
    CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, 'keepalived.conf.templ')), self.KEEPALIVED_CONF)
    CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, 'checkrouter.sh.templ')), '/opt/cloud/bin/checkrouter.sh')
    CsHelper.execute('sed -i "s/--exec\\ \\$DAEMON;/--exec\\ \\$DAEMON\\ --\\ --vrrp;/g" /etc/init.d/keepalived')
    check_router = CsFile('/opt/cloud/bin/checkrouter.sh')
    check_router.greplace('[RROUTER_LOG]', self.RROUTER_LOG)
    check_router.commit()
    keepalived_conf = CsFile(self.KEEPALIVED_CONF)
    keepalived_conf.search(' router_id ', ('    router_id %s' % self.cl.get_name()))
    keepalived_conf.search(' interface ', ('    interface %s' % guest.get_device()))
    keepalived_conf.greplace('[RROUTER_BIN_PATH]', self.CS_ROUTER_DIR)
    keepalived_conf.section('authentication {', '}', ['        auth_type AH \n', ('        auth_pass %s\n' % self.cl.get_router_password())])
    keepalived_conf.section('virtual_ipaddress {', '}', self._collect_ips())
    conntrackd_template_conf = ('%s/%s' % (self.CS_TEMPLATES_DIR, 'conntrackd.conf.templ'))
    conntrackd_temp_bkp = ('%s/%s' % (self.CS_TEMPLATES_DIR, 'conntrackd.conf.templ.bkp'))
    CsHelper.copy(conntrackd_template_conf, conntrackd_temp_bkp)
    conntrackd_tmpl = CsFile(conntrackd_template_conf)
    conntrackd_tmpl.section('Multicast {', '}', ['IPv4_address 225.0.0.50\n', 'Group 3780\n', ('IPv4_interface %s\n' % guest.get_ip()), ('Interface %s\n' % guest.get_device()), 'SndSocketBuffer 1249280\n', 'RcvSocketBuffer 1249280\n', 'Checksum on\n'])
    conntrackd_tmpl.section('Address Ignore {', '}', self._collect_ignore_ips())
    conntrackd_tmpl.commit()
    conntrackd_conf = CsFile(self.CONNTRACKD_CONF)
    is_equals = conntrackd_tmpl.compare(conntrackd_conf)
    force_keepalived_restart = False
    proc = CsProcess(['/etc/conntrackd/conntrackd.conf'])
    if ((not proc.find()) and (not is_equals)):
        CsHelper.copy(conntrackd_template_conf, self.CONNTRACKD_CONF)
        CsHelper.service('conntrackd', 'restart')
        force_keepalived_restart = True
    CsHelper.copy(conntrackd_temp_bkp, conntrackd_template_conf)
    CsHelper.execute(('rm -rf %s' % conntrackd_temp_bkp))
    heartbeat_cron = CsFile('/etc/cron.d/heartbeat')
    heartbeat_cron.add('SHELL=/bin/bash', 0)
    heartbeat_cron.add('PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin', 1)
    heartbeat_cron.add(('* * * * * root $SHELL %s/check_heartbeat.sh 2>&1 > /dev/null' % self.CS_ROUTER_DIR), (-1))
    heartbeat_cron.add(('* * * * * root sleep 30; $SHELL %s/check_heartbeat.sh 2>&1 > /dev/null' % self.CS_ROUTER_DIR), (-1))
    heartbeat_cron.commit()
    proc = CsProcess(['/usr/sbin/keepalived'])
    if ((not proc.find()) or keepalived_conf.is_changed() or force_keepalived_restart):
        keepalived_conf.commit()
        CsHelper.service('keepalived', 'restart')
