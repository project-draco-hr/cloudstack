def _redundant_on(self):
    guest = self.address.get_guest_if()
    if (self.cl.is_master() or (guest is None)):
        for obj in [o for o in self.address.get_ips() if o.is_public()]:
            self.check_is_up(obj.get_device())
    if (guest is None):
        self._redundant_off()
        return
    CsHelper.mkdir(self.CS_RAMDISK_DIR, 493, False)
    CsHelper.mount_tmpfs(self.CS_RAMDISK_DIR)
    CsHelper.mkdir(self.CS_ROUTER_DIR, 493, False)
    for s in self.CS_TEMPLATES:
        d = s
        if s.endswith('.templ'):
            d = s.replace('.templ', '')
        CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, s)), ('%s/%s' % (self.CS_ROUTER_DIR, d)))
    CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, 'keepalived.conf.templ')), self.KEEPALIVED_CONF)
    CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, 'conntrackd.conf.templ')), self.CONNTRACKD_CONF)
    CsHelper.copy_if_needed(('%s/%s' % (self.CS_TEMPLATES_DIR, 'checkrouter.sh.templ')), '/opt/cloud/bin/checkrouter.sh')
    CsHelper.execute('sed -i "s/--exec\\ \\$DAEMON;/--exec\\ \\$DAEMON\\ --\\ --vrrp;/g" /etc/init.d/keepalived')
    check_router = CsFile('/opt/cloud/bin/checkrouter.sh')
    check_router.greplace('[RROUTER_LOG]', self.RROUTER_LOG)
    check_router.commit()
    keepalived_conf = CsFile(self.KEEPALIVED_CONF)
    keepalived_conf.search(' router_id ', ('    router_id %s' % self.cl.get_name()))
    keepalived_conf.search(' interface ', ('    interface %s' % guest.get_device()))
    keepalived_conf.search(' virtual_router_id ', ('    virtual_router_id %s' % self.cl.get_router_id()))
    keepalived_conf.greplace('[RROUTER_BIN_PATH]', self.CS_ROUTER_DIR)
    keepalived_conf.section('authentication {', '}', ['        auth_type AH \n', ('        auth_pass %s\n' % self.cl.get_router_password())])
    keepalived_conf.section('virtual_ipaddress {', '}', self._collect_ips())
    keepalived_conf.commit()
    connt = CsFile(self.CONNTRACKD_CONF)
    if (guest is not None):
        connt.section('Multicast {', '}', ['IPv4_address 225.0.0.50\n', 'Group 3780\n', ('IPv4_interface %s\n' % guest.get_ip()), ('Interface %s\n' % guest.get_device()), 'SndSocketBuffer 1249280\n', 'RcvSocketBuffer 1249280\n', 'Checksum on\n'])
        connt.section('Address Ignore {', '}', self._collect_ignore_ips())
        connt.commit()
    if connt.is_changed():
        CsHelper.service('conntrackd', 'restart')
    heartbeat_cron = CsFile('/etc/cron.d/heartbeat')
    heartbeat_cron.add('SHELL=/bin/bash', 0)
    heartbeat_cron.add('PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin', 1)
    heartbeat_cron.add(('* * * * * root $SHELL %s/check_heartbeat.sh 2>&1 > /dev/null' % self.CS_ROUTER_DIR), (-1))
    heartbeat_cron.add(('* * * * * root sleep 30; $SHELL %s/check_heartbeat.sh 2>&1 > /dev/null' % self.CS_ROUTER_DIR), (-1))
    heartbeat_cron.commit()
    keepalived_cron = CsFile('/etc/cron.d/keepalived')
    keepalived_cron.add('SHELL=/bin/bash', 0)
    keepalived_cron.add('PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin', 1)
    keepalived_cron.add('@reboot root service keepalived start', (-1))
    keepalived_cron.commit()
    conntrackd_cron = CsFile('/etc/cron.d/conntrackd')
    conntrackd_cron.add('SHELL=/bin/bash', 0)
    conntrackd_cron.add('PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin', 1)
    conntrackd_cron.add('@reboot root service conntrackd start', (-1))
    conntrackd_cron.commit()
    proc = CsProcess(['/usr/sbin/keepalived', '--vrrp'])
    if ((not proc.find()) or keepalived_conf.is_changed()):
        CsHelper.service('keepalived', 'restart')
