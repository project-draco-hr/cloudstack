def set_fault(self):
    ' Set fault mode on this router '
    if (not self.cl.is_redundant()):
        logging.error('Set fault called on non-redundant router')
        return
    self.set_lock()
    logging.info('Router switched to fault mode')
    interfaces = [interface for interface in self.address.get_interfaces() if interface.is_public()]
    for interface in interfaces:
        CsHelper.execute(('ifconfig %s down' % interface.get_device()))
    cmd = ('%s -C %s' % (self.CONNTRACKD_BIN, self.CONNTRACKD_CONF))
    CsHelper.execute(('%s -s' % cmd))
    CsHelper.service('ipsec', 'stop')
    CsHelper.service('xl2tpd', 'stop')
    CsHelper.service('dnsmasq', 'stop')
    interfaces = [interface for interface in self.address.get_interfaces() if interface.needs_vrrp()]
    for interface in interfaces:
        CsPasswdSvc(interface.get_gateway()).stop()
    self.cl.set_fault_state()
    self.cl.save()
    self.release_lock()
    logging.info('Router switched to fault mode')
    interfaces = [interface for interface in self.address.get_interfaces() if interface.is_public()]
    CsHelper.reconfigure_interfaces(self.cl, interfaces)
