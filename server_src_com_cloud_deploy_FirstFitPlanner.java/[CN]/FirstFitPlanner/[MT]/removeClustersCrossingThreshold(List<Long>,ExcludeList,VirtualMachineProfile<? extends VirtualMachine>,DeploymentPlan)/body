{
  Map<Short,Float> capacityThresholdMap=getCapacityThresholdMap();
  List<Short> capacityList=getCapacitiesForCheckingThreshold();
  List<Long> clustersCrossingThreshold=new ArrayList<Long>();
  ServiceOffering offering=vmProfile.getServiceOffering();
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  for (  short capacity : capacityList) {
    if (clusterListForVmAllocation == null || clusterListForVmAllocation.size() == 0) {
      return;
    }
    if (capacity == Capacity.CAPACITY_TYPE_CPU) {
      clustersCrossingThreshold=_capacityDao.listClustersCrossingThreshold(Capacity.CAPACITY_TYPE_CPU,plan.getDataCenterId(),capacityThresholdMap.get(capacity),cpu_requested,ApiDBUtils.getCpuOverprovisioningFactor());
    }
 else {
      clustersCrossingThreshold=_capacityDao.listClustersCrossingThreshold(capacity,plan.getDataCenterId(),capacityThresholdMap.get(capacity),ram_requested,1.0f);
    }
    if (clustersCrossingThreshold != null && clustersCrossingThreshold.size() != 0) {
      avoid.addClusterList(clustersCrossingThreshold);
      clusterListForVmAllocation.removeAll(clustersCrossingThreshold);
      s_logger.debug("Cannot allocate cluster list " + clustersCrossingThreshold.toString() + " for vm creation since their allocated percentage"+ " crosses the disable capacity threshold: "+ capacityThresholdMap.get(capacity)+ " for capacity Type : "+ capacity+ ", skipping these clusters");
    }
  }
}
