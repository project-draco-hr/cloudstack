{
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("Listing pods in order of aggregate capacity, that have (atleast one host with) enough CPU and RAM capacity under this Zone: " + zoneId);
  }
  String capacityTypeToOrder=_configDao.getValue(Config.HostCapacityTypeToOrderClusters.key());
  short capacityType=CapacityVO.CAPACITY_TYPE_CPU;
  if ("RAM".equalsIgnoreCase(capacityTypeToOrder)) {
    capacityType=CapacityVO.CAPACITY_TYPE_MEMORY;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug("CPUOverprovisioningFactor considered: " + cpuOverprovisioningFactor);
  }
  List<Long> podIdswithEnoughCapacity=_capacityDao.listPodsByHostCapacities(zoneId,requiredCpu,requiredRam,capacityType,cpuOverprovisioningFactor);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("PodId List having enough CPU and RAM capacity: " + podIdswithEnoughCapacity);
  }
  Pair<List<Long>,Map<Long,Double>> result=_capacityDao.orderPodsByAggregateCapacity(zoneId,capacityType,cpuOverprovisioningFactor);
  List<Long> podIdsOrderedByAggregateCapacity=result.first();
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("PodId List in order of aggregate capacity: " + podIdsOrderedByAggregateCapacity);
  }
  podIdsOrderedByAggregateCapacity.retainAll(podIdswithEnoughCapacity);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace("PodId List having enough CPU and RAM capacity & in order of aggregate capacity: " + podIdsOrderedByAggregateCapacity);
  }
  return result;
}
