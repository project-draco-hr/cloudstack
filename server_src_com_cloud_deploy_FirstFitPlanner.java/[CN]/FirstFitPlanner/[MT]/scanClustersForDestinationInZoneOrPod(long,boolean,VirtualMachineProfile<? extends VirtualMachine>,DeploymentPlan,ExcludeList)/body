{
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int requiredCpu=offering.getCpu() * offering.getSpeed();
  long requiredRam=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  Pair<List<Long>,Map<Long,Double>> clusterCapacityInfo=listClustersByCapacity(id,requiredCpu,requiredRam,avoid,isZone,cpuOverprovisioningFactor);
  List<Long> prioritizedClusterIds=clusterCapacityInfo.first();
  if (!prioritizedClusterIds.isEmpty()) {
    if (avoid.getClustersToAvoid() != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("Removing from the clusterId list these clusters from avoid set: " + avoid.getClustersToAvoid());
      }
      prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
    }
    if (!isRootAdmin(plan.getReservationContext())) {
      List<Long> disabledClusters=new ArrayList<Long>();
      if (isZone) {
        disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      }
 else {
        disabledClusters=listDisabledClusters(plan.getDataCenterId(),id);
      }
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Removing from the clusterId list these clusters that are disabled/clusters under disabled pods: " + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("No clusters found having a host with enough capacity, returning.");
    }
    return null;
  }
  if (!prioritizedClusterIds.isEmpty()) {
    List<Long> clusterList=reorderClusters(id,isZone,clusterCapacityInfo,vmProfile,plan);
    return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc);
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("No clusters found after removing disabled clusters and clusters in avoid list, returning.");
    }
    return null;
  }
}
