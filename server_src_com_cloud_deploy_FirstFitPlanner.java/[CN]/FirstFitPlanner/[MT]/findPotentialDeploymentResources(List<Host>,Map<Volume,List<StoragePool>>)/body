{
  s_logger.debug("Trying to find a potenial host and associated storage pools from the suitable host/pool lists for this VM");
  boolean hostCanAccessPool=false;
  boolean haveEnoughSpace=false;
  Map<Volume,StoragePool> storage=new HashMap<Volume,StoragePool>();
  TreeSet<Volume> volumesOrderBySizeDesc=new TreeSet<Volume>(new Comparator<Volume>(){
    @Override public int compare(    Volume v1,    Volume v2){
      if (v1.getSize() < v2.getSize())       return 1;
 else       return -1;
    }
  }
);
  volumesOrderBySizeDesc.addAll(suitableVolumeStoragePools.keySet());
  boolean multipleVolume=volumesOrderBySizeDesc.size() > 1;
  for (  Host potentialHost : suitableHosts) {
    Map<StoragePool,List<Volume>> volumeAllocationMap=new HashMap<StoragePool,List<Volume>>();
    for (    Volume vol : volumesOrderBySizeDesc) {
      haveEnoughSpace=false;
      s_logger.debug("Checking if host: " + potentialHost.getId() + " can access any suitable storage pool for volume: "+ vol.getVolumeType());
      List<StoragePool> volumePoolList=suitableVolumeStoragePools.get(vol);
      hostCanAccessPool=false;
      for (      StoragePool potentialSPool : volumePoolList) {
        if (hostCanAccessSPool(potentialHost,potentialSPool)) {
          hostCanAccessPool=true;
          if (multipleVolume) {
            List<Volume> requestVolumes=null;
            if (volumeAllocationMap.containsKey(potentialSPool))             requestVolumes=volumeAllocationMap.get(potentialSPool);
 else             requestVolumes=new ArrayList<Volume>();
            requestVolumes.add(vol);
            if (!_storageMgr.storagePoolHasEnoughSpace(requestVolumes,potentialSPool))             continue;
            volumeAllocationMap.put(potentialSPool,requestVolumes);
          }
          storage.put(vol,potentialSPool);
          haveEnoughSpace=true;
          break;
        }
      }
      if (!hostCanAccessPool) {
        break;
      }
      if (!haveEnoughSpace) {
        s_logger.warn("insufficient capacity to allocate all volumes");
        break;
      }
    }
    if (hostCanAccessPool && haveEnoughSpace) {
      s_logger.debug("Found a potential host " + "id: " + potentialHost.getId() + " name: "+ potentialHost.getName()+ " and associated storage pools for this VM");
      return new Pair<Host,Map<Volume,StoragePool>>(potentialHost,storage);
    }
  }
  s_logger.debug("Could not find a potential host that has associated storage pools from the suitable host/pool lists for this VM");
  return null;
}
