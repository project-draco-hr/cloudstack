{
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  s_logger.debug("In FirstFitPlanner:: plan");
  s_logger.debug("Trying to allocate a host and storage pools from dc:" + plan.getDataCenterId() + ", pod:"+ plan.getPodId()+ ",cluster:"+ plan.getClusterId()+ ", requested cpu: "+ cpu_requested+ ", requested ram: "+ ram_requested);
  s_logger.debug("Is ROOT volume READY (pool already allocated)?: " + (plan.getPoolId() != null ? "Yes" : "No"));
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug("DeploymentPlan has host_id specified, making no checks on this host, looks like admin test: " + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (host == null) {
      s_logger.debug("The specified host cannot be found");
    }
 else {
      s_logger.debug("Looking for suitable pools for this host under zone: " + host.getDataCenterId() + ", pod: "+ host.getPodId()+ ", cluster: "+ host.getClusterId());
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(vm.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,potentialResources.second());
        s_logger.debug("Returning Deployment Destination: " + dest);
        return dest;
      }
    }
    s_logger.debug("Cannnot deploy to specified host, returning.");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug("This VM has last host_id specified, trying to choose the same host: " + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug("The last host of this VM cannot be found");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(vm.getDataCenterId(),vm.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true)) {
            s_logger.debug("The last host of this VM is UP and has enough capacity");
            s_logger.debug("Now checking for suitable pools under zone: " + vm.getDataCenterId() + ", pod: "+ vm.getPodId()+ ", cluster: "+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(vm.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,potentialResources.second());
                s_logger.debug("Returning Deployment Destination: " + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug("The last host of this VM does not have enough capacity");
          }
        }
      }
 else {
        s_logger.debug("The last host of this VM is not UP or is not enabled, host status is: " + host.getStatus().name() + ", host allocation state is: "+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug("Cannot choose the last host to deploy this VM ");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug("Cannot deploy to specified plan, allocation state is disabled, returning.");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug("Searching resources only under specified Cluster: " + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug("The specified cluster cannot be found, returning.");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug("Searching resources only under specified Pod: " + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Removing from the clusterId list these clusters from avoid set: " + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug("Removing from the clusterId list these clusters that are disabled: " + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("No clusters found under this pod, having a host with enough capacity, returning.");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug("The specified Pod cannot be found, returning.");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug("Searching all possible resources under this Zone: " + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Removing from the clusterId list these clusters from avoid set: " + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug("Removing from the clusterId list these clusters that are disabled/clusters under disabled pods: " + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("No clusters found having a host with enough capacity, returning.");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug("Removing from the pod list these pods from avoid set: " + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug("No clusters found after removing disabled clusters and clusters in avoid list, returning.");
      }
      return null;
    }
  }
}
