{
  Map<Short,Float> capacityThresholdMap=getCapacityThresholdMap();
  List<Short> capacityList=getCapacitiesForCheckingThreshold();
  List<Long> clustersCrossingThreshold=new ArrayList<Long>();
  ServiceOffering offering=vmProfile.getServiceOffering();
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  for (  Long clusterId : clusterList) {
    for (    short capacity : capacityList) {
      List<SummedCapacity> summedCapacityList=_capacityDao.findCapacityBy(new Integer(capacity),null,null,clusterId);
      if (summedCapacityList != null && summedCapacityList.size() != 0 && summedCapacityList.get(0).getTotalCapacity() != 0) {
        double used=(double)(summedCapacityList.get(0).getUsedCapacity() + summedCapacityList.get(0).getReservedCapacity());
        double total=summedCapacityList.get(0).getTotalCapacity();
        if (capacity == Capacity.CAPACITY_TYPE_CPU) {
          total=total * ApiDBUtils.getCpuOverprovisioningFactor();
          used=used + cpu_requested;
        }
 else {
          used=used + ram_requested;
        }
        double usedPercentage=used / total;
        if (usedPercentage > capacityThresholdMap.get(capacity)) {
          avoid.addCluster(clusterId);
          clustersCrossingThreshold.add(clusterId);
          s_logger.debug("Cannot allocate cluster " + clusterId + " for vm creation since its allocated percentage: "+ usedPercentage+ " will cross the disable capacity threshold: "+ capacityThresholdMap.get(capacity)+ " for capacity Type : "+ capacity+ ", skipping this cluster");
          break;
        }
      }
    }
  }
  clusterList.removeAll(clustersCrossingThreshold);
}
