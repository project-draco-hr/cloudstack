{
  CapacityVO capacityCpu=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_CPU);
  CapacityVO capacityMem=_capacityDao.findByHostIdType(hostId,CapacityVO.CAPACITY_TYPE_MEMORY);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    capacityCpu=_capacityDao.lockRow(capacityCpu.getId(),true);
    capacityMem=_capacityDao.lockRow(capacityMem.getId(),true);
    long usedCpu=capacityCpu.getUsedCapacity();
    long usedMem=capacityMem.getUsedCapacity();
    long reservedCpu=capacityCpu.getReservedCapacity();
    long reservedMem=capacityMem.getReservedCapacity();
    long totalCpu=capacityCpu.getTotalCapacity();
    long totalMem=capacityMem.getTotalCapacity();
    boolean success=false;
    if (fromLastHost) {
      if (reservedCpu >= cpu && reservedMem >= ram) {
        capacityCpu.setReservedCapacity(reservedCpu - cpu);
        capacityMem.setReservedCapacity(reservedMem - ram);
        success=true;
      }
    }
 else {
      if ((reservedCpu + usedCpu + cpu <= totalCpu) && (reservedMem + usedMem + ram <= totalMem)) {
        capacityCpu.setUsedCapacity(usedCpu + cpu);
        capacityMem.setUsedCapacity(totalMem + ram);
        success=true;
      }
    }
    if (success) {
      _capacityDao.update(capacityCpu.getId(),capacityCpu);
      _capacityDao.update(capacityMem.getId(),capacityMem);
    }
    txn.commit();
    return success;
  }
 catch (  Exception e) {
    txn.rollback();
    return false;
  }
}
