{
  List<VolumeVO> volumesTobeCreated=_volsDao.findUsableVolumesForInstance(vmProfile.getId());
  Map<Volume,List<StoragePool>> suitableVolumeStoragePools=new HashMap<Volume,List<StoragePool>>();
  List<Volume> readyAndReusedVolumes=new ArrayList<Volume>();
  for (  VolumeVO toBeCreated : volumesTobeCreated) {
    s_logger.debug("Checking suitable pools for volume (Id, Type): (" + toBeCreated.getId() + ","+ toBeCreated.getVolumeType().name()+ ")");
    if (plan.getPoolId() != null) {
      if (toBeCreated.getState() == Volume.State.Ready && toBeCreated.getPoolId() != null) {
        s_logger.debug("Volume is in READY state and has pool already allocated, checking if pool can be reused, poolId: " + toBeCreated.getPoolId());
        List<StoragePool> suitablePools=new ArrayList<StoragePool>();
        StoragePoolVO pool=_storagePoolDao.findById(toBeCreated.getPoolId());
        if (!pool.isInMaintenance()) {
          if (!avoid.shouldAvoid(pool)) {
            long exstPoolDcId=pool.getDataCenterId();
            long exstPoolPodId=pool.getPodId() != null ? pool.getPodId() : -1;
            long exstPoolClusterId=pool.getClusterId() != null ? pool.getClusterId() : -1;
            if (plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId) {
              s_logger.debug("Planner need not allocate a pool for this volume since its READY");
              suitablePools.add(pool);
              suitableVolumeStoragePools.put(toBeCreated,suitablePools);
              readyAndReusedVolumes.add(toBeCreated);
              continue;
            }
 else {
              s_logger.debug("Pool of the volume does not fit the specified plan, need to reallocate a pool for this volume");
            }
          }
 else {
            s_logger.debug("Pool of the volume is in avoid set, need to reallocate a pool for this volume");
          }
        }
 else {
          s_logger.debug("Pool of the volume is in maintenance, need to reallocate a pool for this volume");
        }
      }
    }
    s_logger.debug("Calling StoragePoolAllocators to find suitable pools");
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(toBeCreated.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(toBeCreated,diskOffering,vmProfile.getHypervisorType());
    boolean useLocalStorage=false;
    if (vmProfile.getType() != VirtualMachine.Type.User) {
      String ssvmUseLocalStorage=_configDao.getValue(Config.SystemVMUseLocalStorage.key());
      if (ssvmUseLocalStorage.equalsIgnoreCase("true")) {
        useLocalStorage=true;
      }
    }
 else {
      useLocalStorage=diskOffering.getUseLocalStorage();
    }
    diskProfile.setUseLocalStorage(useLocalStorage);
    boolean foundPotentialPools=false;
    Enumeration<StoragePoolAllocator> enPool=_storagePoolAllocators.enumeration();
    while (enPool.hasMoreElements()) {
      final StoragePoolAllocator allocator=enPool.nextElement();
      final List<StoragePool> suitablePools=allocator.allocateToPool(diskProfile,vmProfile.getTemplate(),plan,avoid,returnUpTo);
      if (suitablePools != null && !suitablePools.isEmpty()) {
        suitableVolumeStoragePools.put(toBeCreated,suitablePools);
        foundPotentialPools=true;
        break;
      }
    }
    if (!foundPotentialPools) {
      s_logger.debug("No suitable pools found for volume: " + toBeCreated + " under cluster: "+ plan.getClusterId());
      suitableVolumeStoragePools.clear();
      break;
    }
  }
  if (suitableVolumeStoragePools.isEmpty()) {
    s_logger.debug("No suitable pools found");
  }
  return new Pair<Map<Volume,List<StoragePool>>,List<Volume>>(suitableVolumeStoragePools,readyAndReusedVolumes);
}
