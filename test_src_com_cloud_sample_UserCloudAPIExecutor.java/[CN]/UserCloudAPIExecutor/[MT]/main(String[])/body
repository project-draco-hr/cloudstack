{
  String host=null;
  String apiUrl=null;
  String apiKey=null;
  String secretKey=null;
  try {
    Properties prop=new Properties();
    prop.load(new FileInputStream("usercloud.properties"));
    host=prop.getProperty("host");
    if (host == null) {
      System.out.println("Please specify a valid host in the format of http(s)://:/client/api in your usercloud.properties file.");
    }
    apiUrl=prop.getProperty("apiUrl");
    if (apiUrl == null) {
      System.out.println("Please specify a valid API URL in the format of command=&param1=&param2=... in your usercloud.properties file.");
    }
    apiKey=prop.getProperty("apiKey");
    if (apiKey == null) {
      System.out.println("Please specify your API Key as provided by your CloudStack vendor in your usercloud.properties file.");
    }
    secretKey=prop.getProperty("secretKey");
    if (secretKey == null) {
      System.out.println("Please specify your secret Key as provided by your CloudStack vendor in your usercloud.properties file.");
    }
    if (apiUrl == null || apiKey == null || secretKey == null) {
      return;
    }
    System.out.println("Constructing API call to host = '" + host + "' with API command = '"+ apiUrl+ "' using apiKey = '"+ apiKey+ "' and secretKey = '"+ secretKey+ "'");
    String encodedApiKey=URLEncoder.encode(apiKey,"UTF-8");
    List<String> sortedParams=new ArrayList<String>();
    sortedParams.add("apikey=" + encodedApiKey.toLowerCase());
    StringTokenizer st=new StringTokenizer(apiUrl,"&");
    String url=null;
    boolean first=true;
    while (st.hasMoreTokens()) {
      String paramValue=st.nextToken();
      String param=paramValue.substring(0,paramValue.indexOf("="));
      String value=URLEncoder.encode(paramValue.substring(paramValue.indexOf("=") + 1,paramValue.length()),"UTF-8");
      if (first) {
        url=param + "=" + value;
        first=false;
      }
 else {
        url=url + "&" + param+ "="+ value;
      }
      sortedParams.add(param.toLowerCase() + "=" + value.toLowerCase());
    }
    Collections.sort(sortedParams);
    System.out.println("Sorted Parameters: " + sortedParams);
    String sortedUrl=null;
    first=true;
    for (    String param : sortedParams) {
      if (first) {
        sortedUrl=param;
        first=false;
      }
 else {
        sortedUrl=sortedUrl + "&" + param;
      }
    }
    System.out.println("sorted URL : " + sortedUrl);
    String encodedSignature=signRequest(sortedUrl,secretKey);
    String finalUrl=host + "?" + url+ "&apiKey="+ apiKey+ "&signature="+ encodedSignature;
    System.out.println("final URL : " + finalUrl);
    HttpClient client=new HttpClient();
    HttpMethod method=new GetMethod(finalUrl);
    int responseCode=client.executeMethod(method);
    if (responseCode == 200) {
      System.out.println("Successfully executed command");
    }
 else {
      System.out.println("Unable to execute command with response code: " + responseCode);
    }
  }
 catch (  Throwable t) {
    System.out.println(t);
  }
}
