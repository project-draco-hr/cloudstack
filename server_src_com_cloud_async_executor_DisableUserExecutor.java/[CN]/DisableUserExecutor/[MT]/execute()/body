{
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  Long param=gson.fromJson(job.getCmdInfo(),Long.class);
  SyncQueueItemVO syncItem=getSyncSource();
  if (syncItem == null) {
    initialSchedule(managementServer,param.longValue());
  }
 else {
    if (allRouterOperationCeased(job)) {
      if (s_logger.isInfoEnabled())       s_logger.info("All previous router operations have ceased, we can now disable account of the user " + param);
      UserVO user=asyncMgr.getExecutorContext().getUserDao().findById(param.longValue());
      if (user != null) {
        if (managementServer.disableAccount(user.getAccountId())) {
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,"success");
        }
 else {
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,"failed");
        }
      }
 else {
        if (s_logger.isInfoEnabled())         s_logger.info("User " + param + " no longer exists, assuming it is already disbled");
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,"success");
      }
    }
 else {
      if (s_logger.isInfoEnabled())       s_logger.info("Previous operation on router " + syncItem.getContentId() + " has ceased, still more to go to disable account for user "+ param);
    }
  }
  return true;
}
