@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_applyNetworkRules_MasterDown_deleteNetworkRules(self):
    'Test apply network rules when master down and delete network rules\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.debug(('Network state: %s' % nw_response.state))
    self.assertEqual(nw_response.state, 'Allocated', 'The network should be in allocated state after creation')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(routers, None, 'Routers should not be spawned when network is in allocated state')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm should be in running state after deployment')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    if (routers[0].redundantstate == 'MASTER'):
        master_router = routers[0]
        backup_router = routers[1]
    else:
        master_router = routers[1]
        backup_router = routers[0]
    self.debug(('Stopping router ID: %s' % master_router.id))
    try:
        cmd = stopRouter.stopRouterCmd()
        cmd.id = master_router.id
        self.apiclient.stopRouter(cmd)
    except Exception as e:
        self.fail('Failed to stop master router..')
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network.id)
    self.debug(('Associated %s with network %s' % (public_ip.ipaddress.ipaddress, network.id)))
    self.debug(('Enabling static NAT for IP: %s' % public_ip.ipaddress.ipaddress))
    try:
        static_nat = StaticNATRule.create(self.apiclient, self.services['fw_rule'], ipaddressid=public_ip.ipaddress.id)
        static_nat.enable(self.apiclient, ipaddressid=public_ip.ipaddress.id, virtualmachineid=virtual_machine.id)
        self.debug(('Static NAT enabled for IP: %s' % public_ip.ipaddress.ipaddress))
    except Exception as e:
        self.fail(('Failed to enable static NAT on IP: %s - %s' % (public_ip.ipaddress.ipaddress, e)))
    public_ips = PublicIPAddress.list(self.apiclient, networkid=network.id, listall=True, isstaticnat=True)
    self.assertEqual(isinstance(public_ips, list), True, 'List public Ip for network should list the Ip addr')
    self.assertEqual(public_ips[0].ipaddress, public_ip.ipaddress.ipaddress, 'List public Ip for network should list the Ip addr')
    self.debug(('creating a FW rule on IP: %s' % public_ip.ipaddress.ipaddress))
    fw_rule = FireWallRule.create(self.apiclient, ipaddressid=public_ip.ipaddress.id, protocol='TCP', cidrlist=[self.services['fw_rule']['cidr']], startport=self.services['fw_rule']['startport'], endport=self.services['fw_rule']['endport'])
    self.debug(('Created a firewall rule on 22 port of IP: %s' % public_ip.ipaddress.ipaddress))
    self.debug('Trying to SSH into the virtual machine')
    try:
        virtual_machine.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
        self.debug('SSH to guest VM succeeded')
    except Exception as e:
        self.fail(('SSH to guest VM failed: %s' % e))
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip_2 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network.id)
    self.debug(('Associated %s with network %s' % (public_ip_2.ipaddress.ipaddress, network.id)))
    nat_rule = NATRule.create(self.apiclient, virtual_machine, self.services['natrule_221'], ipaddressid=public_ip_2.ipaddress.id, openfirewall=True)
    self.debug('Trying to SSH into the virtual machine')
    try:
        virtual_machine.get_ssh_client(ipaddress=public_ip_2.ipaddress.ipaddress, reconnect=True, port=self.services['natrule_221']['publicport'])
        self.debug('SSH to guest VM succeeded')
    except Exception as e:
        self.fail(('SSH to guest VM failed: %s' % e))
    self.debug(('Associating public IP for network: %s' % network.name))
    public_ip_3 = PublicIPAddress.create(self.apiclient, accountid=self.account.name, zoneid=self.zone.id, domainid=self.account.account.domainid, networkid=network.id)
    self.debug(('Associated %s with network %s' % (public_ip_3.ipaddress.ipaddress, network.id)))
    self.debug(('Creating LB rule for IP address: %s' % public_ip_3.ipaddress.ipaddress))
    lb_rule = LoadBalancerRule.create(self.apiclient, self.services['lbrule'], ipaddressid=public_ip_3.ipaddress.id, accountid=self.account.name, networkid=network.id)
    self.debug(('Adding %s to the LB rule %s' % (virtual_machine.name, lb_rule.name)))
    lb_rule.assign(self.apiclient, [virtual_machine])
    self.debug('Trying to SSH into the virtual machine')
    try:
        virtual_machine.get_ssh_client(ipaddress=public_ip_3.ipaddress.ipaddress, reconnect=True, port=self.services['lbrule']['publicport'])
        self.debug('SSH to guest VM succeeded')
    except Exception as e:
        self.fail(('SSH to guest VM failed: %s' % e))
    self.debug(('Starting router ID: %s' % master_router.id))
    try:
        cmd = startRouter.startRouterCmd()
        cmd.id = master_router.id
        self.apiclient.startRouter(cmd)
    except Exception as e:
        self.fail('Failed to start master router..')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    for router in routers:
        self.assertEqual(router.state, 'Running', 'Router state should be running')
    return
