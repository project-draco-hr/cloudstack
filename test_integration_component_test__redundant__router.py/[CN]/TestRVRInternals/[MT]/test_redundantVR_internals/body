@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_redundantVR_internals(self):
    'Test redundant router internals\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.name, domainid=self.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.debug(('Network state: %s' % nw_response.state))
    self.assertEqual(nw_response.state, 'Allocated', 'The network should be in allocated state after creation')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(routers, None, 'Routers should not be spawned when network is in allocated state')
    self.debug(('Deploying VM in account: %s' % self.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    if (routers[0].redundantstate == 'MASTER'):
        master_router = routers[0]
        backup_router = routers[1]
    else:
        master_router = routers[1]
        backup_router = routers[0]
    self.debug('Fetching the host details for double hop into router')
    hosts = Host.list(self.apiclient, id=master_router.hostid, listall=True)
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return a valid list')
    master_host = hosts[0]
    self.debug(('Host for master router: %s' % master_host.name))
    self.debug(('Host for master router: %s' % master_host.ipaddress))
    hosts = Host.list(self.apiclient, id=backup_router.hostid, listall=True)
    self.assertEqual(isinstance(hosts, list), True, 'List hosts should return a valid list')
    backup_host = hosts[0]
    self.debug(('Host for backup router: %s' % backup_host.name))
    self.debug(('Host for backup router: %s' % backup_host.ipaddress))
    self.debug(master_router.linklocalip)
    if (self.apiclient.hypervisor.lower() == 'vmware'):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connection.passwd, master_router.linklocalip, 'ifconfig eth2', hypervisor=self.apiclient.hypervisor)
    else:
        result = get_process_status(master_host.ipaddress, self.services['host']['publicport'], self.services['host']['username'], self.services['host']['password'], master_router.linklocalip, 'ifconfig eth2')
    res = str(result)
    self.debug(("Command 'ifconfig eth2': %s" % result))
    self.debug(("Router's public Ip: %s" % master_router.publicip))
    self.assertEqual(res.count(master_router.publicip), 1, 'master router should have the public IP configured')
    self.assertEqual(result.count('Bcast:0.0.0.0'), 0, 'Broadcast address of eth2 should not be 0.0.0.0')
    if (self.apiclient.hypervisor.lower() == 'vmware'):
        result = get_process_status(self.apiclient.connection.mgtSvr, 22, self.apiclient.connection.user, self.apiclient.connction.passwd, backup_router.linklocalip, 'ifconfig eth2', hypervisor=self.apiclient.hypervisor)
    else:
        result = get_process_status(backup_host.ipaddress, self.services['host']['publicport'], self.services['host']['username'], self.services['host']['password'], backup_router.linklocalip, 'ifconfig eth2')
    res = str(result)
    self.debug(("Command 'ifconfig eth2': %s" % result))
    self.assertEqual(res.count('Bcast:0.0.0.0'), 1, 'backup router should NOT have the public IP configured')
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List VMs should not return empty response')
    vm = vms[0]
    self.assertNotEqual(vm.nic[0].gateway, master_router.publicip, 'The gateway of user VM should be same as master router')
    self.assertNotEqual(vm.nic[0].gateway, backup_router.publicip, 'The gateway of user VM should be same as backup router')
    return
