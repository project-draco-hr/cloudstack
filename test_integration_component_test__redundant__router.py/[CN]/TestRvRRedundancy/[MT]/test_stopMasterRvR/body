@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_stopMasterRvR(self):
    'Test stop MASTER RVR\n        '
    self.debug(('Listing routers for network: %s' % self.network.name))
    routers = Router.list(self.apiclient, networkid=self.network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    if (routers[0].redundantstate == 'MASTER'):
        master_router = routers[0]
        backup_router = routers[1]
    else:
        master_router = routers[1]
        backup_router = routers[0]
    self.debug('Stopping the MASTER router')
    try:
        Router.stop(self.apiclient, id=master_router.id)
    except Exception as e:
        self.fail(('Failed to stop master router: %s' % e))
    self.debug(('Listing routers for network: %s' % self.network.name))
    routers = Router.list(self.apiclient, networkid=self.network.id, id=master_router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(routers[0].redundantstate, 'UNKNOWN', 'Redundant state of the router should be UNKNOWN')
    self.debug(('Listing routers for network: %s' % self.network.name))
    routers = Router.list(self.apiclient, networkid=self.network.id, id=backup_router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(routers[0].redundantstate, 'MASTER', 'Redundant state of the router should be MASTER')
    self.debug('Starting the old MASTER router')
    try:
        Router.start(self.apiclient, id=master_router.id)
        self.debug('old MASTER router started')
    except Exception as e:
        self.fail(('Failed to stop master router: %s' % e))
    self.debug(('Listing routers for network: %s' % self.network.name))
    routers = Router.list(self.apiclient, networkid=self.network.id, id=master_router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return backup router')
    self.assertEqual(routers[0].redundantstate, 'BACKUP', 'Redundant state of the router should be BACKUP')
    self.assertEqual(master_router.publicip, routers[0].publicip, 'Public IP should be same after reboot')
    return
