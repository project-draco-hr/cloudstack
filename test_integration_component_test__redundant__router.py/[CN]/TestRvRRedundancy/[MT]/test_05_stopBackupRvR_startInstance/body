@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_05_stopBackupRvR_startInstance(self):
    'Test stop backup RVR and start instance\n        '
    self.debug(('Listing routers for network: %s' % self.network.name))
    routers = Router.list(self.apiclient, networkid=self.network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    if (routers[0].redundantstate == 'MASTER'):
        master_router = routers[0]
        backup_router = routers[1]
    else:
        master_router = routers[1]
        backup_router = routers[0]
    self.debug('Stopping the backup router')
    try:
        Router.stop(self.apiclient, id=backup_router.id)
    except Exception as e:
        self.fail(('Failed to stop BACKUP router: %s' % e))
    time.sleep(self.services['sleep'])
    self.debug(('Checking state of the backup router in %s' % self.network.name))
    routers = Router.list(self.apiclient, id=backup_router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertIn(routers[0].redundantstate, 'UNKNOWN', ('Redundant state of the backup router should be UNKNOWN but is %s' % routers[0].redundantstate))
    vm_2 = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(self.network.id)])
    self.debug(('Deployed VM in network: %s' % self.network.id))
    vms = VirtualMachine.list(self.apiclient, id=vm_2.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm should be in running state after deployment')
    self.debug(('Checking state of the backup router in %s' % self.network.name))
    routers = Router.list(self.apiclient, id=backup_router.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(routers[0].redundantstate, 'BACKUP', ('Redundant state of the router should be BACKUP but is %s' % routers[0].redundantstate))
    return
