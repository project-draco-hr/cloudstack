@attr(tags=['advanced', 'advancedns', 'ssh'])
def test_restartRvRNetwork_withCleanup(self):
    'Test Restart network with cleanup\n        '
    self.debug(('Creating network with network offering: %s' % self.network_offering.id))
    network = Network.create(self.apiclient, self.services['network'], accountid=self.account.account.name, domainid=self.account.account.domainid, networkofferingid=self.network_offering.id, zoneid=self.zone.id)
    self.debug(('Created network with ID: %s' % network.id))
    networks = Network.list(self.apiclient, id=network.id, listall=True)
    self.assertEqual(isinstance(networks, list), True, 'List networks should return a valid response for created network')
    nw_response = networks[0]
    self.debug(('Network state: %s' % nw_response.state))
    self.assertEqual(nw_response.state, 'Allocated', 'The network should be in allocated state after creation')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(routers, None, 'Routers should not be spawned when network is in allocated state')
    self.debug(('Deploying VM in account: %s' % self.account.account.name))
    virtual_machine = VirtualMachine.create(self.apiclient, self.services['virtual_machine'], accountid=self.account.account.name, domainid=self.account.account.domainid, serviceofferingid=self.service_offering.id, networkids=[str(network.id)])
    self.debug(('Deployed VM in network: %s' % network.id))
    vms = VirtualMachine.list(self.apiclient, id=virtual_machine.id, listall=True)
    self.assertEqual(isinstance(vms, list), True, 'List Vms should return a valid list')
    vm = vms[0]
    self.assertEqual(vm.state, 'Running', 'Vm should be in running state after deployment')
    self.debug(('Listing routers for network: %s' % network.name))
    routers = Router.list(self.apiclient, networkid=network.id, listall=True)
    self.assertEqual(isinstance(routers, list), True, 'list router should return Master and backup routers')
    self.assertEqual(len(routers), 2, 'Length of the list router should be 2 (Backup & master)')
    self.debug('Trying to delete the network with running Vms')
    with self.assertRaises(Exception):
        network.delete(self.apiclient, cleanup=True)
    self.debug('Network delete failed!')
    self.debug(('Destroying the user VMs for account: %s' % self.account.account.name))
    try:
        virtual_machine.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete guest Vm from account: %s - %s' % (self.account.account.name, e)))
    interval = list_configurations(self.apiclient, name='expunge.delay')
    delay = int(interval[0].value)
    interval = list_configurations(self.apiclient, name='expunge.interval')
    exp = int(interval[0].value)
    self.debug('Sleeping for exp delay + interval time')
    time.sleep(((delay + exp) * 2))
    self.debug(('Trying to delete guest network for account: %s' % self.account.account.name))
    try:
        network.delete(self.apiclient)
    except Exception as e:
        self.fail(('Failed to delete network: %s' % e))
    return
