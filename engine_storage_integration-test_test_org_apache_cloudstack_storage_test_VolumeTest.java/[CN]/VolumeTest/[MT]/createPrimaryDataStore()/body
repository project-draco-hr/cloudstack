{
  try {
    String uuid=UUID.nameUUIDFromBytes(this.getPrimaryStorageUrl().getBytes()).toString();
    List<StoragePoolVO> pools=primaryDataStoreDao.findPoolByName(this.primaryName);
    if (pools.size() > 0) {
      return this.dataStoreMgr.getPrimaryDataStore(pools.get(0).getId());
    }
    DataStoreProvider provider=dataStoreProviderMgr.getDataStoreProvider("cloudstack primary data store provider");
    Map<String,Object> params=new HashMap<String,Object>();
    URI uri=new URI(this.getPrimaryStorageUrl());
    params.put("url",this.getPrimaryStorageUrl());
    params.put("server",uri.getHost());
    params.put("path",uri.getPath());
    params.put("protocol",Storage.StoragePoolType.NetworkFilesystem);
    params.put("zoneId",dcId);
    params.put("clusterId",clusterId);
    params.put("name",this.primaryName);
    params.put("port",1);
    params.put("podId",this.podId);
    params.put("roles",DataStoreRole.Primary.toString());
    params.put("uuid",uuid);
    params.put("providerName",String.valueOf(provider.getName()));
    DataStoreLifeCycle lifeCycle=provider.getDataStoreLifeCycle();
    DataStore store=lifeCycle.initialize(params);
    ClusterScope scope=new ClusterScope(clusterId,podId,dcId);
    lifeCycle.attachCluster(store,scope);
    return store;
  }
 catch (  Exception e) {
    return null;
  }
}
