{
  if (caller == null) {
    throw new InvalidParameterValueException("Caller cannot be passed as NULL to IAM!");
  }
  if (entity == null && action == null) {
    throw new InvalidParameterValueException("Entity and action cannot be both NULL in checkAccess!");
  }
  String accessKey=buildAccessCacheKey(caller,entity,accessType,action);
  CheckAccessResult allowDeny=(CheckAccessResult)_iamSrv.getFromIAMCache(accessKey);
  if (allowDeny != null) {
    s_logger.debug("IAM access check for " + accessKey + " from cache");
    if (allowDeny.isAllow()) {
      return true;
    }
 else {
      if (allowDeny.getDenyMsg() != null) {
        throw new PermissionDeniedException(allowDeny.getDenyMsg());
      }
 else {
        return false;
      }
    }
  }
  if (entity == null && action != null) {
    List<IAMPolicy> policies=_iamSrv.listIAMPolicies(caller.getAccountId());
    boolean isAllowed=_iamSrv.isActionAllowedForPolicies(action,policies);
    if (!isAllowed) {
      String msg="The action '" + action + "' not allowed for account "+ caller;
      _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(msg));
      throw new PermissionDeniedException(msg);
    }
    _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(true));
    return true;
  }
  Account entityAccount=_accountService.getAccount(entity.getAccountId());
  if (entityAccount != null && entityAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(false));
    return false;
  }
  String entityType=null;
  if (entity.getEntityType() != null) {
    entityType=entity.getEntityType().getSimpleName();
  }
  if (accessType == null) {
    accessType=AccessType.UseEntry;
  }
  List<IAMPolicy> policies=getEffectivePolicies(caller);
  HashMap<IAMPolicy,Boolean> policyPermissionMap=new HashMap<IAMPolicy,Boolean>();
  for (  IAMPolicy policy : policies) {
    List<IAMPolicyPermission> permissions=new ArrayList<IAMPolicyPermission>();
    if (action != null) {
      permissions=_iamSrv.listPolicyPermissionByActionAndEntity(policy.getId(),action,entityType);
      if (permissions.isEmpty()) {
        if (accessType != null) {
          for (          AccessType type : AccessType.values()) {
            if (type.ordinal() >= accessType.ordinal()) {
              permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),type.toString(),entityType));
            }
          }
        }
      }
    }
 else {
      if (accessType != null) {
        for (        AccessType type : AccessType.values()) {
          if (type.ordinal() >= accessType.ordinal()) {
            permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),type.toString(),entityType));
          }
        }
      }
    }
    for (    IAMPolicyPermission permission : permissions) {
      if (checkPermissionScope(caller,permission.getScope(),permission.getScopeId(),entity)) {
        if (permission.getEntityType().equals(entityType)) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
          break;
        }
 else         if (permission.getEntityType().equals("*")) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
        }
      }
    }
    if (policyPermissionMap.containsKey(policy) && policyPermissionMap.get(policy)) {
      _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(true));
      return true;
    }
  }
  if (!policies.isEmpty()) {
    String msg="Account " + caller + " does not have permission to access resource "+ entity+ " for access type: "+ accessType;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(msg);
    }
    _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(msg));
    throw new PermissionDeniedException(msg);
  }
  _iamSrv.addToIAMCache(accessKey,new CheckAccessResult(false));
  return false;
}
