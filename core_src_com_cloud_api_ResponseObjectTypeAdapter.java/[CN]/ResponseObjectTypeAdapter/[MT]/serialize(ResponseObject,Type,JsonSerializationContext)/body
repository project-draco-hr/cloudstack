{
  JsonObject obj=new JsonObject();
  Field[] fields=responseObj.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    String propName=field.getName();
    Method method=getGetMethod(responseObj,propName);
    if (method != null) {
      try {
        Object fieldValue=method.invoke(responseObj);
        if (fieldValue != null) {
          if (fieldValue instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)fieldValue;
            obj.add(serializedName.value(),serialize(subObj,subObj.getClass(),ctx));
          }
 else {
            obj.addProperty(serializedName.value(),fieldValue.toString());
          }
        }
      }
 catch (      IllegalArgumentException e) {
        s_logger.error("Illegal argument exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
      }
catch (      IllegalAccessException e) {
        s_logger.error("Illegal access exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
      }
catch (      InvocationTargetException e) {
        s_logger.error("Invocation target exception when calling ResponseObject " + responseObj.getClass().getName() + " get method for property: "+ propName);
      }
    }
  }
  JsonObject response=new JsonObject();
  response.add(responseObj.getResponseName(),obj);
  return response;
}
