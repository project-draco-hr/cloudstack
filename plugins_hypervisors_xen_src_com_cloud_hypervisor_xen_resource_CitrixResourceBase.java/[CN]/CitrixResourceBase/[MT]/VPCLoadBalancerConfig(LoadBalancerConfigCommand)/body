{
  Connection conn=getConnection();
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  if (routerIp == null) {
    return new Answer(cmd);
  }
  LoadBalancerConfigurator cfgtr=new HAProxyConfigurator();
  String[] config=cfgtr.generateConfiguration(cmd);
  String tmpCfgFileContents="";
  for (int i=0; i < config.length; i++) {
    tmpCfgFileContents+=config[i];
    tmpCfgFileContents+="\n";
  }
  String tmpCfgFilePath="/etc/haproxy/haproxy.cfg.new";
  String result=callHostPlugin(conn,"vmops","createFileInDomr","domrip",routerIp,"filepath",tmpCfgFilePath,"filecontents",tmpCfgFileContents);
  if (result == null || result.isEmpty()) {
    return new Answer(cmd,false,"LoadBalancerConfigCommand failed to create HA proxy cfg file.");
  }
  String[][] rules=cfgtr.generateFwRules(cmd);
  String[] addRules=rules[LoadBalancerConfigurator.ADD];
  String[] removeRules=rules[LoadBalancerConfigurator.REMOVE];
  String[] statRules=rules[LoadBalancerConfigurator.STATS];
  String args="vpc_loadbalancer.sh " + routerIp;
  String ip=cmd.getNic().getIp();
  args+=" -i " + ip;
  StringBuilder sb=new StringBuilder();
  if (addRules.length > 0) {
    for (int i=0; i < addRules.length; i++) {
      sb.append(addRules[i]).append(',');
    }
    args+=" -a " + sb.toString();
  }
  sb=new StringBuilder();
  if (removeRules.length > 0) {
    for (int i=0; i < removeRules.length; i++) {
      sb.append(removeRules[i]).append(',');
    }
    args+=" -d " + sb.toString();
  }
  sb=new StringBuilder();
  if (statRules.length > 0) {
    for (int i=0; i < statRules.length; i++) {
      sb.append(statRules[i]).append(',');
    }
    args+=" -s " + sb.toString();
  }
  result=callHostPlugin(conn,"vmops","routerProxy","args",args);
  if (result == null || result.isEmpty()) {
    return new Answer(cmd,false,"LoadBalancerConfigCommand failed");
  }
  return new Answer(cmd);
}
