{
  String[] results=new String[cmd.getRules().length];
  String callResult;
  Connection conn=getConnection();
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  try {
    VM router=getVM(conn,routerName);
    String[][] rules=cmd.generateFwRules();
    StringBuilder sb=new StringBuilder();
    String[] aclRules=rules[0];
    for (int i=0; i < aclRules.length; i++) {
      sb.append(aclRules[i]).append(',');
    }
    NicTO nic=cmd.getNic();
    VIF vif=getVifByMac(conn,router,nic.getMac());
    String args="vpc_acl.sh " + routerIp;
    args+=" -d " + "eth" + vif.getDevice(conn);
    args+=" -i " + nic.getIp();
    args+=" -m " + Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
    args+=" -a " + sb.toString();
    callResult=callHostPlugin(conn,"vmops","routerProxy","args",args);
    if (callResult == null || callResult.isEmpty()) {
      for (int i=0; i < results.length; i++) {
        results[i]="Failed";
      }
      return new SetNetworkACLAnswer(cmd,false,results);
    }
    return new SetNetworkACLAnswer(cmd,true,results);
  }
 catch (  Exception e) {
    String msg="SetNetworkACL failed due to " + e.toString();
    s_logger.error(msg,e);
    return new SetNetworkACLAnswer(cmd,false,results);
  }
}
