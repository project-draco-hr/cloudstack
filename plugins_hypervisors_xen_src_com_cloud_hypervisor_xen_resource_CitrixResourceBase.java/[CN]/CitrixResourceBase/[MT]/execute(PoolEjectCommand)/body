{
  Connection conn=getConnection();
  String hostuuid=cmd.getHostuuid();
  try {
    Host host=Host.getByUuid(conn,hostuuid);
    if (isRefNull(host)) {
      s_logger.debug("host " + hostuuid + " has already been ejected from pool "+ _host.pool);
      return new Answer(cmd);
    }
    Host.Record hr=host.getRecord(conn);
    Iterator<String> it=hr.tags.iterator();
    while (it.hasNext()) {
      String tag=it.next();
      if (tag.contains("cloud")) {
        it.remove();
      }
    }
    host.setTags(conn,hr.tags);
    Pool pool=Pool.getByUuid(conn,_host.pool);
    Pool.Record poolr=pool.getRecord(conn);
    Host.Record hostr=poolr.master.getRecord(conn);
    if (_host.uuid.equals(hostr.uuid)) {
      boolean mastermigrated=false;
      Map<Host,Host.Record> hostMap=Host.getAllRecords(conn);
      if (hostMap.size() != 1) {
        Host newMaster=null;
        Host.Record newMasterRecord=null;
        for (        Map.Entry<Host,Host.Record> entry : hostMap.entrySet()) {
          if (_host.uuid.equals(entry.getValue().uuid)) {
            continue;
          }
          newMaster=entry.getKey();
          newMasterRecord=entry.getValue();
          s_logger.debug("New master for the XenPool is " + newMasterRecord.uuid + " : "+ newMasterRecord.address);
          try {
            _connPool.switchMaster(_host.ip,_host.pool,conn,newMaster,_username,_password,_wait);
            mastermigrated=true;
            break;
          }
 catch (          Exception e) {
            s_logger.warn("Unable to switch the new master to " + newMasterRecord.uuid + ": "+ newMasterRecord.address+ " due to "+ e.toString());
          }
        }
      }
 else {
        s_logger.debug("This is last host to eject, so don't need to eject: " + hostuuid);
        return new Answer(cmd);
      }
      if (!mastermigrated) {
        String msg="this host is master, and cannot designate a new master";
        s_logger.debug(msg);
        return new Answer(cmd,false,msg);
      }
    }
    try {
      Pool.eject(conn,host);
      try {
        Thread.sleep(10 * 1000);
      }
 catch (      InterruptedException e) {
      }
    }
 catch (    XenAPIException e) {
      String msg="Unable to eject host " + _host.uuid + " due to "+ e.toString();
      s_logger.warn(msg);
      host.destroy(conn);
    }
    return new Answer(cmd);
  }
 catch (  Exception e) {
    String msg="Exception Unable to destroy host " + _host.uuid + " in xenserver database due to "+ e.toString();
    s_logger.warn(msg,e);
    return new Answer(cmd,false,msg);
  }
}
