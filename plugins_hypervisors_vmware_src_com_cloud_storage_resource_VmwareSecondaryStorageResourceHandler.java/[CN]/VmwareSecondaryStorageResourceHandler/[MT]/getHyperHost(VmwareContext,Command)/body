{
  String guid=cmd.getContextParam("guid");
  assert(guid != null);
  String[] tokens=guid.split("@");
  assert(tokens != null && tokens.length == 2);
  ManagedObjectReference morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(":");
  if (hostTokens == null || hostTokens.length != 2) {
    s_logger.error("Invalid content in command context parameter guid");
    return null;
  }
  morHyperHost.setType(hostTokens[0]);
  morHyperHost.set_value(hostTokens[1]);
  if (morHyperHost.getType().equalsIgnoreCase("HostSystem")) {
    HostMO hostMo=new HostMO(context,morHyperHost);
    try {
      ManagedObjectReference mor=hostMo.getHyperHostCluster();
      ClusterMO clusterMo=new ClusterMO(hostMo.getContext(),mor);
      List<Pair<ManagedObjectReference,String>> hostsInCluster=clusterMo.getClusterHosts();
      for (      Pair<ManagedObjectReference,String> hostPair : hostsInCluster) {
        HostMO hostIteratorMo=new HostMO(hostMo.getContext(),hostPair.first());
        VmwareHypervisorHostNetworkSummary netSummary=hostIteratorMo.getHyperHostNetworkSummary(hostIteratorMo.getHostType() == VmwareHostType.ESXi ? cmd.getContextParam("manageportgroup") : cmd.getContextParam("serviceconsole"));
        _resource.ensureOutgoingRuleForAddress(netSummary.getHostIp());
        s_logger.info("Setup firewall rule for host: " + netSummary.getHostIp());
      }
    }
 catch (    Throwable e) {
      s_logger.warn("Unable to retrive host network information due to exception " + e.toString() + ", host: "+ hostTokens[0]+ "-"+ hostTokens[1]);
    }
    return hostMo;
  }
  assert(false);
  return new ClusterMO(context,morHyperHost);
}
