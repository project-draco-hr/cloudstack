{
  _resource.configure("NiciraNvpResource",_parameters);
  ConfigurePortForwardingRulesOnLogicalRouterCommand cmd=mock(ConfigurePortForwardingRulesOnLogicalRouterCommand.class);
  PortForwardingRuleTO rule=new PortForwardingRuleTO(1,"11.11.11.11",80,80,"10.10.10.10",8080,8080,"tcp",true,true);
  List<PortForwardingRuleTO> rules=new ArrayList<PortForwardingRuleTO>();
  rules.add(rule);
  when(cmd.getRules()).thenReturn(rules);
  when(cmd.getLogicalRouterUuid()).thenReturn("aaaaa");
  NatRule[] rulepair=_resource.generatePortForwardingRulePair("10.10.10.10",new int[]{8080,8080},"11.11.11.11",new int[]{80,80},"tcp");
  rulepair[0].setUuid("bbbbb");
  rulepair[1].setUuid("ccccc");
  when(_nvpApi.createLogicalRouterNatRule(eq("aaaaa"),(NatRule)any())).thenReturn(rulepair[0]).thenReturn(rulepair[1]);
  @SuppressWarnings("unchecked") NiciraNvpList<NatRule> storedRules=mock(NiciraNvpList.class);
  when(storedRules.getResultCount()).thenReturn(2);
  when(storedRules.getResults()).thenReturn(Arrays.asList(rulepair));
  when(_nvpApi.findNatRulesByLogicalRouterUuid("aaaaa")).thenReturn(storedRules);
  ConfigurePortForwardingRulesOnLogicalRouterAnswer a=(ConfigurePortForwardingRulesOnLogicalRouterAnswer)_resource.executeRequest(cmd);
  assertTrue(a.getResult());
  verify(_nvpApi,atLeast(2)).deleteLogicalRouterNatRule(eq("aaaaa"),argThat(new ArgumentMatcher<String>(){
    @Override public boolean matches(    Object argument){
      String uuid=(String)argument;
      if ("bbbbb".equals(uuid) || "ccccc".equals(uuid)) {
        return true;
      }
      return false;
    }
  }
));
}
