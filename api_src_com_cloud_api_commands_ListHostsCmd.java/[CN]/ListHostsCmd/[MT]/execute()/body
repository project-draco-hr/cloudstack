{
  List<? extends Host> result=new ArrayList<Host>();
  List<Long> hostIdsWithCapacity=new ArrayList<Long>();
  if (getVirtualMachineId() != null) {
    UserVm userVm=_userVmService.getUserVm(getVirtualMachineId());
    if (userVm == null) {
      throw new InvalidParameterValueException("Unable to find the VM by id=" + getVirtualMachineId());
    }
    Pair<List<? extends Host>,List<Long>> hostsForMigration=_mgr.listHostsForMigrationOfVM(userVm,this.getStartIndex(),this.getPageSizeVal());
    result=hostsForMigration.first();
    hostIdsWithCapacity=hostsForMigration.second();
  }
 else {
    result=_mgr.searchForServers(this);
  }
  ListResponse<HostResponse> response=new ListResponse<HostResponse>();
  List<HostResponse> hostResponses=new ArrayList<HostResponse>();
  for (  Host host : result) {
    HostResponse hostResponse=_responseGenerator.createHostResponse(host);
    Boolean hasEnoughCapacity=false;
    if (hostIdsWithCapacity.contains(host.getId())) {
      hasEnoughCapacity=true;
    }
    hostResponse.setHasEnoughCapacity(hasEnoughCapacity);
    hostResponse.setObjectName("host");
    hostResponses.add(hostResponse);
  }
  response.setResponses(hostResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}
