{
  QuotaBalanceCmd cmd=new QuotaBalanceCmd();
  Field rbField=QuotaBalanceCmd.class.getDeclaredField("_responseBuilder");
  rbField.setAccessible(true);
  rbField.set(cmd,responseBuilder);
  List<QuotaBalanceVO> quotaBalanceVOList=new ArrayList<QuotaBalanceVO>();
  Mockito.when(responseBuilder.getQuotaBalance(Mockito.any(cmd.getClass()))).thenReturn(quotaBalanceVOList);
  Mockito.when(responseBuilder.createQuotaLastBalanceResponse(Mockito.eq(quotaBalanceVOList),Mockito.any(Date.class))).thenReturn(new QuotaBalanceResponse());
  Mockito.when(responseBuilder.createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList),Mockito.any(Date.class),Mockito.any(Date.class))).thenReturn(new QuotaBalanceResponse());
  Mockito.when(responseBuilder.startOfNextDay(Mockito.any(Date.class))).thenReturn(new Date());
  cmd.setStartDate(new Date());
  cmd.setEndDate(null);
  cmd.execute();
  Mockito.verify(responseBuilder,Mockito.times(1)).createQuotaLastBalanceResponse(Mockito.eq(quotaBalanceVOList),Mockito.any(Date.class));
  Mockito.verify(responseBuilder,Mockito.times(0)).createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList),Mockito.any(Date.class),Mockito.any(Date.class));
  cmd.setEndDate(new Date());
  cmd.execute();
  Mockito.verify(responseBuilder,Mockito.times(1)).createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList),Mockito.any(Date.class),Mockito.any(Date.class));
}
