def MigrateRootVolume(self, vm, destinationPool, expectexception=False):
    ' Migrate given volume to type of storage pool mentioned in migrateto:\n\n        Inputs:\n            1. volume:           Volume to be migrated\n            2. migrate_to:       Scope of desired Storage pool to which volume\n                                 is to be migrated\n            3. expectexception:  If exception is expected while migration\n    '
    if expectexception:
        with self.assertRaises(Exception):
            VirtualMachine.migrate(vm, self.apiclient, storageid=destinationPool.id)
    else:
        VirtualMachine.migrate(vm, self.apiclient, storageid=destinationPool.id)
        migrated_vm_response = list_virtual_machines(self.apiclient, id=vm.id)
        self.assertEqual(isinstance(migrated_vm_response, list), True, 'Check list virtual machines response for valid list')
        self.assertNotEqual(migrated_vm_response, None, 'Check if virtual machine exists in ListVirtualMachines')
        migrated_vm = migrated_vm_response[0]
        root_volumes_cluster_list = Volume.list(self.apiclient, virtualmachineid=migrated_vm.id, type='ROOT', listall=True)
        root_volume_cluster = root_volumes_cluster_list[0]
        self.assertEqual(root_volume_cluster.storage, destinationPool.name, 'Check volume is on migrated pool')
    return
