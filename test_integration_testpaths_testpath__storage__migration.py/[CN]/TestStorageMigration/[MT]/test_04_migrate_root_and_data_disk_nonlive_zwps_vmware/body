@attr(tags=['advanced', 'basic'])
def test_04_migrate_root_and_data_disk_nonlive_zwps_vmware(self):
    ' Test migrate Volume (root and data disk)\n\n        # 1. Deploy a VM on zone wide primary storage..\n        # 2. Migrate root and data volume from zone-to-zone, zone-to-local.\n\n        Each Migration has following steps:\n\n            a. Write data to disk, create checksum\n            b. Migrate the volume to suitable pool\n            c. Attach disk to VM and compare checksum with\n               checksum of data on disk, they should match\n\n        '
    if (self.hypervisor.lower() is not 'vmware'):
        self.skipTest(('Skip test case for %s' % self.hypervisor.lower()))
    try:
        self.pools = StoragePool.list(self.apiclient, zoneid=self.zone.id)
        assert (len(list((storagePool for storagePool in self.pools if (storagePool.scope == 'ZONE')))) >= 2), 'There must be at least two zone wide                storage pools available in the setup'
    except Exception as e:
        self.skipTest(e)
    zone_no = 1
    self.debug(('Storage Pools: %s' % self.pools))
    for storagePool in self.pools:
        if (storagePool.scope == 'ZONE'):
            StoragePool.update(self.apiclient, id=storagePool.id, tags=[('zwps' + repr(zone_no))])
            zone_no += 1
    vm_zone = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_zone1.id, zoneid=self.zone.id, mode=self.zone.networktype)
    vm_zone.start(self.userapiclient)
    root_volumes_zone_list = list_volumes(self.apiclient, virtualmachineid=vm_zone.id, type='ROOT', listall=True)
    root_volume_zone = root_volumes_zone_list[0]
    data_volume_zone = Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering_zone1.id)
    self.debug(('Created volume with ID: %s' % data_volume_zone.id))
    data_volumes_zone_list = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=data_volume_zone.id)
    vm_zone.attach_volume(self.userapiclient, data_volume_zone)
    checksum_random_root_zone = createChecksum(self, vm_zone, data_volumes_zone_list[0], 'rootdiskdevice')
    vm_zone.stop(self.userapiclient)
    destinationPool = GetDestinationPool(self, [root_volume_zone.storage], 'ZONE')
    MigrateRootVolume(self, vm_zone, destinationPool)
    vm_zone.start(self.userapiclient)
    compareChecksum(self, checksum_random_root_zone, 'rootdiskdevice', virt_machine=vm_zone, disk=None)
    vm_zone.start(self.userapiclient)
    compareChecksum(self, checksum_random_root_zone, 'rootdiskdevice', virt_machine=vm_zone, disk=None)
    checksum_random_data_zone = createChecksum(self, vm_zone, data_volumes_zone_list[0], 'datadiskdevice_1')
    vm_zone.stop(self.userapiclient)
    destinationPool = GetDestinationPool(self, [data_volumes_zone_list[0].storage], 'ZONE')
    MigrateDataVolume(self, data_volumes_zone_list[0], destinationPool)
    compareChecksum(self, checksum_random_data_zone, 'datadiskdevice_1', virt_machine=None, disk=data_volumes_zone_list[0], new_vm=True)
    self.debug(('Deleting Volume %s' % data_volume_zone.id))
    vm_zone.detach_volume(self.apiclient, data_volume_zone)
    data_volume_zone.delete(self.apiclient)
    self.assertEqual(Volume.list(self.apiclient, id=data_volume_zone.id), None, 'Volume list should be empty')
    vm_zone.delete(self.apiclient)
    self.assertEqual(VirtualMachine.list(self.apiclient, id=vm_zone.id), None, 'VM list should be empty')
    return
