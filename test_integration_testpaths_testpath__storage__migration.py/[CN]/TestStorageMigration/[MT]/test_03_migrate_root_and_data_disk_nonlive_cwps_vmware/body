@attr(tags=['advanced', 'basic'])
def test_03_migrate_root_and_data_disk_nonlive_cwps_vmware(self):
    ' Test migrate Volume (root and data disk)\n\n        # 1. Deploy a VM on cluster wide primary storage.\n        # 2. Migrate root and data volume from cluster-to-cluster\n        # 3. Deploy a VM on local storage.\n        # 4. Migrate root and data volume from local-to-local.\n\n        Each Migration has following steps:\n\n            a. Write data to disk, create checksum\n            b. Migrate the volume to suitable pool\n            c. Attach disk to VM and compare checksum with\n               checksum of data on disk, they should match\n\n        In addition to this,\n        Create snapshot of root and data disk after migration.\n        For root disk, create template from snapshot, deploy Vm and compare checksum\n        For data disk, Create volume from snapshot, attach to VM and compare checksum\n\n        '
    if (self.hypervisor is not 'vmware'):
        self.skipTest(('Skip test case for %s' % self.hypervisor))
    try:
        self.pools = StoragePool.list(self.apiclient, zoneid=self.zone.id)
        assert (len(list((storagePool for storagePool in self.pools if (storagePool.scope == 'CLUSTER')))) >= 2), 'There must be at least two cluster wide                storage pools available in the setup'
    except Exception as e:
        self.skipTest(e)
    cluster_no = 1
    self.debug(('Storage Pools: %s' % self.pools))
    for storagePool in self.pools:
        if (storagePool.scope == 'CLUSTER'):
            StoragePool.update(self.apiclient, id=storagePool.id, tags=[('cwps' + repr(cluster_no))])
            cluster_no += 1
    vm_cluster = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_cluster1.id, zoneid=self.zone.id, mode=self.zone.networktype)
    root_volumes_cluster_list = list_volumes(self.apiclient, virtualmachineid=vm_cluster.id, type='ROOT', listall=True)
    root_volume_cluster = root_volumes_cluster_list[0]
    data_volume_clust = Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering_cluster1.id)
    self.debug(('Created volume with ID: %s' % data_volume_clust.id))
    vm_cluster.attach_volume(self.userapiclient, data_volume_clust)
    data_volumes_cluster_list = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=data_volume_clust.id)
    root_vol_snap = Snapshot.create(self.apiclient, root_volume_cluster.id)
    data_vol_snap = Snapshot.create(self.apiclient, data_volume_clust.id)
    vm_cluster.detach_volume(self.apiclient, data_volume_clust)
    checksum_random_root_cluster = createChecksum(self, vm_cluster, root_volume_cluster, 'rootdiskdevice')
    vm_cluster.stop(self.userapiclient)
    destinationPool = GetDestinationPool(self, [root_volume_cluster.storage], 'CLUSTER')
    MigrateRootVolume(self, vm_cluster, destinationPool)
    vm_cluster.start(self.userapiclient)
    compareChecksum(self, checksum_random_root_cluster, 'rootdiskdevice', virt_machine=vm_cluster, disk=None)
    self.debug('Done with compare checksum')
    vm_cluster.start(self.userapiclient)
    checksum_random_data_cluster = createChecksum(self, vm_cluster, data_volumes_cluster_list[0], 'datadiskdevice_1')
    vm_cluster.detach_volume(self.apiclient, data_volumes_cluster_list[0])
    vm_cluster.stop(self.userapiclient)
    destinationPool = GetDestinationPool(self, [data_volumes_cluster_list[0].storage], 'CLUSTER')
    MigrateDataVolume(self, data_volumes_cluster_list[0], destinationPool)
    vm_cluster.start(self.userapiclient)
    compareChecksum(self, checksum_random_data_cluster, 'datadiskdevice_1', virt_machine=None, disk=data_volumes_cluster_list[0], new_vm=True)
    vm_cluster.attach_volume(self.apiclient, data_volumes_cluster_list[0])
    vm_cluster.reboot(self.apiclient)
    compareChecksum(self, checksum_random_data_cluster, 'datadiskdevice_1', virt_machine=vm_cluster, disk=data_volumes_cluster_list[0])
    data_volume_clust_2 = Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering_cluster1.id)
    self.debug(('Created volume with ID: %s' % data_volume_clust_2.id))
    vm_cluster.attach_volume(self.userapiclient, data_volume_clust_2)
    data_disk_2_volumes_cluster_list = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=data_volume_clust_2.id)
    createChecksum(self, vm_cluster, data_disk_2_volumes_cluster_list[0], 'datadiskdevice_2')
    vm_cluster.detach_volume(self.apiclient, data_volume_clust_2)
    templateFromSnapshot = Template.create_from_snapshot(self.apiclient, root_vol_snap, self.testdata['template_2'])
    vm_from_temp = VirtualMachine.create(self.apiclient, self.testdata['small'], templateid=templateFromSnapshot.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_cluster1.id, zoneid=self.zone.id, mode=self.zone.networktype)
    root_volumes_snap_list = Volume.list(self.apiclient, virtualmachineid=vm_from_temp.id, type='ROOT', listall=True)
    root_volume_snap = root_volumes_snap_list[0]
    createChecksum(self, vm_from_temp, root_volume_snap, 'rootdiskdevice')
    templateFromSnapshot.delete(self.apiclient)
    volumeFormSnap = Volume.create_from_snapshot(self.apiclient, data_vol_snap.id, self.testdata['volume'], account=self.account.name, domainid=self.account.domainid, zoneid=self.zone.id)
    vm_from_temp.attach_volume(self.userapiclient, volumeFormSnap)
    data_from_snap = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=volumeFormSnap.id)
    vm_from_temp.reboot(self.userapiclient)
    createChecksum(self, vm_from_temp, data_from_snap[0], 'datadiskdevice_1')
    vm_from_temp.detach_volume(self.userapiclient, volumeFormSnap)
    volumeFormSnap.delete(self.apiclient)
    vm_from_temp.delete(self.apiclient)
    self.debug(('Deleting Volume %s' % data_volume_clust.id))
    vm_cluster.detach_volume(self.apiclient, data_volume_clust)
    data_volume_clust.delete(self.apiclient)
    self.assertEqual(Volume.list(self.apiclient, id=data_volume_clust.id), None, 'Volume list should be empty')
    vm_cluster.delete(self.apiclient)
    self.assertEqual(VirtualMachine.list(self.apiclient, id=vm_cluster.id), None, 'VM list should be empty')
    localStoragePoolsPresent = True
    try:
        self.assertEqual(len(list((storagePool for storagePool in self.pools if (storagePool.scope == 'HOST')))), 2)
    except Exception as e:
        localStoragePoolsPresent = False
    if localStoragePoolsPresent:
        vm_local = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_local1.id, zoneid=self.zone.id, mode=self.zone.networktype)
        root_volumes_local_list = list_volumes(self.apiclient, virtualmachineid=vm_local.id, type='ROOT', listall=True)
        root_volume_local = root_volumes_local_list[0]
        data_volume_local = Volume.create(self.apiclient, self.testdata['volume'], zoneid=self.zone.id, account=self.account.name, domainid=self.account.domainid, diskofferingid=self.disk_offering_local1.id)
        self.debug(('Created volume with ID: %s' % data_volume_local.id))
        data_volumes_local_list = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=data_volume_local.id)
        vm_local.attach_volume(self.userapiclient, data_volume_local)
        checksum_random_root_local = createChecksum(self, vm_local, data_volumes_local_list[0], 'rootdiskdevice')
        vm_local.stop(self.userapiclient)
        destinationPool = GetDestinationPool(self, [root_volume_local.storage], 'HOST')
        MigrateRootVolume(self, vm_local, destinationPool)
        vm_local.start(self.userapiclient)
        compareChecksum(self, checksum_random_root_local, 'rootdiskdevice', virt_machine=vm_cluster, disk=None)
        checksum_random_data_local = createChecksum(self, vm_local, data_volumes_local_list[0], 'datadiskdevice_1')
        vm_local.stop(self.userapiclient)
        destinationPool = GetDestinationPool(self, [data_volumes_local_list[0].storage], 'HOST')
        MigrateDataVolume(self, data_volumes_local_list[0], destinationPool)
        vm_local.start(self.userapiclient)
        compareChecksum(self, checksum_random_data_local, 'datadiskdevice_1', virt_machine=None, disk=data_volumes_local_list[0], new_vm=True)
        self.debug(('Deleting Volume %s' % data_volume_local.id))
        vm_local.detach_volume(self.apiclient, data_volume_local)
        data_volume_local.delete(self.apiclient)
        self.assertEqual(Volume.list(self.apiclient, id=data_volume_local.id), None, 'Volumes list should be empty')
        vm_local.delete(self.apiclient)
        self.assertEqual(VirtualMachine.list(self.apiclient, id=vm_local.id), None, 'VM list should be empty')
    return
