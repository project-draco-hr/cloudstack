@classmethod
def setUpClass(cls):
    testClient = super(TestStorageLiveMigrationVmware, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    cls.hypervisorNotSupported = False
    cls.NoResource = False
    if (cls.hypervisor.lower() not in ['vmware']):
        cls.hypervisorNotSupported = True
    iscsi_pools = []
    try:
        list_vmware_clusters = list_clusters(cls.apiclient, hypervisor='vmware')
    except Exception as e:
        cls.NoResource = True
        return
    assert (validateList(list_vmware_clusters)[0] == PASS)
    if (len(list_vmware_clusters) < 1):
        cls.NoResource = True
        return
    else:
        for cluster in list_vmware_clusters:
            try:
                list_esx_hosts = list_hosts(cls.apiclient, clusterid=cluster.id)
            except Exception as e:
                cls.NoResource = True
                return
            assert (validateList(list_esx_hosts)[0] == PASS)
            if (len(list_esx_hosts) > 1):
                try:
                    list_storage = list_storage_pools(cls.apiclient, clusterid=cluster.id)
                except Exception as e:
                    cls.NoResource = True
                    return
                assert (validateList(list_storage)[0] == PASS)
                for storage in list_storage:
                    if (storage.type == 'VMFS'):
                        iscsi_pools.append(storage)
                if (len(iscsi_pools) > 1):
                    my_cluster_id = cluster.id
                    break
                else:
                    iscsi_pools = []
    if (len(iscsi_pools) < 2):
        cls.NoResource = True
        return
    cls.hosts = list_esx_hosts
    cls.pools = list_storage
    cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
    cls._cleanup.append(cls.account)
    cls.service_offering = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
    cls._cleanup.append(cls.service_offering)
    cls.disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
    cls.resized_disk_offering = DiskOffering.create(cls.apiclient, cls.testdata['resized_disk_offering'])
    cls._cleanup.append(cls.disk_offering)
    cls._cleanup.append(cls.resized_disk_offering)
    return
