@classmethod
def setUpClass(cls):
    testClient = super(NegativeTestStorageMigration, cls).getClsTestClient()
    cls.apiclient = testClient.getApiClient()
    cls.testdata = testClient.getParsedTestDataConfig()
    cls.hypervisor = cls.testClient.getHypervisorInfo()
    cls.domain = get_domain(cls.apiclient)
    cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())
    cls.template = get_template(cls.apiclient, cls.zone.id, cls.testdata['ostype'])
    cls._cleanup = []
    if (cls.hypervisor.lower() not in ['vmware', 'kvm', 'xenserver', 'hyper-v']):
        raise unittest.SkipTest(('Storage migration not supported on %s' % cls.hypervisor))
    try:
        cls.pools = StoragePool.list(cls.apiclient, zoneid=cls.zone.id)
        assert (len(list((storagePool for storagePool in cls.pools if (storagePool.scope == 'ZONE')))) >= 2), 'There must be at least two zone wide                storage pools available in the setup'
        assert (len(list((storagePool for storagePool in cls.pools if (storagePool.scope == 'CLUSTER')))) >= 2), 'There must be at least two cluster wide                storage pools available in the setup'
    except Exception as e:
        raise unittest.SkipTest(e)
    try:
        cls.account = Account.create(cls.apiclient, cls.testdata['account'], domainid=cls.domain.id)
        cls._cleanup.append(cls.account)
        cls.userapiclient = testClient.getUserApiClient(UserName=cls.account.name, DomainName=cls.account.domain)
        cls.service_offering_zone1 = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'], tags=ZONETAG1)
        cls._cleanup.append(cls.service_offering_zone1)
        cls.service_offering_cluster1 = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'], tags=CLUSTERTAG1)
        cls._cleanup.append(cls.service_offering_cluster1)
        if cls.zone.localstorageenabled:
            cls.testdata['service_offering']['storagetype'] = 'local'
            cls.service_offering_local1 = ServiceOffering.create(cls.apiclient, cls.testdata['service_offering'])
            cls._cleanup.append(cls.service_offering_local1)
        cls.disk_offering_zone1 = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'], tags=ZONETAG1)
        cls._cleanup.append(cls.disk_offering_zone1)
        cls.disk_offering_cluster1 = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'], tags=CLUSTERTAG1)
        cls._cleanup.append(cls.disk_offering_cluster1)
        if cls.zone.localstorageenabled:
            cls.testdata['disk_offering']['storagetype'] = 'local'
            cls.disk_offering_local1 = DiskOffering.create(cls.apiclient, cls.testdata['disk_offering'])
            cls._cleanup.append(cls.disk_offering_local1)
    except Exception as e:
        cls.tearDownClass()
        raise e
    return
