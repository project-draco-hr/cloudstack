@attr(tags=['advanced', 'basic'], required_hardware='True')
def test_01_migrate_data_disk_negative_test(self):
    ' Negative test cases\n\n        # 1. Deploy a VM on cluster wide primary storage.\n        # 2. Add some data to disks and create checksum\n        # 3. Migrate root and data volume from cluster-to-cluster wide storage pool\n        # 4. While migration(ROOT disk) is in progress try following scenarios, they should fail:\n             I. Take snapshot of the disk\n             II. Create Template from the volume\n             III. Destroy the instance\n        # 5. Compare checksum after migration\n\n        '
    cluster_no = 1
    self.debug(('Storage Pools: %s' % self.pools))
    for storagePool in self.pools:
        if (storagePool.scope == 'CLUSTER'):
            StoragePool.update(self.apiclient, id=storagePool.id, tags=[('cwps' + repr(cluster_no))])
            cluster_no += 1
    vm_cluster = VirtualMachine.create(self.userapiclient, self.testdata['small'], templateid=self.template.id, accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.service_offering_cluster1.id, diskofferingid=self.disk_offering_cluster1.id, zoneid=self.zone.id, mode=self.zone.networktype)
    disk_volumes_cluster_list = list_volumes(self.apiclient, virtualmachineid=vm_cluster.id, type='DATADISK', listall=True)
    data_disk = disk_volumes_cluster_list[0]
    root_volumes_cluster_list = list_volumes(self.apiclient, virtualmachineid=vm_cluster.id, type='ROOT', listall=True)
    root_volume_cluster = root_volumes_cluster_list[0]
    checksum_root_disk = self.createChecksum(self, vm_cluster, root_volume_cluster, 'rootdiskdevice')
    checksum_data_disk = self.createChecksum(self, vm_cluster, data_disk, 'datadiskdevice_1')
    volumes = Volume.list(self.userapiclient, listall=self.testdata['listall'], id=data_disk.id)
    self.assertEqual(isinstance(volumes, list), True, 'Check list response returns a valid list')
    volume = volumes[0]
    vm_cluster.detach_volume(self.apiclient, volume)
    vm_cluster.stop(self.userapiclient)
    try:
        destinationPool = GetDestinationPool(self, [root_volume_cluster.storage], 'CLUSTER')
        thread_1 = Thread(target=MigrateRootVolume, args=(self, vm_cluster, destinationPool))
        thread_2 = Thread(target=self.createTemplateJob, args=(vm_cluster, root_volume_cluster))
        thread_1.start()
        thread_2.start()
        thread_1.join()
        thread_2.join()
    except:
        self.debug('Error: unable to start thread')
    try:
        destinationPool = GetDestinationPool(self, [root_volume_cluster.storage], 'CLUSTER')
        thread_3 = Thread(target=MigrateRootVolume, args=(self, vm_cluster, destinationPool))
        thread_4 = Thread(target=self.createMigrationJob, args=(root_volume_cluster,))
        thread_3.start()
        timeout = 60
        while (timeout >= 0):
            if (volume.state == 'Migrating'):
                break
            timeout -= 5
            time.sleep(5)
        thread_4.start()
        thread_3.join()
        thread_4.join()
    except:
        self.debug('Error: unable to start thread')
    vm_cluster.start(self.userapiclient)
    vm_cluster.attach_volume(self.apiclient, volume)
    vm_cluster.reboot(self.userapiclient)
    disk_volumes_cluster_list = list_volumes(self.apiclient, virtualmachineid=vm_cluster.id, type='DATADISK', listall=True)
    data_disk = disk_volumes_cluster_list[0]
    root_volumes_cluster_list = list_volumes(self.apiclient, virtualmachineid=vm_cluster.id, type='ROOT', listall=True)
    root_volume_cluster = root_volumes_cluster_list[0]
    self.debug('Done with create checksum')
    compareChecksum(self, checksum_root_disk, 'rootdiskdevice', virt_machine=vm_cluster)
    compareChecksum(self, checksum_data_disk, 'datadiskdevice_1', virt_machine=vm_cluster)
    vm_cluster.detach_volume(self.userapiclient, volume)
    cmd = deleteVolume.deleteVolumeCmd()
    cmd.id = volume.id
    self.apiclient.deleteVolume(cmd)
    vm_cluster.stop(self.userapiclient)
    try:
        destinationPool = GetDestinationPool(self, [root_volume_cluster.storage], 'CLUSTER')
        thread_5 = Thread(target=MigrateRootVolume, args=(self, vm_cluster, destinationPool))
        thread_6 = Thread(target=self.createDestroyVmJob, args=(vm_cluster,))
        thread_5.start()
        thread_6.start()
        thread_5.join()
        thread_6.join()
    except:
        self.debug('Error: unable to start thread')
    if self.exceptionList:
        for i in self.exceptionList:
            raise i
    vm_cluster.delete(self.apiclient)
    return
