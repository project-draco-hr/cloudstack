{
  try {
    UserVm result=_userVmService.startVirtualMachine(this);
    if (result != null) {
      UserVmResponse response=_responseGenerator.createUserVmResponse(result);
      response.setResponseName(getName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,"Failed to start a vm");
    }
  }
 catch (  ConcurrentOperationException ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  StorageUnavailableException ex) {
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ExecutionException ex) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}
