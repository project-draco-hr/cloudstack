{
  Long hostId=1L;
  Long vmId=1L;
  Long guestOsId=1L;
  List<VolumeObjectTO> volumeObjectTOs=new ArrayList<VolumeObjectTO>();
  VMSnapshotVO vmSnapshot=Mockito.mock(VMSnapshotVO.class);
  UserVmVO userVmVO=Mockito.mock(UserVmVO.class);
  Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);
  Mockito.when(vmSnapshot.getVmId()).thenReturn(vmId);
  Mockito.when(vmSnapshotHelper.pickRunningHost(Mockito.anyLong())).thenReturn(hostId);
  Mockito.when(vmSnapshotHelper.getVolumeTOList(Mockito.anyLong())).thenReturn(volumeObjectTOs);
  Mockito.when(userVmDao.findById(Mockito.anyLong())).thenReturn(userVmVO);
  GuestOSVO guestOSVO=Mockito.mock(GuestOSVO.class);
  Mockito.when(guestOSDao.findById(Mockito.anyLong())).thenReturn(guestOSVO);
  VMSnapshotTO vmSnapshotTO=Mockito.mock(VMSnapshotTO.class);
  Mockito.when(vmSnapshotHelper.getSnapshotWithParents(Mockito.any(VMSnapshotVO.class))).thenReturn(vmSnapshotTO);
  Mockito.when(vmSnapshotDao.findById(Mockito.anyLong())).thenReturn(vmSnapshot);
  Mockito.when(vmSnapshot.getId()).thenReturn(1L);
  Mockito.when(vmSnapshot.getCreated()).thenReturn(new Date());
  Mockito.when(agentMgr.send(Mockito.anyLong(),Mockito.any(Command.class))).thenReturn(null);
  Exception e=null;
  try {
    vmSnapshotStrategy.deleteVMSnapshot(vmSnapshot);
  }
 catch (  CloudRuntimeException e1) {
    e=e1;
  }
  assertNotNull(e);
  DeleteVMSnapshotAnswer answer=Mockito.mock(DeleteVMSnapshotAnswer.class);
  Mockito.when(answer.getResult()).thenReturn(true);
  Mockito.when(agentMgr.send(Mockito.anyLong(),Mockito.any(Command.class))).thenReturn(answer);
  boolean result=vmSnapshotStrategy.deleteVMSnapshot(vmSnapshot);
  assertTrue(result);
}
