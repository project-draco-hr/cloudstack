{
  Long hostId=1L;
  Long vmId=1L;
  Long guestOsId=1L;
  HypervisorType hypervisorType=HypervisorType.Any;
  String hypervisorVersion="default";
  String guestOsName="Other";
  List<VolumeObjectTO> volumeObjectTOs=new ArrayList<VolumeObjectTO>();
  VMSnapshotVO vmSnapshot=Mockito.mock(VMSnapshotVO.class);
  UserVmVO userVmVO=Mockito.mock(UserVmVO.class);
  Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);
  Mockito.when(vmSnapshot.getVmId()).thenReturn(vmId);
  Mockito.when(vmSnapshotHelper.pickRunningHost(Matchers.anyLong())).thenReturn(hostId);
  Mockito.when(vmSnapshotHelper.getVolumeTOList(Matchers.anyLong())).thenReturn(volumeObjectTOs);
  Mockito.when(userVmDao.findById(Matchers.anyLong())).thenReturn(userVmVO);
  GuestOSVO guestOSVO=Mockito.mock(GuestOSVO.class);
  Mockito.when(guestOSDao.findById(Matchers.anyLong())).thenReturn(guestOSVO);
  GuestOSHypervisorVO guestOSHypervisorVO=Mockito.mock(GuestOSHypervisorVO.class);
  Mockito.when(guestOSHypervisorVO.getGuestOsName()).thenReturn(guestOsName);
  Mockito.when(guestOsHypervisorDao.findById(Matchers.anyLong())).thenReturn(guestOSHypervisorVO);
  Mockito.when(guestOsHypervisorDao.findByOsIdAndHypervisor(Matchers.anyLong(),Matchers.anyString(),Matchers.anyString())).thenReturn(guestOSHypervisorVO);
  Mockito.when(agentMgr.send(Matchers.anyLong(),Matchers.any(Command.class))).thenReturn(null);
  HostVO hostVO=Mockito.mock(HostVO.class);
  Mockito.when(hostDao.findById(Matchers.anyLong())).thenReturn(hostVO);
  Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);
  Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);
  Exception e=null;
  try {
    vmSnapshotStrategy.takeVMSnapshot(vmSnapshot);
  }
 catch (  CloudRuntimeException e1) {
    e=e1;
  }
  assertNotNull(e);
  CreateVMSnapshotAnswer answer=Mockito.mock(CreateVMSnapshotAnswer.class);
  Mockito.when(answer.getResult()).thenReturn(true);
  Mockito.when(agentMgr.send(Matchers.anyLong(),Matchers.any(Command.class))).thenReturn(answer);
  Mockito.when(vmSnapshotDao.findById(Matchers.anyLong())).thenReturn(vmSnapshot);
  VMSnapshot snapshot=null;
  snapshot=vmSnapshotStrategy.takeVMSnapshot(vmSnapshot);
  assertNotNull(snapshot);
}
