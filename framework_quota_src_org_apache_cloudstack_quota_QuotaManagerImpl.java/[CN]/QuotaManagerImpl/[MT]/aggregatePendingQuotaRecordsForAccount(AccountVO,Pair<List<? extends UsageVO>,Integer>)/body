{
  List<QuotaUsageVO> quotaListForAccount=new ArrayList<>();
  if (usageRecords == null || usageRecords.first() == null || usageRecords.first().isEmpty()) {
    return quotaListForAccount;
  }
  s_logger.info("Getting pending quota records for account=" + account.getAccountName());
  for (  UsageVO usageRecord : usageRecords.first()) {
    BigDecimal aggregationRatio=new BigDecimal(_aggregationDuration).divide(s_minutesInMonth,8,RoundingMode.HALF_EVEN);
switch (usageRecord.getUsageType()) {
case QuotaTypes.RUNNING_VM:
      List<QuotaUsageVO> lq=updateQuotaRunningVMUsage(usageRecord,aggregationRatio);
    if (!lq.isEmpty()) {
      quotaListForAccount.addAll(lq);
    }
  break;
case QuotaTypes.ALLOCATED_VM:
QuotaUsageVO qu=updateQuotaAllocatedVMUsage(usageRecord,aggregationRatio);
if (qu != null) {
quotaListForAccount.add(qu);
}
break;
case QuotaTypes.SNAPSHOT:
case QuotaTypes.TEMPLATE:
case QuotaTypes.ISO:
case QuotaTypes.VOLUME:
case QuotaTypes.VM_SNAPSHOT:
qu=updateQuotaDiskUsage(usageRecord,aggregationRatio,usageRecord.getUsageType());
if (qu != null) {
quotaListForAccount.add(qu);
}
break;
case QuotaTypes.LOAD_BALANCER_POLICY:
case QuotaTypes.PORT_FORWARDING_RULE:
case QuotaTypes.IP_ADDRESS:
case QuotaTypes.NETWORK_OFFERING:
case QuotaTypes.SECURITY_GROUP:
case QuotaTypes.VPN_USERS:
qu=updateQuotaRaw(usageRecord,aggregationRatio,usageRecord.getUsageType());
if (qu != null) {
quotaListForAccount.add(qu);
}
break;
case QuotaTypes.NETWORK_BYTES_RECEIVED:
case QuotaTypes.NETWORK_BYTES_SENT:
qu=updateQuotaNetwork(usageRecord,usageRecord.getUsageType());
if (qu != null) {
quotaListForAccount.add(qu);
}
break;
case QuotaTypes.VM_DISK_IO_READ:
case QuotaTypes.VM_DISK_IO_WRITE:
case QuotaTypes.VM_DISK_BYTES_READ:
case QuotaTypes.VM_DISK_BYTES_WRITE:
default :
break;
}
}
return quotaListForAccount;
}
