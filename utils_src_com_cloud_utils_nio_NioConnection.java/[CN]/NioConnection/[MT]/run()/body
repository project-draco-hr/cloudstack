{
synchronized (_thread) {
    try {
      init();
    }
 catch (    ConnectException e) {
      s_logger.error("Unable to connect to remote");
      return;
    }
catch (    IOException e) {
      s_logger.error("Unable to initialize the threads.",e);
      return;
    }
    _isStartup=true;
    _thread.notifyAll();
  }
  while (_isRunning) {
    try {
      _selector.select();
      Set<SelectionKey> readyKeys=_selector.selectedKeys();
      Iterator<SelectionKey> i=readyKeys.iterator();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace("Keys Processing: " + readyKeys.size());
      }
      while (i.hasNext()) {
        SelectionKey sk=i.next();
        i.remove();
        if (!sk.isValid()) {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace("Selection Key is invalid: " + sk.toString());
          }
          Link link=(Link)sk.attachment();
          if (link != null) {
            link.terminated();
          }
 else {
            closeConnection(sk);
          }
        }
 else         if (sk.isReadable()) {
          read(sk);
        }
 else         if (sk.isWritable()) {
          write(sk);
        }
 else         if (sk.isAcceptable()) {
          accept(sk);
        }
 else         if (sk.isConnectable()) {
          connect(sk);
        }
      }
      s_logger.trace("Keys Done Processing.");
      processTodos();
    }
 catch (    Throwable e) {
      s_logger.warn("Caught an exception but continuing on.",e);
    }
  }
synchronized (_thread) {
    _isStartup=false;
  }
}
