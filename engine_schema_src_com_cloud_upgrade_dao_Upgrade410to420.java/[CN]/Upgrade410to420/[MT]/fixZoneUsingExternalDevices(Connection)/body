{
  List<Long> zoneIds=new ArrayList<Long>();
  ResultSet rs=null;
  long networkOfferingId, networkId;
  long f5DeviceId, f5HostId;
  long srxDevivceId, srxHostId;
  try (PreparedStatement sel_id_pstmt=conn.prepareStatement("select id from `cloud`.`data_center` where lb_provider='F5BigIp' or firewall_provider='JuniperSRX' or gateway_provider='JuniperSRX'")){
    try (ResultSet sel_id_rs=sel_id_pstmt.executeQuery()){
      while (sel_id_rs.next()) {
        zoneIds.add(sel_id_rs.getLong(1));
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
  }
  if (zoneIds.size() == 0) {
    return;
  }
  try (PreparedStatement sel_id_off_pstmt=conn.prepareStatement("select id from `cloud`.`network_offerings` where unique_name='Isolated with external providers' ")){
    try (ResultSet sel_id_off_rs=sel_id_off_pstmt.executeQuery()){
      if (sel_id_off_rs.first()) {
        networkOfferingId=sel_id_off_rs.getLong(1);
      }
 else {
        throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception");
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
  }
  for (  Long zoneId : zoneIds) {
    try {
      try (PreparedStatement sel_id_host_pstmt=conn.prepareStatement("SELECT id FROM host WHERE data_center_id=? AND type = 'ExternalLoadBalancer' AND removed IS NULL")){
        sel_id_host_pstmt.setLong(1,zoneId);
        try (ResultSet sel_id_host_pstmt_rs=sel_id_host_pstmt.executeQuery()){
          if (sel_id_host_pstmt_rs.first()) {
            f5HostId=sel_id_host_pstmt_rs.getLong(1);
          }
 else {
            throw new CloudRuntimeException("Cannot upgrade as there is no F5 load balancer device found in data center " + zoneId);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
      }
      try (PreparedStatement sel_id_ext_pstmt=conn.prepareStatement("SELECT id FROM external_load_balancer_devices WHERE  host_id=?")){
        sel_id_ext_pstmt.setLong(1,f5HostId);
        try (ResultSet sel_id_ext_rs=sel_id_ext_pstmt.executeQuery()){
          if (sel_id_ext_rs.first()) {
            f5DeviceId=sel_id_ext_rs.getLong(1);
          }
 else {
            throw new CloudRuntimeException("Cannot upgrade as there is no F5 load balancer device with host ID " + f5HostId + " found in external_load_balancer_device");
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
      }
      try (PreparedStatement sel_id_hostdc_pstmt=conn.prepareStatement("SELECT id FROM host WHERE data_center_id=? AND type = 'ExternalFirewall' AND removed IS NULL")){
        sel_id_hostdc_pstmt.setLong(1,zoneId);
        try (ResultSet sel_id_hostdc_pstmt_rs=sel_id_hostdc_pstmt.executeQuery()){
          if (sel_id_hostdc_pstmt_rs.first()) {
            srxHostId=sel_id_hostdc_pstmt_rs.getLong(1);
          }
 else {
            throw new CloudRuntimeException("Cannot upgrade as there is no SRX firewall device found in data center " + zoneId);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
      }
      try (PreparedStatement sel_id_ext_frwl_pstmt=conn.prepareStatement("SELECT id FROM external_firewall_devices WHERE  host_id=?")){
        sel_id_ext_frwl_pstmt.setLong(1,srxHostId);
        try (ResultSet sel_id_ext_frwl_pstmt_rs=sel_id_ext_frwl_pstmt.executeQuery()){
          if (sel_id_ext_frwl_pstmt_rs.first()) {
            srxDevivceId=sel_id_ext_frwl_pstmt_rs.getLong(1);
          }
 else {
            throw new CloudRuntimeException("Cannot upgrade as there is no SRX firewall device found with host ID " + srxHostId + " found in external_firewall_devices");
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("fixZoneUsingExternalDevices:Exception:" + e.getMessage(),e);
      }
      try (PreparedStatement sel_id_cloud_pstmt=conn.prepareStatement("select id from `cloud`.`networks` where guest_type='Virtual' and data_center_id=? and network_offering_id=? and removed IS NULL")){
        sel_id_cloud_pstmt.setLong(1,zoneId);
        sel_id_cloud_pstmt.setLong(2,networkOfferingId);
        try (ResultSet sel_id_cloud_pstmt_rs=sel_id_cloud_pstmt.executeQuery()){
          while (sel_id_cloud_pstmt_rs.next()) {
            networkId=sel_id_cloud_pstmt_rs.getLong(1);
            String insertLbMapping="INSERT INTO `cloud`.`network_external_lb_device_map` (uuid, network_id, external_load_balancer_device_id, created) VALUES ( ?, ?, ?, now())";
            try (PreparedStatement insert_lb_stmt=conn.prepareStatement(insertLbMapping)){
              insert_lb_stmt.setString(1,UUID.randomUUID().toString());
              insert_lb_stmt.setLong(2,networkId);
              insert_lb_stmt.setLong(3,f5DeviceId);
              insert_lb_stmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
            }
            s_logger.debug("Successfully added entry in network_external_lb_device_map for network " + networkId + " and F5 device ID "+ f5DeviceId);
            String insertFwMapping="INSERT INTO `cloud`.`network_external_firewall_device_map` (uuid, network_id, external_firewall_device_id, created) VALUES ( ?, ?, ?, now())";
            try (PreparedStatement insert_ext_firewall_stmt=conn.prepareStatement(insertFwMapping)){
              insert_ext_firewall_stmt.setString(1,UUID.randomUUID().toString());
              insert_ext_firewall_stmt.setLong(2,networkId);
              insert_ext_firewall_stmt.setLong(3,srxDevivceId);
              insert_ext_firewall_stmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
            }
            s_logger.debug("Successfully added entry in network_external_firewall_device_map for network " + networkId + " and SRX device ID "+ srxDevivceId);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
      }
      s_logger.debug("Updating the host details for F5 and SRX devices");
      try (PreparedStatement sel_pstmt=conn.prepareStatement("SELECT host_id, name FROM `cloud`.`host_details` WHERE  host_id=? OR host_id=?")){
        sel_pstmt.setLong(1,f5HostId);
        sel_pstmt.setLong(2,srxHostId);
        try (ResultSet sel_rs=sel_pstmt.executeQuery()){
          while (sel_rs.next()) {
            long hostId=sel_rs.getLong(1);
            String camlCaseName=sel_rs.getString(2);
            if (!(camlCaseName.equalsIgnoreCase("numRetries") || camlCaseName.equalsIgnoreCase("publicZone") || camlCaseName.equalsIgnoreCase("privateZone")|| camlCaseName.equalsIgnoreCase("publicInterface")|| camlCaseName.equalsIgnoreCase("privateInterface")|| camlCaseName.equalsIgnoreCase("usageInterface"))) {
              continue;
            }
            String lowerCaseName=camlCaseName.toLowerCase();
            try (PreparedStatement update_pstmt=conn.prepareStatement("update `cloud`.`host_details` set name=? where host_id=? AND name=?")){
              update_pstmt.setString(1,lowerCaseName);
              update_pstmt.setLong(2,hostId);
              update_pstmt.setString(3,camlCaseName);
              update_pstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
            }
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
      }
      s_logger.debug("Successfully updated host details for F5 and SRX devices");
    }
 catch (    RuntimeException e) {
      throw new CloudRuntimeException("Unable create a mapping for the networks in network_external_lb_device_map and network_external_firewall_device_map",e);
    }
    s_logger.info("Successfully upgraded network using F5 and SRX devices to have a entry in the network_external_lb_device_map and network_external_firewall_device_map");
  }
}
