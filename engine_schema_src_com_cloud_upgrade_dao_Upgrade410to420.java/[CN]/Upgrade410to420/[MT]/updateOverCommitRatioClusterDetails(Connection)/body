{
  try (PreparedStatement pstmt=conn.prepareStatement("select id, hypervisor_type from `cloud`.`cluster` WHERE removed IS NULL");PreparedStatement pstmt1=conn.prepareStatement("INSERT INTO `cloud`.`cluster_details` (cluster_id, name, value)  VALUES(?, 'cpuOvercommitRatio', ?)");PreparedStatement pstmt2=conn.prepareStatement("INSERT INTO `cloud`.`cluster_details` (cluster_id, name, value)  VALUES(?, 'memoryOvercommitRatio', ?)");PreparedStatement pstmt3=conn.prepareStatement("select value from `cloud`.`configuration` where name=?")){
    String global_cpu_overprovisioning_factor="1";
    String global_mem_overprovisioning_factor="1";
    pstmt3.setString(1,"cpu.overprovisioning.factor");
    try (ResultSet rscpu_global=pstmt3.executeQuery()){
      if (rscpu_global.next())       global_cpu_overprovisioning_factor=rscpu_global.getString(1);
    }
     pstmt3.setString(1,"mem.overprovisioning.factor");
    try (ResultSet rsmem_global=pstmt3.executeQuery()){
      if (rsmem_global.next())       global_mem_overprovisioning_factor=rsmem_global.getString(1);
    }
     try (ResultSet rs1=pstmt.executeQuery()){
      while (rs1.next()) {
        long id=rs1.getLong(1);
        String hypervisor_type=rs1.getString(2);
        if (HypervisorType.VMware.toString().equalsIgnoreCase(hypervisor_type)) {
          pstmt1.setLong(1,id);
          pstmt1.setString(2,global_cpu_overprovisioning_factor);
          pstmt1.execute();
          pstmt2.setLong(1,id);
          pstmt2.setString(2,global_mem_overprovisioning_factor);
          pstmt2.execute();
        }
 else {
          pstmt1.setLong(1,id);
          pstmt1.setString(2,global_cpu_overprovisioning_factor);
          pstmt1.execute();
          pstmt2.setLong(1,id);
          pstmt2.setString(2,"1");
          pstmt2.execute();
        }
      }
    }
   }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to update cluster_details with default overcommit ratios.",e);
  }
}
