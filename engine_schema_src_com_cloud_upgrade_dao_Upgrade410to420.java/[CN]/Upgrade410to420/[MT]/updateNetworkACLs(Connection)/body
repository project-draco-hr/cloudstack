{
  s_logger.debug("Updating network ACLs");
  long nextAclId=3;
  String sqlSelectNetworkIds="SELECT id, vpc_id, uuid FROM `cloud`.`networks` where vpc_id is not null and removed is null";
  String sqlSelectFirewallRules="SELECT id, uuid, start_port, end_port, state, protocol, icmp_code, icmp_type, created, traffic_type FROM `cloud`.`firewall_rules` where network_id = ? and purpose = 'NetworkACL'";
  String sqlInsertNetworkAcl="INSERT INTO `cloud`.`network_acl` (id, uuid, vpc_id, description, name) values (?, UUID(), ? , ?, ?)";
  String sqlSelectFirewallCidrs="SELECT id, source_cidr FROM `cloud`.`firewall_rules_cidrs` where firewall_rule_id = ?";
  String sqlDeleteFirewallCidr="DELETE FROM `cloud`.`firewall_rules_cidrs` where id = ?";
  String sqlInsertNetworkAclItem="INSERT INTO `cloud`.`network_acl_item` (uuid, acl_id, start_port, end_port, state, protocol, icmp_code, icmp_type, created, traffic_type, cidr, number, action) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
  String sqlDeleteFirewallRules="DELETE FROM `cloud`.`firewall_rules` where id = ?";
  String sqlUpdateNetworks="UPDATE `cloud`.`networks` set network_acl_id=? where id=?";
  try (PreparedStatement pstmtSelectNetworkIds=conn.prepareStatement(sqlSelectNetworkIds);PreparedStatement pstmtUpdate=conn.prepareStatement(sqlUpdateNetworks);PreparedStatement pstmtInsertNetworkAclItem=conn.prepareStatement(sqlInsertNetworkAclItem);PreparedStatement pstmtSelectFirewallRules=conn.prepareStatement(sqlSelectFirewallRules);PreparedStatement pstmtInsertNetworkAcl=conn.prepareStatement(sqlInsertNetworkAcl);PreparedStatement pstmtSelectFirewallCidrs=conn.prepareStatement(sqlSelectFirewallCidrs);PreparedStatement pstmtDeleteFirewallCidr=conn.prepareStatement(sqlDeleteFirewallCidr);PreparedStatement pstmtDeleteFirewallRules=conn.prepareStatement(sqlDeleteFirewallRules);ResultSet rsNetworkIds=pstmtSelectNetworkIds.executeQuery()){
    while (rsNetworkIds.next()) {
      Long networkId=rsNetworkIds.getLong(1);
      s_logger.debug("Updating network ACLs for network: " + networkId);
      Long vpcId=rsNetworkIds.getLong(2);
      String tierUuid=rsNetworkIds.getString(3);
      pstmtSelectFirewallRules.setLong(1,networkId);
      boolean hasAcls=false;
      Long aclId=null;
      int number=1;
      try (ResultSet rsAcls=pstmtSelectFirewallRules.executeQuery()){
        while (rsAcls.next()) {
          if (!hasAcls) {
            hasAcls=true;
            aclId=nextAclId++;
            s_logger.debug("Creating network ACL for tier: " + tierUuid);
            pstmtInsertNetworkAcl.setLong(1,aclId);
            pstmtInsertNetworkAcl.setLong(2,vpcId);
            pstmtInsertNetworkAcl.setString(3,"ACL for tier " + tierUuid);
            pstmtInsertNetworkAcl.setString(4,"tier_" + tierUuid);
            pstmtInsertNetworkAcl.executeUpdate();
          }
          Long fwRuleId=rsAcls.getLong(1);
          String cidr=null;
          pstmtSelectFirewallCidrs.setLong(1,fwRuleId);
          try (ResultSet rsCidr=pstmtSelectFirewallCidrs.executeQuery()){
            while (rsCidr.next()) {
              Long cidrId=rsCidr.getLong(1);
              String sourceCidr=rsCidr.getString(2);
              if (cidr == null) {
                cidr=sourceCidr;
              }
 else {
                cidr+="," + sourceCidr;
              }
              pstmtDeleteFirewallCidr.setLong(1,cidrId);
              pstmtDeleteFirewallCidr.executeUpdate();
            }
          }
           String aclItemUuid=rsAcls.getString(2);
          s_logger.debug("Moving firewall rule: " + aclItemUuid);
          pstmtInsertNetworkAclItem.setString(1,aclItemUuid);
          pstmtInsertNetworkAclItem.setLong(2,aclId);
          Integer startPort=rsAcls.getInt(3);
          if (rsAcls.wasNull()) {
            pstmtInsertNetworkAclItem.setNull(3,Types.INTEGER);
          }
 else {
            pstmtInsertNetworkAclItem.setLong(3,startPort);
          }
          Integer endPort=rsAcls.getInt(4);
          if (rsAcls.wasNull()) {
            pstmtInsertNetworkAclItem.setNull(4,Types.INTEGER);
          }
 else {
            pstmtInsertNetworkAclItem.setLong(4,endPort);
          }
          String state=rsAcls.getString(5);
          pstmtInsertNetworkAclItem.setString(5,state);
          String protocol=rsAcls.getString(6);
          pstmtInsertNetworkAclItem.setString(6,protocol);
          Integer icmpCode=rsAcls.getInt(7);
          if (rsAcls.wasNull()) {
            pstmtInsertNetworkAclItem.setNull(7,Types.INTEGER);
          }
 else {
            pstmtInsertNetworkAclItem.setLong(7,icmpCode);
          }
          Integer icmpType=rsAcls.getInt(8);
          if (rsAcls.wasNull()) {
            pstmtInsertNetworkAclItem.setNull(8,Types.INTEGER);
          }
 else {
            pstmtInsertNetworkAclItem.setLong(8,icmpType);
          }
          Date created=rsAcls.getDate(9);
          pstmtInsertNetworkAclItem.setDate(9,created);
          String trafficType=rsAcls.getString(10);
          pstmtInsertNetworkAclItem.setString(10,trafficType);
          pstmtInsertNetworkAclItem.setString(11,cidr);
          pstmtInsertNetworkAclItem.setInt(12,number++);
          pstmtInsertNetworkAclItem.setString(13,"Allow");
          pstmtInsertNetworkAclItem.executeUpdate();
          pstmtDeleteFirewallRules.setLong(1,fwRuleId);
          pstmtDeleteFirewallRules.executeUpdate();
        }
      }
       if (!hasAcls) {
        aclId=NetworkACL.DEFAULT_DENY;
      }
      pstmtUpdate.setLong(1,aclId);
      pstmtUpdate.setLong(2,networkId);
      pstmtUpdate.executeUpdate();
    }
    s_logger.debug("Done updating network ACLs ");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to move network acls from firewall rules table to network_acl_item table",e);
  }
}
