{
  s_logger.debug("upgradeResourceCount start");
  ResultSet rsAccount=null;
  try (PreparedStatement sel_dom_pstmt=conn.prepareStatement("select id, domain_id FROM `cloud`.`account` where removed is NULL ")){
    rsAccount=sel_dom_pstmt.executeQuery();
    while (rsAccount.next()) {
      long account_id=rsAccount.getLong(1);
      long domain_id=rsAccount.getLong(2);
      try (PreparedStatement sel_sum_pstmt=conn.prepareStatement("SELECT SUM(service_offering.cpu), SUM(service_offering.ram_size)" + " FROM `cloud`.`vm_instance`, `cloud`.`service_offering`" + " WHERE vm_instance.service_offering_id = service_offering.id AND vm_instance.account_id = ?"+ " AND vm_instance.removed is NULL"+ " AND vm_instance.vm_type='User' AND state not in ('Destroyed', 'Error', 'Expunging')")){
        sel_sum_pstmt.setLong(1,account_id);
        try (ResultSet sel_sum_pstmt_res=sel_sum_pstmt.executeQuery()){
          if (sel_sum_pstmt_res.next()) {
            upgradeResourceCountforAccount(conn,account_id,domain_id,"cpu",sel_sum_pstmt_res.getLong(1));
            upgradeResourceCountforAccount(conn,account_id,domain_id,"memory",sel_sum_pstmt_res.getLong(2));
          }
 else {
            upgradeResourceCountforAccount(conn,account_id,domain_id,"cpu",0L);
            upgradeResourceCountforAccount(conn,account_id,domain_id,"memory",0L);
          }
          try (PreparedStatement sel_cloud_vol_pstmt=conn.prepareStatement("SELECT sum(size) FROM `cloud`.`volumes` WHERE account_id= ?" + " AND (path is not NULL OR state in ('Allocated')) AND removed is NULL" + " AND instance_id IN (SELECT id FROM `cloud`.`vm_instance` WHERE vm_type='User')")){
            sel_cloud_vol_pstmt.setLong(1,account_id);
            try (ResultSet sel_cloud_vol_count=sel_cloud_vol_pstmt.executeQuery()){
              if (sel_cloud_vol_count.next()) {
                upgradeResourceCountforAccount(conn,account_id,domain_id,"primary_storage",sel_cloud_vol_count.getLong(1));
              }
 else {
                upgradeResourceCountforAccount(conn,account_id,domain_id,"primary_storage",0L);
              }
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
          }
          long totalVolumesSize=0;
          long totalSnapshotsSize=0;
          long totalTemplatesSize=0;
          try (PreparedStatement sel_cloud_vol_alloc_pstmt=conn.prepareStatement("SELECT sum(size) FROM `cloud`.`volumes` WHERE account_id= ?" + " AND path is NULL AND state not in ('Allocated') AND removed is NULL")){
            sel_cloud_vol_alloc_pstmt.setLong(1,account_id);
            try (ResultSet sel_cloud_vol_res=sel_cloud_vol_alloc_pstmt.executeQuery()){
              if (sel_cloud_vol_res.next()) {
                totalVolumesSize=sel_cloud_vol_res.getLong(1);
              }
              try (PreparedStatement sel_cloud_snapshot_pstmt=conn.prepareStatement("SELECT sum(size) FROM `cloud`.`snapshots` WHERE account_id= ? AND removed is NULL")){
                sel_cloud_snapshot_pstmt.setLong(1,account_id);
                try (ResultSet sel_cloud_snapshot_res=sel_cloud_snapshot_pstmt.executeQuery()){
                  if (sel_cloud_snapshot_res.next()) {
                    totalSnapshotsSize=sel_cloud_snapshot_res.getLong(1);
                  }
                  try (PreparedStatement sel_templ_store_pstmt=conn.prepareStatement("SELECT sum(template_store_ref.size) FROM `cloud`.`template_store_ref`,`cloud`.`vm_template` WHERE account_id = ?" + " AND template_store_ref.template_id = vm_template.id AND download_state = 'DOWNLOADED' AND destroyed = false AND removed is NULL")){
                    sel_templ_store_pstmt.setLong(1,account_id);
                    try (ResultSet templ_store_count=sel_templ_store_pstmt.executeQuery()){
                      if (templ_store_count.next()) {
                        totalTemplatesSize=templ_store_count.getLong(1);
                      }
                    }
 catch (                    SQLException e) {
                      throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
                    }
                  }
 catch (                  SQLException e) {
                    throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
                  }
                  upgradeResourceCountforAccount(conn,account_id,domain_id,"secondary_storage",totalVolumesSize + totalSnapshotsSize + totalTemplatesSize);
                }
 catch (                SQLException e) {
                  throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
                }
              }
 catch (              SQLException e) {
                throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
              }
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("upgradeResourceCount:Exception:" + e.getMessage(),e);
      }
    }
    String resource_types[]={"cpu","memory","primary_storage","secondary_storage"};
    try (PreparedStatement sel_id_pstmt=conn.prepareStatement("select id FROM `cloud`.`domain`")){
      try (ResultSet sel_id_res=sel_id_pstmt.executeQuery()){
        while (sel_id_res.next()) {
          long domain_id=sel_id_res.getLong(1);
          for (int count=0; count < resource_types.length; count++) {
            String resource_type=resource_types[count];
            upgradeResourceCountforDomain(conn,domain_id,resource_type,0L);
          }
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
    }
    for (int count=0; count < resource_types.length; count++) {
      String resource_type=resource_types[count];
      try (PreparedStatement sel_dom_id_pstmt=conn.prepareStatement("select account.domain_id,sum(resource_count.count) from `cloud`.`account` left join `cloud`.`resource_count` on account.id=resource_count.account_id " + "where resource_count.type=? group by account.domain_id;")){
        sel_dom_id_pstmt.setString(1,resource_type);
        try (ResultSet sel_dom_res=sel_dom_id_pstmt.executeQuery()){
          while (sel_dom_res.next()) {
            long domain_id=sel_dom_res.getLong(1);
            long resource_count=sel_dom_res.getLong(2);
            upgradeResourceCountforDomain(conn,domain_id,resource_type,resource_count);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
      }
    }
    s_logger.debug("upgradeResourceCount finish");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException("Unable to upgrade resource count (cpu,memory,primary_storage,secondary_storage) ",e);
  }
 finally {
    try {
      if (rsAccount != null) {
        rsAccount.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}
