{
  Long storeId=null;
  Map<Long,Long> s3_store_id_map=new HashMap<Long,Long>();
  s_logger.debug("Migrating S3 to image store");
  try (PreparedStatement storeQuery=conn.prepareStatement("select id from `cloud`.`image_store` where uuid = ?");PreparedStatement storeDetailInsert=conn.prepareStatement("INSERT INTO `cloud`.`image_store_details` (store_id, name, value) values(?, ?, ?)");PreparedStatement storeInsert=conn.prepareStatement("INSERT INTO `cloud`.`image_store` (uuid, name, image_provider_name, protocol, scope, role, created) " + "values(?, ?, 'S3', ?, 'REGION', 'Image', ?)");PreparedStatement s3Query=conn.prepareStatement("select id, uuid, access_key, secret_key, end_point, bucket, https, connection_timeout, " + "max_error_retry, socket_timeout, created from `cloud`.`s3`");ResultSet rs=s3Query.executeQuery()){
    while (rs.next()) {
      Long s3_id=rs.getLong("id");
      String s3_uuid=rs.getString("uuid");
      String s3_accesskey=rs.getString("access_key");
      String s3_secretkey=rs.getString("secret_key");
      String s3_endpoint=rs.getString("end_point");
      String s3_bucket=rs.getString("bucket");
      boolean s3_https=rs.getObject("https") != null ? (rs.getInt("https") == 0 ? false : true) : false;
      Integer s3_connectiontimeout=rs.getObject("connection_timeout") != null ? rs.getInt("connection_timeout") : null;
      Integer s3_retry=rs.getObject("max_error_retry") != null ? rs.getInt("max_error_retry") : null;
      Integer s3_sockettimeout=rs.getObject("socket_timeout") != null ? rs.getInt("socket_timeout") : null;
      Date s3_created=rs.getDate("created");
      storeInsert.setString(1,s3_uuid);
      storeInsert.setString(2,s3_uuid);
      storeInsert.setString(3,s3_https ? "https" : "http");
      storeInsert.setDate(4,s3_created);
      storeInsert.executeUpdate();
      storeQuery.setString(1,s3_uuid);
      try (ResultSet storeInfo=storeQuery.executeQuery()){
        if (storeInfo.next()) {
          storeId=storeInfo.getLong("id");
        }
      }
       Map<String,String> detailMap=new HashMap<String,String>();
      detailMap.put(ApiConstants.S3_ACCESS_KEY,s3_accesskey);
      detailMap.put(ApiConstants.S3_SECRET_KEY,s3_secretkey);
      detailMap.put(ApiConstants.S3_BUCKET_NAME,s3_bucket);
      detailMap.put(ApiConstants.S3_END_POINT,s3_endpoint);
      detailMap.put(ApiConstants.S3_HTTPS_FLAG,String.valueOf(s3_https));
      if (s3_connectiontimeout != null) {
        detailMap.put(ApiConstants.S3_CONNECTION_TIMEOUT,String.valueOf(s3_connectiontimeout));
      }
      if (s3_retry != null) {
        detailMap.put(ApiConstants.S3_MAX_ERROR_RETRY,String.valueOf(s3_retry));
      }
      if (s3_sockettimeout != null) {
        detailMap.put(ApiConstants.S3_SOCKET_TIMEOUT,String.valueOf(s3_sockettimeout));
      }
      Iterator<String> keyIt=detailMap.keySet().iterator();
      while (keyIt.hasNext()) {
        String key=keyIt.next();
        String val=detailMap.get(key);
        storeDetailInsert.setLong(1,storeId);
        storeDetailInsert.setString(2,key);
        storeDetailInsert.setString(3,val);
        storeDetailInsert.executeUpdate();
      }
      s3_store_id_map.put(s3_id,storeId);
    }
  }
 catch (  SQLException e) {
    String msg="Unable to migrate S3 secondary storages." + e.getMessage();
    s_logger.error(msg);
    throw new CloudRuntimeException(msg,e);
  }
  s_logger.debug("Migrating template_s3_ref to template_store_ref");
  migrateTemplateS3Ref(conn,s3_store_id_map);
  s_logger.debug("Migrating s3 backedup snapshots to snapshot_store_ref");
  migrateSnapshotS3Ref(conn,s3_store_id_map);
  s_logger.debug("Completed migrating S3 secondary storage to image store");
}
