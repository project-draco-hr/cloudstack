{
  List<Long> listOfLegacyZones=new ArrayList<Long>();
  List<Long> listOfNonLegacyZones=new ArrayList<Long>();
  Map<String,ArrayList<Long>> dcToZoneMap=new HashMap<String,ArrayList<Long>>();
  PreparedStatement pstmt=null;
  PreparedStatement clustersQuery=null;
  PreparedStatement clusterDetailsQuery=null;
  ResultSet rs=null;
  ResultSet clusters=null;
  ResultSet clusterDetails=null;
  Long zoneId;
  Long clusterId;
  String clusterHypervisorType;
  boolean legacyZone;
  boolean ignoreZone;
  Long count;
  String dcOfPreviousCluster=null;
  String dcOfCurrentCluster=null;
  String[] tokens;
  String url;
  String vc="";
  String dcName="";
  try {
    pstmt=conn.prepareStatement("select id from `cloud`.`data_center` where removed is NULL");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      zoneId=rs.getLong("id");
      clustersQuery=conn.prepareStatement("select id, hypervisor_type from `cloud`.`cluster` where removed is NULL AND data_center_id=?");
      clustersQuery.setLong(1,zoneId);
      legacyZone=false;
      ignoreZone=true;
      ArrayList<String> dcList=new ArrayList<String>();
      count=0L;
      clusters=clustersQuery.executeQuery();
      if (!clusters.next()) {
        continue;
      }
 else {
        dcOfPreviousCluster=null;
        dcOfCurrentCluster=null;
        do {
          clusterHypervisorType=clusters.getString("hypervisor_type");
          clusterId=clusters.getLong("id");
          if (clusterHypervisorType.equalsIgnoreCase("VMware")) {
            ignoreZone=false;
            clusterDetailsQuery=conn.prepareStatement("select value from `cloud`.`cluster_details` where name='url' and cluster_id=?");
            clusterDetailsQuery.setLong(1,clusterId);
            clusterDetails=clusterDetailsQuery.executeQuery();
            clusterDetails.next();
            url=clusterDetails.getString("value");
            tokens=url.split("/");
            vc=tokens[2];
            dcName=tokens[3];
            dcOfPreviousCluster=dcOfCurrentCluster;
            dcOfCurrentCluster=dcName + "@" + vc;
            if (!dcList.contains(dcOfCurrentCluster)) {
              dcList.add(dcOfCurrentCluster);
            }
            if (count > 0) {
              if (!dcOfPreviousCluster.equalsIgnoreCase(dcOfCurrentCluster)) {
                legacyZone=true;
                s_logger.debug("Marking the zone " + zoneId + " as legacy zone.");
              }
            }
          }
 else {
            s_logger.debug("Ignoring zone " + zoneId + " with hypervisor type "+ clusterHypervisorType);
            break;
          }
          count++;
        }
 while (clusters.next());
        if (ignoreZone) {
          continue;
        }
      }
      if (legacyZone) {
        listOfLegacyZones.add(zoneId);
      }
 else {
        listOfNonLegacyZones.add(zoneId);
      }
      for (      String dc : dcList) {
        ArrayList<Long> dcZones=new ArrayList<Long>();
        if (dcToZoneMap.get(dc) != null) {
          dcZones=dcToZoneMap.get(dc);
        }
        dcZones.add(zoneId);
        dcToZoneMap.put(dc,dcZones);
      }
    }
    for (    Map.Entry<String,ArrayList<Long>> entry : dcToZoneMap.entrySet()) {
      if (entry.getValue().size() > 1) {
        for (        Long newLegacyZone : entry.getValue()) {
          if (listOfNonLegacyZones.contains(newLegacyZone)) {
            listOfNonLegacyZones.remove(newLegacyZone);
            listOfLegacyZones.add(newLegacyZone);
          }
        }
      }
    }
    updateLegacyZones(conn,listOfLegacyZones);
    updateNonLegacyZones(conn,listOfNonLegacyZones);
  }
 catch (  SQLException e) {
    String msg="Unable to discover legacy zones." + e.getMessage();
    s_logger.error(msg);
    throw new CloudRuntimeException(msg,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      if (clusters != null) {
        clusters.close();
      }
      if (clusterDetails != null) {
        clusterDetails.close();
      }
      if (clustersQuery != null) {
        clustersQuery.close();
      }
      if (clusterDetailsQuery != null) {
        clusterDetailsQuery.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}
