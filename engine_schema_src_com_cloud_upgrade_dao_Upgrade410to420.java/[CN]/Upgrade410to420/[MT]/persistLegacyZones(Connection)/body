{
  List<Long> listOfLegacyZones=new ArrayList<Long>();
  List<Long> listOfNonLegacyZones=new ArrayList<Long>();
  Map<String,ArrayList<Long>> dcToZoneMap=new HashMap<String,ArrayList<Long>>();
  ResultSet clusters=null;
  Long zoneId;
  Long clusterId;
  ArrayList<String> dcList=null;
  String clusterHypervisorType;
  boolean legacyZone;
  boolean ignoreZone;
  Long count;
  String dcOfPreviousCluster=null;
  String dcOfCurrentCluster=null;
  String[] tokens;
  String url;
  String vc="";
  String dcName="";
  try (PreparedStatement pstmt=conn.prepareStatement("select id from `cloud`.`data_center` where removed is NULL")){
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        zoneId=rs.getLong("id");
        try (PreparedStatement clustersQuery=conn.prepareStatement("select id, hypervisor_type from `cloud`.`cluster` where removed is NULL AND data_center_id=?")){
          clustersQuery.setLong(1,zoneId);
          legacyZone=false;
          ignoreZone=true;
          dcList=new ArrayList<String>();
          count=0L;
          clusters=clustersQuery.executeQuery();
          if (!clusters.next()) {
            continue;
          }
 else {
            dcOfPreviousCluster=null;
            dcOfCurrentCluster=null;
            do {
              clusterHypervisorType=clusters.getString("hypervisor_type");
              clusterId=clusters.getLong("id");
              if (clusterHypervisorType.equalsIgnoreCase("VMware")) {
                ignoreZone=false;
                try (PreparedStatement clusterDetailsQuery=conn.prepareStatement("select value from `cloud`.`cluster_details` where name='url' and cluster_id=?")){
                  clusterDetailsQuery.setLong(1,clusterId);
                  try (ResultSet clusterDetails=clusterDetailsQuery.executeQuery()){
                    clusterDetails.next();
                    url=clusterDetails.getString("value");
                    tokens=url.split("/");
                    vc=tokens[2];
                    dcName=tokens[3];
                    dcOfPreviousCluster=dcOfCurrentCluster;
                    dcOfCurrentCluster=dcName + "@" + vc;
                    if (!dcList.contains(dcOfCurrentCluster)) {
                      dcList.add(dcOfCurrentCluster);
                    }
                    if (count > 0) {
                      if (!dcOfPreviousCluster.equalsIgnoreCase(dcOfCurrentCluster)) {
                        legacyZone=true;
                        s_logger.debug("Marking the zone " + zoneId + " as legacy zone.");
                      }
                    }
                  }
 catch (                  SQLException e) {
                    throw new CloudRuntimeException("Unable add zones to cloud.legacyzones table.",e);
                  }
                }
 catch (                SQLException e) {
                  throw new CloudRuntimeException("Unable add zones to cloud.legacyzones table.",e);
                }
              }
 else {
                s_logger.debug("Ignoring zone " + zoneId + " with hypervisor type "+ clusterHypervisorType);
                break;
              }
              count++;
            }
 while (clusters.next());
            if (ignoreZone) {
              continue;
            }
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException("persistLegacyZones:Exception:" + e.getMessage(),e);
        }
        if (legacyZone) {
          listOfLegacyZones.add(zoneId);
        }
 else {
          listOfNonLegacyZones.add(zoneId);
        }
        for (        String dc : dcList) {
          ArrayList<Long> dcZones=new ArrayList<Long>();
          if (dcToZoneMap.get(dc) != null) {
            dcZones=dcToZoneMap.get(dc);
          }
          dcZones.add(zoneId);
          dcToZoneMap.put(dc,dcZones);
        }
      }
      for (      Map.Entry<String,ArrayList<Long>> entry : dcToZoneMap.entrySet()) {
        if (entry.getValue().size() > 1) {
          for (          Long newLegacyZone : entry.getValue()) {
            if (listOfNonLegacyZones.contains(newLegacyZone)) {
              listOfNonLegacyZones.remove(newLegacyZone);
              listOfLegacyZones.add(newLegacyZone);
            }
          }
        }
      }
      updateLegacyZones(conn,listOfLegacyZones);
      updateNonLegacyZones(conn,listOfNonLegacyZones);
    }
 catch (    SQLException e) {
      s_logger.error("Unable to discover legacy zones." + e.getMessage(),e);
      throw new CloudRuntimeException("Unable to discover legacy zones." + e.getMessage(),e);
    }
  }
 catch (  SQLException e) {
    s_logger.error("Unable to discover legacy zones." + e.getMessage(),e);
    throw new CloudRuntimeException("Unable to discover legacy zones." + e.getMessage(),e);
  }
}
