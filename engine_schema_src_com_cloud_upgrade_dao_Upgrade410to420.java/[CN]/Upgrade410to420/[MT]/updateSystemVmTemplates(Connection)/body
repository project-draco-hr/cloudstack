{
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  boolean xenserver=false;
  boolean kvm=false;
  boolean VMware=false;
  boolean Hyperv=false;
  boolean LXC=false;
  s_logger.debug("Updating System Vm template IDs");
  try {
    try {
      pstmt=conn.prepareStatement("select distinct(hypervisor_type) from `cloud`.`cluster` where removed is null");
      rs=pstmt.executeQuery();
      while (rs.next()) {
        if ("XenServer".equals(rs.getString(1))) {
          xenserver=true;
        }
 else         if ("KVM".equals(rs.getString(1))) {
          kvm=true;
        }
 else         if ("VMware".equals(rs.getString(1))) {
          VMware=true;
        }
 else         if ("Hyperv".equals(rs.getString(1))) {
          Hyperv=true;
        }
 else         if ("LXC".equals(rs.getString(1))) {
          LXC=true;
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while listing hypervisors in use",e);
    }
    s_logger.debug("Updating XenSever System Vms");
    try {
      pstmt=conn.prepareStatement("select id from `cloud`.`vm_template` where name like 'systemvm-xenserver-4.2' and removed is null order by id desc limit 1");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_template` set type='SYSTEM' where id = ?");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = 'XenServer'");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'router.template.xen', 'systemvm-xenserver-4.2', 'Name of the default router template on Xenserver')");
        pstmt.execute();
        pstmt.close();
      }
 else {
        if (xenserver) {
          throw new CloudRuntimeException("4.2.0 XenServer SystemVm template not found. Cannot upgrade system Vms");
        }
 else {
          s_logger.warn("4.2.0 XenServer SystemVm template not found. XenServer hypervisor is not used, so not failing upgrade");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while updating XenServer systemVm template",e);
    }
    s_logger.debug("Updating KVM System Vms");
    try {
      pstmt=conn.prepareStatement("select id from `cloud`.`vm_template` where name = 'systemvm-kvm-4.2' and removed is null order by id desc limit 1");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_template` set type='SYSTEM' where id = ?");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = 'KVM'");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'router.template.kvm', 'systemvm-kvm-4.2', 'Name of the default router template on KVM')");
        pstmt.execute();
        pstmt.close();
      }
 else {
        if (kvm) {
          throw new CloudRuntimeException("4.2.0 KVM SystemVm template not found. Cannot upgrade system Vms");
        }
 else {
          s_logger.warn("4.2.0 KVM SystemVm template not found. KVM hypervisor is not used, so not failing upgrade");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while updating KVM systemVm template",e);
    }
    s_logger.debug("Updating VMware System Vms");
    try {
      pstmt=conn.prepareStatement("select id from `cloud`.`vm_template` where name = 'systemvm-vmware-4.2' and removed is null order by id desc limit 1");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_template` set type='SYSTEM' where id = ?");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = 'VMware'");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'router.template.vmware', 'systemvm-vmware-4.2', 'Name of the default router template on Vmware')");
        pstmt.execute();
        pstmt.close();
      }
 else {
        if (VMware) {
          throw new CloudRuntimeException("4.2.0 VMware SystemVm template not found. Cannot upgrade system Vms");
        }
 else {
          s_logger.warn("4.2.0 VMware SystemVm template not found. VMware hypervisor is not used, so not failing upgrade");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while updating VMware systemVm template",e);
    }
    s_logger.debug("Updating Hyperv System Vms");
    try {
      pstmt=conn.prepareStatement("select id from `cloud`.`vm_template` where name = 'systemvm-hyperv-4.2' and removed is null order by id desc limit 1");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_template` set type='SYSTEM' where id = ?");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = 'Hyperv'");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'router.template.hyperv', 'systemvm-hyperv-4.2', 'Name of the default router template on Hyperv')");
        pstmt.execute();
        pstmt.close();
      }
 else {
        if (Hyperv) {
          throw new CloudRuntimeException("4.2.0 HyperV SystemVm template not found. Cannot upgrade system Vms");
        }
 else {
          s_logger.warn("4.2.0 Hyperv SystemVm template not found. Hyperv hypervisor is not used, so not failing upgrade");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while updating Hyperv systemVm template",e);
    }
    s_logger.debug("Updating LXC System Vms");
    try {
      pstmt=conn.prepareStatement("select id from `cloud`.`vm_template` where name = 'systemvm-lxc-4.2' and removed is null order by id desc limit 1");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_template` set type='SYSTEM' where id = ?");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = 'LXC'");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement("INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'router.template.lxc', 'systemvm-lxc-4.2', 'Name of the default router template on LXC')");
        pstmt.execute();
        pstmt.close();
      }
 else {
        if (LXC) {
          throw new CloudRuntimeException("4.2.0 LXC SystemVm template not found. Cannot upgrade system Vms");
        }
 else {
          s_logger.warn("4.2.0 LXC SystemVm template not found. LXC hypervisor is not used, so not failing upgrade");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException("Error while updating LXC systemVm template",e);
    }
    s_logger.debug("Updating System Vm Template IDs Complete");
  }
  finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}
