@attr(tags=['simulator', 'advanced', 'guestvlanrange', 'dedicate', 'release'])
def test_dedicateGuestVlanRange(self):
    'Test guest vlan range dedication\n        '
    'Assume a physical network is available\n        '
    self.debug('Listing available physical network')
    list_physical_network_response = PhysicalNetwork.list(self.apiclient)
    self.assertEqual(isinstance(list_physical_network_response, list), True, 'Check for list guest vlan range response')
    physical_network_response = list_physical_network_response[0]
    self.debug('Adding guest vlan range')
    addGuestVlanRangeResponse = physical_network_response.update(self.apiclient, id=physical_network_response.id, vlan='387-390')
    self.debug('Dedicating guest vlan range')
    dedicate_guest_vlan_range_response = PhysicalNetwork.dedicate(self.apiclient, '387-390', physicalnetworkid=physical_network_response.id, account=self.account.name, domainid=self.account.domainid)
    list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient, id=dedicate_guest_vlan_range_response.id)
    dedicated_guest_vlan_response = list_dedicated_guest_vlan_range_response[0]
    self.assertEqual(dedicated_guest_vlan_response.account, self.account.name, 'Check account name is in listDedicatedGuestVlanRanges as the account the range is dedicated to')
    self.debug('Releasing guest vlan range')
    dedicated_guest_vlan_response.release(self.apiclient)
    list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient, id=dedicate_guest_vlan_range_response.id)
    dedicated_guest_vlan_response = list_dedicated_guest_vlan_range_response[0]
    self.assertEqual(dedicated_guest_vlan_response.account, 'system', 'Check account name is system account in listDedicatedGuestVlanRanges')
    self.debug('Removing guest vlan range')
    removeGuestVlanRangeResponse = physical_network_response.update(self.apiclient, id=physical_network_response.id, removevlan='387-390')
