{
  try {
    logRequest(request);
    String cloudAction=request.getParameter("Action");
    if (!isS3APIEnabled) {
      throw new RuntimeException("Amazon S3 API is disabled.");
    }
    if (null != cloudAction) {
      if (cloudAction.equalsIgnoreCase("SetUserKeys")) {
        setUserKeys(request,response);
        return;
      }
      if (cloudAction.equalsIgnoreCase("SetCertificate"))       return;
      if (cloudAction.equalsIgnoreCase("CloudS3Version")) {
        cloudS3Version(request,response);
        return;
      }
    }
    if (!((method.equalsIgnoreCase("POST") && !(request.getQueryString().equalsIgnoreCase("delete"))))) {
      S3AuthParams params=extractRequestHeaders(request);
      authenticateRequest(request,params);
    }
    ServletAction action=routeRequest(request);
    if (action != null) {
      action.execute(request,response);
    }
 else {
      response.setStatus(404);
      endResponse(response,"File not found");
    }
    PersistContext.commitTransaction();
  }
 catch (  InvalidBucketName e) {
    PersistContext.rollbackTransaction();
    logger.error("Unexpected exception " + e.getMessage(),e);
    response.setStatus(400);
    endResponse(response,"Invalid Bucket Name - " + e.toString());
  }
catch (  PermissionDeniedException e) {
    PersistContext.rollbackTransaction();
    logger.error("Unexpected exception " + e.getMessage(),e);
    response.setStatus(403);
    endResponse(response,"Access denied - " + e.toString());
  }
catch (  Throwable e) {
    PersistContext.rollbackTransaction();
    logger.error("Unexpected exception " + e.getMessage(),e);
    response.setStatus(404);
    endResponse(response,"Bad request");
  }
 finally {
    try {
      response.flushBuffer();
    }
 catch (    IOException e) {
      logger.error("Unexpected exception " + e.getMessage(),e);
    }
    PersistContext.closeSession();
  }
}
