@attr(tags=['advanced', 'basic', 'multihosts', 'explicitdedication'])
def test_01_deploy_vm_with_explicit_dedication(self):
    'Test explicit dedication is placing vms of an account on dedicated hosts.\n        '
    all_hosts = list_hosts(self.apiclient, type='Routing')
    empty_host = None
    for host in all_hosts:
        vms_on_host = list_virtual_machines(self.api_client, hostid=host.id)
        if (not vms_on_host):
            empty_host = host
            break
    if empty_host:
        self.skipTest('Did not find any empty hosts, Skipping')
    agCmd = createAffinityGroup.createAffinityGroupCmd()
    agCmd.name = 'explicit-affinity'
    agCmd.displayText = 'explicit-affinity'
    agCmd.account = self.account.name
    agCmd.domainid = self.account.domainid
    agCmd.type = self.services['virtual_machine']['affinity']['type']
    self.apiclient.createAffinityGroup(agCmd)
    dedicateCmd = dedicateHost.dedicateHostCmd()
    dedicateCmd.hostid = empty_host.id
    dedicateCmd.domainid = self.domain.id
    self.apiclient.dedicateHost(dedicateCmd)
    vm = VirtualMachine.create(self.api_client, self.services['small'], accountid=self.account.name, domainid=self.account.domainid, serviceofferingid=self.small_offering.id, affinitygroupnames=['explicit-affinity'], mode=self.services['mode'])
    list_vm_response = list_virtual_machines(self.apiclient, id=vm.id)
    vm_response = list_vm_response[0]
    self.assertEqual(vm_response.hostid, empty_host.id, 'Check destination hostID of deployed VM')
    releaseCmd = releaseDedicatedHost.releaseDedicatedHostCmd()
    releaseCmd.hostid = empty_host.id
    releaseCmd.domainid = self.domain.id
    self.apiclient.releaseDedicatedHost(releaseCmd)
    return
