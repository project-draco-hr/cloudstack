{
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and("dc",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and("account",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and("role",AllFieldsSearch.entity().getRole(),Op.EQ);
  AllFieldsSearch.and("domainId",AllFieldsSearch.entity().getDomainId(),Op.EQ);
  AllFieldsSearch.and("host",AllFieldsSearch.entity().getHostId(),Op.EQ);
  AllFieldsSearch.and("lastHost",AllFieldsSearch.entity().getLastHostId(),Op.EQ);
  AllFieldsSearch.and("state",AllFieldsSearch.entity().getState(),Op.EQ);
  AllFieldsSearch.and("states",AllFieldsSearch.entity().getState(),Op.IN);
  SearchBuilder<RouterNetworkVO> joinRouterNetwork=_routerNetworkDao.createSearchBuilder();
  joinRouterNetwork.and("networkId",joinRouterNetwork.entity().getNetworkId(),Op.EQ);
  AllFieldsSearch.join("networkRouter",joinRouterNetwork,joinRouterNetwork.entity().getRouterId(),AllFieldsSearch.entity().getId(),JoinType.INNER);
  AllFieldsSearch.and("podId",AllFieldsSearch.entity().getPodIdToDeployIn(),Op.EQ);
  AllFieldsSearch.and("elementId",AllFieldsSearch.entity().getElementId(),Op.EQ);
  AllFieldsSearch.and("vpcId",AllFieldsSearch.entity().getVpcId(),Op.EQ);
  AllFieldsSearch.done();
  VpcSearch=createSearchBuilder();
  VpcSearch.and("role",VpcSearch.entity().getRole(),Op.EQ);
  VpcSearch.and("vpcId",VpcSearch.entity().getVpcId(),Op.EQ);
  VpcSearch.done();
  IdNetworkIdStatesSearch=createSearchBuilder();
  IdNetworkIdStatesSearch.and("id",IdNetworkIdStatesSearch.entity().getId(),Op.EQ);
  SearchBuilder<RouterNetworkVO> joinRouterNetwork1=_routerNetworkDao.createSearchBuilder();
  joinRouterNetwork1.and("networkId",joinRouterNetwork1.entity().getNetworkId(),Op.EQ);
  IdNetworkIdStatesSearch.join("networkRouter",joinRouterNetwork1,joinRouterNetwork1.entity().getRouterId(),IdNetworkIdStatesSearch.entity().getId(),JoinType.INNER);
  IdNetworkIdStatesSearch.and("states",IdNetworkIdStatesSearch.entity().getState(),Op.IN);
  IdNetworkIdStatesSearch.done();
  HostUpSearch=createSearchBuilder();
  HostUpSearch.select(null,Func.DISTINCT,HostUpSearch.entity().getId());
  HostUpSearch.and("host",HostUpSearch.entity().getHostId(),Op.EQ);
  HostUpSearch.and("states",HostUpSearch.entity().getState(),Op.NIN);
  SearchBuilder<RouterNetworkVO> joinRouterNetwork3=_routerNetworkDao.createSearchBuilder();
  joinRouterNetwork3.and("networkId",joinRouterNetwork3.entity().getNetworkId(),Op.EQ);
  joinRouterNetwork3.and("type",joinRouterNetwork3.entity().getGuestType(),Op.EQ);
  HostUpSearch.join("networkRouter",joinRouterNetwork3,joinRouterNetwork3.entity().getRouterId(),HostUpSearch.entity().getId(),JoinType.INNER);
  HostUpSearch.done();
  StateNetworkTypeSearch=createSearchBuilder();
  StateNetworkTypeSearch.select(null,Func.DISTINCT,StateNetworkTypeSearch.entity().getId());
  StateNetworkTypeSearch.and("state",StateNetworkTypeSearch.entity().getState(),Op.EQ);
  SearchBuilder<RouterNetworkVO> joinRouterNetwork4=_routerNetworkDao.createSearchBuilder();
  joinRouterNetwork4.and("networkId",joinRouterNetwork4.entity().getNetworkId(),Op.EQ);
  joinRouterNetwork4.and("type",joinRouterNetwork4.entity().getGuestType(),Op.EQ);
  StateNetworkTypeSearch.join("networkRouter",joinRouterNetwork4,joinRouterNetwork4.entity().getRouterId(),StateNetworkTypeSearch.entity().getId(),JoinType.INNER);
  SearchBuilder<HostVO> joinHost=_hostsDao.createSearchBuilder();
  joinHost.and("mgmtServerId",joinHost.entity().getManagementServerId(),Op.EQ);
  StateNetworkTypeSearch.join("host",joinHost,joinHost.entity().getId(),StateNetworkTypeSearch.entity().getHostId(),JoinType.INNER);
  StateNetworkTypeSearch.done();
  OutsidePodSearch=createSearchBuilder();
  SearchBuilder<RouterNetworkVO> joinRouterNetwork2=_routerNetworkDao.createSearchBuilder();
  joinRouterNetwork2.and("networkId",joinRouterNetwork2.entity().getNetworkId(),Op.EQ);
  OutsidePodSearch.join("networkRouter",joinRouterNetwork2,joinRouterNetwork2.entity().getRouterId(),OutsidePodSearch.entity().getId(),JoinType.INNER);
  OutsidePodSearch.and("podId",OutsidePodSearch.entity().getPodIdToDeployIn(),Op.NEQ);
  OutsidePodSearch.and("state",OutsidePodSearch.entity().getState(),Op.EQ);
  OutsidePodSearch.and("role",OutsidePodSearch.entity().getRole(),Op.EQ);
  OutsidePodSearch.done();
}
